SegmentReader.getFieldNames ignores FieldOption.DOC VALUES
we use this getFieldNames api in segmentmerger if we merge something that isn t a SegmentReader e.g. FilterIndexReader it looks to me that if you use a FilterIndexReader call addIndexes Reader... the docvalues will be simply dropped. I dont think its enough to just note that the field has docvalues either right We need to also set the type correctly in the merged field infos This would imply that instead of FieldOption.DOCVALUES we need to have a FieldOption for each ValueType so that we correctly update the type. But looking at FI.update setDocValues it doesn t look like we type-promote here anyway attached is a basic test calling addIndexes with two SlowMultiReaderWrappers. the docvalues fields are dropped. it would be good to also add a test doing addIndexes FIR that returns null or non-SR leaves that mixes the dv types to test the type promotion too. also on a general note i don t like how we don t test this addIndexes FIR stuff very well and i don t like the FieldOption api that it uses for this its really just a duplicate of the FieldInfos api in my opinion. long term I think we should somehow test this better by doing addIndexes SlowMultiReaderWrapper segment ... behind the scenes in RandomIndexWriter maybe in 4.0 try to clean up FieldInfos and have IR return it nuking this FieldOption API so that we dont have two different ways we merge here s a hack patch don t think its committable fixing the bug. i also modified TestTypePromotion to sometimes do addIndexes with SlowMR and its passing. But i m still left confused as to how or if fieldinfos is correct in this type-promotion case who sets it to the new merged type maybe in 4.0 try to clean up FieldInfos and have IR return it nuking this FieldOption API so that we dont have two different ways we merge I feel in the long term this is the best way to go. FieldOption just feels like another way to describe field properties and we already have a few of those. patch cleaning up and removing the nocommit. I see whats going on now IDV as a side effect when merging changes the fieldinfo if necessary... this was what I was missing before. I think this has to do with how merging type promotion works in IDV it seems type promotion is extendable by the codec but I m not sure it should be I think it should be part of the abstract API and well-defined. But thats refactoring discussion for another issue for now I d like to commit this to fix the dataloss bug. I ll commit tomorrow if there are no objections. just s PreFlex Lucene3x for the addIndexes test. swapping in SlowMultiReaderWrapper to TestTypePromotion found another bug ant test -Dtestcase TestTypePromotion -Dtestmethod testSortedPromoteBytes -Dtests.seed -24103e6738f06f67 38ea1a30b9f51fea 224bf9f223d1a4c6 -Dargs -Dfile.encoding UTF-8 Don t know whats going on here. swapping in SlowMultiReaderWrapper to TestTypePromotion found another bug that is because SMRW returns MultiSource which doesn t support asSortedSource maybe we should throw an exception here 1 at a glance it wasn t obvious to me what caused the NPE. So a clear exception would be a big improvement. MultiSource should just override asSortedSource and throw an unsupportedOperationException. I committed this to trunk and opened an issue for the Multi SortedSource stuff. MultiSource should just override asSortedSource and throw an unsupportedOperationException. This means you cannot use PKIndexSplitter and MultiPassIndexSplitter with docValues We should open another issue to make it work per-segment by implementing a per-segment FilteredReader which is possible. Currently it wraps the source index by a SlowMultiReaderWrapper. This means you cannot use PKIndexSplitter and MultiPassIndexSplitter with docValues Not totally since this commit most docvalues will work for those cases just not the SORTED BYTES variants.
