separate IndexDocValues interface from implementation
Currently the o.a.l.index.values contains both the abstract apis and Lucene40 s current implementation. I think we should move the implementation underneath Lucene40Codec leaving only the abstract apis. For example simpletext might have a different implementation and we might make a int8 implementation underneath preflexcodec to support norms. patch will look kinda wierd due to svn moves thats all i did . DirectSource IndexDocValues MultiIndexDocValues PerDocFieldValues SourceCache TypePromoter and ValueType stayed as the abstract api and everything else moved to Lucene40Codec. 1 go for it robert while you are on it I think we should rename IndexDocValues to DocValues. I think the confusion with org.apache.lucene.queries.function.DocValues doesn t exist anymore since its now in modules. The Core class should be a the first class citizen here. Does that really remove the confusion Not sure I agree with that. It does kind of suck we have this clash...I don t know that IndexDocValues even makes it much better. I think it does we need to use the simplest naming possible within the core api especially for core index features . Just like we have Field and there is java.lang.reflect.Field and Document and there is org.w3c.dom.Document and we use Term and other short names. I agree with Robert and Simon we should have simpliest name DocValues . The function stuff is in my opinion already named wrongly I hate e.g. ValueSource this name should die die die - and this one creates confusion everywhere Its two different points 1. Does it remove the confusion - I don t agree that it does. 2. Should the core api get the simplest name. To the function naming being completely off. That s the naming that should change. And as I said calling it IndexDocValues doesn t really help the confusion matter IMO. I think it does we need to use the simplest naming possible within the core api especially for core index features . Heh - thats not an argument that it removes the confusion just because its now part of a module. Thats an argument that we should name it DocValues regardless. And as I said calling it IndexDocValues doesn t really help the confusion matter IMO. a bit of history I hope I recall correctly... we had some arguments when merging from the docvalues branch into trunk that the name is easy to be confused with DocValues in the function package since they are both in core. This is where my statement comes from. For now in the branch https svn.apache.org repos asf lucene dev branches lucene3622 i renamed shuffled in r1212506. You can take a look and see what you think... we can should always be thinking of naming and how it can be simpler. With separating out the abstract api its small enough I moved it out of .values to just org.apache.lucene.index which makes IndexDocValues seem awefully redundant . Additionally PerDocValues was moved out of the codecs package as you get it from IndexReader and it doesnt make sense under .codecs. Finally ValueType is DocValues.Type just like DocValues.Source etc and TypePromoter is now pkg-private as its just an implementation detail of SegmentMerger. we had some arguments when merging from the docvalues branch into trunk that the name is easy to be confused with DocValues in the function package since they are both in core. This is where my statement comes from. Yeah I got that. I wasn t involved in that discussion but if I was I would have argued that calling it IndexDocValues didn t help the situation much and we should have just kept it as DocValues anyway. I just don t think because a class moves to another lucene component that it helps the situation any. I still consider modules first class. I d also have argued that in 4 we should rename the function DocValues class to something else. It s advanced to mess in that area and people can handle a change in a move to 4. I d also have argued that in 4 we should rename the function DocValues class to something else. It s advanced to mess in that area and people can handle a change in a move to 4. Should we try this out in the branch here what would be a better name FunctionValues 1 for FunctionValues 1 There is more to be done here but I d like to merge the work so far to trunk to make maintenance easier. the following classes are renamed IndexDocValues - DocValues ValueType - DocValues.Type PerDocFieldValues - DocValue function s DocValues - FunctionValues DocValues classes are no longer in o.a.l.index.values instead the general classes only 4 or so are in o.a.l.index. The lucene40-implementation dependent classes are now underneath lucene40 codec. PerDocValues is only held by the core and not exposed to IndexReader. Its renamed to PerDocProducer consistent with PerDocConsumer . IndexReader only has DocValues docValues String field as its api. MultiPerDocValues is removed as its not exposed and there is only MultiDocValues. SortedSource doesn t require that you exposed a packed-ints reader you might not implement things that way. Instead it has a hasPacked method so that sorting can optimize in case you do have it. FieldInfo no longer has a transactional API for setting term vectors or docvalues information the problem was that we could end out with extra files if there was an exception and only that document needed them. Instead of a commit revert thing it just sets them after it successfully indexes. Type promotion is moved from the codec implementation to SegmentMerger. Because of this SegmentMerger no longer lies to other codec components about the fieldinfos with DocValues changing them behind the scenes instead it computes fieldinfos up front writes them to disk and codecs see the real fieldinfos . This also means like merging of other lucene type information our type promotion across incompatible docvalues types is well-defined instead of being implementation-dependent. Some unused unnecessary dead methods code in the abstract apis are removed. CheckIndex has lots more checking for docvalues and norms too .
