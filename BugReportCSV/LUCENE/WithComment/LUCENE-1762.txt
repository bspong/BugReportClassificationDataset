Slightly more readable code in Token TermAttributeImpl
No big deal. growTermBuffer int newSize was using correct but slightly hard to follow code. the method was returning null as a hint that the current termBuffer has enough space to the upstream code or reallocated buffer. this patch simplifies logic making this method to only reallocate buffer nothing more. It reduces number of if null checks in a few methods and reduces amount of code. all tests pass. This also adds tests for the new basic attribute impls copies of the Token tests . As Token is not yet deprecated I think this patch should also apply to Token.java Can you prepare that too This is important because if the backwards-compatibility layer is enabled with setOnlyUseNewAPI false the TermAttributeImpl is never used and a Token instance is used instead - if no tests fail this may also be the case - made the changes in Token along the same lines had to change one constant in TokenTest as I have changed initial allocation policy of termBuffer to be consistent with Arayutils.getnextSize if termBuffer null NEW termBuffer new char ArrayUtil.getNextSize newSize MIN BUFFER SIZE MIN BUFFER SIZE newSize OLD termBuffer new char newSize MIN BUFFER SIZE MIN BUFFER SIZE newSize not sure if this is better but looks more consistent to me buffer size is always determined via getNewSize Uwe setOnlyUseNewAPI false does not exist it was removed with some of the patches lately. It gets automatically detected via reflection made allocation in initTermBuffer consistent with ArrayUtil.getNextSize int - this is ok not to start with MIN BUFFER SIZE but rather with ArrayUtil.getNextSize MIN BUFFER SIZE ... e.g. if getNextSize gets very sensitive to initial conditions one day... null-ed termText on switch to termBuffer in resizeTermBuffer as it was before . This was a bug in previous patch setOnlyUseNewAPI false does not exist it was removed with some of the patches lately. It gets automatically detected via reflection No this is a static global switch in TokenStream. If you switch it on TokenStreams and Filters use only the new API forcefully and therefore use the separate Attribute implementations from o.a.l.analysis.tokenattributes. If it is switched off a old Token instance is used instead see http hudson.zones.apache.org hudson job Lucene-trunk javadoc core org apache lucene analysis TokenStream.html setOnlyUseNewAPI boolean . The red color bug is fixed in trunk now There is one problem with the 6 new single attribute instances They are code duplicates from Token but have no Test. I also think I should add a missing test similar to TestToken.java and do the same test with 6 Attribute instances. I will review the other changes later I have no time today. Extended patch. It adds also tests for the basic attributes in trunk only token was tested . The new tests check every impls basic functionality and clone copyTo. It also contains the buffer tests of Token for TermAttribute. To apply the patch you must first do a svn copy src test org apache lucene analysis TestToken.java src test org apache lucene analysis tokenattributes TestTermAttributeImpl.java It also modified the AttributeImpls default toString to only print instance fields not static fields. Eks the original patch looked good I did not change anything in your code I only added the above mentioned tests and other changes. One thing As TestToken checks the buffer sizes the test in the backwards-branch for Token must also be changed. I will do this before commit. cool thanks for the review. Here the modified BW-test to apply on backwards-branch. It respects the new default buffer size. Slightly modified patch some small refactoring . I also fixed a bug in Token because the Payload was not deep cloned in copyTo which is done by the simple attributes and needed for restoring the state in AttributeSource. Also added tests for this. I think it is ready for commit. I will do this in a day or two. Committed revision 799025 This is without CHANGES.txt updates because nothing was changed that is visible to the outside Thanks Eks 
