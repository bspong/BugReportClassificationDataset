Add sort-by-term with DocValues
There are two sorted byte types with DocValues BYTES VAR SORTED BYTES FIXED SORTED so you can index this type but you can t yet sort by it. So I added a FieldComparator just like TermOrdValComparator except it pulls from the doc values instead. There are some small diffs eg with doc values there are never null values see LUCENE-3504 . Patch. New patch I also added TermValDocValuesComparator so you can sort-by-string when you indexed the non-sorted byte doc values types var fixed X straight deref . This is slower since it aways does a .compareTo on each ByteRef instead of using pre-sorted ords... but for some apps this is a good tradeoff. This mirrors the two sort-by-Term field comparators we have for field cache . I also cleaned up how we handle segments that had no doc values this isn t necessarily an error condition because it could be the current search doesn t hit any docs in this segment. I added methods in IndexDocValues to get a Source or SortedSource that always returns the default value for the type. I think this is ready mike this looks good while I am not sure I understand all the comparators. I didn t look at it for too long but maybe you can add some comments how those readerGen arrays work there is one nocommit left in the patch though. I think you should go ahead though simon mike I looked at it again and found this api addition. You return a PackedInts.Reader from getDocToOrd on SortedSource Returns the PackedInts.Reader impl that maps document to ord. public PackedInts.Reader getDocToOrd return null this seems to be very specific to in-memory docvalues while we don t support direct source here. Can we maybe extract an interface from PackedInts.Reader RandomAccessReaderIterator those are already very similar so we can simply use the reader interface for both on-disk and in-memory variants. then I think this API addition is fine. I don t like apis which are in-mem on-disk only. Thanks Simon I ll fix the nocommit and add some comments.. the ord BytesRef comparators are tricky... this seems to be very specific to in-memory docvalues while we don t support direct source here. Hmm true though I suspect sorting by a direct source will be rather slow. Still I agree we should support it for completeness. Can we maybe extract an interface from PackedInts.Reader RandomAccessReaderIterator those are already very similar so we can simply use the reader interface for both on-disk and in-memory variants. OK I like your idea of using PackedInts.Reader for on-disk and in-memory variants you shouldn t have to pull an enum from PackedInts if you just need the disk-based get. I ll open a new issue to do that refactoring first I think we can remove the PackedInts.RandomAccessReaderIterator if we just let the Reader.get throw IOE Lemme try to work up a patch. Patch syncing to trunk and making it possible to sort off a direct source though I don t think this is that useful in practice . I think it s ready.
