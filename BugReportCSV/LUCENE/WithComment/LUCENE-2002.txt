Add oal.util.Version ctor to QueryParser
This is a followup of LUCENE-1987 If somebody uses StandardAnalyzer with Version.LUCENE CURRENT and then uses QueryParser phrase queries will not work because the StopFilter enables position Increments for stop words but QueryParser ignores them per default. The user has to explicitely enable them. This issue would add a ctor taking the Version constant and automatically enable this setting. The same applies to the contrib queryparser. Eventually also StopAnalyzer should add this version ctor. To be able to remove the default ctor for 3.0 to remove a possible trap for users of QueryParser it must be deprecated and the new one also added to 2.9.1. Uwe I can take this if you want Have you started Take it I haven t started. During 1987 I also found a bug in Highlighter which is also not able to handle the posIncr of stopwords correctly. Add another issue Add another issue 1 Issue created Attached patch for 2.9..x I added required Version param to QueryParser MultiFieldQueryParser and ComplexPhraseQueryParser contrib which enable position increments when matchVersion LUCENE 19. For the deprecated ctors it defaults to Version.LUCENE 24 for back compat. Unfortunately JavaCC generates two public ctors for QueryParser one taking CharStream another taking QueryParserTokenManager that I don t know how to override to take a Version param. Mike saw a couple of these and laughed a little param matchVersion Lucene version to patch this is passed through to QueryParser. Eek My fingers are doing the thinking apparently Been typing that word a bit too much I ll fix. Thanks. I think we need more doc as well - stopfilter is not just tied to standardanalyzer - standardanalyzer just happens to use it. Many analyzers can use a stopfilter and one of the stopfilters params is to enable or disable this setting. Unfortunately JavaCC generates two public ctors for QueryParser one taking CharStream another taking QueryParserTokenManager that I don t know how to override to take a Version param. Those two constructors are bad anyway b c if anyone calls them it won t set the Analyzer etc. Thus I think unfortunately the answer just might be to edit the generated Java file by hand and make them be protected. I ve looked through the JavaCC docs and I don t see any other way. Of course the big down side to this is we now need to do this going forward. Thus I think unfortunately the answer just might be to edit the generated Java file by hand and make them be protected. OK I ll take that approach and I guess make a unit test that peeks confirms these methods are still protected to catch us in the future . Many analyzers can use a stopfilter and one of the stopfilters params is to enable or disable this setting. In fact I think we may have to un-deprecate StopFilter.get setEnablePositionIncrementsDefault for this reason Many analyzers do embed StopFilter without exposing control over this setting and so the only way up to including 2.9 to change the setting is to set the static default with StopFilter. If we remove that then we ve taken that control away. Or with this issue I could add Version to all contrib analyzers that embed StopFilter. I think I like that solution better we shouldn t be using static defaults . I ll go forward w that shortly unless any objections come up... this d also take care of analyzers that use StandardTokenizer ie we ll control fixing the acronym bug with Version as well . Or with this issue I could add Version to all contrib analyzers that embed StopFilter. I think I like that solution better we shouldn t be using static defaults . I ll go forward w that shortly unless any objections come up... this d also take care of analyzers that use StandardTokenizer ie we ll control fixing the acronym bug with Version as well . Michael if you do this can you mark LUCENE-1373 as resolved Michael if you do this can you mark LUCENE-1373 as resolved Ahh yes indeed. Is there a corresponding issue about not being able to control stop filter pos incr Can t keep track of all these issues anymore Ahh yes indeed. Is there a corresponding issue about not being able to control stop filter pos incr Can t keep track of all these issues anymore Michael what about LUCENE-1258 Michael what about LUCENE-1258 Oh yeah and look who opened that one I ll go resolve as a dup of this one. OK I ll take that approach and I guess make a unit test that peeks confirms these methods are still protected to catch us in the future . We may want to see if it can be automated in the ANT task so that we don t have to remember to do it by hand each time. We may want to see if it can be automated in the ANT task so that we don t have to remember to do it by hand each time. That would be fabulous but is way beyond my ant skills Any ant pros out there want to try Eric Hatcher Maybe the search-replace with regex functionality can do it. see http ant.apache.org manual OptionalTasks replaceregexp.html Maybe the search-replace with regex functionality can do it. Excellent That worked like a charm. I ll still leave the unit test in place to catch us if this fails... Cool. Did you check the minimum ANT version needed for this If the current BUILD.txt minimum does not fit we shoudl update the build docs. My problem I didn t found the minimum version for replaceregexp in the docs. I think we are good I just looked 1.6.3 s javadocs we specify ant 1.6.3 in BUILD.txt and it s got the replaceregexp task. New patch attached. All tests pass. Changes Fixed the patch - match typo Fixed build.xml to make 2 autogen d by JavaCC public QueryParser ctors protected and added unit test to assert this Added Version matchVersion param to all I think contrib analyzers that instantiate either StandardTokenizer to manage changing the fix invalid acronym setting across versions or StopFilter to manage enable pos incr setting across versions or both and threaded it down to StandardTokenizer StopFilter I didn t add Version to StopFilter nor StopAnalyzer I think it s better to up-front require the enablePositionIncrements to their ctors. Looks good. I didn t add Version to StopFilter nor StopAnalyzer I think it s better to up-front require the enablePositionIncrements to their ctors. I would add it to StopAnalyzer StopFilter is not so important because low-level . But that s my opinion. I m getting errors applying this but they look like they are just in the javadoc comments.. I m getting errors applying this but they look like they are just in the javadoc comments.. Are the patch errors near the Id tags Which we ve removed from trunk for this reason . I would add it to StopAnalyzer OK I ll add. Yes they are near the Id tags. That s kind of an odd error though. At any rate I m running the tests now. They only appear with native patch. All higher-level svn related patch impls know this. I think bekause oth this they were removed in trunk. 1 on this patch. I am happy to then use the merge operations in SVN tru apply this in trunk 1 from my side New patch adding Version to StopAnalyzer as well. Thanks for reviewing Ð I ll commit in a bit I am happy to then use the merge operations in SVN tru apply this in trunk Are you offering to port this to trunk That d be nice I wasn t looking forward to that part Note that on trunk it ll be fairly difference since we ll remove not deprecate the old methods and we have to go fix all usage of the deprecated APIs eg in tests contrib which I haven t done which I haven t done for 2.9 . I know this problem of trunk. But the first step is to merge the changes in and then remove the deprecated parts again. Then fixing of tests which may be many as QueryParser is used almost everywhere. Maybe we can split contrib core. Actually to port to trunk I was going svn merge remove conflicts remove merged in but deprecated methods then fix all resulting compilation test errors. I ll try to do this myself... wish me luck I m only using emacs over here Patch for trunk I plan to commit soon... A mega patch one thing The highlighter testcase uses a separate constant for the version. My idea was to iterate over all version constants and run the test several times to test all combinations. So the QueryParser ctors should also use the TEST VERSION constant so that it can be easily updated to do the testing for various versions. So the QueryParser ctors should also use the TEST VERSION constant so that it can be easily updated to do the testing for various versions. Good idea Ð I ll fix For Lucene 2.9 the deafult in StopFilter is not controlable if you use the no-arg Analyzer ctor. There was the previous static setter in StopFilter which is now without any use. Attached patch fixes this to return ENABLE POSITION INCREMENTS DEFAULT in getEnablePositionIncrementsVersionDefault for all versions 2.9 Patch looks good Uwe thanks I reopened it - I resolve it At revision 830910 Bulk close all 2.9.1 issues.
