ArrayIndexOutOfBoundsException when using MultiFieldQueryParser
We get the following exception Exception in thread main java.lang.ArrayIndexOutOfBoundsException -1 at java.util.Vector.elementAt Vector.java 434 at org.apache.lucene.queryParser.QueryParser.addClause QueryParser.java 181 at org.apache.lucene.queryParser.QueryParser.Query QueryParser.java 529 at org.apache.lucene.queryParser.QueryParser.parse QueryParser.java 108 at org.apache.lucene.queryParser.QueryParser.parse QueryParser.java 87 at org.apache.lucene.queryParser.MultiFieldQueryParser.parse MultiFieldQueryParser.java 77 at idx.Mquery.main Mquery.java 64 We are using a query with AND like bla AND blo on 5 fields. One of the fields has a Tokenizer which returns no token at all on this query and this together with the AND triggers the exception. Could you please either check if the problem persists with the latest version from subversion or submit a small test case that makes this easy to reproduce Created an attachment id 15035 Added a nullcheck for Query instances before adding to the multi clause. I wrote a unit test to try to recreate this issue with the latest trunk code. I see that the ArrayIndexOutofBounds issue is gone. However I do see null Queries are added to resulting Query when switching from the deprecated method by using the non-static parse method. After a little investigation I see that it is missing some null checks. Here is the unit test and attached is the modified source of MultiFieldQueryParser.java. public static void main String args throws Exception String fields new String f1 f2 f3 f4 f5 MultiFieldQueryParser parser new MultiFieldQueryParser fields new TestAnalyzer fields String qString bla AND blo Query q parser.parse qString System.out.println q static class TestAnalyzer extends Analyzer String defaultFields StandardAnalyzer std public TestAnalyzer String defaultFields defaultFields defaultFields std new StandardAnalyzer public TokenStream tokenStream String fieldName Reader reader if f1 .equals fieldName return new EmptyTokenStream else return std.tokenStream fieldName reader private static class EmptyTokenStream extends TokenStream public Token next throws IOException return null Created an attachment id 15036 merged the two idential implementations of getFieldQuery methods This attachment includes the changes in the previous patch 15035 The 2 getFieldQuery methods with different method signatures are implmented with identical code in that the Analyzer parameter is ignored. This attachment cleaned this up. John thanks for your examples. I have adapted your patch and committed it.
