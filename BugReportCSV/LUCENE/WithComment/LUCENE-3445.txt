Add SearcherManager to manage IndexSearcher usage across threads and reopens
This is a simple helper class I wrote for Lucene in Action 2nd ed. I d like to commit under Lucene contrib misc . It simplifies using reopening an IndexSearcher across multiple threads by using IndexReader s ref counts to know when it s safe to close the reader. In the process I also factored out a test base class for tests that want to make lots of simultaneous indexing and searching threads and fixed TestNRTThreads core TestNRTManager contrib misc and the new TestSearcherManager contrib misc to use this base class. This is great Mike I reviewed SearcherManager and have a comment about the TODO on whether or not to call warm in the ctor. If an extending class relies on some internal members to be initialized before warm can safely be called then this will lead to exceptions. I think that warm should not be called in the ctor or at least add a ctor which accepts a boolean doWarm while the other ctors call it with true . Calling warm in the ctor is useful if one wants to warm the IndexSearcher instance before SearcherManager is ready for use. So perhaps an additional ctor with the boolean gives the most flexibility. Also I remember there was a ctor which took IndexWriter to allow for an NRT-SearcherManager. What happened to it Mike would it be possible to merge the NRT and SearcherManager into one class manager or that maybe both implement the same interface Maybe we just shouldn t ever call warm from the ctor Caller can easily call warm themselves... we can just jdoc this. Also I remember there was a ctor which took IndexWriter to allow for an NRT-SearcherManager. What happened to it Right I removed it because we have NRTManager now. Mike would it be possible to merge the NRT and SearcherManager into one class manager or that maybe both implement the same interface Right they used to be merged.... we could consider merging them again NRTManager is more feature-full though because it offers add updateDocument s APIs that invoke the writer but return a long gen which you can then turnaround and pass to .get to ensure the returned searcher includes those changes. SearcherManager doesn t have notion... unless we somehow tie in the IndexReader.getVersion somehow I m torn... they seem different enough that maybe they should remain separate. Plus users usually know quite strongly if they use NRT or not and could pick the right manager accordingly... Caller can easily call warm themselves warm is protected. If you don t want to extend SearcherManager how would you ensure it s warmed-up after creation I removed it because we have NRTManager now Ok I wasn t aware of that. warm is protected. If you don t want to extend SearcherManager how would you ensure it s warmed-up after creation Well warm is a no-op if you don t extend SearcherManager so if you extend you d impl warm and then in your ctor you should call warm on the initial searcher if need be. Definitely trappy so we should jdoc that subclass s ctor must handle warming initial searcher.... Well warm is a no-op if you don t extend SearcherManager so if you extend you d impl warm and then in your ctor you should call warm on the initial searcher if need be. Definitely trappy so we should jdoc that subclass s ctor must handle warming initial searcher.... it seems pretty trappy to have this in the ctor though. Since this is a noop by default and it requires subclassing to do something with it it might be worth introducing a SearchWarmer interface and simply pass this interface into the ctor ie. have two ctors where by default we pass a noop warmer I like that approach we can then use that same interface for passing to NRTManager. I ll do that. New patch adds a SearcherWarmer interface also in contrib misc and switches Searcher NRTManager to accepting a warmer to their ctors instead of subclassing. I think it s ready for commit What are the different use cases for this and NRTManager I have a couple of smallish improvements to SearcherManager making the hottest method in SM non-blocking. I added a tryIncRef to index reader that makes is easier to work with IR refcounts in a non-blocking fashion. I also renamed SM get to SM acquire which seems to be more clear about what happens here also kind of stronger than get - so you d better release it . 1 Ð changes look great Nice to have .acquire be lock free. Committed the last patch in revision 1176772. Thanks for review mike. backported to 3.x in rev. 1176933 Thanks Simon Bulk close after release of 3.5
