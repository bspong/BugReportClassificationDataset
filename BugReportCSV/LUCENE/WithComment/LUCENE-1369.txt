Eliminate unnecessary uses of Hashtable and Vector
Lucene uses Vector Hashtable and Enumeration when it doesn t need to. Changing to ArrayList and HashMap may provide better performance. There are a few places Vector shows up in the API. IMHO List should have been used for parameters and return values. There are a few distinct usages of these classes internal but with ArrayList or HashMap would do as well. These can simply be replaced. internal and synchronization is required. Either leave as is or use a collections synchronization wrapper. As a parameter to a method where List or Map would do as well. For contrib just replace. For core deprecate current and add new method signature. Generated by JavaCC. All .jj files. Nothing to be done here. As a base class. Not sure what to do here. Only applies to SegmentInfos extends Vector but it is not used in a safe manner in all places. Perhaps implements List would be better. As a return value from a package protected method but synchronization is not used. Change return type. As a return value to a final method. Change to List or Map. In using a Vector the following iteration pattern is frequently used. for int i 0 i v.size i Object o v.elementAt This is an indication that synchronization is unimportant. The list could change during iteration. This patch looks good thanks DM The only issue I had was the addition of implements PrecedenceQueryParserConstants in PrecedenceQueryParser.jj public class PrecedenceQueryParser implements PrecedenceQueryParserConstants When I ran javacc 3.2 which apparently also inserts its own implements PrecedenceQueryParserConstants it failed to compile. I plan to commit in a day or two. Thanks DM Did we break our back compat guarantee here This changes some protected signatures in queryparser. If someone was overriding them which is what they are intended for dropping in the new jar could cause hard to track down silent changes the new method is called the old one you may have overridden is not . There is a similar issue with adding more expressive range query syntax that I plan to finish up so whats the verdict on these types of changes Might as well do as many at once as we can if we are going to do it. It s definitely iffy - that s why I didn t do these replacements in QueryParser when I did the others. Ugh that was definitely a break in back-compat Ð my bad. I missed that this change would mean we silently stop calling the Vector-based methods in subclasses. I ll send an email to java-user.
