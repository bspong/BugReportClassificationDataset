Improve performance of CharTermAttribute Impl and also fully implement Appendable
The Appendable.append CharSequence method in CharTermAttributes is good for general use. But like StringBuilder has for some common use cases specialized methods this does the same and adds separate append methods for String StringBuilder and CharTermAttribute itsself. This methods enable the compiler to directly link the specialized methods and don t use the instanceof checks. The unspecialized method only does the instanceof checks for longer CharSequences 8 chars else it simply iterates. This patch also fixes the required special null handling. append methods are required by Appendable to append null if the argument is null. I dont like this but its required. Maybe we should document that we dont dont support it. Otherwise JDK s formatter fails with formatting null. Attached the patch. This also makes all implementation methods in the implementation class final the non-deprecated new ones to help the hotspot optimizer. Also the tests were partly rewriten and one test bug removed. All tests pass. One thing I did not add methods taking start and end as parameter for the specialized cases. This is not even supported in StringBuilder or other java classes implementing Appendable. 1. This all seems great to me Only one question do we need the specialized case for CharTermAttribute really Seems a little specialized to append chartermatt s to each other but I think the String StringBuffer methods are good to add and great to have working fast Added an test for completely unknown long CharSequences that are not catched by instanceof checks in the general append method. Clover now reports 100 in this part. do we need the specialized case for CharTermAttribute really Why not maybe you do copyAttributes to put tokens away and then you want to append them In general StringBuilder also has a specialized append method for itsself. So it does not hurt and it is tested. Its somehow a duplicate to copyTo except it appends but this one only copies the buffer and not the whole attribute die Token die . I think at least I will hit that specialized case My filters glue some tokens together. Die hard-iterative-API die Improved patch I added a commented out perf test that was used to find the best maximum CharSequence length that is always faster than the instanceof checks in Appendable.append CSQ . Because of above tests I changed the max length to 4 I will commit this soon. Committed revision 935521 Bulk close for 3.1
