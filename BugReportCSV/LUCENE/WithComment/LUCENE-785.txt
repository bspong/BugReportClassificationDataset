RAMDirectory not Serializable
The current implementation of RAMDirectory throws a NotSerializableException when trying to serialize due to the inner class KeySet of HashMap not being serializable god knows why java.io.NotSerializableException java.util.HashMap KeySet at java.io.ObjectOutputStream.writeObject0 ObjectOutputStream.java 1081 Caused by line 43 private Set fileNames fileMap.keySet EDIT while we re at it same goes for inner class Values java.io.NotSerializableException java.util.HashMap Values at java.io.ObjectOutputStream.writeObject0 ObjectOutputStream.java 1081 Collection files fileMap.values Hmm this must be something fairly new. I had no problems when Serializable was introduced back in LUCENE-601. That s what I heared from Matthias too. We work in the same company. There were no problems with earlier versions of Lucene 2.1. OK here s a quick unit test that catches the regression public void testSerializable throws IOException Directory dir new RAMDirectory ByteArrayOutputStream bos new ByteArrayOutputStream ObjectOutput out new ObjectOutputStream bos out.writeObject dir out.close Using this I tracked down the commit that caused serializability to break http svn.apache.org viewvc lucene java trunk src java org apache lucene store RAMDirectory.java p2 2Flucene 2Fjava 2Ftrunk 2Fsrc 2Fjava 2Forg 2Fapache 2Flucene 2Fstore 2FRAMDirectory.java p1 2Flucene 2Fjava 2Ftrunk 2Fsrc 2Fjava 2Forg 2Fapache 2Flucene 2Fstore 2FRAMDirectory.java r1 478014 r2 478013 view diff pathrev 478014 This commit was for LUCENE-709 Alas it looks like HashMap.keySet and .values are just not serializable and never will be http bugs.sun.com bugdatabase view bug.do bug id 4501848 I think keeping serialization for RAMDirectory is important. maybe i m missing something but this seema like a trivail fix ... HashMap is serializable Ð it s just the persistent refrences to the keySet and values Collections that arne t serializable fileNames and files One is private the other is package protected so why don t we just get ride of them and fetch as needed files isn t even used except in a Mock subclass for testing purposes I agree and your fix looks great I will commit it. Thanks Hoss. Closing all issues that were resolved for 2.1.
