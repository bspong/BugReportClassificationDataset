NullPointerException thrown by equals method in SpanOrQuery
Part of our code utilizes the equals method in SpanOrQuery and in certain cases details to follow if necessary a NullPointerException gets thrown as a result of the String field being null. After applying the following patch the problem disappeared Index src java org apache lucene search spans SpanOrQuery.java Ñ src java org apache lucene search spans SpanOrQuery.java revision 465065 src java org apache lucene search spans SpanOrQuery.java working copy -121 7 121 8 final SpanOrQuery that SpanOrQuery o if clauses.equals that.clauses return false if field.equals that.field return false if field null field.equals that.field return false if field null that.field null return false return getBoost that.getBoost Hm weird. l peeked at SpanOrQuery.java and it looks like the private field instance var should be set in the ctor using the field from the first clause no How come your field is null in the first place Otis you have an excellent point. At the time I encountered this error I was in a hurry to get something shipped out. I will solve for why that happened however perhaps coding this more defensively would be ok too. So if the patch suggested above isn t the proper way to deal with it what about the suggestion that the field instance variable be required to be non-null when it is set so the constructor throws a NullPointerException if it is null That seems like the correct behavior to me. This patch could be used to provide that behavior Index src java org apache lucene search spans SpanOrQuery.java Ñ src java org apache lucene search spans SpanOrQuery.java revision 466047 src java org apache lucene search spans SpanOrQuery.java working copy -43 6 43 9 SpanQuery clause clauses i if i 0 check field field clause.getField if field null throw new NullPointerException Field name can not be null. else if clause.getField .equals field throw new IllegalArgumentException Clauses must have same field. On the other hand if the field name is in fact an interned string then the portion of the equals method dealing with it could simply compare references via . That sounds simpler all around. But ensuring the field is non-null may be a good idea anyhow. I d personally really want to see how come that field is null to begin with. If possible could you try to debug this a bit and see what kind of SpanQueries with null fields you are dealing with. Even if we check for field null and throw an exception you won t get very far so in the end you ll need to figure out where this null is coming from and why. This is not to say that throwing an exception in case of null is not a good thing. Thanks. Otis I ve been working with Mike on this and can explain how field can become null. When rewrite is called on a SpanRegexQuery that doesn t have any enumerations in the index as returned by getEnum in RegexQuery called from rewrite in MultiTermQuery the SpanOrQuery constructor is called with an array of length 0. Thus the for loop in the SpanOrQuery ctor is never entered and field is never initialized. Hope this helps explain the behavior. Looks like SpanOrQuery should support an empty SpanQuery. The existing tests even call it they just never call equals. Added a check to avoid the NPE and a test that equals on empties works. This patch is very simple still applies and the issue does need to be fixed. Thanks Otis. Was just gonna remove myself as assignee. thanks all
