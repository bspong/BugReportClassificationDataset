ThaiAnalyzer assumes things about your jre
The ThaiAnalyzer ThaiWordFilter depends on the fact that BreakIterator.getWordInstance new Locale th returns a dictionary-based break iterator that can segment thai phrases into words it does not use whitespace . But this is non-standard that the JRE will specialize this locale in this way its nice but you can t depend on it. For example if you are running on IBM JRE this analyzer wordfilter is completely broken in the sense it won t do what it claims to do. At the minimum we need to document this and suggest users look at ICUTokenizer for thai which always has this breakiterator and is not jre-dependent. Better would be to check statically that the thing actually works. when creating a new ThaiWordFilter we could clone the BreakIterator which is often cheaper than making a new one anyway. we could throw an exception if its not supported and add a boolean so the user knows it works. and we could refer to this boolean with Assert.assume in its tests. Here s a patch it detects statically if the BreakIterator from thai locale will actually work at all and sets a boolean DBBI AVAILABLE in the ctor if this is false it throws UOE This JRE does not have support for Thai segmentation I also added docs referring to ICUTokenizer in case you need this across all jres and put Assume.assumeTrue ThaiWordFilter.DBBI AVAILABLE in the tests. Looks good to me robert Make sure you add a CHANGES.TXT entry. Could that have been a bw break since it did not do what it claimed to do simon Could that have been a bw break since it did not do what it claimed to do I dont understand the question. ThaiWordFilter has always been broken this way it is broken by design. I dont understand the question. ThaiWordFilter has always been broken this way it is broken by design. could somebody have used the broken behavior and relies on it Just making sure its not a bw break somehow which we should document. no in this case the filter does not work at all it does nothing. Committed revision 998684 trunk 998688 3x reopening for possible 2.9.4 3.0.3 backport. I m gonna shoot for documentation-only fix here for 2.9.x and 3.0.x as well... its a no-risk fix at least to alert people that this won t work on e.g. IBM jdk... Committed documentation about this in Revision 1028789 for 3.0.x Revision 1028791 for 2.9.x
