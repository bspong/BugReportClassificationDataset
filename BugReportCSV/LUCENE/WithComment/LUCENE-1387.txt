Add LocalLucene
Local Lucene Geo-search has been donated to the Lucene project per https issues.apache.org jira browse INCUBATOR-77. This issue is to handle the Lucene portion of integration. See http lucene.markmail.org message orzro22sqdj3wows q LocalLucene NOTE This code cannot be released until the LGPL dependencies are removed. I m in the process of removing the LGPL dependencies now.... What are the thoughts on where this should live once things are squared away Currently the package names are com.pjaol.search. com.mapquest.spatialbase com.mapquest.localsolr Where do we want them to live in lucene org.apache.lucene.spatial org.apache.solr.spatial perhaps geo gis geosearch I lean towards spatial locallucene has some java 1.5 code in it Ð enums and a few iterators. What is the policy with java 1.5 for contribs We could probably make it 1.4 compatible but why fight the future How do lucene contribs usually do logging My understanding is that lucene core does not do logging... can we do SLF4J logging with this That would fit nicely with SOLR-560 Ok I ve got this compiling and running without the LGPL libraries files I moved mqspatialbase into locallucene and use the mqspatialbase math LatLng.arcDistance LatLng rather then the stuff from LatLonTrig.java What are the next steps If we add a spatial contrib to lucene now can it be excluded from 2.4 I think we can wait until after 2.4 which should be soon. Mike said he was going to branch today anyway so... I think we could put in a contrib in 2.9 if we wanted to. As for JDK 1.5 we allow new contribs to be 1.5. Logging Lucene contribs handler their own logging. SLF4J sounds good to me As for package name spatial works for me What are the next steps Create a patch per the HowToContribute section on the wiki that hooks it into the build system like the other contribs. Make sure it has tests docs etc. Here is a modified version of the grant with no LGPL dependencies and moved to org.apache.lucene.spatial. Since 2.4 has been branched it would be nice to add this soon so better qualified folks can push on it easily I m struggling to get two of the existing tests to pass... I don t think it is from my modifications since they don t pass on the original either. The two are TestCartesian.java TestDistance.java originally they get 0 results for everything. After I add writer.commit in setup I get more results but still not matching the existing tests expectaions. For TestCartesian I get Distances should be 10 14 Results should be 6 7 For TestDistanc I get Distance Filter filtered 7 Results 7 it expects 6 for both... Any ideas I m struggling to get two of the existing tests to pass... I don t think it is from my modifications since they don t pass on the original either. On my box the test fails with different results due to the writer not beeing comitted in setUp giving me 0 results. After adding a commit it fails with the results you are reporting here. Is it possible that you are getting one sort of result in the original due to non committed writer and another error in this version due to your changes to the distance measurement All points in the list are rather close to each other so very small changes to the algorithm might be the problem. I have a hard time tracing the code and I m sort of hoping this might be the problem. Yeah the tests numbers are wrong I ll put together better tests later today for it. It was brought to my attention recently when someone was trying lucene 2.4 I just didn t get around to resolving it. Hey Guys Where is this now Has it been checked in yet I am asking as I am currently planning a feature and wanted to know if it is realistic to take advantage of it now. Any update is appreciated Latest version of local spatial lucene with LGPL dependencies removed and working unit tests. The code s only dependency is on JUnit for tests during compilation. All the code s header s should be changed to Apache License as well. Looks great patrick At quick glance all the headers look fine Ð i ll run it through RAT to make sure though. Some notes about the changes here this includes a copy of NumberUtils from solr rather then depending on the library Ð I think that is the best option till NumberUtils can be moved into Lucene this uses the package name org.apache.lucene.spatial.tier I ll try to get the ball rolling to get this committed soon. Then we will have a base to work from and integrate with solr. Just noticed something... The TestCartesian creates a temp index like this File luceneDirectory new File tmp example-lucene if luceneDirectory.exists luceneDirectory.mkdir directory FSDirectory.getDirectory luceneDirectory For simplicity we should probably just use directory new RAMDirectory here is an updated zip. This one can be dropped into http svn.apache.org repos asf lucene java trunk contrib and hooks into that build system. Now i really think this is ready to go.... I ve taken some quick peeks into the code run the unit tests nicely packaged and presented A couple of thoughts Maybe the Filter s should be using the DocIdSet API rather than the BitSet deprecated stuff We can refactor that after being committed I supposed but not something we want to leave like that. DistanceQuery is awkwardly named. It s not an extends Query.... it s a POJO with helpers. Maybe DistanceQueryFactory but it creates a Filter also CartesianPolyFilter is not a Filter but CartesianShapeFilter is I think this looks good enough to commit as well just noting the above for cosmetic refactoring consideration after the code is in. Agree Ð but these changes are best made in svn. More eyes will help out added in 730067 thanks everyone. LatLonDistanceFilter.java public BitSet bits IndexReader reader throws IOException Create a BitSet to store the result int maxdocs reader.numDocs probably reader.maxDoc BitSet bits new BitSet maxdocs FWIW you might find the discussion on SOLR-773 interesting. I committed that fix thanks Earwin 
