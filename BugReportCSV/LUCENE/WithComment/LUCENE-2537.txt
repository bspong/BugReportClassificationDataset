FSDirectory.copy impl is unsafe
There are a couple of issues with it FileChannel.transferFrom documents that it may not copy the number of bytes requested however we don t check the return value. So need to fix the code to read in a loop until all bytes were copied.. When calling addIndexes w very large segments few hundred MBs in size I ran into the following exception Java 1.6 Ð Java 1.5 s exception was cryptic Exception in thread main java.io.IOException Map failed at sun.nio.ch.FileChannelImpl.map FileChannelImpl.java 770 at sun.nio.ch.FileChannelImpl.transferToTrustedChannel FileChannelImpl.java 450 at sun.nio.ch.FileChannelImpl.transferTo FileChannelImpl.java 523 at org.apache.lucene.store.FSDirectory.copy FSDirectory.java 450 at org.apache.lucene.index.IndexWriter.addIndexes IndexWriter.java 3019 Caused by java.lang.OutOfMemoryError Map failed at sun.nio.ch.FileChannelImpl.map0 Native Method at sun.nio.ch.FileChannelImpl.map FileChannelImpl.java 767 ... 7 more I changed the impl to something like this long numWritten 0 long numToWrite input.size long bufSize 1 26 while numWritten numToWrite numWritten output.transferFrom input numWritten bufSize And the code successfully adds the indexes. This code uses chunks of 64MB however that might be too large for some applications so we definitely need a smaller one. The question is how small so that performance won t be affected and it d be great if we can let it be configurable however since that API is called by other API such as addIndexes not sure it s easily controllable. Also I read somewhere can t remember now where that on Linux the native impl is better and does copy in chunks. So perhaps we should make a Linux specific impl Oh .. found the thread we discussed that on the list to which I ve actually last posted w the following text I ve Googled around a bit and came across this http markmail.org message l67bierbmmedrfw5. Apparently there s a long standing bug against SUN since May 2006 http bugs.sun.com view bug.do bug id 6431344 that s still open and reports the exact same behavior that I m seeing. If I understand correctly this might be a Windows limitation and is expected to work well on Linux. I ll give it a try. But this makes me think if we should keep the current behavior for Linux-based directories and fallback to the chunks approach for Windows ones Since eventually I ll be running on Linux I don t want to lose performance ... This isn t the first that we ve witnessed the write once run everywhere misconception of Java . I m thinking if in general we should have a Windows Linux FSDirectory impl or handlers to prepare for future cases as well. Mike already started this with LUCENE-2500 DirectIOLinuxDirectory . Instead of writing a Directory perhaps we could have a handler object or something or a generic LinuxDirectory that impls some stuff the linux way. In FSDirectory we already have code which detects the OS and JRE used to decide between Simple NIO and MMAP Directories ... I wrote a test which compares FileChannel API to intermediate buffer copies. The test runs each method 3 times and reports the best time of each. It can be run w different file and chunk sizes. Here are the results of copying a 1GB file using different chunk sizes the chunk is used as the intermediate buffer size as well . Machine spec Linux 64-bit IBM JVM 2xQuad hyper-threading - 16 cores overall 16GB RAM SAS HD Chunk Size FileChannel Intermediate Buffer Diff 64K 1865 1528 -18 128K 1660 1526 -9 512K 1514 1493 -2 1M 1552 2072 33 2M 1488 1559 5 4M 1596 1831 13 16M 1563 1964 21 64M 1494 2442 39 128M 1469 2445 40 For small buffer sizes intermediate byte copies is preferable. However FileChannel method performs pretty much consistently irregardless of the buffer size except for the first run while the byte approach degrades a lot as the buffer size increases. I think given these results we can use the FileChannel method w a chunk size of 4 or even 2 MB to be on the safe side and don t eat up too much RAM Nice results Shai I think given these results we can use the FileChannel method w a chunk size of 4 or even 2 MB to be on the safe side and don t eat up too much RAM 1 Patch copies the files in chunks of 2MB. All core tests pass. I ll wait a day or two in case someone wants to suggests a different approach or chunk size limit before I commit. Patch adds the following FSIndexOutput overrides copyBytes to do optimized copies as well when possible . CompoundFileWriter changed to call copyBytes instead of using an intermediate buffer. Some minor typos and code corrections. NOTE with the changes to CFW CheckAbort is accessed only after an entire file is written. The estimated amount of work is the length copied. This means that if abort is called it might take a tad longer until CFW will detect it. I don t think it s serious since 1 abort is not called often 2 for small segments this will probably have no effect OneMerge was accessed roughly every 2MB copied and 3 as reported the optimized copy is faster when using FileChannel therefore the time that passes between checks may not be that long. And there s a 4 Ð for really large segments the amount of work done to merge them is far larger than copying them into the CFS. Therefore the chances that abort will be called during that process is relatively small ... All tests pass. If there are no objections I ll commit this today Committed revision 979161 3x . Committed revision 979185. Bulk close for 3.1
