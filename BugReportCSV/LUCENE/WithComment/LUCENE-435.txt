 PATCH BufferedIndexOutput - optimized writeBytes method
I have created a patch that optimize writeBytes metod public void writeBytes byte b int length throws IOException if bufferPosition 0 flush buffer flush if length BUFFER SIZE flushBuffer b length bufferStart length else int pos 0 int size while pos length if length - pos BUFFER SIZE size length - pos else size BUFFER SIZE System.arraycopy b pos buffer 0 size pos size flushBuffer buffer size bufferStart size Its a much more faster now. I know that for indexing this not help much but for copying files in the IndexStore this is so big improvement. Its about 400 faster that old implementation. The patch was tested with 300MB data ant test sucessfuly finished with no errors. Hold on I will supply unified patch I am also working on TestStore to do some testing. The patch in unified format created by ... trunk svn diff TestStore runs fine I will add some testing for writeBytes since it uses writeByte . The patch is tested. I voiced some concerns about this patch in http www.mail-archive.com java-dev lucene.apache.org msg02055.html I don t think these have yet been addressed. Will fix this. Fixed patch TestStore also updated... What else is needed Its fixed and tested. I just breifly looked at writeBytes and I think there is further room for optimization. Specifically Doug s suggestion If the new data is larger than a buffer then the buffer should be flushed and the new data written directly without ever copying it into the buffer. Even if everything were already peftect committers need time to review it. Hello I have done what you requested sorry for the late delay - too busy . I also found a bug in RAMOutputStream - the implementation of flushBuffer method was not able to write any buffers longer than 2 BUFFER LENGTH. My fast writeBytes patch now handle all various situation and uses the fastest methods to write data. In my opinion its not good to make BUFFER LENGTH constant public. Consider making it private since this can lead to nontrivial dependency as I have described above . Its not good to have one buffer length for input output and RAM objects which should have independant buffer length at all - it has nothing to do with the caching in the abstract methods . Making it private and maybe accessible on runtime could help a litte as I said Ð I use the API for some index copying and I would like to have larger buffers . Anyway this is my contribution I am looking for more reviews. The patch includes StoreTest modification which helps with testing either writeByte method or writeBytes methods. Thanks for your attention. I just committed this.
