merge LuceneTestCase and LuceneTestCaseJ4
We added Junit4 support but as a separate test class. So unfortunately we have two separate base classes to maintain LuceneTestCase and LuceneTestCaseJ4. This creates a mess and is difficult to manage. Instead I propose a single base test class that works both junit3 and junit4 style. I modified our LuceneTestCaseJ4 in the following way the methods to run are not limited to the ones annotated with Test but also any void no-arg methods that start with test like junit3. this means you dont have to sprinkle Test everywhere. of course Ignore works as expected everywhere. LuceneTestCaseJ4 extends TestCase so you dont have to import static Assert. to get all the asserts. for most tests no changes are required. but a few very minor things had to be changed setUp and tearDown must be public not protected. useless ctors must be removed such as TestFoo String name super name LocalizedTestCase is gone instead of public class TestQueryParser extends LocalizedTestCase it is now RunWith LuceneTestCase.LocalizedTestCaseRunner.class public class TestQueryParser extends LuceneTestCase Same with MultiCodecTestCase LuceneTestCase.MultiCodecTestCaseRunner.class I only did the core tests in the patch as a start and i just made an empty LuceneTestCase extends LuceneTestCaseJ4. I d like to do contrib and solr and rename this LuceneTestCaseJ4 to only a single class LuceneTestCase. patch for core tests only all tests pass. Why not simply extend the org.junit.Assert class This would remove use of deprecated old JUnit3 Framework completely Why not simply extend the Assert abstract class This would remove use of deprecated old JUnit3 Framework completely I would like to do this under a different issue. We cannot do this until all assertEquals float float are changed to use epsilons for example. By extending Assert we can catch all the places we don t use epsilons and fix them which is a great improvement but out of scope of this issue. I am just afraid of extending form the old JUnit Testcase. We can simply add Deprecated methods to asser floats without epsilon that we can then remove. So extend Assert and the add missing static methods for compatibility. I am just afraid of extending form the old JUnit Testcase. we already extend this Have you looked at LuceneTestCase lately So extend Assert and the add missing static methods for compatibility. Please i would like to keep the epsilon stuff out of this issue. All tests pass the way it is now there is no problem. We can fix epsilons in a followup issue and then use no junit3 code at all... as I said its a great improvement but not necessary to mix in with this change. By doing both at once if somethign goes wrong it will be more difficult to debug. Lets keep the scope under control. Here the patch so LuceneTestCaseJ4 only extends Assert without importing extra crap. The double float API of old Junit3 is emulated using static overrides. After applying patch do a ant clean else you will get lining errors. updated patch with all of lucene solr and including uwe s stuff. all tests pass. This is great Robert Patch works for me except for bizarre hang in Solr s TestSolrCoreProperties apparently only on my machine that s pre-existing . Looks good this is a really good step forwards. We can write old-style tests butuse JUnit4 and can optionally add the BeforeClass and so on We can write old-style tests butuse JUnit4 and can optionally add the BeforeClass and so on Yeah i ve never understood why Junit4 requires all these static imports and annotations... i just care about BeforeClass Some small fixes in reflection inspection exclude static and abstract methods check native return type thanks Uwe i can merge this into the 3x backport too. OK i didnt merge the reflection fixes yet but i backported the patch to 3x. Committed revision 996611 996630 3x . Will mark the issue resolved when Uwe is out of reflection hell OK i merged back all of Uwe s improvements. Thanks for the help Uwe. I think now in future issues we can clean up and improve this test case a lot. I felt discouraged from doing so with the previous duplication... Bulk close for 3.1
