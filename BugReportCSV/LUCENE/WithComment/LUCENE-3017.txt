FST should differentiate between final vs non-final stop nodes
I m breaking out this one improvement from LUCENE-2948... Currently if a node has no outgoing edges a stop node the FST forcefully marks this as a final node but it need not do this. Ie whether that node is final or not should be orthogonal to whether it has arcs leaving or not. Patch. Ehm... an automaton with zero-arc nodes that are not final is no no longer an automaton but a graph of some sort... I mean Ð what is the interpretation of an empty non-final node There is no sequence in the input that corresponds to this path and it is a prefix of some path in the input that you can t get from this automaton right This slowly becomes very confusing... the patch looks all right but I m thinking if the API overall is still clear. Well... for LUCENE-2948 I need this to handle term prefixes that are in the terms index and are also valid terms. For example I could have term foo a prefix of many other terms foobar foobaz etc and so the path f-o-o is in the terms index pointing to a block that has all these other terms ie ending on a zero-arc node. If that ending zero-arc node is final I know foo is a valid term and I must seek to the block to load it but if it s not final I know it cannot exist in the index and I can fail-fast return NOT FOUND from seek foo . I know. I was just pointing out the fact that it does get fairly complex but I don t have any constructive ideas how to make it simpler so I ll simply shut up now I hear you I think Lucene s needs put pressure on the traditional FST bounds... so we need to stretch things a bit.
