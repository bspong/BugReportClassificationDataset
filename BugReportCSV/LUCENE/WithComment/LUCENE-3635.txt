Allow setting arbitrary objects on PerfRunData
PerfRunData is used as the intermediary objects between PerfRunTasks. Just like we can set IndexReader Writer on it it will be good if it allows setting other arbitrary objects that are e.g. created by one task and used by another. A recent example is the enhancement to the benchmark package following the addition of the facet module. We had to add TaxoReader Writer. The proposal is to add a HashMap String Object that custom PerfTasks can set get . I do not propose to move IR IW TR TW etc. into that map. If however people think that we should I can do that as well. Patch against trunk adds perfObjects Map String Object with matching set get methods. I wonder if we should have this Map require Closeable so that we can close the objects on PerfRunData.close . I think since Closeable is so lightweight even if an object has nothing to do there it s not a big deal implementing an empty close Patch looks good. I do not propose to move IR IW TR TW etc. into that map. If however people think that we should I can do that as well. I rather keep these ones explicit as they are now. I wonder if we should have this Map require Closeable so that we can close the objects on PerfRunData.close Closing would be convenient but I think requiring to pass Closeable is too restrictive Instead you could add something like this to close for Object o perfObjects.values if o instanceof Closeable IOUtils.close Closeable o This is done only once at the end so instanceof is not a perf issue here. If we close like this we also need to document it at setPerfObject . I think BTW that PFD.close is not called by the Benchmark it has to be explicitly invoked by the user. Thanks Doron. I ended up implementing as you propose but first collecting all Closeables into an ArrayList and then calling IOUtils.close .. it simplifies the code i.e. in your example I d need to try-catch IOE and throw the first one that I ve encountered but still iterate on all . I ll commit this to trunk and 3x. Committed revision 1220795 1220799.
