bad java practices which affect performance result of code inspection 
IntelliJ IDEA found the following issues in the Lucense source code and tests 1 explicit for loops where calls to System.arraycopy should have been 2 calls to Boolean constructor in stead of the appropriate static method field 3 instantiation of unnecessary Integer instances for toString instead of calling the static one 4 String concatenation using inside a call to StringBuffer.append in stead of chaining the append calls all minor issues. patch is forthcoming. patch svn diff that fixes the issue A small speed improvement in the StringBuffer -Builder parts could be achieved by replacing buffer.append String with single-character Strings by buffer.append char . If we move to Java 1.5 for a later Lucene version you should replace StringBuffer by StringBuilder. OK patch looks good to me Thanks Tzvika One thing is QueryParser.java can t be changed that code is auto-written by JavaCC . Also I changed some of the single-character append s from a size 1 string to a single character as suggested above by Uwe Schindler. Attached new patch with these changes. I plan to commit in a day or two. I just committed this. Thanks Tzvika 
