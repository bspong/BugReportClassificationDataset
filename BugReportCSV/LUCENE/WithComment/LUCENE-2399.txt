Add support for ICU s Normalizer2
While there are separate Case Folding Normalization and Ignorable-removal filters in LUCENE-1488 the new ICU Normalizer2 API does this all at once with nfkc cf based on the new NFKC Casefold property in Unicode . This is great because it provides a ton of unicode functionality that is really needed. And the new Normalizer2 API takes CharSequence and writes to Appendable... This patch is so simple instead of 3 hairy tokenfilters. I would like to commit tomorrow upgrading our icu.jar in contrib icu to 4.4 unless there are any objections. i made this filter final to avoid a ticket from the policeman. Hurra You used the StringBuilder as buffer to not create a new String instance each time and only need to copy the buffer. This could also be a good trick for the PatternReplaceFilter from Solr. i made this filter final to avoid a ticket from the policeman. How did you get the filter through the assert statement without final Strange... I know you were running the test without assertion from Eclipse junit TokenStream implementation classes or at least their incrementToken implementation must be final junit junit.framework.AssertionFailedError TokenStream implementation classes or at least their incrementToken implementation must be final junit at org.apache.lucene.analysis.TokenStream.assertFinal TokenStream.java 117 So for me the assertion worked. The second patch of course works with icu-4 4.jar So great and I am happy about the cool interfaces at CharTermAttribute. I just wanted to check that the my deputy sheriff did not miss something because of wrong instructions. I know you were running the test without assertion from Eclipse Yes So the assertion here worked perfectly So great and I am happy about the cool interfaces at CharTermAttribute. Yes I m really excited about this. Besides just normalization we get the ability to do best practice case folding see the German and Greek examples in the test normalization and ignorable removal all in one simple filter and users can make their own .txt files for special mappings run them through a tool and use this filter with high performance http site.icu-project.org design normalization custom http userguide.icu-project.org transforms normalization I added some additional javadocs to try to explain the default behavior nfkc cf I made the filter non-final and only incrementToken final instead. This way we can implement things like LUCENE-1343 which want to do things like removing accents in a way that respects normalization e.g. removes decomposed and composed forms . So we can just extend this and pass along a statically loaded InputStream for the .nrm file to its ctor and be done with it. Committed revision 935186. Will later discuss how we should expose this stuff in solr maybe an ICU contrib for now as I want its faster Collation filter exposed there too backported to 3.x rev 941689 Bulk close for 3.1
