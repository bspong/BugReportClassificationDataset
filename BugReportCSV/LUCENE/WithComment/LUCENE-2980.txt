Benchmark s ContentSource should not rely on file suffixes to be lower cased when detecting file type gzip bzip2 text 
file.gz is correctly handled as gzip but file.GZ handled as text which is wrong. Patch with test that fail due to this bug. Patch looks good. Few tiny comments Should ContentSourceTest extend BenchmarkTestCase I think that instead of assertTrue testDir.isDirectory you can assertTrue testDir.mkdirs In case you wanted a second opinion about the nocommit lines I think they can all go away . Thanks Shai I fixed the super class and the assert as suggested. For those nocommits they stand for a larger problem - I was ready for a trivial fix for this bug - just lower case the extension in ContentSource before consulting with the map. However the test failed and I found out that this is because the input stream returned by CompressorStreamFactory.createCompressorInputStream does not close its underlying stream when it is exhausted or when its close method is called. I opened COMPRESS-127 for this. As a workaround to this bug ContentSource now returns a wrapper on the input stream created by the CsFactory delegates all methods to it except for close which is also delegated to the underlying stream. This fix is required for the extension letter cases tests to pass but it fixes a more serious problem - leaking file handles in ContentSource. As Solr also makes use of CommonCompress I searched in it for references to CompressorStreamFactory.createCompressorInputStream but found none so it seems Solr is not affected by COMPRESS-127. Attached patch adds fixes for extension letter case problem. closing underlying stream of g bzip streams. That s a serious problem - good catch Patch looks good. Perhaps we should add a specific test in CSTest for this problem I wouldn t use file.delete as in indicator because on Linux it will pass. Perhaps a test which writes to a byte and then an extension of ByteArrayInputStream would mark whether close was called and the test would assert on it. Perhaps we should add a specific test in CSTest for this problem I wouldn t use file.delete as in indicator because on Linux it will pass Agree I ll add one. Perhaps we should add a specific test in CSTest for this problem I wouldn t use file.delete as in indicator because on Linux it will pass Changed my mind about adding this test to ContentSourceTest - I think such a test fits more to the CommonCompress project because it should directly call CompressorStreamFactory.createCompressorInputStream in . In our test we invoke ContentSource.getInputStream File and so we cannot pass such a close-sensing stream. But this is a valid point especially the test case I provided to COMPRESS-127 will fail on Windows but will likely pass on Linux. I ll add a reference to your comment in COMPRESS-127. Agreed. Updated patch applies workaround only for GZIP format as other types do close their wrapped stream COMPRESS-127 . Committed trunk r1084544 r1084549 3x r1084552 Bulk closing for 3.2
