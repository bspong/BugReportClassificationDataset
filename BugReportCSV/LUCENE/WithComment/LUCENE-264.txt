 PATCH Improved javadoc for maxClauseCount
As discussed on lucene-dev before queries with lots of terms can use up a lot of unused buffer space for their TermDocs because most terms have few documents. Created an attachment id 12435 IndexReader.java with reduced buffer requirements The first attachment actually is InputStream.java in the store package. I left in some comments and commented code. The initial buffer size and the buffer size increase factor might need tweaking. It passes all the current tests and the commented println s confirm the working. I have not tested this on larger indexes with a lot of of query activity. Regards Paul Possible flaw in the attached java file clone evt. truncates the buffer but in that case it does not reseek the underlying stream to the new end of the buffer. The latest memory mapped files GCJ are probably going to make this obsolete . Nonetheless if anyone s is interested in developing this further please contact me. Another way to solve this might be to use an nio mmapped Directory implementation. Doug just committed MMapDirectory.java with this clone Â  Â  Â  public Object clone Â  Â  Â  Â  MMapIndexInput clone MMapIndexInput super.clone Â  Â  Â  Â  clone.isClone true Â  Â  Â  Â  clone.buffer buffer.duplicate Â  Â  Â  Â  return clone Â  Â  Â  As buffer.duplicate shares the buffer content reducing the buffer requirements of InputStream is now obsolete. The only thing left is a documentation note for the max. nr. of clauses in a BooleanQuery that for a MMapDirectory the buffering is left to the operating system. Created an attachment id 13133 Improved javadoc for maxClauseCount With this patch this enhancement can be closed. Thanks I committed the improved javadoc comment.
