Contributing a High-performance single-document main memory Apache Lucene fulltext search index.
Here is my contribution a High-performance single-document main memory Apache Lucene fulltext search index. I ll try to attach the files hoping for comments on how to proceed with this... Created an attachment id 14799 MemoryIndex.java MemoryIndex.java Created an attachment id 14800 MemoryIndexTest.java MemoryIndexTest.java Created an attachment id 14801 testqueries.txt testqueries.txt Created an attachment id 14802 package.html package.html Created an attachment id 14816 MemoryIndex.java slighly faster indexing reduced sort code duplication From update of attachment 14800 made obsolete my new submitted version From update of attachment 14816 made obsolete my new submitted version Created an attachment id 14848 new update added addField String TokenStream added addField String String Analyzer refined getMemorySize cosmetics Created an attachment id 14849 MemoryIndex.java added addField String TokenStream added addField String String Analyzer refined getMemorySize cosmetics Created an attachment id 14850 MemoryIndexTest.java a little more flexible tests Created an attachment id 14851 PatternAnalyzer.java Efficient Lucene analyzer tokenizer that preferably operates on a String rather than a link java.io.Reader that can flexibly separate on a regular expression link Pattern with behaviour idential to link String split String and that combines the functionality of link org.apache.lucene.analysis.LetterTokenizer link org.apache.lucene.analysis.LowerCaseTokenizer link org.apache.lucene.analysis.WhitespaceTokenizer link org.apache.lucene.analysis.StopFilter into a single efficient multi-purpose class. p If you are unsure how exactly a regular expression should look like consider prototyping by simply trying various expressions on some test texts via link String split String . Once you are satisfied give that regex to PatternAnalyzer. Also see a target blank href http java.sun.com docs books tutorial extra regex Java Regular Expression Tutorial a . p This class can be considerably faster than the normal Lucene tokenizers. It can also serve as a building block in a compound Lucene link org.apache.lucene.analysis.TokenFilter chain. For example as in this stemming example pre PatternAnalyzer pat ... TokenStream tokenStream new SnowballFilter pat.tokenStream content James is running round in the woods English pre Created an attachment id 14852 PatternAnalyzerTest.java Verifies that Lucene PatternAnalyzer and normal Lucene Analyzers have the same behaviour returning the same results for any given free text. Runs a set of texts against a tokenizers analyzers Can also be used as a simple benchmark. p Example usage pre cd lucene-cvs java org.apache.lucene.index.memory.PatternAnalyzerTest 1 1 patluc 1 2 2 .txt .xml docs .html src java org apache lucene index .java xdocs .xml .. nux samples data .xml pre with WhitespaceAnalyzer problems can be found These are not bugs but questionable Lucene features CharTokenizer.MAX WORD LEN 255. Thus the PatternAnalyzer produces correct output whereas the WhitespaceAnalyzer silently truncates text and so the comparison results in assertEquals don t match up. Two requests - could you provide a MemoryIndex implementation that works with the latest codebase The inner MemoryIndexReader does not implement some new abstract methods as you have noted. Also having your two tests converted to JUnit tests would be very helpful as only the JUnit tests get run automatically from Ant. Once these two things are done all looks great to commit. Initially I will put this in a new contrib misc area moving the old sandbox contributions misc there . Created an attachment id 14890 MemoryIndex.java now runs against current lucene-svn added support for position offsets added toString for easier prototyping debugging renamed query to search better internal documentation Created an attachment id 14891 MemoryIndexTest.java Now also runs as junit test case be prepared for a run to take several minutes Created an attachment id 14892 PatternAnalyzer.java Minor internal optimizations Created an attachment id 14893 PatternAnalyzerTest.java Now also runs as junit test case Erik might need to adjust default test file names on moving this to a different package directory location same for MemoryIndexTest Committed with some minory tweaks. Created an attachment id 15001 MemoryIndex.java javadoc improvements cometics indentation no functional changes Created an attachment id 15097 MemoryIndex.java javadoc cosmetics added performance improvement using far less Term interning requires the following addition to Term Constructs a term with the given text and the same interned field name as this term minimizes interning overhead . public Term createTerm String txt WH return new Term field txt false Created an attachment id 15099 PatternAnalyzer.java javadoc cosmetics Created an attachment id 15124 MemoryIndex.java small bug fix for rare cases minor performance improvements Created an attachment id 15125 PatternAnalyzer.java added EXTENDED ENGLISH STOP SET Created an attachment id 15157 MemoryIndex.java minor performance optimizations javadoc cosmetics Created an attachment id 15158 PatternAnalyzer.java minor performance optimizations javadoc cosmetics These latest versions of MemoryIndex and PatternAnalyzer are now committed in contrib area and the new createTerm method it relies on in Term.java has been added to the core. My personal unit tests show it works but the official Junit test in contrib area doesn t seem to run as there seems to be a hard-coded path to test query files in the wrong place. Thanks Mark Can you please take the source from the Nux download. http dsd.lbl.gov nux As mentioned before that source contains a small bug fix some minor performance improvements plus documention improvements. I also believe the test file paths are right in that version. Never mind Mark. The versions appear to be identical. Actually the versions seem to be slightly different. For example search for sortedTemplates in MemoryIndex.java. I ve moved this into the internal Info class. Please use the Nux versions. They are the most up-to-date. Thanks. The confusion stems in part from me struggling with subversion on eclipse-3.1 on OSX. subclipse seems to be riddled with bugs. MemoryIndex and friends live in contrib now. Contribution accepted closing the issue.
