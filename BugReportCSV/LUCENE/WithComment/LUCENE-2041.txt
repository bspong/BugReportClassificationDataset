Complete parallelizaton of ParallelMultiSearcher
ParallelMultiSearcher is parallel only for the method signatures of search . Part of a query process calls the method docFreq . There was a TODO comment to parallelize this. Parallelizing this method actually increases the performance of a query on multiple indexes especially remotely. Hey Joey good to see you coming up with patches nice that you catch up on that TODO. You added support for parallel DocFreq which is good Did you think about using an interface from the new concurrent utils instead of subclassing thread I would like to see people using the new features which make code slightly more readable too. You would be able to simply throw the exception in the Callable call method and retrieve it once it has terminated. you could also use a Pooled Executor to run those threads so you don t have to spawn them each time you call docFreq on the multi searcher. one more thing your patch is hard to read as you formated the source code. please try to do not format it - that would make it way easier to read and see what has been added changed. moving to 3.1 for now. we will see how this turns out I agree with you on the Pooled Executor and concurrent utils I was actually trying to copy the semantics of the search methods in place so someone could quickly grasp the code. Ya I thought that s why the patch was full was from the formatted code. Sorry about that. I ll look for that in the future. I noticed the link in the wiki for the formatting under Helpful Resources doesn t work anymore. http wiki.apache.org lucene-java HowToContribute Ya I thought that s why the patch was full was from the formatted code. Sorry about that. I ll look for that in the future. I noticed the link in the wiki for the formatting under Helpful Resources doesn t work anymore. Fixed that and uploaded a new Eclipse Galieo style also containing our way for Java 5 Generics. I drove this a bit further and refactored the whole code to use the java 1.5 concurrent utils. I seem to be somewhat cleaner with executors callable and a little refactoring. simon I take it as communicated. thanks uwe String.isEmpty is Java 6 only changed this to length 0. Updated patch. Fixed the Java5 issue. Damned I should use java 5 on my notebook. simon hehe - my patch was quicker but you comment appears first I also changed some formatting we require whitespace after control statements like for while catch ... and before I will also readd support for MaxScore in the fielded case it is still supported by Searchable.search SortField Advanced patch Removed SuppressWarnings by duplicating some code but it is type-safe now Added support for maxScore in sorted mode Refactoring made all internal classes static inner classes Fix thread safety hq.setFields synchronized Here another possibility removing more duplicated code MultiSearcher contains now the merge Callables as static inner classes. These Callables are used directly without Executor in MultiSearcher but with Executor in ParallelMultiSearcher. Added some more final keywords and generalized HitQueue to PriorityQueue ScoreDoc in search no sort I guess we are set with this patch good team work Uwe Lets get this out for heavy committing I get the impression that we should think about moving stuff like the Function interface out to utils. This could be useful in many situations though. Thoughts Here my latest patch will commit soon. Uwe Oh I didn t see your patch. But its not so different I also did lots of code cleanup. I also used ReentrantLocks. I added a new DummyLock to utils that is a replacement for ReentrantLock but does simply nothing. By this the synchronized around the HitQueue in MultiSearcher can be ommitted. Merged our patches somehow but left HitQueue generic param I like this more because it conforms to the sort inner class . I think this is final now. Ready to commit all tests are running. 1 go for it - seems to be quite pretty compared to the current trunk version. Heavy committed revision 834550 Thanks Joey Simon This has turned into a complete refactoring of the class but I d like to comment that the original intent of this patch was a bit misguided docFreq is not called during normal use of ParallelMultiSearcher. What does get called is docFreqs on the sub-searchers. This is done in MultiSearcher.createWeight and is done sequentially. I created issue LUCENE-2128 to suggest a solution to this.
