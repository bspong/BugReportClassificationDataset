basetokenstreamtestcase should fail if tokenstream starts with posinc 0
This is meaningless for a tokenstream to start with posinc 0 Its also caused problems and hairiness in the indexer LUCENE-1255 LUCENE-1542 and it makes senseless tokenstreams. We should add a check and fix any that do this. Furthermore the same bug can exist in removing-filters if they have enablePositionIncrements false. I think this option is useful but it shouldnt mean allow broken tokenstream it just means we don t add gaps. If you remove tokens with enablePositionIncrements false it should not cause the TS to start with positionincrement 0 and it shouldnt restructure the tokenstream e.g. moving synonyms on top of a different word . It should just not add any holes . patch fixing the bug in WikipediaTokenizer. But i think we just dont have good tests for the removers. Ideally for tests i think we should have a simple MockSynonymsFilter that is juts stupid and slow and makes certain synonyms maybe some multi-word to use in testing. Then we can write tests to find and fix the bugs in the removingfilter. Patch adding a MockGraphTokenFilter we can use to randomly insert fake graph arcs... updated patch I think its ready to commit. I didn t integrate Mike s nice MockGraphTokenFilter yet but will do this under a separate issue its likely to expose a few bugs 1 I think this is ready to go in ill wait a bit. I didn t make any changes re graph-restructuring though I still feel we should fix this but it means dealing with backwards compatibility etc. The changes in this patch are backwards compatible in the sense that consumers are already correcting initial posInc 0 to posinc 1 anyway. I opened LUCENE-3873 to integrate MockGraphTokenFilter into tests.
