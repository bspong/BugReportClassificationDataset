Add test to check maven artifacts and their poms
As release manager it is hard to find out if the maven artifacts work correct. It would be good to have an ant task that executes maven with a .pom file that requires all contrib core artifacts or one for each contrib that downloads the artifacts from the local dist maven folder and builds that test project. This would require maven to execute the build script. Also it should pass the version ANT property to this pom.xml 1 this would be good to know that the maven stuff is correct before adding moving contribs too. currently we are doing this blindly Hi Robert Have you mentioned somewhere recently what you d like tested in regards to the artifacts and poms Is the test that Uwe suggests here sufficient or is there more you d like tested So far I can think of the following things that might need to be checked Poms are valid XML maven poms Poms include all dependencies with correct versions for their modules Poms have correct groupId and artifactId Artifacts for all modules are created Artifacts match those created through the official ant build Too far or have I missed some Chris these sound like great checks... I m not really sure what is involved to know that poms artifacts are correct but at the moment since we have no checks even adding one of these checks is an improvement for example is the pom even valid xml at all ... I figure its like any other feature we won t immediately have perfect tests but we can improve them iteratively. Much of these are handled by Maven itself Poms are valid XML maven poms Maven validates the poms itself before it begins the build process. Poms themselves have an XSD which you ll usually linked in the XML. Consequently if the pom is not valid XML oops forgot the dependency then the build will fail. Poms include all dependencies with correct versions for their modules For the Maven build to run successfully it must be able to compile the source. To do so the classpath must contain all the necessary dependencies. Only those dependencies specified in the poms will be added to the classpath. Consequently if a dependency is omitted but is needed then the build will fail with a compile error. I m unaware of how to verify that the dependencies are the same version as those sitting in the lib folder but we should be able to create a maven plugin that does something similar to that described in LUCENE-2657. I d say this test falls in the iterative category. Poms have correct groupId and artifactId Artifacts for all modules are created This can be handled through creating a test maven project which lists all the artifacts as dependencies with the expected groupId and artifactId. Running the build for the test project would then fail if the dependencies don t exist due to the artifactId or groupIds being incorrect specified or because no artifact was made in the first place . Artifacts match those created through the official ant build I sort of added this to correlate with Uwe s original request. Maven will compile and jar the same source code as ant. It will run the same tests although I confess not with the same parallel magic as you made in ant . Both maven and ant will use the same compiler. Consequently the sources and compiled code included in the artifacts will be the same as produced by ant. The only thing I can think of additionally checking here is the checksums match but that will become complicated since maven includes its poms in its jars. Maybe we could list the contents of the jars and compare too pedantic maybe My point here is I think we can leverage Maven itself a great deal to test that its doing the right thing or at least we are telling it to do the right thing. Chris to get better bang for our buck one way would be to look at the maven bugs with previous releases. Can we create checks that would have detected any of the issues that went wrong Later we could add some of the more thorough checks you have suggested here. Hi So far I ve just gathered some anecdotal information from people of which none is about what we ve discussed here Issues so far seem to be around the releasing of the maven artifacts rather than the artifacts themselves. Problems include signing issues syncing permissions and most importantly very bad documentation. These will be tackled in some other JIRA issues that ll spring up shortly but I ll tackle this as well. Nightly Maven Jenkins builds test the Maven build and artifacts via Jenkins s local repository. LUCENE-3655 added thorough checks of Maven release artifacts to dev-tools scripts smokeTestRelease.py.
