comparator API for segment versions
See LUCENE-3012 for an example. Things get ugly if you want to use SegmentInfo.getVersion For example what if we committed my patch release 3.2 but later released 3.1.1 will 3.1.1 this be whats written and returned by this function Then suddenly we broke the index format because we are using Strings here without a reasonable comparator API. In this case one should be able to compute if the version is 3.2 safely. If we don t do this and we rely upon this version information internally in lucene I think we are going to break something. We should use the same code like Harmony has for its java.lang.Package isCompatibleWith method. I will prepare a patch that exposes this as a Comparator String for those version strings singleton . initial patch any Objections Uwe you still want to take this or should I I want to get LUCENE-3012 wrapped up. It s fine commit it We may look for usage of the version field in SegmentInfos and use this comparator there especially e.g. my new one for upgrades or the standard IndexTooOldException stuff . But I think that should be a new issue. Hey guys does this affect LUCENE-2921 or vice versa Basically I thought that we should stop writing version header in files and just use the release version as a header. Robert I don t think we are allowed to change index format versions on bug-fix releases and even if we do that same bug fix would go into the 3.x release so it would still know how to read 3.1.1 Perhaps that was your point and I missed it ... Shai we should not change index format but it still feels bad not to have a correct version comparison API. With this patch you can even compare 3.0 against only 3 or 3.0.0.0.0 and they will be equal. And once we are at version 10 a simple string compare is a bad idea Thats why Robert and me are against pure string comparisons. Hey guys does this affect LUCENE-2921 or vice versa Hi Shai I think this helps LUCENE-2921. This is a comparator to use when you want to examine the release version that created the segment the one you added in LUCENE-2720 . Its guaranteed to compare correctly if say we we released 3.10 and also if the number of trailing zeros etc are different. In other words if you implement LUCENE-2921 I think the idea is typically you will want to use this comparator when examining the version string. Robert I don t think we are allowed to change index format versions on bug-fix releases and even if we do that same bug fix would go into the 3.x release so it would still know how to read 3.1.1 Perhaps that was your point and I missed it ... On LUCENE-3012 I ve proposed a fix-for version for Lucene 3.2. But we can discuss on that issue. Yes that makes sense. I can use that API in LUCENE-2921. Thanks a lot for saving me some effort . Committed revision 1124266 1124269 branch3x Bulk closing for 3.2
