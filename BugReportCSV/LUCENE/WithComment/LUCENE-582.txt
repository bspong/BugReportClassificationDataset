Don t throw TooManyClauses exception
I wonder if it would make sense to fall back to a ConstantScoreQuery instead of throwing a TooManyClauses exception If a user costructs a Query instance that rewrites to a BooleanQuery we have to assume they wanted the scoring factors to come into play Ð implicitly falling back to a ConstantScoreQuery implentation is not a good idea Ð the user can choose to do that themselves if they catch a TooManyClauses. If you want to be able to rescue the query I believe the catching has to be done in the rewrite method which means you need to subclass the PrefixQuery and WildcardQuery classes... I wonder how many people would be disappointed if Lucene returned a less well scored list of results rather than failing and how many developers actually get around to implement this kind of fallback strategy Any fallback strategy should attempt to score the same way. If it doesn t it s brittle and will lead to surprises e.g. when I add one more document to my index I don t want scoring to radically change . I did some work in the direction of using a scorer with a byte per document to keep track of scores http www.mail-archive.com java-dev lucene.apache.org msg03178.html A variation of norms 8 bit float is already checked into lucene... see lucene.util.SmallFloat. Debating Fixed or Won t Fixed - won t fix because we won t fall back but fixed because if you use constantscore mode you won t get a too many clauses exception anymore. Fixed it is I guess.
