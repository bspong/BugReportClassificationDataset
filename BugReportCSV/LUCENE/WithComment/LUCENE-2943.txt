ICU collator thread-safety issues
The ICU Collators unlike the JDK ones aren t thread safe http userguide.icu-project.org collation architecture a little non-obvious since its not mentioned in the javadocs and its not clear if the docs apply to only the C code but i looked at the source and there is all kinds of internal state. So in my opinion we should clone the icu collators which are passed in from the outside when creating a new TokenStream AttributeImpl to prevent problems. This shouldn t be a big deal since everything uses reusableTokenStream anyway. Here s a patch for trunk including fix to the deprecated 3.x filter . We should fix this bug in 3.x too. Patch looks fine Just one question is the clone method itsself thread-safe if not it must be synchronized somehow. I changed my mind a little bit The cloning of the Collator should be done in the Analyzer not in the Filter. The same applies to the AttributeImpl the cloning should not be done in the ctor. The problem is not that the TokenStream or the Attribute instance may reuse the attribute in different threads the problem is that the factory class the Analyzer does reuse the Collator in different threads when it produces multiple tokenstreams or the AF multiple attributes. This is a slight difference because the following code is always safe new CollationFilter Collator.newInstance lang cloning would be wrong. The reason for the whole thing TokenStream and Attribute instances itsself are single-threaded only but not the factory or the analyzer. Uwe that is one alternative. The only reason i did it this way is because I felt it was a bit of a trap to any users using the Filter directly . This is because JDK collators are in fact thread safe. This is a slight difference because the following code is always safe new CollationFilter Collator.newInstance lang cloning would be wrong. I don t think this is really a reasonable example usually in the search engine you would never use code like this the sort keys will be way too large for no reason. For example usually its the case you will set something more reasonable like primary strength case-insensitive . Because the clone is cheap and this is a trap to users I m still going to fight for my original patch. This way the ICU and JDK functionality behave consistently from a user perspective. I would be fine with both solutions for me it just looks wrong that way but for safety reasons its fine. Uwe i can agree it looks a little wrong but it makes the reusable case easier. the example you gave is the slow non-reusable case... honestly i m not very worried about making this slower... its already slow. if we are to put responsibility on the user to pass Collator clones to each TokenFilter it will make reusing more difficult e.g. custom analyzers . Again the big trap is that usually you see WARNING THIS CLASS IS NOT THREAD SAFE but the icu javadoc doesn t really say that you have to instead read this general architecture document... so I think by pushing the responsibility to the user there would be lots of bugs if anyone makes a custom analyzer factory etc . Updated patch I clone the JDK ones too. Its not really the case that these are thread-safe instead really what happens is their methods are synced if they are correct . So its good to clone to reduce contention. Also i took a look at harmony which simply wraps the ICU impl and doesn t sync which means its not thread safe but should be . For these reasons I think we should just clone the JDK one for safety too. i added a testThreadSafe for this issue which fails without the fix Committed revisions 1075850 1076017 branch 3x Bulk close for 3.1
