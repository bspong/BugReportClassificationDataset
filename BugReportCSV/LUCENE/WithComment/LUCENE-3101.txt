TestMinimize.testAgainstBrzozowski reproducible seed OOM
 junit Testsuite org.apache.lucene.util.automaton.TestMinimize junit Tests run 1 Failures 0 Errors 1 Time elapsed 3.792 sec junit junit Standard Error junit NOTE reproduce with ant test -Dtestcase TestMinimize -Dtestmethod testAgainstBrzozowski -Dtests.seed -7429820995201119781 1013305000165135537 junit NOTE test params are codec PreFlex locale ru timezone America Pangnirtung junit NOTE all tests run in this JVM junit TestMinimize junit NOTE Linux 2.6.37-gentoo amd64 Sun Microsystems Inc. 1.6.0 25 64-bit cpus 8 threads 1 free 294745976 total 310378496 junit junit Testcase testAgainstBrzozowski org.apache.lucene.util.automaton.TestMinimize Caused an ERROR junit Java heap space junit java.lang.OutOfMemoryError Java heap space junit at java.util.BitSet.initWords BitSet.java 144 junit at java.util.BitSet. init BitSet.java 139 junit at org.apache.lucene.util.automaton.MinimizationOperations.minimizeHopcroft MinimizationOperations.java 85 junit at org.apache.lucene.util.automaton.MinimizationOperations.minimize MinimizationOperations.java 52 junit at org.apache.lucene.util.automaton.RegExp.toAutomaton RegExp.java 502 junit at org.apache.lucene.util.automaton.RegExp.toAutomatonAllowMutate RegExp.java 478 junit at org.apache.lucene.util.automaton.RegExp.toAutomaton RegExp.java 428 junit at org.apache.lucene.util.automaton.AutomatonTestUtil.randomAutomaton AutomatonTestUtil.java 256 junit at org.apache.lucene.util.automaton.TestMinimize.testAgainstBrzozowski TestMinimize.java 43 junit at org.apache.lucene.util.LuceneTestCase LuceneTestCaseRunner.runChild LuceneTestCase.java 1282 junit at org.apache.lucene.util.LuceneTestCase LuceneTestCaseRunner.runChild LuceneTestCase.java 1211 junit junit junit Test org.apache.lucene.util.automaton.TestMinimize FAILED Thanks What to do 14 08 s1monw that automaton has 94201 states 14 08 s1monw 14 08 s1monw 450 MB long 14 08 s1monw selckin can you open an issue an explicit test case the problem appears to be splitblock and partition . these are using n 2 space... the rest of the datastructures seem ok either just states or sigma states these two were cut over from arraylist to bitset in revision 1026190 but it looks like they are sparse and we should use a better datastructure just for these two i think the other bitsets are all fine . I will look into reverting parts of the last commit on that issue - and move back to LinkedList State . The overhead should be small I checked the cardinalities of those bit sets... LOW And it only uses LinkedLists of pointers to state structures in contrast to a naive LinkedList Integer . This patch reverts splitblock partition and reverse to state before r1026190 the BitSets on top-level not in inner loops are unchanged After some perf analysis it showed that replacing the LinkedList in partition by HashSet makes it faster. Order is unimportant and the b1.remove b2.add combi in inner loop no longer uses linear scan. Thanks for looking into this Uwe looks like a good solution to me. Some more cleanup I will commit this now. If somebody else has a better idea how to optimize this on memory usage maybe use Mike s SortedIntSet go go go Committed revision 1103711 Thanks Robert for help with this horrible monster Thanks for reporting this selckin this is a great find definitely amazed we randomly generated this one There is a lot of power in randomness huh I really like these randomized tests... this should be a built-in functionality in JUnit call it repeatable randomness ...
