DefaultSimilarity.queryNorm should never return Infinity
Currently DefaultSimilarity.queryNorm returns Infinity if sumOfSquaredWeights 0. This can result in a score of NaN e. g. in TermScorer if boost 0.0f. A simple fix would be to return 1.0f in case zero is passed in. See LUCENE-698 for discussions about this. I m not sure if i agree with this concept. Do we really want the curve of values from queryNorm to have a step drop down from really huge values when sumOfSquaredWeights is near zero to 1 when sumOfSquaredWeights becomes so close to zero it can only be represented as 0.0f Float.MAX VALUE seems like a better choice then 1 but I haven t really thought through wether or not that will still trigger NaN scores. From a scoring perspective it s a multiplier that s only used at the top level so the scores produced will be zero anyway. How else might Similarity.queryNorm be used If the user uses a boost of zero It doesn t make sense to try and normalize that upwards though. Returning 0 could also make sense. Float.MAX VALUE seems like a better choice then 1 but I haven t really thought through wether or not that will still trigger NaN scores. Float.MAX VALUE 0.0f 0.0f. It would not result in NaN. Float.MAX VALUE seems like a better choice then 1 ... With nested queries could Float.MAX VALUE trigger overflow back to Infinity From a scoring perspective it s a multiplier that s only used at the top level so the scores produced will be zero anyway. huh queryNorm is passed down by BooleanWeight to all of the sub clauses ... am i miss understanding something huh queryNorm is passed down by BooleanWeight to all of the sub clauses ... am i miss understanding something Sorry I meant Similarity.queryNorm is only called at the top level. With nested queries could Float.MAX VALUE trigger overflow back to Infinity I don t think so... BooleanWeight multiplies the queryNorm by it s boost before calling normalize on the nested weights hence if the top-level boost is zero it will call normalize 0.0f on the subweights . SpanWeight doesn t seem to do nested normalization at all. Not sure if all the explain implementations would handle it correctly though. This one is fixed there is a Nan Inf check in queryNorm added fairly recently Bulk close for 3.1
