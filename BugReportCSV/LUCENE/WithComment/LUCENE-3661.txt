move deletes under codec
After LUCENE-3631 this should be easier I think. I haven t looked at it much myself but i ll play around a bit but at a glance SegmentReader to have Bits liveDocs instead of BitVector address the TODO in the IW-using ctors so that SegmentReader doesn t take a parent but just an existing core. we need some type of minimal MutableBits or similar subinterface of bits. BitVector and maybe Fixed OpenBitSet could implement it BitVector becomes an impl detail and moves to codec maybe we have a shared base class and split the 3.x 4.x up rather than the conditional backwards I think the invertAll should not be used by IndexWriter instead we define the codec interface to say give me a new MutableBits by default all are set redundant internally-consistent checks in checkLiveCounts should be done in the codec impl instead of in SegmentReader. plain text impl in SimpleText. This sounds like a great plan So then the use of BitVector is an impl detail to the codec... I started working on this some before christmas break and just merged it up to trunk. Ill commit it to a branch branches lucene3661 in case anyone wants to help. I don t think I really got much done yet but it would be nice to make our codec api more complete by including representation of deletions. So this is working in the branch SimpleText deletes and stuff but needs rounding out before committing e.g. the API should not be so horrible and some documentation and such. Here s a patch showing the differences between branch and trunk. I think its ready thanks to Mike for helping with a lot of the cleanup here. and also Simon for helping track down a tricky bug involving docvalues... maybe we should open an issue later to try to make it more resilient just for future refactorings One thing Can we not split the BitVector and LiveDocs in 3.x and trunk Just because the logic is inverse in 3.x deletions instead of live docs . This would also make the LiveDocs in trunk always have a codec header but not in 3.x Otherwise looks great We could I think it would be mostly duplicate code at this point. But like stored fields which is also shared its just another TODO we can do later. Definitely needs not block this issue its unrelated . We should open issue otherwise coomit that so I can work on splitting composite and atomic readers again I ll open a followup issue can be done in trunk after this is committed . Just for reference there are 3 bitvector versions that can be read unversioned darkages some 3.x versions codec header version 0 some 3.x versions codec header version 1 trunk so trunk always writes a versioned codec header even lucene 3.5 always writes a versioned codec header but i think the 3.x codec must at least support unversioned files still for e.g. 3.0 indexes. also under the same issue we could maybe remove bitvector completely and the codecs just use FastBitSet. there is no difference now that count is unused. This could be cleaner just having different serialization forms for fastbitset. Merging this to trunk now... We can use LUCENE-3613 issue for any remaining splitting of 4.x 3.x codec impls stored fields deletes .
