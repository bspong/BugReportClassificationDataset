Cleanup MMapDirectory to use only one MMapIndexInput impl with mapping sized of powers of 2
Robert and me discussed a little bit after Mike s investigations that using SingleMMapIndexinput together with MultiMMapIndexInput leads to hotspot slowdowns sometimes. We had the following ideas MultiMMapIndexInput is almost as fast as SingleMMapIndexInput as the switching between buffer boundaries is done in exception catch blocks. So normal code path is always the same like for Single Only the seek method uses strange calculations the modulo is totally bogus it could be simply int bufOffset int pos maxBufSize - very strange way of calculating modulo in the original code Because of speed we suggest to no longer use arbitrary buffer sizes. We should pass only the power of 2 to the indexinput as size. All calculations in seek and anywhere else would be simple bit shifts and AND operations the and masks for the modulo can be calculated in the ctor like NumericUtils does when calculating precisionSteps . the maximum buffer size will now be 2 30 not 2 31-1. But thats not an issue at all. In my opinion a buffer size of 2 31-1 is stupid in all cases as it will no longer fit page boundaries and mmapping gets harder for the O S. We will provide a patch with those cleanups. also we can fix the issue Shai brought up for the 3.1 VOTE while we are here. in seek long pos i think we should do try ... position ... catch IllegalArgumentException e if pos 0 throw exc else throw new IOException read past EOF This would be more consistent with NIOFS SimpleFS from an exception perspective. Here the patch. at a glance the patch is looking really good overall I ll help with some review and testing. here are some additional stress tests for mmap New patch with some minor issues fixed fixed the RuntimeException fixed readByte to throw EOF if we are at the end of the n-1 th buffer. as buffer n may be size 0 we will throw BufferUnderFlow in the chatch block. I added hasRemaining there so its consistent with readBytes. The check for an invalid power was bogus 0 is allowed leads to buffer size 1 The check for RandomAccessFile too big for maximum buffer size did not respect the additional buffer. nrBuffers can then overflow easily Same patch with Robert s tests included. same as uwe s patch but i also nuked the previous hack in TestTermVectorsReader as MMapDir returns read past EOF now like the others. Little cleanups improvements made readByte consistent with readBytes catch block using remaining-while loop for size 0 buffers renamed field names and variables to use chunkSize consistently I think it s ready to commit we should only wait for Mike to check on beast. 1 to commit In my stress NRT test runs optimize on a full Wiki index with ongoing indexing reopening without this patch I see performance drop substantially like 180 QPS down to 140 QPS when the JVM cuts over to the optimized segment. With the patch I see it jump up a bit after the optimize completes So this seems to make hotspot s job easier... 1 great work Uwe. 1 this looks awesome. Gute Arbeit Uwe Committed trunk revision 1135537 Committed 3.x revision 1135538 Thanks to Robert for help debugging my stupid vs problem and lots of fruitful discussions about the whole stuff and how to improve Thanks to Mike for testing on beast Now you can refactor CFSIndexInput Co bulk close for 3.3 MMapDirectory missed a explicit nulling of curBuf commited trunk revision 1205152 3x in revision 1205153
