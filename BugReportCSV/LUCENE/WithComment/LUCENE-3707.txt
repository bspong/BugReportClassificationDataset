Add a Lucene3x private SegmentInfosFormat implemenation
we still don t have a Lucene3x preflex version of segment infos format. we need this before we release 4.0 here is a patch Cool I will send my 1 once I tested and reviewed. One thing assert format SegmentInfos.FORMAT 4 0 In my opinion this should be a hard IndexFormatTooOldException which is correct for someone who removed 3.x codec from his classpath . It should not happen but for everything that comes from untrusted files on disk we should hard check those things. Otherwise maybe someone has a very strange codec configuration that enforces the 4.0 codec to read old indexes and does serious harm This also makes migration to Lucene 5.0 easier. We have the version check already available only 3.x codec needs to be removed and we are done. This check also costs nothing so we should always ever use hard checks when we read values from files to detect errors early of course if it s to heavy we can use asserts . agreed I will upload a new patch here is a new patch throwing IFTooOldExc as uwe suggested Hi Simon looks fine 1 The question is if the 3.x codec should throw IndexTooNew in the same way like 4.0 throws IndexTooOld It s just a suggestion... This should not be IndexFormatTooOld. IndexFormatTooOld is wrong. this segments file has been written with the name Lucene40 . Therefore if the version byte is not what you expect its CorruptIndexException nothing else. actually this should only be assert here. we don t even read the format byte its part of the preamble format codecname read by SI to determine the handoff . So just make it an assert. its impossible for the current exception to ever happen. If this is the case I am fine with that no problem. I just wanted to be sure. In general I am very sceptical with asserts in code that reads from disk. One example If we have code that reads a vInt withe the number of items in a list then we read this number of items followed by another vInt that has the length of the next list. Just asserting that this length is 0 is a bad idea because if the length vInt is 0 the file format is corrupt. And in that case a CorruptIndexException should be thrown. If we dont do this a corrupt file could lead to unexpected behaviour. I did exactly that e.g. in the code parsing the Kumoroji dictionary targetMap if the pointers in both arrays don t fit together the file format is also corrupt. The complaint here was only that asserts in code reading from disk should in most cases be hard checks you never know what the file contains or what the hex editor of the user did. In general I am very sceptical with asserts in code that reads from disk. Right but this format is not read from disk here. Once 3.x indexes are no longer supported 5.x we can actually remove SegmentInfos.format. It doesn t need to be an instance variable at that point in fact I think we perhaps should deprecate it already. If codecs want to write version information into their own segments file format they can do this themselves. But currently this is read and checked by SegmentInfos so that it knows which codec to invoke final int format input.readInt setFormat format check that it is a format we can understand if format FORMAT MINIMUM throw new IndexFormatTooOldException input format FORMAT MINIMUM FORMAT CURRENT if format FORMAT CURRENT throw new IndexFormatTooNewException input format FORMAT MINIMUM FORMAT CURRENT if format FORMAT 4 0 codecFormat Codec.forName input.readString else codecFormat Codec.forName Lucene3x I will use the first patch then. I had the same impression as robert that this should be an assert since it can not happen though. any objections beside that simon No objections from myself Sorry for the noise I was just carefully reading the patch. The first patch looks good to me. We can open a new issue about this format business. We should deprecate any getter for this on SegmentInfos. We also need to fix CheckIndex to not try to interpret this thing and print out information about it to the user because that will only cause confusion. Given that the only purpose of this format is to know if we can read the codec string and the rest of the index is left up to the codec its likely we might never change the format again So CheckIndex should be doing other things to print diagnostic type stuff not using this format byte. alright I will commit this robert can you open a followup for the stuff you where discussing 
