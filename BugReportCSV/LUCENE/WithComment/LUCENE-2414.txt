add icu-based tokenizer for unicode text segmentation
I pulled out the last part of LUCENE-1488 the tokenizer itself and cleaned it up some. The idea is simple First step is to divide text into writing system boundaries scripts You supply an ICUTokenizerConfig or just use the default which lets you tailor segmentation on a per-writing system basis. This tailoring can be any BreakIterator so rule-based or dictionary-based or your own. The default implementation if you do not customize is just to do UAX 29 but with tailorings for stuff with no clear word division Thai uses dictionary-based word breaking Khmer Myanmar Lao uses custom rules for syllabification Additionally as more of an example i have a tailoring for hebrew that treats the punctuation special. People have asked before for ways to make standardanalyzer treat dashes differently etc attached is a patch. after applying it run ant genrbbi which compiles the rule tailorings to binary DFAs for faster loading. you dont have to do this e.g. if you want you can always create these from String but this is much faster. attached is a patch with some suggestions from Uwe use reflection for the compiler instead of a regex-like tunnel remove a unused variable in the tokenizer Hi Robert I attached a patch with almost everything unchanged only two problems in build.xml and the rule compiler. This one did not work on my computer If the src dir is not found File.listFiles returns null I added an IOException here The above line NPE IOExceptioned because of spaces in file path. In general you should never use arg line ... in ant execs instead list parameters separately this is also suggested by ANT docs . This will enable proper parameter escaping. We do this everywhere else in Lucene but not in ICU. All other files keep unchanged tests pass after compiling the rule files. Previous patch missed file additions. One more comment The abstract ICUTokenizerConfig is public but only has package protected methods. So nobody can ever implement an own one. Abstract classes are different than interfaces whose methods are always public that the nature of interfaces . I would make the methods public else the whole configuration makes no sense. I would also change the method name of getTokenizer to getBreakIterator . ah thanks for finding these bugs Uwe. I ll upload a new patch. updated patch with Uwe s comments addressed. Looks good Will test again later Hi Robert All fine. No more problems found I added tests for offsets and type added some docs to overview.html cleared up javadocs warnings and marked everything experimental for now . I will commit in a few days unless there are any objections. Committed revision 940447. backported to 3x revision 941706 Bulk close for 3.1
