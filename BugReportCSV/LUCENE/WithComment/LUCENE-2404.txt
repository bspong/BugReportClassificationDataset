Improve speed of ThaiWordFilter by CharacterIterator factor out LowerCasing and also fix some bugs empty tokens stop iteration 
The ThaiWordFilter creates new Strings out of term buffer before passing to The BreakIterator. But BreakIterator can take a CharacterIterator and directly process on it without buffer copying. As Java itsself does not provide a CharacterIterator implementation in java.text we can use the javax.swing.text.Segment class that operates on a char and is even reuseable This class is very strange but it works and is in JDK 1.4 and not deprecated. The filter also had a bug It stopped iterating tokens when an empty token occurred. Also the lowercasing for non-thai words was removed and put into the Analyzer by adding LowerCaseFilter. New patch which preserves backwards with matchVersion. It adds an LowerCaseFilter in the ctor of ThaiWordFilter automatically so the bahviour does not change except a second bug The previous version of the filter did not correctly lowercase a token that contains ThaiEnglishThai text. As the filter is now plugged before it will lowercase this correctly so its a backwards break. Since Version 3.1 the filter is no longer automatically used instead ThaiAnalyzer plugs it before the filter I reversed the order in contrast to previous patch to have the same order in deprecated and actual case . This is great. it already more than doubles the speed of this filter on english text... but this filter has always been cheating with the UnicodeBlock check on charAt 0 as you could have EnglishThaiEnglish too. it also cheats because it doesn t check that the break boundaries are words and not just spaces or punctuation. I suppose the above two things are not much of a problem if you assume StandardTokenizer but maybe a problem for other Tokenizers... tricky to figure out how to make it correct and still as fast as the cheating Another variant of the previous patch slightly faster as Robert said maybe we get an inspiration by that. It uses cloneAttributes and does not create new clones all the time. Looking at Uwe s code points out there is another bug in the old filter it does not really handle position increments correctly. So if there is a stopword or some other posInc it gets applied to all subwords... in my opinion only the first token should carry this. Otherwise you can have problems like SOLR-1852 Yes this is not a problem if you use the ThaiAnalyzer as StopFilter comes after this filter. But users of Solr plugging this filter after a StopFilter will have problems. New version of the cloneAttributes-version that produces correct position increments with matchVersion 3.1. Nice Uwe. So this patch fixes quite a few bugs and speeds things up... do you want to commit I will commit this soon after adding changes. Committed revisions 935734 Lucene 935739 Solr Bulk close for 3.1
