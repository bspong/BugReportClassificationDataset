factor out a shared spellchecking module
In lucene s contrib we have spellchecking support index-based spellchecker directspellchecker etc . we also have some things like pluggable comparators. In solr we have auto-suggest support with two implementations it looks like some good utilities like HighFrequencyDictionary etc. I think spellchecking is really important... google has upped the ante to what users expect. So I propose we combine all this stuff into a shared modules spellchecker which will make it easier to refactor and improve the quality. Just a quick shot at this all tests pass . Really any serious refactoring e.g. perf improvements should be on followup issues I think. before applying the patch run this svn move lucene contrib spellchecker modules svn move solr src java org apache solr util HighFrequencyDictionary.java modules spellchecker src java org apache lucene search spell svn move solr src java org apache solr util TermFreqIterator.java modules spellchecker src java org apache lucene search spell svn move solr src java org apache solr util SortedIterator.java modules spellchecker src java org apache lucene search spell svn move solr src java org apache solr spelling suggest Suggester.java solr src java org apache solr spelling svn move solr src java org apache solr spelling suggest modules spellchecker src java org apache lucene search spell 1 Robert thanks for starting this and pushing up a patch. I think its a great start and we should try to let lots of other stuff follow ASAP. Really any serious refactoring e.g. perf improvements should be on followup issues I think. 1 This is a related issue in SOLR that I plan to work on this week Robert. Is it o.k. I think so This issue just moves the code around e.g. your FST-based Lookup impl would ultimately sit under modules spellchecker instead of Solr and lucene users would be able to use it too. This is awesome Robert Spell checking is a hugely important feature... Ok great. I ll look into this this week. well there s no rush on this issue i just wanted to throw out the idea... I think it definitely makes sense if you are going to be implementing cool FST stuff for suggesting etc i saw a lot of opportunities for refactoring just by combining the code in one place. See also SOLR-2080. Spell checking suggestions and related searches are all part of what I would call a Suggester framework or a Discovery framework. Doesn t need to be done here but I do think it s easy to have a common API for all of these suggestions especially if we can factor in user feedback into them as right now we only solve 1 2 of the problem. Grant should we call the module suggestor or suggestions or something instead of spellcheck I didnt spend a lot of time thinking about the name in the patch but thats a good point. 1 for a suggester module. yeah I like suggestions or suggester i don t really have any better suggestions ack i hate puns unintentional or otherwise on the name but the one word of caution i would put out there is that suggestions and suggester are vague about what they suggest people might confuse this with morelikethis or recommendation engine type stuff. if that s in the scope for what you guys have in mind for this module go ahead. if not .... maybe query-suggester or term-suggester maybe query-suggester or term-suggester Or maybe reword or rephrase Or maybe did-you-mean or instead How about just suggest I don t like suggester because I m really not sure if it s spelled suggestor and I feel whatever name we choose here damned well better be easy to spell if that s in the scope for what you guys have in mind for this module go ahead. It s in the back of my head. I ve got Mahout collab. filtering hooked up through Solr already and it would be dead simple to bring in here too but it would fit nicely in this framework. For instance given a set of search results it can go do Item-Item recommendations based on doc-ids. suggest 1. Simple to the point and has room to grow. Is this ready to go in.... The patch probably won t apply after I added that automaton-based suggester to Solr but I didn t have a chance to peek at it yet. -1 to this for now. The interpretation of what it means to be merged has taken a turn for the worse with solr features being blocked see SOLR-2272 . I fear we may need to split Solr into it s own TLP and hence we should be doing any further refactoring at this time since if Solr ends up as it s own project it will want these files to remain under it s control. Yonik that is an improper veto and does not stand. Yonik that is an improper veto and does not stand. Greg could you please be more specific Why is Yonik s veto improper I understand Greg s objection - given that the projects are currently one what I said was not a technical argument against the patch. If Lucene and Solr do end up splitting Solr could always copy or start at an earlier revision any files that it needed more control over anyway. My -1 is rescinded. Updated patch Supports Dawid s new FST autosuggester Ported the low-level tests over to the module Backwards compatibility with older Solr config files before applying the patch please use the following script svn move lucene contrib spellchecker modules suggest svn move solr src java org apache solr util HighFrequencyDictionary.java modules suggest src java org apache lucene search spell svn move solr src java org apache solr util TermFreqIterator.java modules suggest src java org apache lucene search spell svn move solr src java org apache solr util SortedIterator.java modules suggest src java org apache lucene search spell svn move solr src java org apache solr spelling suggest Suggester.java solr src java org apache solr spelling svn move solr src java org apache solr spelling suggest modules suggest src java org apache lucene search spell svn move modules suggest src java org apache lucene search spell suggest modules suggest src java org apache lucene search svn revert solr src java org apache solr spelling suggest svn mkdir parents modules suggest src test org apache lucene search suggest svn move solr src java org apache solr spelling Suggester.java solr src java org apache solr spelling suggest svn revert solr src java org apache solr spelling suggest fst svn revert solr src java org apache solr spelling suggest jaspell svn revert solr src java org apache solr spelling suggest tst svn mkdir parents modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest Average.java modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest LookupBenchmarkTest.java modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest PersistenceTest.java modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest TermFreq.java modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest TermFreqArrayIterator.java modules suggest src test org apache lucene search suggest svn move solr src test org apache solr spelling suggest fst modules suggest src test org apache lucene search suggest fst svn move solr src test-files Top50KWiki.utf8 modules suggest src test org apache lucene search suggest here is the previous patch as an ordinary diff maybe easier to apply. these patches go completely out of date fast... I had to redo the previous patch from scratch basically . I d like to commit this one before this happens and if anyone has concerns or objections I ll just revert and we can revisit. I d like to commit this one before this happens and if anyone has concerns or objections I ll just revert and we can revisit. looks good after a quick scan... I think you should commit and we iterate on it once its in even if we need to revert. Reverting should not feel wrong so here is my 1 to commit Or rather than revert... just iterate it forward until it satisfies everybody s concerns. Why keep moving backwards I agree I would much rather iterate forward if anyone has concerns. I will mark this issue resolved we can open separate issues for any problems. I know of a few followup issues I will open myself. Committed revision 1126642. I d like to expose this to 3.x users as well but this is more complicated in this case so I ll open some followup issues for this. Or rather than revert... just iterate it forward until it satisfies everybody s concerns. Why keep moving backwards 1. Reverting itself should not feel wrong - asking others to revert should IMO. The default mode should be moving forward not backward. Everything is open to change and improvement - asking for a revert from someone else will always be considered a very big deal by me. Unless it s a special circumstance I m going to rant and rave about it every time myself.
