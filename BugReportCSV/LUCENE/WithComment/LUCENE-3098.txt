Grouped total count
When grouping currently you can get two counts Total hit count. Which counts all documents that matched the query. Total grouped hit count. Which counts all documents that have been grouped in the top N groups. Since the end user gets groups in his search result instead of plain documents with grouping. The total number of groups as total count makes more sense in many situations. I think this can be implemented as separate collector and then together with the SecondPassGroupingCollector executed in the second search. We can use the MultiCollector for that. I agree we should make it easy to get total number of unique groups. We may want to just fold this into the 1st pass collector since it s already looking up group ord value Attached an initial patch for computing the total group count. Currently it is implemented as a separate collector. The collector can be executed in the first and second pass if the MultiCollector is used. We may want to just fold this into the 1st pass collector since it s already looking up group ord value The 1st pass collector is more concerned with finding the top N groups. For this it takes in account the sort within a group to choose the right group head. The total group count collector doesn t care about the group sort. It just increments the count if an unseen group has been detected. The group count collector needs to do this for all groups not just the top N. Therefore I think it is best implemented in a separate collector. I also measured some basic performance. I used a machine with a 2.16 GHz Core 2 Duo processor and 4GB RAM. I used an index of 30M documents. The group field has around 7500 unique values. The average search time was around 350 ms. The average heap usage was 122 MB. I ran 50 searches in parallel with only the total group count collector. Thanks for the quick pach Martijn OK I think a dedicated separate collector is a good approach. Though I m nervous that you pull a top level DocTermsIndex just to get the max number of unique groups. In fact it s sort of odd that the user should even have to pass this in Actually SentinelIntSet rehashes itself... so why do we need to alloc it to the max possible values up front Also it d be great to fold this collector in the random test in TestGrouping I can do that too if you don t want to TODO I put this here to try to remind my later self . SentinelIntSet rehashes itself... so why do we need to alloc it to the max possible values up front Actually we don t. I will remove it. it d be great to fold this collector in the random test in TestGrouping No problem. I will fold it into the random test. OK thanks Martijn The new collector looks great. Attached new patch. Added total count collector to random tests Removed calculating max possible values upfront. Instead I added a initial size instead. A larger initial size results in less rehashing. Handy if you know more or less the number of groups upfront. I m nervous that you pull a top level DocTermsIndex just to get the max number of unique groups. I should have been nervous too Turns out that the average heap usage is now around 59MB. A decrease of heap usage around 50 The random tests are really valuable I found a bug with it. Group with null values weren t handled properly. Changing the random test was a bit difficult for me. So I think it is good if you take a look at it. Patch looks great And the changes to TestGrouping look spot on Ð you randomly swap in the TotalGroupCountCollector via MultiCollector and assert that slowGrouping matches. Maybe only one ctor for TopGroups Ie we just pass in null as totalGroupCount . I m wary of ctor explosion over time... In TestGrouping you don t need a separate uniqueGroupCount int Can t you just use knownGroups.size in the end For TotalGroupCountCollector in the jdocs for the ctor maybe state that caller should set initialSize to rough estimate of how many uniuqe groups are expected but that this uses up 4 bytes initialSize Maybe we should also add a ctor that sets a default for this 128 and mark the other ctor as expert Hmm it s a little odd to have TopGroups hold the totalGroupCount Ie it s only the test case that makes use of this because the 2nd pass collector just sets it to null It d be nice to find some way to have 2nd pass collector be able to set this... I m nervous that you pull a top level DocTermsIndex just to get the max number of unique groups. I should have been nervous too Turns out that the average heap usage is now around 59MB. A decrease of heap usage around 50 Right we should avoid pulling FieldCache entries for top level reader since it doubles the RAM usage if you also pull per-segment as we do here . Also it s rather CPU costly to compute Ð does a merge sort of all terms in the index. The random tests are really valuable I found a bug with it. Group with null values weren t handled properly. Oh I m glad to hear that I had just added testing of the null case... We are big fans of randomized testing Ð I wrote about this here http blog.mikemccandless.com 2011 03 your-test-cases-should-sometimes-fail.html Maybe only one ctor for TopGroups Ie we just pass in null as totalGroupCount . I m wary of ctor explosion over time... In TestGrouping you don t need a separate uniqueGroupCount int Can t you just use knownGroups.size in the end For TotalGroupCountCollector in the jdocs for the ctor maybe state that caller should set initialSize to rough estimate of how many uniuqe groups are expected but that this uses up 4 bytes initialSize Maybe we should also add a ctor that sets a default for this 128 and mark the other ctor as expert I agree. I ve updated the patch. Hmm it s a little odd to have TopGroups hold the totalGroupCount Ie it s only the test case that makes use of this because the 2nd pass collector just sets it to null It d be nice to find some way to have 2nd pass collector be able to set this... That would be nice. Future collectors might need something similar. I m currently think about a TopGroupsEnrich interface that collectors can implement. This allows them to add data to the TopGroups like total group count. The SecondPassGroupingCollector has a list of collectors that implement the TopGroupsEnrich interface. When the getTopGroups method is executed it iterates of the these collectors and the TopGroups is enriched with data. Downside is that the fields inside TopGroups can t be final and properly we need setters. I think if we do something like this we should do this in a new Jira issue. Last but not least the 3x branch backport. Patch looks great Martijn thanks Maybe until we work out how multiple collectors can update a single TopGroups result we should make TopGroups totalGroupCount changeable after the fact Ie add a setter This way apps can at least do it themselves before passing the TopGroups onto consumers within the apps Also could you update the code sample in package.html showing how to also use the TotalGroupCountCollector incl. setting this totalGroupCount in the TopGroups I will update both patches today. A setter in TopGroups for now seems fine to me. One more idea should we add a getter to TotalGroupCountCollector so you can actually get the groups Collection BytesRef themselves... Ie not just the total unique count . Hmmm... So you get a list of all grouped values. That can be useful. Only remember that doesn t tell anything about the group head most relevant document of a group since we don t sort inside the groups. Right we d make it clear the collection is unordered. It just seems like since we are building up this collection anyway we may as well give access to the consumer That is true. It is just a simple un-orded collection of all values of the group field that have matches the query. I ll include this as well. Attached patch with the discussed changes. 3x patch follows soon. Attached a new patch. Renamed TotalGroupCountCollector to AllGroupsCollector. This rename reflects more what the collector is actual doing. Group values are now collected in an ArrayList instead of a LinkedList. The initialSize is now also used for the ArrayList. Looks great Martijn I ll commit in a day or two if nobody objects... Great Attached the 3x backport. Thanks Martijn But in general you don t have to do the 3.x backport I can do it too... We want to minimize the effort for people to contribute to Lucene Solr But thank you for backporting Committed. I made a small change to TestGrouping renamed one variable and tweaked jdocs a bit on AllGroupsCollector. This is a great addition to the grouping module Ð thanks Martijn Bulk closing for 3.2
