Highlighter has problems when you use StandardAnalyzer with LUCENE 29 or simplier StopFilter with stopWordsPosIncr mode switched on
This is a followup on LUCENE-1987 If you set in HighligterTest the constant static final Version TEST VERSION Version.LUCENE 24 to LUCENE 29 or LUCENE CURRENT the test testSimpleQueryScorerPhraseHighlighting fails. Please note that currently before LUCENE-2002 is fixed you must also set the QueryParser to respect posIncr. Umm - its hard to emulate the positions stuff from phrasequery with a SpanQuery. A limitation I hadn t really though much of. Should be doc d. One - uh - sloppy fix - is to count up all of the extra positions and add that to the slop. ie if the positions for a phrasequery are 0 1 3 stop word removed at 2 you would add 1 to the slop. 0 1 3 5 - add 2 to the slop. I think that keeps a fairly good approximation. Havn t thought about how that would work with MultiPhraseQuery yet. Well no crap - MultiPhraseQuery already does that. Someone else contrib d that. Guess they are ahead of me - would have saved some thought to look at it Here is a patch showing essentially what I mean Could you explain this part if inc lastInc slop inc Seems like that would cause A B C D to only have a slop of 3 represents a gap of 1 . Couldn t slop just be maxPos-minPos 1-numTokens Hmm - well now you have me worried - never seen you be wrong. I just tried a test like that and it appeared to work though. Ah - I should have looked closer at the MultiPhraseQuery code - it is wrong - just happens to work. You only need to add to the slop the largest inc because the SpanQuery slop is the dist allowed between each span. So thats why it works - it finds 3 the first time doesn t add any more for the rest but 3 is enough. I ll fix. This should be more correct - add the largest inc to the slop if its great than 1. Gotto consider this against your suggestion. Okay - I think this is the way to go - maxPos-minPos 1-numTokens is too much slop because it just has to be the largest posInc - forgot thats how SpanQueries work when I did the orig patch. You only need to add to the slop the largest inc because the SpanQuery slop is the dist allowed between each span. Learn something new every day Is this javadoc incorrect or simply ambiguous or am I reading it wrong Construct a SpanNearQuery. Matches spans matching a span from each clause with up to code slop code total unmatched positions between them. When code inOrder code is true the spans from each clause must be ordered as in code clauses code . public SpanNearQuery SpanQuery clauses int slop boolean inOrder this clauses slop inOrder true The total would almost seem to tip the ambiguity toward meaning that it s the total slop between all clauses. OK Mark you get this one The total would almost seem to tip the ambiguity toward meaning that it s the total slop between all clauses. Yeah I think it needs to be changed. Total appears just wrong. Perhaps something more along the lines of Matches spans matching a span from each clause with up to code slop code unmatched positions between each of them Mark is this one done Bulk close all 2.9.1 issues.
