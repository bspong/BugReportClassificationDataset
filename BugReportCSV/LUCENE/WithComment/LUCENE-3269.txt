Speed up Top-K sampling tests
speed up the top-k sampling tests but make sure they are thorough on nightly etc still usually we would do this with use of atLeast but these tests are somewhat tricky so maybe a different approach is needed. here s a patch that speeds up the slowest ones a bit doesn t really solve the problem but helps as a step Patch looks good. One other idea I think we should try is to create the large indexes once per all Top-K tests extensions. There are several references to FacetTestBase.initIndex and I think that the TopK tests can create their indexes which is the same at BeforeClass perhaps all indexes per partition sizes that are tested and then proceed with testing. I think that will cut away a large portion of the running time. Hi Shai here is an updated patch that achieves the same thing now the tests don t create redundant indexes One more tweak this one seems to help a lot allows subclasses to tweak the IWConfig we use the same trick here that we use for NRQ tests to prevent really slow behavior for such large indexes Patch introduces the following HashMap Integer SearchTaxoDirPair which is initialized in beforeClass and maps a partition size to the pair of Directories. initIndex first checks the map for the partition size and creates the indexes only if no matching pair is found. The sampling tests do not benefit from that directly as they only run one test method however if they will run in the same JVM then they will reuse the already created indexes. Patch is against 3x and seems trivial so I intend to commit this later today or tomorrow if there are no objections. Hi Shai a couple suggestions. With the current patch we will never close these directories so we lose some test coverage like the CheckIndex at the end... I think these tests caught a serious JRE bug in this checkindex so i d like to keep it. Additionally we have a problem I think if we randomly get a FSDirectory especially on windows. So how about we build up a RAMdir and cache it when topK tests start up they could do something like this Directory dir newDirectory random getCachedDir ... dir.close where getCachedDir is the access to the cache if it doesnt exist it builds it and its always a ramdir . LuceneTestCase already has newDirectory random Directory that copies from an existing directory Sorry Shai i got myself confused and thought you were trying to cache across-tests... this patch is good in case a test has multiple methods... Right. Caching across tests is very tricky since they can anyway run in different JVMs with parallel testing and so we ll gain nothing. And the tests are not really slow - the sampling tests run 12 seconds on my laptop ... not a big deal. I ll commit shortly. Committed revisions 1201677 3x and 1201678 trunk . Thanks Robert I see what got you confused it was me not you however if they will run in the same JVM then they will reuse the already created indexes what I wrote is wrong I got myself confused Ð whatever you do in beforeClass affects only that testcase not all the ones that will run in the JVM. Perhaps JUnit need to invent two more concepts StartJVM and EndJVM for this to happen Bulk close after release of 3.5
