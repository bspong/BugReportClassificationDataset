 PATCH Highlighter Delegate output escaping to Formatter
Patch for jakarta-lucene-sandbox contributions highlighter CVS version 3rd February 2005 This patch allows the highlighter Formatter to control escaping of the non highlighted text as well as the highlighting of the matching text. The example formatters highlight the matching text using XML HTML tags. This works fine if the plain text does not contain any characters that need to be escaped for HTML output i.e. and however this cannot be guaranteed. As the formatter controls the method of highlighting in the examples this is HTML but it could be any other form of markup it should also be responsible for escaping the rest of the output. This patch adds a method encodeText String to the Formatter interface. This is a breaking change. This method is called from the Highlighter with the text that is not passed to the formatter s highlightTerm method. The SimpleHTMLFormatter has a public static method for performing simple HTML escaping called htmlEncode. The SimpleHTMLFormatter GradientFormatter and SpanGradientFormatter have been updated to implement the encodeText method and call the htmlEncode method to escape the output. For existing formatter to maintain exactly the same behaviour as before applying this patch they would need to implement the encodeText method to return the argument value without modification e.g. public String encodeText String originalText return originalText Created an attachment id 14169 Delegate output escaping to Formatter encodeText method This patch allows the highlighter Formatter to control escaping of the non highlighted text as well as the highlighting of the matching text. Thanks for this. I think the suggestion looks useful but I have a couple of concerns. Not only do we break the Formatter interface we also break the behaviour for those upgrading. If people have applications which already escape the content eg before or after calling highlighter when they upgrade to the proposed new version their content will be double-escaped. They will also incur the additional performance overhead for encoding where it may not be required Note could initialize htmlEncode s StringBuffer to at least plainText.length . I guess we could add a flag to the html-based formatters which allows the user to turn encoding on or off. Will the htmlEncode function you ve defined work for more exotic character sets eg CKY Cheers Mark This patch allows the highlighter Formatter to control escaping of the non highlighted text as well as the highlighting of the matching text. Thanks for this. I think the suggestion looks useful but I have a couple of concerns. Not only do we break the Formatter interface we also break the behaviour for those upgrading. If people have applications which already escape the content eg before or after calling highlighter when they upgrade to the proposed new version their content will be double-escaped. They will also incur the additional performance overhead for encoding where it may not be required Note could initialize htmlEncode s StringBuffer to at least plainText.length . Either we could add a flag to the html-based formatters which allows the user to turn encoding on or off or we could suggest they subclass to override encodeText. Will the htmlEncode function you ve defined work for more exotic character sets eg CKY Cheers Mark In reply to comment 3 Not only do we break the Formatter interface we also break the behaviour for those upgrading. If you need to keep the Formatter interface stable then we can do this by adding another interface that extends Formatter. The Highlighter can adapt its behaviour depending on the actual instance supplied. Yes the patch does cause a behaviour change. The SimpleHTMLFormatter GradientFormatter and SpanGradientFormatter will HTML encode their output where previously they did not. If that behaviour is not acceptable then they can be changed to implement the encodeText method such that it just passes back the originalText this would give exactly the same behaviour as with the current version. If people have applications which already escape the content eg before or after calling highlighter when they upgrade to the proposed new version their content will be double-escaped. I could not find a reliable way of escaping the text if the original search text contained HTML content. If the text is HTML escaped before the TokenStream is built then the highlighter is parsing a potentially different stream to the original search. Also the TokenStream and the text must be kept in sync otherwise the TokenGroup indexes are off. The text cannot be escaped after highlighting because the original contains the same mark-up used to highlight the matching tokens. It would be possible to get the SimpleHTMLFormatter to use 2 specific GUIDs to wrap the highlight tokens as it is unlikely that these would also appear in the original text - these could then be replaced with the correct tags after HTML escaping. They will also incur the additional performance overhead for encoding where it may not be required Note could initialize htmlEncode s StringBuffer to at least plainText.length . That would certainly help. If we are going to break the Formatter interface how about changing the methods to take a java.io.Writer or java.io.PrintWriter this would reduce the number of temporary strings created Will the htmlEncode function you ve defined work for more exotic character sets eg CKY No it is a brain dead implementation. Commons Lang has an implementation that could be used escapeHtml String in http svn.apache.org viewcvs.cgi jakarta commons proper lang trunk src java org apache commons lang StringEscapeUtils.java rev 137958 view markup Do you really want to include something like that in with the Highlighter Is the Highlighter supposed to do HTML highlighting out of the box or should it just be a toolkit that makes it easy to do so. Nicko How about keeping the existing Formatter interface and making the Highlighter class encode then pass strings to the formatter. The highlighter can have a new setEncoder method to set a configurable choice of Encoder implementation with your simple one as the out-of-the-box default implementation . This may be more optimised because the Highlighter is in a position to pick and choose which sections of the text need encoding because it selects the best bits . This centralized selection of encoder is probably a bit neater too. From update of attachment 14169 Patch replaced by new patch to add separate Encoder. Created an attachment id 14174 NewFile Encoder Interface New Encoder interface Created an attachment id 14175 NewFile HTML Encoder Implementation of Encoder interface that does simple HTML output escaping Created an attachment id 14176 NewFile Default no-op Encoder Implementation of the Encoder interface that does not modify the output text Created an attachment id 14177 Patch to update Highlighter to use an Encoder The Highlighter takes an optional Encoder through a new constructor. If not specified the default value is to use the DefaultEncoder which does not modify the text. I have updated the changes so that the existing interfaces are unchanged and the current behaviour is preserved. When creating the Highlighter an Encoder object can be passed to the constructor along with the current Formatter. The Encoder will be used to escape any text that is output including the text that is passed to the Formatter. The Encoder interface contains the encodeText String method. The DefaultEncoder is an implementation of the Encoder interface that does not modify the text this is used by default to provider the current behaviour. The SimpleHTMLEncoder is an implementation of the Encoder interface that performs basic HTML output escaping on all the text. Great stuff thanks Nicko. I ll apply the patch as soon as I get the new SVN access sorted out.
