Define clear semantics for Directory.fileLength
On this thread http mail-archives.apache.org mod mbox lucene-java-dev 201003.mbox 3C126142c1003121525v24499625u1589bbef4c0792e7 mail.gmail.com 3E it was mentioned that Directory s fileLength behavior is not consistent between Directory implementations if the given file name does not exist. FSDirectory returns a 0 length while RAMDirectory throws FNFE. The problem is that the semantics of fileLength are not defined. As proposed in the thread we ll define the following semantics Returns the length of the file denoted by code name code if the file exists. The return value may be anything between 0 and Long.MAX VALUE. Throws FileNotFoundException if the file does not exist. Note that you can call dir.fileExists name if you are not sure whether the file exists or not. For backwards we ll create a new method w clear semantics. Something like deprecated the method will become abstract when fileLength name has been removed. public long getFileLength String name throws IOException long len fileLength name if len 0 fileExists name throw new FileNotFoundException name return len The first line just calls the current impl. If it throws exception for a non-existing file we re ok. The second line verifies whether a 0 length is for an existing file or not and throws an exception appropriately. I am not sure we should mark getFileLength deprecated though in order to alert users that it will become abstract. Can we instead just note that in its Javadocs It will be awkward if we deprecate both fileLength and getFileLength . Is it really necessary to obtain the length of a file from the Directory Lucy doesn t implement that functionality and we haven t missed it Ð we re able to get away with using the length method on InStream and OutStream. I see that IndexInput and IndexOutput already have length methods. Can you simply eliminate all uses of Directory.fileLength within core and deprecate it without introducing a new method I don t think Lucene relies on file length we do use it for diagnostics logging eg IW s infoStream . Hmm I guess we do use it for merging purposes LogByteSizeMergePolicy where we try to merge roughly similarly sized by net size in bytes segments. I would rather not increase our reliance on it eg LUCENE-2373 proposes to do so Ð it s a piece of metadata that is sometimes eg over NFS less reliable than file contents. The less we rely on from the filesystem the more robust portable Lucene will be... Net net I think we should keep the method but restrict our use of it. I do think we should move to throwing FNFE if the file does not exist... though I think a break in back compat may be OK here Vs do the new method deprecated abstract approach . I like Marvin s suggestion - deprecate delete Dir.fileLength and rely on InStream.length if needed I believe if we actually open the file for reading NFS gives us the correct length . If not - throw FNFE and go for backcompat break instead of new deprecate cycle. Well ... dir.fileLength is also used by SegmentInfos.sizeInBytes to compute the size of all the files in the Directory. If we remove fileLength then SI will need to call dir.openInput.length and the close it Seems like a lot of work to me for just obtaining the length of the file. So I agree that if you have an IndexInput at hand you should call its length method rather than Dir.fileLength. But otherwise if you just have a name at hand a dir.fileLength is convenient I m also ok w the bw break rather than going through the new deprecate cycle. I m also ok w the bw break rather than going through the new deprecate cycle. 1 I think we should keep both Dir.fileLength and II.fileLength. Patch clarifies the contract fixes the directories to adhere to it and adds a CHANGES under backwards section. All tests pass. That s a fairly trivial patch therefore I plan to commit tomorrow. Just FYI Committed revision 933879. backport to 3.1 Committed revision 941468. Bulk close for 3.1
