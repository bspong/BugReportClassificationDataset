Consolidate all Solr s Lucene s analyzers into modules analysis
We ve been wanting to do this for quite some time now... I think now that Solr Lucene are merged and we re looking at opening an unstable line of development for Solr Lucene now is the right time to do it. A standalone module for all analyzers also empowers apps to separately version the analyzers from which version of Solr Lucene they use possibly enabling us to remove Version entirely from the analyzers. We should also do LUCENE-2309 decouple as much as possible indexer from the analysis API but I don t think that issue needs to block this consolidation. Once we do this there is one place where our users can find all the analyzers that Solr Lucene provide. Does consolidation include contrib icu too Otherwise we still suffer from similar problems such as you need this filter in contrib icu to standardize your width differences in CJK text GreekLowerCaseFilter and such that are not really necessary and can be satisfied with case folding etc. and really NFKC Casefold in my opinion should just replace LowerCaseFilter in every single last one of these analyzers Robert 1 Does consolidation include contrib icu too 1 Does consolidation include contrib icu too 1 Especially if we really go the route of individually packaging artifacts for releasing each component separately. I played with this issue enough already to realize its gonna be a pain huge svn movements and lots of changes. so here s a patch that moves the PorterStemmer to contrib analyzers... under the en pkg ... its a start. I would like to commit tomorrow unless anyone objects. 1 to doing this in as-baby-steps as we can committed LUCENE-2413 porter.patch revision 940459. attached is a patch to move ISOLatin1AccentFilter and ASCIIFoldingFilter to contrib under miscellaneous . I hacked the analyzing queryparser s test to avoid a dependency on contrib analyzers but gonna need a TestAnalyzer soon. would like to commit soon unless there are objections committed LUCENE-2413 folding.patch revision 940591. Here my patch for LengthFilter and PerFieldAnalyzerWrapper. Thanks Uwe the help is appreciated attached is a patch for TeeSink it moves it to contrib analyzers sinks I moved the test in TestIW seems to really be unrelated to IW as-is to the TeeSinkTest it appears from the JIRA issue etc that this is simply testing that end is implemented correctly in TeeSink and there is already a separate test for end in TestIW. Committed LUCENE-2413-PFAW LF.patch revision 940632 Committed LUCENE-2413 teesink.patch revision 940633 attached is a patch that moves some high-level charfilter functionality to contrib analyzers so MappingCharFilter BaseCharFilter NormalizeCharMap - o.a.l.analysis.charfilter Committed LUCENE-2413-charfilter.patch revision 940676. patch for commongrams query filter Committed LUCENE-2413 commongrams.patch revision 940761. htmlstripcharfilter - o.a.l.charfilter.htmlstripcharfilter Committed LUCENE-2413 htmlstrip.patch revision 940768. worddelimiterfilter - analysis.misc.WordDelimiterFilter Committed LUCENE-2413 wdf.patch revision 940781. removeDuplicatesTokenFilter - misc Committed LUCENE-2413 removeDups.patch revision 940788. this patch moves pattern-based components PatternReplaceFilter PatternTokenizer PatternReplaceCharFilter to analysis.pattern package. the existing PatternAnalyzer in contrib is marked deprecated in favor of this. additionally i removed the commons dependency on PatternTokenizer and improved its performance by reusing a stringbuilder instead of IOUtils.toString and by not creating new strings for group-matching. Committed LUCENE-2413 pattern.patch revision 940813 keepwordfilter trimfilter hyphenatedwordsfilter - misc Committed LUCENE-2413 keep hyphen trim.patch revision 940962. attached is a patch to move synonymfilter synonymmap into the analyzers module. didn t deprecate the synonymfilter synonymmap from contrib wordnet quite yet. Committed LUCENE-2413 synonym.patch revision 942827. attached is a patch that creates a barebones TestAnalyzer and TestTokenizer in src test These can be used for running lucene tests so that more analyzers can be moved to the analyzers module. I didn t convert all tests to use it only the easy ones so far. i renamed the test analyzer to MockAnalyzer Tokenizer at hossman s suggestion... all tests pass Committed LUCENE-2413 testanalyzer.patch revision 943288. By the way when reviewing I found some disabled queryparser tests - public void tesStopwordsParsing throws Exception public void testStopwordsParsing throws Exception I will re-enable these tests on the 3x branch too. attached is a patch LUCENE-2413 tests2.patcH that adds a SIMPLE mode to MockAnalyzer. I cut over a lot of tests that were previously using SimpleAnalyzer LowerCaseTokenizer etc to this. I also added some basic tests for the MockAnalyzer itself one day we will want to free it from CharTokenizer etc Committed LUCENE-2413 tests2.patch revision 944677 attached is some cleanup for the mock analyzers tests. additionally i added a filter for testing that removes any terms accepted by a DFA. So you can use this to emulate stopfilter keepfilter lengthfilter ... Lots of tests need to test this sorta stuff with posIncs. oops i forgot to svn add. heres the corrected patch Just thinking about MockFilter May this much faster than CharArraySet If we build a DFA out of the stopwords like done in the MockFilter and also minimize it will the checking for a hit not be much faster e.g. if the first character of the termBuffer does not match the automaton it gets rejected. CAS always has to calculate the hashCode of the whole string first and then look it up. I would like to see a comparison with a minimized Automaton vs. CAS for StopFilter. OK LengthFilter is more performant by just comparing TermLength but the StopFilter should be much faster. I propose to pass a Set to the StopFilter and internally it converts it to a minimized Automaton similar to MockFilter. May this much faster than CharArraySet I ran indexing tests a while ago reuters with CharArraySet itself implemented with a DFA and it was slightly faster but not much. I think this is because english words are usually not very long average length 5 . For other languages this technique might save some cpu time but there are some problems i imagine building an automaton from a list of words is more expensive although Dawid Weiss has implemented an addition to automaton that does this fast. in general building automaton and runautomaton etc is more heavy i would think but Mike Mccandless hacked away a lot of this heaviness when we converted to UTF-32. the CharacterRunAutomaton is not optimized right now we disabled the classmap for chars because it consume more RAM. I think if we were to care about performance on char we should make it classmap 0x0-0xffff and binary search the rest or something similar. currently it binarysearches on each input character. Somewhat related a while ago i tested this with CharArraySet as a DFA and opened this issue LUCENE-2227. But obviously this is not the only way as this example shows filtering on the dfa itself and not using chararrayset at all . So in general i have those concerns right now but maybe in the future once some things are addressed we could at least make an optional stopfilter impl or something similar. One thing i like about this filter personally is that rejected terms always get optionally the posInc increased... I do not think our existing KeepWord or LengthFilters do this but maybe i am wrong. Committed LUCENE-2413 mockfilter.patch 944908. I think now we can move all tests to this framework and pull all the analyzers out. attached is a patch that converts over some more tests... need a break and this was a good stopping point. attached is a patch cutting over a lot more tests. committed LUCENE-2413 tests3.patch revision 944925 committed LUCENE-2413 test4.patch revision 944966 Attached patch LUCENE-2413 icu.patch folds contrib icu into the analyzers module. Since it depends on an external lib i set it up as analyzers-icu.jar Committed LUCENE-2413 icu.patch revision 946590. this patch LUCENE-2413 keyword.patch moves the keywordmarkerfilter out of core into the module. Committed LUCENE-2413 keyword.patch revision 946621. contrib benchmark s NewShingleAnalyzerTask depends on modules o.a.l.analysis.shingle.ShingleAnalyzerWrapper - causing cyclic dependency between projects - e.g. when creating separate Eclipse projects for lucene and modules. contrib benchmark s NewShingleAnalyzerTask depends on modules o.a.l.analysis.shingle.ShingleAnalyzerWrapper - causing cyclic dependency between projects - e.g. when creating separate Eclipse projects for lucene and modules. Hi its not a cyclic dependency as the analyzers module only depends on core lucene. If you want to have separate projects I would make the contribs separate too or put everything in one eclipse project this is what I prefer . By the way one idea could be to make benchmark a module itself the benchmarking module for all lucene solr related stuff . I noticed Solr lacks a standard benchmarking suite and at the same time more benchmarks are being created even for contribs modules highlighter analyzers attached is a patch that pulls out the rest of lucene s concrete analyzers and puts them in the analyzers module. in order to do this I had to rearrange demo. Instead i made it contrib demo and this really simplified the build system. Committed LUCENE-2413 coreAnalyzers.patch revision 948195. moves CharFilter CharArraySet and CharArrayMap Committed LUCENE-2413 coreUtils.patch revision 948225 I found an unchanged package name in a .alg file in contrib benchmark and went looking for more similar issues - this patch fixes the directory references and packages I found that were still pointing to the old locations. Thanks Steven committed revision 955203 of your patch. patch that moves the phonetic doublemetaphone and capitalization filters to the analysis module. with this patch all concrete analysis components are consolidated and available to both lucene and solr users. I think i would like to close this issue and further more complicated refactorings distancing analysis from indexing moving factories abstract classes etc can be done on their own issues. Committed revision 957162.
