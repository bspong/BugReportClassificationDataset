Move FuzzyQuery rewrite as separate RewriteMode into MTQ was Highlighter fails to highlight FuzzyQuery
As FuzzyQuery does not allow to change the rewrite mode highlighter fails with UOE in flex since LUCENE-2110 because it changes the rewrite mode to Boolean query. The fix is Allow MTQ to change rewrite method and make FUZZY REWRITE public for that. The rewrite mode will live in MTQ as TOP TERMS SCORING BOOLEAN REWRITE. Also the code will be refactored to make heavy reuse of term enumeration code and only plug in the PQ for filtering the top terms. Could we make FuzzyRewrite a subclass of BooleanQueryRewriteMethod and add a simple check like if mtq.getRewriteMethod instanceof BooleanRewrite mtq.setRewriteMethod BooleanRewriteMethod As it rewrites to booleanquery it seems to be ok to subclass though. Yet another thing you throw unsupportedOperationException in FuzzyQuery setRewriteMethod we should at least document in MTQ that this is an optional operation. Something like ... optional operation throws UnsupportedOperationException if this method is not supported by the MultiTermQuery Could we make FuzzyRewrite a subclass of BooleanQueryRewriteMethod and add a simple check like The problem is that also ConstantScoreBooleanRewrite subclasses BooleanQueryRewriteMethod. Yet another thing you throw unsupportedOperationException in FuzzyQuery setRewriteMethod we should at least document in MTQ that this is an optional operation. Something like This issue will remove this an make FUZZY REWRITE public and maybe move to MTQ because it is also useful for other boosting term lists to only put the highest ranking erms into the BQ . The name could be something like HIGHEST SCORING BOOLEAN QUERY REWRITE brr . Here a refactoring of the rewrite modes in Flex. I ll port to trunk too. FuzzyQuery now uses per default TOP TERMS SCORING BOOLEAN REWRITE which is part of MTQ and can now also be used by e.g. MoreLikeThis. More refactoring. No also AUTO REWRITE uses the new TermCollector. It gets less and less code. Now i also made the strange anonymous inner class a named inner class to get rid of the strange boolean holder implemented by an array. Trunk patch comes soon. Here the final patches with updated JavaDocs. I want to apply them in this form to trunk and flex. If nobody objects I will do this tomorrow. WIth this patch FuzzyQuery will always highlight correctly as it can be switched to boolean query rewrite mode. Here is the code as discussed on IRC It fixes the braindead LUCENE-504 code So the last patch for today. I optimized the PQ to reuse the ScoreTerm instance when the PQ is full. I think for current FuzzyQuery the rewrite modes are now as best as possible. The tests pass that already test the overflow of the PQ by setting BQ.maxClauseCount to a very low value. After sleeping one more night I added code to not even put the termsinto the PQ when they are not competitive. More support for automaton query will come only in flex with LUCENE-2140. I like to commit this during the day. Thanks for all the support and interesting discussions. Latest patch looks great Uwe Committed in trunk and flex WARNING Please do not merge revision 889181 to flex I ll will not merge this to 3.0 branch as the ScoreTerm is protected and this change need to invert th PQ order which would break BW compatibility. I already closed this issue but still open is migration to 3.0 where the PQ is somehow broken can consume too much RAM . There are two possibilities to merge Apply this patch to 3.0 - new features ok for 3.0 branch Only fix PQ issue in FuzzyQuery - Problem ScoreDoc is protected and there is the need to change the comparator inverse . In my opinion the ScoreTerm should be a private class at all like it is in MTQ now . But we cannot change it BW compatibility . A solution could be to ignore the comparator and give the inverse comparator in the PQ ctor as param. In trunk the ScoreTerm class is deprecated and dead code but has the original comparator. What to do Solution 2 for 3.0 branch that inverts the ScoreTerm comparator with an additional Comparator. Here the version with BW break. The inner class ScoreTerm in Fuzzy query was never intended to be public. If somebody used it code will break but that is not likely to be the case. Removed unused include. 3.0 branch scoring test. Committed revision 889567 Here the same change for trunk. It also contains a test that checks a term range which has no boost with the fuzzy rewrite mode and tests that the PQ correctly only returns the lower terms. Better test for the PQ tie-break case. I ll commit soon and also merge to flex in flex more changes in javadocs needed . To test the comparator and inject a bug remove ignore uncompetetive hits if stQueue.size maxSize boost stQueue.peek .boost return true and inverse the comparator s term order public int compareTo ScoreTerm other if this.boost other.boost return - other.term.compareTo this.term else return Float.compare this.boost other.boost 
