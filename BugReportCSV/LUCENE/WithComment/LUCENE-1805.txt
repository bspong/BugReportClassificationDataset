CloseableThreadLocal should allow null Objects
CloseableThreadLocal does not allow null Objects in its get method but does nothing to prevent them in set Object . The comment in get before assert v null is irrelevant - the application might have passed null. Null is an important value for Analyzers. Since tokenStreams a ThreadLocal private member in Analyzer is not accessible by extending classes the only way for an Analyzer to reset the tokenStreams is by calling setPreviousTokenStream null . I will post a patch w a test Remove assert v null and added a test case. Funny but it s as if CTL itself could cause this bug. If you call ctl.get w o setting anything first it creates a WeakReference and set the initValue which is ... null . The first call to get will return null the second would fail. BTW TestCloseableThreadLocal is under o.a.l.index. Shouldn t it be under o.a.l.util Can whoever assigns this to himself move it If you call ctl.get w o setting anything first it creates a WeakReference and set the initValue which is ... null I don t think that s right It calls initialValue and only if that returns a non-null value will it set it. Else it doesn t call set So calling get twice in a row not having called set shouldn t hit an exception . I think Oops you re right. I overlooked it. So maybe the second test case I added is not that important even though it wouldn t hurt to keep it. Attached small tweaks to the test removed the misleading comment . I think it s ready to commit. If it looks ok Shai I ll commit shortly... I was just commenting that I should remove the misleading comment . It looks good. Don t you want to move the test to o.a.l.util as well Don t you want to move the test to o.a.l.util as well Woops right I ll do that before committing. Thanks Shai 
