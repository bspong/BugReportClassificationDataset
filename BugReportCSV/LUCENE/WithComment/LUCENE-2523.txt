if index is too old you should hit an exception saying so
If you create an index in 2.3.x I used demo s IndexFiles and then try to read it in 4.0.x I used CheckIndex you hit a confusing exception like this java.io.IOException read past EOF at org.apache.lucene.store.BufferedIndexInput.refill BufferedIndexInput.java 154 at org.apache.lucene.store.BufferedIndexInput.readByte BufferedIndexInput.java 39 at org.apache.lucene.store.ChecksumIndexInput.readByte ChecksumIndexInput.java 40 at org.apache.lucene.store.DataInput.readInt DataInput.java 76 at org.apache.lucene.index.SegmentInfo. init SegmentInfo.java 171 at org.apache.lucene.index.SegmentInfos.read SegmentInfos.java 230 at org.apache.lucene.index.SegmentInfos 1.doBody SegmentInfos.java 269 at org.apache.lucene.index.SegmentInfos FindSegmentsFile.run SegmentInfos.java 649 at org.apache.lucene.index.SegmentInfos FindSegmentsFile.run SegmentInfos.java 484 at org.apache.lucene.index.SegmentInfos.read SegmentInfos.java 265 at org.apache.lucene.index.CheckIndex.checkIndex CheckIndex.java 308 at org.apache.lucene.index.CheckIndex.checkIndex CheckIndex.java 287 at org.apache.lucene.index.CheckIndex.main CheckIndex.java 930 I think instead we should throw an IndexTooOldException or something like that I think instead we should throw an IndexTooOldException or something like that 1 - should be nice warm warnings for all index version incompat stuff. A Solr user ran into this the other day I think. Here initial patch. I have not yet added a new Exception but if the text is saying all information and we maybe better use Version Names that contain the first last supported Lucene Version not format version we are fine. Here a revised patch after discussion in IRC Move the SegmentInfos Versions to the default reader writer. There is still the format version used at one place in o.a.l.index maybe we should remove version support there too Added two Exceptions for too old and too new index. Unified all messages Added minimum version support to CodecUtil. This patch now also adds a test that tries to open old indexes in TestBaclwards and tries to use them. This should produce only IndexTooOldExceptions if other exceptions are throws we have still bugs. You have to add the old zip files back from 3.x branch with slight renaming. I prefer to use all of them to check all possible old formats especially those with no version support. All tests pass. I think this is ready to commit Since its the format of the index not the index itself that is too old too new I vote for calling the exceptions IndexFormatTooOldException IndexFormatTooNewException. I had the same idea I think I should change this I will also change the Exception ctor a little bit to produce a generic text maybe including filename and min max format version. Rename of Exception Disabled the segments.gen version check. I had several exceptions about illegal format 0 on windows. Will investigate more tomorrow. The final patch I streamlined the exceptions. The ctor tooks filename actual format version and min max. The message is then generated in the exception ctor and looks identical everywhere in the code. Where the filename is not available it is left out null . Maybe we should add the filename to CodecUtils to be able to display it on errors. This helps finding out which file has wrong header. Or is there a way to get file name from IndexInput I keep the segments.gen version check disabled this seems to be needed on windows to be able to retry. I will commit soon Committed revision 965868
