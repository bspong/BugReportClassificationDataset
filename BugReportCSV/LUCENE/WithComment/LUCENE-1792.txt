new QueryParser fails to set AUTO REWRITE for multi-term queries
The old QueryParser defaults to constant score rewrite for Prefix Fuzzy Wildcard TermRangeQuery but the new one seems not to. Patch that just adds unit test showing the issue. We already have a MultiTermRewriteMethodAttribute... so I think the fix here is in the processors that create these query nodes to carry over that attribute s value Actually RangeQueryNodeBuilder seems to do so already but the others don t. Should it not set to AUTO REWRITE even the old one Sorry right I meant AUTO REWRITE. That s what the old queryParser does today... the new queryParser should do the same. Attached patch. I created MultiTermRewriteDefaultProcessor.java and added it into the StandardQueryNodeProcessorPipeline. It simply notices any Wildcard PrefixWildcardQueryNode and sets their rewrite method to CONSTANT SCORE AUTO REWRITE DEFAULT. And then there were 6 Eventually we ll get to zero... linking JIRA issues Hi Mike Maybe we should create a special node just to hold the CONSTANT SCORE AUTO REWRITE DEFAULT value. That s what we do on StandardBooleanQueryNode it was created to hold a setting that only belongs to the standard query parser disableCoord avoiding to add to core nodes settings that are specific to certain QP implementation. Check AnalyzerQueryNodeProcessor to see how it s used. Also we could tag the node with this setting but I still prefer my first suggestion. Urgh I see. But then I d also need to make a StandardPrefixWildcardQueryNode And then a two new builder classes corresponding to these new nodes Could we then fix StandardSyntaxParser to never create WildcardQueryNode ie always create StandardWildcardQueryNode And then remove WildcardQueryNodeBuilder Though why do we still have BooleanQueryNodeBuilder . Maybe instead we should just make this fix in the builder then it d be like a 2-line change I realize that violates the builders can t consult configuration but perhaps that rule is too strict.... in this case it means having to make 4 new classes instead of adding 2 lines into the existing classes I think . Alternatively we could just revert my changes. In 3.0 these queries will set their defaults to AUTO anyway at which point this is no longer an issue. Plus since we are no longer planning to aggressively swap the current QueryParser with this new one this issue is less important to fix. Could we then fix StandardSyntaxParser to never create WildcardQueryNode ie always create StandardWildcardQueryNode And then remove WildcardQueryNodeBuilder Though why do we still have BooleanQueryNodeBuilder . I completely agree with you we could change the parser to generate directly StandardBooleanQN and StandardWildcardQN that makes more sense. I can work on a patch for this approach if you want just let me know. I never liked wildcard and prefixwildcard inplementation in the StandartSyntaxParser. We could remove the creation of WildcardQueryNode and PrefixWildcardQueryNode from the StandardSyntaxParser and produce regular FieldQueryNode instead. Since we use UnescapedCharSequence in the FieldQueryNode values. We can identify the wildcards in the Processors and have one simple processor that converts FieldQueryNode to StandardWildcardQueryNode and to StandardPrefixWildcardQueryNode and we can remove WildcardQueryNode and PrefixWildcardQueryNode from the core. What do you guys think. Since we use UnescapedCharSequence in the FieldQueryNode values. We can identify the wildcards in the Processors and have one simple processor that converts FieldQueryNode to StandardWildcardQueryNode and to StandardPrefixWildcardQueryNode and we can remove WildcardQueryNode and PrefixWildcardQueryNode from the core. 1 we could change the parser to generate directly StandardBooleanQN and StandardWildcardQN that makes more sense. 1 too... whenever standard subclasses a core node for some reason it seems like the core syntax parser shouldn t produce the core node anymore. Luis or Adriano do you want to take a crack at this Can you do this shortly 2.9 looks iminent Else we can simply revert my changes and then move this to 3.1... I ll work on that over the weekend let me see if I can have that done by Monday. add the QueryParserMessages.properties it was missing from trunk change the TERM START CHAR to allow and inside the StandartSyntaxParser.jj remove wildcard and prefix detection from the StandartSyntaxParser this is now done in a processor for terms and quoted strings. PrefixWildcardQueryNode and WildcardQueryNode moved to standard.nodes. package new WildcardQueryNodeProcessor that replaces PrefixWildcardQueryNodeProcessor to implement the wildcard logic that was in the .jj file. One escape testcase is still failing I ll look at that tomorrow. Mike if you have time please review it this code does not contain your patch I did it on the latest trunk I only saw the resource folder you created on the contrib queryparser folder now I ll remove that from the next patch. On quick glance the patch looks good but I m not going to have enough time to look more thoroughly I think you used svn move to rename PrefixWildcardQueryNodeProcessore - WildcardQueryNodeProcessor because patch fails to apply the changes . Luis could you provide a new patch that applies cleanly If you want to move files from one package to another I think you need to copy manually and do svn delete on the old file and svn add on the new one. This one is done . This patch is against the latest trunk. From my last patch here are the major changes Changed MultiTermRewriteMethodProcessor WildcardQueryNodeBuilder RangeQueryNodeBuilder PrefixWildcardQueryNodeBuilder to use the MultiTermRewriteMethodAttribute. Clean up the RangeQueryNode PrefixWildcardQueryNode WildcardQueryNode and ParametricRangeQueryNodeProcessor from use of setRewrteMethod. Changed MultiTermRewriteMethodProcessor to use a setTAG to pass the MultiTermQuery.RewriteMethod value to the Builders The new patch applies cleanly on trunk now. However I m getting this junit failure now junit Testcase testQueryValidator org.apache.lucene.queryParser.spans.TestSpanQueryParser FAILED junit QueryNodeException was expected wildcard queries should not be supported junit junit.framework.AssertionFailedError QueryNodeException was expected wildcard queries should not be supported junit at org.apache.lucene.queryParser.spans.TestSpanQueryParser.testQueryValidator TestSpanQueryParser.java 177 junit Test org.apache.lucene.queryParser.spans.TestSpanQueryParser FAILED fix for span problem reported by Micheal fix to WildcardQueryNodeProcessor to detect escaped wildcards Besides the failing testcase the patch looks good The TAG approach in MultiTermRewriteMethodProcessor looks a bit overly complicated Attribute- MultiTermRewriteMethodProcessor- TAG- Builders but I see that the big advantage will be to not having to deprecate remove any APIs from the nodes in 3.0 when the QP won t have to set the rewrite method anymore. The v3 file is the correct on with the changes. I just upload the old patch on v2. It is late over here sorry OK with the v3 patch all tests pass now. One question wouldn t it be better if the WildcardQueryNode knew the positions of the wildcard characters Then e.g. the AllowLeadingWildcardProcessor would not have to have knowledge about the wildcard chars and and would not have to check again. I think this is not a big deal we can make that optimization sometime later. I think I m happy with the patch... I ll look a bit more tomorrow and commit then at the end of the day if I don t find any issues and nobody objects. One question wouldn t it be better if the WildcardQueryNode knew the positions of the wildcard characters Then e.g. the AllowLeadingWildcardProcessor would not have to have knowledge about the wildcard chars and and would not have to check again. I like the idea I ll create another JIRA for that since WildcardQueryNode already knows about the wildcard positions we just need to add a method. I think I m happy with the patch... I ll look a bit more tomorrow and commit then at the end of the day if I don t find any issues and nobody objects. Those are great news. One less issue for 2.9 almost there. I like the idea I ll create another JIRA for that since WildcardQueryNode already knows about the wildcard positions we just need to add a method. OK with fix version 2.9 Committed revision 805633. Thanks Luis 
