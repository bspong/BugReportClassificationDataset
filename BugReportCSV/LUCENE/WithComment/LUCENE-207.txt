 PATCH npe if java.io.tmpdir does not exist
In org.apache.lucene.store.FSDirectory from Lucene-1.3-final on line 170-171 File tmpdir new File System.getProperty java.io.tmpdir files tmpdir.list if the directory specified by the property java.io.tmpdir does not exist a null pointer exception is thrown. Perhaps a check to see if the directory exists is in order and if it doesn t use a directory you know exists e.g. a temp directory in the directory created earlier in the create method . Created an attachment id 11590 Create the temp dir if it doesn t exist Creates the temp dir if it doesn t exist. If it can t create the directory it throws an IOException. Thanks in CVS. Shouldn t we be honoring java.io.tmpdir even if it happens to be non-absolute Perhaps this should be fixed by removing the . from the LOCK DIR initialization then if LOCK DIR is null set lockDir in the constructor to directory and only do the lockDir.mkdirs during makeLock in the Lock.obtain method I can supply a patch if you want one. Also in your patch for this you changed a message in FSDirectory.create to include the word lock but it should just be Cannot create directory in that case since we aren t creating the lock directory there we are creating the index directory. I think if java.io.tmpdir is relative then we should probably use something relative to the PWD of the JVM. If org.apache.lucene.lockdir is relative then should it be relative to the PWD or to the index directory For consistency with java.io.tmpdir perhaps this should also be relative to PWD. But when both are null then the lock directory should be the index directory. Right now we re attempting to handle this case by using a relative pathname of . but perhaps we should handle it more explicitly. Perhaps we should when LOCK DIR is null explicitly use the index directory as the lock dir. Does that sound right Created an attachment id 11592 new fix that removes the isAbsolute checking I added an attachment that uses the directory explicitly if the system properties are null and if the LOCK DIR is relative the lockDir will be based on the PWD. Looks good. Either the specified dir is used or temp or if they are both null we use the index dir and the relative vs. absolute discussion is discarded ja 
