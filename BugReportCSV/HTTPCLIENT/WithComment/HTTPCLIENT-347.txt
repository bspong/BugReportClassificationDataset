MultiThreadedConnectionManager Accounting Problems
getConnectionsInPool is certainly a more intutive name. At the same as you already mentioned certainly there need to be a connection killer method MultiThreadedHttpConnectionManager.destroyIdleConnections long idleTime Also I would recommend one method which could spit out connection statistics at any time for the given Connection Manager. This will be great method for testing purpose as well. MultiThreadedHttpConnectionManager.displayCurrentStatistics Curent Connection Statistics Total connectinos in Pool 10 Open connectinos 3 Close connections 5 Stale connections 2 And if are even more adventurous we could extend our report to Average wait time for connection 1356 ms Maximum wait time for connectino 1892 msCreated an attachment id 11758 Patch 1 Sorry for all the spam on this one. I accidentally created the bug before I finished filling out the form. The attached patch adds deleteClosedConnections which in combination with closeIdleConnections should do what we re looking for. I m not entirely satisfied with this solution as it involves calling HttpConnection.isOpen but I think it s the only way to be sure that we get rid of connections that are not longer needed. The only other possibility would be to disable staleConnectionChecking on the connections or to add a isClosed method to HttpConnection that does not involve isStale . This patch does not include any connection statistics. Please let me know what you think. MikeMike I never liked the fact that connection open check was coupled with the stale connection check. Now I like it even less. It s kind of wasteful to perform a rather expensive stale connection check on a connection which is about to be dropped. What do you think about decoupling these two tests in HttpClient 3.0 Otherwise the patch looks good OlegYes agreed. The coupling of isOpen and isStale definitely causes some issues. I will try to clean this up without breaking anything. MikeCreated an attachment id 11769 patch 2 This one doesn t fix the problems with isOpen but it adds a couple of new options that get around it. Let me know what you think. Thanks MikeI can t say I like it but I live with this solution. OlegDon t know whether it matters to much but if I read it correctly it is possible that this will result in two calls to isStale if checking is enabled.  I thought that some had experienced isStale as slow so adding a second call seems like a bad idea.Hi Eric Yes the original version of the patch did indirectly call isStale . You are correct that this is potentially a slow operation. The second patch should not have this problem though as isClosed is now being used which does not make use of isStale . MikeHi Oleg Agreed this is not the nicest solution. I would openly welcome any creative alternatives. Unless something nicer comes up I will apply this patch tomorrow night. MikeMike Having HttpConnection isOpen and HttpConnection isClosed methods is awfully confusing. What are reasons for having to call isStale from isOpen I personally see no sense in performing stale check in the isOpen method. As a consumer of that method I do not give a damn whether the connection is stale or not. All I want to know whether the connection is considered open and whether HttpClient should attempt to automatically recover in case of connection failure. That s it. What comfort to me is the fact that the connection is open and valid at the time I call isOpen when it can still go stale by the time HTTP method executes OlegWithout digging into the source code I wonder whether this is the time to define an enumeration class ConnectionStatus with possible values   OPEN FOR SURE OPEN OR STALE STALE CLOSED IN USE... and a single query method Connection.getStatus boolean checkForStale cheers   RolandHi Oleg The original purpose was to ensure a connection is open before writing since stale connections are essentially closed. We ran into a number of problems with connection reliability particularly in the case of post methods which cannot be retried BUG 19063 . MikeHi Roland Yes I like that. It would give us some more flexibility and it avoids direct confusion with isOpen . I ll give it a try tonight. MikeMike I remember that. I am not questioning the rationale of stale check. The question is if there s any good reason for isOpen to call isStale Roland I see one problem with this approach. In HTTP there s no such thing as OPEN FOR SURE. A perfectly valid connection at the time of getStatus call may go stale by the time HttpClient is actually ready to do the writing on that connection OlegCreated an attachment id 11788 Patch 3 Well how about that OlegHi Oleg I originally had plain OPEN in the list but wanted to emphasize the difference between OPEN and OPEN OR STALE. You could rename it to STILL CONSIDERED OPEN AFTER PERFORMING A STALE CHECK - cheers   RolandYes that certainly clears things up. The only issue which I guess is actually not that important is the changing meaning of isOpen . I was initially trying to avoid changing how it operated but I guess it may not be worth it given that HttpClient users really shouldn t be using HttpConnections directly anyway. MikeOleg I think this one is ready to be applied. Do you want to take care of it or should I MikeMike it s been all your work. Go ahead commit it. OlegPatch applied to HEAD. Mike
