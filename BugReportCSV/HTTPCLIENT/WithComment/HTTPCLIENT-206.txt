URI class constructors need revision optimization
1. Currently there s not way to pass an escaped string as a parameter to URI class. As a result the url parameter in HttpMethodBase HttpMethodBase String constructor gets converted into an array of char just to be converted back to string in URI contructor called in that method. 2. The overall design of URI class contructors does not appear very coherent at least to me Created an attachment id 7366 Patch take 1 I tried to be as little intrusive into Sing-Su s stuff as possible. Please let me know if there are any objections. OlegI think these are good changes. We should probably also change the URI URI String constructor to boot. I think we might also want to create some tests for parsing unescaped URIs. I have no idea how well this functionality works. MikeActually I guess all of the constructors should be changed to add a boolean flag. MikeGood point. I ll revise the remaining URI constructors. As to test cases I am afraid I do not possess the required detailed knowledge of the URI spec. Sung-Gu does not do test cases for free. So I really do not know. OlegI will put some more test cases on my todo list. MikeCreated an attachment id 7374 Patch take 2 I guess it was bit more that I bargained for. I really have no idea whether those component URI constructors expect escaped or unescaped strings as input. I tend to lean toward just letting them be for the moment. OlegI m not totally sure about deprecating all constructors without the boolean flag. Should there be a plain old URI String constructor that mirrors the semantics of java.net.URL s constructor It would add convenience but possibly also add confusion. I don t have a strong feeling one way or the other but thought I d throw the idea out there.I find that URI String constructor is too ambiguous. Should the URI character sequence be assumed to be escaped or per default or the other way around I just do not know. I do not mind leaving a plain URI String constructor undeprecated as long as we all agree on a reasonable default. OlegI just looked up java.net.URL and java.net.URI in JDK 1.4 . java.net.URI s single-String constructor expects the argument to be already-escaped. The JavaDoc for java.net.URL isn t explicit on this but I know that it doesn t do automatic escaping for you. So if we keep a single-argument constructor in HttpClient I think it should expect an escaped string. That s backwards from what I remembered before I looked it up which shows how confusing this is or how tired I am today .I agree with Laura on this one. I see no reason to remove the String only constructors as long as they are well documented. They all currently assume the Strings are not escaped. I think we should keep this default behavior. MikeWhich just goes to show how confusing this is - Laura just said to assume they were already escaped and Mike just said they should act as they currently do - not escaped. For the same reason that String.getBytes is dangerous my vote would be to force the caller to explicitly indicate which they want. They would expect a constructor that takes one String so they won t look up which one it is until it bites them with an unexpected result. I d say lets make it easier for our users by forcing them to indicate which it is.Just to make things more confusing here s what the JavaDoc for java.net.URI says The single-argument constructor requires any illegal characters in its argument to be quoted and preserves any escaped octets and other characters that are present. The multi-argument constructors quote illegal characters as required by the components in which they appear. The percent character is always quoted by these constructors. Any other characters are preserved. That clears things up doesn t it I suspect the single-argument behavior is there for compatibility with java.net.URL. At some point we re going to have to decide how or whether HttpClient interoperates with java.net.URI. The APIs are fairly similar. Until then I m fine with whatever we do here. Well in the face of ambiguity I guess we should try to be as specific as possible. Normally I would keep the String constructor but this seems to be a special case. Forcing a choice with the boolean is the safest way to go. MikeI agree. I ll commit the patch for now. Anyways we all know that URI class will require quite a bit of attention in the future. So plain string constructor can always be reinstated should we change our mind OlegPatch committed. Oleg
