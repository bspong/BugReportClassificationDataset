HttpClient depends on jcip-annotations.jar
When using Java 5 to compile code that uses HttpClient jcip-annotations.jar must be in the classpath or else you get a compiler error      javac path to src SomeFile.java 129 cannot access net.jcip.annotations.GuardedBy      javac file net jcip annotations GuardedBy.class not found      javac DefaultHttpClient httpclient new DefaultHttpClient      javac With Java 6 you get a bunch of warnings instead.      javac org apache http impl client AbstractHttpClient.class org apache http impl client AbstractHttpClient.class warning Cannot find annotation method value in type net.jcip.annotations.GuardedBy class file for net.jcip.annotations.GuardedBy not found This requirement doesn t seem to be documented anywhere and jcip-annotations.jar is not included in the httpcomponents-client-4.0-bin-with-dependencies package. This discussion thread looks relevant http cs.oswego.edu pipermail concurrency-interest 2007-December 004711.htmlHttpClient dependencies are documented in the project descriptor pom.xml . When using Maven to build HttpClient all requisite dependencies are obtained automatically from a central repository. jcip-annotations are not required at the run time and therefore the jar is not shipped with the httpcomponents-client-4.0-bin-with-dependencies package. What exactly do you want us to do to resolve the issue Oleg The issue is not about building HttpClient it s about using Java 5 to compile code that uses httpclient-4.0.jar. If you use Java 5 and HttpClient you need the JCIP annotation jar in your classpath at compile time. Try it - Presumably this is because those annotations have runtime retention. I think it would be ideal if consumers of HttpClient didn t need this jar. Second best would be to include it in the HttpClient distribution. Sorry that it took me so long to understand the extent of the problem. I think the retention policy of jcip-annotations.jar is set to RUNTIME in order to enable automated detection of concurrency related bugs using some kind runtime analysis tools. Sebastian Unless we can find a way to override the retention policy of jcip-annotations.jar to SOURCE at least for official builds of HttpClient and HttpCore we should seriously consider removing dependency on jcip-annotations.jar. Alternatively we should consider the possibility of forking jcip-annotations provided its licence is compatible with ASFv2 OlegIt looks like we cannot just fork the damn thing and re-licence it under ASLv2. We either have to remove it entirely or provide our own set of equivalent annotations with SOURCE retention policy   Copyright c 2005 Brian Goetz and Tim Peierls   Released under the Creative Commons Attribution License   http creativecommons.org licenses by 2.5   Official home http www.jcip.net     Any republication or derived work distributed in source code form   must include this copyright and license notice. I ve just tried using Eclipse to build the examples using just the jars from the with dependencies download and no problems are reported. Using Java 1.5.0 18 generates errors for the missing annotations. Whereas using Java 1.6.0 14 generates warnings for the missing annotations. Looks like this is at least partly a compiler issue.I think the real issue is the RUNTIME retention policy of jcip-annotations.jar which is obviously something we have to address one way or another. OlegOr we include the binary jcip jar in the archive. We need to check if that is OK with ASF policy first I ll look into that. Or we include the binary jcip jar in the archive. Sebastian but when jcip-annotations.jar was brought in the whole idea was it was not going to impact the runtime behaviour of HttpClient. This is clearly not the case now. At the very least HttpCore should not have it as a dependency. OlegYes. It s unfortunate that this issue was not noticed earlier. However it s likely to be a lot of work to fix the runtime dependency so it may be useful to explore other options at least in the short-term.Sebastian 1 I am going to remove jcip-annotations.jar as a dependency for HttpCore as it is currently not being used anywhere. 2 As far as HttpClient is concerned I see three options  a remove jcip annotations altogether  b replace jcip annotations with similar ones with SOURCE retention and provide a script to convert annotations back to jcip  c make jcip annotations runtime dependency Which options would you prefer Oleg1 OK though if 2 b is successful it may be worth porting to HttpCore 2 I prefer b then c then a If we do go for a then I suggest commenting the annotations rather than removing them as the comments would still be useful.Sebastian please review the patch and let me know if you see any issues with it including legal license relatedAIUI the Creative Commons Attribution Licence allows for the work to be adapted so long as the author s attribution requirements are adhered to. I think this means that we would need to put something in the NOTICE file to honour the attribution.That should not be a problem should it Do you know how that attribution clause should be worded OlegI ve been thinking more about this - seems to me that if we use the annotations then they should be used consistently i.e. we should use them in HttpCore as well. If we add annotations as part of HttpClient then it may be hard to add them to HttpCore later without causing problems. I think the annotations would need to go in a separate module this might make it possible to move them to HttpCore later. I m beginning to think it might be easier to comment out the annotations for now.I thought about that too. However the beauty of it is that can simply move those annotation classes to core whenever we see fit without breaking binary compatibility with previous versions of HttpClient. OlegSuppose Client 4.0.1 is created with the classes Core 4.0 has not got them. We then create Client 4.0.2 without the classes and Core 4.0.1 with the classes. What happens if an exisiting Client 4.0.1 Core 4.0 is upgraded to Client 4.0.1 Core 4.0.1 Won t it cause a problem to have two copies of the classes Or maybe we can just document that certain combinations of versions are incompatible What happens if an exisiting Client 4.0.1 Core 4.0 is upgraded to Client 4.0.1 Core 4.0.1 I suppose nothing Won t it cause a problem to have two copies of the classes As long as those classes are identical it does not matter what jar they come from. It is like having any jar on the same classpath twice. OlegOK so the only problem would come if the annotation classes were changed during the move. I can t see why we would need to do that.Sebastian so what is the conclusion Shall I commit the patch Remove annotations Give you more time OlegI think it s OK to commit the patch. I think we need to add something like this to the NOTICE file This project contains annotations derived from JCIP-ANNOTATIONS Copyright c 2005 Brian Goetz and Tim Peierls. See http www.jcip.net. Also add to the LICENSE file This project contains annotations derived from JCIP-ANNOTATIONS Copyright c 2005 Brian Goetz and Tim Peierls. See http www.jcip.net and the Creative Commons Attribution License http creativecommons.org licenses by 2.5 include the text of the URL here These paragraphs will need to be moved if when the annotations are moved to HttpCore.OK. Now it is my turn to have a second thought about this whole situation. If we have to add this 1 to every NOTICE and LICENSE file in every assembly and jar of HttpClient I am beginning to have doubts it is worth the trouble. For instance NOTICE and LICENSE resources in jars get automatically generated by Maven remote-resources plugin for us which is quite convenient. At the very least we would have to maintain our own resource bundle for HttpClient which seems a bit too much given the current project composition. How about just replacing JCIP annotations with comments until there is a version of JCIP annotations maintained by ASF Immutable - Immutable Oleg 1 http creativecommons.org licenses by 2.5 legalcodeIn my experience the Maven remote-resources plugin does not work well though maybe the bugs have been fixed. BTW just discovered some errors in the NOTICE files in the jars - will raise separate JIRA for those Surely all one needs to do is to make sure that the assembly descriptors have the correct files in them I am not sure I follow. Are you saying only the NOTICE LICENSE files in release packages assemblies should have that attribution clause while individual jars may not OlegThe source will have the new code based on JCIP so clearly the main N L files need the extra lines as do all the jars created from such source.Sebastian Would you have a problem if I commented out all JCIP annotations in the source files and provided a script to replace comments with JCIP annotations OlegThis would be OK for people maintaining the code but users of the code would no longer see annotations in the Javadoc so I would prefer not. I don t understand your issue with the N L files. I don t understand your issue with the N L files. We either have to go back to maintaining a separate copy of L N filers per jar and assembly that makes 4 for client and 4 for core or maintain a separate resource bundle for HC projects. Given there is only two of us maintaining the code on more or less regular basis the additional effort required seems too much. The process of cutting official releases is already painful and frustrating enough. OlegAFAICT apart from the component name in the NOTICE files all the N L files within HttpClient should be the same. Ideally the name in the NOTICE file should include the subcomponent i.e. Client Mime but it would not be wrong to use Apache HttpComponents Client for both Client and Mime. In which case the same N L files can be used for the whole of HttpClient. The process that generates the NOTICE file needs to be fixed anyway because it is currently broken.and who is gonna do that OlegI can take a look at it.Fixed in trunk. Please review. OlegLooks good. However I think the RetentionPolicy should probably be CLASS i.e. the default not SOURCE. I ve tried compiling with this and Sun Java does not complain. Using CLASS retention would mean that the annotation should be available to tools that process class files.Integrated in Wink-Trunk-JDK1.5 165 See http hudson.zones.apache.org hudson job Wink-Trunk-JDK1.5 165     Revert HttpClient pom.xml version change See https issues.apache.org jira browse page com.atlassian.jira.plugin.system.issuetabpanels all-tabpanel Maybe when 4.0.1 is released it will work on Java 1.5. See WINK-203 Integrated in Wink-Trunk-JDK1.5 204 See http hudson.zones.apache.org hudson job Wink-Trunk-JDK1.5 204     try a workaround for jcip related problem. See https issues.apache.org jira browse for more details about the problem. Hi folks. I realize this is an closed issue but I discovered that these annotations are made available independently as CLASS level runtime retention here http www.jarvana.com jarvana view com google code findbugs jsr305 1.3.9 jsr305-1.3.9.jar javax annotation concurrent GuardedBy.java format ok Wouldn t it make sense to remove HttpComponents internal copies of these classes which was a work-around and instead depend on this JAR What would that buy us at this point OlegRe-use instead of polluting your jar with copies.An extra external dependency just to re-use whole four annotation classes I am not sure it is worth the trouble. Oleg
