Digest auth uses wrong uri in proxy authentication
I m having a problem getting httpclient-rc1 to authenticate using digest to our IAS server. I ve tried upgrading to rc3 without any effect. I also got our IT guys to upgrade IAS without luck. I was also able to have the GET method work under IAS and CONNECT to work with a couple other proxy servers. After examining ethereal logs for my commons code and firefox to the same URLs I noticed that the value for the uri setting in the Proxy-Authorization header was the only significant difference. After looking at RFC 2617 I noticed that in section 3.2.2 The Authorization Request Header it states digest-uri The URI from Request-URI of the Request-Line duplicated here because proxies are allowed to change the Request-Line in transit. A re-examination of the headers showed that firefox was matching the Request-URI with the digest-uri but that httpclient was not. I reproduced partial headers below. I tried modifying the RC3 source to produce a hard-coded value for uri and demonstrated that it would successfully authenticate to that URI. I also checked that authentication would fail to any other URI and it did. partial httpclient header fails with 407 CONNECT gmail.google.com 443 HTTP 1.1 Proxy-Authorization Digest username proxytest realm Digest nonce 503902c343c8c501057a85cea6bad2734378fb44b4cbd1970bf320637871dae85373082cf70ac254 uri response 7717d0738332a3d8e83e9102b5ead6b9 qop auth nc 00000001 cnonce 583aa0469b31290dc2acd7ec6cfc98f1 algorithm MD5-sess opaque bb319760fce84856e5648d3536502d81 partial firefox header succeeds with 200 CONNECT mail1.combrio.local 443 HTTP 1.1 Proxy-Authorization Digest username proxytest realm Digest nonce 0e61fe645ec8c5015aa3afe8cfe5219488ed473e277a8cddf8225ad66e74fd214f97d9d96ac99991 uri mail1.combrio.local 443 algorithm MD5-sess response bfac109287273e867531170475172ccf opaque 70cb2a1533b85882d0f1aa1e2ad1fbae qop auth nc 00000001 cnonce b41aecd6e527e774 Is probably only an issue with proxy auth. Have to check if we can fix this in 3.0 without modifying the API. In reply to comment 1 Is probably only an issue with proxy auth. Have to check if we can fix this in 3.0 without modifying the API. I am afraid not. At the moment there s no way of telling for classes that implement the AuthScheme interface whether the request is to be sent via a proxy or not. OlegOwen Can you also capture the content of the Digest response generated by Firefox for non-SSL non-tunneled connections I wonder if the digest-uri value would be something like http www.yahoo.com 80 stuff or like stuff Meanwhile we ll be thinking of a workaround for the 3.0 release that does not require API changes. The proper fix for this problem most likely will have to wait until 3.1 or even 4.0 Oleg In reply to comment 3 Owen Can you also capture the content of the Digest response generated by Firefox for non-SSL non-tunneled connections I wonder if the digest-uri value would be something like http www.yahoo.com 80 stuff or like stuff Meanwhile we ll be thinking of a workaround for the 3.0 release that does not require API changes. The proper fix for this problem most likely will have to wait until 3.1 or even 4.0 Oleg Oleg See below for similar headers for a non-SSL connection. It s like stuff though I m not sure if that is strictly RFC compliant or not. Tommorrow I ll try a few variations and see if anything interesting happens. from firefox GET http www.google.com search q combrio HTTP 1.1 Proxy-Authorization Digest username proxytest realm Digest nonce 9ead1d6748c8c5015ad4977b92780d2d2bf1ce754d79f240533feaf1a90b59badf7027bba74334a7 uri search q combrio algorithm MD5-sess response 42ad6a4571edb21780c26827a0c3910e opaque 9c55241868ffb3f34487f1a72519110a qop auth nc 00000001 cnonce 2e4b57bad694b520 Owen In reply to comment 4 ... Oleg See below for similar headers for a non-SSL connection. It s like stuff though I m not sure if that is strictly RFC compliant or not. Tommorrow I ll try a few variations and see if anything interesting happens. So the situation is far from being simple. There s no consistency in how various HTTP agents and servers handle the digest-uri. I re-read the RFC and this did not make things any clearer for me. There are ways of seeing and not seeing depending on what one wants or does not want to see. Hence the inconsistency in implementations I suggest the following 1 For release 3.0 we basically do nothing because we simply can t work around the problem without unfreezing the API 2 For release 3.1 we can fix the problem for CONNECT methods. This can be done without breaking the 3.x API comatibility 3 We revisit the problem in the course of 4.0 development and try to come up with a proper fix for the problem OlegIf anybody wants to come up with a patch meanwhile please do so. Even though it will not be checked in before 3.1 it would provide Owen with a manual solution if API compatibility is not an issue.Created an attachment id 16638 Hackish patch I managed to generate this patch and tested it against both IAS and another proxy server. It seems to fix this problem without breaking other things. I know that this isn t a very good solution and if someone with a better knowledge of the internals could figure out a way to clean it up that would be great.Created an attachment id 16639 Hackish patch a slightly different take This patch is still butt-ugly but it leaves DigestAuthScheme virginally ignorant of ConnectMethod which is in my opinion slightly less hackish What do you think OlegI ve tested in on my system and it appears to work. I d say that your fix is definately less hackish than mine probably the best that can be done for this version of the API. Thanks for the quick improvement. Owen In reply to comment 8 Created an attachment id 16639 edit Hackish patch a slightly different take This patch is still butt-ugly but it leaves DigestAuthScheme virginally ignorant of ConnectMethod which is in my opinion slightly less hackish What do you think Oleg I agree this is most likely as good as it gets for 3.x API OlegFolks any objections to committing this patch OlegFine with me. Typo in the deprecation warning there is a wrong reference to the c tor wrong parameter type .Patch committed to SVN TRUNK 3.1 branch Oleg
