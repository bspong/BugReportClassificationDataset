refactor HttpClientConnection and HttpProxyConnection
Instead of trying to define a full abstraction for client connections let s define only a minimal interface in HttpCore with only those methods actually needed in the core. In particular the core does not need to open connections since HTTPCORE-11 and it does not care whether a connection is direct or through a proxy. An abstraction for client connections can be defined in HttpConn. original description As discussed on the mailing list separating the responsibility for establishing connections from the connection objects could improve the design and help with proxy support. Take 1 on alternative connection interfaces. Note that this is a tar not a patch. I have used class and interface names that do not collide with existing ones. The idea is to have a few review cycles on the new interface before I have to modify all code that uses connections. Even so it took several hours longer than I had expected for a first draft. All classes and interfaces spelled connexion are supposed to be renamed to connection . Did you know that connexion is an oldfashioned but correct british spelling The code in the default implementation classes is copied and pasted from existing implementations. They compile and javadoc but they have not been tested. The general idea is to turn the connection into a simple container for a socket and associated objects. The logic for creating the socket that is for establishing the connection is moved to an operator as in switchboard . The tricky part is that the operator must be able to modify the connection s state in ways that should not be available to an application developer. In order to achieve this I have defined a third interface with internal operations that are only exposed to the operator. Here is a list of the new interfaces and classes HttpClientConnexion - container for the connection replaces HttpClientConnection and HttpProxyConnection. Knows it s operator and delegates calls such as open and close there. HttpClientConnInternal - internal operations for the connection. An instance of this interface is passed to the operator whenever the connection delegates a call there. HttpClientConnOperator - provides logic for opening and closing connections uses the connection internal operations AbstractHttpClientConnection - defines all attributes mandated by the HttpClientConnexion and HttpClientConnInternal interfaces and implements the delegation to the operator. Internal operations are implemented by an inner class. Derived classes can focus on send receive operations. impl.DefaultHttpClientConnexion - implements send receive logic mostly copied over from DefaultHttpClientConnection and AbstractHttpConnection. impl.DefaultHttpClientConnOperator - implements socket creation logic mostly copied over from DefaultHttpClientConnection and DefaultHttpProxyConnection and close shutdown logic copied over from AbstractHttpConnection. I had some trouble in assigning the responsibility for the stale connection check fallback implementation in DHCCOperator better implementation in DHCConnexion and the response availability check connection for now . The hooks that allow for the connection to create receiver transmitter objects after the socket has been created by the operator need improvement. Anyway you ll get the idea and I have already spent three evenings with this. Please let me know what you think. I may find time for minor revisions this weekend everything else must wait at least one week probably two. cheers   Roland Blocked by HTTPCORE-11Roland Please give me time until Sunday to come up with an alternative proposal for your consideration OlegUpdated the description with the results of our last discussion on the mailing list.Hi Roland Could you possibly live with these changed at least short term see two patches attached Changelog HttpCore HttpClientConnection open method is no more HttpAsync Added HttpAsyncClientConnection interface which extends HttpClientConnection and preserves the semantics of HttpClientConnection that existed before the changes to the interface I admit HttpAsyncClientConnection is quite hackish and is not meant a long term solution. However it does help to preserve the existing semantics of HttpAsync and helps us get HttpCore moving forward. Moreover I think in the future it would make sense for HttpAsync to adopt a connection framework of either HttpCore NIO or HttpConn so all this hooplah about open method will no longer be of any relevance. OlegHi Oleg no objections from my side. You should remove or fix the class end comment in HttpAsyncClientConnection though - And the author tag for both interface and implementation. cheers   Roland 20060923-httpasync.patch and 20060923-httpcore.patch checked in. I am going to move the issue to HttpClient shortly. OlegI just noticed that HttpClientConnection still has the getTargetHost method. If our goal is to define only a minimal interface in HttpCore that should be removed too. HttpRequestExecutor no longer creates the HttpContext so the caller can initialize the target host in the context. cheers   Roland I just noticed that HttpClientConnection still has the getTargetHost method. If our goal is to define only a minimal interface in HttpCore that should be removed too. HttpRequestExecutor no longer creates the HttpContext so the caller can initialize the target host in the context. Taken care of. getTargetHost method removed from HttpClientConnection OlegEven if connections do not themselves use socket factories there needs to be code that uses both interfaces. Patches for these two issues can therefore not be developed in parallel.I consider this issue fixed with the OperatedClientConnection. We can open a new issue for changes after review.
