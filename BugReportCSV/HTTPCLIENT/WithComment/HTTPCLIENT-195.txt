NTLM authentication failed due to closing of connection
Description When dealing with a NTLM proxy server that sends response back with lines 14 51 27 750 HTTP 1.0 407 Proxy Authentication Required 14 51 27 796 Date Mon 14 Apr 2003 19 52 43GMT r n 14 51 27 796 Content-Length 257 r n 14 51 27 796 Content-Type text html r n 14 51 27 796 Server NetCache appliance NetApp 5.3.1R1 r n 14 51 27 796 Connection keep-alive r n 14 51 27 796 Proxy-Authenticate NTLM TlRMTVNTUAACAAAABgAGACgAAAAGggEAtOoNy4M0g0EAAAAAAAAAAEdMT0JBTA r n The httpClient code is using the HTTP 1.0 as clue for closing the connection and ignored the Connection keep-alive . That caused the NTLM authentication to fail as the NTLM requires the response to the challenge to be sent back on the same connection. Proposed Fix Our fix is to add a flag inProxyAuthenticationRetry in HttpMethodBase to indicate that the method is doing proxy authentication retry. When the flag is true in HttpMethodBase.shouldCloseConnection check the Connection keep- alive before determining to close the connection.Created an attachment id 5956 wire log for failed connections. Created an attachment id 5957 wire log after the fix. Created an attachment id 5958 initialize inProxyAuthenticationRetry in HttpMethodBase.execute Created an attachment id 5959 Set inProxyAuthenticationRetry to true in HttpMethodBase.processAuthenticationResponse Created an attachment id 5960 check keep-alive connection header before closing connection Bin what version of HttpClient are you using The wire log does not seem to have been produced with a recent nightly build. HttpClient is a rapidly evolving library and we simply can t support anything else but the CVS HEAD. So please make sure that you can reproduce the alleged bug with the most recent CVS snapshot. And please please please submit patches in diff format OlegThe version of httpClient was taken from a nightly build 0307 . We are in a release schedule so we can not keep moving to the latest nightly build. We did try the 0410 build and it di not work at all. We just finished fixing the problems in the 0307 version so we can do our release with it. I am just coming back to submit the bugs and hopefully get them fix for the 2.0 final release. Depend on how much time I have I may or may not be able to reproduce the same problems in latest build. I will try my best. I am also trying to get CVS setup so I can do a proper diff for patches. Part of the difficulty in reporducing the problem is to find a NTLM proxy server that send the response like that HTTP 1.0 and keep-alive .This problem brings up a number of questions. The first being should we allow persistent connections with HTTP 1.0 From looking at RFC 2068 and 1945 the answer seems to be maybe. If the host responds with keep-alive I think we should. In the case of a proxied connection things are a little more hazy. It seems like we should not use Connection headers in this case but should still honor them. I am not sure though. Either way I think we should accept keep-alive headers in the case of HTTP 1.0 and I will attach a patch for this in a minute. On the proxy front I think we need a little more discussion. In the particular case of an NTLM proxy I completely defer to Adrian. I fortunately have no idea how NTLM works Does NTLM plus an HTTP 1.0 proxy ever work In a browser If so there must be some way to make it work for us. MikeCreated an attachment id 5967 shouldCloseConnection patch Mike I think it makes sense to commit the keep-alive patch. The NTLM proxy issue should be addressed separately I suppose along with the related HTTPCLIENT-200 OlegSorry I missed this one in the recent flurry of NTLM related problems. NTLM will work with any setup which has 1. Only one step of the process using NTLM authentication ie can t authenticate to a proxy and the webserver using NTLM 2. Persistent connections. NTLM authentications the connection not the request. So if it is appropriate for a HTTP 1.0 proxy to support keep-alive then doing so would allow NTLM to work.Bin we believe that the bug has been fixed. Please re-test your application with the most recent CVS snapshot. If the problem persists just reopen the bug report OlegThe patch did not work. I will attach latest log.Created an attachment id 6019 trace debug wire log I added a debug line and it shows that the connectHeader is null. But the wire log see previous attachement clearly shows the header being there. tip HttpMethodBase.java 2003-04-25 13 45 16.000000000 -0500 HttpMethodBase.java 2003-04-25 16 16 26.000000000 -0500 -873 6 873 7           else              connectionHeader getResponseHeader proxy-connection           LOG.debug connectionHeader connectionHeader          if connectionHeader null              if connectionHeader.getValue .equalsIgnoreCase close                  if LOG.isDebugEnabled Created an attachment id 6020 Log shows connectionHeader is null Excuse me Bin but see it for yourself HTTP 1.0 407 Proxy Authentication Required r n Date Fri 25 Apr 2003 19 24 23GMT r n Content-Length 257 r n Content-Type text html r n Server NetCache appliance NetApp 5.3.1R1 r n Proxy-Authenticate NTLM r n Proxy-Authenticate Basic realm proxy server sghdqpx03.global.ad.sabre.com r n ... The response does not contain Proxy-connection keep-alive header and is of version HTTP 1.0. No wonder that HttpClient drops the connection. I can only suggest one of the following approaches 1. Report the problem to the Net Appliance folks 2. Use basic authentication if permittable by the security guidelines of your company 3. Hack in that inProxyAuthenticationRetry flag back again. If you decide to pursue the third option I doubt that we would accept this patch into HttpClient code trunk. I am going to setup squid proxy with NTLM authentication next week and run a few tests. If squid also omits the keep-alive header we ll have to consider the work-around you proposed. Otherwise you ll have to live with a fork of your own. I leave the bug open until tested against squid proxy. If squid does not exhibit the same behavior with regard to the keep-alive header the bug will be marked as invalid Oleg HTTPCLIENT-200 has been marked as a duplicate of this bug. Created an attachment id 6021 Another log showing all the headers OK I see what is going on here. The proxy responds with connection keep-alive header whereas HttpClient expects proxy-connection keep-alive . Even though it does not seem to be a very compliant behaviour it can still be easily mended. I ll tweak shouldCloseConnection method a bit. But probably not today. It s kind of late here OlegFix applied. Please test against the most recent CVS snapshot OlegI ve tested against the most recent CVS snapshot but I still have connection problem when I try to use a NTLM Proxy Squid ... I think that the client must notify to the proxy that it must keep the connexion alive if you add the request header Proxy-Connection Keep-Alive to the method before execute it it works I don t know if we must do this for all NTLM proxies or just for Squid... FabienFabien Wire log would really help. The problem appears to be squid specific. I am afraid I ll have to set up squid proxy with NTLM authentication at work next week and run a few tests. So stay tuned OlegOk. I think I found the trouble-maker. HttpClient downgrades HTTP protocol version to 1.0 in when sending requests via a HTTP 1.0 proxy server. No wonder the proxy does not keep the connection alive. 04 24 256 DEBUG HttpMethod - -Execute loop try 1 ... 04 24 287 DEBUG wire - - GET http www.google.fr HTTP 1.1 r n ... 04 24 474 DEBUG wire - - HTTP 1.0 407 Proxy Authentication Required r n ... 04 24 537 DEBUG wire - - Server squid 2.5.STABLE1-20030121 r n 04 24 537 DEBUG wire - - Mime-Version 1.0 r n 04 24 537 DEBUG wire - - Date Sat 26 Apr 2003 11 04 24 GMT r n 04 24 537 DEBUG wire - - Content-Type text html r n 04 24 537 DEBUG wire - - Content-Length 1289 r n 04 24 537 DEBUG wire - - Expires Sat 26 Apr 2003 11 04 24 GMT r n 04 24 537 DEBUG wire - - X-Squid-Error ERR CACHE ACCESS DENIED 0 r n 04 24 537 DEBUG wire - - Proxy-Authenticate NTLM r n 04 24 553 DEBUG wire - - X-Cache MISS from roland r n 04 24 553 DEBUG wire - - Proxy-Connection close r n ... 04 24 803 DEBUG HttpMethod - -Execute loop try 2 ... 04 24 818 DEBUG wire - - GET http www.google.fr HTTP 1.0 r n ... The question is whether this kind of behavior is wrong or not Shall 407 response be treated specially when deciding whether HTTP protocol is to be downgraded Any opinions Oleg   Created an attachment id 6041 HttpMethodBase readStatusLine Folks what do you think about the patch I just attached I think HTTP version of the proxy server should not be taken into consideration by the HttpClient regardless of how we decide to fix the NTLM authetication problem OlegThis patch justs ignore http version when using a proxy It seems like this might fix things for this case but I m not sure it s a universal solution. How will this effect other proxies I think Adrian s idea of always sending keep-alive with NTLM is good but I would take it even futher. Why not always send keep-alive. It seems like we might as well always ask for a persistent connection. MikeMike I respectfully disagree. I believe the proposed solution is more general than that discovered by Fabian. Persistent connections with HTTP 1.0 is a dirty and an error prone business. The HTTP spec is horribly vague on this issue and we should be careful about including Keep-Alive token with each and every request. I find it extremely confusing. However as far as proxies are concerned the spec is quite plain. Here s the exact wording of the RFC 2068 more up-to-date RFC 2616 simply refers to this chapter of the RFC 2068 ... 19.7.1 Compatibility with HTTP 1.0 Persistent Connections ...    A client MUST NOT send the Keep-Alive connection token to a proxy    server as HTTP 1.0 proxy servers do not obey the rules of HTTP 1.1    for parsing the Connection header field. ... However since the spec does not mention proxy-connection directive at all I suppose we may be a bit more liberal. I believe it should be safe to include this header with HTTP 1.0 when communicating via a proxy. To reiterate my main point here HttpClient should not take into consideration the version of the proxy server as the proxy server is supposed to be absolutely transparent at least in theory to the client. If the proxy has an issue with a higher version of the HTTP protocol I believe it is supposed to respond with 501 NOT IMPLEMENTED or 505 WRONG HTTP VERSION . Otherwise we can assume that the proxy is at least aware of the HTTP version in question. This said we may still employ proxy-connection directive to add an extra level of support for some proxies like squid. I ll attach another patch within a few hours and be waiting for additional feedback OlegCreated an attachment id 6045 patch take 1 Oleg I hear what you are saying. I agree that Connection keep-alive is not good for proxies but I think Proxy-connection is totally safe. It is quite strange that Proxy-connection is not mentioned at all in RFC 2616 but that all proxies seem to use it. From looking at a few newsgroup posts it seems that Netscape added proxy-connection support some time ago and it just caught on. The main reason I suggested adding a keep-alive is that it seems this is what all browsers that I tried do. For now I would be happy always adding a Proxy-connection keep-alive when communicating with proxies. I think we should also investigate connection keep-alive for non-proxied requests. Are there any side effects of ignoring HTTP version MikeClearly there are side effects. For instance expect 100-continue handshake simply does not work with squid. The problem is that the only way of knowing what kind of proxy we are dealing with is to receive 407 status code. In all other cases HttpClient will happily send HTTP 1.1 requests even though the proxy may be compliant with HTTP 1.0 spec only. I strongly believe that HttpClient should behave consistently regardless of whether proxy authentication is used or not whether preemptive authentication is enabled or not. There should be no code modality. It is by far a greater evil imho OlegCreated an attachment id 6057 Patch take 2 Looks good to me. MikePatch applied. OlegNew problem My NTLM proxy does not like using the same connection between first CONNECT and the subsequent CONNECT with type-1 message. The issue was created in v1.140. Below is part of the diff between v1.140 and v1.139 that caused problem. I tried to change it back to the way in v1.139 it worked. I will attach logs for both working and non-working tries. diff -u -r1.139 -r1.140 ...          if httpVersion.equals HTTP 1.0 - http11 false if proxied http11 false           else if httpVersion.equals HTTP 1.1 Created an attachment id 6129 Failed log. connection NOT closed Created an attachment id 6130 success log. connection CLOSED. Highlight the difference of two logs In the failed run due to the check isProxied the HTTP 1.0 is ignored and the connection ie kept open The proxy server later will fail the authentication attempt . In the success run restored 1.139 logic the connection is closed. Failed run 2003 05 01 09 24 14 546 CDT DEBUG wire - - 2003 05 01 09 24 14 546 CDT DEBUG HttpMethod - -Resorting to protocol versiondefault close connection policy 2003 05 01 09 24 14 546 CDT DEBUG HttpMethod - -Should NOT close connection using HTTP 1.1. 2003 05 01 09 24 14 546 CDT DEBUG HttpMethod - -Execute loop try 2 2003 05 01 09 24 14 546 CDT TRACE HttpMethod - -enter HttpMethodBase.processRequest HttpState HttpConnection 2003 05 01 09 24 14 546 CDT TRACE HttpMethod - -Attempt number 1 to process request 2003 05 01 09 24 14 546 CDT TRACE HttpMethod - -enter HttpMethodBase.writeRequest HttpState HttpConnection Success run 2003 05 01 10 47 26 578 CDT DEBUG wire - - 2003 05 01 10 47 26 578 CDT DEBUG HttpMethod - -Resorting to protocol versiondefault close connection policy 2003 05 01 10 47 26 578 CDT DEBUG HttpMethod - -Should close connection using HTTP 1.0. 2003 05 01 10 47 26 578 CDT TRACE HttpConnection - -enter HttpConnection.close 2003 05 01 10 47 26 578 CDT TRACE HttpConnection - -enter HttpConnection.closeSockedAndStreams 2003 05 01 10 47 26 578 CDT DEBUG HttpMethod - -Execute loop try 2 2003 05 01 10 47 26 578 CDT TRACE HttpMethod - -enter HttpMethodBase.processRequest HttpState HttpConnection 2003 05 01 10 47 26 578 CDT TRACE HttpMethod - -Attempt number 1 to process request 2003 05 01 10 47 26 578 CDT DEBUG HttpMethod - -Opening the connection. 2003 05 01 10 47 26 578 CDT TRACE HttpConnection - -enter HttpConnection.open 2003 05 01 10 47 26 593 CDT TRACE HttpMethod - -enter HttpMethodBase.writeRequest HttpState HttpConnection OK. My fault. Patch will follow in a minute. OlegCreated an attachment id 6131 Corrective patch take 1 Bin could you please apply the patch and let me know if it fixes the problem OlegOleg It did not work and I will attach the log.I have to admit my good intentions turned out to be causing more harm than good. I ll just remove offending code. OlegOffending code removed. That should fix the problem. Oleg
