DateUtils should cache SimpleDateFormat
DateUtils create a SimpleDateFormat for each invocation of formatDate and parseDate. This can be optimized if SimpleDateFormat instances are cached. Since SimpleDateFormat is not threadsafe the cache must be threadlocal.the patch introduces a package locale SimpleDateFormatFactory which does cache instances of SimpleDateFormat threadlocalI personally tend to avoid usingthreadlocals in libraries but in this case it seems justified. If I hear no objections I ll commit the patch OlegIf there are many threads making few calls each to this method we are opening a memory hole. In particular since a whole map of formats is stored. Can we please wrap the map in a SoftReference to allow garbage collection There is an Override in the source code and not inside a comment. I don t know what it s supposed to mean but it is not valid Java 1.3 source. cheers   Roland Can we please wrap the map in a SoftReference to allow garbage collection Sounds reasonable. OlegWill deal with it post-ALPHA5. OlegI searched for alternative approaches and digged up a FastDateFormat in commons.lang 1 which is fully threadsafe. Maybe http-core could use this one. I don t propose to introduce commons.lang as a dependency but simply to incorporate the FastDateFormat partial or whole as a util into http-core. The code has no dependencies on the rest of commons.lang only one call to Validate . Just some thoughts Daniel 1 http jakarta.apache.org commons lang api org apache commons lang time FastDateFormat.htmlI support the FastDateFormat approach. It solves the threadsafety problem in a much more elegant way.You noticed that FastDateFormat is for formatting only not for parsing Since this is obviously a case where multiple implementations are available and have different advantages drawbacks maybe it is time to define an interface and make DateUtils - in it s current form - the default implementation. Optimizing static helper methods without a specified target environment is soooooo ugly. cheers   Roland Yes saw it. Unfortunately after I sent of the comment. So much for prudent investigation methods. I ll have a look if I can come up with something. And for the specified target environment I guess this would be parsing and formatting of the three required formats - RFC 1123 EEE dd MMM yyyy HH mm ss zzz - RFC1036 EEEE dd-MMM-yy HH mm ss zzz - ascitime EEE MMM d HH mm ss yyyy Cheers DanielHello Daniel target environment is... a client HTTP application few threads few operations - current implementation is fine b server application few threads many operations - full per-thread caching is fine c server application many threads few operations - current implementation not so good full caching not so good either d .... Within HttpCore only formatting should be required. Date parsing is for cookies. So maybe reduce DateUtils to formatting only based on FastDateFormat. Date parsing goes to HttpCookie and gets an interface for substituting different implementations. cheers   Roland  Folks In fact the static methods of DateUtils are not being used in HttpCore AT ALL. HttpDateGenerator imports a few static variables from DateUtils but that is it. this.dateformat new SimpleDateFormat DateUtils.PATTERN RFC1123 Locale.US this.dateformat.setTimeZone DateUtils.GMT 1 I suggest DateUtils gets moved to HttpClient 2 I am in favor of using ThreadLocals and SoftReferences to cache DateFormatters but will not stand in your way should you decide to borrow FastDateFormat from Commons Lang as long as it is not in Core OlegI ve taken a look at FastDateFormat. It maintains several internal caches in form of static HashMaps. I d hate to introduce that as a default anywhere in HttpComponents. Moving DateUtils to HttpClient Cookie sounds good. There we can take as many stabs at it as we want to. cheers   Roland This needs to be done before the code freeze for ALPHA5. Folks if I hear no laud objections I ll move DateUtils to HttpCookie within the next few days. OlegA small variation on the Daniel s original patch. HashMaps containing date format instances are now softly referecned by the thread local to allow for their garbage-collection. Please review. If I hear no complaints I ll check in the patch in a few days. Oleg  Patch checked in Oleg
