Build environment configuration Mavenize the build process
- ease of building. HttpClient should be buildable without the user needing to go away and download extra jars. Maven does a good job of this. - automated site and build on a nightly basis to pick up changes - move to j2sdk1.4 HTTPCLIENT-37 has been marked as a duplicate of this bug. And there is the real problem which is the reason I don t like JAR files checked into CVS either. Disk space isn t expensive enough to be a deterrent any more - Let s assume that I want to build a single app that uses two different commons packages A and B that both depend on a third one S . In the runtime environment of my app all three are going to be in the same class loader so there can obviously only be one copy of S. The challenge comes when A and B each depend on different versions of S. I don t find out about problems say incompatible method signatures due to changes between S1 and S2 until I m doing integration testing and only then if my test suite happens to include coverage for the combination in question . I d really like the compiler to help me catch things like this by forcing my compilations of A and B to use a specific copy of S no matter what the A and B project documentation declares to be the required versions. In non-Mavenized builds like BeanUtils and Digester I manage this through a shared user.home build.properties file that declares which version of S s jar files should be used. This relies on using the same property name in each build script which is generally true for Commons projects but not always true elsewhere. Fortunately Jason just added similar functionality to Maven so Mavenized apps will be able to do the same sort of local override configuration. So there is now even less reason for projects to continue to check JAR files into CVS. Craig dIon has started working to this.Maven build is complete AFAIK. maven clean test will compile all code and tests and run TestNoHost. Jars are also downloaded by maven as per the project.xmlThanks dIon.
