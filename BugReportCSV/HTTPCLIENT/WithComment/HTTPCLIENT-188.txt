recoverable exceptions when reading are not retried
If a recoverable exception occurs after a request is written then the method is not retried.Created an attachment id 5859 patch 1 Mike - Overall it is a step in the right direction. You know I personally would like to see retry logic moved from HttpMethodBase to HttpClient however for the time being the patch is a good interim solution - isRecoverableAfterReqest is apparently misspelled - I think isRecoverable flag should apply to writing the request as well as reading the response. There should be a way to disable all sorts of retries. For instance the user may want to assign a unique id to each and every request to the server. Request auto-retry might mess this scheme up. We should also differentiate between request write recoverable exceptions failure reading response exceptions in order to provide the users with a finer control over HTTP communication. For that end I d want to see HttpRecoverableException sub-classed into several specific types of recoverable exceptions Auto-retries in Sun s implementation of HTTP client was particularly awful. Some response reads timed out and were subsequently retried. As a result I had several hits on the server for the same request. That was my primary reason for dropping Sun s stuff and turning to HttpClient. I strongly believe we should not fall into the same trap here. Oleg I like Adrian Suttons recent suggestion for detecting whether the socket read will fail after the write - Set the timeout on the socket to one ms and try a read of a single byte before doing the write. His psuedo code although I changed the catch clause after reading the SO TIMEOUT docs if socketInputStream.available 0     try         socket.setSoTimeout 1         socketInputStream.read         socket.setSoTimeout oldValue      catch InterruptedIOException e          We re good to go      catch IOException e          Connection is half closed request will fail.        throw new HttpRecoverableException Argg      else       There really shouldn t be data on the input stream before the request is sent.       We probably should throw an exception in this case because the previous response       wasn t fully read. Adrian suggested using a wrapper around the socket input stream that does mark and reset but I d like to suggest the alternative of a PushbackInputStream wrapper so if a byte did get read it could be pushed back. Perhaps we could add a function to the HttpConnection called something like isConnectionStale which would be called by processRequest instead of calling isOpen . The stale check could do the isOpen check and attempt to read one byte as per above. Would this work Unfortunately I have not been able to reproduce the problem with recoverable exceptions here so I cannot test the change. I should have time to put together a patch some time today or tomorrow if nobody else can pick it up but I would still need someone else to test it.Created an attachment id 5878 stale conn.patch - does peek-ahead read on recycled connections Instead of mucking with the logic of HttpMethodBase.processRequest I put the isStale check only in the connection managers if they are doling out an existing open connection. As I said before I ve not been able to cause the problem to occur and I m wondering if someone else will test it. Thanks.Very nice Eric. This seems to have fixed the problem. I ran a few tests and things look good. I refactored a little and added a some logging but the core  logic is the same. Patch to come soon. To anyone who has been experiencing this problem please try this patch out. I think this may be the one. Again nice work. MikeCreated an attachment id 5886 Eric s patch plus a little Created an attachment id 5887 Retry handler Attached above is a redo of patch 1 . I think Eric s patch for detecting stale connections is the ultimate fix for this bug. The discussion however has also brought up some issues with the current retry logic. As Oleg was pointing out the current retry implementation is quite rigid. This patch hopes to fix this by extracting the retry logic to a new interface. This change gives full control over retrying to the user and still allows for the current functionality with no modifications. Please take a look when possible. MikeI ll try it today but I have just a question I might be wrong While debugging I ve seen that isOpen is called really often for one request and looking at the patch it seems the test will try catch IOException every time isOpen is called. Isn t it gonna affect performance Isn t it possible to check the stale of HttpConnection only once before the request Again I have to check what I say but when I made a breakpoint on isOpen method once I went inside a lot of time. Anyway a big thank you for this patch that I m gonna try ASAP.It woooooooooooooorks I had a test case here and indeed the isStale method returned true so the connection got closed on client side and then httpclient opened a new one. Thank you so much to everyone Adrian for this idea eric for first patch and mike for always being active on response time . And forget about the isOpen method being called multiple times I just checked this is called only once request. This is just in time for my production release It could nt be better. Thanks thanks thanksMike you rock Your retry handler is a beauty. Aurélien is apparently happy too. I think you should go ahead with committing both patches. As soon as the patches land in the CVS code tree I suggest we call CVS commit freeze and hand matters over to Jandalf to take care of long promised BETA-1 release. Oleg PS Do I sound too impatient - I haven t tested yet the retry handler but I ll give it a shot today seems good.Both patches have been applied. Many thanks to Eric Adrian Aurélien and Oleg for working through this problem. This has been a major problem for a while now and I think we finally have a good solution. Oleg I am also quite ready for a beta-1. Hopefully it will come soon. I think if we do not hear anything new by the end of the day we should call for a release. Mike
