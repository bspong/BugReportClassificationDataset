Implement a way to override or resolve DNS entries defined in the OS
When working with HttpClient in restrictive environments where the user doesn t have the permissisions to edit the local etc hosts file or the DNS configuration can be eased with an DNS Overrider capability. This can be useful with JMeter which can follow redirects automatically and resolve some of the redirected hosts against its configuration. Another example is a custom forward proxy written in Java and based on httpclient which can be deployed is such a restricted environment that would ease the development of various web solutions for some developers.Proof of concept work. If this is OK I can add a set of unit tests and put the ASF headers to the source files.Updated patch with examples for custom DNS resolving on auto-redirects. Please review ...Looks good to me. However I think it would be slightly cleaner to provide an additional constructor to DefaultClientConnectionOperator and PoolingClientConnectionManager that takes DnsOverrider as an optional nullable parameter. I also think DnsResolver might be a better name for that interface that DnsOverrider. Otherwise all is good. Please go ahead and add ASL headers and test cases. Please make sure to use spaces instead of tabs for indentation. OlegThanks for the review. In the initial proof-of-concept I didn t wanted to touch the existing API so I extended the classes where I plugged in the new functionality. I attached a new patch incorporating all your comments.The patch is too noisy a lot of changes are due to different formatting line wrapping etc which makes it difficult to review. Could you please create a new patch with the least amount of non-functional changes OlegSorry about the noise. Attached a hopefully much cleaner version. Also I moved the DnsResolver interface from the package org.apache.http.impl.conn to org.apache.http.conn.Almost there. I think it would be better if the DnsResolver was always to resolve hostname to an address or throw an UnknownHostException if the address could not be resolved instead of returning null. Individual implementations may choose to fall back onto InetAddress getAllByName when appropriate or signal failure to resolve the hostname by throwing UnknownHostException. public interface DnsResolver     InetAddress resolve String host throws UnknownHostException What do you think OlegThis is a good idea in this way we favour exceptions instead of custom returns such as null.Patch checked in with some minor tweaks. OlegDefault DNS resolver that will translate the host names to IP addresses using the OS configuration.Patch checked in. Oleg PoolingClientConnectionManager constructor doesn t pick the provided dns resolver but instead always goes with SystemDefaultDnsResolver public PoolingClientConnectionManager final SchemeRegistry schemeRegistry                 final long timeToLive final TimeUnit tunit                 final DnsResolver dnsResolver         super         if schemeRegistry null             throw new IllegalArgumentException Scheme registry may not be null                  this.schemeRegistry schemeRegistry         this.dnsResolver new SystemDefaultDnsResolver         this.operator createConnectionOperator schemeRegistry         this.pool new HttpConnPool this.log 2 20 timeToLive tunit      Fixed. Oleg
