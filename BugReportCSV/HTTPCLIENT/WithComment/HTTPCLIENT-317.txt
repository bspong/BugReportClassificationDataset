HTTP Client doesn t support multipart related content-type
It is not possible to sent data easely as a multipart related content-type as discribed in rfc 2387 using Http Client.Just wondering if you have taken a look at the MultipartPostMethod Currently it only implements RFC1867 but in most cases that should be sufficient I believe. http jakarta.apache.org commons httpclient apidocs org apache commons httpclient methods MultipartPostMethod.htmlYes of course I had a look to MultipartPostMethod. I agree that in most cases it is enough to use just MultipartPostMethod class. That s probably because multipart related encoding in some way is an extention of multipart form data. But it is not possible to send data easely that uses features introduced in Multipart Related data Here are the main problems why it is not possible problem1 - multipart related part in comparison with multipart form data related part has additional Content-ID header that can be used as the reference from other multipart related parts    send OutputStream out method of Part class doesn t send Content-ID header so HTTP Client will send something like example-2      Content-Type Text x-Okie charset iso-8859-1       doc      This picture was taken by an automatic camera mounted ...       image file cid ID-2       para      Now this is an enlargement of the area ...       image file cid ID-3       doc instead of example-2      Content-Type Text x-Okie charset iso-8859-1      Content-ID ID-1       doc      This picture was taken by an automatic camera mounted ...       image file cid ID-2       para      Now this is an enlargement of the area ...       image file cid ID-3       doc problem2 - addRequestHeaders HttpState state HttpConnection conn method of MultipartPostMethod class  writes to a Content-Type something like multipart form-data boundary AaB03x and thit is correct for multipart form data rfc 1867 but for multipart related data according to rfc 2387 this method should generate something like multipart related boundary AaB03x start ID-1 type Text x-Okie where start ant type parameters are the content-ID and type of the compound object s root body part There are another small diferences as well see rfc 2387 . It looks like the easiest way to make Http Client support multipart related data is to add two classes e.g. MultipartRelatedMethod that extends MultipartPostMethod and implements addRequestHeaders HttpState state HttpConnection conn method according to rfc 2387 and MultipartRelatedPart class that extends Part class and implements send OutputStream out method according to rfc 2387. Of course classes for all multipart related parts should have MultipartRelatedPart as super class. Could you please comment on this. If you know another way how to overcome this problem please tell me. Peter I see the point. Unfortunately there s not much we can help you with at the moment. I personally see implementation of the multipart related content handling as being out of scope for HttpClient as least for a few major releases to come. Currently there are efforts underway to develop a generic Multipart Mime library within the Jakarta Commons Codec project http cvs.apache.org viewcvs.cgi jakarta-commons-sandbox codec-multipart We certainly plan to integrate the Multipart Mime functionality once it becomes available as a part of stable commons-codec release. That may take a while though. For the time being I am afraid you ll have to handle multipart related content encoding manually. Oleg Oleg Thank you for response. Ok I ll implement it myself. It s not that much work. Peter. This followowing two classes I just wrote do the trick for me reg. the 2 problems above... not sure this is fully sufficient Might help somebody else. Regards Michael Vorburger. class MultipartRelatedRequestEntity extends MultipartRequestEntity public MultipartRelatedRequestEntity Part parts HttpMethodParams params super parts params public String getContentType String header super.getContentType int ix header.indexOf boundary String mimeType application soap xml or text xml or doesn t actually matter return multipart related type mimeType start ROOTPART NAME header.substring ix private static class MultipartRelatedStringPart extends StringPart protected static final String CONTENT ID Content-ID protected static final byte CONTENT ID BYTES EncodingUtil.getAsciiBytes CONTENT ID protected static final String GT protected static final byte GT BYTES EncodingUtil.getAsciiBytes GT public MultipartRelatedStringPart String name String value super name value public MultipartRelatedStringPart String name String value String charset super name value charset protected void sendDispositionHeader OutputStream out throws IOException out.write CONTENT ID BYTES out.write EncodingUtil.getAsciiBytes getName out.write GT BYTES Michael String mimeType application soap xml or text xml or doesn t actually matter return multipart related type mimeType start ROOTPART NAME header.substring ix AFAIK it makes no sense to specify a type attribute. The MIME type of this part is multipart related period. It is a container whose body beofre the boundary is usually just empty or contains a dummy string and there is no need to specify the type of this emtpyness. It is also incorrect to reuse the MIME boundary of the parent. It is a new container and must therefore start with a new boundary string and close the boundary after the container ends . Fixed. See HttpMime OlegIt would be fixed in HttpMime could you please explain how Because if I even look into HttpMime 4.1 alpha2 in trunk there is nothing that generates the Content-ID header in the parts with HttpMultipartMode.STRICT only Content-Type Content-Disposition and Content-Transfer-Encoding. But Content-ID is NEEDED e.g. in Servicemix as target. so the above mentioned problem is still open in the latest version but the workaround only would work in 3.1 legacy OK I fixed the problem with a new sub-class for FormBodyPart that adds the Content-ID header called SOAPBodyPart I only would need someone to commit this as one cannot use MinimalField outside the httpcomponent package for whatever reason. package org.apache.http.entity.mime import org.apache.http.annotation.NotThreadSafe import org.apache.http.entity.mime.content.ContentBody import org.apache.james.mime4j.descriptor.ContentDescriptor   An extension of the mime4j standard link BodyPart class that   automatically populates the header with standard fields based   on the content description of the enclosed body.       since 4.0   NotThreadSafe Entity is NotThreadSafe public class SOAPBodyPart extends FormBodyPart     public SOAPBodyPart final String name final ContentBody body         super name body         generateContentID body             protected void generateContentID final ContentDescriptor desc        StringBuilder buf new StringBuilder     buf.append .append getName .append     getHeader .addField new MinimalField Content-ID buf.toString    MinimalField is a public class. I do not see why this code should be added to HttpMime. Oleg
