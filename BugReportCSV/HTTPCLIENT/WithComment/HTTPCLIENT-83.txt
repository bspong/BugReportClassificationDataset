handle multivalue headers correctly
Some times web servers send back multiple headers with the same key. e.g. WWW-Authenticate Negotiate WWW-Authenticate NTLM WWW-Authenticate Basic realm kmdc5 To handle this correctly we should add a method public java.util.Iterator getResponseHeaders java.lang.String name just as in javax.servlet.http.HttpServletRequest.While I agree that there should be a way to get the response headers I don t agree with the proposed method prototype. According the relevent RFCs mulitple headers of the same name are permitted but they are also allowed to be freely compressed into a comma seperated list. Really the Header class should be responsible for providing access to these list elements.The particular problem with multiple authenticate headers has been fixed. See http nagoya.apache.org bugzilla show bug.cgi id 11219 There may be other cases where multivalued headers are not handled correctly. HttpClient parsing needs a complete rewrite of parsing by utilizing regular expressions. Unless there is some other particular problem with multiple headers this bug should be pushed to target milestone 2.1.Created an attachment id 4706 Proposed solution try 1 The above patch is a first attempt at solving this problem. What s new Ê- HeaderGroup a new class for storing headers. This class supports multiple headers with the same name and it remembers header order. I m not a huge fan of the name but it was the best I could come up with. Ê- HeaderParser a new class for parsing headers. Header parsing code was duplicated in HttpMethodBase and ChunkedInputStream and was placed here. Ê- HttpMethod has 3 new methods. getRequestHeaderGroup getResponseHeaderGroup and getResponseFooterGroup . This will break an existing extension of HttpMethod. Ê- Some of the methods for accessing headers in HttpMethod have been deprecated. Ê- Classes in the general codebase that use the newly deprecated methods have been fixed. Some of the test cases are still using deprecated methods. Ê- SimpleHttpConnection and SimpleHttpMethod have been changed to work correctly with the new header storage method. Please take a look and let me know what you think. Created an attachment id 4792 Proposed solution try 2 Attached previously is a second attempt at fixing this problem. Here s what s new Ê- HttpMethod no longer has any changes Ê- since 2.0beta1 tags have been added Ê- absolute see and link tags been made relative Ê- a static HttpConnection.readLine InputStream method has been added and is being used by HttpConnection and HeaderParser. Ê- HeaderGroup.getCondensedHeader now always returns a new Header Enjoy MikeCreated an attachment id 4798 Proposed solution try 3 Attached previously is a third attempt at fixing this problem. Here s what s new Ê- HttpMethodBase.get HeaderGroup methods are now protected Ê- HeaderParser is now in utils package Ê- use of footer terminology has been changed to trailer headers where appropriate Enjoy MikeCreated an attachment id 4799 Proposed solution try 4 I took the patch a bit farther to store the headers in both a map and a list. The list is order preserving as with Mike s patch but the map gives nice access to the elements as was the original. The map entries are lists themselves lists of headers with all the same name which is used as the lowercase key. This might be a bit overboard but its a best of both worlds approach. Uses a bit more memory for the hashtable and lists but there are no copies made of the headers themsleves so all the datastructures just contain pointers. The most complex code is in the remove methods. Do you think that this is too out there The try 4 patch was corrupted. try 3 patch was committed to the repository. HTTPCLIENT-101 has been marked as a duplicate of this bug. 
