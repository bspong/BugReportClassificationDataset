Auto method retrial broken
Folks While working on the exception handling guide for the 3.0-alpha2 release I stumbled upon a problem with HttpTimeoutException and its subclasses. In 3.0a1 HttpTimeoutException subclasses HttpRecoverableException which causes HTTP methods failed due to a connect or socket timeout to be automatically retried. INFO HttpMethodDirector - -Recoverable exception caught when processing request INFO HttpMethodDirector - -Recoverable exception caught when processing request INFO HttpMethodDirector - -Recoverable exception caught when processing request INFO HttpMethodDirector - -Recoverable exception caught when processing request WARN HttpMethodDirector - -Recoverable exception caught but MethodRetryHandler.retryMethod returned false rethrowing exception org.apache.commons.httpclient.IOTimeoutException Read timed out at org.apache.commons.httpclient.HttpConnection WrappedInputStream.handleException HttpConnection.java 1350 at org.apache.commons.httpclient.HttpConnection WrappedInputStream.read HttpConnection.java 1360 at java.io.FilterInputStream.read FilterInputStream.java 66 at java.io.PushbackInputStream.read PushbackInputStream.java 120 at org.apache.commons.httpclient.HttpParser.readRawLine HttpParser.java 76 at org.apache.commons.httpclient.HttpParser.readLine HttpParser.java 104 at org.apache.commons.httpclient.HttpConnection.readLine HttpConnection.java 1054 at org.apache.commons.httpclient.HttpMethodBase.readStatusLine HttpMethodBase.java 1785 at org.apache.commons.httpclient.HttpMethodBase.readResponse HttpMethodBase.java 1546 at org.apache.commons.httpclient.HttpMethodBase.execute HttpMethodBase.java 977 at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry HttpMethodDirector.java 383 at org.apache.commons.httpclient.HttpMethodDirector.executeMethod HttpMethodDirector.java 164 at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.java 437 at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.java 324 at Test.main Test.java 13 Caused by java.net.SocketTimeoutException Read timed out at java.net.SocketInputStream.socketRead0 Native Method at java.net.SocketInputStream.read SocketInputStream.java 129 at java.net.SocketInputStream.read SocketInputStream.java 182 at org.apache.commons.httpclient.HttpConnection WrappedInputStream.read HttpConnection.java 1358 ... 13 more Exception in thread main This probably is not what we want. Besides for non-idempotent methods this may simply be fatal and result in all sorts of unpleasant side-effects. One possibilty that I personally favour is to make HttpTimeoutException class extend IOException instead of HttpRecoverableException. There are others. The question is whether timeout exceptions should be considered recoverable from the conseptual standpoint. What do you think OlegCreated an attachment id 12015 Patch take 1 Changelog fixes broken request sent code albeit at the expense of adding yet another method to the HttpMethod interface removes requestSent argument from the MethodRetryHandler retryMethod method which is now available as a method of the HttpMethod interface eliminates superfluous HttpTimeoutException IOTimeoutException classes. Rethrowing InterruptedIOException as IOTimeoutException made sense under assumption that timeout exceptions represented a subclass of recoverable exceptions which turned out to be wrong ConnectTimeoutException now subclasses the standard InterruptedIOException which is more consistent with the overall Java exception handling framework HttpConnectionManager classes now throw a more specific ConnectionPoolTimeoutException derived from ConnectTimeoutException. There can be cases when socket connect timeout needs to be differentiated from that of the connection pool Let me know what you think OlegHi Oleg In regard to making timeout exceptions non-recoverable I m not sure this is right for all cases. In the example you site I agree that the read timeout should not have caused a retry. The problem here was not that the Exception was recoverable but that the requestSent variable was not being set correctly. If requestSent had been true which it should have and is now with your patch the method would not have been retried using the DefaultMethodRetryHandler. Also in cases where there is connect timeout it might be nice to have the method retried configurable . I would suggest keeping the timeout exceptions recoverable and then adding method params to configure how the DefaultMethodRetryHandler determines what exceptions to retry on. Also in regard to the MethodRetryHandler I m not sure it s worthwhile deprecating retryMethod . Adding a new method already breaks the API. We might as well just change the original method. MikeMike What irks me a little is that socket read timeouts on non-idempotent methods must be considered fatal as an attempt to automatically retry an non-idempotent method may leave the application in an inconsistent state. As HttpClient can t know whether a method or a sequence of methods are idempotent it should probably assume they are not. In this case rethrowing socket timeout as a recoverable exception sounds wrong at least from the conceptual standpoint. I do agree that it might make sense to have connect timeouts treated as recoverable exceptions. The trouble is that currently only method execution can be retried automatically and connection cannot. Mucking around with MethodRetryHandler was a mistake. Its argument sequence is ugly but not uglier than many other things. It makes sense to defer any changes to it until 4.0 Oleg    What irks me a little is that socket read timeouts on non-idempotent methods     must be considered fatal as an attempt to automatically retry an non-idempotent     method may leave the application in an inconsistent state. As HttpClient can t     know whether a method or a sequence of methods are idempotent it should     probably assume they are not. True. Technically we can probably retry all methods except POST and PUT but I think in practice this would be dangerous.     In this case rethrowing socket timeout as a recoverable exception sounds wrong     at least from the conceptual standpoint. I agree. I think the problem lies in the whole concept of recoverable exceptions. We are attempting to determine recoverability at the point the exception is thrown but this decision should really be made by the code that catches the exception. Perhaps we should ditch the whole concept of recoverable exceptions and just base it on other factors.     I do agree that it might make sense to have connect timeouts treated as     recoverable exceptions. The trouble is that currently only method execution can     be retried automatically and connection cannot. Yes this would be an enhancement. MikeI tend to agree that the whole auto-recovery mechanism the way it is implementent now is flawed. Simply put any IOException can potentially be treated as recoverable provided the application layer ensures methods idempotentcy. All it basically takes is this     boolean retryMethod         HttpMethod method         IOException exception         int executionCount The question is do we want to fix it now or do we want to fix it later This is what I can live with for now the patch coming shortly . Let me know what you think OlegCreated an attachment id 12021 Patch take 2 Hi Oleg That s pretty good. I think we should also consider making the change to the MethodRetryHandler and deprecating the recoverable exception. The question I guess is how many people have implemented a custom MethodRetryHandler. MikeCreated an attachment id 12025 Patch take 3 Here s my previous patch pesky HttpRecoverableException no more. The patch retains full API compatibility with the 2.0-style method retry handlers. The old handlers should remain fully functional. Let me know what you think OlegLooks good. 1 for me. MikePatch committed. Oleg
