add an interface for plugable dns clients
Currently Httpclient implicitly uses InetAddress.getByName for DNS resolution. This has some drawbacks. One is that the DNS cache of Java per default caches entries forever. So I d like to be able to replace InetAddress.getByName with another DNS client implementation. Suggestion add least add an abstract wrapper interface whose implementations either use the current getByName or do something smarter such as using dnsjava.org if you were to use the implementation as is I guess it is important to do something like    Security.setProperty networkaddress.cache.ttl 300 otherwise long running applications may reach the wrong physical servers if the dns servers changed the ip addresses while the application was running    see also JAMES-679-Dnetworkaddress.cache.ttl 60 definitely belongs into every server startup script along with sensible values for heap non-heap DGC intervals etc. I don t think we are going to introduce new interfaces or abstract classes in 3.x. However you can implement your own ProtocolSocketFactory that uses the DNS implementation of your choice.So are there any plans for such an interface in version 4.x For me it would make sense take the DNS resolving out of the ProtocolSocketFactory cause it s an othogonal problem. For 3.x I think I will write a wrapper for the ProtocolSocketFactory and the SecureProtocolSocketFactory with my own DNS implemetation. So are there any plans for such an interface in version 4.x HttpClient 4.0 has a much more modular architecture compared to HttpClient 3.x. There are several points where one could fairly easily inject such functionality connection operator connection manager protocol socket factory. Probably connection operator interface is already perfectly sufficient. If not we could add another interface specifically for DNS name to IP resolution. Oleg PS Folks generally if you want something happen or happen faster the best way to go about it is rolling up your sleeves and getting it done yourself by contributing a patch If you have access to the JVM and if it s a Sun JVM you can change the DNS provider directly. Check 1 on how to do that. I think the request still makes sense but when changing the DNS provider directly you don t have to touch the code never done it though and I think they changed the SPI interface for 1.6 very unfriendly see bug at 2 . By the way there s a way on Sun VMs to set the TTL as a commandline option 3 . Hope that helps... Cheers Daniel 1 http www.dnsjava.org dnsjava-current doc org xbill DNS spi DNSJavaNameService.html 2 http sourceforge.net tracker index.php func detail aid 1702231 group id 18000 atid 118000 3 http www.rgagnon.com javadetails java-0445.htmlDaniel thx for the interesting hints. Unfortunately we do plan to use it also with 1.6. also as per your ref 1 that sun.net.spi.nameservice.NameService interface only has a   byte lookupAllHostAddr String host method while InetAddress.getByName doesn t expect multiple responses - haven t looked at the implementation details - will it just return the first if there are multiple Interestingly http java.sun.com j2se 1.5.0 docs api java net InetAddress.html getByName java.lang.String doesn t mention the possiblity that there are multiple numeric address for one mnemonic one.ok the below probably answers my previous issue - getAllByName0 probably uses lookupAllHostAddr java.net.UnknownHostException ns3.interway.ch ns3.interway.ch at java.net.InetAddress.getAllByName0 Unknown Source at java.net.InetAddress.getAllByName0 Unknown Source at java.net.InetAddress.getAllByName Unknown Source at java.net.InetAddress.getByName Unknown Source at org.xbill.DNS.SimpleResolver. init SimpleResolver.java 56 at org.xbill.DNS.ExtendedResolver. init ExtendedResolver.java 281 Implemented in SVN trunk Oleg
