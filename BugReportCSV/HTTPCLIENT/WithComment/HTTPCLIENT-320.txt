 Socket Closed IOException thrown by HttpConnection
HttpClient.java was modified in version 2.0 Final in method executeMethod . The call to connection.setSoTimeout used to be in RC3 after the call to connection.isOpen but in the final version the call happens before the call to isOpen . The result of the change is that the setSoTimeout call could throw IOException because of closed socket. I would fix the problem by adding to HttpConnection.setSoTimeout and to other similar methods in HttpConnection an explicit check a call to isOpen whether the socket is closed as the existence of socket object does not guarantee it. I.e the following code     public void setSoTimeout int timeout         throws SocketException IllegalStateException         LOG.debug HttpConnection.setSoTimeout timeout         soTimeout timeout         if socket null             socket.setSoTimeout timeout               would be changed to     public void setSoTimeout int timeout         throws SocketException IllegalStateException         LOG.debug HttpConnection.setSoTimeout timeout         soTimeout timeout         if isOpen             socket.setSoTimeout timeout               Petri I do not quite see how the allegedly offending change may be causing this problem http cvs.apache.org viewcvs.cgi jakarta-commons httpclient src java org apache commons httpclient HttpClient.java r1 1.76.2.2 r2 1.76.2.3 diff format h only with tag HTTPCLIENT 2 0 BRANCH True in 2.0-final connection.setSoTimeout is called before the connection.isOpen check. However in both 2.0rc3 2.0-final the call occurs BEFORE the socket is actually open. I do not quite see how it would be possible for a socket closed IOException to be thrown with 2.0-final but not with 2.0-rc3. Am I missing something What kind of JDK are you using I suspect that this problem can well be JDK specific as I always thought that it was okay to call setSoTimeout on a closed socket. Anyhow in case of HttpClient executeMethod the call to connection.setSoTimeout does seem misplaced. The method should be called only after the connection is open. Ok I think I got it. With the present sequence of calls HttpClient attempts to set the socket timeout before the stale connection check is done. In the RC3 that was not that case. A patch to follow shortly OlegCreated an attachment id 10565 Patch take 1 The patch 1 solves the immediate symptons of the problems in HttpClient class. However I would add the socket stale check to HttpConnection class itself. With the current fix you need always call HttpConnection isOpen before calling any of these methods HttpConnection setSoTimeout HttpConnection getSoTimeout HttpConnection setSendBufferSize HttpConnection getSendBufferSize Petri There s a catch. The stale connection check can be VERY VERY taxing in terms of performance for relatively small payload request response pairs. I really would like to see it used very sparingly. What JDK are you using BTW OlegOleg I am using Sun s J2SE 1.4.1 01 BR Petri Petri We have had quite a few reports of all sorts of stale connection check related problems with early releases of Sun s JDK 1.4.1. If it is an option consider upgrading to 1.4.2 or latest service release of JDK 1.4.1 1.4.1.7 as of writing I still believe that it should be okay to call setSoTimeout on a closed socket. Cheers OlegPatch committed to the 2.0 branch. Oleg
