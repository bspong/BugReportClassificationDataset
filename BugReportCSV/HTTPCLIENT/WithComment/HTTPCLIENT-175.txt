HttpState cannot differentiate credentials for different hosts with same Realm names
It seems that one needs a separate HttpState per client per host from the javadocs if by coincidence or by design more than one host uses the same realm name such as Private then there s an unresolvable conflict as HttpState can only store one set of credentials for a given name... According to Oleg Kalnichevski it is plausible just to extend the HttpState class with additional methods that would require host to be specified along the authentication realm when dealing with credentials. See postings on Commons HttpClient Project mailing list for more info dated 21 03 2003 .Oleg Were you working on this or should I take a look at it I already have some code for this that could be fairly easily updated to the current HttpClient. One question that remains for me is what the new search order should be. The two most obvious answers to me are 1. Expect to always get a realm and a host or null for both and just provide backwards compatibility for setting just the realm. The search order would then be a. realm host b. realm c. null 2. Provide maximum flexibility. I d imagine the search order to then be a. realm host b. host c. realm d. null Though the order of searching for host and realm is quite arbitrary I ve generally found that people know what host they are connecting to better than they know the realm. Also there is the security consideration of sending the credentials to the wrong host. I don t have any particular preference for the order though. Sorry if I missed part of the discussion of this on-list.Adrian I have already started working on this bug. However if you feel like taking the lead just let me know. Credentials matching algorithm is exactly the sticking point. I have been thinking whether we should make an assumption of an authentication realm being related to just one host or should we assume that it could span across several hosts in a domain For instance should myhost.mydomain.com match .mydomain.com when picking credentials for an authentication realm Let me know what is your take on this. Here s how I see the search order code null code host should match any host. code null code realm should match any realm. We start searching by trying to find an exact match realm host . If that yields no results null host should be tried next followed by realm null if unsuccessful. If none of this results in a match default credentials null null should be used. It s not the most elegant or intuitive scheme but it is the only one I can think of which would allow us to stay backward-compatible. OlegOleg I ve moved the code I have over to the latest HttpClient and from memory it matches the search pattern you ve outlined below. It doesn t consider host.domain.com to be the same as .domain.com and I generally feel that doing so would be too much overhead for little gain. We could add this functionality easily enough in the future if requested anyway without breaking compatibility semantic compatibility would be maintained by only matching domains with the . in front so it wouldn t match by accident . Unfortunately the code is at home and I m at work so I won t be able to post it until tonight. The code is simple anyway so feel free to go ahead and just use what you have or write your own in the mean time anyway. Generally though it may be better if you focus on the more technical issues where your level of knowledge of HttpClient is required.Created an attachment id 5585 Patch take 1 for review. Adrian I think it is a good start. At the moment I have two comments to throw at you 1. Since there s no way around adding an extra parameter for the HttpAuthenticator authenticate method why not passing a reference to HttpConnection instead of just a String that represents a host name public static boolean HttpAuthenticator authenticate   AuthScheme authscheme   HttpMethod method   HttpConnection conn   HttpState state We might need additional stuff for instance we might need virtual host name in the future that can be obtained from HttpConnection 2. Lower-cased concatenated host name and realm are inadequate as a realm map key for the reason pointed out by Chris Brown. RFC 2617 does not impose any format for the authentication realm. It s just a quoted string that may contain any sequence of characters. There s no way to differentiate credentials for the admin.apache.org host and admin.apache.org realm under existing mapping scheme with would leave HttpClient open to exploits. The solution to this problem is to use a dedicated class as a mapping key rather than just a string. I already whipped up a simple class called HttpAuthRealm that can cover this role. You ll find it attached to this bug report. It is still quite raw so proceed with caution Otherwise the patch looks good OlegCreated an attachment id 5586 Proposed credentials mapping key implementation Oleg Quite right on point one I ve now changed passing the host in to passing the connection in. Also right on point two I m just finishing off cleaning up the class you sent but have to go to work so will finish it off and post an updated patch tonight. Since I m generally paranoid about legal matters it would be good to get a copy of that class with the Apache license already at the top of it since just adding it myself seems a little dodgy. I m happy to just add it if people are happy with that though. I ve also fixed up a few comments that I d missed in my original patch.Hmm I believe I ve just experienced a solid teaching in basic Java... There were a couple of problems with the class Oleg sent through that took me quite a while to work out. Firstly when I switched to using it the credential matching routine didn t work. Turns out that equals will return true in cases where the hashCodes don t match particularly the case where one object has a null realm and the other doesn t . So the comparison logic has to remain in HttpState by trying a HttpAuthRealm with host and realm then with null realm then with null host then with both null. Secondly my test case for the spoofed realm exploit Chris Brown pointed out still failed. The reason is because HashMap only compares the hashCodes of the objects and never consults equals. The hashCode did not include the realm if it was null and likewise for the domain . This then resulted in new HttpAuthRealm null admin.apache.org .hashCode new HttpAuthRealm admin.apache.org null coming down to admin.apache.org .hashCode admin.apache.org .hashCode which of course returns true. I ve now modified the class to always add the host and realm regardless of whether they are null or not. Thus the comparison for the above case becomes nulladmin.appache.org .hashCode admin.apache.orgnull .hashCode and avoids the exploit. Notice that titling the realm admin.apache.orgnull would not help either since it would become nulladmin.apache.org . Since the whole process is now effectively back to String comparisons I ve removed the use of HttpAuthRealm again and all tests still pass including the spoof vulnerability test .Created an attachment id 5620 Patch take 2. Adrian I believe replacing HashMap class with ArrayList and implementing our own credentials lookup routine would be a better solution. I am afraid there still can be situations when credentials may get sent to a server they are not intended for host realm nullwhatver OlegMike is of course right HashMap does use equals as the final comparison method but if o.equals o1 then o.hashCode o1.hashCode must hold true or it will never get to that stage . Which leaves me baffled as to why the test case was failing. Even more baffling is that when I change the code back to what I thought I had before it all works and all test cases pass. I ll attach the latest patch could someone give it a good testing because I m really quite confused now. In the mean time I think I ought to head to bed.Created an attachment id 5623 Patch take 3. Adrian The patch looks good to me. I have introduced some minor variations basically just a few optimizations and clean-ups. If nobody complains loudly I ll submit the patch on Sunday. The newest patch will be attached shortly OlegCreated an attachment id 5644 Patch take 4 The patch has been applied. The new HttpState API is currently far from being optimal. I frequently mistakenly mix up host and realm parameters to HttpState setCredentials String String Credentials method. Better API is needed in the future. Oleg
