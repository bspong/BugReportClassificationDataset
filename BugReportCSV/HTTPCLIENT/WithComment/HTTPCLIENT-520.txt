MultipartEntity incorrectly computes unknown length
If any Part of a MultipartEntity reports an unknown length -1 MultipartEntity reports an erroneous length value. It should report an unknown length -1 if any of the parts is of unknown length that would cause the POST to be chunked. See http mail-archives.apache.org mod mbox jakarta-httpclient-user 200510.mbox ajax 3ceb3d689c0510250851t2eb78462tbf701135bbf718c9 mail.gmail.com 3eCreated an attachment id 16887 Patch take 1 Please test and review Oleglooks okayThe code looks fine. I can t rememeber the specifics but I thought there was some reason we didn t support chunked multipart request in the past. Has this been tested in production Do servers actually support this Am I just crazy Mike In reply to comment 3 The code looks fine. I can t rememeber the specifics but I thought there was some reason we didn t support chunked multipart request in the past. Has this been tested in production Do servers actually support this Am I just crazy Mike The HTTPCLIENT-164 was consolidated with the HTTPCLIENT-382 at some point of time and eventually lost track of. I am not sure this will ever work in production. It is still better than sending wrong content-length header Oleg Agreed sounds reasonable. Patch away. MikePatch checked in OlegHi all Thanks for your quick investigations. I did not intend to use this feature now but felt compelled to test your patch to show some gratitude However I found the unknown length for Parts to need some more modifications especially in Part.length calling Part.lengthOfData and FilePart PartSource requiring the source.length 0. See attached patches for modification proposals. I did test transferring a 150Mb file using a PartSource wrapping an InputStream to a test servlet using FileUpload 1.0 patched to accept posts of unknown length .Created an attachment id 16898 Part.patch take 2 Created an attachment id 16899 FilePart.patch take 2 Lo•c Thanks for the improvements. While you are at it do you mind writing some simple JUnit test cases for this issue So we know it really works... Cheers OrtwinCreated an attachment id 16900 PartSource wrapping an InputStream Created an attachment id 16901 Test for unknown length FilePart Hi I added a simple test for a FIlePart of unknown length exercising all the proposed changes. But I do not know how to check that the POST is really chunked thge reply seems to be the unchunked request.Created an attachment id 16918 Consolidated patch take 2 If I hear no complaints I ll commit the patch tomorrow 22 00 GMT OlegCreated an attachment id 16919 Fixed patch take 3 The patch assumed the dafault platform encoding to be ISO-8859-1 compatible. Breaks with EBCDIC on zOS for instance. TestPartSource.createInputStream now actually creates a new input stream. Just to get the semantics right even if it s a test case. Any retries would have failed before In reply to comment 15 TestPartSource.createInputStream now actually creates a new input stream. Just to get the semantics right even if it s a test case. Any retries would have failed before I had overlooked the retries. What if my InputStream cannot be recreated It seems to me that Part.isRepeatable should be abstract and implemented only in StringPart returning true and FilePartSource returning true allowing for a notRepeatable InputStream to be wrapped by a PartSource. Otherwise a new Part must be fully implemented.Patch checked in OlegCreated an attachment id 16938 Full patch including refactored isRepeatable This patch consolidate all previous patches and changes isRepeatable to be abstract in Part implemented in StringPart delegated in FilePart to PartSource implemented in ByteArrayPartSource and FilePartSource. This allows to wrap non-repeatable InputStreams with a PartSOurce and correctly indicating repeatability.Lo•c We can not change the API at the current stage of the release process. We may consider the Part API changes for 4.0. You may want to open a separate bug report for this because this one is already resolved. Ortwin In reply to comment 19 We can not change the API at the current stage of the release process. We may consider the Part API changes for 4.0. That is highly unfortunate as it either requires Part.isRepeatable to be overridden in a subclass or PartSource.createInputStream to be made always repeatable. It does not simply allow non-repeatable InputStreams to be simply wrapped by a PartSource. You may want to open a separate bug report for this because this one is already resolved. Done. Opened HTTPCLIENT-525.
