BasicCookieStore.getCookies returns non-threadsafe collection
BasicCookieStore.getCookies is a simple method. It s synchronized and it returns an unmodifiable wrapper around the underlying cookie list. If the caller were to then iterate over it as another thread were to manipulate the cookie list via BasicCookieStore this would create a thread un-safe situation because both threads aren t doing their reading writing with the same lock the reader doesn t even have a lock . I suggest fixing this by using CopyOnWriteArrayList or by making a defensive copy in getCookies This issue might apply to some of the other basic implementations of some of the interfaces but I haven t checked.By the way I was looking at this simple class a bit more and I think it could be made even simpler. The code shows that the cookies are treated like a Set yet strangely it doesn t use a Set internally. Use a TreeSet wrapped in Collections.synchronizedSet and then you don t need to mark each method as synchronized. Perhaps in a couple places you ll need to synchronize on the set. You still need the defensive copy for getCookies . If you want to avoid that defensive copy you can use a ConcurrentSkipListSet instead of the synchronized TreeSet.TreeSet might indeed be a better underlying data structure for this class. I do not see much of a problem with synchronisation on class methods though. Anyway we happily accept patches. OlegAttached is the patch addressing my comments. There s no longer a need for an instance of the CookieComparator to be a field value so I removed it. I also saw that toString should be synchronized. I also removed the simplistic no-arg constructor since Java will generate the same thing from field initializers. I hate needlessly verbose Java code it gives the language a bad reputation.Patch committed to SVN trunk with some minor tweaks. The problem also fixed in 4.0.x branch. Many thanks David for contributing the patch. Oleg
