User interaction for authentication
Some actions require user input. Like forwarding to another host or retrieveing authentication credentials. Should have some way for clients to setup listeners for such events so that they can be handled on the fly. No gui programatic only.snippet of David Hay s posting to the HTTP client mailing list I would suspect that any authorization callback handler would need to pass along the host port realm authorization scheme and possibly the status code so we d know if this was a proxy authorization or not . Just to give an implementation idea what I currently have is an iterface called AuthorizationPrompter that has a single method     public Credentials getCredentials String realm String host I can then register implementations of this with my custom HttpState subclass. Then my HttpState subclass I have the following code     public synchronized Credentials getCredentials String realm String host              Credentials credentials super.getCredentials realm host         if credentials null             credentials promptForCredentials realm host             if credentials null                 setCredentials realm host credentials                               return credentials      there s a similar method for getProxyCredentials. Of course the if credentials null should probably live in the calling method but that s the idea. Hello David don t try to guess what the handler will need to know. That s what we did in OpenCard and failed with. It wasn t long until someone required something we hadn t thought of but the interface was already defined and could not be changed anymore. Your suggestion     public Credentials getCredentials String realm String host looks pretty much that way too. Even if you add port and authorization scheme and possibly the status code as additional arguments. Rather define a class that holds such information and can be subclassed for new authorization schemes should someone choose to invent one. Like class AuthSpec attributes type host port realm HttpMethod public Credentials getCredentials AuthSpec authspec   if type unknown throw UnknownAuthenticationTypeException I wonder whether host vs. proxy authentication should be distinguished within the AuthSpec object as a separate boolean flag or by using two different methods to get credentials for the host or proxy respectively. The existing class HttpAuthenticator uses distinct methods and so does HttpState. It s probably best to stick with that decision. regards   Roland Patch for the HTTPCLIENT-306 should provide adequate infrastructure to make interactive authentication possible. OlegCreated an attachment id 10054 Patch take 1 Changelog interactive authentication support another bug fix in NTLMScheme class InteractiveAuthenticationExample demo app At the moment I opted for keeping credentials callbacks in a static global class. I am not sure that this is the best solution but at the moment I lack better ideas. Do authentication callbacks make sense on per HttpState basis HttpClient HttpClientParams I felt that credentials callbacks should be global in order to avoid multiple authentication dialogs popping up in multithreaded applications which in my opinion would be a bit confusing. At the same time I can well imagine that some may feel differently. Please let me know what you think. Oleg Hi Oleg I would leave it to the implementor of the callbacks to make sure there is only one dialog on the screen. What about a multiuser-browser that is running multiple browser windows for different users on different X Servers I guess there would be an instance of HTTP Client for each user but we cannot know for sure. Also one might have some default GUI handlers installed but want to execute individual methods with other non-GUI callbacks in place. HttpState sounds like a good place to me. Especially if the callbacks are part of the hierarchical parameters as you suggested. Is it possible to modify the global defaults parameters via API I don t remember. cheers   Roland Roland I agree with you that the current design may be too contraining. I just thought credential callbacks had in fact nothing to do with HTTP state. I also did not feel like making HttpState class coupled with AuthScheme interface. Folks please speak out what should it be the home for the credential callbacks HttpState or HttpClientParams Cheers OlegA subtle distinction argh I think it breaks down like this HttpState - properties of the HTTP communication cookies authentication info HttpClientParams - behavioral characteristics desired by the client - timeouts spec conformance resource usage Based on those criteria I think I would choose HttpClientParams. How authentication is handled would seem to be a behavioral characteristic desired by the client. But perhaps my categorizations are not correct I d consider the callbacks a part of the authentication info hence HttpState... - May I throw in the HttpMethod level as another choice I think this patch goes to far. Currently credentials are stored inside HttpState. This makes it very flexible to use HttpClient either from stock or create your own methods or even replace the HttpClient completely. So I would rather keep HttpState the place where to ask for credentials from within HttpClient. What we need and what the patch already contains is a callback to retrieve credentials. But the CredentialsPrompter beeing a monostate limits the flexibility of the credentials retrieval. Whether the prompter is a single instance for multiple HttpClients or if there are multiple instances should be a decision of the user. I suggest not to implement the CredentialsPrompter. Instead just provide HttpState setCredentialsCallback CredentialsCallback and change the get Proxy Credentials methods to use the callback. We can still leave the credential setters in for convenience and handle them through a default implementation of the callback. The advantages are   user can easily choose which callback to use for which HttpClient instance   preemptive auth does not break   simpler code   less API change I will provide a patch in a minute to explain my ideas.Odi CredentialsPrompter has been ruled out already. But I just have some reservations about HttpState being the best place for this kind of stuff. From the conceptual standpoint credentials callbacks do not seem to have much to do with the HTTP state. Besides I am kind of hesitant to make HttpState coupled with AuthScheme interface. But since the majority seems to be leaning towards HttpState solution I do not really mind. We can revisit this problem as a part of 4.0 API re design. Do you want to take this patch over or shall I continue working on it OlegCreated an attachment id 10141 take2 Just added the patch against CVS HEAD. When you look at it you can see that it makes code much cleaner. The inner class could actually be extracted as well to make HttpState even lighter. The patch cause surprisingly few changes in the rest of the code.Odi I think it is a better approach. I especially like the idea to abstract away all the credentials persistence retrieval logic. There s one catch though. The patch in its current form simply does not attempt to provide any recovery mechanism for authentication failures leaving the user without any possibility to re-authenticate if given credentials are invalid. I believe there has to be a way to discard the existing credentials and prompt the user for new ones which basically brings us back to my patch albeit without global CredentialsPrompter. If you like I can take your patch as a starting point and add missing functionality from mine. Oleg Odi Roland et al. Here are a few quick thoughts.. In regard to the credentials I think they should remain in the HttpState. In some sense it is acting as a cache for known credentials. I agree with Oleg and I think we should move towards a single set of credentials based upon host port and perhaps scheme. I see no need to keep host proxy credentials separate. As far as the location for the CredentialsProvider CredentialsCallback I prefer the params. While I see the logic of keeping it with the credentials in the HttpState I still think the credentials are really just held there as a cache. In general I imagine someone would just want to set the credentials provider globally either to one that prompts the user or one the default that does nothing. Once credentials have been provided and successfully used they can be added to the HttpState and reused later. The params also provide more flexibility in that they can be configured globally and where needed they can also be used on a more fine grained level. What do you think MikeDarn. It looks like we all agree to disagree. Let me try to find a common ground unless we want to find ourselves in a classical design impasse. 1 Odi your idea to abstract away the credentials persistence stuff is great but possibly it is too radical for the 3.0. Let us revisit this problem in the course of 4.0 API redesign. Can we stick to the concept of HttpState being a cache of objects representing HTTP session state for the 3.x release Let s face it there are uglier things in HttpClient 2.0 than HttpState class 2 HttpState as a cache in its present form does not seem to be the ideal placeholder for the credential callbacks. Can we all live with HttpParams as an alternative for the 3.x release. Again it may change in the 4.0 3 Reasons for keeping proxy and host credentials distinct are purely emotional perceptional. Usually users could not care less if they are authenticating against a proxy or target host as long as they are presented with a sane name for the authentication realm. For instance IE 5.x does not differentiate between proxy host authentication. Getting rid of separate repository for proxy credentials will GREATLY simplify authentication code in HttpMethodDirector. I think this is well worth it. Besides may I suggest to have a boolean flag proxy yes no added to CredentialsCallback interface to keep everyone happy Oleg Hi Oleg the boolean flag should indeed be sufficient. Is there still a way to set default credentials for both proxy and host if both are kept in the same namespace I can very well live with the callbacks in the HttpParams. My mistake here I thought the discussion was about whether to put them in params for the state or for the client. Obviously there are no params for the state - stupid me. In that case let me suggest again to add them at the method level with a fallback to the client and global settings. cheers   RolandCreated an attachment id 10158 Patch take 3 Folks This patch is based on the patch take 1 with the following changes Global CredentialsPrompter class has been removed Authentication callbacks moved to HttpMethodParams class Authentication realm key is now comprised of host name port realm name and authentication type Please let me know what you think. I know that test cases are lacking. As soon as the API stabilize a little I ll provide test cases for new functionality using Odi s shiny new simple HTTP server simple proxy framework Oleg Overall I think the design is good now. I have just a few comments on some of the specifics.  - I would prefer the name CredentialsProvider to CredentialsCallback. Though callback works I think provider is a little more standard.  - Also I am wondering if the CredentialsCallback.getCredentials method should be changed to accept an instance of HttpAuthRealm instead of the scheme host and port.  - The callback param is currently assumed to be a Collection but I wonder if this is really necessary. It seems like just a CredentialsCallback should be sufficient especially since it can be configured on a per method basic. I haven t had time to look closely at the HttpMethodDirector authentication logic but I think some test cases will take care of that. MikeCreated an attachment id 10165 Patch take 3 Oopsie. The patch is in fact the take 4 . Mike I agree with all your points. However I feel that CredentialsCallback getCredentials taking AuthScheme as a parameter buys us a little more flexibility. For some authentication schemes parameters other than host port realm and auth type may be of some use like domain for NTLM scheme . OlegOleg Good point. Code-wise everything looks good to me now. With a little CredentialsProvider Javadocs it is good to commit. MikeCredentialsProvider javadocs added. Patch committed. Oleg
