Memory leak in MultiThreadedHttpClient caused by bad .equals 
Note I have 2.0 release candidate 1 I m not sure which version this translates into. The bug is definitely present in the current source. MultiThreadedHttpClient uses the following code Look for a list of connections for the given config HostConnectionPool listConnections HostConnectionPool     mapHosts.get hostConfiguration if listConnections null      First time for this config     listConnections new HostConnectionPool     listConnections.hostConfiguration hostConfiguration     mapHosts.put hostConfiguration listConnections The hash map relys on HostConfiguration s .equals to resolve equality determine if there is a mapping for the configuration. HostConfiguration has the following in it s .equals method if protocol.equals config.getProtocol     return false . . . and Protocol has if obj instanceof Protocol                  Protocol p Protocol obj                  return         defaultPort p.getDefaultPort          scheme.equalsIgnoreCase p.getScheme          secure p.isSecure          socketFactory.equals p.getSocketFactory However there is no .equals method in any of the ProtocolSocketFactory objects and there isn t any note in the interface about the necessity of the .equals method.Hi Jesse If the ProtocolSocketFactory does not implement equals the object identity is used. In most cases this has worked since the socket factories are usually singletons. After looking at the code though it is possible that more than one instance of DefaultProtocolSocketFactory and SSLProtocolSocketFactory could be created. It seems that we have a couple of options here to fix this  - change Protocol to not rely on ProtocolSocketFactory.equals .  - add equals methods to the socket factories  - ensure that the socket factories are singletons My preference is to do 2 3. What do others think MikeI was experiencing this while using the GetMethod String constructor which calls the HttpMethodBase constructor which constructs a new HostConfiguration each time. I think that the multithreaded client won t work properly unless you use separate new GetMethods like this. Anyway a usage like this would break unless equals was added. I vote 2 3 where possible.Hello Mike since socket factories can be provided from outside the HTTP Client itself I d rather not require them to be singletons. You couldn t enforce it anyway. 2 seems the best approach to me. cheers   RolandI agree with Roland about the Singleton issue. A class beeing a Singleton is an implementation detail and must can not be enforced with an interface definition.Hi Roland since socket factories can be provided from outside the HTTP Client itself I d rather not require them to be singletons. You couldn t enforce it anyway. 2 seems the best approach to me. I agree that requiring them to be singletons is not the ultimate solution since there is no way to enforce that. Unfortuantely there is also no way to enforce that equals works correctly as well. My plan yet to be implemented is to do 2 3 for all of the various HttpClient classes and to add javadocs suggesting that all implementors do the same. How does that sound Mike My plan yet to be implemented is to do 2 3 for all of the various HttpClient classes and to add javadocs suggesting that all implementors do the same. How does that sound Sounds good and ambitious. A review of Object equals method in all HttpClient classes is going to be quite an undertaking. Let me know if you need a helping hand. OlegOleg To clarify my plan is to revisit the equals methods for all HttpClient classes related to this problem socket factories etc. . It may eventually extend to all classes but that is a separate problem I think. MikeCreated an attachment id 10078 Patch 1 Here s a first stab at this one. Let me know what you think. MikeHi Mike Sorry for answering late I ve been offline for a while. Your implementation beats all concerns I would have raised about deriving classes from singletons. I like it. cheers   Roland Mike the patch looks good. Can you take care of ProtocolSocketFactory classes in the contrib package too please OlegRoland Oleg Thank you for looking the patch over. I will make the changes to the ProtocolSocketFactory classes in contrib and commit. MikePatch applied to HEAD. Should we put this is for 2.0 as well MikeI think so. OlegPatch applied to 2.0. Mike
