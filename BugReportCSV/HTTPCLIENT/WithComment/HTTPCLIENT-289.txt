MultiThreadedHttpConnectionManager daemon Thread never GC d
One of my colleagues was invoking HttpClient by way of a loop something like this for int i 0 i 300 i     GetMethod method new GetMethod http cvs.apache.org viewcvs jakarta-commons httpclient     try         HttpClient httpClient new HttpClient new MultiThreadedHttpConnectionManager         httpClient.executeMethod method         byte bytes method.getResponseBody      finally          always release the connection after we re done         method.releaseConnection      He s in the process of revising his code so that he doesn t do this loop which other developers might point out as a non-optimal use but along the way he discovered that the daemon thread that the MultiThreadedHttpConnectionManager makes does not get garbage collected. Of course the connection manager itself is also never gc d. While I think we can avoid this problem in our code in the more general case clients may not actually be able to control the number of MultiThreadedConnectionManagers they create which could eventually cause problems. This makes me think the problem is deserving of a patch. We found this problem with 2.0rc2 although presumably it also exists with the CVS HEAD. Patch to follow.Created an attachment id 8862 test case and code change. I m not entirely satisfied with my previous patch as it should be possible for the ReferenceQueueThread to detect that it is no longer needed and exit on its own. It strikes me that that approach would actually require two rounds of gc to actually collect the thread - one to indicate to the ReferenceQueueThread that the manager had been gc d and one to gc the thread itself. Absent that kind of logic I ve put an explicit shutdown call on the connection manager. You can see the bug in action if you comment out the line in TestHttpConnectionManager.testDroppedThread that reads mthcm.shutdown then run the test cases. Created an attachment id 8870 Patch 2 Attached above is a different take on this problem. Instead of worrying about manually killing the reference thread I just made it so there is only one thread. Please try it out and let me know what you think. MikeMike Alas due to craziness in my schedule I ll not have a chance to look at this more closely until late Monday or Tuesday at the earliest. One suggestion though is that I d like to see a test case. The test case could wrap each of the connection manager and possibly the HostConfiguration with a WeakReference and then after forcing a gc make sure that the references are null. That the MultiThreadedHttpConnectionManager was never garbage collected was our first indication that something was awry.... My patch that put a name on the ReferenceQueueThread. I did that so that it is easier to identify and for the most part ignore in a debugger. I m hoping any change to fix this bug will include that. I like the idea of a single monitor thread Thanks for looking at this.Created an attachment id 8910 Patch 3 Hi Eric Excellent suggestions. This latest patch adds a thread name and a test. MikeI inspected the code carefully and didn t see any issues so I m happy with the second patch that Mike submitted. Hopefully neither of us missed anything On a slightly unrelated note it occurs to me that the logic of MultiThreadedHttpConnectionManager.removeReferenceToConnection would be a lot simpler if the HttpConnection could optionally provide a weak reference to itself so that the remove process was a simple get on the weakref to the connection. Mind you if clients are using releaseConnection properly the performance difference would be miniscule but might matter slightly more with many instances of the connection manager. Too many ideas too little time.... Whatever - I don t know as the above change is useful it was just a thought that occurred to me.Created an attachment id 9047 Patch 4 Hi Eric Yes I agree that it could be a potential performance problem. Here is another attempt at this one. Please let me know what you think. Thanks MikeCool.Any more thoughts on this one or should I apply MikeIf there are no more comments on this one I ll apply it in the morning. MikePatch applied to 2.0 and HEAD. Mike
