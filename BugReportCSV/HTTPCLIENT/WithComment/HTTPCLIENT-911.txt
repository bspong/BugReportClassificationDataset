Support underscore in domain name or provide better exception
When calling on HttpClient.execute with a url that contain underscore you get NullPointerException. Tracing it down show that java.net.Uri complains that it is illegal name. Which is true according to the RFC. But it seems that most browser allow it and some companies support it. I think HttpClient should either support underscores or atleast provide a better exception. You are referring to underscores in DNS names. Yes they are illegal. And yes MS allows them for Windows host names which doesn t make them any more legal in DNS. Anyway the NPE is ugly and we should probably issue a better exception.Are you sure you get NullPointerException not IllegalArgumentException Can you post the exception stack trace OlegStack trace java.lang.IllegalArgumentException Host name may not be null     at org.apache.http.HttpHost. init HttpHost.java 83     at org.apache.http.impl.client.AbstractHttpClient.determineTarget AbstractHttpClient.java 497     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 487     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 465     at org.apache.shindig.gadgets.http.BasicHttpFetcher.fetch BasicHttpFetcher.java 281     .... Oleg You are right about the exception it is the message that through me off the cause of the problem. Are you sure this has anything to do with the underscore in domain name The following test throws a UnknownHostException for me HttpHost targetHost new HttpHost www.what ever.com 80 http DefaultHttpClient httpclient new DefaultHttpClient BasicHttpContext localcontext new BasicHttpContext HttpGet httpget new HttpGet HttpResponse response httpclient.execute targetHost httpget localcontext System.out.println response.getStatusLine HttpEntity entity response.getEntity if entity null     entity.consumeContent Exception in thread main java.net.UnknownHostException www.what ever.com at java.net.PlainSocketImpl.connect PlainSocketImpl.java 177 at java.net.SocksSocketImpl.connect SocksSocketImpl.java 366 at java.net.Socket.connect Socket.java 520 at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket PlainSocketFactory.java 123 I suspect you may be trying to execute a request with a relative request URI in which case the IllegalArgumentException you are getting seems reasonable. Oleg Try this     HttpClient client new DefaultHttpClient     HttpUriRequest httpMethod new HttpGet http 0.test file.com data     org.apache.http.HttpResponse response client.execute httpMethod Oleg thanks for the quick responds. Actually doing your way - by using the overloaded execute with the request already parsed seem to work - So it seems that underscores are already supported as long as java.net.Uri is not used on the way... I might just solve it this way then. Thanks Ziv The cause of the problem is a very stupid behavior of java.net.URI class. Apparently the URI constructor quietly ignores the host it considers invalid and simply uses null instead. I am attaching a patch that should help handle the situation a bit more gracefully. Oleg DefaultHttpClient httpclient new DefaultHttpClient URI uri new URI http 0.test file.com data System.out.println Target scheme uri.getScheme System.out.println Target host uri.getHost System.out.println Target port uri.getPort HttpGet httpget new HttpGet uri HttpResponse rsp httpclient.execute httpget HttpEntity entity rsp.getEntity System.out.println System.out.println rsp.getStatusLine if entity null     System.out.println EntityUtils.toString entity Target scheme http Target host null Target port -1 Exception in thread main org.apache.http.client.ClientProtocolException URI does not specify a valid host name http 0.test file.com data at org.apache.http.impl.client.AbstractHttpClient.determineTarget AbstractHttpClient.java 638 at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 624 at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 602 at tests.ClientExecuteDirect.main ClientExecuteDirect.java 58 Patch checked in OlegFYI - I don t think it totally solve the problem. There is a similar case in parsing the results in DefaultRequestDirector.handleResponse I get NPE in new HttpPost because the host is null.             URI uri this.redirectHandler.getLocationURI response context             HttpHost newTarget new HttpHost                     uri.getHost                     uri.getPort                     uri.getScheme Thanks Ziv On Wed Feb 10 2010 at 1 50 AM Oleg Kalnichevski JIRA Added a check for the host being null OlegJust come across this issue myself. second level domain name may not use underscore but there are websites in real life use underscore in their subdomain and it doesn t make sense if we can t make connection to them with a Java library while people can connect to it with browser. Ideally httpclient should just handle those URL with underscore maybe we shouldn t rely on URI. reference http bugs.sun.com bugdatabase view bug.do bug id 6587184 added HTTPCLIENT-970Current code does not work if there is a colon in the path but no colon in the host part. This appears to have been caused by the following change http svn.apache.org viewvc httpcomponents httpclient trunk httpclient src main java org apache http impl client AbstractHttpClient.java r1 980937 r2 980936 pathrev 980937 which was presumably intended to improve underscore support The method currently has no unit tests - previously it was simple enough not to need them but now I think they are needed. This requires changing the method from private to package-protected - which should not cause any problems as the method does not change any external fields. Unlike URI.getHost the determineTarget method also does not handle the authority user pass part of the URI. Since the code now tries to allow for short-comings in the java URI implementation perhaps it deserves to be promoted to a public utility routine.Sebastian This bit of code comes from HTTPCLIENT-970 which I committed it by mistake with a completely unrelated change set. It must be removed immediately. OlegOK I ll remove it. It looks as though getAuthority can be used even if the host part contains an underscore. So one approach might be to use getHost as before if that returns null then use getAuthority and strip off up to the if present. At least if we use getHost when we can there will be fewer chances of bugs... Appears now to be fixed.
