httpClient failed to reconnect after keep-alive connection timed out
Description When using httpClient with https tunnelling througha proxy server after keep- alive connection timed out on server side. The httpClient code was unable to establish the connection again. Cause The HttpMethodBase.processRequest s retry loop retries the connection without going through the CONNECT request to the proxy server. Our proxy server returns 407 error code. In case of tunnelling connection proper reconnect should be done by first doing the CONNECT sequence to get authenticated throught the proxy. Temp fix and Work around We implemented some work around to do the retry from the application layer. In order to detect the situation we have to rely on the error message contained in the HttpRecoverableException. We are checking the text Connection aborted by peer socket write error . We also have to modify the HttpMethodBase code to throw the HttpRecoverableException out to the application.Created an attachment id 5963 Temp fix for checking Connection aborted by peer socket write error and throw exception HttpClient does not support reusing tunneled HTTPS connections. This is a known problem. This problem was fixed post alpha-3 so you will need to get a nightly build for this one. MikeMike I have the latest code from nightly build now. It looks like that the tunnelled https connection is now being closed each time. We definitely need keep-alive in our application connecting each time would be too slow for our app . Will the final release of httpClient support tunnelling https connection Bin the wire log would be very helpful OlegCreated an attachment id 6055 wire log showing each POST follows CONNECT Oleg The wire log was chopped off from the top. But it has enough transactions in it and it shows that each time the complete CONNECT POST sequence is performed. That is due to the httpClient code decides to close the tunnelled connection each time.Yes as mentioned in some previous emails HttpClient does not support tunneled HTTPS presistence. This is due to a design flaw that keeps HttpClient from correctly re-establishing a connection after timeout. MikeMike This is not about connection timeout. According to the log tunneled connection gets closed after each request response exchange. I am currently trying to reproduce the problem on my development system. OlegTunneled HTTPS connections are setup so that they only get used once. This appears to be what is happening. After the NTLM request response exchange the method is executed and the response is read. At this point HttpConnection.releaseConnection is called and it explicitly closes itself because is tunneled HTTPS. MikeI thought the only problem was that HttpClient due to the current design could not properly retry requests over tunneled connection as CONNECT can t be cleanly re-issued . But what s the reason for always closing tunneled connections OlegThis purpose was to fix this problem by not allowing these connections to be reused. We decided I believe in the IRC meeting that this was the way to go. ÊThe reason being that since tunneled HTTPS connections cannot be reused reliably they should not be reused. The main problem case WAS when a method got a previously used connection that had timed out and tried to use it. This would cause the method to fail with the only feasable solution being to retry in HttpClient. Since we were waiting to push the retry logic into HttpClient this was also put off. Thus the fairly lousy solution. The reason I say WAS above is that I think we can fix this now. I think now that we have the ability to test for stale connections this can be handled by HttpClient. HttpClient is currently calling HttpConnection.isOpen in execute which should preemptively take care of stale tunneled HTTPS connections. I believe that if we remove the force close in HttpConnection.releaseConnection we may have a viable solution. At least for people who are using HttpClient not the connections directly and also have JRE 1.4 or better. MikeSorry Mike. You are right. I guess I am getting old. It s your call if it is safe to relax somewhat the restriction on tunnelled connection pooling. Oleg PS We HAVE GOT to move past 2.0 as soon as possible.No worries. Things have been getting pretty complicated lately. I am having trouble keeping track of all of the various HttpClient nuances. We definitely need to push on past beta-1 very soon. This interim period has been taking way too long. I will make a few tests without the force close just to make sure that it works. ÊMy only worry is for the people who are using connections directly. It will work for them assuming that isOpen is being called before the method is executed. Laura do you have any thoughts MikeCreated an attachment id 6061 remove force connection close patch The above patch removes the force close in HttpConnection.releaseConnection when using tunneled HTTPS connections. As expected this correctly allows persistent connections when using JRE 1.4 or later. As previously discovered pre 1.4 implementations of JSSE do not correctly handle the isStale read test. Bin I don t know how useful this will be for you as it appears you are using 1.3.1. Please give it a try though just to be sure. Laura I m singling you out just because I know your app uses connections directly I hope you don t mind I would appreciate any feedback you might have assuming that you are using tunneled HTTPS. Thanks MikeMike I tested the patch a bit. It works fine with JDK 1.4 for me and does not with 1.2 which is expected . Once we get Laura s consent I d call it the end of the story. This is as good as it gets for 2.0 release in my opinion. OlegReleated issue with MethodRetryHandler We are trying to use the MethodRetryHandler to control when the httpClient should retry after HttpRecoverableException. We run into two issues 1. One of our criteria of retrying depends on if the connection is tunnelled. We will need to have access to the HttpConnection object to know that using isSecure isProxied combination . Are there any other ways to get that information from HttpMethod If not can httpClient code pass the data to retryMethod 2. It would be mroe convenient to have a base class implementing the MethodRetryHandler so app can call the super for cases it doe snto want to override.Sounds reasonable. I will add this tonight. MikeCreated an attachment id 6113 retry handler patch This patch extracts the default retry handler to a new class and adds the connection as a new parameter. MikeLooks good to me. OlegPatch applied.
