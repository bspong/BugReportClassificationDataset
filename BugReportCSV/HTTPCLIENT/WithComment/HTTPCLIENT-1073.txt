cache module generates exceptions for non-compliant responses without consuming response bodies
In the ResponseProtocolCompliance class the caching module checks the incoming origin response to attempt to make it compliant with RFC2616. However if there are instances where this is not possible it currently throws an exception without consuming the origin response body this causes a connection leak if the general try..catch..finally pattern documented on the HttpClient interface Javadoc is followed. I believe the correct fix for this problem is one of a document the proper workaround for the client to avoid the connection leak perhaps using HttpUriRequest abort b have the caching module consume the response body if present before throwing the exception c don t throw an exception here and just treat the noncompliant response as cache-invalidating and uncacheable. I think my personal preference is c and will start working on a patch to that effect. The attached patch implements option c above. I ll commit it tomorrow if there aren t any objections to this approach. Ok after sleeping on it I think the fix warrants a little deeper analysis than the patch I posted. For example if the origin response is a 401 missing the WWW-Authenticate header this is strictly non-compliant but shouldn t affect the caching module and a client not using the caching module would have to deal with this anyway so this compliance test ought to be removed. I ll check the other ones there are only about 4 unit tests and associated code.Option C sounds good enough to me. Please do not forget to merge changes you would like included in the 4.1.2 release if it ever happens to 4.1.x branch. Oleg Oleg will do on the branch merge.
