Allow redirects between hosts and ports
Redirects to different hosts ports and protocols are currently prevented. Historicly HttpMethodBase.checkValidRedirects is used to prevent these types of redirects due how state information was being managed in the connection. Much has changed since then. We should relax the check and allow for redirects Êbetween hosts and ports. Redirects across protocols should not be considered at this time as there are other issues related to security that is best left up to the user of HttpClient.Fix is not feasible without breaking existing API. HTTPCLIENT-219 has been marked as a duplicate of this bug. Mike I think you were going to take this one over. So I reassign the report back to the commons-httpclient-dev jakarta.apache.org OlegThank you. MikeCreated an attachment id 7445 Patch 1 Here s a first attempt at this refactor. This patch is not complete but I would like some input before I do any major polishing. Here is what s new Ê- Retry and redirect logic have been moved to a new class HttpMethodSession. Ê- Header getResponseHeaders String has been added to HttpMethod. Ê- Support for locking has been added to HttpConnection. This allows the HttpMethodSession to hold on to connections between redirects retries. Ê- HttpMethodBase.used is now being ignored. Any thoughts on this method. Should this just be depreacted Ê- realm and proxyRealm have been deprecated in HttpMethodBase as they are now handled in HttpMethodSession. These probably need to be faked. Ê- HttpMethodBase.getRecoverableExceptionCount has been deprecated. This probably needs to be faked. Ê- a test NoHostHttpConnectionManager has been added. Ê- all of the various tests executing methods directly have been updated. Note Êonly those that failed have been updated this needs to be completed. Ê- TestNoHostBase has been added. What has not been done Ê- ConnectMethod support has not been added. This is my next task. Ê- Robust comments and logging have not been added. MikeI REALLY like the way things are shaping up. These are those few comments that I have at the moment In particular I like the idea of HttpMethodSession maybe just HttpSession . I would make an interface out of it however as in the future we may give users an option to provide a pluggable custom implementation of the HTTP session. I would not deprecate used flag as yet. I helps prevent the user from executing the same method multiple times and getting ambiguous results. In the future 3.0 this flag should disappear along with the entire concept of method recycling. I would pass state connection manager as HttpMethodSession s constructor parameters. We then later may completely do away with those setter methods setSoTimeout setConnectionTimeout setHttpConnectionFactoryTimeout and so on as I think we should be using a hash map to store HttpClient preferences instead of just keeping on extending APIs with all those numerous options. I ll expand later on this point when we get to discuss the new preferences architecture. I would also provide Header getRequestHeaders String at the very least for the sake of API completeness. if method instanceof HttpMethodBase return HttpMethodBase method .getMethodRetryHandler else return new DefaultMethodRetryHandler IMHO things like that should strongly hint at some design improvements. Do you think there is way doing without that ugly HttpMethodBase cast I would suggest adding getMethodRetryHandler to HttpMethod interface if there are no other alternatives OlegI added the recoverableExceptionCount for test case purposes. I think deprecating it or removing it - are we working on 3.0 would be OK and the deprecated implementation could return a constant. The only question here would be whether the corresponding test case actually tests the relevant code. Alas I don t have time this week to look at the patch so the above is just based on your comments. In particular I like the idea of HttpMethodSession maybe just HttpSession . I would make an interface out of it however as in the future we may give users an option to provide a pluggable custom implementation of the HTTP session. I agree the name is not good. HttpSession is already is use in javax.servlet so I would suggest against that as well. Any other ideas We could certainly move HttpMethodSession to an interface. I would like to wait a little on that though. I imagine it will be changing quite a bit for a while and I do not want to expose something so volatile. I would not deprecate used flag as yet. I helps prevent the user from executing the same method multiple times and getting ambiguous results. In the future 3.0 this flag should disappear along with the entire concept of method recycling. The problem is that this also keeps HttpMethodSession from executing a method more than once. We could add a hack to HttpMethodBase to override used in HttpMethodSession but that would be a little nasty. I would pass state connection manager as HttpMethodSession s constructor parameters. We then later may completely do away with those setter methods setSoTimeout setConnectionTimeout setHttpConnectionFactoryTimeout and so on as I think we should be using a hash map to store HttpClient preferences instead of just keeping on extending APIs with all those numerous options. I ll expand later on this point when we get to discuss the new preferences architecture. My impression was that preferences would mostly be just for default values. Do you envision the ability to create a custom set of preferences for each method execute My preference would be to leave these alone for now until we know what the preferences will look like. If we keep HttpMethodSession hidden for now we won t have to look at the ugliness. I would also provide Header getRequestHeaders String at the very least for the sake of API completeness. I agree. if method instanceof HttpMethodBase return HttpMethodBase method .getMethodRetryHandler else return new DefaultMethodRetryHandler IMHO things like that should strongly hint at some design improvements. Do you think there is way doing without that ugly HttpMethodBase cast I would suggest adding getMethodRetryHandler to HttpMethod interface if there are no other alternatives Yes this is not pretty. There are a number of places where things are accessible from HttpMethodBase but not HttpMethod. In general we have 3 options for these cases 1 do a nasty hack like above 2 move the methods to HttpMethod 3 deprecate remove the code So far I have been leaning towards 1 and 3 so that HttpMethod does not have to be changed too much. Having said that I wonder if anyone is implementing HttpMethod directly. Especially when considering how complicated HttpMethodBase is. Though I understand the general appeal of interfaces I wonder if the HttpMethod interface is really necessary. I do not expect that we will remove HttpMethod any time soon but I wonder if we should worry about making additions to it. Mike If my understanding is correct without looking at the source code the purpose of HttpMethodSession is to execute several methods or one method multiple times in order to follow redirects. So how about HttpMethodChain or HttpMethodSequence Or giving it a more personal name like HttpMethodChainer or HttpRedirector As for the used flag does HttpMethodSession have to execute the same HttpMethod object without recycling If so you could add a reset or redirect URI method that resets the used flag and performs the other adjustments required to execute the redirect. Or would it be possible to simply recycle the method just as an application would have to do it To keep the getters and setters for options out of a class I like to introduce XxxOptions classes. HttpClientOptions and HttpMethodOptions jump into my mind here. All that remains in the original class is one getter and setter for the options. When overdesigning one might define an interface with just the getter methods and a default implementation with getters and setters. Just to point out that the class will not modify the options passed to it - RolandI like HttpRedirector but it is not quite representative of the class functionality which besides redirects is supposed to be handing authentication retries. How about HttpMethodDirector OlegOops... I originally sent this to the mailing list but meant to post is here. If my understanding is correct without looking at the source code the purpose of HttpMethodSession is to execute several methods or one method multiple times in order to follow redirects. So how about HttpMethodChain or HttpMethodSequence Or giving it a more personal name like HttpMethodChainer or HttpRedirector Yes one method multiple times. I think I like Oleg s HttpMethodDirector the best so far. There is still room for improvement though. How about HttpMethodCoordinator or ClassThatDoesStuffWithHttpMethods As for the used flag does HttpMethodSession have to execute the same HttpMethod object without recycling If so you could add a reset or redirect URI method that resets the used flag and performs the other adjustments required to execute the redirect. Or would it be possible to simply recycle the method just as an application would have to do it The same HttpMethod must be re-executed for each retry redirect. Previously this was handled inside HttpMethod so we did not have to worry about resetting used externally. Recycling is not really an option as we would have to reconfigure the method each time. This would require knowing or getting all of the values set on the HttpMethod. A reset method or something of the sort could be added to HttpMethod for handling this. This corresponds to option 2 from my previous email. This is probably the best option assuming that we want to keep used at all. To keep the getters and setters for options out of a class I like to introduce XxxOptions classes. HttpClientOptions and HttpMethodOptions jump into my mind here. All that remains in the original class is one getter and setter for the options. When overdesigning one might define an interface with just the getter methods and a default implementation with getters and setters. Just to point out that the class will not modify the options passed to it - Sounds like a reasonable approach. I agree that having a bunch of getters and setters is not ideal though I think this is a separate issue. This should be fixed redesigned when we get to implementing configuration. For now I prefer keeping this hidden or just unstable until we get there. Mike How about using a musical term HttpMethodConductor - But I also like the HttpMethodDirector.Well then do not we want to be seen as contemporary How about HttpMethodJockey HMJ in short Mini-Me on behalf of Me Evil Comrade Oleg is just trying to be humorous Created an attachment id 7734 patch 2 Hello All. Sorry for the long delay on this one. Attached now is a second attempt at this fix. This patch is still not particularly polished but it should be fully functional now. Here s what s new Ê- HttpMethodSession has been renamed to HttpMethodDirector a per Oleg s suggestion. Ê- Tunneled SSL support has been added and ConnectMethod has been changed. The ConnectMethod HttpMethod constructor is now deprecated and the wrapped method is no longer used. Ê- HttpMethodDirector has been refactored a little and some comments have been added. Please take a look at this when you get a chance. I would like to commit an early version of this before too long. It has been fairly difficult to maintain this patch as other changes have been made to HttpMethodBase. Good Night MikeMike I had a look at the patch and find it good to be committed. Most probably we would still need to massage the HttpMethodDirector a bit but overall it is a HUGE improvement. Code has become much cleaner. Really great work Are you planning to deprecate the following method HttpMethodBase getDoAuthentication HttpMethodBase getFollowRedirects HttpMethodBase setDoAuthentication HttpMethodBase setFollowRedirects They seem to have become completely superfluous OlegOleg I definitely agree that some major refactoring is needed. We should be able to do that once committed. If there are no objections from anyone else I will commit tonight. How do you feel about the changes to ConnectMethod I think we should keep doAuthentication and followRedirects as they are still in use and do not have a replacement yet. Once we have a configuration architecture we should be able to remove deprecate them if we want. MikeI agree with Oleg this is really nice. A few comments you can take or leave... It s a bit ugly that HttpMethodDirectory has to be default-constructed and then have all its properties set with set methods because this means you can get it into an inconsistent state fairly easily. But since it s not an API class it doesn t matter right now. As Oleg said getMethodRetryHandler is disgusting but you knew that already. - Since HttpMethod is a mess and will probably go away in 3.0 I hope it s probably OK to leave it this way for now. The retry handler could also go into a configuration object but that would make it global and I think clients need the flexibility to change it for individual methods. Should realms and proxyRealms be lazy-allocated It s probably a premature optimization but I thought I d throw it out there. The CustomHttpConnection example is now using a deprecated ConnectMethod constructor. TestGetMethodLocal is calling a now-deprecated method on HttpMethodBase What s the locked property on HttpConnection used for That sort of modality in an object can be confusing. I couldn t find anyone who sets it to true though. Like I said it looks good. I don t have any objection to checking it in. I like what you did with ConnectMethodHi Laura Thank you for your comments. Everything you have mentioned should be put on the HttpClient TODO list most of them for the near future. It s a bit ugly that HttpMethodDirectory has to be default-constructed and then have all its properties set with set methods because this means you can get it into an inconsistent state fairly easily. But since it s not an API class it doesn t matter right now. I definitely agree. We should look at a better option for this and other configuration needs before long. As Oleg said getMethodRetryHandler is disgusting but you knew that already. - Since HttpMethod is a mess and will probably go away in 3.0 I hope it s probably OK to leave it this way for now. The retry handler could also go into a configuration object but that would make it global and I think clients need the flexibility to change it for individual methods. Yup that s pretty much the situation. It s ugly but I think we need to keep it for now. Should realms and proxyRealms be lazy-allocated It s probably a premature optimization but I thought I d throw it out there. We certainly could. They are actually never read at the moment so we could be really lazy and never allocate them This is something that should get worked out after some refactoring. I just left them in as a reminder. The CustomHttpConnection example is now using a deprecated ConnectMethod constructor. Yes we probably want to rework or remove this example then. TestGetMethodLocal is calling a now-deprecated method on HttpMethodBase We should remove that once we have a replacement. It might have to wait until we do the request response split. What s the locked property on HttpConnection used for That sort of modality in an object can be confusing. I couldn t find anyone who sets it to true though. Yes it s a bit of hidden magic. It s there to prevent a connection from getting released between method retries. Previously this was handled by the inExecute flag of HttpMethodBase but that was no longer possible once retries were moved. We should definitely look at a better solution for this. I believe it is set to true in only one place HttpMethodDirector.establishValidOpenConnection . Like I said it looks good. I don t have any objection to checking it in. I like what you did with ConnectMethod Thank you. I appreciate all of the constructive comments. MikePatch applied. Let the cleanup begin... MikeCreated an attachment id 9001 Cleanup patch 1 take 1 Folks Somehow this crucial patch got neglected recently. As I was working on resolving another bug I found a few things about HttpMethodDirector which I thought might be potentially error-prone. For instance I found the recursive invocation of MethodExecute particularly questionable. So I took liberty of refactoring things quite a bit. Mike I did go quite tough on your code and changed a lot so please do not hesitate to point out if you find anything disagreeable. OlegHi Oleg I think these changes are fine. Functionally there does not seem to be much different but if it increases readability I m fine with it. The TestHttpConnectionManager.testConnectMethodFailureRelease test is now failing for me. This patch is not the cause I think. It is possible that this test failed previously. It seems the problem is that Connect methods that fail don t result in closing the connection. So even if the connect results in a non 200 result the connection is still considered open and is reused. Any thoughts MikeMike Curiously enough TestHttpConnectionManager.testConnectMethodFailureRelease works just fine for me with and without the patch. I do not have a slightest idea as to why it fails on you. It must be some sort of local setting of yours. What kind of setup are you running OlegMike I checked in the patch. I feel however that the code still needs a bit more polish. Another patch is to follow. I will also retest all the combinations of proxy target server authentication. OlegCreated an attachment id 9133 Cleanup patch 2 take 1 Folks My previous patch completely broke SSL via proxy logic by not performing authentication on CONNECT methods. This patch fixes the problem along with some additional code refactoring. Please let me know what you think. OlegIf there are no objections I ll apply the patch tonight around 21 00GMT OlegJust committed the patch. As far as I am concerned that appears to be it. Mike could you please have a look at what I have done to your code when you happen to have a moment to spare If all these changes are OK with you I think the bug can be closed. Otherwise let me know what needs to be improved reworked OlegClosed some time ago.
