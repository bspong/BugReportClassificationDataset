request.abort should interrupt thread waiting for a connection
Calls to HttpRequestBase.abort will not unblock a thread that is still waiting for a connection and therefore has no ConnectionReleaseTrigger yet. My bad. I guess this patch should address the problem. OlegHi Oleg that takes care of opening the connection. But it does not address the interval that a thread spends in allocateConnection . If we want to address that we ll have to store a thread in the AbortableHttpRequest and interrupt the thread if there is no ConnectionReleaseTrigger. I m not sure whether that is what we want but it seems to be a sensible behavior from a user perspective. Please go ahead and commit the patch it already improves the behavior. cheers   Roland This is getting nastier the more I think about it. If abort is called while waiting for a connection the thread should be unblocked and an InterruptedException is thrown. If abort is called after the ConnectionReleaseTrigger CRT becomes available the connection is released and the next IO operation will throw an IOException. So far so good. If abort is called just after the connection is obtained and before the CRT has been set things get tricky. The thread will be interrupted but since it is not blocked it will not get an InterruptedException. We have to check and reset the interrupt status release the connection and throw an InterruptedException. The latter two may happen in reverse order if the connection is released in a finally block. We ll need some synchonization and maybe a volatile declaration in HttpRequestBase plus code for checking the interrupt status in ClientRequestDirector CRD . The alternative would be that applications have to do both call abort and interrupt the thread to make sure it isn t waiting for a connection. Ensuring proper connection release in the application would become really challenging if we require that. cheers   Roland Attached is a patch testcase that previously failed but now passes for this. Basically the idea is that DefaultClientRequestDirector installs its own ConnectionReleaseTrigger and then sets further triggers through that. Its trigger will interrupt the thread if no trigger has been set by the time abort is called and if a delegate trigger is set after abort was called it immediately throws an IOX clears the interrupted status.Sam This is a tricky one. I kind of dislike the idea of having to interrupt the thread in order to unblock the connection manager. Besides not all connection manager implementation would necessarily block on connection allocation. So I am thinking if a better solution could be to return an optional handle object which could be used to unblock the connection manager without interrupting the thread. Does this make any sense to you If not i ll commit your patch as is OlegThat makes sense I agree that interrupting is a bad practice. I ll take another stab at it tomorrow... or feel free to do it in the meantime .This patch takes a different approach than the prior one. Instead of requiring the user of the ClientConnectionManager to assume that it blocks an AbortableHttpRequest is now passed into getConnection. The ClientConnectionManager must set a ConnectionReleaseTrigger on the request to support aborting it. The patch is a little more intrusive than the prior one in that it touches more classes and changes some method signatures but it could be worth it. There s some more tests in TestTSCCMNoServer to make sure that ThreadSafeClientConnectionManager is doing the right thing. Included in this patch is the small changes tests for HTTPCLIENT-759 because it s hard to separate the environments. Sam I ll review the patch in the coming days OlegHere s the exact same patch just diffed against the most recent head to avoid the conflicts from HTTPCLIENT-759 s patch adding the same test file .Hi Sam This looks much better. However I do not quite like the fact that the proposed changes introduce a dependency between client protocol layer and the connection management layer I personally think it would be cleaner to give he control over the connection allocation back t to the client request director. Instead of connection manager injecting some code into the AbortableHttpRequest how about the connection manager returning a handle object representing a pending request for a connection and letting the request director handle it The request director in its turn could inject the handle object into the AbortableHttpRequest public interface ClientConnectionManager ...     ClientConnectionRequest requestConnection HttpRoute route                                           long timeout                                           TimeUnit tunit         throws ConnectionPoolTimeoutException InterruptedException ... public interface ClientConnectionRequest     ManagedClientConnection getConnection      throws InterruptedException          void abort     boolean isCompleted          boolean isTimedOut          boolean isAborted      Does this make any sense to you Anyways let tackle problem in small incremental steps. First thing that we need no matter what approach we take is ability to abort WaitingThread. Then we can think of a way to propagate access to that method to the AbortableHttpRequest. OlegYa it makes sense. I took a swipe at using the ClientConnectionRequest approach and this is the result. IMO it s much cleaner than the prior one which used AbortableHttpRequest less method signatures changed and the code is simpler to understand. It still is more complex than the very first approach just due to the nature of having to touch more classes... but it works very well. Sorry also for throwing all these patches out so fast we re finalizing remaining bugs with LimeWire and since we re using httpclient-4.0 now we need to make sure it s doing what we expect. Don t worry there s lots of other things to work on too just not as time-critical. Patch checked in pretty much as is barring the tabs which I had to replace with spaces . Many thanks Sam. I still would like to do some minor API refinements but otherwise look good. Great job OlegThanks for checking it in fixing the tabs. Any chance you could post a new snapshot to people.apache.org ... Makes maven dependencies much much easier. Done. Oleg
