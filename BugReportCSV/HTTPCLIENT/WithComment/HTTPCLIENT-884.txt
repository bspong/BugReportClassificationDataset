Charset omitted from UrlEncodedFormEntity Content-Type header
UrlEncodedFormEntity sets the Content-Type header to     application x-www-form-urlencoded It should set the header to     application x-www-form-urlencoded charset charset As a result content can be misinterpreted by the recipient e.g. if the entity content includes multibyte Unicode characters encoded with the UTF-8 charset . For a correct example of specifying the charset in the Content-Type header see StringEntity.java. Here s the fix     public UrlEncodedFormEntity         final List extends NameValuePair parameters         final String encoding throws UnsupportedEncodingException         super URLEncodedUtils.format parameters encoding encoding - setContentType URLEncodedUtils.CONTENT TYPE setContentType URLEncodedUtils.CONTENT TYPE HTTP.CHARSET PARAM encoding null encoding HTTP.DEFAULT CONTENT CHARSET          public UrlEncodedFormEntity         final List extends NameValuePair parameters throws UnsupportedEncodingException - super URLEncodedUtils.format parameters HTTP.DEFAULT CONTENT CHARSET - HTTP.DEFAULT CONTENT CHARSET - setContentType URLEncodedUtils.CONTENT TYPE this parameters HTTP.DEFAULT CONTENT CHARSET      Patch checked in to SVN trunk and 4.0.x branch. Please review re-test Many thanks for submitting the patch Jared OlegFix looks good. I noticed that this issue was omitted from the release notes. Only HTTPCLIENT-885 was mentioned. I believe this issue is more serious than HTTPCLIENT-885 because the library uses the faulty code to send all url-form-encoded entities whereas the faulty code in HTTPCLIENT-885 is not used internally by the library at all.i ve just switched from hc-client-4.0.0 to hc-client-4.0.1 and my code stopped working right the remote server i send post request to replies with getcgivars Unsupported Content-Type. the problem is that after this fix the hc client sends Content-Type application x-www-form-urlencoded charset UTF-8 instead of Content-Type application x-www-form-urlencoded are you sure you ve done the righ fix Jared Jacobs thanks. If you are sending simple ASCII content then you can try specifying US-ASCII or ISO-8859-1 as the second argument to the UrlEncodedFormEntity constructor. Oleg you may want to provide a way in UrlEncodedFormEntity to exclude the charset parameter here. Apparently it s still common for servers not to parse media type parameters correctly. For backwards compatibility browser vendors decided not to specify the charset in the Content-Type header even though it s arguably most correct and a common practice just search the web but instead to give authors the option of sending the character set as an extra charset parameter in the request s body and that practice made it into the HTML 5 spec http www.w3.org TR html5 association-of-controls-and-forms.html url-encoded-form-data Unlike most media types which are owned by IANA the browser vendors and W3C own the non-standard application x-www-form-urlencoded .I am somewhat reluctant to introduce workarounds for non-compliant servers in this particular case as it is pretty trivial to put together a customised UrlEncodedFormEntity implementation or to override the default value with the setContentType method. What could be done tough is changing UrlEncodedFormEntity to exclude charset parameter from the ContentType header if it is not explicitly set by the user encoding constructor parameter is null . Oleg
