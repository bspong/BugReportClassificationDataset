Allow heuristic freshness caching
I noticed that the CachingHttpClient behaves strangely when it receives responses with only the public cache-control directive e.g. HTTP 1.0 200 OK Server My test server Cache-control public Content-Length 1 1 Using a debugger I could see that the response is cached. But when the response is queried from the cache it is not considered as fresh . According to the HTTP RFC such responses may be cached I understand it as a should in our case ... but there s no reason to put responses in the cache if we don t use them later one. The freshness of the response is analysed after the response is queried from the cache thanks to CachedResponseSuitabilityChecker canCachedResponseBeUsed ... calling CacheEntry isResponseFresh ... returning true if the response date getCurrentAgeSecs is lower than its use-by date getFreshnessLifetimeSecs The issue is that getFreshnessLifetimeSecs returns 0 when there is no max-age directive. This could be fixed by replacing the code of CacheEntry isResponseFresh by     public boolean isResponseFresh         final long freshnessLifetime getFreshnessLifetimeSecs         if freshnessLifetime 0             return true                  return getCurrentAgeSecs getFreshnessLifetimeSecs      But i m not 100 confident about not producing some bad side-effects...Debug logs when issuing 2 requests with the same URL to a server returning a cache-control public directive. The response is a counted incremented at each request so to check using JUnit if the response to the 2nd request was served from the cache or not. Hi Vianney Let me start by saying that this is known behavior that is compliant with the RFC as you note caching responses without freshness information is a MAY in the protocol spec not a MUST or a SHOULD . As such this should not be marked as a bug . The protocol spec clearly talks about ways to handle these responses one is by heuristically estimating a freshness lifetime usually based on a comparison of the Last-Modified header with the Date header in the response. http www.w3.org Protocols rfc2616 rfc2616-sec13.html sec13.2.2 http www.w3.org Protocols rfc2616 rfc2616-sec13.html sec13.2.4 I would suggest re-classifying this issue as an improvement titled allow heuristic freshness caching that can be turned on as an optional feature. Please note that even with this feature your origin server is not really providing as much information as it could be. The RFC explicitly suggests that having origin servers correctly set cache-related headers is preferable to heuristic expiration calculations. In particular if your intent is that the response can be completely served from cache the origin ought to set either the Expires header or the max-age parameter on Cache-Control. If your intent is just that the response body be cached but that you will allow revalidation you need to include a validator in the response either ETag or Last-Modified . Hi Jonathan Actually the whole caching thing seems to be optional in the RFC. Only when a cache is implemented it has to follow some rules. But I confess I missed the point about using heuristics in the RFC and reconsidering this issue I can t deny other users might face problems if caching results without explicit expiration time is enabled by default. I ll try to change the type and the title of this ticket.Title and issue type changed.Just a last comment there s still a little issue at the end. If the content is not to be cached then the CachingClient shouldn t store it in the cache... should it This patch adds support for calculating freshness heuristically in the absence of the proper headers. It is configurable through CacheConfig and is disabled by default. If heuristic freshness caching is enabled than the least restrictive of CacheValidityStrategy isResponseFresh and CacheValidityStrategy isResponseHeuristicallyFresh is used to determine suitability. This patch is submitted with the permission of my employer. Thank you MichajloPatch checked in. Oleg
