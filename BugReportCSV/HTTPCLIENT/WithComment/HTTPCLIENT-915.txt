Provide a clean mechanism to attatch user define attributes to connections
It would be nice to have a way to attach user defined attributes to a connection. Ideally it d be nice if such support could be added to HttpClientConnection but understandably this may not be possible due to back-compatibility issues. So we could have something like HttpConnectionContext perhaps or similar with HttpConnectionContext setAttribute String name Object value Object HttpConnectionContext getAttribute String name This would be made available in the HttpContext of a request like the connection is today HttpConnectionContext connectionContext HttpConnectionContext httpContext.getAttribute ExecutionContext.HTTP CONNECTION CONTEXT This would make a few things much cleaner to implement than they are today The most obvious being my current use case of wanting connection isolated cookies. Currently to achieve this goal we need to provide custom client connection connection operator connection manager implementations. Then there is no clean way to currently obtain the actual connection instance created by a custom operator in the HttpContext As it s wrapped by the connection pool and getWrappedConnection is protected - so we need to resort to reflection in interceptors. Providing a clean mechanism for attaching user defined attributes to a connection instance as described above would make such implementations far far simpler. I think a simple Object is enough. If you need name value pairs you can store a Map there. Access to the object should be synchronized to or use a volatile field. I think a simple Object is enough. If you need name value pairs you can store a Map there. I disagree... Unfortunately this introduces coupling between disparate clients. What happens if I write a CookiePerConnectionInterceptor which wants to put a CookieStore in the connection. Some other interceptor written by someone else another project etc decides that It would like to put a Map of name values pairs in instead. Oops - now the two can t work together. The motivation for using an attribute based approach is that it s easy to scope your usage of it.I see your point. Anyway I think it s a bit questionable design. This basically introduces global variables very well comparable with thread-local variables. We all know where that leads if you start passing all sorts of information around that way. Better keep local Maps with the Connection as the weak ref key. You can better controll access to those maps individually. Better keep local Maps with the Connection as the weak ref key. You can better controll access to those maps individually. Thats quite a PITA just to get connection specific attributes. I see your point. Anyway I think it s a bit questionable design. This basically introduces global variables very well comparable with thread-local variables. I d say its a pretty well trodden ground HttpContext I also see potential issues with the connection bound state. HTTP connections are meant to be stateless. They can be pooled and re-used within a completely different user security context. If a connection contains attributes that are user specific security sensitive all sorts of issues may arise very much like with thread local variables. However you already have this problem with NTLM and SSL connections anyway. So this feature should be used with caution but we should still provide support for it. OlegI completely agree with you Oleg. This feature certainly would have scope for misunderstanding misuse - and I d guess javadocs should point out what it s there for and what it s not. My actual use case here is Connection specific cookies Appears to have been needed by other users too . If there are concerns that providing a connection context interface could possibly lead to confusion e.g. clients not making the distinction between it and HttpContext or not realising that 99 of the time they shouldn t be attaching state to connections I d be equally happy with any other solution that allows this use case to be met without resorting to the currently required reflection hacks Any of - Provide a a configuration parameter explicity for this case CONNECTION ISOLATED COOKIES or somesuch - If a user implements a custom connection operator manager etc provide them with some way to actually get hold of their custom connection implementation during request execution without requiring the use of reflection Overall though I tend to favour the connection attributes approach - Obviates the need to write custom connection operator manager classes just to provide connection state which is needed in some scenarios e.g this use case - Is less dangerous than exposing unwrapped connections during request execution which could expose circumvention of pooling etc How about this I made both DefaultClientConnection and AbstractClientConnAdapter implement HttpContext. This enables connections managed by HttpClient carry additional attributes state. I reused HttpContext for simplicity. We could also create a special interface for that. Please review and let me know what you think. Oleg Non binding 1 from me. Looks perfect. Thanks so much for looking in to this so quickly. DavePatch checked in. Oleg
