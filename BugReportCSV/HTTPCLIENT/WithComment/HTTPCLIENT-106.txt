Path should not be encoded in HttpMethodBase
I suggest to change the protocol or add a new method for this one protected static String generateRequestLine HttpConnection connection String name String reqPath String qString String protocol so that we can choose to use URIUtil.encode reqPath URIUtil.pathSafe or not The reason is that after the encoding process some server cannot recognize this Actually I am handling a project of the Method Propfind for getting mail from Hotmail and I find that the restriction of Hotmail server is quite high and if the address is encoded it does not work.Some overhaul was done to the URIUtil package recently. Is this still a problem I don t understand why the path is encoded but the queryString not I think it is a bug and the path must not be encoded because the path and query are well-formed in this point and encoding them can cause unexpected behaviours more info The query encoding was removed in revision 1.69 HttpMethodBase v1.95 generateRequestLine method . Current code         StringBuffer buf new StringBuffer         String path null         try             path requestPath null URIUtil.encodePath requestPath          catch URIException urie             log.error URI path encoding error             path requestPath                  buf.append path         if query null             if query.indexOf 0                 buf.append                          String queryString null             queryString query null query             buf.append queryString          Created an attachment id 5213 HttpMethodBase generateRequestLine refactored Currently HttpMethodBase generateRequestLine is a bloody mess. Any reasonable solution to this problem should be preceded by method re-write. Here s my shot at it OlegThis patch doesn t look right to me. I m no expert but have just recently had to review our URL encoding code so it concerns me that we don t seem to be encoding the query string. RFC 1738 Uniform Resource Locators specifies that    Octets must be encoded if they have no corresponding graphic    character within the US-ASCII coded character set if the use of the    corresponding character is unsafe or if the corresponding character    is reserved for some other interpretation within the particular URL    scheme. The unsafe characters listed in the rfc are     in addition the reserved characters are and It then adds    Thus only alphanumerics the special characters - . and    reserved characters used for their reserved purposes may be used    unencoded within a URL.    On the other hand characters that are not required to be encoded     including alphanumerics may be encoded within the scheme-specific    part of a URL as long as they are not being used for a reserved    purpose. Now what this implies to me is that the process for encoding any given URL is 1. Break the URL into it s various parts for HTTP this would be http lt host gt lt port gt lt path gt lt searchpart 2. Take each part of the URL and encode it though one would hope that a host name contains only US-ASCII characters or the DNS system is going to have trouble with it anyway . 3. Reassemble the URL. Now I m somewhat unsure as to whether the URL we are given is encoded or not and the JavaDocs for the methods do not specify this. So the first action item of this bug must be to decide whether methods should be passed an encoded or an unencoded URL and document it. IF we decide that URLs passed into the methods should be encoded then we need to stop encoding the path on the other hand IF we decide that URLs passed into the methods should be unencoded then we need to encode the query string as well. Also if all URLs are being passed in encoded then we should have no need for URL encoding functionality as we should only ever use encoded URLs. My suggestion would be to only ever work with encoded URLs but then do one of the following 1. add a new constructor to each of the methods which takes a boolean to determine whether the URL is encoded or not. If not we encode it before passing it through to anywhere else. 2. provide the URIUtils class possibly as a separate project to allow the user to easily encode URLs. We should ensure that there is a method in URIUtils that can take a full URL with non displayable US-ASCII characters and unsafe characters but no extra reserved characters and encode it correctly. This prevents the user having to break up the URL to encode it.Adrian - In fact the patch does nothing differently compared to what HttpClient does in its present form. The patch is merely a code clean-up. - Currently HttpMethodBase generateRequestLine ... assumes the query parameter to be URL encoded and the path parameter to be not URL encoded. This inconsistency is the essence of the problem I think - I tend to prefer the second of your suggestions. I believe that we should just clearly state in the documentation that URIs or URI elements are assumed to be URL encoded prior to be passed as input the HttpClient. HttpMethodBase setQueryString NameValuePair and the likes are exceptions from the rule which should also be clearly reflected in the documentation. - URLUtils class should already provide all necessary method needed to URL encode strings. URL related classes just need to be better documented and eventually should be spun off into a package of their own.Created an attachment id 5235 Patch take 1 Oleg Agreed on all your comments. Your patch appears okay to me. We may need to review the appropriate JavaDoc comments to make sure that any URLs being passed in are clearly marked as needing to be URL encoded.Created an attachment id 5313 Patch take 2 Method descriptions updated OlegPatch committed
