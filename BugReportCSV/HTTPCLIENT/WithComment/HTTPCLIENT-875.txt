DefaultClientConnectionOperator doesn t update socket after call to connectSocket ... 
In the DefaultClientConnectionOperator function openConnection ... it calls SocketFactory.connectSocket ... . The documentation for connectSocket ... says that it returns     the connected socket. The returned object may be different from the sock argument if this factory supports a layered protocol. A quick peek at the source showed In org.apache.http.impl.conn.DefaultClientConnectionOperator 117 final SocketFactory sf schm.getSocketFactory 118 119 Socket sock sf.createSocket 120 conn.opening sock target 121 122 try 123 sock sf.connectSocket sock target.getHostName 124 schm.resolvePort target.getPort 125 local 0 params 126 catch ConnectException ex 127 throw new HttpHostConnectException target ex 128 129 prepareSocket sock context params 130 conn.openCompleted sf.isSecure sock params So DefaultClientConnectionOperator never updates conn with the new version of sock that may have been returned from connectSocket ... . adding         130 conn.openCompleted sf.isSecure sock params 131 conn.update sock target sf.isSecure sock params appears to fix the issue. A patch that appears to solve the issue.How about a slightly different take Please review test OlegYup this appears to work for me. Thanks CFixed in SVN trunk. Please note because it is possible to work the problem around by replacing DefaultClientConnectionOperator with a custom impl this fix will have to wait until 4.1 Oleg This doesn t fix all cases as the call to conn.update checks that the previous socket is still open by calling assertOpen If the original socket is screwed up likely given the use case this throws an IllegalStateEXception Connection is not open This is actually the expected behaviour of the method see javadocs. Why it is a problem http hc.apache.org httpcomponents-client httpclient apidocs org apache http conn OperatedClientConnection.html update 28java.net.Socket 20org.apache.http.HttpHost 20boolean 20org.apache.http.params.HttpParams 29 Oleg I m looking at MultihomePlainSocketFactory which creates a new client socket object under exception situations. This new socket is returned and replaces the initial socket that was created. This would be fine if the update replaced the existing socket straight away but this fails because the initial socket is not open. I ve found the following works code         conn.opening sock target         conn.openCompleted sf.isSecure sock params                  prepareSocket sock context params                  conn.update sock target sf.isSecure sock params code 1. openCompleted requires the socket to be in a CLOSED state 2. prepareSocket calls conn.bind which marks the socket as OPEN 3. update requires the socket in OPEN state I do not think this is a viable true fix though as I am sure it breaks a number of expectations.   If Id not move opening down I see Caused by java.net.SocketException Socket is not connected         at java.net.Socket.getInputStream Socket.java 770         at org.apache.http.impl.io.SocketInputBuffer. init SocketInputBuffer.java 123         at org.apache.http.impl.SocketHttpClientConnection.createSessionInputBuffer SocketHttpClientConnection.java 99         at org.apache.http.impl.conn.DefaultClientConnection.createSessionInputBuffer DefaultClientConnection.java 165         at org.apache.http.impl.SocketHttpClientConnection.bind SocketHttpClientConnection.java 162         at org.apache.http.impl.conn.DefaultClientConnection.openCompleted DefaultClientConnection.java 123 Glyn I do not quite understand this has to do with MultihomePlainSocketFactory. MultihomePlainSocketFactory is for creating plain connections that do not need a socket upgrade. Oleg When DefaultMultihomePlainSocketFactory receives an IOException on connect it 1. Creates a new socket 2. Attempts to connect to the next IP address that exists for that DNS hostname So in a situation where the first IP address returned in the DNS fails to connect connection refused say the DefaultMultihomePlainSocketFactory will create a new socket and attempt to connect to the server with this new socket. This new socket is returned from the connectSocket method call and is intended to replace the existing socket - which is a dead failed connection. 4.0 of httpclient doesn t update this socket and ignores the returned socket. The 4.1 declared fix fails for me because of the assertOpen - as the initial socket is dead. assertOpen executed by DefaultClientConnection update method is perfectly reasonable as the update method is intended for updating TLS SSL connections after the original plain Socket has been wrapped with SSLSocket. The use of DefaultMultihomePlainSocketFactory should never result in a call to DefaultClientConnection update OlegGlyn Support for multihome addresses is basically broken at the moment. I am planning to have it fixed in the next release. You can track the progress by watching HTTPCLIENT-898 Oleg
