isHttp11 should have HttpClient scope
 Original Message From Kalnichevski Oleg mailto oleg.kalnichevski bearingpoint.com Sent Wednesday January 15 2003 8 24 AM To Commons HttpClient Project Cc Rob Owen Subject RE isHttp11 and HTTP 1.0 servers Rob You are basically right hands down. It does make sense for the HTTP version flag to have HttpClient scope. We should address this shortcoming as a part of the post-2.0-release redesign Feel free to file a bug report to make sure the issue does not go forgotten http nagoya.apache.org bugzilla enter bug.cgi product Commons Many thanks for bring it up Cheers Oleg Original Message From Rob Owen mailto Rob.Owen sas.com Sent Monday January 13 2003 18 31 To Commons HttpClient Project Subject isHttp11 and HTTP 1.0 servers The boolean variable http11 is set on a method by method basis. For PutMethod decisions eg. Expect 100-continue request header are made prior to determining the value for Http11 chicken and egg problem and so the default true is used to produce the request. An HTTP 1.0 server hangs waiting for the extra data on the PUT method body. For applications that are using HttpClient ie. they do not manipulate the HTTP methods directly and cannot be expected to set the value of Http11 for each method instance shouldn t http11 have HttpClient scope This would allow an interaction eg. OPTIONS to set http11 and all methods thereafter would use this setting    Rob Owen SAS Institute Inc. email Rob.Owen sas.com Original Message Subject RE isHttp11 and HTTP 1.0 servers Date Wed 15 Jan 2003 10 00 20 -0800 From Dennis Cook dennis bevocal.com Reply-To Commons HttpClient Project commons-httpclient-dev jakarta.apache.org To Commons HttpClient Project commons-httpclient-dev jakarta.apache.org I don t understand why the version should be associated with the HTTPCLient class. I thought that the version was appropriate to a connection to a specfic host port. So if you have a pool of connections would it not be possible that the version on each connection could be different Dennis Cook BeVocal Inc. tel 650-641-1424 fax 650-210-9275Created an attachment id 11377 Patch take 1 Changelog HttpConnectionParams changed to include HTTP protocol version HttpConnection keeps track of supported HTTP protocol HttpMethodBase uses lesser of two values reguested HTTP version specified with the HttpMethodParams and supported HTTP version specified with the HttpConnectionParams Let me know what you think OlegI just realized that this is a pretty serious flaw in my patch. Fix coming in a moment. OlegCreated an attachment id 11378 Patch take 2 Hi Oleg I haven t looked at this thoroughly yet but I have two initial comments  - Should we be saving the HTTP version in connection s params More than one connection can share the same params. Also to this point we have only been storing configuration values in the various params objects. This change would add state to the params.  - Could we switch HttpVersion to implement Comparable instead of greater and less MikeI am afraid I have to call back the patch as there s a fundamental flaw in it. Consider the following scenario HttpConnection version is undefined newly allocated connection The user executes a request using HTTP 1.0 for whatever reason The connection will be marked as supporting HTTP 1.0 only All consecutive requests on this connection will be forced to use HTTP 1.0 even though the connection may be perfectly capable of HTTP 1.1 or above I currently do not see a satisfactory solution to this problem with this approach. I have to think of something completely different. Bright ideas how to solve the problem of allowing for HttpConnection parameterization without giving the end user the direct access to the connection itself are welcome. I ll happily step aside Oleg Should we be saving the HTTP version in connection s params Mike We have requests to support HTTP version parameterization on a per connection basis which I also find quite reasonable. Where would you see the version saved Could we switch HttpVersion to implement Comparable We could and we should - My oversight. Oleg We have requests to support HTTP version parameterization on a per connection basis which I also find quite reasonable. Where would you see the version saved I agree that the request seems reasonable. My concern is how we implement it. As you mention in your previous message a viable solution to this problem is not readily apparent. Here are the problems that we need to solve as I see it  - We need somewhere to store the version supported by a connection. My preference would be to add a property to the connection itself.  - We need a way to determine what versions a connection supports. As you have mentioned just because a connection is used for HTTP 1.0 does not mean that it can t also be used for HTTP 1.1. I see two options here. 1 Assume a connection can be used for all HTTP versions unless a particular version is rejected. Defaults to accept all. 2 The first use of a connection defines the version it can be used for.  - A connection s version is determined outside of the HttpConnection class. We must rely on the HttpMethod to set the supported version on the connection. This is not a major issue as we have control over the HttpMethodBase but it s a little nasty. I will do some brainstorming and see if I can come up with any new ideas. MikeHi Guys I haven t followed this closely but are you sure you are still on the right track There s not much point in specifying an HTTP version for a connection. When it s in use it is too late. When it s closed there is no telling to which host it will be used next so why would you want to specify the HTTP version. The comment of Dennis Cook added by Ortwin does mention connections. But that s from a user view connection to a particular host and port For us developers that would translate to specifying the HTTP version with the HostConfiguration. Or so it seems to me. cheers   RolandRoland this is certainly a different angle from which the problem can be approached. I have been entertaining the idea of HttpParam-enabling HostConfiguration lately while thinking about better proxy configuration management. If we had HttpVersion defined at the host level this might well solve the problem. OlegCreated an attachment id 11401 Patch take 3 Folks I am far from being happy with this patch but after much inner struggle with myself this is what I found to be a compromise I was prepared to live with. All the alternative solutions I looked at were difficult without a substantial refactoring of several core classes which I thought would be excessive at this point. changelog HTTP protocol version can be defined with HostConfiguration HttpMethodDirector chooses the protocol version of the HostConfiguration when available if the protocol version has not been explicitly defined at the HttpMethod level Let me know what you think OlegHi Oleg I agree this is not a sexy solution but I think it s a good one. I have a few suggestions.  - HttpMethodBase.getActualVersion should just return null instead of throwing an exception I think. The actualVersion effectiveVerson perhaps is in an undefined state null until the method is executed but I don t think accessing it should be considered an error  - HostConfiguration. Version should probably be synchronized.  - We should add some more Javadocs to HostConfiguration. Version to indicate that it s used as the default version for communicating with the host but that it can be overidden by setting the version on the method s params. Thanks for persevering on this one. It has proven to be more difficult that I think we previously would have guessed. MikeHi Oleg while you re at it do you want to include strict mode in the HostConfiguration as well It s used in the same way as HttpVersion to adjust the style of the generated HTTP requests. But I don t know how much effort it is to add and evaluate that flag there. cheers   RolandFolks I guess I figured something that may address all the concerns that have been expressed so far. Check the new patch out. The solution keeping my fingers crossed turned out to be quite trivial. Once again the new preference architecture saved the day. The only problem I see is that HttpClient is getting more and more heavy-weight in terms of creating excessive amount of garbage. GC optimization should be definitely a top priority for the 4.0 Let me know what you think OlegCreated an attachment id 11416 Patch take 4 Hi Oleg This looks pretty good. My only suggestion would be to change HostParams to just extend DefaultHttpParams unless you have particular plans for using it in other ways. MikeI changed HostParams to just extend DefaultHttpParams as suggested by Mike and committed the patch take 4 . I ll close the bug report as soon as I have a few test cases added OlegTest cases provided. Oleg
