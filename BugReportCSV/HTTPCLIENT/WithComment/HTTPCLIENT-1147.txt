When HttpClient-Cache cannot open cache file should act like miss
Set up HttpClient-Cache like this final String cacheDir cachedir HttpClient cachingHttpClient final CacheConfig cacheConfig new CacheConfig cacheConfig.setSharedCache false cacheConfig.setMaxObjectSizeBytes 262144 256kb if new File cacheDir httpclient-cache .exists if new File cacheDir httpclient-cache .mkdir throw new RuntimeException failed to create httpclient cache directory new File cacheDir httpclient-cache .getAbsolutePath final ResourceFactory resourceFactory new FileResourceFactory new File cacheDir httpclient-cache final HttpCacheStorage httpCacheStorage new ManagedHttpCacheStorage cacheConfig cachingHttpClient new CachingHttpClient client resourceFactory httpCacheStorage cacheConfig Then make a request final HttpGet get new HttpGet url final HttpResponse response cachingHttpClient.execute get final StatusLine statusLine response.getStatusLine if statusLine.getStatusCode 300 if statusLine.getStatusCode 404 throw new NoResultException     throw new HttpResponseException statusLine.getStatusCode             statusLine.getReasonPhrase response.getEntity .getContent Everything worked as expected. Now delete the cache directory cachedir httpclient-cache in this example . And make the same request again. Actual  Caused by java.lang.IllegalStateException Content has been consumed at org.apache.http.entity.BasicHttpEntity.getContent BasicHttpEntity.java 84 at org.apache.http.conn.BasicManagedEntity.getContent BasicManagedEntity.java 100 Expected HttpClient shouldn t throw an exception - it should just perform the request again acting like a cache miss.Jon could you please look into that OlegThis patch is provided with permission of my employer with rights granted to the asf.So the attached patch should take care of this problem. The test has to be reworked a little bit - because right now it is doing external I O to get a URL resource and some file based I O because of the directory configuration mentioned in this issue . I believe that there has to be an easier way to test this issue.Patch checked in to both trunk and 4.1.x branch. Please test. Joe many thanks for contributing the patch. OlegI did a lousy job reviewing the patch. I missed the fact that the patch broke API compatibility by adding an additional method to the Resource interface. I backed out those changes as they seem to have no impact on the resolution of the original issue. The test case testing the fix still pass for me even without API breaking changes. OlegAdding a method to an interface does not break binary compatibility however it will in general be source incompatible unless all 3rd party implementation are subclasses of a base implementation that is also updated . See http java.sun.com docs books jls second edition html binaryComp.doc.html 45347
