HttpMultiClient reuses closed connections
If a socket times out while sitting in the connection pool HttpConnectionManager still attempts to reuse it resulting in an IOException being thrown when writing to the socket. I believe this is a problem with both server side and client side timeouts ie we try to reuse a connection that we timed out though am not certain of that. At the very least server side timeouts cause the issue. As yet I can t see how to fix this. With the current code there doesn t even appear to be a suitable workaround because when the exception is thrown the connection is added back into the pool to be reused even though it is closed which causes the next attempt to fail as well. I can t see any reliable way to tell whether or not a connection is open so would suggest the following as a fix 1. In HttpMultiClient.executeMethod close the connection if an exception is thrown optionally only if an IOException is thrown instead of an HttpException but generally exceptions tend to leave things in an unknown state . 2. optional Add a retry loop to executeMethod to retry if an exception occurs possibly only if an IOException is thrown depending on exactly when a HttpException is thrown . I ll attach a patch which does both of this to help clarify.Created an attachment id 3623 Closes the connection if an exception occurs while executing a method. At the HttpMultiClient level it is not possible to retry the connection because the method would have to be recycled which would loose all it s internal settings. As such the attached patch only closes the connection when an exception occurs ensuring that the client is left in a stable state. The user of HttpClient still needs to catch the exception and try again which is unfortunate.I found that the cocoon project encountered this bug too when their portal isn t refreshed for a while they have the broken pipe exception... http nagoya.apache.org bugzilla show bug.cgi id 12216 They may be interested to know that solving the bug here will solve them too The bug is not appropriate any longer as HttpMultiClient has been removed and issues with reused connections have been solved.
