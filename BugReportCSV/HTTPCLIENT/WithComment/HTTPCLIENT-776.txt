NPE w AbstractPoolEntry.open
java.lang.NullPointerException     at org.apache.http.impl.conn.AbstractPoolEntry.open AbstractPoolEntry.java 171     at org.apache.http.impl.conn.AbstractPooledConnAdapter.open AbstractPooledConnAdapter.java 119     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 309     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 501     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 456     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 422     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 135     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Unknown Source Seeing a lot of these against Alpha4. Also seeing still the occassional IllegalStateException of java.lang.IllegalStateException Connection already open.     at org.apache.http.impl.conn.AbstractPoolEntry.open AbstractPoolEntry.java 150     at org.apache.http.impl.conn.AbstractPooledConnAdapter.open AbstractPooledConnAdapter.java 119     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 309     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 501     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 456     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 422     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 135     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Unknown Source The only possible way I can see the NPE happening is if the AbstractPoolEntry instance gets into open HttpRoute HttpContext HttpParams gets through to line 161 this.tracker new RouteTracker route ... and then another thread calls calls resetTrackedRoute on the same AbstractPoolEntry before the open .. thread continues to line 171.The NPE can happen if another thread calls AbortableHttpRequest.abort while AbstractPoolEntry is in the process of opening. The abort flow is  HttpRequestBase.abort - ConnectionReleaseTrigger.abortConnection - AbstractClientConnAdapter.abortConnection - AbstractPooledConnAdapter.shutdown - AbstractPoolEntry.resetTrackedRoute The request flow can get into open from another thread leaving it open to tracker becoming null at any time. ... not completely sure right now how to fix it.Attached is a testcase that reproduces the problem testAbortBeforeSocketCreate is throwing the NPE right now. I m really not positive how to fix it but am still looking into it . The basic problem is that you can abort the request before DefaultClientConnectionOperator creates the socket which means that the socket isn t closed or marked as should-be-closed when the request is aborted. This means that when after abort is called openConnection still continues as normal connects to the host then it goes back to AbstractPoolEntry.open where tracker is null throws the NPE. I m not marking the attachment as intended for inclusion because there s still some more testcases and hopefully some fixes that I want to write. Looks like this change http fisheye6.cenqua.com browse httpcomponents httpclient trunk module-client src main java org apache http impl conn AbstractClientConnAdapter.java ignore1 B ignore2 b r1 652020 r2 652945 u 3 caused it. I think the change is a good one but had the side effect of causing tracker to be nulled out which exposes the problem.Since it s reproducible we can surely fix it. If you do not come up with a fix I ll look into it in the coming days. OlegThe attached patch should fix the problems plus adds a few new tests two of which would have failed before . Basically I captured the shutdown event in DefaultClientConnection and prevent opening .. from completely succesfully if the connection was shutdown prior to an opening announcement. Also in AbstractPoolEntry we check for tracker becoming null and fail after the operator connects if tracker became null. With respect to AbstractPoolEntry it s not completely clear that a side effect of resetTrackedRoute will prevent open .. from completing so I added it to the javadoc. A better way would be renaming it to something like shutdownEntry . It was previously called closing before resetTrackedRoute meaning it was notification that something external was being shutdown... but it s kind of active itself given that there s an open .. method that can be aborted due to it. I d check this in but haven t gotten any notifications about an account setup yet. Sorry Patch checked in. Many thanks Sam I am sorry it has been taking so long to get your account set up. Only Erik can request a new account creation and he still appears off-line. Oleg
