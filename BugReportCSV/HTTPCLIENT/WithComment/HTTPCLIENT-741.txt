AbstractClientConnAdapter prone to concurrency issues
AbstractClientConnAdapter is currently prone to all sorts of concurrency issues. 1 Access to internal state is not properry synchronized making the class prone to race conditions. Presently none of the instance variables is even declared volatile. 2 AbstractClientConnAdapter treats aborted connection as one in an illegal state which is not quite right. OlegAnother major problem is that AbstractClientConnAdapter attempts to release the connection upon invocation of the abort method which essentially requires the connection manager or at least its releaseConnection method to be threading safe. We should not make such assumption. Roland I am going to go ahead and commit fixes for the above problems given the fact you may be off-line in the coming days weeks. Please review the changes when you happen to have a chance. If you find anything disagreeable please let me know. OlegWe have a whole slew of stack traces that might be caused by the concurrency issues. Would it be helpful to post them or wait till some of them are fixed and try again AbstractClientConnAdapter abortConnection no longer releases the wrapped connection back to the connection manager. The wrapped connection gets shut down but remains attached to the adapter. The connection is expected to be released back to the connection manager by the request execution thread. Roland Please review and approve the changes when you happen to have a chance. Sam I believe the issue has been resolved. Could you please re-test your code against the latest SVN snapshot and confirm the problem is gone If the problem still persists please do post stack traces the more the better. OlegMy mistake. When I created the adapter I considered it a single-threading class because it is handed only to the thread that allocates the connection. Should have thought about multithreading when writing the abort stuff. I ll look at the code when I find the time. On the conceptual level the changes are good. cheers   Roland I m fine with the changes. Sam if you get around to retesting with trunk and your problems are gone please mark this issue as resolved or close it. thanks   Roland Sure thing we ve updated our code to be using trunk internally will likely release another beta sometime next week. I ll be sure to update this issue with the results. Thanks Closing as fixed for now. Sam please re-open it if you manage to reproduce the problem in LimeWire. Oleg  I don t seem to have the ability to re-open so am just commenting with the updates. We released a new beta today and 99 of the concurrency problems seem to be fixed. Here s three stack traces that are left java.lang.IllegalStateException Connection is not open     at org.apache.http.impl.SocketHttpClientConnection.assertOpen SocketHttpClientConnection.java 75     at org.apache.http.impl.AbstractHttpClientConnection.isStale AbstractHttpClientConnection.java 197     at org.apache.http.impl.conn.AbstractClientConnAdapter.isStale AbstractClientConnAdapter.java 172     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 318     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 500     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 455     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 421     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 139     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Unknown Source java.lang.NullPointerException     at org.apache.http.impl.client.DefaultClientRequestDirector.updateAuthState DefaultClientRequestDirector.java 996     at org.apache.http.impl.client.DefaultClientRequestDirector.handleResponse DefaultClientRequestDirector.java 885     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 386     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 500     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 455     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 421     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 139     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Unknown Source java.lang.IllegalStateException No entry created for this pool. HttpRoute - http 74.160.66.42 14561     at org.apache.http.impl.conn.tsccm.RouteSpecificPool.freeEntry RouteSpecificPool.java 137     at org.apache.http.impl.conn.tsccm.ConnPoolByRoute.freeEntry ConnPoolByRoute.java 337     at org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.releaseConnection ThreadSafeClientConnManager.java 230     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 427     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 500     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 455     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 421     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 139     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Thread.java 613 DefaultHttpExecutor MultiRequestor basically is just a Runnable Cancellable exposes a cancel method that can be cancelled from any thread. cancel just calls abort on the current AbortableHttpRequest but is called on a thread other than the one that s doing the client.execute request . The last one is the most common exception and seems to happen with some regularity. The other two we ve only seen once so may just be a memory quirk we ve seen some crazy bugs including recursive NPEs while constructing an NPE. I think I have fixed the first and the second cases in the SVN trunk. Oleg working with Sam Yes we no longer see the first two I think. Still seeing the third as well as one I ve inserted below. I ve done some digging and I have a patch I ll attach. Basically in the recent concurrency fixes a change was made to AbstractClientConnAdapter - its state is now marked as volatile. I think the volatile marking needs to also be done in its subclasses and classes used in the subclasses 1 AbstractPooledConnAdapter 2 AbstractPoolEntry java.lang.IllegalStateException Connection already open.     at org.apache.http.impl.conn.AbstractPoolEntry.open AbstractPoolEntry.java 131     at org.apache.http.impl.conn.AbstractPooledConnAdapter.open AbstractPooledConnAdapter.java 119     at org.apache.http.impl.client.DefaultClientRequestDirector.execute DefaultClientRequestDirector.java 314     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 500     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 455     at org.apache.http.impl.client.AbstractHttpClient.execute AbstractHttpClient.java 421     at com.limegroup.gnutella.http.DefaultHttpExecutor.performRequest DefaultHttpExecutor.java 97     at com.limegroup.gnutella.http.DefaultHttpExecutor.access 000 DefaultHttpExecutor.java 26     at com.limegroup.gnutella.http.DefaultHttpExecutor MultiRequestor.run DefaultHttpExecutor.java 135     at org.limewire.concurrent.ThreadPoolExecutor.runWorker ThreadPoolExecutor.java 1006     at org.limewire.concurrent.ThreadPoolExecutor Worker.run ThreadPoolExecutor.java 549     at java.lang.Thread.run Unknown Source Patch checked in. Many thanks Tim. How reproducible is HTTPCLIENT-747 Any change it could be reproduced with a test case OlegDo you mean HTTPCLIENT-747 or this issue HTTPCLIET-741 You re interested in tests for the patch I just submitted I actually mean HTTPCLIENT-747 which is basically a separate JIRA for the java.lang.IllegalStateException No entry created for this pool issue. Oleg
