MultipartPostMethod does not check for error messages
If a MultipartPost request is sent to a server which requires authentication the server may respond to the request with an unauthorized header and close the connection before all of the data is sent. HttpClient should monitor the incoming stream and cease transmitting the body if an error message is received section 8.2.2 of rfc2616 see below . At the very least HttpClient should check for a response when catching the HttpRecoverableException and retrying. This probably should be done in HttpMethodBase so that we are in a known state when starting to retry the connection ie there isn t an existing response in the socket buffer to cause problems . Ideally HttpClient should also implement the 100 Continue status as specified in section 8.2.3 of rfc2616. Finally PostMethod should be tested to ensure that it does not exhibit this bug as well. 8.2.2 Monitoring Connections for Error Status Messages    An HTTP 1.1 or later client sending a message-body SHOULD monitor    the network connection for an error status while it is transmitting    the request. If the client sees an error status it SHOULD    immediately cease transmitting the body. If the body is being sent    using a chunked encoding section 3.6 a zero length chunk and    empty trailer MAY be used to prematurely mark the end of the message.    If the body was preceded by a Content-Length header the client MUST    close the connection.My previous observation that MultipartPost doesn t abort sending the body when a response is received is still valid but turns out to not be the cause of my problems. From what I understand of rfc2616 HTTPCLIENT-123 is therefore an enhancement not a bug because this behaviour SHOULD be present in the client but does not have to be. As such I m changing this bug s severity from Major to Enhancement . One of the committers may wish to change the target milestone for this bug as this new feature is not planned for the 2.0 release.MultipartPost class method has been updated to support expect 100-continue handshakeCreated an attachment id 12868 Patch take 1 Folks here s the first stab at it. I am not entirely sure it is actually worth the trouble. Please let me know how you feel about it. Should we decide to go ahead with this patch I ll happily provide all the missing bits test cases javadocs etc . OlegHi Oleg I would have to agree I m not sure it s worth the effort. In particular this change makes writing directly to the output stream significantly more complicated. My feeling is that Expect 100-continue is a good enough solution to this problem. Do we still have any real-world requests for this enhancement MikeMike There are certainly real-life cases when this might be quite useful. Consider the following situation the user executes a POST or a PUT with a large request entity against a protected URL providing no or invalid credentials. The target server reads the request headers fails to authenticate the user and immediately drops the connection without reading the request body. HttpClient happily goes on writing the request body until it gets IOExcpetion socket closed . The server response never gets parsed. Instead of expected status code SC UNAUTHORIZED the user gets a misleading IOException. Even the most Httpclient savvy users may be left wondering as to what is the cause of the problem. To make matters worse HttpClient will attempt to retry the method a few times before giving up This said there are better ways to deal with the problem. Expect-Continue is one. Executing a test GET or HEAD against the target URL to ensure authorization is another. Since we are both in agreement that the extra complexity does not appear to buy a lot I suggest the issue be marked as WORNTFIX. If there are strong objections or additional input in favor of the patch the bug report can always be reopened. What do you think OlegWONTFIX is the right choice in my opinion. Though I understand the desire for this feature I think the alternatives 100-continue and HEAD GET test are better than the fix. Mike
