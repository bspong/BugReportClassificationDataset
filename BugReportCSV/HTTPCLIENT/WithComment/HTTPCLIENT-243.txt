Transfer-Encoding identity not supported possible patch
In HttpMethodBase.readResponseBody only chunked transfer encoding is supported. Some proxy servers like Privoxy etc send a Transfer-Encoding identity header and HttpClient fails quietly and returns a null result input stream. At line 2037 in HttpMethodBase.java revision 1.160 I inserted the following two lines and it appeared to work fine else if identity .equalsIgnoreCase transferEncodingHeader.getValue    result is I think it should at least throw an exception or do something when it encounters an unsupported Transfer-Encoding instead of returning a null input stream.A good catch but I don t think the suggested patch is quite right as it doesn t compute the content length if the transferEncodingHeader is specified as identity. I think rearranging the two cases something like this if transferEncoding null    identity .equalsIgnoreCase transferEncoding.getValue  ... do what is currently the second case else if chunked .equalsIgnoreCase transferEncodingHeader.getValue   ... do what is currently in the first case else   LOG.warn Unexpected transfer encoding might work better. Since I don t have the indicated servers handy perhaps the submitter can try the suggested rearrangement Eric please correct me if I am wrong but it seems there s a certain terminology confusion. Identity is a content encoding not a transfer encoding. RFC 2616 defines only one valid transfer encoding chunked. I think the fix suggested by Brent is indeed the right one. Transfer-encoding Content-Length headers are mutually exclusive. We just have to print a BIIIIIIIIG FAT waring message in case transfer encoding is anything but chunked and return the input stream as is Am I missing something OlegCreated an attachment id 7128 Patch take 1 Hi Oleg I just looked at the patch and was wondering if you should only warn if you re in Strict mode BrentBrent That surely can be done. I still think it is a pretty serious compliance problem on the part of Privoxy and they should rather be warned but I can live with a warning in strict mode only OlegCreated an attachment id 7133 Patch take 2 Brent I don t suppose you could provide a wire log It might help clarify. Oleg I have no idea whether my analysis is correct or not. I only noticed this issue due to my almost pathological interest in making sure streams are properly wrapped. The RFC apparently got it wrong on this point. From section 3.6 The Internet Assigned Numbers Authority IANA acts as a registry for transfer-coding value tokens. Initially the registry contains the following tokens chunked section 3.6.1 identity section 3.6.2 gzip section 3.5 compress section 3.5 and deflate section 3.5 . Except that there is no section 3.6.2. I found these two links http lists.w3.org Archives Public ietf-http-wg-old 2001SepDec 0018.html http ftp.ics.uci.edu pub ietf http hypermail 1998q3 0135.html Which seem to suggest that leaving identity in was a mistake. Maybe you knew all this I certainly didn t. In any case your assertion that only chunked is valid appears to be wrong in that gzip compress and deflate are possible values too. Anyway I think it is still necessary to be able to determine the content-length so I think my original suggestion might be appropriate if we support the identity transfer encoding at all. I ve not had a chance to look at the patches you ve supplied just mining for information so far. -Eric.Eric I do not know it for sure either. I am just trying to make some more or less informed guesses. One thing for sure the RFC is terribly contradictory on this issue. 3.6 Transfer Codings ...    Whenever a transfer-coding is applied to a message-body the set of    transfer-codings MUST include chunked unless the message is    terminated by closing the connection. When the chunked transfer-    coding is used it MUST be the last transfer-coding applied to the    message-body. The chunked transfer-coding MUST NOT be applied more    than once to a message-body. These rules allow the recipient to    determine the transfer-length of the message section 4.4 . ... so what I can gather from the above paragraph is that chunk encoding must be used anyway to ensure that the content length could be determined no matter what additional encodings are appled. There s one thing I am pretty sure about that content length transfer encoding directives are mutually exclusive. 4.4 Message Length ...    3.If a Content-Length header field section 14.13 is present its      decimal value in OCTETs represents both the entity-length and the      transfer-length. The Content-Length header field MUST NOT be sent      if these two lengths are different i.e. if a Transfer-Encoding      header field is present . If a message is received with both a      Transfer-Encoding header field and a Content-Length header field      the latter MUST be ignored. ... Anyways what that all means to me that  if chunked .equalsIgnoreCase transferEncodingHeader.getValue is really not good enough. The code needs to be made more robust when dealing with composite transfer encodings OlegCreated an attachment id 7143 Patch try 3 I think this patch should take care of composite Transfer Encoding headers. MikeCreated an attachment id 7153 Patch take 4 Mike your patch looks good to me. I just added a warning message in case transfer encoding is no recognized. If you think it is ok go ahead and commit the patch to both branches. OlegPatch committed to 2.0 and HEAD. MikeCreated an attachment id 7158 Follow-up patch take 1 Mike I had a sudden change of heart. I think we should have a facility to forcefully close connection in case something is wrong like missing chunk encoding . It is not good enough to hope that the server would drop the connection on its own accord. There are other cases where this feature may come in handy. OlegWe should probably set forceCloseConnection when there is no content length or transfer encoding but there is a response. The following case from readResponseBody   if expectedLength -1       if canResponseHaveBody statusLine.getStatusCode           result is           We can then remove the test for no transfer encoding and missing content length in shouldCloseConnection . MikeMakes sense to me. I suggest though this patch goes into CVS HEAD only. OlegCreated an attachment id 7161 Follow-up patch take 2 Created an attachment id 7162 Follow-up patch take 3 Oleg This last patch modifies the javadocs a little and renames the forceConnectionClose variable so that it is suitable for an is method. Just cosmetic changes MikeFair enough. I think the patch is good to be committed. OlegPatch applied to 2.0 branch HEAD OlegCreated an attachment id 7205 Follow-up patch take 1 Created an attachment id 7228 Follow-up patch take 2 Another revision of the transfer-encoding patch. I hope it is going to be the final one OlegLooks good to me. Applied.Applied to 2.0 branch.
