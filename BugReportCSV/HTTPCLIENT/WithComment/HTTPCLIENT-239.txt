Redirect 302 to the same URL causes max redirects exception
I noticed that if the server returns a 302 without a URL in the link the HttpClient follows the empty URL up to the maximum times 100 by default . Instead it should check and if the URL is an empty string it shouldn t try to follow the redirect. 12 18 17 430 U main ERROR HttpMethodBase - Narrowly avoided an infinite loop in execute 12 18 17 430 U main DEBUG URLMonitor - Method.execute attempt 1 failed http www.stagecoach.co.uk org.apache.commons.httpclient.HttpRecoverableException Maximum redirects 100 exceeded 12 18 17 430 U main DEBUG URLMonitor - HttpRecoverableException http www.stagecoach.co.uk org.apache.commons.httpclient.HttpRecoverableException Maximum redirects 100 exceeded at org.apache.commons.httpclient.HttpMethodBase.execute HttpMethodBase.java 1065 at com.verideon.veriguard.domain.URLMonitor.monitor URLMonitor.java 189 at com.verideon.veriguard.domain.URLMonitor.monitor URLMonitor.java 101 at com.verideon.veriguard.domain.TestURLMonitor.getPage TestURLMonitor.java 58 at com.verideon.veriguard.domain.TestURLMonitor.monitorURL TestURLMonitor.java 47 at com.verideon.veriguard.domain.TestURLMonitor.testMonitorURLStageCoach TestURLMonitor.java 138 at sun.reflect.NativeMethodAccessorImpl.invoke0 Native Method at sun.reflect.NativeMethodAccessorImpl.invoke NativeMethodAccessorImpl.java 39 at sun.reflect.DelegatingMethodAccessorImpl.invoke DelegatingMethodAccessorImpl.java 25 at java.lang.reflect.Method.invoke Method.java 324 at junit.framework.TestCase.runTest TestCase.java 154 at junit.framework.TestCase.runBare TestCase.java 127 at junit.framework.TestResult 1.protect TestResult.java 106 at junit.framework.TestResult.runProtected TestResult.java 124 at junit.framework.TestResult.run TestResult.java 109 at junit.framework.TestCase.run TestCase.java 118 at junit.framework.TestSuite.runTest TestSuite.java 208 at junit.framework.TestSuite.run TestSuite.java 203 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests RemoteTestRunner.java 392 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run RemoteTestRunner.java 276 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main RemoteTestRunner.java 167 Result with telnet GET HTTP 1.1 302 Object moved Server Microsoft-IIS 5.0 Date Tue 01 Jul 2003 10 05 58 GMT X-Powered-By ASP.NET Location http www.stagecoach.co.uk Connection Keep-Alive Content-Length 121 Content-Type text html Set-Cookie ASPSESSIONIDCQCSRAAB IFJJLEADOPDDNNGHLPFBIIIE path Cache-control private head title Object moved title head body h1 Object Moved h1 This object may be found a HREF here a . body Connection closed by foreign host.Michael I can t reproduce the problem with the current CVS snapshot. What version of HttpClient are you using Make sure it is at least beta-1. Complete wire log would also help. OlegHttpClient does not look at the HTML content. It uses the location header as per the RFC. It seems that this site redirects to itself Location http www.stagecoach.co.uk MikeOk I was using the link in the HTML content. Is it possible to have httpclient not follow a redirect when the redirect is the same as the current URL This would avoid the problem. Ok. The problem is perfectly reproducible. Still I believe that HttpClient behavior is absolutely correct. It just does exactly what it is told to do by the target HTTP server. It is not up to HttpClient to decide whether the target URL makes sense or not as long it is a valid URL. I suggest you disable automatic redirect for that particular URL and implement custom redirect logic that suits your needs. Does anyone see it differently Oleg PS I tried hitting the site in question with Galeon and it did not work either. I could not care less if the site works with IEI see it differently although not strongly enough to pursue it. I see an opportunity to prevent httpclient from doing something that doesn t make sense and an opportunity to optimize the performance by preventing 100 GETs. Overall it s not a big deal we can leave the report as invalid. Michael redirect logic in HttpClient will be completely overhauled in the 2.1 release. We can decide at that point whether HttpClient should follow redirects to the same URL or not. I am just not entirely sure if there are no legitimate use scenarios for such redirects. Olegthe spec does mention that a client SHOULD detect and prevent circular redirectsHttpClient DOES prevent circular redirects by keeping a max count on allowed automatic redirects. The question is whether HttpClient should make an assumption that a redirect to the same URL will always result in a infinite loop. I am not entirely sure this assumption is valid. Olegthere is a difference between limiting the number of redirects and preventing circular redirects. If I do the latter a redirect to an URL that already appeared in the redirect chain will be rejected even if the max number of redirects has not been reached.Christian Can you show me where in the RFC it is stated that redirects to the same location are not allowed In my humble opinion multiple redirects to the same location an infinite loop. Olegok heres the quote from section 10.3 in RFC 2616 A client SHOULD detect infinite redirection loops since such loops generate network traffic for each redirection. Note previous versions of this specification recommended a maximum of five redirections. Content developers should be aware that there might be clients that implement such a fixed limitation. To me DETECTING an infinite loop is something else than limiting the number of redirects as the above remark about previous versions also confirms. And IMHO multiple redirects to the same location an infinite loop unless the resource at the location has changed in the meantime - I hope this issue does not get into an inifite loop - -I respectfully disagree with your interpretation even though in most of the cases it corresponds to what the majority of users may expect to see including myself . This said HttpClient is a general purpose HTTP agent and as such should follow the letter of the specification rather than make informed guesses. We are not supposed to invent stuff. Nowhere in the spec circular redirects are mentioned. The spec states that an HTTP agent should avoid infinite loops which is not the same thing as circular redirects in my opinion. Oleg The spec states that an HTTP agent should avoid infinite loops which is not the same thing as circular redirects in my opinion. If you want to follow the letter please do. The letter specifically mentions DETECTING an infinite loop not AVOIDING it. If you limit the redirects you are not detecting anything - after all the loop might end 2 steps after your limit. ChristianHttpClient does detect and does avoid infinite redirection loops in its present implementation. In the 2.1 release it may optionally handle circular redirection loops as well. OlegOkay gentlemen. You are essentially both correct. HttpClient currently works for this case i.e. does not loop forever and warns the user however the behavior is sub-optimal. Let us revisit this in 2.1 where it may make some sense to detect circular redirects. Case closed for now MikeCreated an attachment id 11207 Patch take 1 The fix is pretty straightforward. Important notes Circular redirect check is on per default and in lenient mode is off in strict mode Authentication attempts excluded from the redirect count and do not affect the max redirect check. Let me know if you agree. Feedback welcome OlegVery nice looks good to me. I have only one very minor suggestion. I would rename CIRCULAR REDIRECTS to ALLOW CIRCULAR REDIRECTS just so that it s more readable on its own. MikeCIRCULAR REDIRECTS renamed to ALLOW CIRCULAR REDIRECTS. Patch committed. Oleg
