Credentials ignored if realm specified in preemptive authentication
When you specifiy credentials for a specific realm using preemptive authentication the credentials are ignored during the first try error 401 back . ... HttpClient client new HttpClient manager client.getState .setCredentials myRealm myHost new UsernamePasswordCredentials user password client.getState .setAuthenticationPreemptive true ... myRealm will be ignored in HttpState s matchCredentials private method because during preemptive authentication it is called with a null realm  private static Credentials matchCredentials HashMap map String realm String host         HttpAuthRealm entry new HttpAuthRealm host realm no possible match here map only contains the version with the realm         Credentials creds Credentials map.get entry         if creds null host null realm null             entry new HttpAuthRealm host null             creds Credentials map.get entry             if creds null                 entry new HttpAuthRealm null realm                 creds Credentials map.get entry                               if creds null             creds Credentials map.get DEFAULT AUTH REALM                  return creds      This is quite logical since the realm comes from the server and you don t contact the server first during preemptive authentication. But it should not be possible to set a realm when using preemptive mode or at least it should not be silently ignored. The current workaround is to set the realm to null in setCredential no elegant but works. Regards PhilippePhilipe As you have already noticed this is not a bug. The behaviour is caused by the nature of Basic authentication preemptive authentication can be done if and only if credentials for the null realm exist. But it should not be possible to set a realm when using preemptive mode or at least it should not be silently ignored. You can use the same HttpState object to connect to different sites. It makes sense to both have credentials with and without realm and preemptive authentication enabled. What we could do is issue a warning if preemptive auth is enabled but no credentials for the null realm are available. This could actually be an enhancement to 2.0 branch which you are reporting the bug against. Would this approach help you Ortwin As long as preemptive auth is irrelevant without a null realm a warning message is a solution. But I don t personally think it is defensive enough since it disable preemptive auth and it could result in large performance degradation since you have to repeat multi-megabytes POST requests two times to get through. It can even not work at all when you expect preemptive auth to work in a load balanced web server environment load balancing is not configured to maintain sessions . What happens is that the first request goes to server 1 and answer is 401 with a session id cookie and then the second request goes to another server 2 who accepts the credentials BUT refuses the session id answer is 401 invalid- session id . It may sound tricky but actually happens So since preemptive auth without a null realm is useless would it be possible to assume null realms if auth is preemtive in Credentials creds Credentials map.get entry Maybe using a Comparable interface on Credentials objects   And BTW thanks for you quick and efficient support Philippe Phillipe no we will not assume realm null if preemptive auth is enabled for security reasons. This could expose credentials to the wrong web application possibly the one of an attacker. If you enable preemptive auth you need to explicitly state by setting the realm to null that you want specific credentials to be sent to any realm. So the responsibility is on the user side. I know this may sound paranoid. But security without paranoia is bad security in my opinion. The load balancing issue is out of our scope. The load balancing must unconditionally support session hand-over in a world where cookies drive the web. If you pretend to be one single machine but behave like n ones problems are at hand. I do not know of any RFC covering load balanced HTTP servers. There is nothing that I want to do here. I am afraid all we can do is issue a warning or throw an exception. If you are dealing with multi-MB requests you should also consider other forms of authentication that suit your needs. Maybe BASIC is just too basic for you. Philippe Just recently we have had a quite few complaints regarding the way preemptive authentication is handled. The official HttpClient authentication guide has been revised to clarify the gray areas in the 2.0 API primarily concerning the prerequisites expected in order to make preemptive authentication functional. Rather unfortunately the site has not been redeployed yet so the updated authentication guide is not available at the moment. You can see the xdoc source  at the following location http cvs.apache.org viewcvs.cgi jakarta-commons httpclient xdocs authentication.xml rev 1.5.2.4 only with tag HTTPCLIENT 2 0 BRANCH view markup But I don t personally think it is defensive enough since it disable preemptive auth and it could result in large performance degradation since you have to repeat multi-megabytes POST requests two times to get through. Preemptive authentication is not the best answer to this problem. The problem can be much better addressed by using so called expect-continue handshake. See ExpectContinueMethod method s javadoc for details. The entire authentication framework in HttpClient has been completely rewritten for the 3.0 release. With HttpClient 3.0 one should already get a warning in case of missing authentication credentials. Furthermore it also provides a better API for credentials assignment and retrieval. I will also try to come up with a better way to assign default credentials. So stay tuned OlegOrtwin no we will not assume realm null if preemptive auth is enabled for security reasons. This could expose credentials to the wrong web application possibly the one of an attacker. If you enable preemptive auth you need to explicitly state by setting the realm to null that you want specific credentials to be sent to any realm. So the responsibility is on the user side. I know this may sound paranoid. But security without paranoia is bad security in my opinion. I definitely agree. Maybe the documentation should reflect this null value for realms in the Preemptive Authentication paragraph The load balancing issue is out of our scope. The load balancing must unconditionally support session hand-over in a world where cookies drive the web. If you pretend to be one single machine but behave like n ones problems are at hand. I do not know of any RFC covering load balanced HTTP servers. There is nothing that I want to do here. Again I agree. I am afraid all we can do is issue a warning or throw an exception. I propose the more defensive exception approach this way it is definitely no more silent. If you are dealing with multi-MB requests you should also consider other forms of authentication that suit your needs. Maybe BASIC is just too basic for you. Indeed but I don t choose the authentication mechanism and people like adding passwords everywhere it may be paranoïd but as you said security without paranoia is bad security . Thanks again for you quick answer and the level of support offered. Philippe P.S. Proposition maybe the next version 3 should support a way to set preemptive credentials without specifying a null value but a more explicit sentinel Ortwin Sorry I did nt see you answer before posting. Everything is ok and solved on my side. Best Regards Philippe Van DyckThrowing an exception in the case that preemptive authentication is set but no default credentials are supplied would seriously break our application and I would imagine a number of others. If you use HttpClient to connect to user defined hosts and provide a mechanism whereby the user or system administrator can specify login details in our case through a configuration file you should 1. Enable preemptive authentication so that it works whenever the credentials are available. 2. Register whatever set of predefined credentials you are given. The most common case for us is that preemptive authentication is enabled but no credentials are registered with HttpClient. A warning message is fine but an exception is definitely not a good thing.Created an attachment id 11826 Patch against 2.0 branch The patch provides extra warning logs in case of preemptive authentication failure due to missing default credentials OlegOleg Looks good to me. MikeLooks good. Philippe does the patch do what you want Ortwin GlÃ ck Perfect. No more silent preemptive failure. BTW I am not a fan of null values especially when they have a meaning. I took a look at the HEAD of v3 and I propose to define a new Credential class that does not contain a realm something like a DefaultCredentials class. I will take a closer look at the source code in the next weeks and come back if it suits you with an update to the v3 branch. PhilippeOk thanks. Please leave closing the bug to us developers. This ensures the patch will get checked in actually.Philippe I ll take care of that this weekend. I had my gripes with the way credentials are handled while rewriting the authentication framework for 3.0 but there have always been more pressing issues till now OlegPatch committed to 2.0 branch. OlegCreated an attachment id 11834 Patch against CVS HEAD take 1 Here s my first stab at it Changelog HttpAuthRealm was a poor choice of a name. Renamed to AuthScope ANY HOST ANY PORT ANY REALM ANY SCHEME static variables can be used instead of non-descriptive null -1 null null to assign and retrieve credentials HttpState setCredentials String String Credentials   HttpState getCredentials String String   HttpState setProxyCredentials String String Credentials   HttpState getProxyCredentials String String Extra warning logs in case of preemptive authentication failure due to missing default credentials Extra test case Let me know what you think OlegHi Oleg I like it. It definitely cleans things up. There are only two problems that I see  - The various static variables in AuthScope should be final I think  - HttpState.matchCredentials doesn t handle all combinations of AuthScopes. This is not a new problem I think. For example the following assertion fails         AuthScope scope new AuthScope host 80 Realm Scheme         Credentials creds new UsernamePasswordCredentials name password         HttpState state new HttpState         state.setCredentials new AuthScope host 80 AuthScope.ANY REALM Scheme creds         assertEquals creds state.getCredentials scope It may be better to just iterate over the set of credentials and do a more manual match instead of relying on hashCode . Mike - The various static variables in AuthScope should be final I think My oversight. Will be corrected. - HttpState.matchCredentials doesn t handle all combinations of AuthScopes. HttpState.matchCredentials is clearly broken as it is. Besides it generates unnecessary garbage pretty much per every invocation. Do you mind if I submit the patch and deal with broken HttpState.matchCredentials separately Oleg Do you mind if I submit the patch and deal with broken HttpState.matchCredentials separately Not at all. Sounds like a plan. MikePatch committed to CVS HEAD. Oleg
