The values for the Via header are created by httpclient-cache for each cached and backend request
The Via header that gets generated and inserted by the caching layer is done repeatedly in the HTTP conversation even if the constructed string is constant for each protocol version that is involved. The proposed patch constructs a map of generated values held in memory with the associated ProtocolVersion as a key and uses read write locks to access the data. This solution minimizes the time to generate such a value from several milliseconds to 40-50 microseconds.Hi Vasile Sorry to just be getting around to this now. Can you explain the reason for breaking out a ViaHeaderCache as a separate class Why not just a HashMap Since this is a true function given a ProtocolVersion I always generate the same Via header there s no need to put locks around this as once the cache is populated it won t be modified and even if there is a race condition between two threads trying to populate the cache they ll both arrive at the same answer. Would you like to revise your patch just to use a plain-old HashMap for this JonHi Jon    Thanks for reviewing my patch.    I wanted to keep the request operations thread safe but if you think race conditions are not a problem I can use a simple map my initial solution was a simple HashMap as you suggest . Do you think a ConcurrentHashMap would be more appropriate so we don t have stale string values I m thinking that a different thread might see an incomplete Via value in this map if we use a simple HashMap . AlinNo a regular HashMap is fine Java Strings are immutable and a put operation should just be a pointer swap. Patch modified according to Jon s comments to use a simple HashMap.Ok patch checked in. Thanks much Alin 
