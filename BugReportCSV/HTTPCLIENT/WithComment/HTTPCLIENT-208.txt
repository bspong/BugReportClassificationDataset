Netscape proxy problem wtih POST
Description When using httpClient to POST to a http url through a Netscape proxy server the httpClient failed due to read error when reading status line. The log seem to indicate that the proxy is talking HTTP 1.0 and does not expect the POST data to come. I am using a modified version of the ClientApp from examples. I will attach both the test program and log files. Workaround If use PostMethod.setUseExpect true it will work. But in many cases it would be slower. Related issues In doing the test I also found out that the httpClient PostMehtod does not work when the request body is NOT set not calling setRequestBody . It also does not work with empty body setRequestBody . The attached clientApp.properties file has flags to test each case and I will attach the logs as well. Excuse my ignorance I do not know for sure what the HTTP spec. says about the body in the POST method. But at least if the caller app is wrong in not setting the body some exception should be thrown. It could also be my server s problem please let me know if that is the case I am using weblogic server 6.1 .Created an attachment id 6276 failed log for Netscape proxy. Created an attachment id 6277 working log when using expect header Created an attachment id 6278 Modified ClientApp test program Created an attachment id 6279 Teh property file used in test program. Created an attachment id 6280 log for POST failure when setRequestBody not called Created an attachment id 6281 log for POST failure when setRequestBody called no except Created an attachment id 6282 log for POST failure when setRequestBody called use except Note regarding empty request body According to rcf2616 a message body or transfer encoded message body is allowed to be empty. I would suggest that no call to setRequestBody should be required and both setRequestBody and setRequestBody null should be acceptable which would of course send a empty body.Is this with alpha-3 or a nightly build MikeSorry ignore that last one. MikeIt is nightly build 0507.I found this from the RFC 2616 8.2.4 Client Behavior if Server Prematurely Closes Connection    If an HTTP 1.1 client sends a request which includes a request body    but which does not include an Expect request-header field with the     100-continue expectation and if the client is not directly    connected to an HTTP 1.1 origin server and if the client sees the    connection close before receiving any status from the server the    client SHOULD retry the request. If the client does retry this    request it MAY use the following binary exponential backoff    algorithm to be assured of obtaining a reliable response       1. Initiate a new connection to the server       2. Transmit the request-headers       3. Initialize a variable R to the estimated round-trip time to the          server e.g. based on the time it took to establish the          connection or to a constant value of 5 seconds if the round-          trip time is not available.       4. Compute T R 2 N where N is the number of previous          retries of this request.       5. Wait either for an error response from the server or for T          seconds whichever comes first       6. If no error response is received after T seconds transmit the          body of the request.       7. If client sees that the connection is closed prematurely          repeat from step 1 until the request is accepted an error          response is received or the user becomes impatient and          terminates the retry process. About empty boby I noticed httpClient is NOT sending the 0 content-length when the body is either null or empty. The RFC says Any Content-Length greater than or equal to zero is a valid value. . Should httpClient send the 0 content-length header There are two issues in this report that should be tackled separately as they are not logically related 1. The first issue is not a bug. The Netscape proxy is absolutely correct about closing the connection as soon as it discovers that authentication credentials are either missing or invalid. HttpClient in its turn SHOULD check for such condition but it MUST NOT. The Expect 100-continue handshake has been designed to specifically address this problem. Unfortunately the handshake cannot be activated per default as many other proxies notably squid can t properly cope with Expect 100-continue handshake. Still we should make HttpClient monitor the connection for incoming data when submitting entity enclosing requests. HttpClient should stop transmitting data if the target server is already sending back a response. This should be regarded as an improvement not a bug fix though. The issue has been already reported http nagoya.apache.org bugzilla show bug.cgi id 14036 Its resolution is targeted for 2.1 release 2. HttpClient does not properly handle empty entity enclosing requests. This is clearly a bug and must be fixed as soon as possible. I ll be working on a fix. OlegCreated an attachment id 6284 Patch take 1 Looks good to me. Moving addContentLengthRequestHeader to EntityEnclosingMethod was a good idea. MikeGood but we should not change the HttpMethodBase.addContentLengthRequestHeader method. The override in EntityEnclosingMethod suits the purpose well. Anyone else that is already extending HttpMethodBase may be relying on this behaviour so it should be left in the base class.Created an attachment id 6293 Patch take 2 Jeff I do find it potentially error-prone that HttpMethodBase addContentLengthRequestHeader adds Transfer-encoding chunked header not really knowing if chunk encoding is implemented by its sub-class or if it is applicable to this method at all. OlegCreated an attachment id 6331 Patch take 3 The new patch is intended to address Jeff s and Mike s concerns. Feedback welcome. Oleg Looks good. Only one question. Should HttpMethodBase also include the logic for handling 0 length bodies MikeMike In my opinion HttpMethodBase should not include any logic for handling content length. That should be the responsibility of entity enclosing sub classes. OlegPatch committed Oleg.
