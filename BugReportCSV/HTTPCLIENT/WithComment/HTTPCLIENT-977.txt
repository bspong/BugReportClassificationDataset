provide a memcached implementation for HttpCache
The feature here would be an implementation of the HttpCache interface that stored cache entries in memcached.We have some outdated code that does this that we are starting to pick up to implement and contribute back for this one. One major question is how the contribution should be structured. Should this be a new top-level module under httpcomponents-client so that it can be optionally included as desired Or should it show up as a new package with associated dependencies under the httpclient-cache module -This patch adds the package org.apache.http.impl.client.cache.memcached and tests for this class. - The package contains a single class MemcachedHttpCacheStorage which is a HttpCache implementation built around Memcached. -It uses Memcached client version 2.5 for JAVA. The pom.xml was also updated to incorporate this. -The patch implements HttpCacheOperationException. This patch is submitted by the permission of my employer. Thank you Mohammed AzeemMohammed et al There are some bad news. It turned out that memcached is licensed under kind of license of its own 1 . It looks like MIT type of license to me but I am not sure and I am not a legal expect. Wikipedia categories that license as Permissive free software licence but it does not necessarily mean it is compatible with ASLv2 used by Apache products. I am very reluctant to go through the pains of dealing with our legal folks in order to find out whether or not the license is compatible with ASLv2 only to be able to include just one optional class. Can you live with memcached cache storage implementation not being a part of stock version of HttpClient Oleg 1 http github.com memcached memcached blob master LICENSE 2 http en.wikipedia.org wiki Permissive free software licenseOleg I work with Jonathan and Mohammed since we are using spymemcached to talk to memcached isn t spymemcached s license which is MIT the one we must be concerned with -mattIn either event I would say that we probably need to remove this contribution in the short term so as not to hold up the overall release of the next version of the client. We can then work with Oleg to find the right path to either 1 Contribute to ASF because the license is indeed compatible as determined by the ASF. 2 Source Store the contribution on something like google code with ASFs agreement that we can put a link to the google code site and the memcached implementation for people to download Both paths should still provided the needed functionality to people - just a question of the ease with which they can find it. There may be other options that I haven t listed. JoeMIT license is compatible with ASLv2 so at the very least we would not need to go through the license approval process. Nevertheless we would have to comply with the requirements of the license such giving a proper attribution to the author of the library and distributing a copy of the license itself with each the release package of HttpClient. ASL release process is already an enormous pain the in rectum and I am reluctant to make it even more complex because of an optional component. What could be another possibility is using the memcache storage backend as an example of writing a custom HttpCacheStorage in the tutorial. This way we would not have to deal with distribution of the library itself while the implementation would still be available to the users albeit in source only. What is your preference OlegI would say we take two paths. 1 We do as you describe and place the source into a tutorial about the use of the tool to make sure that there is adequate reference to a memcache implementation 2 We have a link out to a remote google code as to provide a place for ongoing support and work on memcached caching and implementation work to be done. This will allow there to be a working version included in the apache release and for there to be a place to get potentially newer releases outside of the apache release cycle. Does this make sense or is it over kill JoeI personally think that would be an overkill for a library which essentially consists of just one file. Let s revisit this issue in the BETA development phase. OlegCould it be an optional dependency that is not included in the HC distribution That way the source code can be included in svn and the src distribution and the Memcached dependency would be used by Maven when building the source but the Memcached artifacts themselves would not be included in any distribution so no licensing needs to be changed. I am not sure this would save us from having to give appropriate attribution to the original author and to distribute a copy of the license with every copy of the caching module. I may be wrong here though. OlegIf we make the memcached client Maven dependency s scope be provided does that fix our licensing issues Then a client may link it into their executable at their option and we can just provide instructions on how to do so if desired. Then there would actually not be anything included from that project neither source code nor compiled binary . Failing that can we just include the source code for MemcachedHttpCacheStorage.java in httpclient-contrib for now We ll separately pursue options for providing non-source access perhaps it s worth building an Apache 2.0-licensed Java memcached client for example . In my opinion yes that would be fine. Either optional or provided would stop the Memcached dependency getting included so there would be no additional licensing requirements for the HC distributions.I see no point being a more fervent Catholic than the Pope himself. As we are no going to distribute the memcached client with the cache module most likely we are all clean. If there is any issue with the attribution clause of the MIT license we can add it later. Mohammed Would it be a big deal for you to rebuild the patch against the latest snapshot off the trunk OlegOleg Sure I can rebuild the patch against the latest snapshot off the trunk. MohammedRebuilt the patch against the latest trunk. So the patch now includes MemcachedHttpCacheStorage.java and TestMemcachedHttpCacheStorage.java. The patch is being submitted with the permission of my employer.Patch committed. Many thanks Mohammed Is there any chance we could avoid buffering the cache entries in memory when saving to loading from the cache storage Oleg
