HeaderElement parse String implementation is not optimal
The cookie setted by the LocalDirector 416 Version 4.2.3 has a bug. It sets for Tuesday and Thursday Tues and Thur instead of the canonical Tue and Thu . This break the parsing stage and stop HttpClient to work for 2 days a week. Of course I modified the parse method in HeaderElement class but everytime I download a new version I have to remake the jar.... It s possible to include this into the CVS files Luca Of course I would prefer to see the problem fixed in LocalDirector in the first place. This said I do not see it as a big deal to augment the set of tokens that HeaderElement parse should accept as valid ones. On the other hand there s a pretty good chance of HeaderElement parse method being replaced with something saner in post-2.0 development. There are other problems related to this very piece of code HTTPCLIENT-92 and REALLY would like to see it go. If you can live with a patched version of 2.0 release we would definitely provide a fix for the problem in 2.1 release. OlegThank you Oleg of course I will use my patched release of the library but I hope to see it in the main release from v2.1 We tried to patch the LocalDirectory but that is a piece of hardware and the cookie setting are REALLY hard-coded. Anyway patching it is really simple as putting this lines in parse                 if tokenizer.hasMoreTokens                     String s nextToken.toLowerCase                     if s.endsWith tues                      nextToken s.substring 0 s.length -1 tokenizer.nextToken                                          else if nextToken.endsWith thurs                      nextToken s.substring 0 s.length -2 tokenizer.nextToken                                          else if s.endsWith mon                          Standard from here Bye. L.Luca I believe the way HeaderElement parse String method is currently implemented is sub-optimal. The idea is to completely do away with that ugly check for comma in the expiry date and let the DateParser decide whether the expiry date is malformed or not. But we can t make such a radical change in 2.0 release. It will have to wait until 2.1 OlegCreated an attachment id 7268 Patch take 1 Folks This patch is intended to improve one of the uglies and most convoluted spots in HttpClient HttpElement parse. The parser will no longer try to compare header elements with week days or anything of the sort. Two weeks of my spare time have gone into optimization of the parsing routines. So I have a fair degree of confidence that the parsing routine will have decent performance. Besides I did my very best to reuse common parsing patterns whenever possible. Feel free to start throwing bad tomatoes at me. Comments critique corrections are as always welcome. OlegHi Oleg I have just a few minor comments. - There are a few places where methods that return arrays or a list return null. I think they should instead return an empty array or list. e.g. HeaderElement.parseElements ParameterParser.parse . - Header.getValues is using the newly deprecated HeaderElement.parse . - There are a number of style violations. Mostly minor stuff like spacing and missing or incorrect javadocs. It s nitpicking but we want to keep that code pretty Overall I think this looks good. Nice work as usual. Mike There are a few places where methods that return arrays or a list return null. I think they should instead return an empty array or list. e.g. HeaderElement.parseElements ParameterParser.parse . I think the above mentioned parsing routines return null only when receive null as input. They always return an array or list when input is not a null empty string for instance . If you think it is still inconsistent I ll happily change these methods Header.getValues is using the newly deprecated HeaderElement.parse . Good catch. Corrected. There are a number of style violations. Mostly minor stuff like spacing and missing or incorrect javadocs. It s nitpicking but we want to keep that code pretty It turned out that all javadoc warnings had been caused by removal of deprecated methods. Corrected. Oleg Created an attachment id 7269 Patch take 2 I m of the belief that methods returning Collections or arrays should never return null. This is mostly to avoid NPEs when iterating over values returned from such methods. The only exception I would make is if the Javadocs explicitly say that null will be returned for some particular reason. MikeAgreed. I have changed the code accordingly. I can t create a patch right now though as cvs.apache.org appears to be having some problems. I ll post it later. OlegCreated an attachment id 7272 Patch take 3 Patch comitted to CVS HEAD Oleg
