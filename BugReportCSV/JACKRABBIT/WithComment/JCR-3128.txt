Problem with formerly escaped JCR node names when upgrading to Jackrabbit 2.2.9
The following unit test fails code import static org.junit.Assert. import org.apache.jackrabbit.util.Text import org.junit.Test public class TestEscaping     Test    public void testEscaping throws Exception            expect this as an escaped string e.g. formerly escaped with jackrabbit 1.6       String escaped nam 27e       String unescaped Text.unescapeIllegalJcrChars escaped       assertEquals escaped Text.escapeIllegalJcrChars unescaped     code This is a major problem when upgrading from 1.6.x to 2.2.9. The node names that were escaped in jackrabbit 1.6 are not longer escaped and that breaks the backward compatibility. I think the problem comes in with JCR-2198.Hi Single and double quote are valid since JCR 2.0I know but the provided test case shouldn t fail. I think I need backward compatible escaping unescaping methods in the Text util and the provided test case should also work.Yes you are right it is not backward compatible but the Method works as designed. Please look into the TextTest.testEscapeIllegalJcrChars Method.Then the design contract of the method is wrong because unescaping and then escaping should produce the origin string... 1 What was it escaped with 2 No the contract would be unescape escape x x not the other way around.1 It was escaped with the Text util from Jackrabbit 1.6 Text.escapeIllegalJcrChars. In my opinion you really have a problem here when migrating from Jackrabbit 1.6. But anyway I solved my problem with copying the jackrabbit 1.6 code of escaping unescaping to my app and now I am using that code instead of Text util. That works in this case.Yep this is a clear backwards compatibility issue if you re using escapeIllegalJcrChars for example to map arbitrary strings to JCR names. An upgrade shouldn t break that mapping. Unfortunately changing the mapping again now would just create another backwards compatibility issue. So my recommendation would be to either resolve this just as Won t Fix with a recommendation to use Sascha s workaround from above or to add a new escapeIllegalJcr10Chars method for use by clients that rely on the older mapping. In either case a client code change is needed for the 1.x to 2.x upgrade in cases where the client relies on this mapping.Totally agree with Jukka and for me the best solution would be to have a escapeIllegalJcr10Chars method so I don t need to copy the old jackrabbit code.I committed such a escapeIllegalJcr10Chars method in revision 1188590 and merged it to the 2.2 branch in revision 1188595. Introducing new method signature in a patch release like 2.2.10 is a bit troublesome ideally there d be no API changes but since this is a workaround for a backwards compatibility issue I consider the benefits to outweight the potential drawbacks.
