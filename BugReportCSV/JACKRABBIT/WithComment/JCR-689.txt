Minimize calls to PersistenceManager
In some situations the PersistenceManager is called even though it is not necessary. E.g. when new items are created the method NodeImpl.getOrCreateProperty will always check if there is an already existing property state. If the node is new the call will always go down the full item state stack and ask the PersistenceManager if it knows the property id. This is unnessessary because there will never exist properties in the persistence manager for a new node that has not been saved yet. I propose to add a check to the method to see if the node is new and does not yet have a property with the given name. In that case the property can be created without further checks. With the patch applied the time to transiently create 1000 nodes with 4 properties each drops from 1485 ms to 422 ms. With the patch applied the time to transiently create 1000 nodes with 4 properties each drops from 1485 ms to 422 ms. excellent 1 for the patchApplied the patch in revision 492235There are more situations where the persistence manager is called unnecessarily. While the previously attached patch improves the situation when items are transiently added there are still many unnecessary calls to persistence manager and the access manager when changes are saved. - As a convenience the methods ItemImpl.validateTransientItems retrieves item instances based on item states even though all required information is also present in the item state. Retrieving an item instance will always check for access rights which is not necessary in this method. The same applies to ItemImpl.initVersionHistories and ItemImpl.persistTransientItems . - The EventStateCollection contains redundant calls to the item state manager for added items. Attached patch solves this issue. Please review.The methods getItemState and hasItemState in the SharedItemStateManager try to resolve the given ItemId through three sources. Is there a particular reason for the order If not would it then not be good to swap the second and third check first check the virtual providers as this is all in memory if I understand correctly and then the non-virtual internal storage that might invoke the persistence manager 1 for JCR-689-r492483.patch cheers stefanCommitted second patch in revision 518986Martijn wrote The methods getItemState and hasItemState in the SharedItemStateManager try to resolve the given ItemId through three sources. Is there a particular reason for the order If not would it then not be good to swap the second and third check first check the virtual providers as this is all in memory if I understand correctly and then the non-virtual internal storage that might invoke the persistence manager Some virtual providers are in memory but not the one that provides the version items. The implementation kind of assumes that the majority of item accesses are items from the workspace and that version items are accessed less frequently.
