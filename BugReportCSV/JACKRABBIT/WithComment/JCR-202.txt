Add configuration options for search manager
Right now if the search manager is active everything is indexed even the system branch of a workspace with the versions. take parameters conditions into account whether a node should be indexed - path - node type - property type - property name see also http thread.gmane.org gmane.comp.apache.jackrabbit.devel 3343With resolution of JCR-257 it is now possible to exclude jcr system from indexing.Hello I started working on this issue and I have some ideas that I would like to discuss here. To cut a long story short I think of implementing this configuration as a set of rules for including excluding elements. Before adding node to index the rules should be checked and indexing engine should apply to first rule this node matches. I think of storing this configuration in XML file and my first thought is workspace.xml and repository.xml as a template for workspace.xml . XML configuration should look like as follows      SearchConfiguration              The SearchConfiguration element allows to include exclude parts of         repository from indexing. It is achieved using rules. First rule is         the most significant one and the last one default rule is the least         significant one.         If no SearchConfiguration is specified the default configuration is         assumed          SearchConfiguration            SearchRule action include          SearchConfiguration           ELEMENT SearchConfiguration SearchRule              The SearchRule element includes excludes part of repository from         indexing. It has one required attributes - action to be taken when node         matches this rule - include or exclude this node from indexing. If no         other attributes are spefified all nodes will match this rule.         If nodePath is specified - nodes in given path and below will match.         Any valid java.util.regex regular expression is allowed.         If nodeType is specified - nodes of given type will match. Both         attributes can be specified at once.           ELEMENT SearchRule NodeAttribute      ATTLIST SearchRule       nodePath CDATA IMPLIED       nodeType CDATA IMPLIED       action include exclude REQUIRED              The NodeAttribute element allows to include exclude attributes of node         from indexing. It has one required attributes - action to be taken when         attribute matches this rule - include or exclude this attribute from         indexing. If no other attributes are spefified all attributes will         match this rule.         If attributeName is specified - attributes with given names will match.         Any valid java.util.regex regular expression is allowed.         If attributeType is specified - attributes of given type will match.         Both attributes can be specified at once. If no NodeAttribute is         specified for search rule default configuration is assumed          NodeAttribute action include           ELEMENT NodeAttribute EMPTY      ATTLIST NodeAttribute       attributeName CDATA IMPLIED       attributeType CDATA IMPLIED       action include exclude REQUIRED      SearchConfiguration I am waiting for your comments and suggestions. Regards JanMay the above rule-based suggestion be only a default implementation of the SearchConfiguration IMHO with these simple XML rules you can t cover all possibilities. What about SearchConfiguration class whatever Where the class is an implementation simply answering to boolean include Node node boolean exclude Node node Your proposed rule-based implementation may become the standard default one while enabling more advanced needs to be also implemented. Thoughts Yes Cédric I find it a good idea to make this configuration as wide as possible especially that I can easily think of more sophisticated cases e.g. using decision tree . In that case I ll add two more parameters to SearchConfiguration ATTLIST SearchConfiguration       class CDATA IMPLIED       configurationFile CDATA IMPLIED first one will allow to force use of different configuration mechanism and second one to pass configuration file for this specific mechanism. Although I will leave possibility to put configuration into repository.xml. Regards  JanOne more thing - I am going to implement only boolean include Node node just to avoid confusions exclude node is equivalent to include node .Ok after quite a while of work here it comes. I was not as easy as I thought and I had to change few parts of the code. If you have any questions about this changes please ask without hesistation. Patch consists of 16 new files in folder structure of course and 11 changed files in standard svn .patch file . Regards  JanThere are a couple of issues with the proposed patch - The configuration is query handler dependent and should therefore not be prescribed in the repository.xml. The configuration should rather be added as a separate XML file. - Completely excluding certain nodes from indexing can have severe side effects because the index depends on each node being indexed to resolve the node hierarchy. - Matches of property names do not respect the namespace URI - The class NodeStateLocationAware extends from NodeState and adds the path as a fixed value the path should rather be retrieved from a hierarchy manager.This is an alternative implementation to solve this issue. It also supports indexing aggregates and boost configuration.Committed my proposed patch in revision 530696Fixed malformed DTD in revision 535238
