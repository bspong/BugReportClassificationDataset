NullPointerException in ItemManager
We have a lot of these occurring java.lang.NullPointerException at org.apache.jackrabbit.core.ItemManager.getDefinition ItemManager.java 206 at org.apache.jackrabbit.core.ItemData.getDefinition ItemData.java 99 at org.apache.jackrabbit.core.AbstractNodeData.getNodeDefinition AbstractNodeData.java 73 at org.apache.jackrabbit.core.NodeImpl.getDefinition NodeImpl.java 2430 at org.apache.jackrabbit.core.ItemValidator.isProtected ItemValidator.java 373 at org.apache.jackrabbit.core.ItemValidator.checkCondition ItemValidator.java 273 at org.apache.jackrabbit.core.ItemValidator.checkRemove ItemValidator.java 254 at org.apache.jackrabbit.core.ItemRemoveOperation.perform ItemRemoveOperation.java 63 at org.apache.jackrabbit.core.session.SessionState.perform SessionState.java 200 at org.apache.jackrabbit.core.ItemImpl.perform ItemImpl.java 91 at org.apache.jackrabbit.core.ItemImpl.remove ItemImpl.java 322 at org.apache.jackrabbit.core.NPEandCMETest TestTask.run NPEandCMETest.java 87 at java.lang.Thread.run Thread.java 679 I ll attach a junit test to reproduce this exception.The test also shows a different issue with a ConcurrentModificationException which I filed under a different issue.Concurrent writes are not allowed on a session. See http www.day.com specs jcr 2.0 4 Connecting.html 4.1.2 20Thread 20SafetyAs the test shows there are no concurrent writes going on on the same session. Each thread obtains its own session.Also affects 2.2.8Your are right. I thought getSuperuserSession returns the same cached session every time. But this is not the case.i am now able to reproduce the NPEs and CMEs thanks for providing a test case this is a regression of JCR-2171.Moving the item state notifications back inside the SISM write lock would also help with JCR-2272 so I think doing so would be a good idea. Especially since the deadlock scenario from JCR-2171 should no longer be possible even without the JCR-2171 fix and I don t recall any other similar deadlocks.fixed in svn r1174822 by reverting the change introduced by JCR-2171. JCR-2171 doesn t include a test case. however i am optimistic that the dead lock issue has been resolved as of JCR-2650.I added the missing license header to NPEandCMETest.java in revision 1174887. This is a good candidate for the 2.2.9 release so I merged the fix to the 2.2 branch in revision 1174890.Hmm unfortunately this introduces a deadlock even though it s not exactly the same as in JCR-2171. See below for the case where two concurrent threads are trying to save the same items stack traces from ConcurrentImportTest Executor 12 prio 10 tid 0x00007f3aac5df000 nid 0x7088 waiting for monitor entry 0x00007f3a84247000    java.lang.Thread.State BLOCKED on object monitor at org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState LocalItemStateManager.java 169 - waiting to lock 0x00000007dbeb3118 a org.apache.jackrabbit.core.state.XAItemStateManager at org.apache.jackrabbit.core.state.XAItemStateManager.getItemState XAItemStateManager.java 260 at org.apache.jackrabbit.core.state.SessionItemStateManager.stateCreated SessionItemStateManager.java 796 at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateCreated StateChangeDispatcher.java 94 at org.apache.jackrabbit.core.state.LocalItemStateManager.stateCreated LocalItemStateManager.java 439 at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateCreated StateChangeDispatcher.java 94 at org.apache.jackrabbit.core.state.SharedItemStateManager.stateCreated SharedItemStateManager.java 405 at org.apache.jackrabbit.core.state.ItemState.notifyStateCreated ItemState.java 233 at org.apache.jackrabbit.core.state.ChangeLog.persisted ChangeLog.java 309 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.end SharedItemStateManager.java 785 at org.apache.jackrabbit.core.state.SharedItemStateManager.update SharedItemStateManager.java 1500 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 352 at org.apache.jackrabbit.core.state.XAItemStateManager.update XAItemStateManager.java 354 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 327 at org.apache.jackrabbit.core.state.SessionItemStateManager.update SessionItemStateManager.java 288 at org.apache.jackrabbit.core.ItemSaveOperation.perform ItemSaveOperation.java 258 at org.apache.jackrabbit.core.session.SessionState.perform SessionState.java 200 at org.apache.jackrabbit.core.ItemImpl.perform ItemImpl.java 91 at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 329 at org.apache.jackrabbit.core.session.SessionSaveOperation.perform SessionSaveOperation.java 64 at org.apache.jackrabbit.core.session.SessionState.perform SessionState.java 200 at org.apache.jackrabbit.core.SessionImpl.perform SessionImpl.java 360 at org.apache.jackrabbit.core.SessionImpl.save SessionImpl.java 809 Executor 0 prio 10 tid 0x00007f3aac63c800 nid 0x707c in Object.wait 0x00007f3a84e53000    java.lang.Thread.State WAITING on object monitor at java.lang.Object.wait Native Method - waiting on 0x0000000784e9b808 a org.apache.jackrabbit.core.state.DefaultISMLocking at java.lang.Object.wait Object.java 485 at org.apache.jackrabbit.core.state.DefaultISMLocking.acquireReadLock DefaultISMLocking.java 118 - locked 0x0000000784e9b808 a org.apache.jackrabbit.core.state.DefaultISMLocking at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireReadLock SharedItemStateManager.java 1847 at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState SharedItemStateManager.java 265 at org.apache.jackrabbit.core.state.LocalItemStateManager.getPropertyState LocalItemStateManager.java 133 at org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState LocalItemStateManager.java 175 - locked 0x00000007dbeb3118 a org.apache.jackrabbit.core.state.XAItemStateManager at org.apache.jackrabbit.core.state.XAItemStateManager.getItemState XAItemStateManager.java 260 at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState SessionItemStateManager.java 162 at org.apache.jackrabbit.core.ItemManager.getItemData ItemManager.java 370 at org.apache.jackrabbit.core.ItemSaveOperation.validateTransientItems ItemSaveOperation.java 538 at org.apache.jackrabbit.core.ItemSaveOperation.perform ItemSaveOperation.java 216 at org.apache.jackrabbit.core.session.SessionState.perform SessionState.java 200 at org.apache.jackrabbit.core.ItemImpl.perform ItemImpl.java 91 at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 329 at org.apache.jackrabbit.core.session.SessionSaveOperation.perform SessionSaveOperation.java 64 at org.apache.jackrabbit.core.session.SessionState.perform SessionState.java 200 at org.apache.jackrabbit.core.SessionImpl.perform SessionImpl.java 360 at org.apache.jackrabbit.core.SessionImpl.save SessionImpl.java 809 I restored the JCR-2171 fix in revision 1176465 to prevent the deadlock. In the same revision I added explicit checks against the NPEs and CMEs thrown by the test case. The CMEs are avoided by explicit synchronization and NPEs cause InvalidItemStateExceptions instead. A more thorough solution would probably be preferable but at least the current solution avoids the RuntimeExceptions so I m re-resolving this as fixed for now. I also merged the change to the 2.2 branch in revision 1176482 so we can still ship this in 2.2.9. I restored the JCR-2171 fix in revision 1176465 to prevent the deadlock. ok In the same revision I added explicit checks against the NPEs and CMEs thrown by the test case. The CMEs are avoided by explicit synchronization and NPEs cause InvalidItemStateExceptions instead. hmm i don t think we can get rid of the related concurrency issues completely. the JCR-2171 fix is IMO wrong. i am sure we ll run into more similar issues sooner or later. OTOH i agree that the deadlock issue is severe and needs to be addressed. if possible i would prefer if we d try to solve the deadlock issue without the JCR-2171 fix.
