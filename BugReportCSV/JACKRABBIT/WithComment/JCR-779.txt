Timeout for Session and or Lock
I think there needs to be a mechanism where we can set the timeout for a particular jcr Session. Or at the most there should be a provision to set a timeout for a lock on a node. Hope this is implemented soon. Thanks.Changing the priority as it s possible for you to achieve the same functionality with extra client code. Session timeouts I m not convinced as long as there s a reference to a Session instance it shouldn t just be closed without explicit action from the client. Once the reference is gone the session should get closed as a part of the garbage collection process. I m actually not sure whether this happens currently. If not please file a new bug report for that. Lock timeouts Again not convinced since session-scoped locks will expire when the associated session is closed and open-scoped locks should by definition persist until they are explicitly unlocked. We perhaps should provide some administrative mechanism for retrieving the lock tokens of all active locks to avoid situations where the lock token of an open-scoped lock gets lost but that would again be a different feature request. I m inclined to resolve this issue as Won t Fix but please counter my arguments if you think I m wrong.I think lock timeouts are very valuable for open-scoped locks if only for the reason that real-world clients MS Office through WebDAV expect them. As already posted in the user-mailinglist I currently deal with the MS Office SimpleWebdavServer and Jackrabbit setup. Without implementing one of the proposed mechanism lock timeouts or the administrative mechnism for the lost lock-tokens this setup and an MS Office Webdav client is not what I call an exotic client can t be used. I am working on a temporary solution providing a logging mechanism for the lock-tokens to the WebdavServer. With the stored lock tokens a seperated batch job should be able to release the locks. Not a beauty - but it should work. Perhaps someone has a better idea or can raise the priority of this task regards It seems to me that this feature is mostly needed and could be implemented in the WebDAV server instead of directly in the core. I m not too eager to add custom extensions for features that can be reasonably be implemented on top of the JCR API. Changing component from core to webdav .i don t agree that this is a WebDAV issue... as i said in the mailing list its not the responsibility of a dav-server to determine whether a lock present on a node might still be used or if it can be removed. the webdav implementation represents a dav-server on top of a jsr 170 repository present and not on top of jackrabbit. and according to the specification it s up to the jsr 170 implementation if locks can timeout and when they timeout. therefore i don t think the dav-server should deal with this. removing webdav component again.There are basically two ways to implement proper support for the Timeout header in a LOCK request based on just the JCR API 1 Keep track of opened locks and their timeout values in the WebDAV server explicitly unlocking them when the timeout is reached. 2 Implement lock timeouts in jackrabbit-core and use the custom API extension to access that functionality in the WebDAV server. Option 1 is localized to the WebDAV implementation requires no JCR API extensions and will work with all JCR implementations that support locking. I think it s by far a better solution to this issue. I don t think that option 1 is going to work well. It would introduce local state into the the WebDAV server component where before there wasn t any. Furthermore it will be hard to implement in setups where many WebDAV server instances talk to the same JCR server think HTTP-level load balancing . Furthermore an existing document store may already support lock timeouts very likely if it also supports WebDAV in which case it would be much easier just to expose that through the JCR API. Hmm good points. What would the JCR API extension look like I feared you would ask .- For lock timeout we would - need the ability to specifiy it upon lock creation or set it afterwards - need to reset the lock timeout - discover the current value If we don t want to change the Java API we could just have a mixin node type that defines the timeout information and make that writeable such as ext lockable extends mix lockable   - ext lockRefreshed date ignore   - ext lockTimeoutSeconds long ignore Setting ext lockRefreshed would refresh the lock.ext lockTimeoutSeconds would used to compute when the lock times out. For WebDAV we IMHO also would need one additional property to persist the lock owner information see http greenbytes.de tech webdav draft-ietf-webdav-rfc2518bis-18.html owner gt . I like the approach of using the content model for this and actually I don t think we d even need any special processing or magic properties to make this happen. Even a standard node type like the following should be enough      ext lockable mix lockable mixin     - ext timeout DATE ignore We could add a process in Jackrabbit or in an external client that has some way to retrieve the lock token of a node that observes such ext lockable nodes an unlocks them when the timeout has been reached. Refreshing the timeout would require just updating the ext timeout property. I m not sure if there s a chance for some race conditions on locking unlocking the node and setting the timeout property. Would that cover the use case or do we need some more internal mechanism Actually it probably will not be sufficient. The store I m currently working with requires the timeout to be known at the time of lock creation and the other one I m familiar with does so as well . As lock creation writes directly to the workspace it seems that we really need a lock method with additional parameters after all. JCR 2.0 has a lock timeout hint mechanism. I m looking at implementing it in Jackrabbit.The JCR 2.0 timeout hint mechanism implemented in revision 805431.
