replacing an extended mixin with it s supertype is problematic
node.addMixin node.removeMixin have some checks to avoid redundant mixin settings on a node and not only when the node is saved. eg have 2 mixins mix A and mix AA where mix AA mix A and a node N with mix AA on it. then N.addMixin mix A has no effect since it s regarded as redundant. so you have to remove mix AA first and then add mix A. there is the first problem when applying mixin types programmatically just be sure to remove them first before adding new ones. the 2nd problem occurs when mix A has a mandatory property. then somehow when downgrading from mix AA to mix A some information is lost and a save call results in Unable to save node N javax.jcr.nodetype.ConstraintViolationException test A mandatory property prop does not exist. you need to touch the property otherwise it will not work. so only this works N.removeMixin mix AA N.addMixin mix A N.setProperty prop N.getProperty prop .getValue session.save ideally unneeded mixin types are not removed until the save call. checks to avoid redundant mixin is this mandated by the specification not a bug since the current behavior is according to the spec. checks to avoid redundant mixin is this mandated by the specification yes see 1 . quote If this node is already of type mixinName either due to a previously added mixin or due to its primary type through inheritance then this method has no effect. Otherwise mixinName is added to this node s jcr mixinTypes property. quote there s also a TCK test which expects the current behavior adding a redundant mixin results in a nop . 1 http www.day.com maven jsr170 javadocs jcr-2.0 javax jcr Node.html addMixin java.lang.String JCR-2788 resolves this issue by providing a JackrabbitNode setMixins methodresolved as duplicate of JCR-2788
