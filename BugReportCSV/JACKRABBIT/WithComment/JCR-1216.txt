Unreferenced sessions should get garbage collected
If an application opens many sessions and doesn t close them they are never garbage collected. After some time the virtual machine will run out of memory. This code will run out of memory after a few thousand logins Repository rep new TransientRepository for int i 0 i   rep.login new SimpleCredentials new char 0 Using a finalizer to close SessionImpl doesn t work because it seems there are references from the hard referenced part of the cache to the SessionImpl objects. Maybe it is possible to remove those references or change them to weak references. The problem seems to be TransientRepository.session which is a HashSet.I guess we could use weak references in TransientRepository but that probably requires some updating of how the loggedOut events are handled.Another idea is Split SessionImpl into a end user class and an core class to allow garbage collection class SessionImpl implements Session     private InternalJackrabbitSession session     private Exception openStackTrace       SessionImpl ..         session ...         openStackTrace new Exception Stack Trace          public void finalize         if closed             LOG.error Session not closed openStackTrace             close               class SessionCore implements InternalJackrabbitSession     ... basically what is now SessionImpl ... Only SessionCore would be kept in the map not SessionImpl. The InternalJackrabbitSession interface would be simpler than the Session interface. There could be multiple InternalJackrabbitSession implementations a embedded implementation a client-server implementation a clustering implementation . This split of user facing session and internal session is probably what we want to achieve with the Jackrabbit SPI as well. This patch adds a UserSessionImpl user facing session that acts as a proxy wrapper for a SessionImpl. The patch is just for reference. I don t plan to commit it because there are some problems. For example if a session is not referenced any longer but one of its nodes is then the session can still get garbage but should not . I will try the original idea Instead of referencing SessionImpl directly use WeakReference objects.This is a prove-of-concept patch that solves the problem. It uses weak references to SessionImpl in TransientRepository.sessions StateChangeDispatcher.listeners and StateChangeDispatcher.nsListeners. The StateChangeDispatcher changes are a bit ugly and SessionImpl.finalize needs to be changed. The following test case works now     Repository rep new TransientRepository     while true       SimpleCredentials sc new SimpleCredentials new char 0       rep.login sc      This patch uses SoftReference instead of WeakReference so leaks are detected a bit later. This patch passes the unit tests on my machine. Still it s not very nice as I don t know what kind of ItemStateListener are registered in StateChangeDispatcher. Is there always a hard reference to required listeners Hopefully the final patch. Using WeakReferences again.Committed in revision 752831 trunk . This is definitely a candidate for back-porting. Hopefully the final patch. Using WeakReferences again. 1 for this patchOK seems reasonable. Scheduling this for inclusion in 1.5.5 not in 1.5.4 to avoid introducing extra changes there . Is there some way we could have a reliable test case for this I know garbage collection is a bit tricky to test for.Unit test committed in revision 757364 trunk Close the session in SkipDeniedNodesTest revision 761267 trunk Merged to the 1.5 branch in revision 767119.
