Webdav Drop xerces dependency
jukka is the final assignee thanks for taking over.posted by jukka in JCR-1261 Anyway going back to the original justification of this issue. Your first point was to minimize dependencies which IMHO could be better achieved by just dropping the Xerces dependency in favor of standard JAXP see also JCR-367 . The attached patch JCR-1261.drop-xerces.patch does just that with trivial changes to the codebase. Note that I haven t really tested the patch there may be some subtle issues with JAXP serialization of namespaced DOM trees. comment angela if both - litmus test suite on simple server - the spi2dav jcr-server setup don t reveal any problems i would feel confident that the patch doesn t cause any problems. yukka could you test your patch with both setups thanks patch provided by jukka if they don t reveal any problems btw... i remember but now that i tried to get rid of the xerces dependency within the jcr-webdav project before and i actually did run into problems with the TransformerFactory. but maybe the workaround present with http svn.apache.org repos asf jackrabbit trunk jackrabbit-jcr2spi src main java org apache jackrabbit jcr2spi xml WorkspaceContentHandler.java could help here as well. You mean NamespaceFixingContentHandler Nice It s similar to what we did for XML exports in JCR-367 see especially revision 418750 . The problem with serializing DOM trees is that they don t contain explicit xmlns attributes. Early JAXP transformers in jdk 1.4 didn t take that into account they only serialized the attributes included in the DOM. See also JCR-1161 for a somewhat related issue in Java 5 on Mac xmlns attributes are only generated for namespaces that are actually referenced in the document . I ll see if we could use the NamespaceFixingContentHandler approach here. Nice carsten cocoon.this would be helpful to me as well - I m currently looking at pulling in the required org.apache.xml. serializer classes to drop this dependency in a class that uses the webdav client.extended patch that moves the NamespaceFixingContentHandler from jcr2spi to the jackrabbit-jcr-commons project adds a namespace aware transformer and uses that one for the xml serialization in the webdav project. i did the following tests - run litmus on the dav server - run some read write search tests on a jcr2spi-spi2dav-jcrserver setup. and had the impression that it works... comments anybody having time to do some more tests angelai will leave this issue open for a couple of days giving everybody the change to test or take a look at it. unless objections are raised i would then commit the changes proposed beginning next week. angelaHow about using the SerializingContentHandler class from JCR-1350 I attached JCR-1310-jukka.patch a modified version of your patch that uses SerializingContentHandler instead of the new o.a.j.util.xml classes. I don t have the litmus suite or a spi2dav setup readily at hand so I only tested this with normal mvn clean install . Perhaps we could automate those tests somehow Apart from the different serialization class there are slight changes between your and my patches I used the ByteArrayOutputStream directly instead of a StringRequestEntity to implement the methods in XmlRequestEntity I don t set the character encoding in the content type header as currently SerializingContentHandler lets the JAXP implementation select the default encoding I don t close the ByteArrayOutputStreams Also should we use application xml instead of text xml as the XML content type I don t have the litmus suite or a spi2dav setup readily at hand so I only tested this with normal mvn clean install . hm... that doesn t help in this case. the namespace problems are only detected upon those tests. could you test it it takes forever to have everything installed and carefully looked at. and basically i don t have time for it. litmus can be found here http www.webdav.org neon litmus spi2dav - tests including impersonation clone and across-workspace-copy are not implemented. - some tests fail for imcompatibility between 170 and 283 functionaly already built into   jackrabbit-core. - running the tests a change to the default web.xml missing-auth-param - running the tests requires the webapp to contain the tck test content. Perhaps we could automate those tests somehow i don t know how. if you find a way to do so that would be great. Apart from the different serialization class there are slight changes between your and my patches fine with me as long as everything works as expected. Also should we use application xml instead of text xml as the XML content type no preference. i used text xml since this is the mimetype mapping defined in the mimetypes.properties jcr-server ... chances are that the text xml is wide-spread. so you would have to replace the other locations as well for consistency reasons... if you have time to so... otherwise i would leave it and have an extra enhancement issue for that.OK I ll take a look at the tests and possibly automating them later today. Re application xml I filed a new issue for that see JCR-1621. Tests work the same with or without my patch so no regressions. I really need to automate this test setup... - Tests work the same with or without my patch so no regressions. so 1 for you patch. I really need to automate this test setup... - it s a pain isn t it - i was thinking recently about how we could have a better and extensible test set for the dav-server. dav-compliance is one important thing. but being able to add small tests for bugfixes and changes would be really an improvement. so any suggestion ideas are welcome.Applied the jackrabbit-webdav changes in revision 659084. Note that this change introduces a text xml content type without an explicitly declared character set but I ll address that in JCR-1621. I ll associate the proposed jackrabbit-jcr2spi changes with JCR-1350 as no Maven dependency changes are needed and the change is just about starting to use the code added based on the previous jcr2spi code in JCR-1350. Resolving as Fixed.
