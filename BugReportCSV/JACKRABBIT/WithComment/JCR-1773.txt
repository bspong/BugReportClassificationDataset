shareable nodes wrong path returned causes remove to delete wrong node
It seems that for shareable nodes it can happen that getPath returns the wrong path one of another node in the shared set Verify that shared nodes return correct paths. public void testPath throws Exception    Node a1 testRootNode.addNode a1    Node a2 a1.addNode a2    Node b1 a1.addNode b1    b1.addMixin mix shareable    testRootNode.save     now we have a shareable node N with path a1 b1    Session session testRootNode.getSession    Workspace workspace session.getWorkspace    String path a2.getPath b2    workspace.clone workspace.getName b1.getPath path false     now we have another shareable node N in the same shared set as N with path a1 a2 b2     using the path a1 a2 b2 we should get the node N here    Item item session.getItem path    String p item.getPath    assertFalse unexpectedly got the path from another node from the same shared set p.equals b1.getPath Note that when this happens a subsequent remove deletes the wrong node. Thanks Manfred for spotting this one .Sorry for the noise yesterday this was not a solution and even not pointing in the right direction. The test above makes a little mistake there is nothing like a shareable item in JackRabbit there are only shareable nodes. OK the node path is also not correct but that is just a small bug - So here comes the solution for that - Change in ItemManager.java            param path       return       throws PathNotFoundException       throws AccessDeniedException       throws RepositoryException           public NodeImpl getNode Path path             throws PathNotFoundException AccessDeniedException RepositoryException         NodeId id hierMgr.resolveNodePath path         NodeId parentId hierMgr.resolveNodePath path.getAncestor 1         if id null             throw new PathNotFoundException safeGetJCRPath path                  try          if parentId null          TODO add shortcut only the rootnode has no parent          return NodeImpl getItem id path          if the node is shareable it now returns the node with the right parent          return getNode id parentId          catch ItemNotFoundException infe             throw new PathNotFoundException safeGetJCRPath path               Changes in NodeImpl.java New method added            Returns the id of the parent node at code relPath code or code null code       if no node exists at code relPath code .       p       Note that access rights are not checked.             param relPath relative path of a possible node       return the id of the parent node at code relPath code or       code null code if no node exists at code relPath code       throws RepositoryException if code relPath code is not a valid       relative path           protected NodeId resolveRelativeParentPath String relPath             throws RepositoryException         try                            first check if relPath is just a name in which case we don t               have to build resolve absolute path                           Path p session.getQPath relPath .getAncestor 1             if p.getLength 1                 Path.Element pe p.getNameElement                 if pe.denotesName                      check if node entry exists                     NodeState thisState data.getNodeState                     int index pe.getIndex                     if index 0                         index 1                                          ChildNodeEntry cne                             thisState.getChildNodeEntry pe.getName index                     if cne null                         return cne.getId                      else                          there s no child node with that name                         return null                                                                               build and resolve absolute path                           p PathFactoryImpl.getInstance .create getPrimaryPath p true             return session.getHierarchyManager .resolveNodePath p          catch NameException e             String msg failed to resolve path relPath relative to this             log.debug msg             throw new RepositoryException msg e               Just forget to add the complete method - Changed method            inheritDoc           public Node getNode String relPath             throws PathNotFoundException RepositoryException          check state of this instance         sanityCheck         NodeId id resolveRelativeNodePath relPath         NodeId parentId resolveRelativeParentPath relPath         if id null             throw new PathNotFoundException relPath                  try          if parentId null          TODO add shortcut only the rootnode has no parent                 return NodeImpl itemMgr.getItem id          if the node is shareable it now returns the node with the right parent             return itemMgr.getNode id parentId          catch AccessDeniedException ade             throw new PathNotFoundException relPath          catch ItemNotFoundException infe             throw new PathNotFoundException relPath               Now if you try the test with Node item session.getNode path instead of Item item session.getItem path the test works as expected. The problem will still exist in the WebDAV layer because it uses mostly Item instead of Node.Here comes now the hotfix for the WebDAV layer    Change in org.apache.jackrabbit.webdav.simple.DavResourceImpl                see DavResource removeMember DavResource             public void removeMember DavResource member throws DavException          if exists member.exists              throw new DavException DavServletResponse.SC NOT FOUND                    if isLocked this isLocked member              throw new DavException DavServletResponse.SC LOCKED                       don t allow removal of nodes that would be filtered out          if isFilteredResource member              log.debug Avoid removal of filtered resource member.getDisplayName              throw new DavException DavServletResponse.SC FORBIDDEN                        try              String itemPath member.getLocator .getRepositoryPath              Item memItem getJcrSession .getItem itemPath               TODO once jcr2 is out simply call removeShare              if memItem instanceof Node               Node memNode getJcrSession .getRootNode .getNode itemPath.substring 1               memNode.remove               else if memItem instanceof org.apache.jackrabbit.api.jsr283.Node                  org.apache.jackrabbit.api.jsr283.Node n org.apache.jackrabbit.api.jsr283.Node memItem                  n.removeShare               else                  memItem.remove                            getJcrSession .save                 make sure non-jcr locks are removed once the removal is completed              try                  if isJsrLockable                      ActiveLock lock getLock Type.WRITE Scope.EXCLUSIVE                      if lock null                          lockManager.releaseLock lock.getToken member                                                       catch DavException e                   since check for locked exception has been performed before                   ignore any error here                         catch RepositoryException e              throw new JcrDavException e                    A simple cast from Item to Node is not useable here because the Session.getPath does not return the right node if the node is shared. Btw the memItem is never instance of org.apache.jackrabbit.api.jsr283.Node here but removeShare is internally the same as remove in JackRabbit.I am not quite sure if I got it right quote Now if you try the test with Node item session.getNode path instead of Item item session.getItem path the test works as expected. quote So it is now possible that for a given path P session.getNode P .equals session.getItem P will return false Isn t that totally inconsistent lars   please attach a proper patch to this issue and don t include source code directly. otherwise it s a real pain to apply the changes. thanks. manfred   it might return false. in jsr283 it is allowed for properties and nodes to have the same path. that s why session.getItem is deprecated. however it s behavior is implementation specific it can return the property or the node. quote So it is now possible that for a given path P    session.getNode P .equals session.getItem P    will return false Isn t that totally inconsistent quote Good catch so here comes the real solution for the ItemManager getItem Path path . Just to mention that this method is marked as deprecated.     public ItemImpl getItem Path path             throws PathNotFoundException AccessDeniedException RepositoryException         ItemId id hierMgr.resolvePath path         if id null             throw new PathNotFoundException safeGetJCRPath path                  try          ItemImpl item getItem id path          Test if the item is a shareable node          if item.isNode NodeImpl item .isShareable          return getNode path             return item          catch ItemNotFoundException infe             throw new PathNotFoundException safeGetJCRPath path               If you patch the ItemManger directly the change in the WebDAV layer is obsolet.Here are the patches. Sorry for the noise with the code. Tobias Understood. But in this case session.getItem P does not return a property but a node that just does not belong to P . Anyway Lars last comment addresses this issue. Thank you Lars for providing a patch. I just had to add the edge case of resolving a parent node or path when the target itself is the root node. Removed org.apache.jackrabbit.test.api.ShareableNodeTest testSharedNodePath from the known.issues element in jackrabbit-core pom.xml since the test now passes. Fixed in revision 790127.
