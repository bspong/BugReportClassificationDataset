Repository is corrupt after concurrent changes with the same session
After concurrent write operations using the same session the repository can get corrupt meaning a ItemNotFoundException is thrown when trying to remove a node. Concurrent write operations are not supported however I believe the persistent state of the repository should not be get corrupt. One way to solve this problem is to synchronize on the session internally.This patch verifies the integrity just before saving currently it only verifies that added child nodes actually exist . This ensures the persistent state is not corrupt. Also it closes the session if a ConcurrentModificationException occurs. This should reduce the likelihood of problems after a session was used by multiple threads the internal state of the session is anyway corrupt .What s the performance impact of this patch E.g. how much time does it take to save 1k added nodes with without this patch According to my test it didn t have a measurable effect. I have committed a simple benchmark in revision 899102. my idea is to extend it in the future and then to run it as part of the integration test but I didn t add it yet because running the test without checking the result doesn t make sense . The result is run 4 time 1270 ms task addNodes without patch run 4 time 1245 ms task addNodes with patch the difference is within the margin of error sometimes it s faster sometimes slower I guess the only part that could measurable affect performance is SharedItemStateManager.checkAddedChildNode specially persistMgr.exists. It was never called for my test case when running in debug mode because the added node always was in the cache. Could the same problem also exist in 1.5 and 1.6 We have seen sometimes messages about missing child nodes with the consistencyCheck with 1.5.To verify what versions are affected just run the test case with the specific version. I only ran it with CRX 2.0 so far.Running with 1.5 and 10 threads I do see these kind of errors javax.jcr.InvalidItemStateException Item cannot be saved because it has beenmodified externally node java.util.ConcurrentModificationException I guess these two are expected. And errors like javax.jcr.ItemNotFoundException failed to determine depth of 1d15a661-ad4a-4550-9264-b632f2739dff p23 1d15a661-ad4a-4550-9264-b632f2739dff p23 1d15a661-ad4a-4550-9264-b632f2739dff p23 at org.apache.jackrabbit.core.HierarchyManagerImpl.getDepth HierarchyManagerImpl.java 492 at org.apache.jackrabbit.core.CachingHierarchyManager.getDepth CachingHierarchyManager.java 259 at org.apache.jackrabbit.core.ItemImpl.getDepth ItemImpl.java 1286 at org.apache.jackrabbit.core.ItemImpl.internalRemove ItemImpl.java 801 at org.apache.jackrabbit.core.ItemImpl.remove ItemImpl.java 909 at org.apache.jackrabbit.core.PropertyImpl.setValue PropertyImpl.java 559 at org.apache.jackrabbit.core.NodeImpl.setProperty NodeImpl.java 2308 at org.apache.jackrabbit.core.MultiThreadTest 1.run MultiThreadTest.java 54 at java.lang.Thread.run Thread.java 619 Caused by org.apache.jackrabbit.core.state.NoSuchItemStateException 1d15a661-ad4a-4550-9264-b632f2739dff p23 at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState SessionItemStateManager.java 185 at org.apache.jackrabbit.core.HierarchyManagerImpl.getItemState HierarchyManagerImpl.java 150 at org.apache.jackrabbit.core.HierarchyManagerImpl.getDepth HierarchyManagerImpl.java 480 ... 8 more Hi Bart Those exceptions are expected currently. I tlooks like you set IGNORE ERRORS to false right otherwise you shouldn t see the stack traces you should only see one line per exception . The real problem what this bug is about is that even after restarting the repository a node can no longer be deleted. That means the persisted state the data stored in the persistence manager of the repository is corrupt a node refers to a child node that doesn t exist. I suggest to reset IGNORE ERRORS to true and let the test case run until it s finished it will take a few minutes . If you don t see a stack trace then everything is fine. Hi Thomas I ran the test with IGNORE ERRORS to true but I added a line to print the stacktraces after the System.out.println e in the IGNORE ERRORS block. I do understand the real problem and we have seen that situation on some production servers. But we also do have some custom code to handle virtual nodes which could results in a same kind of error so I don t want to blame jackrabbit code unjustified - I ve ported the patch to 1.5 I guess 1.6 isn t that different for these parts of the code and I don t see the NoSuchItemStateExceptions any more. It does hit the extra check in the EventStateCollection javax.jcr.RepositoryException Unable to update item node Node 1f273949-2dda-45f3-8f30-916424a4de30 must be changed as well. Node 1f273949-2dda-45f3-8f30-916424a4de30 must be changed as well. at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 1119 at org.apache.jackrabbit.core.SessionImpl.save SessionImpl.java 858 at org.apache.jackrabbit.core.MultiThreadTest 1.run MultiThreadTest.java 53 at java.lang.Thread.run Thread.java 619 Caused by org.apache.jackrabbit.core.state.ItemStateException Node 1f273949-2dda-45f3-8f30-916424a4de30 must be changed as well. at org.apache.jackrabbit.core.observation.EventStateCollection.createEventStates EventStateCollection.java 388 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.begin SharedItemStateManager.java 694 at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate SharedItemStateManager.java 1106 at org.apache.jackrabbit.core.state.SharedItemStateManager.update SharedItemStateManager.java 1136 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 351 at org.apache.jackrabbit.core.state.XAItemStateManager.update XAItemStateManager.java 356 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 326 at org.apache.jackrabbit.core.state.SessionItemStateManager.update SessionItemStateManager.java 313 at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 1113 ... 3 more backport of patch-2456.txtRunning with 2 threads with different sessions and the same node I do see the following error with the patch applied to 1.5 org.apache.jackrabbit.core.state.ItemStateException Trying to add a non-existing child node b89abbae-4929-42ec-972e-4d60b51e27d1 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.checkAddedChildNode SharedItemStateManager.java 988 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.checkAddedChildNodes SharedItemStateManager.java 971 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.begin SharedItemStateManager.java 575 at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate SharedItemStateManager.java 1106 at org.apache.jackrabbit.core.state.SharedItemStateManager.update SharedItemStateManager.java 1136 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 351 at org.apache.jackrabbit.core.state.XAItemStateManager.update XAItemStateManager.java 356 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 326 at org.apache.jackrabbit.core.state.SessionItemStateManager.update SessionItemStateManager.java 313 at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 1113 at org.apache.jackrabbit.core.SessionImpl.save SessionImpl.java 858 at org.apache.jackrabbit.core.MultiThreadTest 1.run MultiThreadTest.java 58 at java.lang.Thread.run Thread.java 619 So it looks like the patch prevents the persistent state from getting corrupt. My original patch broke some version manager tests for example org.apache.jackrabbit.test.api.version.ConfigurationsTest.testConfigurationsPath . I just made the test pass and didn t try to understand what this test does exactly and why the VersionManagerImpl does seem to store non-existing child nodes. Unless somebody objects I will commit this patch later today.I think those are the child node entries that link from each workspace into the version storage. Tobi might know more about those and if the current list you have in checkAddedChildNode is complete.According to Tobi the three nodes VERSION STORAGE NODE ID ACTIVITIES NODE ID NODETYPES NODE ID are the only virtual child nodes that may exist. So this is fixed.The patch for 1.5 if still needed is out of date now it does not deal with the three system nodes . The ConfigurationsTest should fail if the patch is applied.Thanks for the heads up. I will create a new patch for 1.5 based on the patch-2456-b.txt patch.Backport to 1.6 of the updated patch.The patch also applies to the 1.5 branch.I committed the backported patch to the 1.6 branch in revision 948488 and backported merged the changes further to the 1.4 branch in revision 948495.
