Add support for large number of users in a group
In the current implementation there are several factors which limit the number of users in a group - group membership is recorded in a multi valued property which does not scale well - members of groups are collected eagerly which does not scale well I propose to add complementary support for recording group membership in a node structure to the current solution. That node structure would - similar to users and groups - add intermediate nodes when a group reaches a certain threshold on the number of its users.Committed initial implementation at revision 984740 There is a new configuration setting for the user manager groupMembershipSplitSize. If this parameter is present group memberships are collected in a node structure below UserConstants N MEMBERS instead of the default multi valued property UserConstants P MEMBERS. Its value determines the maximum number of member properties until additional intermediate nodes are inserted. Valid values are integers 4. Remaining issues - Adapt DefaultPrincipalProvider UserAccessControlProvider and UserImporter to be able to cope with the members node instead of the properties node.A further remaining issue is that we should aim at making the node structure rep Members nodes protected.one minor note i would really appreciate if you would use our common coding style for indention if it affects code that i have to work with as well... and notes to overall approach i m still convinced and yes this happens rarely that repository internal information should be kept protected... specially since you rely on the structure you are building. if it was just a random stucture without any meaning this was a different story... the way it is built now i pretty sure that this will cause us troubles.Ok I ll try to adapt to the common coding style... even though it is wrong - Yes making things protected is on my agenda. See above comment.Another remaining issue is scalability of collecting members a group. Currently this is done eagerly. In order to support large number of users we need to change this to a lazy mechanism. - Adapt DefaultPrincipalProvider done. moved to MembershipCache see JCR-2706 and adjusted to deal with node-base member structure as well. one more comment... while testing JCR-2706 i realized that the rep Members node type extends from nt hierarchyNode. what was the reason for this i would have expected it to extend from nt base as i don t see a specific need for that helper structure to be hierarchy information.... the hierarchy in this situation consists of authorizable folder nodes and authorizable nodes.rep Members nt hierarchyNode feel free to change that to rep Members nt base. The only reason for choosing nt hierarchyNode was to be consistent with rep AuthorizableFolder. However that additional properties do seem to cause problems now and then. - Adapt ..... UserAccessControlProvider ... done. but not created extra tests for that Made rep Member node and properties protected revision 986297Fixed user importer in revision 987181 credits to AngelaGraph of the performance difference between the two content models for group memberships. The graphs represent the cumulative time for adding new users to a group. The blue graph displays the old content model where group membership is recorded in a multi valued property of weak references. The orange graph display the new content model where group membership is recorded in a b-tree like node structure.This is basically fixed now. A possible improvement is to make group membership collection lazy. I ll create a separate issue for that.I created JCR-2726 for above improvement.
