Logging into a repository with a big version history takes a long time
Wenn a SessionImpl instance is created the VersionManager.getVirtualItemStateProvider method is called. This method - amongst other things - loads the complete version history into memory and walks through it to do some mapping. Besides taking a long time near 1 minute just to get the version history through PersistentVersionManager.getVersionHistories mapping the version histories ultimately results in an OutOfMemoryError . Currently there are 768 version histories and this is only a very small fraction of the expected final number of version histories in my applicationRaising the Java VM max heap helps in this case. But given that jackrabbit uses around 60MB or more when logging in this kind of worries me...this is in fact not a desirable behaviour. will rearrange caching.currently the virtual item state provider of the version store acts like a persistent state provider and does not create items for every session. it is true that all versions are loaded twice in memory. once in the internal representation and once in the virtual state. both can be done more dynamically.fixed by revision 11518 fixed issues 22 and 23. login should be faster now.closing resolved issue
