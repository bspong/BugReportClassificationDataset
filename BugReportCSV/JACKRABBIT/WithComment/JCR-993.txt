corrupted paths after moving nodes
we just found a bug which corrupts the results of Node.getPath - it seems to be related to older Jackrabbit bugs e.g. JCR-768 but still happens in jackrabbit 1.3 and jackrabbit-1.4-SNAPSHOT Basically we have a node with 3 subnodes a b c we move all of them to index 1 - this works fine unless we call getPath of the third Node before moving it. The expected paths after moving would be a pages 37 page element 3 b pages 37 page element 2 c pages 37 page element But we get these paths a pages 37 page element 3 b pages 37 page element c pages 37 page elementsimple testcaseHi Stefan Thank you for reporting this nasty bug in the CachingHierarchyManager CHM and providing a testcase that makes it really easy to reproduce what happens underneath. I found the problem to be the following initially the ordering of elements is as follows T1 a b c You then reorder a before a which is a no-op and b before a. This results in T2 b a c At this point b s path is retrieved and the CHM caches it as the first element in the list. You finally move c before b T3 c b a The CHM will receive a notification about this reordering and retrieve the list of reordered child node entries. Since b did not change its position compared to T1 which is the last state that was persisted the change in b s index passes unnoticed.As stated previously caching a path to a child whose parent is currently being modified or transient leads to this problem and subsequent changes are hardly detectable. I therefore added a check to the CHM and verified that the testcase now passes. Fixed in revision 552445.have been running my fuzz test with the new jackrabbit version and the tests ran through thanks for the prompt bugfixMerged to the 1.3 branch in revision 552544.
