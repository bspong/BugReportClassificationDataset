Speed up hierarchy cache initialization
Initializing a workspace can take quite a long time if there is a big number of nodes and some search indexes involved. The reason is that the setup of the CachingIndexReader is processed using chunks of a certain size actually 400K in order to reduce the memory footprint. As soon as the number of documents exceeds this limit some operations actually traversing complete indexes are performed again and again. It seems that the current algorithm initializeParents in the CachingIndexReader class can t be optimized without increasing the memory consumption. Therefore it should be a promising approach to persist the state of this class actually it s main member array and map and reload it on startup. The load of the state can be done implicitly in the initializing phase of the cache. This is obvious. The correct point of time to call the save operation isn t obvious at all. I tried the doClose method of the class and it seems sufficient.proposed patchrevoked due to results of discussion with Marcelnew proposed patchWriting the array every time the doClose -method is invoked may lead to some runtime issues because the array can have a size of many megabytes. If the file is touched every time even if it s contents isn t changed a backup mechanism will need to handle this persistence file again and again. Therefore it seems to be a better idea to write the file only once as soon as the initializer finished.good work thanks applied the patch with some modifications fixed in revision 1182761 edit changed to the revision number added some logs in revision 1182824
