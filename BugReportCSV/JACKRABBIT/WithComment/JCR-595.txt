Refactoring of the Persistence Managers
currently the persistence managers reside in Êorg.apache.jackrabbit.core.state Êorg.apache.jackrabbit.core.state.db Êorg.apache.jackrabbit.core.state.mem Êorg.apache.jackrabbit.core.state.obj Êorg.apache.jackrabbit.core.state.xml Ê org.apache.jackrabbit.core.state.util there are also a lot of other classes that deal with states eg SharedItemStateManager in the state package that do not relate to pms. i would like to move all persistencemanagers and pm related stuff to Êorg.apache.jackrabbit.core.persistence I d keep the current classes as deprecated subclasses within jackrabbit-core.jar until Jackrabbit 2.0. There may be people who are extending the existing classes so I d avoid breaking binary compatibility there even though we ve never promised to actually honor compatiblity within o.a.j.core.providing patch for refactoring.Looks good. Anything that helps simplify the o.a.j.core.state dependencies gets a 1 from me. - Note that there are a few Day license headers within the patch. Please fix those before committing. 1 except for the wrong license headers which jukka already mentioned Committed revision 467925.DatabasePersistenceManagers kept for compatibility in old org.apache.jackrabbit.core.state.db package doesn t work longer. Following exception is thrown during initailization of repository file with schema cannot be found Testcase testFillInSearchData org.apache.jackrabbit.init.QueryTestData Caused an ERROR Failed to get Repository instance. javax.jcr.RepositoryException Cannot instantiate persistence manager org.apache.jackrabbit.core.state.db.DerbyPersistenceManager Configuration error unknown schema derby Configuration error unknown schema derby javax.jcr.RepositoryException Failed to get Repository instance. javax.jcr.RepositoryException Cannot instantiate persistence manager org.apache.jackrabbit.core.state.db.DerbyPersistenceManager Configuration error unknown schema derby Configuration error unknown schema derby javax.jcr.RepositoryException Cannot instantiate persistence manager org.apache.jackrabbit.core.state.db.DerbyPersistenceManager Configuration error unknown schema derby Configuration error unknown schema derby at org.apache.jackrabbit.test.RepositoryHelper.getRepository RepositoryHelper.java 70 at org.apache.jackrabbit.test.RepositoryHelper.getProperty RepositoryHelper.java 150 at org.apache.jackrabbit.test.AbstractJCRTest.getProperty AbstractJCRTest.java 429 at org.apache.jackrabbit.test.AbstractJCRTest.setUp AbstractJCRTest.java 254 at org.apache.jackrabbit.test.AbstractJCRTest.run AbstractJCRTest.java 393 Caused by org.apache.jackrabbit.test.RepositoryStubException javax.jcr.RepositoryException Cannot instantiate persistence manager org.apache.jackrabbit.core.state.db.DerbyPersistenceManager Configuration error unknown schema derby Configuration error unknown schema derby at org.apache.jackrabbit.core.JackrabbitRepositoryStub.getRepository JackrabbitRepositoryStub.java 112 at org.apache.jackrabbit.test.RepositoryHelper.getRepository RepositoryHelper.java 68 ... 15 more org.apache.jackrabbit.test.RepositoryStubException javax.jcr.RepositoryException Cannot instantiate persistence manager org.apache.jackrabbit.core.state.db.DerbyPersistenceManager Configuration error unknown schema derby Configuration error unknown schema derby at org.apache.jackrabbit.core.JackrabbitRepositoryStub.getRepository JackrabbitRepositoryStub.java 112 at org.apache.jackrabbit.test.RepositoryHelper.getRepository RepositoryHelper.java 68 at org.apache.jackrabbit.test.RepositoryHelper.getProperty RepositoryHelper.java 150 at org.apache.jackrabbit.test.AbstractJCRTest.getProperty AbstractJCRTest.java 429 at org.apache.jackrabbit.test.AbstractJCRTest.setUp AbstractJCRTest.java 254 at org.apache.jackrabbit.test.AbstractJCRTest.run AbstractJCRTest.java 393 Configuration error unknown schema derby This was caused by the use of getClass .getResourceAsStream to load the DDL files. The resources are local to the o.a.j.core.persistence.db package so the call failed when invoked from a compatibility subclass in o.a.j.core.state.db. I just committed revision 469481 a simple fix that replaces getClass with DatabasePersistenceManager.class.Wendy Lee on the mailing list I just update the version to 469481 The problem still exist.... You re right. In fact there already was a failsafe built into the compatibility classes at o.a.j.core.state.db that made my change redundant. I ll check what else could have caused the problem.The unknown schema problem should now really be fixed as of revision 469571. The compatibility classes in o.a.j.core.state.db used to override the getClass .getResourceAsStream call with super.getClass .getResourceAsStream so my fix with DatabasePersistenceManager.class.getResourceAsStream didn t have any effect on the compatibility classes. While the super.getClass approach is intuitive it s actually incorrect since super.getClass is exactly the same as this.getClass as long as the getClass method is not overridden. So even if the subclasses attempted to avoid this problem they actually ended up masking the real solution. The change in revision 469571 removes these workarounds so that my original fix actually works.
