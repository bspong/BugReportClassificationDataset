WorkspaceImpl.dispose might cause ClassNotFoundException
Wenn using Jackrabbit in an environment where ClassLoaders may get inactivated in the sense the loading new classes is not possible anymore shutting down the repository may result in a ClassNotFoundException during WorkspaceImpl.dispose . Reason for this is that in the dispose method the ObservationManager is asked for all registered event listeners for them to be removed from the ObservationManager one-by-one. Asking for the listeners results in a new EventListenerIteratorImpl object being created. If now this class has never been used during the live time of the repository this would cause a ClassNotFoundException because the class loader is not laoding classes anymore in the specific environment. The specific environment is Eclipse where one plugin is managing different Repository instances provided by separate plugins. When now the Jackrabbit provider plugin has already been stopped while the managing plugin tries to shutdown the Jackrabbit repository the EventListenerIteratorImpl class cannot be loaded anymore and disposing the WorkspaceImpl in a controlled way fails. I suggest adding an ObservationManagerImpl.dispose method which is called by the WorkspaceImpl like     WorkspaceImpl.dispose        if obsMgr null          obsMgr.dispose          obsMgr null               As a side effect of not calling getObservationManager Impl the observation manager would also not be created if not existing yet. As a side effect to having the dispose method is that the ObservationManagerImpl class could also do other cleanup work in addition to clearing the listener lists.Interesting problem So you re saying in an eclipse environment jackrabbit is not allowed to create instances of classes on shutdown that it never used while it was running This seems to be a rather strong restriction. I guess your proposed change will probably solve the issue. But what about other code that we write in the future we d always have to keep in mind that restriction. Maybe we re not looking at the real issue Isn t the real cause that jackrabbit registeres itself with a shutdown hook to the JVM and then shuts down too late when some context class loader is not available anymore Who controls startup and shutdown in your environment Is it possible to find a more symetric way to control the life-cycle of jackrabbit controlled startup and shutdown in respect to classloaders Maybe we should also re-consider that shutdown hook we have in the RepositoryImpl class. However I consider this a safety feature which shuts down jackrabbit properly if RepositoryImpl.shutdown is not called before the JVM exits.An interesting problem it is really - Actually in the realm of Eclipse the restriction makes sense. I m pretty sure I can circumvent in my current use case. And you may be right that the current implementation of shutting down the repositories on shutdown of Eclipse is not the perfect implementation this is not an Eclipse problem just to be clear . Now for the real problem. In my opinion shutting down should use as scarce resources as possible actually the issue is to dispose of resources used so it seems somewhat illogical to first acquire even more resources to dispose of them immediately. So it is true shutting down the repository is not optimal at the moment and future extensions enhancements of the repository should really take care to not acquire new resources just before disposing of all of them. Regarding the shutdown hook I think it is ok to have a shutdown hook just for stability to do the least possible to try to cleanly shutdown - of course this is only a safety rope if the user of the repository fails to cleanly shutdown. That is the primary means of shutting down the repository must be the client calling RepositoryImpl.shutdown . This being said I personally think it is not the best implementation to from the outside of the observation manager get the listeners and remove them one by one. We prevent the oberservation manager from doing more intelligent resource disposal if we do not inform the observation manager on the real event going on. An then it is not the best solution performance wise. I think if we dispose of the workspace the workspace should in turn dispose of the observation manager which finally knows best how to clean up the listeners and anything else behind itself. The observation manager might even be capable of preventing the allocation of new objects the iterator and the listener wrappers just to remove the listeners. Speaking of symetry The observation manager has a constructor knowing how to set up the class. It is not the workspace setting up the observation manager internall. So why should disposal be different It wasn t my intention to blame eclipse for any of its behaviour. Just took eclipse as an example. I agree with you the shutdown of the observation manager is not optimal I will change it as you suggested. Still I think it gives the application using jackrabbit a false sense of security because the issue might come up again in the future in an other place with other code. Which eventually makes the change I m going to implement rather a workaround than a fix for this issue - IMO the solution to this issue is a proper shutdown of jackrabbit with the context classloader that was used when jackrabbit was started.Fixed as suggested by Felix. At revision 156640Thanks for the fix. Unfortunately this only partly solves the problem because the EventListenerIteratorImpl is still implemented. But as I can see from the code and a discussion with Marcel this is not easily fixable due to design decisions of the observation framework. I will therefore try to follow different paves to prevent the ClassNotFoundException.
