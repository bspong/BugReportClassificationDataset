spi2dav EventFilters not respected
i have the impression that the event filter passed to the event subscription in spi2dav is not or not properly respected. marcel is there a specific reason that you always pass the static SubscriptionInfo constant no node type filter noLocal false to the SubscribeMethod in spi2dav RepositoryServiceImpl createSubscription i guess this is the reason for the failure of ÊÊtestNodeType org.apache.jackrabbit.test.api.observation.AddEventListenerTest ÊÊtestNoLocalTrue org.apache.jackrabbit.test.api.observation.AddEventListenerTest Q is it even possible to get the noLocal filter working over remoting Doesn t every HTTP request including the POLL request obtain a new server session OK the main issue here seems to be that our event serialization doesn t carry the information from Event.getPrimaryNodeTypeName and Event.getMixinTypeNames . Fixing this first... OK the main issue here seems to be that our event serialization doesn t carry the information from Event.getPrimaryNodeTypeName and Event.getMixinTypeNames . Fixing this first... But then there are on SPI s Event not JCR s Event.Summary after reading lots of code scratching my head and conferencing with Angela JCR2SPI tries to minimize the amount of concurrent subscriptions on the SPI level which translate to HTTP SUBSCRIBE POLL UNSUBSCRIBE operations over SPI2DAV . It does this by creating a single subscription and potentially changing the subscription information when needed. The incoming events are then distributed among the local event listeners according to their filters. This does work for filters that depend on UUIDs or paths because this is information that is part of the JCR events being generated and consequently can be filtered when received. It does not work for things missing from the JCR event API such as nodetype information or the isLocal flag. Or rephrasing this in terms of interfaces the SPI Event interface provides more information than we can trivially extract from a serialized JCR event. Approaches to fix this 1 Do not rely on this SPI feature in JCR2SPI. Downside observation gets more expensive than needed for SPI implementations that do support the feature. 1b Make the fact that the SPI Events do not have the required functionality discoverable and have two different code paths then. 2 Fix the SPI implementation here SPI2DAV and the Jackrabbit server. If we could generate the required information on the server extending SPI2DAV would be trivial. However this is hard because over in JCR land the information we need is not associated with the event but the listener. Thought experiment we could have two listeners on the server one for noLocal true one for noLocal false. Inspecting the events reported to both listeners in theory would allow us to decide the type of the event although it will be tricky to match events from both listeners as we don t have a unique event id . The same could be done for listening for specific node types but of course it would even be harder. 2b Alternatively on the server we could try to extract more information from events when we know the specific implementation class or actually define an extension interface that provides us with what we want . Ê Update I tried to implement the isLocal flag as extension in the events returned by the POLL method by comparing the session ID with the session associated with the event as e«found in the EventImpl s EvenState . This doesn t help as we re comparing server sessions which have a different lifetime from those on the client. This could be made working by implementing complete session affinity one to one mapping between SPI session and server session or by pickybacking SPI session information to the JCR sessions so that it can be rediscovered in the event state. The former sounds like a really bad idea just to make filtering on onLocal work. The latter could be done in a similar way to JCR user data extra request header with the data attached to the session object maybe as attribute or even by piggybacking the information to the user data. Update added getPrimaryNodeTypeName to JackrabbitEvent added it to the POLL result added support in spi2dav node type based filters seem to be happy now. TODO add mixin types error handling decide where to put the extension interface Angela jcr-server currently does have a dependency on -core Rough patch for discussion this fixes the node type filtering See also http java.net jira browse JSR 333-43Updated draft patch pom fixed license and javadoc added The proposed patch fixes the problem for filtering by node type. Issues - are we ok with using an extension interface - if the server does not support the extension we really should fail early yet another extension interface Unsolved . filtering by noLocal which probably requires a different type of solutionVariant that uses getInfo as discussed with Marcel. Now the bad news this fails JCR API tests that insist on getInfo not returning additional information rightfully I believe .r1202201 Added the previously discussed extension interface in spi-commons and use it to get the node types over the wire.Update on remaining issues 1 When creating the subscription it would be good if we could check that the remote server supports the extension added in r1202201. Custom repository descriptor 2 Filtering by noNocal This is hard as there s no one-to-one mapping between SPI Session Info and the JCR Sessions. Proposal I a Extend the JCR Event with a method that answers the question is this an event for Session x Technically this is simple as the EventState carries that information we just need to discuss the best way to expose this. b Let every SessionInfo create a unique identifier and send that one along with each request if we don t want to mint extension headers or re-use extension headers that we have we could use the Link header again as done for UserData c Let the JCR server collect a mapping from SPI session identifiers to JCR sessions so that it can the calculate and return a isLocal flag in the POLL response What s ugly is that this prevents us from re-using the same JCR session for different SPI sessions is this a problem and that it s not clear how long the mapping described in c needs to be maintained. An alternate proposal II would be to piggyback the information to the UserData which of course is ugly in that information will show up as user data which is not. A variant of this III would be to extend ObservationManager and Events with a mechanism similar to UserData but not interfering with it. Feedback appreciated...Proposed patch for feature discovery through repository descriptor.Chatted with Jukka. Summary - new interfaces not extending but adding to JCR for these kinds of extensions ok - implement noLocal by attaching the client session identifier a unique string to the JCR session on the server Session attributes needs extension to set - try to do feature discovery for remoting in the SUBSCRIBE response Patch including - spi.commons extension interface for Session extension - noLocal flag support - client sends session identifier so that POLL can compute the flag - SUBSCRIBE returns flags indicating extension features The one thing I m unhappy with is the JCR-server-side discovery of event extensions this needs to happen before events are observed for now I m using a custom repository descriptorLatest patch applied with r1203175 leavibg bug open for final tuning.
