JSR 283 Create RepositoryFactory implementation
JSR 283 specifies a RepositoryFactory to retrieve a repository instance based on a map of parameters. We should have the following implementations - local repository with repository home and repository configuration parameters - repository obtained via JNDI - repository obtained via RMI Preliminary RepositoryFactory in jackrabbit-api.Implementations in jackrabbit-core.Implementation in jackrabbit-jcr-rmi. Feedback welcome.It s great to have a implementation-independent way to open a repository This implementation can t do a few things. The following use cases are unimportant for me are they important for somebody else - An application can not get a list of installed providers. Workaround use javax.imageio.spi.ServiceRegistry directly. - An application can not specify what provider to use using RepositoryFactory The repository factory calls connect on each provider and returns the repository of the first provider that doesn t return null. Workaround call the implementation directly. - An application can not find out what properties need to be set. I don t know of a workaround. It could be solved by adding RepositoryFactory.getParameterInfo similar to java.sql.Driver.getPropertyInfo. Based on discussions in the JSR 283 EG I have updated the jackrabbit-api.patch. RepositoryFactory is now an interface with a single method.Updated jackrabbit-core.patch.Updated jackrabbit-jcr-rmi.patchAdded RepositoryFactory interface in revision 721387 Please note that this is only a preliminary interface and will be replaced with the official RepositoryFactory interface once JCR 2.0 is final and available.Applied jackrabbit-core patch in revision 721388 Applied jackrabbit-jcr-rmi patch in revision 721389The test case in jcr-rmi fails if you run it multiple times while already having an external RMI registry running. I ll fix that.Fixed in revision 728022 by using a random port range 10k-60k for the RMI registry used by the test.
