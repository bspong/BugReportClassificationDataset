Identifier paths for inexistent items throw exception
The following fails with a RepositoryException but it should rather return false session.itemExists UUID.randomUUID the fix isn t good enough. this should fix only identifier paths not all non-existant paths which have to throw an exception. I ll rollback the changesok I didn t do a full rollback after all. I just removed the part that checks properties. I got confused by the failing test 0 . But the problem is that I m not sure if that the test is actually ok NamespaceRemappingTest.testExceptionOnUnknownPrefix NamespaceRemappingTest.java 174 1 . It relies on session.propertyExists to throw an exception if a property does not exist but the api 2 states that is will throw an exception only if the path is not a well-formed absolute path So in the case where you have a well-formed absolute path that does not exist you ll still get an error which does not feel right. We can fix that too but then the test 1 will break. 0 https builds.apache.org job Jackrabbit-trunk org.apache.jackrabbit jackrabbit-core 1580 testReport junit org.apache.jackrabbit.test.api NamespaceRemappingTest testExceptionOnUnknownPrefix 1 http svn.apache.org viewvc jackrabbit trunk jackrabbit-jcr-tests src main java org apache jackrabbit test api NamespaceRemappingTest.java view markup 2 http www.day.com maven javax.jcr javadocs jcr-2.0 javax jcr Session.html propertyExists java.lang.String i don t agree with the current changes. IMO we should fix the IdentifierResolver interface and its implementations instead.     public Path getPath String identifier throws MalformedPathException should be changed to     public Path getPath String identifier throws ItemNotFoundException MalformedIdentifierException ok I did a full rollback. this needs more thought. I didn t really like the fact that in a lot of places the actual error is wrapped into a repository exception and then thrown again. so this seemed the easiest way to handle the problem. your solution is more involved there will be a lot of changes but I guess in the in the end a cleaner api is more beneficial. also by MalformedIdentifierException do you mean creating a new exception class your solution is more involved there will be a lot of changes you re right. i ve chosen a simpler approach now. it s not very elegant but it solves the problem with minimal risk of regressions and all existing tests passing.fixed in revision 1147320.
