spi2dav move reorder not properly handled by observation
all TCK tests including move or reorder fail in the setup jcr2spi - spi2dav ex - jcr-server.The remaining issue is caused by NODE REMOVE events not having an identifier. Identifiers are currently generated by the URIResolver based on the URI of the node reported in the event. The URI resolver then does a PROPFIND asking for the UUID the local name unescaped and the index from which a local identifier is built. This of course doesn t work for nodes that were just deleted unless the information happens to be cached . As a matter of fact the events returned by the server do contain the server s identifier for that event. Unfortunately these identifiers are no quite the same as those needed in spi2dav which only uses UUID-style identifiers for referenceable nodes while jackrabbit-core uses them throughout. The obvious fix would be to augment the event information sent by the server with more information so that the subsequent PROPFIND is never needed. Putting this on hold while looking at the other observation related tickets...Updated summary now that the changes for JCR-2542 provide us with node type information We can now inspect the event and find out whether the node was referenceable and if it was compute the local node id from the remote id this will remove the needed for any subsequent PROPFINDing I believe this would also clear the remaining failure in the GetIdentifierTest. What s not so nice is that this only works for referenceable nodes. For non.referenceable nodes we d need the nodeId of the parent which may be unknown if it s removed as well . We might have the parentId though if the associated event was received as well and we have been able to compute that nodeId. Rephrasing all of this... - - problem can be fixed for removal of referenceable nodes - for other nodes we need the parentId which might be cached Doing two passes through an event bundle might help in case the events arrive in the wrong order However if all else fails we only have a few choices 1 Drop the event 2a Keep the event and return null identifier this is what happens now 2b ... and compute the identifier based on the relative path to the closest ancestor nodeId we know if an intermediate node was refererenceable this would be an incorrect identifier Feedback appreciated Julian Actually me recollection was wrong the node removal test does not use a referenceable node.Correction the node type information is for the associated parent node so this doesn t help in fixing out whether the node itself was referenceable.Summarizing the remaining open issue We fail to compute an identifier for NODE REMOVE events because computing the local identifier currently requires a lookup PROPFIND of the remote resource s properties UUID name index . We do have the remote resource s identifier as part of the event but it s not necessarily the same locally because the way identifiers are assigned is not the same jackrabbit-core has uuids for all nodes spi2dav only for referenceable nodes . Things we can do to improve things 1 Make sure that the URIResolver cache is populated with mappings for all nodes the client is touching right now this is not the case . 2 When not able to lookup the remote resource compute an identifier solely based on the remote resource s href that s not necessarily the one the client might have seen before but it might be better than null . Also note that if we do 1 we may already have the identifier. For nodes created by other sessions I think it s acceptable that the identifiers returned with REMOVAL events are slightly off there are also RepositoryDescriptors reporting identifier stability we could tune . 3 Avoid doing the remote PROPFIND when it was a REMOVE event. If we ever get a 207 it ll be for a different resource anyway. Feedback appreciated... I think I would do it on a best effort basis and build a path based identifier for the event in case the URI cannot be translated into a UUID based identifier. See proposed patch.Yes that works for me. Proposal - document the remaining non-conformance somewhere where JIRA todo - clean up the code a bit I d like to avoid the PROPFIND that we know will cause a 404 Fixed in trunk with r1205029. Fixed means here test case passes. We are still not fully compliant here will fix a separate issue as TODO.
