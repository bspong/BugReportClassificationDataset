Deadlock in DefaultISMLocking
There seems to be a bug in DefaultISMLocking which was detected as part of JCR-2746. 1 The main thread gets a read lock. 2 The ObservationManager thread tries to lock for writing which is blocked because there is still a read lock. 3 Then the main thread tries to get a second read lock which is blocked because there is a waiting write lock. The bug was introduced as part of JCR-2089 Use java.util.concurrent revisions 995411 and 995412. I think the safe solution is to revert those to commits and add a test case. If the DefaultISMLocking is changed later on more test cases are required. An efficient solution is relatively complicated. Reverted the changes made by revision 995411 and revision 995412 and added a test case.Can you please move the test to AbstractISMLockingTest in package o.a.j.core.state the package o.a.j.core.lock is rather related to the JCR locking fuctionality and not internal jackrabbit locking.Where s the case where a holder of a read lock reacquires the readlock If we can t refactor that situation away it should be easy enough to maintain a set of thread ids of all current readers so they can reenter the lock even when there s a writer waiting.We discussed this with Thomas and it turns out that synchronous observation listeners do need to reacquire ISM read locks after the SISM.Update.end has downgraded the write lock it was holding. One way to solve this problem without having to maintain a set of current holders of the read lock is to simply remove the writer preference in the locking strategy i.e. allow readers to acquire the lock even when there are pending writers waiting for the lock. Another solution implemented in the attached patch against the new DefaultISMLocking implementation of revision 99541 is to retain the writer thread identifier in a downgraded lock so a downgraded write lock would still allow related threads to reacquire the lock even when there are other writers waiting.I restored the earlier revisions 995411 and 995412 applied the proposed patch documented the reentrancy requirements in the ISMLocking javadocs and modified the DefaultISMLockingDeadlockTest class accordingly in revision 1000947.Merged to the 2.1 branch in revision 1038594.... and merged to the 2.0 branch in revision 1038604.
