Add the Data Store to the Jackrabbit API
Currently the garbage collection is not part of the Jackrabbit API. However the data store garbage collection must be used once in a while if the data store is enabled. I propose to add the required interfaces to the Jackrabbit API. This will also allow to call garbage collection using RMI.Required changes in Jackrabbit CoreRequired changes in the Jackrabbit API 1 with comments for the propose extensions I suggest adding a MarkEventListener.started method which is called when scanning starts. This would be the logical lifecycle bracket to the done method. I suggest renaming the getPersistenceManagerScan method to isPersistenceManagerScan I suggest defining the millis parameter to the setSleepBetweenNodes as long instead of int since all time related methods in Java take long rather than int. In addition I would add a getSleepBetweenNodes to return that value at least for completeness sake I am unclear as to what the stopScan method is all about. Shouldn t cleanup be done at the end of the scan method In addition I think the name stopScan is misleading According to JavaDoc it does not actually stop something but cleanup after scanning is complete. Since the API looks much like a Mark Sweep algorithm is foreseen to collect data store garbage it might be sensible to name the methods accordingly mark instead of scan and sweep instead of deleteUnused . This would also create a cognitive link to the MarkEventListener which is called while the mark method is running. As a corrollary to the previous comments Why is the scan or mark method separate from the stopScan and deleteUnused methods If the three should be called in succession anyway there should probably be just a single method gc or similar which does everything and would also leave the actual algorithm choice to the implementation.-1 Why should we put the client be in control of a server process like garbage collection I would prefer a configuration option a user interface in jackrabbit-webapp or perhaps a JMX bean for such purposes. See also the related discussions about the shutdown method and the proposed cluster sync method. If we really do need to expose this in a client API I m with Felix in preferring to hide the implementation details and make this just a single no-argument method like JackrabbitSesssion.gc . MarkEventListener.started agreed. I m not sure if this would be fully backward compatible existing ScanEventListeners don t implement this method. When calling this method on an old implementation the JVM would throw a java.lang.AbstractMethodError. This could be caught and ignored. getPersistenceManagerScan method to isPersistenceManagerScan agreed. millis parameter to the setSleepBetweenNodes as long agreed. getSleepBetweenNodes agreed. stopScan you are right it doesn t belong to the interface. It is used for testing only. mark and sweep agreed. We could still call it getPersistenceManagerScan however single method gc multiple repositories can use the same data store sharing the data store . In that case you need to call mark of all repositories before calling sweep on the first repository . client API It is a management API . There is no separate management API section at the moment we could create a package org.apache.jackrabbit.api.management.data. Also we could create an interface org.apache.jackrabbit.api.management.JackrabbitManagedRepository. Why should we put the client be in control of a server process like garbage collection I agree it should be a background process. Unfortunately it s not so easy to implement that specially not when multiple repositories use the same data store. 1 to o.a.j.api.management. Separating the client and management APIs is good since then we don t need to worry about authorization of management operations. About the multiple repository case I would for now declare that as a special case and expect people who use such configurations to explicitly manage things like garbage collection using our lower level APIs. I would rather move cautiously with exposing the implementation details in a public API as we might well want to switch to a different garbage collection mechanism in the future. I m not sure if this would be fully backward compatible Well you already renamed the interface right So you already have kind of a backwards compatibility issue. In addition there has not been an official API yet interfaces hidden in implementation code should not be called API - so IMHO there is no need to worry. single method gc multiple repositories can use the same data store sharing the data store . In that case you need to call mark of all repositories before calling sweep on the first repository . As Jukka already said sharing the store among multiple repositories is an implementation detail of the data store and is of no concern to the administrator 1 for making it a management API BTW . Synchronization among the repositories sharing the data store is the task of the data store. our lower level APIs What is lower level APIs 1 for the data store api with Felix extensions the separate management API package For the mark sweep vs. gc I would opt for the mark sweep variant since I guess the synchronization inside the datastore implementation would be very hard to do since the datastore itself doesn t know all the repositories that use the same datastore location. If there will be a future garbage collection mechanism that can directly delete items for example the implementation of mark would simply be empty and everything happens in sweep . Most clients will call mark and sweep in a row and the ones that work in a shared situation would do it as Thomas noted. And we don t want people to use the lower-level APIs .New version. Backward compatibility existing applications that cast Session to SessionImpl should still work. The existing method in the GarbageCollector didn t change except setSleepBetweenNodes which is probably not used by most applications. The new interface MarkEventListener is a subclass of ScanEventListener so this is not a problem but adding a method to MarkEventListener would be a problem. gc while it s possible to create a new method gc mark sweep I think using two distinct methods shouldn t be a problem. Having separate method allows sharing the data store storage among multiple repositories where the repositories can be on separate machines . With only gc there is now way to run garbage collection. With mark and sweep it s easy rep1.mark rep2.mark wait until both methods return rep1.sweep rep1.close rep2.close . 1 for the new version I only noticed a small javadoc typo in GarbageCollector.setScanEventListener it should probably be deprecated use setMarkEventListener . Why do we need to modify JackrabbitSession for this As discussed earlier I d be perfectly happy with a ManagedRepository interface with the createDataStoreGarbageCollector method. Some other concerns I d just put all the management interfaces in o.a.j.api.management no need to create subpackages I d drop the DataStore part of the interface and method names as in future we may well want to extend the mechanism to cover other uses for example optimizing the search indexes or removing old journal records. Do we really need the MarkEventListener mechanism I can see how it can be useful in creating a nice progress bar display but is having such a feature important enough to make the API more complex and thus noticeably limit implementation options The sleepBetweenNodes property seems really implementation specific. What if we later find out that a better way to control the impact of garbage collection is to for example use the Thread.setPriority method I d rather not fix such implementation details in the API unless there s a very good reason for having it there. If we do the above do we then need to expose a close method on the garbage collector As a summary here s what I d expose as the only new interfaces and methods     ManagedRepository repository ...     GarbageCollector collector repository.getGarbageCollector     collector.mark     collector.sweep This covers the basic use case while giving us maximum implementation flexibility. Why do we need to modify JackrabbitSession for this To ensure the session is authorized. Otherwise how do you ensure only authorized users use the facility I d just put all the management interfaces in o.a.j.api.management Ok I don t care. I d drop the DataStore part of the interface and method names It s for the data store so I think it makes sense to keep the name. But I don t care that much. Do we really need the MarkEventListener mechanism Yes we do it s important. However I could document that it may return null if not supported by the given implementation. The sleepBetweenNodes property seems really implementation specific You are right it s not that important. I will remove it. do we then need to expose a close method on the garbage collector Yes. The current implementation can add an observation listener and this needs to be removed. To ensure the session is authorized. Otherwise how do you ensure only authorized users use the facility By controlling access to the proposed ManagedRepository interface. My point is that management operations like garbage collection shutdown etc. should be outside the scope of normal client connections. This way we don t need to invent new access control privileges for such operations. Do we really need the MarkEventListener mechanism Yes we do it s important. Why Could we achieve the same use case with a simpler API The current implementation can add an observation listener and this needs to be removed. Could the listener rather be passed as an argument to mark PS. My concerns are a -0 not a veto. I just want to ensure that we strike the best balance between exposed functionality and implementation flexibility. Anything we put in o.a.j.api is something that we most likely need to live with for at least the next 3-5 years. By controlling access to the proposed ManagedRepository interface. And how do you do that For the admin session getRepository returns a ManagedRepositoryImpl and for non-admin sessions it returns RepositoryImpl That sounds like a weird solution. Access rights are usually bound to the user that is logged in Repository.login . This is true for the rest of Jackrabbit and for other common APIs such as the JDBC API. My point is that management operations like garbage collection shutdown etc. should be outside the scope of normal client connections. Why is that This way we don t need to invent new access control privileges for such operations. So you want to have a completely different access rights mechanism Why Do we really need the MarkEventListener mechanism Yes we do it s important. Why I need it to do display the progress. Could we achieve the same use case with a simpler API Not as far as I know. The current implementation can add an observation listener and this needs to be removed. Could the listener rather be passed as an argument to mark The observation listener is an implementation detail of the garbage collector. The user of the API should have to deal with it. best balance Sure API design is hard and it s always good if multiple people look at it. And how do you do that For the admin session getRepository returns a ManagedRepositoryImpl and for non-admin sessions it returns RepositoryImpl Nope the ManagedRepository or perhaps some other name interface would not extend javax.jcr.Repository and would not be implemented by the Repository instance. Only clients that have explicitly been given a ManagedRepository reference could access management operation like garbage collection shutdown backup etc. Access to the ManagedRepository reference can be controlled by for example selectively making the JNDI reference available to applications that need such access or for remote access for example by using the standard RMI or JMXMP access controls. The way I see it access to such management features is more a configuration deployment question than normal JCR authentication authorization issue. Of course that s just one point of view. I need it to do display the progress. The API as proposed only tells what the collector is currently doing not how much work still remains. Is that enough Could we achieve the same use case with a simpler API Not as far as I know. Does the MarkEventListener interface need to extend EventListener Why do we need separate before after events Do the event methods need a Node argument or would a path or identifier string be enough Is the done method needed or could the same information be inferred from the mark method returning The observation listener is an implementation detail of the garbage collector. The user of the API should have to deal with it. Sorry I misunderstood your earlier comment about the listener I thought you referred tot he MarkEventListener instance. - I now see your point about the close method but couldn t the sweep method already release any reserved resources AFAIK they re not needed after sweep returns. Could you provide code examples and all interfaces required for your solution How would a user get the DataStoreGarbageCollector object in a standalone application using the JCR 2.0 API not within an app server no JNDI and such and could you explain how this would be secure so that only people with access right can get the object And what would be the advantage over my proposal the standard RMI or JMXMP access controls Access control should stay within the Jackrabbit API I believe. Why would we have to outsource access control to such APIs The API as proposed only tells what the collector is currently doing not how much work still remains. Is that enough Yes this is enough. Does the MarkEventListener interface need to extend EventListener We can still discuss the details about this let s first solve the getDataStoreGarbageCollector problem. I now see your point about the close method but couldn t the sweep method already release any reserved resources No because the user may not want to call sweep . If multiple repositories share the same data store garbage collection would work like this rep1gc.mark rep2gc.mark rep3gc.mark rep1gc.sweep rep2gc.sweep and rep3gc.sweep must not be called otherwise used objects may be deleted . Could you provide code examples and all interfaces required for your solution Here s a quick example of how this could work     ManagedRepository mr new ManagedRepositoryImpl RepositoryConfig.create ...      Accessing the repository through normal JCR API     Repository repository mr.getRepository     ...      Getting an administrative session see the similar Sling API     Session admin mr.loginAdministrative     ...      Collecting garbage     GarbageCollector collector mr.getGarbageCollector     try         collector.mark         collector.sweep      finally         collector.close           Closing the repository     mr.shutdown The advantage of this approach over adding things to JackrabbitSession is that access control to such admin features becomes a deployment issue not an authorization issue. We won t need to extend the JCR access control mechanism with custom privileges like garbage collection or repository shutdown . No because the user may not want to call sweep Good point. ManagedRepository mr new ManagedRepositoryImpl RepositoryConfig.create ... Your solution is not JCR 2.0 spec compliant. According to the spec page 77 creating a Repository object goes like this RepositoryFactory.getRepository Map parameters . ManagedRepositoryImpl is a class not an interface. So the application would become dependent on a specific class. The point about APIs is to use interfaces if possible. Using classes directly in an application will again lead to problems such as if you want to use the same application remotely against another implementation and so on. Your solution doesn t include any access rights checks. How do you ensure only authorized users create a new ManagedRepositoryImpl or call getGarbageCollector Let s say the configuration which is again a class and not an interface points to a remote repository. The advantage of this approach over adding things to JackrabbitSession is that access control to such admin features becomes a deployment issue Sorry why would that be an advantage For me that s a disadvantage you could not call garbage collection remotely for example. We won t need to extend the JCR access control mechanism with custom privileges like garbage collection or repository shutdown . So you would need to create another access control mechanism. Why if we already have one My point here is that operations like garbage collection are IMHO not something that a JCR client should be doing especially when the implementation still doesn t have any access controls and it relies on the client doing the right thing in the multi-repository case. Nothing that we expose through a client-visible API should be able to break the internal consistency of the repository. Note that the garbage collection operation is in principle a safe operation so I m not totally opposed to putting it in a client-visible API but until we either declare the multi-repository data store configuration as unsupported or solve the obvious safety issue with this API I m quite reluctant to expose such functionality to all clients. I think for the caller it shouldn t matter from where the method is called client or server side . The implementation itself may throw an exception if not implemented however. the implementation still doesn t have any access controls The current implementation in Jackrabbit doesn t check access rights that s true. Of course we could implement it. In any case an access rights check can be implemented in a subclass. Thinking about shutdown what if we instead use instead subject to access rights restrictions and availability JackrabbitSession.getManagedRepository interface ManagedRepository   getDataStoreGarbageCollector   shutdown I believe we should have a solution for Jackrabbit 2.0 Of course we could implement it. I would consider that a blocker for this issue unless we come up with some other way to prevent potential data loss in the multi-repository case. Thinking about shutdown IMHO the shutdown operation should only be available to someone who can also start the repository. The ManagedRepository idea makes this possible it could have both a startup and a shutdown method for controlling the full lifecycle of the repository. But then the ManagedRepository reference can not be something that you only can get to through an already running repository But that s another discussion...Again according to the spec creating a Repository object is done using RepositoryFactory.getRepository Map parameters . I do think Jackrabbit should be spec compliant. So far I don t see how your solution could be spec compliant. the shutdown operation should only be available to someone who can also start the repository How would you solve this problem while staying spec compliant I branched the general discussion about a management API to the dev list. Let s focus on the specific garbage collection issue here. I m ready to accept the JackrabbitSession.createGarbageCollector approach. However the following concerns still stand How do we protect against the multi-repository sweep issue I would be fine either with simply not supporting such deployments or with enforcing administrator-only access to the garbage collection feature. Does the MarkEventListener interface need to extend EventListener Do we need separate before after events Do the event methods need a Node argument or would a path or identifier string be enough Is the done event needed or could the same information be inferred from the mark method returning This new patch introduces the management API. Other changes MarkEventListener no longer extends EventListener and only has a before method. I kept the Node argument a String path would be fine as well for me probably even better would be a String location argument the path when using a traversal and the node id when using IterablePersistenceManager .This includes a RepositoryManagerImpl however only for the RepositoryFactoryImpl which always seems to return a TransientRepository. The method createDataStoreGarbageCollector may only be called if the repository is started.I have a few suggestions for improvements but it s easier to do that in patch form as they re just minor tweaks. 1 to committing the latest patches v3 . I ll then follow up with my proposals.
