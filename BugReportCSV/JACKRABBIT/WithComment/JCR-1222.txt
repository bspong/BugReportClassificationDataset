Index nodes in parallel
CPUs with multiple cores are now standard and Jackrabbit should make use of it where it makes sense. Analyzing content while a node is indexed is quite costly but can be broken easily into task that can be executed in parallel. E.g. index multiple nodes in parallel.Inverting lucene documents is not done with the help of a thread pool. The size of the pool is equal to the number of processors. The pool size is automatically adjusted if the number of available processors changes. E.g. processor affinity is changed. svn revision 596654The diagram shows the running times for re-indexing 20 000 nodes. The first test used nodes with about 2kB of text whereas the second test used text with about 12kB text. Each test was performed with - process bound to single core - process uses both cores with current codebase - process uses both cores with changes from JCR-1222This is great Marcel An impressive performance gain. FYI I lately tried searching in the multiIndex structure with the lucene ParallelMultiSearcher but I merely found a decrease in speed even on large indexes . I think it was because of filesystem access which might get worse random access in using parallel searching on indexes on a single FS must admit I am guessing a little 
