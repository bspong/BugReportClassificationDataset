Saving concurrent sessions executing random operations causes a corrupt JCR
Run the attached unit test. Several concurrent sessions add move and remove nodes. Then the index is removed and the repository is again started. The repository is in an inconsistent state and the index cannot be rebuild. Also a lot of exceptions occur. See see Output before patch.txt . Note that the unit test also suffers from the deadlock of issue http issues.apache.org jira browse JCR-2525 about half the time.- Because it is difficult determine all the causes multiple ItemStateManagers and locking I propose to do a final consistency check on the ChangeLog in the SharedItemStateManager and to throw an exception if an inconsistency is detected. - A race condition is exists when moving and deleting nodes with the same name. The index passed to removeChildNode Name nodeName int index may not be valid anymore because another session deleted or moved another child node. Instead of using name index use id to make sure that the correct node is removed. See proposed patch based on the trunk . After the patch the repository is consistent and only a few messages are shown see Output after patch.txt thanks fr the patch - Because it is difficult determine all the causes multiple ItemStateManagers and locking I propose to do a final consistency check on the ChangeLog in the SharedItemStateManager and to throw an exception if an inconsistency is detected. what is the performance impact of the proposed change i am somehow concerned that write performance would suffer significantly. - A race condition is exists when moving and deleting nodes with the same name. The index passed to removeChildNode Name nodeName int index may not be valid anymore because another session deleted or moved another child node. Instead of using name index use id to make sure that the correct node is removed. looks good Could you also attach the new ConcurrencyTest3 test case I have attached the unit test. A Java property could be introduced to enable disable the checks. This way a choice can be made between consistency and performance.I performed a small performance test using the attached unit test. I measured the System.currentTimeMillis before and after a call to validateHierarchy. My test machine has the following specs Windows XP Pro SP3 Intel Core2 CPU 6300 1.86GHz 3 GB RAM. The unit test has the following parameters iterations amount of test runs thread size amount of threads during a run run size amount of session saves per thread action size actions of a thread per session save The consistency check has the following performance impact per session save iterations thread size run size action size performance impact 1 5 100 100 0-16 ms 5 concurrent threads that each do 100 session saves with 100 operations 1 5 100 1000 0-63 ms 1 5 10 1000 0-16 ms 1 5 10 10000 0-156 ms 1 5 10 100000 0-219 ms I have added a new patch which uses a Java property to enabled to checks default is no checks . IMHO the performance impact is reasonably small and this combined with a Java property which defaults to false I think this is a good addition.Patch applied in revision 955229 thanks I m still seeing some exceptions in the test case so I m leaving this open until we figure out how to best get rid of them.The remaining problems got fixed in JCR-2579. I merged these changes also to the 2.1 branch for the 2.1.1 release.Would be fine to have this changes in 1.6.3 too.Merged to the 2.0 branch in revision 982274. I ll take a look at backporting this also to 1.6.3.Should we add the ConcurrencyTest3 to a TestSuite As i can see the Testcase will not be executed at the Moment...Merged to the 1.6 branch in revision 1003428. Should we add the ConcurrencyTest3 to a TestSuite AFAICT there are no assertions in the test case so for now it only makes sense to run the test manually on demand. Should the test case be modified to automatically detect and report failures then it would be good to have it as a part of the test suite. However since the test is pretty expensive it should only be run within the integrationTesting profile. Comment from CQ user Is there any setup where it s not recommended to set this property org.apache.jackrabbit.core.state.validatehierarchy to true If not why not making setting it true by default Is there any setup where it s not recommended to set this property org.apache.jackrabbit.core.state.validatehierarchy to true It comes with a severe performance hit.Thanks for the quick feedback. In previous entry from April 19th I could see IMHO the performance impact is reasonably small . This is a bit confusing Since this parameter is quite useful and sometimes recommended to prevent repositories inconsistencies it could be great to have more detailled performance test results that the jackrabbit and CQ users could use to take the decision to enable it or not..
