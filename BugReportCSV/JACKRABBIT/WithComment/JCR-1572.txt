DbDataStore connection does not always reconnect
If a DbDataStore connection is closed due to an error all subsequent addRecord calls will fail with connection has been closed and autoReconnect false  after getRecord is called and the connection is reconnected addRecord will succeed. the connection should be validated before setting autoReconnect false or on retrieval from the pool. If a DbDataStore connection is closed due to an error What kind of error did occur I don t think the DbDataStore should automatically re-try forever by default.a MySQL max packet size error. I agree it shouldn t retry forever but a addRecord operation should not fail only because the previous addRecord failed. I believe an option to execute a simple query before returning a connection from the pool should be sufficient.Hi I think it makes sense to solve the original problem instead of trying to work around it. I was searching for MySQL max packet size error and found this http www.mysqltalk.org maxpacketsize-info-vt112883.html I had to set this an actually it is a setting in the server side mysql config file like this set-variable max allowed packet 16M This is a known bug check http bugs.mysql.com that was a regression in 3.0. It is fixed to be released in 3.0.9 What version of MySQL server and JDBC client do you use How big was your largest object Did you set max allowed packet When I tested it it worked without any special settings. I have tested with MySQL 5.0.27-community-nt on Windows XP 2007-12-11 and found out that the objects must fit in memory. It would be great if this problem could be solved as well. Hi The biggest file is whatever the user wants to upload upto GB s This occurs with a CommunicationException as well so changing the max packet size will have no affect when the link goes down temporarily. allowing this option will greatly improve the robustness of Jackrabbit. A check-valid-sql options is quite common for connection pools and can be found in commons-dbcp and jboss datasource etc.. If you agree with the fix I am prepared to submit a patch for it.Hi Validation is a good idea what about a query of the form SELECT FROM DATASTORE WHERE 1 0. What I want to avoid is hiding a real problem so I think this validation should be optional. I still think it s more important to understand the real problem first why did you get a CommunicationException why did the link go down temporarily What version of MySQL server and JDBC client do you use When I have tested it with MySQL I found out that the objects must fit in memory. Is this the case for you as well Regards ThomasHi I agree it should be optional I do believe objects need to fit it memory I think the connection went down due to an internal network error. I use MySQL 5.0 and 5.1 driver. I will submit a patch shortly. Moshe an optional checkValidConnectionSql attribute can be added to DbDataStore and BundleDbPersistenceManager Should I refactor DatabaseFileystem DatabaseJournal and DatabasePersistenceManager to use ConnectionRecoveryManager so that they can benefit from this change as well I haven t looked at the patch yet but I am experiencing a very similar problem using Apache Derby. It is occurring because I am using Artifactory 1.3 beta which updates its Maven indexes using Quartz scheduled jobs that rely on Apache Jackrabbit to store persist the data. The code path of the problem is the same through the addRecord method which automatically calls setAutoReconnect false without checking for a valid connection. Forgive me if I am repeating the above discussion but there are two problems here 1. Not checking for valid connection before setting autoReconnect false . This seems to be happening constantly in the Artifactory jobs since they are long-running and the connections tend to time out. Some logic equivalent to DBCP s testOnBorrow needs to be implemented. 2. The setAutoReconnect false ...setAutoReconnect true are both inside a try-catch block. What happens here if an exception is thrown between the two calls Since the ConnectionRecoveryManager instances are held in a pool the Pool class the ConnectionRecoveryManager will be returned to the pool with the autoReconnect flag false. Assuming that execution continues after the original exception this ConnectionRecoveryManager instance will be likely to throw another exception if a connection timeout occurs. THE SOLUTION restore the correct flag using setAutoReconnect in the finally block. These should be very easy fixes to implement. The exception looks like this 9 12 08 11 05 24 697 PDT 0000004e SystemOut O 2008-09-12 11 05 24 696 WARN data.db.DbDataStore 588 - Can not insert new record org.apache.jackrabbit.core.data.DataStoreException Can not insert new record connection has been closed and autoReconnect false connection has been closed and autoReconnect false         at org.apache.jackrabbit.core.data.db.DbDataStore.convert DbDataStore.java 592         at org.apache.jackrabbit.core.data.db.DbDataStore.addRecord DbDataStore.java 295         at org.apache.jackrabbit.core.value.BLOBInDataStore.getInstance BLOBInDataStore.java 120         at org.apache.jackrabbit.core.value.InternalValue.getBLOBFileValue InternalValue.java 644         at org.apache.jackrabbit.core.value.InternalValue.create InternalValue.java 123         at org.apache.jackrabbit.core.PropertyImpl.setValue PropertyImpl.java 609         at org.apache.jackrabbit.core.PropertyImpl.setValue PropertyImpl.java 525         at org.apache.jackrabbit.core.NodeImpl.setProperty NodeImpl.java 2309         at org.artifactory.jcr.fs.JcrFile.fillJcrData JcrFile.java 591         at org.artifactory.jcr.fs.JcrFile.setResourceNode JcrFile.java 550         at org.artifactory.jcr.fs.JcrFile. init JcrFile.java 80         at org.artifactory.jcr.fs.JcrFile. init JcrFile.java 164         at org.artifactory.repo.index.RepoIndexerData.saveIndexFiles RepoIndexerData.java 103         at org.artifactory.repo.index.IndexerManagerImpl.saveIndexFiles IndexerManagerImpl.java 168         at org.artifactory.repo.index.IndexerManagerImpl FastClassByCGLIB 76058b92.invoke generated         at net.sf.cglib.proxy.MethodProxy.invoke MethodProxy.java 149         at org.springframework.aop.framework.Cglib2AopProxy CglibMethodInvocation.invokeJoinpoint Cglib2AopProxy.java 700         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed ReflectiveMethodInvocation.java 149         at org.springframework.transaction.interceptor.TransactionInterceptor.invoke TransactionInterceptor.java 106         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed ReflectiveMethodInvocation.java 171         at org.springframework.aop.framework.Cglib2AopProxy DynamicAdvisedInterceptor.intercept Cglib2AopProxy.java 635         at org.artifactory.repo.index.IndexerManagerImpl EnhancerByCGLIB 7cded8f3.saveIndexFiles generated         at org.artifactory.repo.index.IndexerManagerImpl.index IndexerManagerImpl.java 137         at org.artifactory.repo.index.IndexerManagerImpl FastClassByCGLIB 76058b92.invoke generated         at net.sf.cglib.proxy.MethodProxy.invoke MethodProxy.java 149         at org.springframework.aop.framework.Cglib2AopProxy CglibMethodInvocation.invokeJoinpoint Cglib2AopProxy.java 700         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed ReflectiveMethodInvocation.java 149         at org.springframework.transaction.interceptor.TransactionInterceptor.invoke TransactionInterceptor.java 106         at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed ReflectiveMethodInvocation.java 171         at org.springframework.aop.framework.Cglib2AopProxy DynamicAdvisedInterceptor.intercept Cglib2AopProxy.java 635         at org.artifactory.repo.index.IndexerManagerImpl EnhancerByCGLIB 7cded8f3.index generated         at org.artifactory.repo.index.IndexerJob.onExecute IndexerJob.java 25         at org.artifactory.schedule.ArtifactoryJob.execute ArtifactoryJob.java 41         at org.quartz.core.JobRunShell.run JobRunShell.java 202         at org.quartz.simpl.SimpleThreadPool WorkerThread.run SimpleThreadPool.java 525 Caused by java.sql.SQLException connection has been closed and autoReconnect false         at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.getConnection ConnectionRecoveryManager.java 159         at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmtInternal ConnectionRecoveryManager.java 287         at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt ConnectionRecoveryManager.java 257         at org.apache.jackrabbit.core.persistence.bundle.util.ConnectionRecoveryManager.executeStmt ConnectionRecoveryManager.java 237         at org.apache.jackrabbit.core.data.db.DbDataStore.addRecord DbDataStore.java 286         ... 33 more Sorry for the delay. I can now reproduce the problem re-connect is disabled at the wrong time. I don t actually see why auto-reconnect should be disabled at all autoCommit is never disabled. I suggest to simply remove those lines Index jackrabbit jackrabbit-core src main java org apache jackrabbit core data db DbDataStore.java jackrabbit jackrabbit-core src main java org apache jackrabbit core data db DbDataStore.java revision 698167 jackrabbit jackrabbit-core src main java org apache jackrabbit core data db DbDataStore.java working copy -285 7 285 6          TempFileInputStream fileInput null          ConnectionRecoveryManager conn getConnection          try - conn.setAutoReconnect false              String id null tempId null              long now              for int i 0 i ConnectionRecoveryManager.TRIALS i -362 7 362 6                            usesIdentifier identifier              DbDataRecord record new DbDataRecord this identifier length now - conn.setAutoReconnect true              return record           catch Exception e              throw convert Can not insert new record e I tested it and it works and I don t see a reason why it shouldn t. Unless somebody sees a problem I will commit it to the trunk.Committed in revision 701154Thomas Could this almost trivial patch also be backported to the 1.5 and 1.4 branch This is quite a nasty bug because it leaves the repository in an error state in which no new documents can be added. Bart Could this almost trivial patch also be backported to the 1.5 and 1.4 branch This fix is included in the 1.5.0 release.Indeed it is I somehow completely overlooked that one... My question still stands for the 1.4 branch though. Or are there no plans to release new versions of the 1.4 core jars There s no active plan for another 1.4.x release but it shouldn t be too much trouble to do such a release if there s demand and upgrading to 1.5.0 is for some reason not an option.Scheduling for jackrabbit-core 1.4.8.Committed in revision 736273 1.4 branch 
