Reduce memory usage of DocIds
Implementations of DocIds are used to cache parent child relations of nodes in the index. Usually there are a lot of duplicate objects because a DocId instance is used to identify the parent of a node in the index. That is sibling nodes will all have DocIds with the same value. Currently a new DocId instance is created for each node. Caching the most recently used DocIds and reuse them might help to reduce the memory usage. Furthermore there are DocIds that could be represented with a short instead of an int when possible.Some memory stats from a real life system a fully populated DocId cache for 300 000 nodes consumes about 6MB of heap.Proposed patch.Forgot to mention that the proposed patch reduces the memory usage to about a third. Caching the most recently used DocIds and reuse them might help to reduce the memory usage 1 DocIds that could be represented with a short instead of an int According to my test this will not reduce memory usage http h2database.com p.html da4c6a321d0dc84a2b7b96cdbf468a47 For the Sun JVM JDK 1.5 32 bit objects with one field of type boolean byte short character integer and long all need 16 bytes. A small BigInteger uses 56 bytes a small BigDecimal uses 32 bytes probably re-uses the same BigInteger internally and a String uses 24 bytes. Object uses 8 bytes. For JDK 1.6 32 bit and 64 bit it s a bit different 20 bytes for an object 24 bytes for boolean - long. For JDK 1.5 64 bit it s again different 16 bytes for an object 24 bytes for boolean - long. hmm you are right. should have looked more closely what the memory analyzer reported. here s another idea - use int arrays and create PlainDocIds on the fly possibly using cached instances - a special value in the int array marks the existence of a UUIDDocId which are held in a separate map Updated patch with described changes.Committed new patch and added a test case to improve test coverage of CachingIndexReader. svn revision 924677Removed System.out debug calls in test class. svn revision 925141
