Reduce memory usage of transient nodes
When adding lots of transient nodes most of them don t have child nodes because they are leafs. The attached patch initializes NodeState.childNodeEntries with an unmodifiable empty ChildNodeEntries instance and turns it into a modifiable one only when needed. Running a test with 100k nodes 10 children per node the memory consumption for child node entries drops from 42MB to 12MB with this patch. 1 I like the way you got rid of many of the sharedChildNodeEntries conditionals On the other hand I don t like that we add another special case to the already complex NodeState handling. But I guess cleaning up the NodeState class is a topic for another issue. 1 for the patch excellent 1 I remember a few discussions about performance memory consumption. We should get into that sometime perhaps pre-1.5 Also like Jukka said maybe we should try to clean up NodeState sometime Regards Based on Jukkas comment I ve refactored the NodeState class and pulled out the ChildNodeEntries and ChildNodeEntry classes. Instead of handling the shared child node entries in NodeState the ChildNodeEntries itself now know about when the internal maps are shared. Most of the patch is simply renaming NodeState.ChildNodeEntry to ChildNodeEntry so don t be shocked about the size of the patch The memory saving is now a bit lower but still significant. With this patch the ChildNodeEntries consume 14MB. I think a similar approach is possible with the property names map.Updated patch to current trunk ItemStates are not Serializable anymore and introduced a NameSet which works similar to the ChildNodeEntries. The new NameSet is used for the property names and the mixin type names inside a NodeState. The internal HashSet of a NameSet may be shared and or obtained from a simple cache similar to HashCache introduced earlier in JCR-1663.Once more but now back to more readable size The new patch only includes the memory improvements. Moving the child node entry classes has been solved in a separate issue JCR-1710 . 1 Looks great I m getting some impressive memory savings with this patch when importing large numbers of nodes through the transient space.Committed patch in revision 691603 Thank you all for reviewing.
