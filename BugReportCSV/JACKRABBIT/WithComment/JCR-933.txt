RepositoryImpl.acquireRepositoryLock fails to detect that the file lock is already held by the current process
with java 1.4 and 1.5 on a nix-based platform it is possible to concurrently instantiate more than one repository instance in the same jvm based on same identical configurations. this is a critical issue since it might lead to data corruption. the issue only exists with java versions prior to 1.6 and nix-based platforms only verified on mac os-x 10.4 . note that the issue does not exist when the file lock is held by another jvm.  code snippet to reproduce the issue             Repository rep1 new TransientRepository             Session s1 rep1.login new SimpleCredentials johndoe .toCharArray             Repository rep2 new TransientRepository             Session s2 rep2.login new SimpleCredentials johndoe .toCharArray the root problem is the incorrect behavior of java.nio.channels.FileChannel tryLock which is demonstrated by the following code snippet             try                 FileLock fl1 new FileOutputStream foo .getChannel .tryLock                 System.out.println 1st lock fl1                 FileLock fl2 new FileOutputStream foo .getChannel .tryLock                 System.out.println 2nd lock fl2              catch Throwable t                 t.printStackTrace              attached patch with suggested fix the canonicalized path of the repository home dir is stored in a system property and checked on repository instance startup. the only caveat of this approach is that system property access is subject to security manager check i.e. if a security manager is installed jackrabbit needs to be granted system property write access. comments welcome. Clever Using a synchronized interned system property feels icky but it actually achieves the required functionality. The repository lock mechanism has accumulated a lot of collective knowledge and already contains 50 LOC so I guess it would make sense to refactor it into a separate helper class. Especially given the already large size of the RepositoryImpl class. The attached patch RepositoryLock.patch contains Stefan s suggested fix and refactors all the repository lock code into a separate o.a.j.core.util.RepositoryLock class. I also added a bunch of javadocs and tests. The RepositoryLock class should be mostly equivalent to the current code Stefan s fix. I made the following functional changes to streamline the code Removed the extra call to File.createNewFile since creating the RandomAccessFile instance with mode rw will automatically create the file Canonicalized the path names once at the beginning Renamed and reorganized variables to make the code appear more like a generic directory locking toolfixed in svn r541651 by applying jukka s patchMerged to the 1.3 branch in revision 544288.
