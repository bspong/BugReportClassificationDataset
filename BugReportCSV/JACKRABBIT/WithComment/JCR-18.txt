Multithreading issue with versioning
In a multithreading environment with two or more threads accessing the same version history inconsistent state may be encountered. Concretely the first thread is currently checking in the node to which the version history is attached while the second thread walks this same version history by means of a self-built iterator which just accesses the successors of each version to get the next to visit. At a certain point the second point may encounter an ItemNotFoundException with a stack trace similar to this javax.jcr.ItemNotFoundException c9bd405b-dff4-46ef-845c-d98e073e473a         at org.apache.jackrabbit.core.ItemManager.createItemInstance ItemManager.java 354         at org.apache.jackrabbit.core.ItemManager.getItem ItemManager.java 230         at org.apache.jackrabbit.core.SessionImpl.getNodeByUUID SessionImpl.java 494         at org.apache.jackrabbit.core.version.VersionImpl.getSuccessors VersionImpl.java 86         .... It seems that the first thread has already filled the successor of the version while the node is not yet accessible by the createItemInstance method. This bug seems to not be enforcible but it is easily reproducible.i must admit that i took no care about multihtreading until now. but of course i will do it now.fixed at revision 76106Sorry to say this but the issue is only partly solved. While it occurrs less frequently than before it still occurrs. Again I get the same exception at the same place at a moment where another thread is currently checkin which modifies the successors of while the referred-to node is not yet accessible. Here is the stack of the other thread    Thread some undisclosed name Suspended       BDbPersistenceManager.load NodeReferences line 398       ReferenceManager.get NodeId line 62       PropertyImpl ItemImpl .checkReferences Iterator Iterator ReferenceManager line 635       PropertyImpl ItemImpl .save line 1132       NodeImpl.checkin line 2004       ...will investigageSorry again My previous remark on less frequently is completely wrong. It occurrs as often as before - Fixing issue JCR-443 seems to have fixed a few other concurrent versioning problems. Is this issue also fixed by JCR-443 Added a test case for this issue jackrabbit-core src test java org apache jackrabbit core ReadVersionsWhileModified.java At revision 550724The test runs without deadlock or errors. I will therefore set this issue to fixed.Merged to the 1.3 branch in revision 581178.
