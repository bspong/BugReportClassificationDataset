inconsistent session and persistent state after ReferentialIntegrityException
When a ReferentialIntegrityException occurs in a session it seems that subsequent actions on that session may result in a inconsistent session state AND even inconsistent persistent state. The latter will even make jackrabbit fail to bootstrap an index from that persistent state. Typical rootcause Caused by org.apache.jackrabbit.core.state.NoSuchItemStateException ddb9d3ea-59c1-4eb4-a83e-332f646d4f40         at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState SharedItemStateManager.java 270         at org.apache.jackrabbit.core.query.lucene.MultiIndex.createIndex MultiIndex.java 1082         at org.apache.jackrabbit.core.query.lucene.MultiIndex.createIndex MultiIndex.java 1088         at org.apache.jackrabbit.core.query.lucene.MultiIndex.createInitialIndex MultiIndex.java 395 Bootstrap failure java.io.IOException Error indexing workspace         at org.apache.jackrabbit.core.query.lucene.MultiIndex.createInitialIndex MultiIndex.java 402         at org.apache.jackrabbit.core.query.lucene.SearchIndex.doInit SearchIndex.java 465         at org.apache.jackrabbit.core.query.AbstractQueryHandler.init AbstractQueryHandler.java 59         at org.apache.jackrabbit.core.SearchManager.initializeQueryHandler SearchManager.java 553 Attaching a junit test that reproduces the problem along with a trace on my setup against svn revision 911308. On both the 1.5 and 1.6 branch I get session- and persistent inconsistencies. Did not pay much attention to 2.0 trunk but there also is a problem in the session. However it looks like that one is not persistent . Any thoughts Hope it is not me doing something really stupid We regularly encounter inconsistent Jackrabbit repositories and the problems look very much like the one generated by the attached code. Any help on this is very much appreciated This is a failure-atomicity problem in which the ReferentialIntegrityException leaves the session in an inconsistent state. This issue is closely related to https issues.apache.org jira browse JCR-288. In JCR-288 the problem is fixed for items that were previously persisted. It does not work for items that never have been persisted. Rougly the following happens - Node P3 is created which was never persisted before and node P1 is removed but this is not allowed due to referential integrity. - Session.save calls ItemImpl.save on the root node. - Before calling LocalItemStateManager.update all item states are disposed by calling SessionItemStateManager.disposeTransientItemState and this invalidates the state and removes it from the transient store. - The update call throws a ReferentialIntegrityException - The exception causes the transient items to be restored by calling ItemImpl.restoreTransientItems. Restoring is a 3 step process   - retrieve or recreate the item object   - add the state to the SessionItemStateManager transient store again   - restore the properties in the state object The problem is that adding the state to the SessionItemStateManager again is only done for items that where previously persisted i.e. isTransient . As a result node P3 transient state no longer exists when the next save is performed and P3 is not created but its parent contains a child node reference to P3. A possible solution is to - Call NodeImpl.restoreTransient and PropertyImpl.restoreTransient also for transient items. - Change the NodeImpl.restoreTransient and PropertyImpl.restoreTransient methods to re-create the state for transient items. See attached patch which is based on the 1.5 branch.I can confirm this resolve the problem for me in the 1.5 branch.Thanks Patch committed in revision 944258.Merged to the 1.6 branch in revision 944291.I don t believe this is fully fixed while investigating JCR-3016 we came across NodeImplTest.testReferentialIntegrityCorruption . After the succesful save the test case tries various operations on P3 but it does not try nodeP3.getPath . Adding this         try          String expectedPath root.getPath P3             assertEquals expectedPath nodeP3.getPath          catch Exception e          e.printStackTrace             String msg                  JCR-2503 Getting path of P3. Corrupt session             log.error msg e             fail msg          makes the test fail with javax.jcr.InvalidItemStateException Item does not exist anymore ba3ef1ac-fc5a-4e03-b44b-031f5e75c537 at org.apache.jackrabbit.core.ItemImpl.itemSanityCheck ItemImpl.java 116 at org.apache.jackrabbit.core.ItemImpl.perform ItemImpl.java 90 at org.apache.jackrabbit.core.ItemImpl.getPath ItemImpl.java 376 at org.apache.jackrabbit.core.NodeImplTest.testReferentialIntegrityCorruption NodeImplTest.java 308 this in 2.2.4 Closing the issue since the fix was already released earlier. Let s use followup issues for any further work.
