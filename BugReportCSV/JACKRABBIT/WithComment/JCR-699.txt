Clustering re-registration of nodetypes is not synchronized
The re-registration of nodetypes is not yet synchronized between clusternodes although re-registration is already partially implemented in the NodeTypeRegistry.Hi When we want to cluster our application we really need the synchronization of re-registration. My guess is that adding this is not too hard. It seems that two interfaces each need an additional method to communicate the re-registration NodeTypeEventListener and NodeTypeEventChannel. These additional methods should then be implemented by ClusterNode implements NodeTypeEventChannel and by the NodeTypeRegistry implements NodeTypeEventListener . It seems that the implementation in the ClusterNode can re-use the registered method. The implementation in the NodeTypeRegistry follows the externalRegistered method more or less. Next the NodeTyperegistry should inform its eventChannel the ClusterNode when a nodetype re-registered in the method reregisterNodeType. Equivalently the ClusterNode should inform the NodeTypeRegistry from one of its process methods. Is this really what needs to be done or are there things that I ve overlooked Thanks You re right this is exactly the way to implement it In my first approach I just made the methods clusterable that were absolutely necessary for some sample application to run. I will add the re-registration feature as soon as possible.That would be great thanks Here is a patch that adds the synchronization of reregister and unregister events. It follows the implementation idea from the comments above. Feedback is very welcome Thank you for providing your patch Martijn I applied it with some small modifications to the serialization deserialization logic all other operations that belong to some group use the same character to introduce the record e.g. L for locking and I therefore kept the T for nodetype and encoded the type of operation along with the size in order to stay compatible with older versions. Fixed in revision 541585.Merged to the 1.3 branch in revision 544221.
