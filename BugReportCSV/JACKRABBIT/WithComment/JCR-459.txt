Add JMX support to register a JCR RMI Server into Jboss
 I added two classes and one descriptor file to the jcr-rmi project. These files provide support to make the generated jar deployable into a Jboss server.  The deployment descriptor contains two parameters the address of the local repository instance and the target address where the rmi server should be registered. e.g. server   mbean code org.apache.jackrabbit.rmi.server.jmx.JCRServer      name Jackrabbit.services RMIServer JCR RMI Server      attribute name Local java jcr local attribute      attribute name Target jnp localhost 1099 jcrServer lt attribute depends jboss.jca service ManagedConnectionFactory name jcr local depends    mbean server this configuration registers an RMI server at jcrServer that wraps the local repository at java jcr local. br Edgar 1 Nice. Should the stop method explicitly unbind the server from the RMI registry in addition to clearing the reference It might also be good to add a method for setting the JNDI environment HashTable. Some repositories might be available in alternate JNDI trees and would thus need a custom initial context factory and perhaps some other configuration parameters. PS. I ve been thinking about a generic RepositoryMBean interface and perhaps a specific JackrabbitRepositoryMBean extension for monitoring and managing a local Jackrabbit repository. It could be used quite easily for example for things like externally managing node types and the future backup utility. Should the stop method explicitly unbind the server from the RMI registry in addition to clearing the reference You are right. It might also be good to add a method for setting the JNDI environment HashTable. Some repositories might be available in alternate JNDI trees and would thus need a custom initial context factory and perhaps some other configuration parameters. I agree maybe something like a String parameter which contains a comma separated list of assignments. e.g. java.naming.factory.initial org.jnp.interfaces.NamingContextFactory java.naming.factory.url.pkgs org.jboss.naming org.jnp.interfaces would that be ok Let me know if you prefer me to make the changes and prepare a patch commit it directly or make the changes yourself. PS. I ve been thinking about a generic RepositoryMBean interface and perhaps a specific JackrabbitRepositoryMBean extension for monitoring and managing a local Jackrabbit repository. It could be used quite easily for example for things like externally managing node types and the future backup utility. See my comments in the MLjukka I made the changes we discussed thanks for your comments.Thanks feel free to commit the changes in svn. I was actually thinking of setting the properties of the local JNDI context i.e. so that you could access some other naming tree than the default one in your container. Something like this     String localAddress ...     Hashtable localEnvironment ...     String targetAddress ...     Hashtable targetEnvironment ...     InitialContext localContext new InitialContext localEnvironment     Repository repository Repository local.lookup localAddress     RemoteAdapterFactory factory new ServerAdapterFactory     RemoteRepository remote factory.getRemoteRepository repository     InitialContext targetContext new InitialContext targetEnvironment     targetContext.bind targetAddress remote both local and remote environment variables are configurable optionally. thanks jukka.
