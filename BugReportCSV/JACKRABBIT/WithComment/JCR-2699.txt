Improve read write concurrency
I d like to set up a few performance tests to help identify our worst bottlenecks for various kinds of concurrent read-only and read-write access patterns. Once identified I m hoping to fix at least some of those bottlenecks.The attached plot from last night shows that we ve already been improving things over past releases. That s a good baseline to work from.Based on some profiling and other analysis based on the concurrent read performance tests I added here s a few pointers for potential improvements The bundle cache is hidden behind the synchronization layer of the bundle persistence classes which causes a single cache miss to block access to the entire cache while the missing bundle is fetched from disk. We should revise the synchronization level to allow the bundle cache to serve concurrent requests even when the persistence manager is busy waiting for I O. The synchronization overhead in DefaultISMLocking was pretty high. I was seeing some significant time spent there even though in a concurrent read test a thread should never get blocked by the ISMLocking implementation. I refactored the DefaultISMLocking class in revision 995411 for issue JCR-2089 which solved most of this problem. I didn t try it yet but I suspect that the FineGrainedISMLocking class may be even worse in this regard. Path handling code shows up quite a bit 2-5 of active CPU time in profiling results. We should be able to avoid that overhead as described in the follow-up issue JCR-2744. The synchronized cache blocks in ItemManager and SharedItemStateManager show up as contention bottlenecks in highly concurrent read scenarios. Access control checks with the DefaultAccessManager add significant amount of overhead when compared to the dummy SimpleAccessManager implementation. Even though ACL optimizations are somewhat orthogonal to concurrency improvements the large number of usually very fine-grained content accesses done by the DefaultAccessManager puts significant extra pressure on the above-mentioned contention points so we should see notable concurrency improvements also from optimized ACL evaluation.On the last 2 points. ItemManager and DefaultAccessManager I have found that binding AccessControlProviders to thread when they are created in the AccessControlProviderFactoryImpl and providing a clean up mechanism when the thread goes coupled with making the SystemSession a non singleton effectively binding it to a threa by explicitly creating a SystemSession inside the AccessControlProviderFactoryImpl rather than using the reporitoryImpl.getSystemSession method..... these measures completely eliminate thread blocking in the ItemManager.getNode ItemManager.getItem and ItemManager.getChildNodes via the DefaultAccessManager for highly concurrent reads where ACLs are being evaluated. Unfortunately I now see blocking in the DefaultPrincipalManager although this might be due to modifications I have in my ACL Provider stack which is slightly non standard. Will attach a patch against my code base to illustrate and inform in a moment.The patch is to my modified version of DefaultSecurityManager which is a very close copy of the original. The AccessControlProviderHolder manages the binding of AccessControlProviders to threads and provides a cleanup mechanism when threads go. Initial profiling indicates that with a high volume of thread mortality memory is not leaking. Neither of these fully solve the problem of thread blocking for highly concurrent reads but they do improve the situation a bit. One more change that I have made locally that allows concurrent reads with blockages now appearing in the SharedItemCache is to eliminate the synchronization inside the AbrstractPrincipalProvider protecting the LRUMap. Instead of syncing I am not expecting concurrent modification exceptions and as per the LRUMap documentation NPE on concurrent access. If I take this approach I dont see any exceptions from the LRUMap at 50 concurrent threads and I dont get any blocking at that level.I m a bit worried about the potentially adverse effects of growing the number of SystemSessions per workspace. A better approach could be to refactor the ACL handling to use the ItemValidator.performRelaxed mechanism from JCR-2714 instead of the SystemSession. I d also take the ACL discussion to JCR-2573 where a more general effort to improve ACL evaluation performance is taking place.I ve now implemented all of the above improvements except ACL evaluation changes which are better handled in JCR-2573 and some other changes like allowing concurrent reads on pooled bundle db persistence managers. Apart from the ACL handling I think I ve now cleared all the major concurrency bottlenecks above the persistence manager layer. Most notably a cache miss is no longer enough to block all concurrent readers. The attached plots show the current performance in comparison to previous 2.x releases. The test case randomly accesses 1000 nodes out of a hierarchy of 10 000 nodes 100x100 while 20 other readers are also concurrently accessing the nodes. In the read write case a single random writer thread is also included. The lower bound 10th percentile of all tests is at about 25ms which corresponds to the case where all accessed content is immediately available in the item state or bundle cache. The median and the higher bound 90th percentile show the effect of one or more cache misses. The performance improvements are about 20-25 compared to Jackrabbit 2.1. Note that these tests were run with the default Jackrabbit configuration i.e. without access controls.Looking at this from the other way the total throughput of the 20 background readers also improved about 20 9.2m reads per minute vs. 7.6m in Jackrabbit 2.1 . Resolving as fixed as I think we re about done here. See JCR-2573 and JCR-2762 for some further areas where performance could be improved.The AccessControlProviderHolder attached here does put more pressure on the Heap than before and we have seen it result in high GC levels as it extracts all the space it can out of the JVM under heavy load 100 concurrent request threads . There is an updated version being maintained at http github.com ieb open-experiments blob master bundles server src main java org apache jackrabbit core AccessControlProviderHolder.java for the record ASF License granted this uses soft references and a reference queue to allow the GC to evict SystemSessions when under pressure although I found that this still put the GC under undue pressure so it also explicitly evicts AccessControlProviders when they get old and full ensuring that heap is never overloaded. Teste with Jmeter scripts over several hours. Will make a brief comment on JCR-2573I ve now backported the essential parts of these changes to the 2.1 branch.The changes are now also in the 2.0 branch.
