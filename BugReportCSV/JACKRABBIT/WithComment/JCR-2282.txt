SQL2 parser may infer type for UncastLiteral from static analysis
The spec says An UncastLiteral is always interpreted as a Value of property type STRING. A CastLiteral on the other hand is interpreted as the string form of a Value of the PropertyType indicated. There are also two test cases in NodeNameTest that need to be fixed accordingly testLongLiteral and testBooleanLiteral The specification I have jcr-spec.pdf from content repository-2 0-pfd-spec.zip says UnquotedLiteral String form of a JCR Value as defined in §3.5.4 Conversion of Values However there is no section 3.5.4. I guess it should be 3.6.4 Property Type Conversion instead. Right and right after that is the section I was referring to.Index src main java org apache jackrabbit test api query qom NodeNameTest.java src main java org apache jackrabbit test api query qom NodeNameTest.java revision 808318 src main java org apache jackrabbit test api query qom NodeNameTest.java working copy -144 7 144 7                    try              String stmt SELECT FROM testNodeType AS s - WHERE NAME s literal.getString WHERE NAME s CAST literal.getString AS LONG              qm.createQuery stmt Query.JCR SQL2 .execute              fail NAME comparison with LONG must fail with InvalidQueryException           catch InvalidQueryException e -162 10 162 11                    try              String stmt SELECT FROM testNodeType AS s - WHERE NAME s literal.getString WHERE NAME s CAST literal.getString AS BOOLEAN              qm.createQuery stmt Query.JCR SQL2 .execute              fail NAME comparison with BOOLEAN must fail with InvalidQueryException           catch InvalidQueryException e e.printStackTrace               expected                 Index src main java org apache jackrabbit spi commons query sql2 Parser.java src main java org apache jackrabbit spi commons query sql2 Parser.java revision 808318 src main java org apache jackrabbit spi commons query sql2 Parser.java working copy -19 7 19 6  import java.math.BigDecimal  import java.util.ArrayList  import java.util.HashMap -  import javax.jcr.PropertyType  import javax.jcr.RepositoryException  import javax.jcr.Value -39 7 38 6  import javax.jcr.query.qom.Selector  import javax.jcr.query.qom.Source  import javax.jcr.query.qom.StaticOperand -  import org.apache.jackrabbit.spi.commons.query.qom.JoinType  import org.apache.jackrabbit.spi.commons.query.qom.Operator   -455 7 453 7                                  if currentTokenType VALUE - Literal literal factory.literal currentValue Literal literal getUncastLiteral currentValue              read              return literal           else if currentTokenType PARAMETER -471 10 469 10                            return var           else if readIf TRUE - Literal literal factory.literal valueFactory.createValue true Literal literal getUncastLiteral valueFactory.createValue true              return literal           else if readIf FALSE - Literal literal factory.literal valueFactory.createValue false Literal literal getUncastLiteral valueFactory.createValue false              return literal           else if readIf CAST              read -487 6 485 7              read AS              value parseCastAs value              read CastLiteral              literal factory.literal value              return literal           else -494 6 493 19                   Create uncast literal from a value. According to the JCR specification an UncastLiteral is always interpreted as a Value of property type STRING JCR 2.0 Core Specification 6.7.34 Literal page 124 . That means the value is converted to a String first. param value the original value return the literal private Literal getUncastLiteral Value value throws RepositoryException return factory.literal valueFactory.createValue value.getString      private Value parseCastAs Value value throws RepositoryException          if readIf STRING              return valueFactory.createValue value.getString - e.printStackTrace 1 looks good.Because of this change the build now fails with javax.jcr.query.InvalidQueryException Static value 3.0 cannot be converted to a Long for the query SELECT FROM nt unstructured AS s WHERE ISCHILDNODE s testroot AND LENGTH s.prop1 3.0 3.0 used to be parsed as a BigDecimal and could be converted to a Long. Now 3.0 is parsed as a String actually first parsed as a BigDecimal and then converted to a String by the parser . Long.parseLong 3.0 fails. If you want the query to work you could write ... AND LENGTH s.prop1 CAST 3.0 AS DOUBLE . I think we should rather change the spec than trying to build a workaround. It s weird that the parser should read 3.0 to a String and only as a double if you write CAST 3.0 AS DOUBLE . I filed a bug yesterday https jsr-283.dev.java.net issues show bug.cgi id 806 So I suggest to undo my commit and change the spec instead.The JSR 283 EG decided to relax the relevant spec section. That is an implementation is not forced to interpret the literal as a string in this context. Removed unused method Parser.getUncastLiteralSpecCompliant in spi-commons in revision 809524Changed summary to better match the issue.Merged revision 808430 change of test case into jsr283 branch.
