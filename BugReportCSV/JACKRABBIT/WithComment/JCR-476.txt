Remove recently added getJCRPath getQPath from NamespaceResolver
issue JCR-473 added 2 new methods to NamespaceResolver     public Path getQPath String jcrPath throws MalformedPathException     public String getJCRPath Path qPath throws NoPrefixDeclaredException which do not belong here since the NamespaceResolver has nothing to do with paths. suggest to remove them. further is the naming of the QName related methods a bit vague. suggest to rename them to    QName parseName String jcrName    String formatName QName qName although they do not belong here either but helps to leverage evt. caching namespace resolvers . I suggest we also remove or at least deprecate the methods NamespaceResolver.getQName and NamespaceResolver.getJCRName . I introduced them to support caching of QName - JCR Name conversion. At that time the NamespaceResolver seemed to be the only place where to put the cache. Now that we have a NameFormat and PathFormat we should move the caching mechanism in a subclass of Name PathFormat. IMO this makes more sense.i totally agree to remove all QName Path methods from NamespaceResolver. But moving the caching caps to NameFormat might not be optimal since it resides in commons and should be as indepdentant from the core as possible otherwise we would also need to rename all NameFormat.format to NameFormat.getInstance .format .... however my idea was to have a new interface QNameCache that has simple caching methods. if a namespace resolver implements this interface NameFormat uses it s cache if resolver instanceof QNameCache    check cache etc.... created patch.there are some minor javadoc issues with the QNameCache class which could be easily fixed once the patch has been committed. since QNameCache caches both QNames and String representations i d suggest to rename it to NameCache. apart from this 1 for the suggested changesrename QNameCache to NameCache as suggested. Committed revision 424218.tobi you broke the SPI contrib which makes intensive use of the commons project. i deliberately did not copy the commons classes over and i don t want to do so. ok i will adjust the contrib.spi contrib compiles again. Committed revision 425017.
