unsynchronized access on itemCache map in ItemManager
the access itemCache map in ItemManager is mostly synchronized by not via the ItemStateListener methods ...     public void stateCreated ItemState created         ItemImpl item retrieveItem created.getId         if item null             item.stateCreated created               ...     private ItemImpl retrieveItem ItemId id         return ItemImpl itemCache.get id      ... this can result in a corruption of a map eg subsequent accesses may result in a endless loop .fixed in svn r532720there are still some potential unsynchronized accesses - itemExists Path calls evictItem - itemExists ItemId calls evictItem - dispose does a cache.clear - dump accesses the cache as wellfixed in svn r533091The fix introduces a deadlock between a reader and a writer session. See attached stacktrace.The deadlock can be reproduced by running ConcurrentReadWriteTest. The reading session must not lock the ItemManager while it retrieves an ItemState.I suggest we use the Map itself as a monitor to synchronize access to the cache. The ItemManager instance this is already used as a monitor to synchronize access from multiple threads using the same session. I would rather get rid of those but that s a different story.fixed by applying patch svn r35830 . thanks This fix can cause deadlocks Thread 1 getNode - lock itemmanager - read lock on shared-ism Thread 2 save - write lock on shared-ism - update - notifies all localisms - notifies all itemmanagers - lock on itemmanager Are you sure this is exactly what shouldn t happen anymore because we moved the synchronization from the ItemManager instance to the cache map. E.g.       -622 11 628 13               param id id of the item to remove from the cache        - private synchronized void evictItem ItemId id private void evictItem ItemId id          if log.isDebugEnabled              log.debug removing item id from cache           - itemCache.remove id synchronized itemCache itemCache.remove id       Do you have a thread dump that shows the deadlock oops. you re right. i didn t see your fix.Merged to the 1.3 branch in revision 577711.Additional merges in revisions 577729 and 577831.
