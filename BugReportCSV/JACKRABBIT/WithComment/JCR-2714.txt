Selective disabling of checks in ItemValidator
I would like to be able to selectively disable checks in ItemValidator in the scope of an operation performed through methods of the SessionState class. Doing so would provide simple means for internally modifying for example protected items. Currently such modifications must be done manually on the item state level. This approach is very error prone and not very DRY. With my upcoming patch in place setting a protected property would look like this final Node parent ... final Value value ... SessionState sessionState sessionContext.getSessionState Property property sessionState.performUnchecked new SessionOperation Property     public Property perform SessionContext context throws RepositoryException         return parent.setProperty foo value      ItemValidator.CHECK CONSTRAINTS That is users need to have access to the session context in order to disable checks which makes this only usable from inside Jackrabbit.Aforementioned patch-1 i consider this rather a hack i prefer to avoid in-transparent side effects.The exact mechanism of how this is done can be debated but I think it s a great idea that we could selectively relax constraint checks for trusted code inside jackrabbit-core. Something like this has the power to significantly simplify many parts of our codebase and avoid extra constructs like NodeStateEx or ProtectedItemModifier. As an example consider the current code snippet     PropertyState propState     if nodeState.hasPropertyName NameConstants.JCR LOCKOWNER         propState stateMgr.createNew NameConstants.JCR LOCKOWNER nodeId         propState.setType PropertyType.STRING         propState.setMultiValued false      else         propState PropertyState stateMgr.getItemState new PropertyId nodeId NameConstants.JCR LOCKOWNER          propState.setValues new InternalValue InternalValue.create lockOwner     nodeState.addPropertyName NameConstants.JCR LOCKOWNER     stateMgr.store nodeState With a solution like the one Michael is proposing this could be simplified to     node.setProperty Property.JCR LOCKOWNER lockOwner I truly hope we ll find a consensus on how to implement this The exact mechanism of how this is done can be debated but I think it s a great idea that we could selectively relax constraint checks for trusted code inside jackrabbit-core. agreed. my -1 applies to the provided patch.I think a single checks-on off toggle which the patch adds IIUC is the best way to do that - any more fine-granular mechanism makes it even more difficult. Also the places calling unchecked operations are clearly visible. So I would go with a 1.Stefan i prefer to avoid in-transparent side effects. In general Jackrabbit is full of such side effects. wrt those my approach is quite contained I evaluate a closure in the scope of an environment. What would you suggest for implementing this As Jukka pointed out such a mechanism might be of great value as it promotes code reuse. I d greatly prefer one well contained side effect instead of uncontrollable proliferation of duplicated low level code.The attached patch JCR-2714-2.patch is a somewhat modified version of Michael s solution. I figured that it s not really necessary to involve the SessionState in this even though I originally pointed Michael in that direction as we can use normal synchronization to ensure that the effect of relaxed checks only affect a single thread. This patch encapsulates this functionality inside ItemValidator and avoids the public enabledChecks access methods. 1 for JCR-2714-2.patch thanks jukka. one minor issue though. the method name performUnchecked is IMO misleading since checks aren t disabled entirely. performRelaxed or just perform is probably more appropriate WDYT Agreed about the naming good point.Thanks Jukka. This looks good to me. Although I d prefer to have the performUnchecked method on SessionState I think your solution is better since it doesn t require to expose ItemValidator s state.I committed the patch with performRelaxed as the method name in revision 985185.Having such a method in ItemValidator means that we need to get rid of the public SessionImpl.getItemValidator method. I did that in revision 985218 by instead using the more appropriate SessionContext.getItemValidator method.Fixed at 985218. Thanks Jukka
