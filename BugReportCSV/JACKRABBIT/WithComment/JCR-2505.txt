High memory usage on node with multi-valued string properties
Multi-valued string properties are tokenized per value which may consume quite some memory when there are lots of small values in on a property. The memory footprint is 2k per value because each value is tokenized with a separate tokenizer instance. That tokenizer uses a stream buffer of 2k bytes. Instead the values should be concatenated whitespace separated and then tokenized in one go.do you mean lucene tokenizer what about non-whitespace-aware tokenizers is there any CJK maybe do you mean lucene tokenizer yes. actually it s not that bad and only affects Jackrabbit versions 1.4 and lower. That s also the version where I discovered the issue. More recent versions use lucene-core 2.3.2 or 2.4.1 which only use one TokenStream at a time and even try to re-use the tokenizer. See LUCENE-969. There s still room for improvement. The JackrabbitAnalyzer does not implement reusableTokenStream . That is each value of a multi-valued property will instantiate a new Tokenizer. The proposed patch fixes this. With the patch applied the JCRAPITest suite takes about 10 less time to execute on my machine. 1 Sounds great Applied patch in revision 915718
