Extend the IndexingConfiguration to allow configuration of reuseable analyzers
To the indexing configuration.xml a xml block of analyzers should be configurable. In each index-rule to a property an analyzer can be assigned. This means that property will be analyzed with that specific analyzer. In the first place it enables multilingual indexing. Documentation needs to be added explaining the difference in searching in the node scope jcr contains . foo and in some property jcr contains myprop foo . The node scope will always be searched and indexed with the default analyzer which can be configured in the workspace.xml in the SearchIndex element. Below a possible indexing configuration.xml snippet is shown. Also node the possible enhancement not sure wether this implementation will have it because it requires a lot of filter Factories and is probably out of scope . Adding custom filters which do not need a factory might be easier. analyzers analyzer name fr class org.apache.lucene.analysis.fr.FrenchAnalyzer analyzer name de class org.apache.lucene.analysis.de.GermanAnalyzer          analyzer name compound class org.apache.lucene.analysis.SimpleAnalyzer               filter class jr.StopFilterFactory words stopwords.txt               filter class jr.EdgeNGramTokenizerFactory side front minGram 1 maxGram 2          analyzer analyzers index-rule nodeType nt unstructured         property analyzer fr bode fr property         property analyzer de bode de property index-rule Suggested configuration gives complication for implementation Since I need to be able to know which analyzer to use based only on the the string representation JCR-style name of the given property I can only set an analyzer for a certain property for the entire workspace and not based on a single index-rule. This means that if I use index-rule nodeType nt unstructured         property analyzer fr myNs bode fr property         property analyzer de myNs bode de property index-rule that the analyzer for property myNs bode fr is set for the entire workspace for all other index-rule s as well. Therefore I would like to suggest to add the properties to index with a certain analyzer to the analyzer configuration so analyzer name fr class org.apache.lucene.analysis.fr.FrenchAnalyzer      property myNs bode fr property     property myNs intro fr property analyzer This means nothing changes to the index configuration apart from an analyzer xml block where workspace global analyzers for certain properties are defined. WDOT That s OK with me but I think being able to configure an analyzer in an index rule also seems useful to me. That s OK with me but I think being able to configure an analyzer in an index rule also seems useful to me. That is fine with me but we do have to realize that I cannot make a distinction between setting it for a property in a single index-rule or setting it global like I did describe it. It is because when analyzing or when parsing some query for a field all I know in the analyzer is the the string representation JCR-style name of the given property. If that is fine with you I will add this configuration option and write documentation about it.I have implemented the first part without enabling configuration of an analyzer in a index rule because of the implication that it ends up being global though if wanted can add it. Let me know . Current configuration looks for example like analyzers          analyzer class org.apache.lucene.analysis.fr.FrenchAnalyzer              property test fr mytext property              property test fr body property          analyzer          analyzer class org.apache.lucene.analysis.de.GermanAnalyzer              property test de mytext property              property test de body property          analyzer          analyzer class org.apache.lucene.analysis.nl.DutchAnalyzer              property test nl mytext property              property test nl body property          analyzer analyzers Now I want to add some tests showing the possible confusing difference in search results between a property and a node scope search. The only problem is that untill now I do not see a indexing configuration.xml in the jackrabbit trunk. I do see a indexing-configuration-1.0.dtd only. Is it possible add some tests with respect to some indexing configuration.xml It might be a problem that the indexing configuration.xml holds for all the tests regarding the workspace then or not Has anybody an idea how to add some tests for the indexing configuration.xml The DTD is indeed the only file we have. There is no example except for the wiki page here http wiki.apache.org jackrabbit IndexingConfiguration For testing you can create a new workspace under jackrabbit-core applications test workspaces. We already have two workspaces which are used for the JCR tests. Just create a folder put a workspace.xml and an indexing configuration.xml in there. You also might have to adapt the build script otherwise it probably remove the files again when you call mvn clean. For testing you can create a new workspace under jackrabbit-core applications test workspaces. We already have two workspaces which are used for the JCR tests. Just create a folder put a workspace.xml and an indexing configuration.xml in there. You also might have to adapt the build script otherwise it probably remove the files again when you call mvn clean. I already did this so testing for me is not a problem. What I was referring to was to have it available in unit tests in trunk so people can play with it. But then this configuration xml is applied to all the other unit tests. Anyway I ll create a patch for the working configurable properties analyzers monday and add a indexing configuration.xml that can be used for testing. Do you still want me to add the possibility for defining an analyzer in an indexing-rule though defining an analyzer in an indexing-rule for a property will imply that this analyzer is also used for this property outside the specific indexing-rule Do you still want me to add the possibility for defining an analyzer in an indexing-rule though defining an analyzer in an indexing-rule for a property will imply that this analyzer is also used for this property outside the specific indexing-rule no I think it s better to have it symmetric. If they can only be used globally then you should only be allowed to configure them globally. no I think it s better to have it symmetric. If they can only be used globally then you should only be allowed to configure them globally. Also IMO this is best because it might be very confusing. The reason why it can be only globally configured is in the tokenStream part of the analyzer public TokenStream tokenStream String fieldName Reader reader This one is used for indexing and parsing for searching and the only thing I can distinguish on is the String fieldName string representation of the QName . There is no way to know which indexing-rule it holds for hence the global configuration. patch against jackrabbit-core rev 571494. To use the configurable analyzer per property in workspace.xml in SearchIndex add param name indexingConfiguration value applications indexing configuration.xml And in indexing configuration add something like analyzers          analyzer class org.apache.lucene.analysis.StopAnalyzer              property mytext property          analyzer          analyzer class org.apache.lucene.analysis.WhitespaceAnalyzer              property mytext2 property          analyzer   analyzers if you want to use org.apache.lucene.analysis.fr.FrenchAnalyzer or org.apache.lucene.analysis.de.GermanAnalyzer etc make sure you add the lucene-analyzers.jar If this patch is applied or before I want to add some documentation to http wiki.apache.org jackrabbit IndexingConfiguration to explain how the analyzer configuration works and what behavior is to be expected. What is the best way to do this Can I create a profile myself to edit the wiki Thanks a lot for the patch Ard looks quite good. Just some minor issues - There s a System.out in AnalyzerImpl.tokenStream - Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer - Change the type of SearchIndex.analyzer to match the concrete class this makes the cast redundant. If this patch is applied or before I want to add some documentation to http wiki.apache.org jackrabbit IndexingConfiguration to explain how the analyzer configuration works and what behavior is to be expected. What is the best way to do this go to http wiki.apache.org jackrabbit IndexingConfiguration and add a section about the analyzers Can I create a profile myself to edit the wiki yes you can create one here http wiki.apache.org jackrabbit UserPreferences - There s a System.out in AnalyzerImpl.tokenStream - Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer - Change the type of SearchIndex.analyzer to match the concrete class this makes the cast redundant. Aaarrggh how stupid of mine to have a System.out again I am sorry I ll check check double check in the future - I am not in the office today so will create a patch with your suggestions tomorrow and edit the wiki. Thanks for reviewingdone - There s a System.out in AnalyzerImpl.tokenStream - Can you please move AnalyzerImpl to a top level class and maybe rename it to JackrabbitAnalyzer - Change the type of SearchIndex.analyzer to match the concrete class this makes the cast redundant. If the patch is ok applied I ll update http wiki.apache.org jackrabbit IndexingConfiguration. Applied the patch in revision 573526. Thanks a lot for the patch and your good work.Thanks. I ll update the http wiki.apache.org jackrabbit IndexingConfiguration later today.
