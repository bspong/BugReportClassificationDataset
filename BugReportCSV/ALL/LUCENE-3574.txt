Add some more constants for newer Java versions to Constants.class remove outdated ones.
Preparation for LUCENE-3235 This adds constants to quickly detect Java6 and Java7 to Constants.java. It also deprecated and removes the outdated historical Java versions. Patch for Lucene 3.x will remove deprecations in trunk and make JRE IS MINIMUM JRE6 true deprecate it there Committed 3.x revision 1201739 Committed trunk revision 1201741 One typo nsme - name Also not sure if it s worth it but perhaps instead of constants like MIMINUM JAVA X we can have a class JavaVersion that follows the same logic we have in Version and can compare itself to other JavaVersions Then we can have constants for JAVA 6 new JavaVersion 6 and similar for JAVA 7 and another CURRENT JAVA VER that is initialized with the code you wrote. And you can then compare CURRENT to JAVA 6 7 Just an idea. Also not sure if it s worth it but perhaps instead of constants like MIMINUM JAVA X we can have a class JavaVersion that follows the same logic we have in Version I think the problem here would be that say we release 3.5 in a week. Then two years later Java 8 comes out... we can t know today how to detect it. So all we can do is say that we are at least java 7 because we have XYZ. One typo nsme - name nsme - NoSuchMethodException Exactly I think that s what I meant Ð we detect the Java version as best we can and store it in a constant JAVA VERSION. It can be compared to JAVA 6 7 thru an atLeast API like JAVA VERSION.atLeast JAVA 7 . The code in 3.5 will only know to detect up to Java 7 while the code in 5.2 will know to detect Java 8. Wouldn t that work nsme - NoSuchMethodException ah ok . The code in 3.5 will only know to detect up to Java 7 while the code in 5.2 will know to detect Java 8. Wouldn t that work I would prefer not to because it opens up the opportunity to wrongly record this somewhere e.g. diagnostics map or even just System.out.println or checkindex or something... it would be misleading. One example where it might be bad If it s an enum you can also do if JAVA VERSION JAVA 7 so the enum constants are not named like the fact they represent. I think thats all too much logic for something simple. For one major version we will have mostly 2 or 3 constants. In trunk we currently only have Java7 and a deprecated one which is always true. New constants are only added on request when we want to test for features bugs. Ok I m convinced . Was just a thought Bulk close after release of 3.5
