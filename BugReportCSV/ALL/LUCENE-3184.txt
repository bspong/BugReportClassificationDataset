add LuceneTestCase.rarely LuceneTestCase.atLeast 
in LUCENE-3175 the tests were sped up a lot by using reasonable number of iterations normally but cranking up for NIGHTLY. we also do crazy things more rarely for normal builds e.g. simpletext payloads crazy merge params etc also we found some bugs by doing this because in general our parameters are too fixed. however it made the code look messy... I propose some new methods instead of some crazy code in your test like int numdocs TEST NIGHTLY 1000 100 RANDOM MULTIPLIER you use int numdocs atLeast 100 this will apply the multiplier also factor in nightly and finally add some random fudge... so e.g. in local runs its sometimes 127 docs sometimes 113 docs etc. additionally instead of code like if TEST NIGHTLY random.nextBoolean random.nextInt 20 17 you do if rarely which applies NIGHTLY and also the multiplier logarithmic growth . here s a patch also includes some random speedups to some of these tests. Looks great I love the LTC.rarely usually atLeast methods we can fix the remaining tests to use this stuff as we get around to them. There are some problems now in nightly builds with OOMs boith 3.x and trunk . We can do either reduce some nightly settings raise -Xmx if nightly true maybe dependent on number of iterations too All OOMs are related to FST usage mostly the one with the big file and lots of iterations org.apache.lucene.util.fst.TestFSTs.testBigSet but also org.apache.lucene.index.TestPerFieldCodecSupport.testStressPerFieldCodec org.apache.lucene.search.TestPhraseQuery.testRandomPhrases I have also to note that the tests now take horribly long in nightly. One build took 2 hrs and was finally failing at testBigSet. So it was not even running module contrib tests it took 2hrs for test-core in Lucene. Clover did also not run but it does not use nightly or more than one iteration. I think uwe s reported problems are fixed Bulk close after release of 3.5
