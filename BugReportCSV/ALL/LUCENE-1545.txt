Standard analyzer does not correctly tokenize combining character U 0364 COMBINING LATIN SMALL LETTRE E
Standard analyzer does not correctly tokenize combining character U 0364 COMBINING LATIN SMALL LETTRE E. The word mo chte is incorrectly tokenized into mo chte the combining character is lost. Expected result is only on token mo chte . java -Dfile.encoding UTF-8 -cp lib lucene-core-2.4-20090219.021329-1.jar . AnalyzerTest mo 0 2 type ALPHANUM chte 3 7 type ALPHANUM m 8 9 type ALPHANUM mo 10 12 type ALPHANUM chte 13 17 type ALPHANUM locale LANG de DE.UTF-8 LC CTYPE de DE.UTF-8 LC NUMERIC de DE.UTF-8 LC TIME de DE.UTF-8 LC COLLATE de DE.UTF-8 LC MONETARY de DE.UTF-8 LC MESSAGES de DE.UTF-8 LC PAPER de DE.UTF-8 LC NAME de DE.UTF-8 LC ADDRESS de DE.UTF-8 LC TELEPHONE de DE.UTF-8 LC MEASUREMENT de DE.UTF-8 LC IDENTIFICATION de DE.UTF-8 LC ALL this is an example of why i started messing with LUCENE-1488 Feel free to switch back but for now I m going to mark this as part of LUCENE-1488 as offhand that looks like the best solution for this issue. As that issue is not marked 2.9 at the moment I m pushing this off to 3.0. if you are looking for a more short-term solution since i think 1488 will take quite a bit more time it would be possible to make StandardAnalyzer more unicode-friendly . its not possible to make it correct and adding additional unicode friendliness would make backwards compat a much more complex issue different unicode versions across JVM versions etc . but if you want i m willing to come up with some minor grammar changes for StandardAnalyzer that could help things like this. Mark when we push we should push to 3.1 not 3.0 I just added a 3.1 version to Jira for Lucene ... because 3.0 will come quickly after 2.9 and will only remove deprecations etc. but if you want i m willing to come up with some minor grammar changes for StandardAnalyzer that could help things like this. Is it possible to conditionalize at runtime certain parts of a JFlex grammar Ie with matchVersion LUCENE-1684 we could preserve back-compat on this issue but I m not sure how to cleanly push that matchVersion provided runtime to StandardAnalyzer s ctor down into the grammar so that eg we re not force to make a new full copy of the grammar for each fix. Though perhaps that s an OK solution since it d make it easy to strongly guarantee back compat... . michael I don t see a way from the manual to do it. its not just the rules but the JRE used to compile the rules and its underlying unicode defs so you might need separate standardtokenizerimpl s to really control the thing... I updated AnalyzerTest.java import java.io.FileOutputStream import java.io.OutputStreamWriter import java.io.StringReader import org.apache.lucene.analysis.TokenStream import org.apache.lucene.analysis.standard.StandardAnalyzer import org.apache.lucene.util.Version public class AnalyzerTest public static void test throws Exception StandardAnalyzer a new StandardAnalyzer Version.LUCENE 31 TokenStream ts a.tokenStream new StringReader mo chte m mo u0364chte OutputStreamWriter writer new OutputStreamWriter new FileOutputStream output.txt UTF-8 while ts.incrementToken writer.append ts.toString .append System.getProperty line.separator writer.flush writer.close public static void main String argv throws Exception test Here s what goes into output.txt when I compile AnalyzerTest.java with javac -encoding UTF-8 -cp lucene dev branches branch 3x lucene build lucene-core-3.1-SNAPSHOT.jar AnalyzerTest mo chte startOffset 0 endOffset 7 positionIncrement 1 type ALPHANUM m startOffset 8 endOffset 9 positionIncrement 1 type ALPHANUM mo chte startOffset 10 endOffset 17 positionIncrement 1 type ALPHANUM With LUCENE-2167 committed on the 3.X branch and on trunk I think this issue is resolved. Please reopen if you see different behavior. fixed in LUCENE-2167 Bulk close for 3.1
