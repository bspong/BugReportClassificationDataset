CartesianPolyFilterBuilder doesn t properly account for which tiers actually exist in the index
In the CartesianShapeFilterBuilder there is logic that determines the best fit tier to create the Filter against. However it does not account for which fields actually exist in the index when doing so. For instance if you index tiers 1 through 10 but then choose a very small radius to restrict the space to it will likely choose a tier like 15 or 16 which of course does not exist. I have also seen this bug come up. It seems that there are only 15 possible tiers as if the best fit tier is greater than 15 then it is scaled back to 15. So one plausible solution that doesn t require any changes to the API is to simply require all documents have all 15 levels indexed. The other solution is to take into account the range of indexed levels when calculating the the best fit tier but this would require an API change although it could be made backwards compatible quite easily. Any thoughts on the preferred approach I think the API should pass in the max range it supports and then bestFit could just do a min on the two as the last step. I agree. I will build a patch to that effect unless there are any other alternatives. Note this bug exists for the min case too that is when a distance is too large Here s a patch. All tests still pass. Committed revision 928860 w the patch above plus some more javadocs. I ll leave open for a day or so in case anyone has quibbles about the names of things. My work LUCENE-2359 did break Grant work here s Here is a patch to correct this. I put the logic into the CartesianTierPlotter instead of the CartesianPolyFilterBuilder as there was allready code to handle Tier level borders there. Thanks Nicolas. Applied. reopening for possible 2.9.4 3.0.3 backport. I noticed it has a warning that it changes the APIs... someone who knows spatial please help decide if its a good or bad idea The comment is here since the early version of local lucene by Patrick O Leary It is still meaningfull as the spatial contrib is still under work and could break current indexes if we change at last the Sinusoidal Projector implemtation Resolving again as this issue will not be backported to 2.9 3.0 branches. Bulk close for 3.1
