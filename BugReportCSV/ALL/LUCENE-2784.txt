Change all FilteredTermsEnum impls into TermsEnum decorators
Currently FilteredTermsEnum has two ctors FilteredTermsEnum IndexReader reader String field FilteredTermsEnum TermsEnum tenum But most of our concrete implementations e.g. TermsRangeEnum use the IndexReader field ctor In my opinion we should remove this ctor and switch over all FilteredTermsEnum implementations to just take a TermsEnum. Advantages This simplifies FilteredTermsEnum and its subclasses where they are more decorator-like perhaps in the future we could compose them Removes silly checks such as if tenum null in every next Allows for consumers to pass in enumerators however they want e.g. its their responsibility if they want to use MultiFields or not it shouldnt be buried in FilteredTermsEnum. I created a quick patch all core contrib solr tests pass but i think this opens up more possibilities for refactoring improvements that haven t yet been done in the patch we should explore these too. first quick stab 1 definitely seems like the right path. Looks god but I think no tests hit this that you must do a null check when calling MultiFields.getTerms . We should really remove usage of MultiFields here all Filters and Queries now work directly on segment readers. Looks god but I think no tests hit this that you must do a null check when calling MultiFields.getTerms . We need tests for this and to decide how to handle it e.g. return emptytermsenum or whatever is my first idea. its still better than the empty condition being handled in FTE though and checked on every call to next We should really remove usage of MultiFields here all Filters and Queries now work directly on segment readers. I agree we don t need multifields in these queries. I just did it to be consistent with trunk . We need tests for this and to decide how to handle it e.g. return emptytermsenum or whatever is my first idea. For IR.terms what should be called in MTQ.getTermsEnum IR - not MultiFields null is a vlaid return value. Mike and you decided that. MTQ s internal handling can also live with null enum. I will look further into it and post modified patch I looked into the code of MTQ The reason why we don t hit the null case here is MTQ itsself gets IR s Terms and checks for null so later calls here always return something. In my opinion this is also not the right thing I don t know for what reason this was added . Maybe we should simply also change MTQ.getTermsEnum to simply take a enum to wrap Right we could check in every query and return TermsEnum.EMPTY or a crazier idea we could change MTQ.getTermsEnum IndexReader reader AttributeSource atts to instead take a TermsEnum versus a reader. then MTQ itself could handle this if null return TermsEnum.EMPTY case But i didnt try this yet. or a crazier idea we could change MTQ.getTermsEnum IndexReader reader AttributeSource atts to instead take a TermsEnum versus a reader. I already checked for that that was the reason for my prev. comment . But in my opinion we should not do this. As some MTQs may quicker return EMPTY for some reasons like for a range when upper lower. So you don t even need to look into the IR s fields terms. So I would lie to remove the checks in MTQ and simply call always MTQ.getTermsEnum and then exit if empty. Thats much more clean. I was just wondering why these checks were added by Mike For TermRange and Numeric its too much work. ok either way is fine by me. btw there is a similar check in AutomatonQuery too where it looks at the query and knows it can return EMPTY we can clean up these getEnums though such as that one a lot though i didnt do it in the patch... it was almost a find-replace job. here is an improved patch this changes MultiTermQuery.getTermsEnum IndexReader ir to MultiTermQuery.getTermsEnum Terms terms . I also removed multifields usage in these multitermqueries maybe missed a few will look more because all rewrite methods are per-segment. That patch looks very good if term null TODO is this really necessary we should be positioned already The check is really necessary as on the first call of nextSeekTerm on the uninitialized TermsEnum before first next the current term is null. If we would change this and place it on the first term of the underlying enum we would break everything TermsEnum must be unpositioned initially before next this was the broken thing before 4.0 and we would have an unneeded seek on a never needed term. So you can remove that comment from patch I also removed multifields usage in these multitermqueries maybe missed a few will look more because all rewrite methods are per-segment. MultiTermQueryWrapperFilter still has it And TermCollectingRewrite does not have it which is correct because it knows that it works per-segment that was always the case . But I think we should remove remaining MultiFields in a separate issue. ok i removed the TODO i understand now and also some unused imports in tests. other than that the patch is the same all core contrib solr tests pass. Committed revision 1040379.
