java.util.UUID.fromString too slow
Benchmarking shows that the java.util.UUID.fromString method is 10 times slower than the previous version we used from jackrabbit-jcr-commons. This method is quite heavily used in the query section or more generally whenever a NodeId is created from a String. I d like to introduce the custom String UUID parsing code again that we had in the jackrabbit-jcr-commons UUID class and use it in the NodeId String constructor. WDYT 1 Probably you can even ignore some of the strict formatting rules I propose long high 0 low 0 int i 0 for int j 0 i s.length j 16 i     char ch s.charAt i     if ch -         high high 4 Character.digit ch 16         j      for int j 0 i s.length j 16 i     char ch s.charAt i     if ch -         low low 4 Character.digit ch 16         j      No objections to reintroducing the old parsing code. On the other hand IMHO we should avoid having to parse and reformat UUIDs in any performance critical part. Could we use a binary field to store the NodeId ... In any case I think this should be treated as an internal performance optimization and handled entirely within jackrabbit-core so I dropped jackrabbit-jcr-commons from the list of affected components. I d like to introduce the custom String UUID parsing code again that we had in the jackrabbit-jcr-commons UUID class and use it in the NodeId String constructor. WDYT 1Re-introduced the UUID string parsing code previously present in jackrabbit-jcr-commons. svn revision 831891Creating a NodeId from a String is still a bottleneck. It s relatively easy to improve performance avoiding creating temporary objects use switch case . There are some other issues some errors are not detected and the exception should include context information.About 40 faster according to my test.
