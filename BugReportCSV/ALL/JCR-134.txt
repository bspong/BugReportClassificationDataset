Unreferenced VersionHistory should be deleted automatically.
since the creation of a VersionHistory is triggered by the creation of a mix versionable node the removal should happen automatically as soon as no references to that version histroy exist anymore. this is the case when all mix versionable nodes in all workspaces belonging to that VH are deleted and all the versions in the VH are removed i.e. only the jcr rootVersion is left. At this point the VH should be deleted aswell.Schedule for 1.0On node.removeMixin mix versionable should the VersionHistory also be deleted May a Node be versionable in a workspace and not in another one The above proposal remove the VH when no node and no version references it would be great but I think there is no easy and cheap way ATM to check all corresponding nodes on a node or version deletion. Or am I missing something but I think there is no easy and cheap way ATM to check all corresponding nodes on a node or version deletion. you re right. one would have to check all workspaces if no corresponding node exist anymore. And about the two other points Ê- should the VH be deleted on node.removeMixin mix versionable would it be safe Ê- may a Node be versionable in a workspace and not in another one I think the spec allows it it doesn t actually forbid it . But I need confirmation. So the only way to do this is IMHO the following algorithm Ê- when removing a Version if this is the last version only the jcr rootVersion is left and there is no references to the jcr rootVersion one can remove the VH Ê- when removing a Node if it is versionable and references the jcr rootVersion ie have never been checked in and there is no other references to the VH in others workspaces then delete the VH Ê- when removing the mix versionable either delete directly the VH see my first question in this post either check if there is only the jcr rootVersion left and then delete the VH. WDYT - should the VH be deleted on node.removeMixin mix versionable would it be safe yes unless it s not used by another node in another workspace. the only usecase i can think of is that the application wants to restore the versionability of the node again by adding the mix versionable again. it might be desirable if the old versions still exist then. - may a Node be versionable in a workspace and not in another one I think the spec allows it it doesn t actually forbid it . But I need confirmation. i think so too So the only way to do this is IMHO the following algorithm - when removing a Version if this is the last version only the jcr rootVersion is left and there is no references to the jcr rootVersion one can remove the VH yes. - when removing a Node if it is versionable and references the jcr rootVersion ie have never been checked in and there is no other references to the VH in others workspaces then delete the VH yes. - when removing the mix versionable either delete directly the VH see my first question in this post either check if there is only the jcr rootVersion left and then delete the VH. yes. in general after any operation that affects the references to the version storage check for orphaned VH and remove them. the big problem hereby is that it s not easy or lets say not cheap to check if there is any node that still references the VH. Since there can be a lot of workspaces which might be idle. the best would probably be to keep a ref count on the VHs. Isn t it a common use case that version histories need to be preserved even after the last reference is gone It seems to me that this may be a valuable feature so maybe this needs to be configurable. The VH need only to be kept when there are remaining Version attached to it. In many apps it would be great to get rid of empty VH ie no more Version and no more Node referencing it .yes of course empty VH no references - remove non-empty VH no references - keep or at least configurable .Concerning the eventual ref count kept on VHs is it allowed to store it in the repository as a new property of the VH If yes there would be a compatibility problem whith existing repositories. Otherwise how would you see the storage of this ref count Is there any chance of having this fixed in 1.4 Our use case is as follows data format node structure for an application may change from one app s version to another currently it happens pretty often as it s not stable yet and nodes are versionable. Conversion is done by creating another nodes tree and copying properties there original nodes are deleted. And they of course should be deleted completely along with all the versions and VH... Thanks oleg Is there any chance of having this fixed in 1.4 No at least not in the scope you envision see Tobias summary comment above.As no one reply to my thread for fixing this issue http markmail.org message 7boajk2b2mnhe4xf i will try to submit a fix . The solution that i propose is based on the following facts - if there is no references to the VersionHistory node then no one node is alive. - if the VersionHistory node has only two children root version and version labels then there is no version for restoring the content. These tests are computed in InternalVersionHistoryImpl removeVersion Name . The following use cases are supported - committed node.remove followed by multiple versionHistory.removeVersion .. the version history is then deleted in the same time as the last version is removed. The following use cases are not supported yet - node.removeMixin mix versionable - node.remove after all versions except the root version have been deleted don t know if this is possible This patch comes with a test case to validate version history cleaning. I will be waiting for your feedbacks.IMO this covers at least the most important use case. Actually node.remove after all versions except the root version have been deleted is not possible as the node refers to one of the versions. So we tried to clean up VH we used node.remove and then VH.removeVersion for each Version returned by getAllVersions enumeration except the root one. This approach works but leaves VH and root version nodes. Thanks for approaching this issue may the attached patch be reviewed and eventually committed so this issue can be part of the upcoming 1.5.1 release IMHO many users have the same concern see recent thread on users Looks good thanks Patch applied in revision 778645. I ll merge it also to the 1.x branch for inclusion in the 1.6 release. Merged to the 1.x branch in revision 778680.There is one use case where it fails When I have versionable node but never create version using VersionManager so there is only rootVersion. I assume VersionHistory removal is triggered by removing last non root Version so it is understandable. To fix this it would be good to have some way how to explicitly remove also rootVersion after versionable node remove so this removal of rootVersion could trigger removal of version history. It would be good to allow rootVersion removal when its versioned node is already removed. Does it make sense to create issue for this use case Yes it is our mistake as we set versionable node which was not actually used as versioned node. We could workaround it by creating one additional regular version and then removing node this new version to do full version history cleanup. It would be good to allow rootVersion removal when its versioned node is already removed. Sounds like a reasonable idea. Does it make sense to create issue for this use case Yes please do.Done. I filed JCR-3238.
