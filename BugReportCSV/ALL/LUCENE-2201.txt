more performance improvements for snowball
i took a more serious look at snowball after LUCENE-2194. This gives greatly improved performance but note it has some minor breaks to snowball internals Among.s becomes a char instead of a string SnowballProgram.current becomes a char instead of a StringBuilder SnowballProgram.eq s int String becomes eq s int CharSequence so that eq v StringBuilder doesnt need to create an extra string. same as the above with eq s b and eq v b replace s int int String becomes replace s int int CharSequence so that StringBuilder-based slice and insertion methods don t need to create an extra string. all of these breaks imho are only theoretical the problem is just that pretty much everything is public or protected in the snowball internals. the performance improvement here depends heavily upon the snowball language in use but its way more significant than LUCENE-2194. patch to make snowball work on char if no one objects I will commit this in a few days nothing that technically some parts of the api have changed even though nothing uses it directly and why would you manually subclass SnowballProgram... all tests from LUCENE-2203 pass with this patch... it does not change any snowball behavior . I will also update the patch to additionally make member variables in Among final consistent with what has already happened in Snowball http svn.tartarus.org snowball trunk snowball java org tartarus snowball Among.java view diff r1 267 r2 502 diff format h Hello I was looking at this and it causes problems for any old binary SnowballPrograms because of String - CharSequence signature changes etc. So are we worried about this it looks fixable by adding overloaded String-based methods to all of these but is messy. here is a patch showing what i mean it seems almost silly but appears to work with old SnowballProgram class files. all tests pass and also LUCENE-2203 tests with a clean build or binary .class files... would like to commit this one at the end of today also. Committed revision 898976.
