Releasing a connection is unconfirmed
When a connection is attempted to be released using HttpConnection.releaseConnection it is unclear whether this is actually done. The implementation for the method is as follows in 3.0-beta1            Release the connection.           public void releaseConnection         LOG.trace enter HttpConnection.releaseConnection         if locked             LOG.debug Connection is locked. Call to releaseConnection ignore          else if httpConnectionManager null             LOG.debug Releasing connection back to connection manager.             httpConnectionManager.releaseConnection this          else             LOG.warn HttpConnectionManager is null. Connection cannot be relea               Silently ignoring a request to release the connection in this case is hardly ever the right thing to do in my opinion. Instead I suggest the method indicates whether the connection was actually closed or not. I see at least 2 alternatives 1 throw an exception to indicate the connection could not be released 2 return a flag indicating whether the connection could actually be released.Created an attachment id 13795 Possible implementation of alternative A Created an attachment id 13796 Possible implementation of alternative B I am in favour for throwing an exception here. But the change needs proper testing. 1 IllegalStateException Patch A is no good because both cases the locked connection and the null connection manager are legitimate. 2 Patch B though in a very subtle way breaks the API which is formally has been frozen. The method is so widely used so I am really hesitant to make this change no matter how minor. I do agree the releaseConnection code is not ideal. However this is not an isolated problem with releaseConnection rather an overall problem with the 2.0 and 3.0 API that have been stretched to their limit. If there are no load objections I ll mark this bug as WONTFIX OlegFine with me. I agree that the code works as designed . To my knowledge introducing an exception would break the connection managers and changing the API is not feasible currently.Depending on the definition patch B may not break the API. All existing code will still compile with the changes applied. However indeed all code that was binary linked to the 3.0-beta1 code will not work as-is with these changes applied since the signature of the method will change. But assuming that the definition of the freeze is strict I have no objections to marking this one as WONTFIX.I would agree with the WONTFIX. The locked behavior is only meant to be used when executing a method inside the HttpMethodDirector. This feature should not be visible to users of the HttpClient API. MikeThe code may indeed work as designed but it does not work as documented . There is nothing in the documentation that explains this behavior. For users of the library it is not clear that even if you do call releaseConnection the connection may not actually be released so you may have to call it multiple times just to be sure. Also it is not clear from the documentation that the releaseConnection method can safely be called multiple times. Finally there is no way to tell that the connection has indeed been released. Created an attachment id 13803 Patch that extends the documentation of the releaseConnection method Created an attachment id 13804 HttpConnection Javadoc patch take 2 Ernst Do you mind if I change the wording a little and make it a little less say scary OlegLooks perfect to me HTTPCLIENT-408 has been marked as a duplicate of this bug. Patch committed. Many thanks Ernst. OlegVerified r1.104.
