Security of token base authentication
Token based authentication as implemented with JCR-2851 seems to exhibit a security issue the token returned by the server consists of the identifier of a newly created node in the repository. An attacker who is able to guess or acquire by other means i.e. via log files that identifier will be granted access to the repository. Worse yet JCR-2857 introduces sequential node ids. Guessing is a piece of cake in such a setup. I think we should decouple authentication secrets from node ids. A simple solution would be to store the secret in a token attribute and delegate generation of the secret to a dedicated handler. Such a handler can then use a secure random generator private public key encryption or whatever other method that is deemed appropriate to generate the authentication secret. Initial discussion see http markmail.org thread aspetgvmj2qud25a Worse yet JCR-2857 introduces sequential node ids. Guessing is a piece of cake in such a setup. the token nodes never use sequention node ids. the token nodes never use sequention node ids. Since JCR-2857 this is a configuration option. So yes this setup is possible.Apparently sequential node ids are not used anymore for token nodes since rev. 1076597. See http svn.apache.org viewvc view revision revision 1076597 My general concern remains however.revision 1076597 uses if System.getProperty NodeIdFactory.SEQUENTIAL NODE ID null   ... I think security shouldn t check this setting and shouldn t rely on the security of node ids in general. Not sure if that s related but it s possible to import nodes with fixed node ids. The fact that node ids are randomly generated is just an implementation detail of the current Jackrabbit. Wouldn t it be simpler to store the token as a property value Or instead of storing the token itself store the secure hash code of the token as a value System.getProperty NodeIdFactory.SEQUENTIAL NODE ID Are you kidding Are we really configuring this through system properties 
