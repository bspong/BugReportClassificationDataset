when you clone or reopen an IndexReader with pending changes the new reader doesn t commit the changes
While working on LUCENE-1647 I came across this issue... we are failing to carry over hasChanges norms deletionsDirty etc when cloning the new reader. I wonder if the only two tests I still have failing for always-use-MSR patch are somehow related to this. They are testSegmentReaderDelDocsReferenceCounting org.apache.lucene.index.TestIndexReaderClone testNormsRefCounting org.apache.lucene.index.TestIndexReaderCloneNorms Both die with an exception similar to java.io.IOException file 0 1.del was already written to And I didn t yet have time to fully grok what s happening there. I do modifications through toplevel readers assert state of their only segment reader and everything goes well until .flush or .close on toplevel reader. Attached patch... I plan to commit in a day or two. I wonder if the only two tests I still have failing for always-use-MSR patch are somehow related to this. Try the patch For always use MSR if you just fix open reopen to never return MSR it causes these failures Try the patch Yup it fixed everything. Or to be more exact it fixed the tests that were failing for me. Your two new tests fail as soon as I apply always use MSR because MSR does not carry over hasChanges hasDeletions on clone . Or to be more exact it fixed the tests that were failing for me. Your two new tests fail as soon as I apply always use MSR because MSR does not carry over hasChanges hasDeletions on clone . Hmm OK so it s a good news bad news situation. Good news is patch resolved your original issue. I ll commit it shortly. Bad news is something is wrong w your patch because MSR needs to carry over hasChanges deletions norms on clone . Bad news is something is wrong w your patch because MSR needs to carry over hasChanges deletions norms on clone . Something is wrong with trunk. Try the test in the patch. It is absolutely identical to yours except it adds another doc to index to have two segments and consequently MSR. And here s the fix. The problem - it s not elegant at all. We can scrap it and I can do the fix within always use MSR patch it looks way cleaner there. OK Ð good catch I ve reopened this to remember this bug is present let s fix this issue under always use MSR . As LUCENE-1651 is now committed this issue can be resolved.
