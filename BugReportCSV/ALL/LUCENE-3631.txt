Remove write access from SegmentReader and possibly move to separate class or IndexWriter BufferedDeletes ...
After LUCENE-3606 is finished there are some TODOs SegmentReader still contains package-private all delete logic including crazy copyOnWrite for validDocs Bits. It would be good if SegmentReader itsself could be read-only like all other IndexReaders. There are two possibilities to do this the simple one Subclass SegmentReader and make a RWSegmentReader that is only used by IndexWriter BufferedDeletes ... DirectoryReader will only use the read-only SegmentReader. This would move all TODOs to a separate class. It s reopen clone method would always create a RO-SegmentReader for NRT . Remove all write and commit stuff from SegmentReader completely and move it to IndexWriter s readerPool it must be in readerPool as deletions need a not-changing view on an index snapshot . Unfortunately the code is so complicated and I have no real experience in those internals of IndexWriter so I did not want to do it with LUCENE-3606 I just separated the code in SegmentReader and marked with TODO. Maybe Mike McCandless can help Patch making SegmentReader fully read-only it s much simpler now I cutover to simple ctors 3 of them depending on how the core del docs are set instead of static get methods. I removed clone from all IR impls and made final IR.clone that throws UOE. Cloning no longer makes sense since all IRs are read-only... I pushed all pending deletes tracking inside IW and changed the readerPool to store a map of SegmentInfo to the state that IW needs to track for each segment open reader for searching open reader for merging live docs and pending delete count . I think it s ready... Why not remove the Cloneable interface from IndexReader and remove clone alltogether. Then user gets compile error. Why not remove the Cloneable interface from IndexReader and remove clone alltogether. Then user gets compile error. Ahh right I ll do that. Patch looks nice. One more thing In my opinion the whole synchronized stuff in SegmentCoreReaders can be removed see LUCENE-3653 - all is final now why synchronize So LUCENE-3653 is a non-issue when this is committed. Same applies to IR DR ... - almost all synchronized methods can go away. And decRef too as it s already guarded by AtomicRef And in my opinion incRef decRef on IndexReaders is useless too or almost useless except segmentreaders . As Shai said before code like SearcherManager should reCount externaly with a separate interface helperclass that refcounts and on decRef to 0 it calls Closeable.close - so helper can work on any Closeable . But we should remove that in separate issue. I get a clone error in TestIndexReaderClone. There s also still a strange verbosity junit COMPUTE TEST METHODS org.apache.lucene.util.LuceneTestCaseRunner 27f649df Hmm I meant to svn rm TestIndexReaderClone.java . Oh I ll remove that silly sop. You re right Ð we don t need any sync in SegmentCoreReaders now It s entirely final also SegmentReader ... I ll remove. And in my opinion incRef decRef on IndexReaders is useless too or almost useless except segmentreaders . As Shai said before code like SearcherManager should reCount externaly with a separate interface helperclass that refcounts and on decRef to 0 it calls Closeable.close - so helper can work on any Closeable . But we should remove that in separate issue. We should explore that... it s tricky. New patch with Uwe s suggestions.. I think it s ready Looks good I think thats a good improvement One very small thing can also be fixed later no need for new patch SegmentReader.toString creates a StringBuilder appends one String to it and returns it with toString Maybe simply retun the SegmentInfo.toString ... result... Oh that s silly... I ll fix before committing. 1 I think we should look at moving deletes to codec after you commit. Hi I committed some small cleanups and dead code removal after Clover analysis this morning. One thing we have thread locals for TermVectorsReader and StoredFieldsReader. Would it make sense to use one for DocValues too What do you think Simon One thing we have thread locals for TermVectorsReader and StoredFieldsReader. Would it make sense to use one for DocValues too What do you think Simon I don t see a need for this. The source is cached in the DocValues instance and DocValues instances can be shared across thread. The source is cached in the DocValues instance and DocValues instances can be shared across thread. Thanks I just wanted to make sure that there is no synchronization on DocValues. A customer of mine had huge improvements with loading stored fields since this is in Lucene. This patch also moves the threadlocals to SegmentCoreReaders as they can be reused on reopen nrt readers. Also improve ensureOpen checks to guard everything without duplicating checks. Heavy committed at revision 1221677 Guys is it possible in a current implementation to update the doc values fields without re-indexing a whole document Guys is it possible in a current implementation to update the doc values fields without re-indexing a whole document Not yet though LUCENE-3837 is exploring how to update postings not doc values though for one field in a doc... Yes. I thought on something like that. I see that lucene enforces a write-once policy as I understand this needed to support a transactional behaviour . So I think we may use some conbination of approach for the LUCENE-3837 and a current segment system where any updates after commit go to the a new file like we do with segments. And when the docValues will be read to a memory we will fetch all files and values in a file with higher generation will override values with same docIds. Of course it increases even more the total amount of files. And not sure yet how to express this updates on level of the IndexWriter api.
