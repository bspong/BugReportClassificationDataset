Optimize refresh operations
With the current implementation recursive refresh operations cause a full traversal of the sub-tree rooted at the item causing the refresh. This is potentially expensive. Instead of invalidating each item in the respective sub-tree I propose to mark the root of the sub-tree as invalidated. Such a mark would include a time stamp. Also individual items would be time stamped with their resolution time. When an item is accessed it would check if its resolution time stamp is older than the latest invalidation time stamp. If so it checks whether the invalidation applies to it at all by traversing up the path and if so it would re-resolve itself. In any case its resolution time stamp will be updated. This approach would make invalidation much cheaper without putting much additional load to simple item access. Moreover most of the additional load traversing up the path only applies when an invalidation is pending.Patch implementing above proposal. Also adds a test suite to jackrabbit-jcr-benchmark to validate the claims.Above patch factors item invalidation into a InvalidationStrategy. There are two separate implementations EagerInvalidation and LazyInvalidation. EagerInvalidation behaves like refreshing used to behave. LazyInvalidation implements above proposal.Log file excerpt from benchmark. Most effect is visible for large trees. While fetching nodes is of the same order of magnitude for both strategies refreshing is remarkably faster for LazyInvalidation.Updated patch. This patch incorporates suggestions from Angela thanks Fixed at revision 771280 Applied patch with benchmark tests removed. See https issues.apache.org jira browse JCRBENCH-2
