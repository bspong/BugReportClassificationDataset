Scorer.skipTo current remains on current for some scorers
Background in http www.nabble.com scorer.skipTo 28 29-contr-tf3880986.html It appears that several scorers do not strictly follow the spec of Scorer.skipTo and skip to current location remain in current location whereas the spec says beyond current . We should probably either relax the spec or fix the implementations. my gut says we should fix the Impls and leave the spec the way it is ... less risk of irate clients 2 years down the road wondering why their custom Query classes no longer work in boolean queries because we a relaxed the spec b made optimizations in BooleanQuery to take advantage of the relaxation. The spec text is ambiguous. The biggest issue is to look if any scorers actually call skipTo with n doc . We could further restrict the spec to say that n must be doc for defined results. That change would not hurt customers since the current behavior is already somewhat undefined. patch adds a test to QueryUtils that exposes this issue. 50 test cases in 9 test files fail with this. I know that I did not worry to fulfill this spec in search.function for instance. ConstantScorer is implemented like public boolean skipTo int target throws IOException doc bits.nextSetBit target requires JDK 1.4 return doc 0 The fix would be public boolean skipTo int target throws IOException doc bits.nextSetBit Math.max target doc 1 return doc 0 But I m really not sure I prefer that over just clarifying restricting skipTo. The text was mostly trying to describe what the specified implementation did to provide as clear and unambiguous of a contract as possible. Note that the specified implementation must call next before doc since doc isn t always defined unless next has been called. I ve been struggling with this before at LUCENE-413 . I think the Scorer.skipTo contract is geared towards TermScorer.skipTo target and rightly so because that is where it is all done in the end and the current fast implementation should remain possible. I like the idea to further restrict the spec to say that n must be doc for defined results but that should also take into account that doc is not defined initially. An initial doc -1 nicely fits here too. There are some scorers that could have simplified firstTime logic when doc always return -1 initially and iirc Yonik had has ideas about that but I can t find these back right now. Yes I remember an initial doc -1 would be nice and easy I think . For example DisjunctionMaxScorer could simply remove firstTime blocks in both skipTo and next with no other changes. Even the more flag could easily be removed I think. Note also that Scorer skipTo is specified almost identically to TermDocs skipTo . It would be best if the contracts for these interfaces stayed similar to avoid confusion. How about we change the spec for all skipTo s to require n must be doc else what happens is undefined ie may or may not advance This would resolve this issue and LUCENE-1327. I had another look at these lines in DisjunctionScorer.skipTo from LUCENE-413 if target currentDoc CHECKME skipTo semantics return true I think these lines can simply be dropped. The bug at LUCENE-413 was probably fixed by the changes to SpanScorer then. Dropping these lines also makes DisjunctionSumScorer advance effectively use next when skipTo target is called even when target doc . Also I m changing my opinion on what to do when target doc . I think a DocIdSetIterator and any Scorer should always advance in that case just like the javadocs of TermDocs. When Scorers DocIdSetIterators are combined for example in disjunctions or conjunctions or in the more complex cases of BooleanScorer2 the test for target doc can simply be done before calling skipTo on any of the combined Scorers DocIdSetIterators. Now if such a change surfaces some bugs like LUCENE-413 so be it. It s better to have clearly defined semantics than to have lingering bugs due to explicitly undefined semantics in the case of target doc . Btw. there is a small bug in SpanScorer the freq 0 test there should be replaced by a boolean check for actual matches. See SpanScorer.setFreqCurrentDoc . The bug would only surface when the Similarity used in SpanScorer returns 0 for sloppyFreq . ... else what happens is undefined ... I prefer a clearly defined logic like the one Yonik gave above skipTo n skipTo n max doc 1 assume doc initialized to -1 Well how about changing the TermDocs interface into an abstract subclass of DocIdSetIterator That would allow the javadocs of the definition of skipTo to be done in DocIdSetIterator only. These javadocs could be taken directly from TermDocs.skipTo . As a bonus implementing a TermFilter could be done by directly using a TermDocs. Such a change is not backward compatible interface - abstract class but there are ways to deal with that. See LUCENE-1379 for the SpanScorer bug when sloppyFreq returns 0. How about we change the spec for all skipTo s to require n must be doc else what happens is undefined ie may or may not advance 1 this allows more implementation flexibility. Since we re still having healthy discussions on the approach to resolve this I think we shouldn t hold 2.4 for this or LUCENE-1327 I really don t have a strong opinion on how to resolve this. Except I ve now changed my previous weak opinion in favor of keeping the spec ambiguous since it maximizes back compat flexibility to making the spec unambiguous always advance and fixing all impls to match the spec to prevent and or ferret out any bugs that would otherwise sneak in. Checking if this issue can be resolved. There were quite a few changes in this code in LUCENE-584 skipTo was moved to DISI in LUCENE-1614 skipTo was replaced by advance and the javadocs were refreshed. Current javadocs of DISI.advance are almost accurate to me and I think this can be fixed by adding one more first note to the method like this b NOTE b this method is intended for use with code target gt current code otherwise it is not guaranteed to advance beyond current. The method currently has this in its jdocs b NOTE b certain implementations may return a different value each time if called several times in a row with the same target. I think we need to collapse it with your proposal somehow. Both statements are slightly inaccurate IMO because Current uses cumbersome wording. Proposal says ... intended for use with target current otherwise ... but I think it s a bit fuzzy also. Maybe something like this b NOTE b some implementations may not advance beyond their current link docID if code current target . What do you think Also while we re at it there s a wrong value reference in the jdocs which should be link - the jdocs look awkward with value when generated. I agree well. almost... - the exclusion should also cover target current - I ll add a patch shortly. Trivial patch to fix this documentation. Patch looks good. 1 to commit. javadoc fix committed in trunk and 3x thanks Shai. Bulk close for 3.1
