FileDataStore only open a stream when really necessary
Currently PropertyImpl.getValue opens a FileInputStream if the FileDataStore is used. If the application doesn t use the value this stream is never closed. PropertyImpl.getValue   return internalGetValue .toJCRValue session InternalValue.toJCRValue ..   case PropertyType.BINARY     return new BinaryValue BLOBFileValue val .getStream BLOBInDataStore.getStream   return getDataRecord .getStream FileDataRecord.getStream   return new FileInputStream file One solution is to return a lazy file input stream that only opens the file when reading from the stream and closing the file when the last byte was read . Maybe there is already a class in Apache Commons maybe that can do that. Committed in revision 768982 trunk I just found out there is already a class LazyFileInputStream that does basically the same in the package org.apache.jackrabbit.util. However this one doesn t close the file after reading the last byte.We run into a too many open files problem with using FileDataStore and adding a massive ammount of data to the repository around 80GB documents . We were not searching just adding elements to the repository. However using the modifications of this issue namly jackrabbit trunk jackrabbit-core src main java org apache jackrabbit core data FileDataRecord.java and jackrabbit trunk jackrabbit-core src main java org apache jackrabbit core data LazyFileInputStream.java solves our issue. Is it possible that this modification gets ported to the 1.5.x branch We tested with 1.5.5 and these two files.For me back-porting to 1.5.5 would be OK. To move the LazyFileInputStream to the jackrabbit-jcr-commons package we would need to add a dependency to Apache Commons IO in this project as well        dependency        groupId commons-io groupId        artifactId commons-io artifactId      dependency I suggest not invoking super.close in LazyFileInputStream if the stream was never opened because it can result in a NPE and we got one with Jackrabbit . So maybe something like this would be better public void close throws IOException   if opened     opened true   else     super.close You are right I will fix this problem and add a proper test case.Committed in revision 779081 trunk 
