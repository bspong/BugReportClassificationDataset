Precedence query parser using the contrib queryparser framework
Extend the current StandardQueryParser on contrib so it supports boolean precedence This patch contains a Precedence query parser. It s basically an extension of the current Standard query parser but enables the boolean precedence. The patch also contains the test cases from the current PrecedenceQueryParser currently located under contrib misc. Everything passes fine except a test that tests if the query A B C is the same as A OR B C when the default operator is OR. The problem is that this new PQP does not flat optimize the boolean tree when the boolean operator is the same. It can be performed later but for now it does not implement this kind of optimization. Another issue is that I created a class under contrib queryparser called PrecedenceQueryParser within the same package declaration the PQP from contrib misc is right now. Is that a big issue Couldn t the old PQP be removed and we start using this one so we have no class conflict. The greatest advantage of this implementation is that it basically reuses all the StandardQueryParser functiontalities and syntax and any modification on the StandardQP will be automatically applied to the PrecedenceQP. No need to maintain 2 different implementations with the same code as the old PQP does today. The patch uses some code from LUCENE-1937 so LUCENE-1937 needs to be applied before. Yes let s just remove the old PrecedenceQueryParser which was just an experiment by me - is anyone actually using it Hi I looked at the pipeline PrecedenceQueryNodeProcessorPipeline it contains some complex logic off removing a processor from the StandardQueryNodeProcessorPipeline. I think it would be better to have a common ancestor CommonQueryNodeProcessorPipeline that both StandardQueryNodeProcessorPipeline and PrecedenceQueryNodeProcessorPipeline can extend. It should make it easier for people reading the code. What do you think Hi Erik Should we remove the PrecedenceQueryParser on 3.0 or wait untill 3.1 I looked at the pipeline PrecedenceQueryNodeProcessorPipeline it contains some complex logic off removing a processor from the StandardQueryNodeProcessorPipeline. I think it would be better to have a common ancestor CommonQueryNodeProcessorPipeline that both StandardQueryNodeProcessorPipeline and PrecedenceQueryNodeProcessorPipeline can extend. I don t think it s so complex it just removes GroupQueryNodeProcessor and adds ModifierQueryNodeProcessor I think this is the class name . I also added this description to the javadocs. Anyway I would prefer to leave it like that extending StandardQPP instead of creating a common pipeline. The common pipeline would not make much sense right now there is not QueryBuilder impl that would produce a correct Query instance from a query tree processed by it so no one could just use it. In future we could have a third QP implementation that instead of replacing GroupQueryNodeProcessor by ModifierQueryNodeProcessor it would replace another processor or switch the processors position etc... the CommonQueryNodeProcessorPipeline would not make sense anymore it only make sense right now for PrecedenceQP and StandardQP because we know what both have in common but doesn t mean a third QP would have the same in common. So 1 to leave it the way it s. This patch could also be applied to branch 3x attached is a patch that replaces the PrecedenceQueryParser with this implementation I didnt change any functionality just brought it up to trunk and cleared javadocs errors and other minor things I think this is much easier to maintain... the patch is large because it will remove over 4000 lines of code. Thanks Robert The patch looks good to me. Thanks for reviewing Adriano. I ll commit tomorrow unless anyone objects. Committed revision 1025597 1025606 3x Thanks Adriano Thank you for committing the code Robert. Bulk close for 3.1
