Rename RangeQuery - TermRangeQuery
Since we now have NumericRangeQuery LUCENE-1701 we should rename RangeQuery to TextRangeQuery to make it clear that TextRangeQuery TermRangeQuery StringRangeQuery is based entirely on text comparison. And existing users on upgrading to 2.9 and using RangeQuery for slow numeric searching would realize they now have a good option for numeric range searching. Suggestion TermRangeQuery to be clear about hte fact that it deals with raw Terms in TermEnum order and doesn t do any fancy collation or anything else people might expect when dealing with Strings or Text Suggestion TermRangeQuery to be clear about hte fact that it deals with raw Terms in TermEnum order and doesn t do any fancy collation or anything else people might expect when dealing with Strings or Text 1 Additionally rename FieldCacheRangeFilter RangeFilter. Maybe a good addition to FieldCacheRangeFilter would be to do the same currently only possible with StringIndex for NumericFields Maybe a good addition to FieldCacheRangeFilter would be to do the same currently only possible with StringIndex for NumericFields see LUCENE-1461 OK so RangeFilter - TermRangeFilter RangeQuery - TermRangeQuery And under LUCENE-1461 FieldCacheRangeFilter - FieldCacheRangeFilter on picking up support for numerics... Should I prepare a patch later I would simply rename the files in core and then change the tests and rest to find any references to the old RangeQuery Filter compile failures . After that I create a deprecated subclass of TermRange with the old name and all ctors from the old class. The new class will only supply the new ctors no deprecated ones using Term mapping is done in the subclass . For an issue like this we should go for commit without patch to keep the history of the classes. If you create a patch and apply it without useing svn copy svn commit you will loose history which is not worth it in this case. Just a hint. simon Yes feel free to take this one Uwe thanks That approach and using svn move copy sounds good. I know We had this problem a lot of times. The patch will be only as reference. When I do it I would assign and also commit with svn copy move and so on. Yes feel free to take this one Uwe thanks That approach and using svn move copy sounds good. I was the bad-boy who invented NumericRangeQuery so I have to take this one and clean up the rest of Lucene for this change. Here the patch for reference. The deprecated old classes are attached as separate files for a second commit step. Please note that it will not apply to your checkout because it needs a SVN rename of RangeQuery RangeFilter and RangeTermEnum to Term . This patch also converts all tests and contrib to use the new classes and non-deprecated ctors. In TermRange all deprecated methods are removed and only stay alive in the old classes. The new TermRangeQuery use constant score mode per default as planned for 3.0 but the old deprecated classes use boolean rewrite per default. I will edit the tests after this commit to also test boolean rewrite because of the new defaults only constant score rewrite ist tested I will commit this soon approx 2 hours in two steps first the patch then svn add of the new deprecated classes to not prevent people from doing things. All tests especially bw-tests pass. correct patch. After comparing the old 2.4.1 javadocs with the new ones I found out that RangeQueries in 2.4.1 only had Term ctors and no field String String ctors. As the new classes are separated deprecated one and new one I will change it to not have this strange getLowerTermText methods in the new class. So I will prepare a new patch and do all tests again no commits for now. The current patch had also some minor problems with BW compatibility and a missing collator. New patch for reference before all Range must be svn renamed to TermRange Restores original API of RangeQuery and RangeFilter the backards-tag must be changed to use the original 2.4 tests see java-dev-mail from me regarding this RangeQuery is a deprecated dummy class deleagting everything to TermRangeQuery but is not a subclass because different semantics of ctors and some getter methods. new classes use cleaner API no such strange methods like getLowerTermText because of overriding After committing this I will open an issue for Solr to change the references to the not yet released RangeQuery Filter ctors taking String args to the new classes. Last update. The patch also contains regenerated QueryParser classes see LUCENE-1646 . Committed revisions 791175 and 791176.
