HttpMethodBase.getResponseBodyAsString long limit 
Currently HttpMethodBase.getResponseBodyAsString prints warning in log and suggests using getResponseStream . However getResponseBodyAsString is extremely useful as it is easy to use . So my wish is to have method getResponseBodyAsString long limit that should throw HttpException if response size exceeds specified limit. Same things with getResponseBody long limit . Original methods should be deprecated because of danger explained in javadoc.We will not deprecate the old method. If the content length is known there is no problem calling them.Proposed patch incl. test cases.Odi In those cases when the content length is not known because chunk or identity transfer encoding is being used for insyance I think it would be more efficient to use ByteArrayOutputStream instead of pre-allocating the maxLen of bytes. Consider the situation where maxLen is rather largish say several MB and chunk coded-content is just a couple of KB. OlegTrue. What about the initial size of the ByteArrayOutputStream By default it s 32 bytes. This means lots of copying and object allocations when the content is large. I guess this makes the method unsuitable for high-performance low-footprint applications. But those applications are better off using getResponseBodyAsStream anyway. It s just a convenience method after all.We should apply the same logic as in getResponseBody method at the very least for the consistency sake ByteArrayOutputStream outstream new ByteArrayOutputStream   contentLength 0 int contentLength DEFAULT INITIAL BUFFER SIZE Otherwise 1 to commit OlegPatch committed with improvement suggested by Oleg.Thank you for resolving this issue. However why not add similar byte getResponseBody long limit Odi It would also be very nice to have this method ported to HttpCore http svn.apache.org repos asf jakarta httpcomponents httpcore trunk module-main src main java org apache http util EntityUtils.java Oleg
