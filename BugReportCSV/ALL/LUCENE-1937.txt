Add more methods to manipulate QueryNodeProcessorPipeline elements
QueryNodeProcessorPipeline allows the user to define a list of processors to process a query tree. However it s not very flexible when the user wants to extend modify an already created pipeline because it only provides an add method which only allows the user to append a new processor to the pipeline. So I propose to add new methods to manipulate the processor in a pipeline. I think the methods should not consider an index position when modifying the pipeline hence the index position in a pipeline does not mean anything a processor has a meaning when it s after or before another processor. Therefore I suggest the methods should always consider another processor when inserting modifying the pipeline. For example insertAfter processor newProcessor which will insert the newProcessor after the processor . The patch adds five methods QueryNodeProcessor getProcessorAt int index removeProcessorAt int index addProcessor int index QueryNodeProcessor processor setProcessor int index QueryNodeProcessor processor int getSize I realized while coding that manipulation methods based on processor instead of index position can be tricky because the pipeline could have the same instances in multiple positions so they are based on index position. Hi Adriano Wouldn t it be better for the pipeline to implement the List interface. What do you think Hi Luis Wouldn t it be better for the pipeline to implement the List interface. What do you think Yes it s one of the valid approaches I just didn t want to tie it initially to an interface. I will code that later and provide a new patch. New patch now QueryNodeProcessorPipeline implements List interface This patch could also be applied to branch 3x no functional changes to the patch i just updated it to apply cleanly to trunk. I d like to commit this improvement so we can then replace the PrecedenceQueryParser with LUCENE-1938 This is a much simpler way to implement the functionality and would remove the additional duplicate javacc grammar and make maintenance easier. Committed revisions 1024402 1024405 3x . Thanks Adriano I ll look at LUCENE-1938 now Bulk close for 3.1
