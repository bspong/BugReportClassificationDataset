Spellchecker Suggest Mode Support
This is a spin-off from SOLR-2585. Currently o.a.l.s.s.SpellChecker and o.a.l.s.s.DirectSpellChecker support two Suggest Modes 1. Suggest for terms that are not in the index. 2. Suggest more popular terms. This issue is to add a third Suggest Mode 3. Suggest always. This will assist users in developing context-sensitive spell suggestions and or did-you-mean suggestions. See SOLR-2585 for a full discussion. Note that o.a.l.s.s.SpellChecker already can support this functionality if the user passes in a NULL term IndexReader. This however is not intutive. o.a.l.s.s.DirectSpellChecker currently has no support for this third Suggest Mode. Creates a new Enum SuggestMode . SpellChecker methods that used to take a boolean morePopular have been converted to use the new Enum. Old SpellChecker methods have been marked as Deprecated with comments can be removed entirely for Trunk. Included here for possible 3.x inclusion A new Unit Test method for 0.a.l.s.s.SpellChecker tests SUGGEST MORE POPULAR and SUGGEST ALWAYS prior morePopular had no test coverage . A new Unit Test scenario added to TestDirectSpellChecker for testing SUGGEST ALWAYS . Hi James thanks for this work I agree I think we should do this refactoring and backport to 3.x so we can nuke the deprecations from trunk . only one thing can we fix the indentation in the patch In general we use 2 spaces not tabs and spaces after if keyword etc so instead of if suggestMode SuggestMode.SUGGEST ALWAYS ir null field null if suggestMode SuggestMode.SUGGEST ALWAYS ir null field null for some of the IDEs I dont know what editor you use we have style configurations there are some links to these configuration files located here http wiki.apache.org lucene-java HowToContribute Thanks again I downloaded Eclipse-lucene-codestyle.xml and re-formatted the lines I changed added. Hopefully everything is to spec now. Thanks James Bulk close after release of 3.5
