Redundant calls to RepositoryService.getChildInfos
In some cases jcr2spi issues calls to RepositoryService.getChildInfos for items which haven been returned by the last call to RepositoryService.getItemInfos. This happens because WorkspaceItemStateFactory.createDeepPropertyState is asked to create the node states for all items returned by RepositoryService.getChildInfos in the order they are returned by the Iterator. When trying to create an item state for an item which is deeper down the hierarchy than another item which comes later in the iterator a call to RepositoryService.getChildInfos is issued for the latter.the problem is caused by the following behaviour of jcr2spi - whenever a ChildNodeEntries object is built it loads the child-infos from the spi layer this is obviously not optimal and we discussed it at least once in the past. in order to fix that we would need to - keep a flag with ChildNodeEntries implementation indicating whether the complete list has been   read or not. - by default don t load the child info entries upon entries construction - populate the ChildNodeEntries lazily - load all infos only upon calls to Node.getNodes or Node.getNodes String - add a method to ChildNodeEntries that allows to retrieve an interator over all entries - adjust NodeEntryImpl avoiding that ChildNodeEntries are always built with the retrieveAll flag. adjust components. it s a jcr2spi issue only.Another solution might be to check the Items returned by getItemInfos first whenever a child item is needed. If the item is found there build the item state from it. If not keep the current behavior hand load the item. Another solution might be right... that would after all be a much cheaper fix for the problem. since we will have to address the childnodeentries loading sooner or later i wanted to state it here. do you have a patch for the straight forward fix at hand that would be cool angela Proof of concept patch which considers the ItemInfos in the batch when building the ChildNodeInfos. With my test case repository round trips went down from 16 to 4 5.1 seconds vs. 1.7 seconds when comparing not patched vs. patched. The patch is a hack and needs to be revisited. It can however serve as a starting point.Attempted clean up of previous patch. This results in the following test failures testNode org.apache.jackrabbit.test.api.SetValueVersionExceptionTest testGetVersionLabelsForInvalidVersion org.apache.jackrabbit.test.api.version.VersionLabelTest testRestoreWithInvalidVersion org.apache.jackrabbit.test.api.version.RestoreTest testRestoreOrder org.apache.jackrabbit.test.api.version.RestoreTest testWorkspaceRestoreWithParent org.apache.jackrabbit.test.api.version.WorkspaceRestoreTest testNotLockedAfterLogout org.apache.jackrabbit.jcr2spi.lock.SessionScopedLockTest testLogoutHasNoEffect org.apache.jackrabbit.jcr2spi.lock.OpenScopedLockTest This seems to indicate that some of the client of NodeEntry.getNodeEntry Name int boolean rely on the IMHO wrong interpretation of the last argument. applied patch for WorkspaceItemStateFactory provided by michi. in addition changed NodeEntryImpl to create empty child node entries upon creation. the ChildNodeEntriesImpl contains a flag to indicate whether the complete list of entries has been loaded or not.
