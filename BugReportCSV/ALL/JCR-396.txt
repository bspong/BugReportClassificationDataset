RMI published Repository using the jcr-rmi library gets lost over time
The jcr-server webapp project contains a servlet - RepositoryStartupServlet - which may be used in a web app to start a repository and optionally register the repository with JNDI and RMI. To register the repository with JNDI the jcr-rmi library is used to create a Remote repository instance which is registered with the RMI registry. Inside the RMI implementation mechanisms based on stub classes created by the RMI compiler are created to make the remote repository available remotely. This includes creating a object table to map remote references to local objects. This table stores references to the local object as weak references to support distributed garbage collection. Over time it may now be that this remote repository instance is actually collected and the object table cannot access it anymore thus preventing the repository from being accessed remotely. To prevent this from happening the RepositoryStartupServlet must keep a strong reference to the remote repository and drop this reference when the servlet is destroyed and the repository unregistered. NOTE This is an issue to all long running applications which publish repository instances over RMI using the jcr-rmi library.There are basically two ways to keep the strong reference 1 keep it transparently by forcing the RMI internals to also keep a strong reference by pinning the internally used WeakRef or 2 make it explicit in the RepositoryStartupServlet. The first solution has the advantage to apply for all users but has the big disadvantage that the remote repository may only go away by explicitly unexporting it. The second solution on the other hand places additional burdons on the user of the remote repository. Therefore the attached patch fixes the RepositoryStartupServlet by keeping a strong reference to the remote repository and releases that reference when unregistering the repository from RMI.Fixed applying the patch in Rev. 393456Merged for 1.0.1 in revision 409543.
