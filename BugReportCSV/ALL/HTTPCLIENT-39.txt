Authorization credentials should be sent pre-emptively
When a web browser receives a i 401 Unauthorized i response code the browser prompts for the user and password credentials for the requested authentication realm. An Authorization header is then sent for this request. HttpClient models this behaviour quite well. After the web browser has the authentication credentials for a given host port and realm it then sends the Authorization header for subsequent requests pre-emptively whithout need for a 401 response. HttpClient always reqires a 401 response before it will send out the Authorization header. As code HttpClient.startSession code will take a code Credentials code object as a parameter as the default credentials the default credentials should be sent as part of every request in that session. Some mechanisim for over-riding the default credentials should also be provided to be sent pre-emptively. The point of this enhancement request is to minimize the number of unnecessisary 401 responses. It appears that the simple solution might be to modify the logic of when code Authenticator.authenticate code gets called in code HttpMethodBase.addAuthorizationRequestHeader code I would personally argue that this is a policy decision that the user of the library would like to be able to make. Thus it should be a configurable...Having this as a configurable item is a good idea. Any suggestions on how it should be configured 1 static method on the Authenticator class 2 java system property 3 somthing else Created an attachment id 2370 Preemptive authorization patch Patch applied. http nagoya.apache.org bugzilla showattachment.cgi attach id 2370 jsdever 2002 07 18 10 05 51   Modified httpclient src java org apache commons httpclient                         Authenticator.java HttpMethodBase.java                httpclient src test org apache commons httpclient                         TestAuthenticator.java   Log   Apply patch for bug http nagoya.apache.org bugzilla show bug.cgi id 10532      Unit Tests test-nohost   Sumbitted by Jeff Dever
