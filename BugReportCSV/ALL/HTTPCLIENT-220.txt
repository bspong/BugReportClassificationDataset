HttpClient does not properly handle application x-www-form-urlencoded encoding
As always I d like to pass on my thanks I m finding HttpClient really useful. The problem occurs because I use Struts map based ActionForm and these generate request parameters of the form input type text name searchSelection c When this is submitted using the PostMethod class the generateRequestBody is called and in turn this calls the URI.encode method with a BitSet of the acceptable characters. In this case the and characters are marked as acceptable. The problem is that this does not work correctly when I submit it to my remote server. If however I issue the request directly from a webpage rather than using HttpClient it works and when I examine the request input stream I can see that the parameter has been re-written so that select c is displayed as select 28c 29 . This may be my error because of encoding problems or the fact I am not setting the content type etc. correctly. Or it could be a bug. I m afraid my HTTP knowledge is not good enough. Chris MeinI believe that PostMethod handles parameters correctly. and are not reserved characters and therefore do not need to be encoded. Are you using the addParameter or the setRequestBody NameValuePair methods of PostMethod If not my guess is that the content type is not being set correctly. When posting form values the content type should be application x-www-form-urlencoded which is used when setting the params. If the requestBody is set as a single string or stream the content type will need to be specified manually. If setting the content type doesn t fix the problem please post a wire log and some sample code if possible. http jakarta.apache.org commons httpclient logging.htmlChris It does not matter what you see in the InputStream. You should access request parameters through the servlet API using HttpServletRequest getParameter String . Is there any difference using that function whether you send the POST through a web browser or through HttpClient OdiOrtwin and Michael First to clear things up sorry that I wasn t clear before . I have built a Struts based web application with a input form that posts information to a Struts form that uses a map based attribute hence the need for an input with the format selected c . When I access this web application directly everything works. When I use HttpClient to access the form I am building a mini portlet my application hangs and timesout. I turned on the Struts debugging and found that it failed when it was trying to read the request parameters using the request.getParameter calls. It was then that I after lots of other tinkering looked directly at the input stream which of course is wrong to see if there was a low level difference. This is when I noticed that from the browser I received selected 28c 29 and from HttpClient I received selected c . Hence the possible bug. With regard to your information Michael I am screen scraping to do my portal re-writing the URLs etc. to get the effect I want. What I do is copy the headers over adjusting the Content-Length if necessary and sending this to my back end Struts application. Again I m not sure if this is very valid but I manage to keep the sesison etc and it seems to work everywhere else. I do use the setRequestBody NameValuePair method to reset the input parameters I get into the PostMethod. I have attached the request headers I set as well... request name Accept header image gif request name Accept header image x-xbitmap request name Accept header image jpeg request name Accept header image pjpeg request name Accept header application vnd.ms-powerpoint request name Accept header application vnd.ms-excel request name Accept header application msword request name Accept header application x-shockwave-flash request name Accept header request name Referer header http localhost 8080 portal search advanced display.do JSESSIONID 1vm3jdykwh0a8 request name Accept-Language header en-gb request name Content-Type header application x-www-form-urlencoded request name Accept-Encoding header gzip request name Accept-Encoding header deflate request name User-Agent header Mozilla 4.0 compatible MSIE 5.5 Windows NT 5. 0 request name Host header localhost 8080 And I can see in there encoding header you mention. If you can t think of anything else for me to try straight away I will build two small web apps that do what I am trying and will attach them. ChrisChris Could you provide an HttpClient wire log This may help to clear things up. http jakarta.apache.org commons httpclient logging.html MikeChris After having read relevant specifications one more time - Hypertext Markup Language - 2.0   http www.w3.org MarkUp html-spec html-spec 8.html SEC8.2.1 - RFC1738 Uniform Resource Locators   http www.w3.org Addressing rfc1738.txt I have to acknowledge that HttpClient does not handle application x-www-form-urlencoded correctly. I ll be working on a fix. So stay tuned OlegThank you for taking the time to read the specificaiton. I am away for the next few days but am happy to test or write a test for this functionality when I am back. ChrisCreated an attachment id 6830 Patch take 1 Chris If you could take the patch for a spin once you are back I would appreciate your feedback OlegAre there any objections comments to this patch OlegIt looks good. I think you have correctly interpreted the application x-www-form-urlencoded spec. The wording is a little more confusing that it seems initialy. We also need to apply this change to the query parameters in HttpMethodBase.setQueryString . These values should also use form encoding. MikeMike I believe HttpMethodBase.setQueryString is correct. Query part of URL should be encoded as defined in RFC 1738. According to the RFC 1738 specification only alphanumerics the special characters - . and reserved characters used for their reserved purposes may be used unencoded within a URL. If we all agree on this interpretation I ll commit the patch OlegOleg Sorry you are correct. HttpMethodBase is using the 2396 URI spec instead of 1738 though. I think this pach is good to go. MikePatch committed OlegQuery params should also be form urlencoded. http marc.theaimsgroup.com t 105621236900001 r 1 w 2Created an attachment id 6933 patch2 This patch includes the following  - form urlencoding no longer encodes - .  - the urlencoding method has been moved to HttpMethodBase  - HttpMethodBase.setQueryString NameValuePair now urlencodes values.The new patch looks good. Thanks for doing it and sorry I didn t get to it One minor comment It might be better to split the new formUrlEncode method into two pieces one that loops through the parameters and builds up the query string and one that simply encodes a string using application x-www-form-urlencoded. The string-encoding method would definitely belong in commons-codec but I m not sure whether the loop over parameters part would.Hi Laura Thank you for looking over the patch. I agree that we might want to spilt this functionality when moving to codec. For the moment though I think it s okay to keep it together. MikePatch committed.Non-ASCII values are incorrectly encoded e.g. the German Umlaute . Problem posted by Martin Schnyder.Created an attachment id 7278 Patch 3 So I think the decision was to treat the query params as UTF-8. Attached is a patch that makes this change and adds a test. It seems like such a simple change is this really all that s needed MikeWe do not have to make it more complex than it needs to be. Looks good to me. OlegI think UTF-8 is a good default but it would be helpful if an other encoding could be specified as well. Some server applications may not properly decode the request parameters if they are UTF-8 encoded. I use HttpClient e.g. to access an SMS gateway. This gateway expects the URL parameters to be ISO-8859-1 Latin-1 encoded. I can imagine that there are many other server applications around that require an encoding different from UTF-8. MartinMartin Not that I disagree with you but I just would like to point out two things UTF-8 has been designed to be backward compatible with Latin-1 encoding as long as only 8 bit characters are used HttpMethodBase setQueryString String method allows to apply whatever encoding the user may see fit. OlegJust to avoid confusion UTF-8 is backward-compatible with US-ASCII that is 7 bit ISO-Latin only. They need the 8th bit to switch to multi-byte character encodings.Roland you are right. UTF-8 is not backward compatible with Latin-1. Sorry about my misleading statement. OlegHttpMethod.setQueryString String is definitely the way to use an encoding besides UTF-8. Oleg perhaps we should try to expose HttpMethodBase.formUrlEncode . This would make it quite easy for someone to use another encoding if necessary. If we decide to do this I think formUrlEncode should probably be moved. MikeI agree. How about URIUtil formUrlEncode OlegPossibly. It s not really URI related but it s our only real choice unless we want to add a new class. MikeActually a completely new utility class does not seem to be such a bad idea at all. Anyways I leave it to your discretion. OlegOkay I think we should opt for a new class. Any thoughts on a name I would like to pick something that we can actually reuse for other utility methods in the future. Something really generic like HttpClientUtil perhaps We could go more specific and have an EncodingUtil. What do you like MikeHttpClientUtil is too close to being AllSortsOfStuffUtil IMO. I like EncodingUtil better. OlegEncodingUtil it is. I will take care of it tonight. MikeCreated an attachment id 7296 patch 4 Okay. Here it is. Please take a look and let me know what you think.Any more thoughts on this or should I commit the patch MikeI think it is good to go OlegApplied to 2.0 and HEAD. Mike
