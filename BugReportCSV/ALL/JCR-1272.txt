Property.getValue throws RepositoryException with internal error
Running ConcurrentReadWriteTest NUM NODES 5 NUM THREADS 3 RUN NUM SECONDS 120 resulted in a RepositoryException calling Property.getValue javax.jcr.RepositoryException Internal error while retrieving value of b3fc1ea8-3364-4236-bcc7-dea0baf90640 test null null Debugging shows that it is a NullPointerException java.lang.NullPointerException at org.apache.jackrabbit.core.PropertyImpl.getValue PropertyImpl.java 481 at org.apache.jackrabbit.core.ConcurrentReadWriteTest 1 1.execute ConcurrentReadWriteTest.java 68 at org.apache.jackrabbit.core.AbstractConcurrencyTest Executor.run AbstractConcurrencyTest.java 110 at java.lang.Thread.run Thread.java 619 It s probably the state which has been discarded after the sanityCheck .Moved getItemState to the top of the method. This ensures that the state reference is still valid even if the property is discarded after the sanityCheck .What about all the other value getters like getString I guess we should make them just call getValue instead of trying to optimize things.In fact there are tons of unguarded code that accesses the state variable. I ll come up with a patch for fixing them all.You are right. The funny thing is getString already uses getValue . - I think we should get rid of the sections documented with avoid unnecessary object creation if possible They add a significant amount of code and I doubt it is worth it.The attached patch JCR-1272.jz.patch makes all type-specific getters and setters use the generic Value methods. The new private getPropertyState takes care of the sanity check and returns a safe PropertyState reference if the property is OK. There still are a number of direct unprotected references to the state variable in PropertyImpl NodeImpl and ItemImpl. I m not sure how vulnerable those references are to this error condition.Looks good. 1 I ll commit the patch.Committed Jukkas patch in revision 605506
