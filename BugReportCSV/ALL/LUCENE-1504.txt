Contrib-Spatial should use DocSet API rather then deprecated BitSet API
Contrib-Spatial should be rewritten to use the new DocIdSet Filter API with OpenBitSets instead of j.u.BitSets. FilteredDocIdSet can be used to replace I SerialChainFilter. Moved both ISerialChainFilter and SerialChainFilter to package o.a.l.s Added getDocIdSet to SerialChainFilter still calls bits on the filters should remain until bits is removed from Filter.java In trunk there is no more need to call Filter.bits . But the same functions are also present in contrib queries ... BooleanFilter.java and in contrib misc ... ChainedFilter.java and these were already adapted to use Filter.getDocIdSet . These also use o.a.l.util.OpenBitSet which is normally slightly faster than java s BitSet. In case you prefer to use one of these a dependency on the corresponding contrib module may have to be added in the build process of the spatial contrib. Hi Patrick as the spatial contrib was included into Lucene after 2.4 where the old API is already deprecated there is no need to implement bits at all. Just leave the default that get removed on 3.0. As the code was not released before the deprecation there would be nobody using it and it does not make sense to add APIs that are deprecated from the beginning. TrieRangeFilter was also included after the change and never implemented bits it implemented it in the past but at this time it was in another package outside of lucene so deprecation is out of responsibility for lucene . Paul In case you prefer to use one of these a dependency on the corresponding contrib module may have to be added in the build process of the spatial contrib. Very interesting on thinking about how to include TrieRangeQuery with spatial contrib I was thining about a dependency but I was not sure if it is possible. How can it be done in the build.xml of the contrib Changed filter calls from bits to getDocIdSet the ISerialChainFilter will maintain a method called bits IndexReader BitSet On dependencies between contrib modules I think I spoke a bit too soon. There is an addtional.dependencies path a.o. in contrib regex build.xml and this is what I was thinking would do the trick but that does not appear to refer to another contrib module. It is probably better to ask on java-dev how to do this. I think there is contrib dependency examples in the xml query parser and in the highlighter which depends on MemoryIndex . Looks like we are close on this Someone want to assign this to themselves so we can be sure to get it into 2.9 Hllo Ryan I will try to get this into 2.9 but before some comments on the current patch You are still using BitSet in ISerialChainFilter. When we move this to core I suggest to use OpenBitSet here. Just change the method signature it is unreleased code and so we can change it easily. But you must then rewrite spatial to also use OpenBitSet but it is just a search n replace . ISerialChainFilter seems to be a strange name I have never seen such in Lucene Core. Do you mean I nterface with it but its an abstract class . I would suggest to use SerialChainFilter as it is and for the chained filters itsself use ChainFilter. There are some of these autogenerated catch blocks in the code please remove them and pass the Exception through the method declaration. So bits should throw IOException and so on this is one of the things why I hate Eclipse... searching through the internet you see everywhere this code with these auto-generated blocks And other things Use a o.a.l.util.Parameter for the enumeration to be type safe which is the same like Java s enum Remove the Java 5 annotations core is 1.4 only. Patrick are you going to have time soon to iterate w Uwe on this He has alot of feedback on the last patch . Also it looks like SerialChainFilter is roughly a copy of ChainFilter but with some improvement to allow a narrowed down filtering from the javadocs . Would it be possible to somehow fold that improvement into the original ChainFilter instead I ve emailed Patrick privately and it looks like he s pretty swamped so I ll take a stab at cutting over to DocIdSet here. Actually I think we can use FilteredDocIdSet to do the serial chaining I think it has the same motivation as SERIALAND to efficiently AND two filters together such that the 2nd filter only does work if the first filter accepted the doc . FilteredDocIdSet doesn t handle the SERIALOR case but nothing uses SERIALOR now I think so I think that s OK. I ll change LatLong GeoHashDistanceFilter to extend FilteredDocIdSet. So you mean we should simply kick this new class and use whats already in Lucene I would like this. I think the idea behind Ryans patch was to create a Filter using a BitSet and do the chaining directly on one instance of the BitSet. In my opinion this is not what the new DocIdSet should do. The Filter chaining should be done in the iterator. Another approach would be to use the BooleanFilter from contrib search It has all the functionality provided by Ryans class. We would only need to have build dependency between contrib spatial and contrib queries. Don t try to read much into anything I did here the patch here is from patrick ... my understanding of the reason for BitSet vs DocIdSet is slim. I just noted that SerialChainFilter relies on a deprecated API. If it is possible to merge this with the exiting FilteredDocIdSet that seems like the best approach. Also the spatial contrib will be marked experimental for 2.9 so the back-compatibility contract should not be as strict . If this improvement can not get the attention it deserves before 2.9 release the SerialChainFilter could still be removed moved modified at a later release. OK I reworked a number of things about distance filtering Switched to FilteredDocIdSet to do serial anding DistanceFilter now requires a starting filter normally in spatial there is already a starting filter using geohash or lat lng tiers so I think this should be fine. And one can always do QueryWrapperFilter MatchAllDocsQuery as a no-op filter. Moved stuff into the base class DistanceFilter Fixed one bug where the saved distances were getting overwritten per-segment Fixed another bug where GeoHashDistanceFilter was adding a distance into the distances hash even if it didn t pass the filter ie distance was too big this required a fix to one of the tests Use Double.toString n instead of new Double n .toString Added DistanceFilter.reset which you must call before reusing the filter across searches Commented out the precision-defaulting logic it was buggy used the segment maxDoc instead of per-reader and it wasn t actually used the code that applies precision was commented out for both LatLong and GeoHash Removed some logging calls I know there s another issue open to do more cleanups So you mean we should simply kick this new class and use whats already in Lucene Right that s what I did on first cut patch above I use FilteredDocIdSet to efficiently AND the approx distance filter w the precise filter and then ChainedFilter to combine an incoming Query-as-filter with the approx precise distance filter. We really need a random-access Filter API LUCENE-1536 if we had that then we could have better support for efficiently ANDing filters. I suppose FilteredDocIdSet is in fact a start at a random access Filter API it exposes only the method boolean match int doc . Fixes the javadoc warnings most pre-existing . I also added throws IOException to FilteredDocIdSet Iterator.match. I had no time to review the whole patch yet but it seems to fit much better in the new DocIdSet API. I will look into this after my holiday Thursday . New patch Also switched over CartesianShapeFilter and BoundaryBoxFilter from BitSet - DocIdSet Added floor of 1 to int miles this is to fix LUCENE-1777 in CartesianPolyFilterBuilder Some small code cleanups I updated the issue s description. Mike do you want to take this issue or should I commit later I ll take it. OK new patch Improved TestCartesian to test 6.0 1.5 0.001 and 0.0 miles Implemented flooring logic as described in LUCENE-1777 I think it s ready to commit... I ll wait a day or two And then there were 8 
