Transparent Content Coding support
I would like to see HttpClient features brought up to parity with other libraries both in Java and other languages. c.f. Python s httplib2 not yet in the standard library but many would like to see it in there . That library transparently handles gzip and compress content codings. This issue is to capture possible solutions to providing this sort of innate functionality in HttpClient so that users aren t required to know RFC2616 intimately. The HttpClient library should do the right thing and use the network in the most efficient manner possible.I ve implemented gzip and deflate support already - patch to follow once I get my git fu sorted. compress I m not so familiar with and identity is a no-op so requires no changes. The patch has been implemented so that it won t interfere with existing clients if they are already setting an Accept-Encoding header in the request.Initial patch which introduces gzip and deflate support. Sorry mangled git patch. If any of the committers use git then they should be able to apply it. Otherwise I ll need to spend some more time understanding how to generate a patch suitable for application with the patch command.Hi James 1 ThreadLocals are often considered evil and ought to be avoided especially in general purpose libraries. If you need to persist some data between different interceptors please consider using HttpContext. This is precisely what it is meant for. 2 Please consider providing some means of defining applicable content coding algorithms and their order of preference. 3 Patch utility compatible diff would be nice. OlegHi Oleg Thanks for the feedback. 1 Thanks I wasn t aware of the idiomatic way to do that so I ll change it. Can you share why you feel ThreadLocals are so bad I wasn t aware of any issues and would like to know more. 2 I don t follow. Can you provide more information or maybe describe it as a test 3 Will do. I just wanted to get it out there for discussion. UPDATE Actually patch -p1 path to patch works for me. Cheers James 1 Because ThreadLocals when misused abused can lead to memory leaks or worse very subtle bugs especially in managed environments such as servlet or EJB containers where threads are frequently pooled re-used. The most catastrophic bug I have seen involved a ThreadLocal holding a UserPrincipal in a web application which was not correctly unset with a try-catch-finally. You can pretty much guess the consequence of that bug. The only two legitimate uses of ThreadLocal I know of is 1 in single-user standalone applications or 2 in web applications when ThreadLocals set and unset using a HttpServletFilter in try-catch-finally. ThreadLocal simply cannot be reliably unset from inside a library. ThreadLocals in general purpose libraries major trouble. 2 There should be a way to instruct the interceptor to generate different Accept-Encoding values for example gzip deflate deflate gzip identity etc based a configuration parameter. OlegTwo discussions of ThreadLocal that might be useful http blog.arendsen.net index.php 2005 02 16 threadlocals-are-evil http crazybob.org 2006 07 hard-core-java-threadlocal.html 1 OK thanks for the clarification. That pretty much ties with my understanding but I thought it was a reasonable approach at the time and seemed in line with recommendations from Java Concurrency in Practice. I ve removed the usage as you suggested. 2 I initially thought you wanted to specify quality values. But you re describing something similar. I m still not clear why that requires configuration. If the user doesn t want the interceptor to indicate to the server that various content codings are supported the user can specify their own Accept-Encoding header for the request and the request won t be altered and the response won t be processed by the new interceptors. Indeed that behaviour is there to ensure that it doesn t break any existing clients that may be using an interceptor already to support this functionality. Although thinking about that the new interceptor is getting added before the client has a chance to add an interceptor so the new ones that I ve written will fire before a user-provided one gets a chance to handle the request response. Is that the issue What else am I missing Can you point me at an example of something similar that already exists for configuration parameters As as aside is there any reason why the Javadocs aren t built as part of the site hosted at apache I was thinking about something along this line enum ContentCoding identity gzip deflate SuppressWarnings unchecked Collection ContentCoding codings Collection ContentCoding request.getParams .getParameter                  http.protocol.accept-encoding if codings null       Add Accept-Encoding header Although thinking about that the new interceptor is getting added before the client has a chance to add an interceptor so the new ones that I ve written will fire before a user-provided one gets a chance to handle the request response.Is that the issue I am afraid it is. The content processor in its current form will break existing code that relies on protocol interceptors to transparently handle content encoding. This is the reason I would like to have an explicit configuration parameter the user would have to set in order to enable content processing. Can you point me at an example of something similar that already exists for configuration parameters Take a look at the default header interceptor which populates HTTP request headers dynamically based on a configuration parameter http hc.apache.org httpcomponents-client httpclient xref org apache http client protocol RequestDefaultHeaders.html Oleg Cool. I am still aiming for a transparent implementation that won t do anything if the user has configured their own behaviour and will do the right thing be in effect if they haven t. I m hopeful that we re not yet at the stage where this will require explicitly enabling to work. I ll create a failing test to demonstrate how it will impact existing protocol interceptors then fix it and see what falls out of that. Thanks for your help it s always good to collaborate with new people and get new insights.Git based patch and same again for SVN. SVN patch sets svn eol-style native. This patch is re-worked to avoid breaking existing clients that may already be doing something like this.I reviewed the patch and checked in the patch to the 4.1 branch http svn.apache.org repos asf httpcomponents httpclient branches branch 4 1 http svn.apache.org viewvc rev 755629 view rev Many thanks for this contribution James. I am also going to add your name to the list of project contributors if do not mind. The only problem with the current approach is that there is no way to disable or customize the way content coding is handled per default. One can remove any standard protocol interceptor and replace it with a custom one. This obviously will not work for ContentProcessor which is not nice. An alternative solution might be to simply use a different implementation class derived from DefaultHttpClient. I am looking forward to follow-up patches - Would you also be willing to look into content caching at some point of time OlegW00t By all means list me as a contributor. I wasn t expecting it to be accepted yet I thought it was still a little rough. I hadn t found a coding style guide so I was expecting some feedback there apache license header maybe a contributors agreement to submit Not that I m complaining. Thank you. If the demand is there to allow it to be configured removed then we can add that. I would like to look at content caching. I would think that s a bit more involved and I m not sure that I can commit the time that I think it would require at the moment but it s definitely something that I d like to see in the library. Or I might see what else is in JIRA that looks fun that would take the amount of time that I can commit to at the moment. I ll also have to give it some thought as to how that might be implemented. I ve got a little too much baggage in terms of how I ve implemented something like that using httpclient-3.x and ehcache so I need to step back and think about it using the 4.x API and pluggable cache implementations. James I wasn t expecting it to be accepted yet I thought it was still a little rough The work is far from being done. I just prefer smaller incremental patches. maybe a contributors agreement to submit Yes you should consider submitting an indivudual CLA maybe even a corporate CLA if you are working on HttpClient during office hours If the demand is there to allow it to be configured removed then we can add that It surely must be possible to disable content encoding. There are enough situations when it is not desired for instance when trouble-shooting. I am still not convinced it should be enabled per default. OlegSorry didn t mean to go dark for so long. Moving house and Real Work got in the way. I d like to bring this to a conclusion. Where in SVN should I target now and is there IRC or something Welcome back James. Not much has changed since I committed your patch. The code is still in the 4.1 branch to be merged down to trunk after 4.0 GA release 1 . I am still of the same opinion that DefaultHttpClient ought not have the transparent content coding enabled per default there are different options of solving the problem HTTPCLIENT-838 being one . You should still consider submitting an an individual or a corporate CLA. All discussions about HttpCore HttpClient development should take place on the dev mailing list. Oleg 1 http svn.apache.org repos asf httpcomponents httpclient branches branch 4 1 Speculative patch to show how it could be disabled. If this was decided as a reasonable way to go then the ContentEncodingProcessor would need to be made public and put into a different package to highlight that it is part of the published API. I still strongly feel that this behaviour should be enabled by default but it is also necessary to give us the out of turning it off. Is the special case shown here worthwhile or could it be accomplished in another way Also added some additional filtering for the Content-Encoding header in the response - if the ResponseProcessor handles it then we should probably remove the existence of that header from the client application.James What is the reason for your opposition to the idea of just using a subclass of DefaultHttpClient for transparent content coding This would make ContentEncodingProcessor and even possibly the config parameter unnecessary altogether. OlegOleg I hopefully described in the ticket why I think that this should work out of the box without requiring changes for existing clients. That s why I m trying to get it working as part of the existing API. If the functionality that I m describing was done by adding a new ContentEncodingHttpClient then what do we think the impact of this is Would people need to alter their code or maybe just Spring Guice etc configuration I think that complicates the API surface area and increases the semantic load on client developers. I don t think the clients should be required to know these details of the RFC application developers typically want to write code at a different level and expect that the library abstraction will do the right thing at its level. I m happy to write a version that subclasses as you suggest and see how it feels from a client perspective. Should that be based on trunk or the existing 4.1 branch James I hopefully described in the ticket why I think that this should work out of the box without requiring changes for existing clients. That s why I m trying to get it working as part of the existing API. Yes you did but I still think the chance of breaking existing apps in some subtle ways is simply too high to have this feature enabled per default. Would people need to alter their code or maybe just Spring Guice etc configuration Those who use a DI framework to wire together their components this would be a one liner config change. Should that be based on trunk or the existing 4.1 branch 4.1 branch. OlegRe-worked to use a new subclass of DefaultHttpClient.James What happened to the patch It is no longer there. Did you delete it I merged most of your changes from 4.1 branch to the trunk. I did not merge changes to the AbstractHttpClient class though as I hope they will not be necessary. Please work with the trunk from now on. Cheers OlegNot sure about this patch. generated via svn diff some file but I m not sure that it applies cleanly. svn version svn version 1.5.4 r33841    compiled Aug 7 2009 01 44 11 The operations are simple - 3 moves fix up the imports add a new class. Add new test and cleanup in an existing class If it won t apply to trunk I ll re-submit.Hi James Many thanks for contributing the patch. I committed it to the SVN trunk. Please review double-check. I think we are almost t here. There is still a few outstanding tasks though that must be tackled before we could close the issue as resolved. 1 All TODOs need to be looked into. I would also consider splitting ContentEncodingProcessor into two separate interceptors. 2 A new section on content encoding needs to be added to the tutorial. OlegHi Oleg Good to hear I should be able to take a look later today unless Real Work rears its head again. Could you elaborate as to why you feel ContentEncodingProcessor should be split out James Could you elaborate as to why you feel ContentEncodingProcessor should be split out I personally prefer fine-grained interceptors one per unit of work or a header type. For instance one may want to remove the request interceptor that generates Accept-Encoding headers while still keeping the Content-Encoding response interceptor in the protocol chain. OlegTODOs I ve found relate to adding support for compress Content-Encoding 1 . I ve never encountered a server that uses this The request response interceptors currently set a flag in the context to show whether the response should be processed. Should that aspect be retained if I split them out Also should ClientContext be a class rather than an interface It just contains constants rather than defining any sort of abstraction. 1 http www.w3.org Protocols rfc2616 rfc2616-sec3.html sec3.5 TODOs I ve found relate to adding support for compress Content-Encoding If you think compress is completely useless we still have to make sure HttpClient reacts intelligently when encounters compress coded content for instance by throwing an exception The request response interceptors currently set a flag in the context to show whether the response should be processed. Should that aspect be retained if I split them out I personally do not think the flag is necessary anymore but I do not want to impose a particular way of doing things onto you Also should ClientContext be a class rather than an interface It just contains constants rather than defining any sort of abstraction. Roland who is no longer involved in the project had a tendency to prefer interfaces over classes for defining constants mainly because of support for multiple inheritance. Now it is too late. OlegRe constants - one approach I ve used is to define the constants in an interface but also create a class that implements the interface. Also in Java 1.5 one can use import static from the constant class. I think constants in interfaces are bad unless the constant is inherently associated with the methods in the interface.split out request and response interceptor Remove TODOs - not going to implement compress support unless sufficient demand server with market share.James ResponseContentEncoding seems missing in the changeset. Could you please add that file to the patch OlegResubmit with the missing fileJames There is a copyright notice in one of the files which makes the patch incompatible with the ASL. I cannot commit the patch as it. Please resubmit the patch without the copyright notice is you agree to this code being made available under ASLv2 license agreement. I am sorry but we have to picky about licensing stuff. c Mobile IQ Ltd 2009. All Rights Reserved.   OlegMy bad sorry. That s my default template for Eclipse falling through the cracks.Fixed the wrong license copyright textPatch checked in. Many thanks for contributing it James. Would you also be willing to contribute a section on content coding to the HttpClient tutorial OlegHi Oleg I ve started writing the tutorial patch. My DocBook is pretty poor though. Do you know how to set up olink I was trying to link the the section on protocol interceptors but can t get it working. Cheers JamesI hardly qualify as DocBook expert either. I usually use Spring documentation as a reference 1 . Do not worry about stuff like that at the moment. Concentrate on writing the content. We can deal with formatting issues later. Cheers Oleg 1 https src.springframework.org svn spring-framework trunk spring-framework-reference src Initial draft for DocBook tutorial after recovering last week s hard drive failurePatch checked in with some minor tweaks. I think the issue can now be closed as resolved. OlegThis issue has to be revisited. Presently GzipDecompressingEntity and DeflateDecompressingEntity classes do not override the writeTo method which causes the original uncompressed content to be written out to the output stream. James would you be willing to look into it OlegWill do. Sorry on holiday last week and just catching up.Overrides HttpEntity.writeTo OutputStream for the new decompressing code.Patch checked in. Many thanks James Oleg
