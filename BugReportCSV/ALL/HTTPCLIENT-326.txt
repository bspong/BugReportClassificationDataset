MultiThreadedConnectionManager should provide a shutdown
MultiThreadedConnectionManager should provide a shutdown method to release all its resources it is currently using daemon threads that cannot be stopped and HTTP connections that cannot be released. This is annoying when the pool of connection is created within a web application that is undeployed and re-deployed i.e. the JVM is not restarted consuming resources on local and remote servers.Created an attachment id 10752 Take 1 Hi Gael Here s a quick stab at this one. Please let me know if this is what you were looking for. I do not know if this change will make it into the 2.0 code base. It may have to wait until 3.0 for an official inclusion. How does everyone else feel about this MikeThis is a MUST HAVE feature. It is causing a resource leak in our server software that is going to force us to not use this library. If thread A makes a blocking IO HTTP request on a host then thread B needs to be able to call Socket.close forcing an IO Exception on thread A so it wakes up from a blocking Socket.read call. IS there any workaround that would let us do it NOW Could you suggest how I could modify my own version of the code to do it URGENTLY NEEDED. Hi Dave I think what you are looking for is slightly different. It sounds like you want to abort a single HttpMethod. This feature is covered in HTTPCLIENT-217. Your options until this gets solved officially are to add an abort method that closes the method s connection or to use timeouts. In particular setting the socket read timeout HttpClient.setTimeout should handle the case you mention. MikeHi Mike Thanks for this patch I just reviewed the code and it does meet our requirements it would be great if it could be part of 2.0 code base especially as your implementation is safe because it should have no side effect for applications not using this new feature. GaelMike the multithreaded connection manager of yours is still a sort of a black art to me - But from what I can tell the patch looks fine. The decision whether the patch is safe to be included it into 2.0 branch can only rest with you as you are the one who knows the code best OlegYes it has become pretty complicated. These changes are pretty safe I think and are needed to fix a hole in the current 2.0 distribution. I will make a few more documentation enhancements and apply the patch if there are no objections. MikeCreated an attachment id 10938 One more try Ok I was just going to commit the last patch but I thought of one more thing. This patch now closes and releases all connections associated with the connection manager including those that are checked out. Please let me know if there are any comments suggestions. If there are no objections I will apply tomorrow. MikeI ve been following this with great interest as it is a feature that we really need in our application. If the closes the checked out connections then so be it. This is a lot better than leaving a bunch of sockets open for GC to maybe collect up later. Gareth DavisI believe this behavior is justified after all shutting down connection manager is all about closing connections it manages imo as long as this fact is reflected in the javadocs and documentation. OlegPatch applied to 2.0 and HEAD. MikeThanks. It seems that the nightly builds are done on the HEAD only so I guess I have to retrieve the source from CVS and build myself. Or is there any plan to have nightly builds for 2.0 support also 
