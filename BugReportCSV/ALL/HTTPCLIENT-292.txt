NTLM Proxy and basic host authorization
Using a Microsoft proxy with NTLM validation enabled the authorization against a remote host does not work. This of course assuming that the page is correctly fetched which currently is not see the NTLM authentication bug number 24327Created an attachment id 8887 Debug log of the problem edited to hide names As I can see one possible way of solving the problem is to forget the list of realms used for proxy authentication when trying the validation after receiving the 401 from the remote host. This can be done by changing in HttpMethodBase processAuthenticationResponse. In lines 2476-2484 it says             case HttpStatus.SC UNAUTHORIZED                 challenges getResponseHeaderGroup .getHeaders HttpAuthenticator.WWW AUTH                 realmsUsed realms                 host conn.getVirtualHost                 if host null                     host conn.getHost                                  break Clearing the list of realms used for the proxy could be something like             case HttpStatus.SC UNAUTHORIZED                 challenges getResponseHeaderGroup .getHeaders HttpAuthenticator.WWW AUTH                 proxyRealms.clear                 realmsUsed realms                 host conn.getVirtualHost                 if host null                     host conn.getHost                                  break Recompiling after this change and trying again the test case retrieves the page just fine do I have to attach a log Yes please. The log would be quite of some help. OlegAlfonso Can you test if the patch below fixes the problem OlegCreated an attachment id 8895 Possible fix. Please test Oleg Wow again thanks. Applied the patch and re-tested. It now works as expected. As with the previous bug should I close this or it is something you should do . Thanks again AlfonsoPatch committed to 2.0 branch. I just realized that one of my recent patches auto-generated headers cleanup complete broke authentication in CVS HEAD. My bad. I ll provide a fix for CVS HEAD tomorrow. My apologies. OlegCreated an attachment id 8996 Patch against CVS HEAD take 1 The patch against CVS HEAD is virtually identical to that for 2.0 branch. The patch also solves the problem with auto-generated headers by restricting headers cleanup to Cookie headers only. OlegFolks any objections to committing this one OlegOleg I haven t had a chance to try this patch out but if it works for you that s good enough for me. MikeMike It all can wait. There is no rush. I d feel better if someone else had a look. OlegHi Oleg I finally had some time to try this one out. It looks good to me. MikePatch committed to CVS HEAD OlegSadly enough I just discovered even though the patch fixed the problem with NTLM Proxy Basic host authentication but unintentionally broke Basic Proxy Digest Basic host authentication. I am going to reopen the bug report and start working on a better fix. This bug is a release blocker. Absence of a reliable and comprehensive testcase suite for all possible proxy host authentication combinations has become a real pain in the rear. As far as I am concerned this is the greatest deficiency of HttpClient I know of at the moment.Created an attachment id 9134 Patch against 2.0 take 2 I am perfectly aware that the proposed fix is not pretty. Unfortunately I do not see a more elegant solution that would not require API changes. Any better ideas I ll try to come up with something more elegant for the 2.1 branch. OlegOleg I agree our lack of auth proxy tests is a continuous source of problems. One of our goals for 2.1 should be an effective method for testing all of the various combinations of proxy authentication and SSL. Ideally it would be best to make this setup as simple as possible. Do you have any thoughts about how we can best accomplish this MikeCreated an attachment id 9255 2.0 Patch 3 Oleg Attached is another take on this problem. It removes the necessity of checking for NTLM explicitly. I was able to test it successfully with basic authentication on the proxy and digest on the host. NTLM has not been tested. What do you think MikeMike Unfortunately the patch would bring us exactly where we had started in the first place NTLM proxy target host authentication would still be left broken OlegYes it seems we re back to where we started from. What exactly about that behavior is causing problems Why does the proxy try to re-authenticate in the fourth request Also is this a problem if preemptive authentication is used MikeMike my assumption is that the presence of extra Proxy-Authorization header prompts the NTLM proxy to invalidate the authorization for the given connection and force re-authentication. As HttpClient assumes that it has already attempted authentication against the said proxy it just gives up. I do not know NTLM authentication in great details so I may be wrong here but the main difference to digest and basic authentication schemes is that NTLM scheme is connection oriented. Once the agent has been successfully authenticated with an NTLM authentication authority user identity is propagated to all the following requests as long as connection is kept alive whereas digest and basic authentication schemes are request oriented and thus must include Proxy-Authorization Authorization directive with every request. Currently HttpClient does not differenciate connection and request oriented schemes. I can well be wrong in my assumptions but the empirical evidence seems to support them so far. After all my initial patch did fix the problem with NTLM authentication. OlegOleg I agree it does seem that the presence of the Proxy-Authorization header on the already authenticated connection causes re-authentication. So for NTLM to work the proxy-auth header must be removed once authenticated. I don t think either patch 2 or 3 handles this case unless in the case of patch 2 the host also uses NTLM. What we really need is a way to remove NTLM headers after the authentication has succeeded. Mike What we really need is a way to remove NTLM headers after the authentication has succeeded. Agreed. However that still poses the same problem how do we tell NTLM authentication from all others I do not see a way around that ugly test for the 2.0 branch at least   if NTLM .equalsIgnoreCase authscheme.getSchemeName    clean up As far as HEAD CVS goes there are more elegant solutions which would require AuthScheme interface extension though. What are your thoughts OlegCreated an attachment id 9393 Patch against 2.0 take 4 The patch should take care of the problem for HttpClient 2.0. It ain t not pretty but that appears to be the only option we have that does not require API changes. Alfonso if you are still monitoring this bug report I would really appreciate if you test the patch a little bit. If works for me but a second option would be quite welcome. Meanwhile I ll be working on a more elegant fix for the CVS HEAD OlegHi Oleg I tested with basic and digest authentication using a proxy and all seems to work for me. Nice job. The fix is not the prettiest but I think it s the only real choice for 2.0. MikeI m currently unable to test it and it could take a couple of weeks to test. Will that be still be useful for you Alfonso Of course we will not be able to wait that long before committing the patch but it would still be interesting to hear from you whenever you happen to have time. OlegCreated an attachment id 9451 Patch against 2.0 take 5 My previous patch turned out to be flawed successful authentication against NTLM proxy basic host may get screwy when followed by redirect if NTLM headers are not cleaned up. Corrected. But the real stuff is still to follow shortly OlegCreated an attachment id 9452 Patch against CVS HEAD take 2 The patch also fixes the HTTPCLIENT-46 and provides foundation for fixing the bug 15297. Once the patch is committed the fix for the said bug will be just a matter of adding a parameter to the HttpClientParams class Changelog Plug-in mechanism for authentication modules AuthModule interface implementing authentication modules can now be instantiated using default parameter-less constructor Authentication modules can now retain limited state information the state is retained within the lifetime of the method director Authentication scheme selection routine can be easily parameterized Yet another massive refactoring of HttpMethodDirector Haven t I been a trouble lately Still I am not entirely satisfied with the existing state of authentication framework First of all NTLM Digest schemes still need to be refactored to take advantage of their new-found capability to maintain authentication state Secondly our current strategy is to keep authentication headers as long as they may be useful and to remove them whenever we think or guess they may no longer reflect the state of authentication process. It might be better to make authentication scheme smart enough to know what kind of authentication information is required at the given point of the authentication process and to supply authentication headers only when they are really needed Thirdly our current approach towards deciding whether an authentication attempt failed or succeeded is kind of screwy. Knowing the state of the authentication process AND the response status code we should be able to tell if authentication has been successful or has failed. Instead we just resort to what is essentially guessing by maintaining a set of supposedly unique tokens ids realms god-knows-whats that represent authentication attempts. Besides currently we make an assumption that HttpClient may attempt to respond to authorization challenge only once for a given realm and host. With this scheme may get into trouble when trying to bolt interactive authentication on top of it Finally we totally neglected ports. Currently ports are not taken into consideration when assigning credentials to the HTTP state nor when keeping the list of failed authentication attempts Anyways first things first. Let me know what you think about the patch OlegHi Oleg Does the 2.0 patch work with NTLM authentication I haven t been able to try it but from scanning the code I think there may be a problem. I m looking at the following section in execute             while forwardCount MAX FORWARDS                 cleanAuthHeaders                  write the request and read the response will retry                 processRequest state conn                 if isRetryNeeded statusLine.getStatusCode state conn                      nope no retry needed exit loop.                     break                               end of retry loop It seems that the NTLM authorization headers are removed before they can be sent in processRequest . They are added in isRetryNeeded when challenged and then removed again by cleanAuthHeaders before sent to the server in processRequest . What do you think Mike What do you think I think I screwed up. Corrected patches to follow soon. OlegCreated an attachment id 9460 Patch against 2.0 take 6 Created an attachment id 9461 Patch against CVS HEAD take 3 Problem corrected. I could test NTLM host authentication and seems to work fine. Unfortunately I do not have access to a NTLM proxy so this remains to be tested yet. Let me know what you think. OlegOleg As before I was not able to test NTLM but it looks correct to me. MikeOleg The HEAD patch looks very good. I only have two minor comments  - the else in AuthPolicy.getAuthScheme should throw an IllegalStateException.  - The get AuthenticationRealm methods in HttpMethod should probably be deprecated.   MikeAgreed. I ll take care of these two points. If there are no other comments or objections I would like to commit both patches tonight around 20 00 GMT and continue with authentication cleanup on CVS HEAD. Please let me know by then if anyone needs more time to review the patches. OlegBoth patches committed. With my fingers crossed I close the bug report. Alfonso when you happen to have a chance please retest your application using the newest 2.0 and HEAD shapshots. That would be really appreciated. Meanwhile I ll carry on refactoring authentication logic on CVS HEAD Olegi just feel so dumb for asking this but ... errrmmmmm .... how should i use the patches you release here they just look like cvs logs so i suppose i have to go to the cvs repository download the modified classes and re-build all ... but the name patch made me think there could be an easier use of it am i wrong feel free to delete this post but please let me know if i m that dumb Isabelle The patches have already been applied. All you have to do is to pull the latest code snapshot from the CVS. Please make sure to use HTTPCLIENT 2 0 BRANCH tag to obtain 2.0 API compatible code pre-2.0rc3 . Olegok thanks a lot - especially for being so nice towards someone this dumb 
