Use FileLock for locking instead of empty file
The FSDirectory uses File.createNewFile to effectively lock a directory in makeLock yet the Java Spec says explcitly not to use it for this purpose and instead use FileLock from nio. The attached patch shows how this is could be done change is internal to the makeLock method only and functionally equivalent the same tests apply .Here is the patch. Please let me know if any more info is required.Good point and thanks for the patch And sorry for the delayed feedback... The patch looks good to me though it might have the same issues as recently discussed in issues JCR-912 and JCR-933. Also I guess the change of the DISABLE LOCKS constant is an oversight. Could you check these issues You haven t marked the attachment with the Grant license to ASF option on the attachment upload screen. I guess that s also an oversight. You can fix that either by uploading a new version of the patch and selecting the option or simply by commenting here that you grant us the right to use the code under the Apache License.Yes I think it could have the same issues. Looking over the JDK code and the comments it seems that this locking is really up to the OS platform to decide exactly how to do ie its possible to ignore it - at least thats my reading so JCR-933 could be an issue. As for JCR-912 I wasn t quite able to understand it. I grant the license to the ASF my oversight sorry . The change to the DISABLE LOCKS is also an oversight I was turning off the system property when debugging yes it should be left as it. I will try and upload a new patch soon. Here is a patch with the constant fixed up the way it was and license granted .Have looked into the other JIRA - on second look I am not sure if its a problem as this uses lock not tryLock which is fail fast and exclusive. A bigger problem is the issue of JRE implementation on a given platform not entirely sure how much this can be relied on. Also I remember hearing some talk about this being done entirely in Lucene so this code can be retired - then its Lucene s problem Have looked into the other JIRA - on second look I am not sure if its a problem as this uses lock not tryLock which is fail fast and exclusive. A bigger problem is the issue of JRE implementation on a given platform not entirely sure how much this can be relied on. the file locking issue discussed in JCR-912 and JCR-933 applies to both FileChannel lock FileChannel tryLock A. as of java 1.6 the behaviour of lock and tryLock has changed. both methods now consistently throw     an OverlappingFileLockException on all platforms if the the lock is already held by the current process. B. in java 1.4 1.5 lock and tryLock have a platform-dependant behaviour if the lock is already held     by the current process     on windows         lock blocks         tryLock returns null     on nix         lock and tryLock return a new FileLock object          note that A. is the correct behaviour according to the javadoc. since lock doesn t always fail fast it potentially blocks i suggest using tryLock instead. the suggested fix in JCR-933 addresses the incorrect platform dependant behaviour described in B. Also I remember hearing some talk about this being done entirely in Lucene so this code can be retired - then its Lucene s problem Lucene 2.1 has a pluggable LockFactory and provides a NativeFSLockFactory http lucene.apache.org java 2 1 0 api org apache lucene store NativeFSLockFactory.html I suggest we remove the jackrabbit customizations once we upgrade to lucene 2.1.I agree with Marcel. This is getting really nasty if we want to support from 1.4 through 1.6 Java in a non ugly fashion. Its also very hard to test. Perhaps the better solution is to make upgrading to Lucene 2.1 a priority so this code which is lucene specific anyway can be retired and this JIRA closed. Removed the customizations. The index now uses the NativeFSLockFactory from Lucene. Fixed in revision 587450
