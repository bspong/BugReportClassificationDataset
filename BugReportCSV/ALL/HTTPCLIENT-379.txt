JVM bug 4949631 causes BufferOverflowException in HttpMethodBase.getResponseBodyAsString
ava.nio.BufferOverflowException         at java.nio.charset.CoderResult.throwException CoderResult.java 259         at java.lang.StringCoding CharsetSD.decode StringCoding.java 188         at java.lang.StringCoding.decode StringCoding.java 224         at java.lang.String. init String.java 320         at org.apache.commons.httpclient.HttpConstants.getContentString HttpConstants.java 199         at org.apache.commons.httpclient.HttpConstants.getContentString HttpConstants.java 233         at org.apache.commons.httpclient.HttpMethodBase.getResponseBodyAsString HttpMethodBase.java 735 This seems to be caused by a known JVM bug http bugs.sun.com bugdatabase view bug.do bug id 4949631 Strings over 16Mb can cause the problem. Some workarounds are listed the essence being to split the string and call getBytes on each piece and reassemble with a ByteBuffer.We strongly discourage users to use getResponseBodyAsString if the content is large. getResponseBodyAsString imposes buffering and copying the data in the VM which can easily exhaust the memory available to the VM. HttpClients should avoid buffering the response by using getResponseBodyAsStream . Maybe we can log a warning message if the content length is unknown or larger than some megs and the user calls getResponseBodyAsString or getResponseBody. The drawbacks of calling those methods and why to alternatives should be documented in the API.Alan HttpMethod getResponseBodyAsString is a convenience method. And as such it has never been intended to handle large content. Any application specific concerns large content corrupt connect should be dealt with at the application level not at the transport level. If it s OK with you I ll mark this report as INVALID OlegHi Guys I don t agree that the bug is invalid of course thats up to you - . If the method doesn t work for large responses I d expect to see Ortwin s suggestions of a log message as described below and something in the documentation referring to the sun bug report and warning of undefined behaviour if the response is over 16Mb. What would be safer IMO is fail-fast with some kind of ResponseTooLargeException or something . As for our specific situation it s a safe bet our responses will be 5-20Mb and so I ll take the advice and go ahead and use the Stream method if I happened to be in a situation where I had no idea how big the response was before I tried to get it it seems a little worrying that a perfectly reasonable-looking method might fail at random intervals. AlanAlan The method works perfectly for large responses. You have already discoverd that the problem is inside Sun s VM implementation. If you use any other VM Sun 1.3.1 any IBM any Blackdown there is no bug. HttpClient is not broken. Nothing to fix here. We are not going to work around Sun s bugs at the HttpClient level as long as there exists a simple workaround feasible for the user. e.g. using streams. I also don t like your idea of an ResponseTooLargeException. It is perfectly legal although not very intelligent to use getResponseAsString for multimegabyte responses. I guess that at least API Doc improvements should be made to that method. But this has nothing to do with Sun s VM bug. It should rather push users towards using streams instead of buffered responses. A warning message could further help developers but I find it completely optional. I will attach a patch for that in a minute. Ortwin GlÃ ckCreated an attachment id 12749 Patch to 2.0 branch Created an attachment id 12750 Patch to HEAD The attached patches add API Doc a warning if the buffered content length is unknown or 1 MB and an optimization of buffer allocation.Odi are there any reasons for not using the new preferences API to parameterize BUFFER WARN TRIGGER LIMIT OlegOf course not Oleg. Just getting lazy theese days... - Created an attachment id 12754 Patch to HEAD take 2 Looks good to me Oleg HTTPCLIENT-367 has been marked as a duplicate of this bug. Committed to 2.0 branch and HEAD.Created an attachment id 12829 Documents the new parameter for 3.0 API Thanks guys I feel better - Committed Documentation patch to HEAD.
