Missing Content-Length header causes a SocketException
Essentially we have an invalid HTTP server Stellent CMS actually and we will file a bug with them which is returning headers like HTTP 1.1 401 Unauthorized WWW-Authenticate Basic Secure Realm Connection keep-alive Which is clearly missing the Content-Length header. Now previously HttpClient handled this perfectly by reading until the end of the connection ie treating it like it was a Connection close however for some reason a socket exception is being thrown and the invalid connection is added back into the connection pool and then every connection to the server after that thows an exception. See the thread SocketException with invalid server for the full discussion of the issue. I ll attach a patch that fixes the problem. The biggest thing to consider is the changes to the duplicate Connection header test cases which resolves around the question if Connection keep- alive is present but no Content-Length is provided should the connection be closed The patch requires the answer to be yes and I really can t see any other way to do it.Created an attachment id 6906 Fix take 1 Adrian I am afraid the patch will break support for chunk-encoded responses. Chunk-encoded responses use Transfer-Encoding header instead of Content-Length header. The patch in its existing form will cause connections to be dropped after a chunk-encoded response is received. Olegdoh... Do we not have test cases for that I guess that s something else to add. I ll take another shot at it tonight.Created an attachment id 6909 Fix take 2. Patch take 2 features 1. Works with chunked encoding. 2. A test case for chunked encoding. 3. Everything that was in take 1. Adrian I do not like that darn isChunked flag. Besides you forget to reset it in HttpMethodBase recycle. I DO get convinced that the whole idea of recycling is evil after all . I suggest that you just check for presence of Transfer-Encoding or Content-Length header in response. That is it. Do not even parse them. We can assume that the headers will be correctly reacted upon elsewhere. OlegYeah I didn t like the flag much either and I never understood why you d recycle methods but didn t really like blindly assuming that the transfer encoding header was right. I m happy with it if you are though. New patch coming soon.Created an attachment id 6910 Take 3. Adrian My rationale is that by the time decision needs to be made whether the connection is to be closed an invalid Transfer-Encoding or Content-Length header would already have caused an exception. I would even go as far as saying that the check would be sufficient if responseHeaders.getFirstHeader Transfer-Encoding null responseHeaders.getFirstHeader Content-Length null LOG.debug Should close connection as content-length is missing. return true OlegGood point my mind is now at ease. Any other issues you can see I d like to wait for Mike to take a look at the patch before committing it anyway since he d been looking into the problem earlier.Sure. Let Mike take a look. As far as I am concerned all the issues have been addressed. I would like to streamline HttpMethodBase getResponseContentLength method a bit but I ll submit it as a separate incremental patch OlegThis patch does not work in the absence of keep-alive headers. I will attach a fix for this plus some more test cases in a moment. This patch just moves the content length test to the top of shouldCloseConnection . MikeCreated an attachment id 6912 patch 3 gah... You re right. Your changes make sense and looks good to me. Oleg how does this affect your reorganisation of that method It does not affect it at all. I believe the patch is good to go now OlegPatch committed.
