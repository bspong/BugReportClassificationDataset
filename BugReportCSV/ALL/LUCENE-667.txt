javacc skeleton files not regenerated
Copies of the the character stream files for javacc are checked into svn. These files were generated under javacc 3.0 at least that s what they say though javacc 3.2 says this too . javacc 4 complains that they are out of date but won t replace them they must be removed before it will regenerate them. There is one side effect of removing them local changes are lost. r387550 removed a couple of deprecated methods. By using the files as generated by javacc these deprecated methods will be readded at least until the javacc team removes them totally . There are other changes being made to the stream files so I woudl think it s better to live with them unmodified than to keep local versions just for this change. If we want javacc to recreate the files the attached patch will remove them before running javacc. All the tests pass using both javacc3.2 and 4.0. The removed deprecations were part of the lucene-wide sweep to remove all deprecated methods going from Lucene 1.9 to 2.0.... it wasn t necessary in the case of SimpleCharStream. I m fine with this patch. I m okay with this although this might one day piss somebody off - imagine making manual changes running the javacc task and losing your changes. Ouch. Perhaps you should add some echo and some sleep before removing files to give the person a chance to cancel this. The first line of these generated files say that they are generated files though. Yes but people may still play with them e.g. to test things out quickly and may not be familiar with the build details. Here s the text from the javacc FAQ 2.2 Can I modify the generated files Modifying any generated files should be generally avoided since some day you will likely want to regenerate them and then you ll have to re-modify them. That said modifying the Token.java ParserException.java and TokenManagerError.java files is a fairly safe thing to do as the contents of these files do not depend on the options or the contents of the specification file other than the package declaration. Modifying the SimpleCharStream.java or JavaCharStream.java file should not be done until you are certain of your options especially the STATIC and JAVA UNICODE ESCAPE options. The custom files XXX.java XXXTokenManager.java and XXXConstants.java are produced every time you run JavaCC. Modifying any of the custom files is generally a very bad idea as you ll have to modify them again after any change to the specification. Some people have written scripts in say Perl to do the modifications for them. I would regard this as a very last resort. The only reason I stumbled across this is because I was using javacc 4.0 by default and it warn complains if you run it against 3. genearted templates. So I don t see a perfect answer. 4.0 people are going to get messages w o the patch anyone that changes the skeleton no matter the version are not going to like it with the patch. I doubt there are more of the former than the latter but the results are worse for the latter. So should I close this as invalid 1 This patch seems to have been inlcuded in the patch to LUCENE-489 that Otis commited in r468291 2 Even before this change the build.xml s clean-javacc a dependency for javacc was deleting most of the files built by javacc ... this patch just made the list complete which seems like a perfectly fine idea. if people were going to complain about loosing their manual tewaks they would have complained about QueryParser.java or StandardTokenizer.java ... not CharStream.java Dang. Sorry about that. I must have copied the build.xml in order facilitate checking the javacc results. I didn t intend to merge the issues.
