Update Lucene to 3.0
Lucene 3.0 was released on 2009 11 25. They migrated to Java 1.5 as Jackrabbit is doing with 2.0. Also they added some new optimizations. It would be nice if Jackrabbit could switch to the new lucene version too.Just a comment on recent developments regarding this issue. With Hibernate 3.6 this is even more important now. Hibernate 3.6 does not work with older Hibernate Search. And new Hibernate Search can not work with Lucene 2.4.x So everyone using Hibernate Hibernate Search Jackrabbit is now stuck upgrading until Jackrabbit supports newer Lucene 2.9.x is enough at the moment . This is really urgent for us. No comment on this yet At the moment we run Jackrabbit and Hibernate in production on a big Swedish website. We encountered a bug in Hibernate 3.5.x that is fixed in 3.6.x. So we have to upgrade to 3.6.x. Getting urgent. Hibernate Search 3.3 was just released supporting Lucene 3.0 as well. It s sad we can not run Jackrabbit and Hibernate Search 3.3 either. Anyone interested in working on this I d love to help out but don t have the time to drive the effort.I wish I could help out but it s not possible in the immediate future but I m also very interested in this.I have a working upgrade to Lucene 2.9.4 where code compiles and tests are running fine. I just created a topic branch for this in sandbox to ease review and do not break the trunk http svn.apache.org viewvc jackrabbit sandbox JCR-2415-lucene-3.0 Here is what I have done so far but I am not confident so it will need a serious review - change dependency to use Lucene 2.9.4 - remove most of the deprecated classes methods - JR HitCollector Lucene Collector JR AbstractHitCollector - use new Scorer abstract class with new boolean params scoreDocsInOrder and topScorer - use Version.LUCENE 24 for backward compatibility JackrabbitQueryParser JackrabbitAnalyzer StandardAnalyzer MoreLikeThis - creating the directory in FSDirectoryManager not done by Lucene anymore - use Java 5 generics when appropriate - use SuppressWarnings annotation with unchecked serial and rawtypes What need to be done - remove last deprecated classe methods that is convert SortComparatorSource ScoreDocComparator implementation to FieldComparatorSource FieldComparator - test integration with Lucene 3.0.3 to ensure compatibility with Lucene 3.0.x I think that sticking to 2.9.4 might be the best approach because - users still using Lucene 2.4.x 2.9.x will have an easier integration that migrating Lucene 3.0.x - users wanting to use Lucene 3.0.x can force it it maven and have a working search in JR Coincidentally I did just about the same thing yesterday and it seems we arrived at more or less the same point independently. However your work seems to be more mature than mine. It would certainly be nice to get to the point where Lucene 3.0.x could be used. Therefore we need to get rid of SortComparatorSource ScoreDocComparator which have been removed in Lucene 3. It doesn t seem to be a simple matter of switching to FieldComparatorSource FieldComparator since these do not compose i.e. for implementing upper lower case sorting on top of an existing comparator . I just switched to your branch and will see what I can do.Thanks for the work. Do you know how this change should affect query performance Should it improve or will it degrade Best regards   Serge Huber.Some proposed changes fixes to Sébastien Launay s initial workDocIdSetIterator.patch removing usages of deprecated methods from DocIdSetIteratorcumulative patch this patch includes changes from both previous patches review.patch and DocIdSetIterator.patch . Furthermore it removes more deprecated API usage. With this patch the remaining cases where deprecated API is used are all related to sorting i.e. ScoreDocComparator SortComaratorSource SortComparator TopFieldDocCollector . The respective locations are marked with fixme lucene It would certainly be nice to get to the point where Lucene 3.0.x could be used. Definitely I ll see if I can find a way to keep the Adapter pattern and use String Ord ValComparator. Some proposed changes fixes Indeed from what I have seen these changes look complementary so do not hesitate to commit them that s why I created a topic branch at first. Do you know how this change should affect query performance Should it improve or will it degrade I think performance will be better because the new Lucene classes are more complex in order to be more efficient this is typically the case for FieldComparator 1 which render migration difficult . One thing I m sure is that the index size on disk will be larger because we no longer compress stored field larger than 16K. Jukka s performance test suite will be handy to produce performance numbers before after the migration. 1 http lucene.apache.org java 3 0 3 api core org apache lucene search FieldComparator.htmlApplied cumulative.patch with some minor cleanup at revision 1062799 - closing token stream - removed usage of deprecated methods of DocIdSetIterator - removed deprecated usage of Token class - eomved deprecated usage of StandardAnalyzer - various minor improvementsRevision 1063730 upgrades Lucene to version 3.0.3. All test cases pass. Fixed at revision 1064058 Merge all from JCR-2415-lucene-3.0 at 1064038 reintegration Any chance of deploying a SNAPSHOT You can find the snapshot build by Jenkins https builds.apache.org hudson job Jackrabbit-trunk and uploaded here https repository.apache.org You can also build the project from the sources http jackrabbit.apache.org building-jackrabbit.html
