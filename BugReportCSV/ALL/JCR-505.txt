TCK AbstractJCRTest fails if setUp tearDown cannot remove children of test node
If the test node exists the setUp and tearDown methods remove all its child nodes. In some repositories these child nodes may be mandatory or protected causing test setup teardown to fail. Proposal tolerate exceptions thrown in removing a child node in test setup teardown. .. AbstractJCRTest.java revision 422074 .. AbstractJCRTest.java working copy -344 7 344 11                   clean test root                  testRootNode root.getNode testPath                  for NodeIterator children testRootNode.getNodes children.hasNext - children.nextNode .remove try children.nextNode .remove catch RepositoryException e consume                                 else                   create nodes to testPath -375 7 379 11                           clean test root                          testRootNode root.getNode testPath                          for NodeIterator children testRootNode.getNodes children.hasNext - children.nextNode .remove try children.nextNode .remove catch RepositoryException e consume                                                    root.save                       Changed clean-up code to only remove child nodes that are not protected nor mandatory. Fixed in revision 427978 Thank you for reporting this issue.Thank you for the change to test whether the nodedef is mandatory or protected. There are a couple of other scenarios which prevent the node from being removed 1 the parent node is protected 2 implementation-specific constraints per 7.1.6 An example of the latter is a node that is conditionally mandatory based on a property s value. Therefore I propose consuming any ConstraintViolationException thrown by remove in cleanUpTestRoot of AbstractJCRTest.I agree. I ve changed the cleanUpTestRoot method and added a try catch clause which consumes a ConstraintViolationException. svn version 429266
