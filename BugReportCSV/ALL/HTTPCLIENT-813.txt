HttpClient throws NPE on Invalid Port when used with MultiThreadedHttpConnectionManager
The HttpClient throws NullPointerException in the main thread when an invalid port like 80001 is used in the URL. An IllegalArgumentException is thrown in TimeoutGuard thread. Ê Exception in thread Timeout guard java.lang.IllegalArgumentException port out of range 80001 at java.net.InetSocketAddress. init InetSocketAddress.java 118 at java.net.Socket. init Socket.java 240 at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket DefaultProtocolSocketFactory.java 80 at org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory 1.doit ControllerThreadSocketFactory.java 91 at org.apache.commons.httpclient.protocol.ControllerThreadSocketFactory SocketTask.run ControllerThreadSocketFactory.java 158 at java.lang.Thread.run Thread.java 613 Exception in thread main java.lang.NullPointerException at org.apache.commons.httpclient.HttpConnection.open HttpConnection.java 721 at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager HttpConnectionAdapter.open MultiThreadedHttpConnectionManager.java 1361 at org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry HttpMethodDirector.java 387 at org.apache.commons.httpclient.HttpMethodDirector.executeMethod HttpMethodDirector.java 171 at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.java 397 at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.java 323 at com.aol.test.HttpTest PoolingHttpConnector.doGet HttpTest.java 47 at com.aol.test.HttpTest.main HttpTest.java 17 It should throw a checked exception in main thread so caller can handle the error condition more gracefully. The test program is attached. This is caused by a race condition and it s not always reproducible. Running in debugger shows a different behavior. package com.aol.test import java.io.IOException import org.apache.commons.httpclient.HttpClient import org.apache.commons.httpclient.HttpStatus import org.apache.commons.httpclient.MultiThreadedHttpConnectionManager import org.apache.commons.httpclient.methods.GetMethod import org.apache.commons.httpclient.params.HttpConnectionManagerParams public class HttpTest public static void main String args PoolingHttpConnector conn new PoolingHttpConnector try String response conn.doGet http www.aol.com 80001 System.out.println Response response catch IOException e e.printStackTrace static class PoolingHttpConnector public static final int MAX TOTAL CONNECTIONS 16 public static final int MAX CONNECTIONS PER HOST 8 public static final int CONNECT TIMEOUT 5000 public static final int SOCKET TIMEOUT 5000 public static final boolean TCP NO DELAY true private static MultiThreadedHttpConnectionManager poolManager private static HttpConnectionManagerParams httpParams private static HttpClient httpClient private static boolean initialized false public PoolingHttpConnector initialize public String doGet String url throws IOException GetMethod method new GetMethod url try int status httpClient.executeMethod method String response new String method.getResponseBody if status HttpStatus.SC OK throw new IOException HTTP error response return response finally method.releaseConnection private synchronized void initialize if initialized return poolManager new MultiThreadedHttpConnectionManager httpParams new HttpConnectionManagerParams httpParams.setMaxTotalConnections MAX TOTAL CONNECTIONS httpParams.setDefaultMaxConnectionsPerHost MAX CONNECTIONS PER HOST httpParams.setTcpNoDelay TCP NO DELAY httpParams.setSoTimeout SOCKET TIMEOUT httpParams.setConnectionTimeout CONNECT TIMEOUT poolManager.setParams httpParams httpClient new HttpClient poolManager initialized true I can reproduce the bug for HttpClient 3.x using the test case. However the same code ported to 4.0 API seems to work for me without throwing any exception at all. See HttpTest2 attached. The bug in HttpClient 3.x can be worked around by providing a better implementation of the ProtocolSocketFactory. OlegHttpClient 3.x is nearing end of life. There is no point fixing it unless some one volunteers to provide a complete patch in udiff format including test coverage . OlegYou said 4.0 doesn t throw exception at all. That s not right behavior either. Since the input is invalid it should throw a checked exception. We want to switch to 4.0 but we have a policy not to use software in beta. Do you have an estimate on the official release Thanks for your quick response. Zhihong You said 4.0 doesn t throw exception at all. That s not right behavior either. Since the input is invalid it should throw a checked exception. You may be right but since JRE classes do not raise an exception I do not think this is HttpClient s job to validate port numbers Do you have an estimate on the official release Q2 2009 OlegJust tried 4.0. It replaces invalid port with default port in Scheme.resolvePort without any errors. In my opinion an exception should be thrown in this case. That s certainly wrong. Reopening the issue. OlegFixed in SVN trunk. Please verify. Oleg
