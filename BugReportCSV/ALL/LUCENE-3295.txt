BitVector never skips fully populated bytes when writing ClearedDgaps
When writing cleared DGaps in BitVector we compare a byte against 0xFF 255 yet the byte is casted into an int -1 and the comparison will never succeed. We should mask the byte with 0xFF before comparing or compare against -1 here is a simple patch and a test that at least exercise the code. good catch just some thoughts looking at the test we should create a helper no-arg LTC.newIOContext that uses LTC s random or should we need to actually pass IOcontext like this in tests explicitly or should MDW randomize the IOContexts that it passes down to its wrapped Dir while those comments are really unrelated how would you pass a randomized IOContext in the MDW ignore the given one I agree we should have a zero arg newIOContext we can have a true false setter on MDW randomizeIOContexts so we control if it respects the given one e.g. tests that actually want to test IOContext works or not. Egads thanks Simon I found a few more crazy problems with BitVector patch attached merged with the first patch and added some asserts and a few more test cases. thanks for resolving this mike Thank you for catching that something was amiss in the first place That s the hardest part.
