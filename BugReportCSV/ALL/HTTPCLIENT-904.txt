HttpMime StringBody constructor throws specification unnecessarily declares UnsupportedEncodingException
The string body constructors that take a charset unnecessarily throw UnsupportedEncodingException - if you have Charset the encoding is by definition supported     public StringBody             final String text             final String mimeType             Charset charset throws UnsupportedEncodingException         super mimeType         if text null             throw new IllegalArgumentException Text may not be null                  if charset null             charset Charset.defaultCharset                  this.content text.getBytes charset.name         this.charset charset               public StringBody final String text Charset charset throws UnsupportedEncodingException         this text text plain charset           I suggest to change this to     public StringBody             final String text             final String mimeType             Charset charset         super mimeType         if text null             throw new IllegalArgumentException Text may not be null                  if charset null             charset Charset.defaultCharset                  this.content text.getBytes charset         this.charset charset               public StringBody final String text Charset charset         this text text plain charset      The important change is to change         this.content text.getBytes charset.name to         this.content text.getBytes charset which will not throw and hence the throws specifications can be removed. Mark String getBytes Charset method is available as of Java 1.6 and therefore cannot be used by HttpClient as long as we want to keep it 1.5 compatible. OlegOleg the point is that text.getBytes charset.name can never throw the UnsupportedEncodingException. Because it s not possible to obtain Charset instances of unsupported encodings. However due to API compatibility we have to leave the Exception declararion in place unfortunately anyway.Oleg Ortwin Removing a throws specification would not break API compatability not even binary compatability since the JVM never checks the throws spec anyway that s up to javac . So another option is to catch the exception and ignore it since it cannot happen anyway. Like this try     this.content text.getBytes charset.name catch UnsupportedEncodingException e      cannot happen since charset was known in the first place My calling code now essentially needs to do the code I just wrote which is a nuisance and will proliferate to all users of the library. Odi I see your point. Actually HttpMime cannot be considered API stable as its underlying library - mime4j is not yet API stable. We could remove UnsupportedEncodingException if you think this issue is severe enough to warrant API breakage. OlegRemoving a checked exception does affect consumers of the library. If the caller currently catches UCE they would have to amend their code if the method no longer throws UCE. I just tried a test with the following code public class Test     private static void xys throws java.io.UnsupportedEncodingException               private static void call         try             xys          catch java.io.UnsupportedEncodingException e             e.printStackTrace               and I get Test.java 8 exception java.io.UnsupportedEncodingException is never thrown in body of corresponding try statement          catch java.io.UnsupportedEncodingException e It may not affect the code at run-time but the user will have to amend their code before recompiling it.Sebb You rightly point out that consumers when they recompile need to change their code - but the thing they need to do is to remove a catch block for an exception that is never thrown. If they go through the mechanics of upgrading the library beyond just a binary replace of the jar file I m sure they will be happy to remove the dead code. Oleg I d be delighted to see the code fixed. The 4.0 HttpClient is so much better than 3.0. Fixing this issue would remove an unnecessary nuisance introduced with 4.0 which we can still fix at this stage. Thanks Mark.Folks I do not want to take this decision by myself. As far as I am concerned it is not severe enough to warrant API breakage. If no one else votes in favour of making the change the issue will remain WONTFIX OlegWhat about a compromise a factory method that doesn t throw    An alternate to new StringBody CharSet that doesn t throw an exception.   public static StringBody create CharSet charSet      try          return new StringBody charSet       catch UnsupportedEncodingException uee          throw new RuntimeException uee this should never happen         There s precedent in the URI class. The URI constructor throws and there s a factory URI.create method that doesn t declare the throwable.I think this is a good idea. I would just throw IllegalArguementException instead of plain RuntimeException OlegI d be ok with the static factory method. It ll clean up the client code and that is what counts.Fixed in SVN trunk. Oleg
