Make license checking maintenance easier automated
Instead of waiting until release to check licenses are valid we should make it a part of our build process to ensure that all dependencies have proper licenses etc. 1 to hook this into our ant test . This is more important than if the junit tests pass. No where near being ready but putting up something to flesh this out a little bit. I don t think it even compiles yet. Idea Add dev-tools validation and hook in code into it that does work to validate our systems for things like licenses etc. It will then be hooked in at compile time for both Lucene and Solr. In this particular case it will look for license files for each jar file and fail if one is missing. This requires there to be for every JAR file a file with the same name and the name of the license.txt appended to it as in foo.jar.BSD.txt or something like that still being worked out Here s some real progress on this. Works in standalone mode but is not hooked into the build process yet. Should note I ve only hooked it up for lucene lib and solr lib and not any of the modules or contrib. Pretty close to standalone completion. Next step to hook it in. I m going to commit the license naming normalization now but not the validation code yet. Also renamed LicenseChecker to DependencyChecker as it might be useful for checking other things like that all jars have version numbers. This hooks it into compile-core but has the unfortunate side-effect of being called a whole bunch of times which is not good. Need to read up on how to avoid that in ant or if anyone has suggestions that would be great . Otherwise I think the baseline functionality is ready to go. This minimizes the number of calls to validate there is still one extra call via the benchmark module since it invokes the common lucene compile target . Also splits it out into Lucene Solr and Modules. I d consider it close to good enough at this point. latest patch I think this is ready to go. It checks licenses it checks notices. It leaves room for other validation tasks version conflicts etc. It is fast. It is only called for each top dir lucene modules solr there is one extra call when modules benchmark gets called but I can live with it . I believe all LICENSE NOTICE files are properly set now. the current situation with the macros in the root in a common-build.xml and the code in dev-tools breaks the lucene build when lucene is by itself lucene-only releases for example or someone just svn checking out lucene I don t think we should be using dev-tools for anything thats integral to the build the whole point of dev-tools is to be optional maintained on as-is basis type stuff for developers only. So i think the code should go in test-framework or something like that instead and the ant logic should go in lucene s common-build which anything can use. I m fine w moving it out of dev-tools. I m not sure about test-framework which I see more as something people building applications on Lucene Solr use to test their applications on. How about we put it in modules As in modules validation It is after all pertinent to both L S. Actually the more I think about it it doesn t belong in modules either. I m inclined to say a new top level dir called committer-tools slightly different from dev-tools which are redistributed. committer-tools are not I m just going to move to the test-framework. As Robert points out if in the future we get more sophisticated about checking the classpath libs it will fit well there. OK I shuffled some things around putting the code in test-framework and made the appropriate changes to the builds. Will now backport to 3 x but not 3.1 The nightly builds now fail because clover breaks because the checker classes are in test-framework and clover is not available there. The checker classes should be build through compile-tools task without clover and then used. In my opinion this license-checker main should be in lucene dev src tools not lucene dev src test-framework. We already have this folder to e.g. rebuild the files of StandardTokenizer and so on. Also executing this in clover would create code coverage which is not really runtime-created. A quick fix would be to disable the license checker if run.clover 1 but I don t like it how it is now. Third time is the charm. I don t really care where it lives and it sounds like tools makes sense. Not sure why I didn t notice that sooner. I ll take care of it later today. Unfortunately as analyzers moved to modules in trunk so the tools folder is no longer in trunk s lucene src. But we should use the same concept its used at different places e.g. in ICU contrib StandarAnalyzer and other autogenerated code. I can help setting it up again. Eclipse complains for top common-build.xml trunk 3x that default target validate does not exist in the project project name all-common default validate basedir . Target validate was removed in r1083010. Should default validate be removed as well I ll fix it Doron. Bulk closing for 3.2
