Cutover remaining usage of pre-flex APIs
A number of places still use the pre-flex APIs. This is actually healthy since it gives us ongoing testing of the back compat emulation layer. But we should at some point cut them all over to flex. Latest we can do this is 4.0 but I m not sure we should do them all for 3.1... still marking this as 3.1 to remind us Attached rather big patch cutting over all pre-flex API usage to flex and removing the back compat layer that emulates pre-flex API on a flex index. I plan to commit this one soon I m getting an error compiling after this patch missing svn add javac C code lusolr lucene contrib queries src java org apache lucene search regex RegexQuery.java 64 cannot find symbol javac symbol class RegexTermsEnum javac location class org.apache.lucene.search.regex.RegexQuery javac return new RegexTermsEnum reader term regexImpl Woops sorry Ð new patch attached. Looking good - an amazing amount of work Here s some changes to FileFloatSource to make it a bit more byte oriented rather than string oriented. Thanks Yonik Ð your changes to FileFloatSource look good I ll merge w my patch and commit soon... Here s the same sort of patch to UnInvertedField - it avoids the String based conversion and thus will work better if any terms are true binary. I think we re good to commit I will still do some performance tests - but that shouldn t hold this up IMO. Great I ll commit now... Woops Ð see LUCENE-2380 for the commit I typed the wrong issue . OK I tested UnInvertedField faceting on branch 3x vs trunk phase1 building the UnInvertedField involves iterating all terms and docs for a field trunk is 31 slower complete facet request including returning top 1000 facets exercises NumberedTermsEnum - seeking iterating over terms trunk is 10 slower. Reopening to make sure we get to the bottom of the perf loss... Attaching TestEnumPerf.java which tests the performance of iterating over all of the terms in an index. indexing in trunk is 19 faster enumerating in trunk is 9 slower Java6 -server Params 1000000 999 100000 100 Which is 1M docs maxBufferedDocs 999 unique terms 100 000 this results in 21 segments I haven t tried enumerating docs yet... that s up next. OK here s an updated TestEnumPerf.java that tests iteration over docs. It s obviously the culprit. Args 1000000 999 100000 10 same as before just fewer iterations . trunk 11146ms branch 3x 4271ms. trunk is 160 slower Thanks Yonik I ll track this down... A little more info on this. I originally thought that it was going to be a MultiFields issue only... but I stuck in an optimize and the performance on 3x is still much better. Single segment performance trunk bulk read 1823ms trunk nextDoc 1473ms branch 3x bulk read 647ms Here s an updated test that iterates over the docs the biggest slowdown with the optimize stuck in to test single-segment performance . Here s a small improvement that lets one get BytesRef objects from PagedBytes as they are written. UnInvertedField now uses this to avoid the allocation of a new byte per BytesRef. That looks good Yonik Can you commit I found the source of the massive slowdown when enum ing docs Ð attached patch fixes it. I messed up the logic on whether the incoming DocsEnum can be reused thus causing a new DocsEnum to be created for each sub-segment on each .docs call With this I m seeing trunk 6432 msec slightly faster than 3x 6659 msec for term docs enum. But terms enum alone is still slightly slower trunk is 5312 3x is 5019 msec . Same patch as before but also fixed reuse of DocsAndPositionsEnum. I ll commit shortly. Also I tested temporarily cutting over BytesRef to unicode sort order and with that change the MultiTermsEnum on trunk is faster 5120 msec than 3x 5337 msec . So... I think we are done here at least on these perf issues and once we do the cutover to unicode term sort order LUCENE-2426 we ll be faster than 3x. Yay I ve confirmed that this fixes both the test program and the faceting first-time-uninvert Now I m seeing something else though... the actual facet requests themselves are slower now than they were w o the fix. 35 slower than branch 3x now. This probably involves the NumberedTermsEnum class looking up a term by number over a mult-segment index . I ll see if I can reproduce with a lower level test. Good news partially is that I can t reproduce the slowdown with low level tests... throwing in seeks or seeks nexts all result in trunk being slightly faster. Yay I ve confirmed that this fixes both the test program and the faceting first-time-uninvert Great Now I m seeing something else though... the actual facet requests themselves are slower now than they were w o the fix. 35 slower than branch 3x now. This probably involves the NumberedTermsEnum class looking up a term by number over a mult-segment index . I ll see if I can reproduce with a lower level test. Ugh. Good news partially is that I can t reproduce the slowdown with low level tests... throwing in seeks or seeks nexts all result in trunk being slightly faster. Hmm that s partially good... but then where is the 35 slowdown Got it... It was a pre-flex index Rebuilding the index yields speedups across the board first time uninvert phase1 trunk is 23 faster than branch 3x full facet requests trunk is 15 faster
