Using MultiSearcher and ParallelMultiSearcher can change the sort order.
When using multiple sort criteria the first criterium that indicates a difference should be used. When a field does not exist for a given document special rules apply. From what I see in the code it is sorted as 0 for integer and float fields and null Strings are sorted before others. This works correctly in both Lucene 1.4.3 and in trunk as long as you use a single IndexSearcher except perhaps in special cases see other bug reports like LUCENE-374 . However in MultiSearcher and ParallelMultiSearcher the results of the separate IndexSearchers are merged and there an error occurs. The bug is located in FieldDocSortedHitQueue. It can even be demonstrated by passing a single indexSearcher to a MultiSearcher. TestCase and patch follow. The two assertMatches using the full index will pass. The same assertMatches using a MultiSearcher or a ParallelMultiSearcher will fail. This fixes the case where both Strings are null. What about the other case statements in FieldDocSortedHitQueue that return 1 or -1 but never 0. Should these be patched the same way most of the other cases are guaranteed to never have null values except for perhaps CUSTOM Thanks for the patch Luc I ve applied it to the current dev version 1.9 .
