Exception handling in HttpClient requires redesign
When I use httpclient2.0-alpha3 and setTimeout 60000 after the specified time I would like to see InterruptedIOException thrown but I got HttpRecoverableException instead which is pretty general. I would like to see the original exception. ThanksMy suggestion for this is to add the ability to get the original exception if available from HttpException similar to the way that Java 1.4 can wrap exceptions. This way we a. maintain backwards compatibility b. make exception catching simple for the non-picky user like it is currently c. allow users with more complex requirements to find out the information they need. I ll do up an initial patch for this to show the changes to the exception classes but we ll have to go through HttpClient and find all the cases where we create a HttpException because of another exception and pass that through. Simple to do with a decent IDE but my HttpClient code is only in a decent IDE when I m at home so that step will have to wait. My other query is whether or not this should go into 2.0 or leave it for 2.1 - should it be before or after beta 1 I think we need to do beta 1 before looking at anything but total catastrophic failure at the moment.Created an attachment id 6332 Initial patch to add capabilities to exception classes. Created an attachment id 6336 patch 2 The patch above is an extension to Adrian s original patch. I got a little carried away but I think the changes are all for the better. What I ve changed  - All subclasses of URIException have Throwable and String Throwable constructors.  - All exceptions created within HttpClient now use the Throwable constructors where appropriate.  - A new test case has been created for these exceptions.  - Basic Nestable support has been borrowed from commons-lang. I moved a few classes over from Lang to better support printing nested exceptions. These classes have default access and can be removed with no API changes if they are not wanted. Please take a look when you get a chance. Thanks Mike Gee put something down for a moment and someone else goes and does all the hard work. Thanks for that Mike. Your patch looks good to me my only question is whether or not it s overkill to pull in a bunch of stuff from lang to print the stack traces etc. The original use case certainly doesn t require this but it is something that is nice when debugging. I would have left out the extra classes until there was a particular need for them. Maybe I ve just been programming applets too long. I m certainly not going to be upset either way. Thanks for doing all the hard work on this one Mike.Hi Adrian I hope I didn t step on your toes with this one. Yes the classes from Lang may be a bit of overkill. I m happy to remove them if that s the consensus. MikeHi Mike No stepping on toes here - I wish more people would jump in and clean up things on my todo list. Let s see what others have to say on the lang stuff it is conceptually very nice you ve done well. Adrian.I really like the patch and really like the concept of nestable exceptions. But somehow it does not feel right borrowing classes from another Commons project. Can t we have something really lightweight for the time being and then probably introduce commons-lang as a dependency as of 2.1 release and on public class ChainedException extends Exception private Throwable cause null   public ChainedException     super      public ChainedException String message     super message      public ChainedException String message Throwable cause     super message     this.cause cause      public Throwable getCause     return cause      public void printStackTrace     super.printStackTrace     if cause null       System.err.println Caused by       cause.printStackTrace           public void printStackTrace java.io.PrintStream ps     super.printStackTrace ps     if cause null       ps.println Caused by       cause.printStackTrace ps           public void printStackTrace java.io.PrintWriter pw     super.printStackTrace pw     if cause null       pw.println Caused by       cause.printStackTrace pw         OlegMaybe you can just add a new Exception class that extends HttpRecoverableException. The user can then catch this particular type if he wants.I agree stealing and modifying some classes from Lang is a little nasty. In this case though I think it s a decent solution. My main rationale for this choice was to avoid having to implement something from scratch. I feel that we might as well take advantage of something that already works. To ensure that there are no long term side-effects these classes have been made package-protected. If we want to use Lang in 2.1 we could make the changes with no API modifications to URIException other than the Nestable interface. The use of the Lang classes is not meant to be a replacement but just a behind the scenes fix until we can use the real deal. If we want to keep this functionality but without the other classes we could just move the handling into URIException and delete Nestable NestableDelegate and ExceptionUtils. I m pretty flexible on this one. If we like the changes made to URIException and the subclasses changing or removing how it s implemented is pretty easy. What do you think MikeMike I personally can live with either. Let s hear what Jandalf has to say. If he confirms that copying files from another project would not be considered bad mannered I suggest we just keep the files as they are. If such an action would be considered offensive though let s just keep stuff as simple as possible. The ChainedException class I posted above has served me well in several applications. In most cases such a lightweight exception chaining mechanism is quite sufficient. OlegLets try and clarify the purpose of all this. The bug reporter either wants A programatic notification with access to the IIOE object or B a text output of the IIOE message I m not sure what the reporter really wants but with A you can get B plus you can modify flow control and specificly act on the IIOE. Even if the reporter only wants B we should be programming to allow for A for the most flexibility. The posted patch and the exception chaining idea really does not help with A . In particular the IIOE has a bytesTransferred field that the programmer may need direct access to as part of their flow control and exception handling logic. I m not against importing parts of Lang or adding another package dependency but I don t feel that the proposed solution fully addresses the problem. There are some other possibilities 1 As Odi suggested we could extend HTTPRE. This addresses A and is interface perserving. Its a bit of a kludge because there may be many other exception that we may need to wrap all which add more classes. 2 We could just throw out the IIOE which is trivial solution . But this will cause users to modify code. Its not too late for that but if there are other expcetions that need to be treated the same way in the future then it means more user code changes. This would be a fragile approach. 3 We could create a particular wrapper for the IIOE that extends RuntimeException. This is similar to 1 but has semantic differences for flow control and requires that the user have a robust exception handling strategy.Jeff I just want to make sure that we are talking about the same thing. 1 I think the bug reporter clearly wants scenario A. 2 The IIOE instance the user may want to act upon would be nested in the HTTPRE. All that the user would have to do is to get the original root exeption upon receiving HTTPRE and to test if it is an instance of IIOE class. I believe that it the essense of the exception chaining I do not quite see why you think that the patch does not address the problem. OlegSo using Oleg s ChainedException class you dont mind seeing user code that looks like this try     httpclient.execute httpmethod catch HttpRecoverableException e     Throwable cause e.getCause     if cause instanceOf InterruptedIOException         InterruptedIOException iioe InterruptedIOException cause          do somthing with iioe.bytesTransferred      else if cause instanceOf SomeOtherGawdAwefulException         SomeOtherGawdAwefulException sogae              SomeOtherGawdAwefulException cause          do something with sogae      else          do something by default      When it should look like this try     httpclient.execute httpmethod catch InterruptedIOException      do somthing with iioe.bytesTransferred catch SomeOtherGawdAwefulException sogae      do something with sogae catch HttpRecoverableException hre      do somthing by default There are some variations on this but I don t see it getting a lot cleaner unless I m missing somthing again .Actually I do not. The problem is that HttpClient executeMethod may not throw SomeOtherGawdAwefulException unless it s a runtime exception or a sub class of either IOException or HttpException . The only way to get hold of the original exception along with all its properties is to chain it. The alternative would be to implement all the possible exception types as sub classes of HttpException which is in my opinion is as ugly. Exception chaining is the most flexible way of dealing with heterogeneous exceptions and flexibility usually carries a price tag. Oleg HttpClient is in need of careful revision of the entire exception handling logic. There has to be a clear distinction between protocol exceptions malformed request malformed response unsupported protocol version etc and transport exceptions read write failures read write timeouts . Likewise distinction should be made between recoverable and non-recoverable transport exceptions.I m attaching a preliminary patch for this following Oleg s proposal on the mailing list. Here are some areas where I d like feedback - Is AuthenticationException too broad Should there be different exceptions for   - Incorrect credentials password login whatever vs.   - Other problem no such provider unknown auth type .. - I added an HttpInterruptedException for cases where client code tells us to abort a transaction.   - Should I leave this out until we actually add the abort code   - Should it be called HttpAbortedException instead Or something else - I m starting to wonder if all these classes really need Http at the beginning of their names. HttpException definitely does for compatibility reasons if nothing else. But could the others just be ProtocolException TransportException etc There s a chance for a collision if a Java file uses two different network libraries that both have a ProtocolException but it doesn t seem to likely. - I added a primitive exception chaining mechanism to HttpTransportException. Right now it wraps any Throwable. Oleg had suggested wrapping just IOException.  Any preferences Also how fancy does the chaining mechanism need to be I m happy with just getCause but if people want me to I could add some of the other exception chain accessors that commons-lang uses in its classes. - I haven t yet gone through and wrapped all of the IOExceptions and SocketExceptions inside HttpTransportException. I want to get the exception hierarchy right first. - I also haven t cleaned up throws and throws declarations yet. Here s Oleg s proposal from an email sent around July 6 2003. On 7 7 2003 Mike suggested having HttpException extend IOException which is what I implemented. Oleg wrote 2 Go elaborate  org.apache.commons.lang.exception.NestableException or equivalent       org.apache.commons.httpclient.HttpException Root exception           ...httpclient.HttpProtocolException Root protocol exception           ...httpclient.cookie.MalformedCookieException           ...httpclient.auth.AuthenticationException           ...           ...httpclient.HttpTransportException should wrap java.io.IOException                 ...httpclient.RecoverableHttpException                 ...httpclient.TimeoutHttpException                 ...httpclient.ConnectTimeoutHttpException                 ...httpclient.IOTimeoutHttpException                 ...httpclient.InterruptedHttpException Pros  - flexibility  - clarity Cons  - complexity  - most likely requires an external dependency In my opinion we MUST get exception handling right before we do anything else. Exception handling is a foundation of any flexible architecture. I personally can live with either of these two approaches. If you see other alternatives please share your ideas Mike wrote As an addendum to my previous email it would also be possible to use Oleg s 2 option and just change HttpException to extend IOException. This would also allow us to keep API compatability. If this was done we could remove the throws IOException from HttpClient.executeMethod . Oleg replied Mike s suggestion to extend IOException does seem to be the best option that we have right now. It provides a relatively easy migration path for 2.0 users API compatibility still does not save them from having to rethink their exception handling framework while giving us enough flexibility to get things done more or less right.Created an attachment id 7276 Initial patch to rework exception hierarchy for HttpClient 2.1 I believe Mike s response to Laura should be included into the bug report Michael Becke Wrote Very nice work Laura. Thank you for taking the initiative on this one.   Please see the in-lined comments below. I m attaching a preliminary patch for this following Oleg s proposal on the mailing list. Here are some areas where I d like feedback - Is AuthenticationException too broad Should there be different exceptions for - Incorrect credentials password login whatever vs. - Other problem no such provider unknown auth type .. Possibly. I could see this extra information as quite useful. My only worry would be that we have too many exception types. - I added an HttpInterruptedException for cases where client code tells us to abort a transaction. - Should I leave this out until we actually add the abort code - Should it be called HttpAbortedException instead Or something else I think we will probably need it but I would say to leave it out for now. We can always add it when the time comes. I think HttpAbortedException is better. - I m starting to wonder if all these classes really need Http at the beginning of their names. HttpException definitely does for compatibility reasons if nothing else. But could the others just be ProtocolException TransportException etc There s a chance for a collision if a Java file uses two different network libraries that both have a ProtocolException but it doesn t seem to likely. I say lose the Http. It seems a little redundant. No worries about name collision. That s the beauty of packages. - I added a primitive exception chaining mechanism to HttpTransportException. Right now it wraps any Throwable. Oleg had suggested wrapping just IOException. Any preferences Also how fancy does the chaining mechanism need to be I m happy with just getCause but if people want me to I could add some of the other exception chain accessors that commons-lang uses in its classes. I think we should push the cause all the way up to the HttpException level. Nestable exceptions occur in other places than just IO. Your TODO example of NTLM IllegalBlockSize is a good one. I imagine there will be a few involving URIExceptions as well. I think leaving just getCause for now is fine. The most important part is getting the hierarchy right. We can add bells and whistles at a later time. Laura Mike I just realized that HttpConnection handleException IOException method should be updated to take advantage of the new exception handling features such as nested exceptions. Besides do we really have to throw plain IOException there I believe it should be rethrown at least as HttpTransportException. Cheers Oleg Besides do we really have to throw plain IOException there I believe it should be rethrown at least as HttpTransportException. Good question. Now that the easy part is almost done I was starting to think about what kinds of exceptions the HttpClient library should through. Even though it s a big change I think we should probably thrown only HttpException and its subclasses plus RuntimeException subclasses like IllegalStateException . If some of the methods still throw raw IOExceptions it kind of defeats the purpose of having HttpTransportException in the first place. The spot where I have misgivings are the methods that currently throw only IOException. All of these would have to be wrapped with TransportException. We can probably add a utility method to do the wrapping. Even though this is a pain it makes the client usage simpler try   HttpClient.executeMethod ... catch HttpException ex    It broke If someone wants to distinguish specific problems they can do try   HttpClient.executeMethod ... catch HttpTransportException ex    I O problem. Tell the sysadmin or whatever. catch HttpProtocolException ex    Report this to the user catch HttpException ex    It just plain broke There are a few caveats - Existing code will have to be changed. Most client code currently catches both HttpException and IOException. The compiler will now say IOException is not thrown in try block and issue an error or warning I forget which . - The model is slightly complicated you have to remember to catch HttpException last for example. But I think compilers catch this too. - There are rather a lot of exception classes which is both a plus and a minus.  It s more for a client to learn. But they re not forced to deal with all of the exceptions they can just catch the ones that need special treatment and then treat all the others as generic HttpExceptions. Does this all make sense I m scared to make this big a change without lots of feedback from other developers and from clients. I m attaching another patch. The big changes are - Renamed most classes to remove the initial Http . I still want more feedback on this. It s easy enough to change back. Gotta love the Eclipse refactoring tools - Moved wrapped exception cause from TransportException to HttpException - Provided more wrapping functionality to parallel the methods that were added to Throwable in JDK 1.4. I haven t tested these yet though. - Better JavaDoc for exception classes. Once people have a chance to review this and give feedback on my last comment I ll start changing all the places where the library throws exceptions.Created an attachment id 7277 HttpClient 2.1 exception refactoring take 2 Laura I ll just throw some ideas at you but I am not 100 sure that what I am about to suggest is feasible. So take it with a grain of salt. Good question. Now that the easy part is almost done I was starting to think about what kinds of exceptions the HttpClient library should through. Even though it s a big change I think we should probably thrown only HttpException and its subclasses plus RuntimeException subclasses like IllegalStateException . If some of the methods still throw raw IOExceptions it kind of defeats the purpose of having HttpTransportException in the first place. I whole-heartedly agree. All IOExceptions should be wrapped in HttpTransportException otherwise the whole exercise does not make sense in the very first place. In the future 3.0 release we might even think about changing the super class of HttpException from IOException to Exception and completely doing away with IOExceptions in HttpClient execute HttpMethod execute methods. The overall philosophy should be as simple as that HttpProtocolException Something is wrong on the server side. Contact administrator of the target HTTP server. HttpTransportException If HttpRecoverableException simply retry. If not contact network administrator. The spot where I have misgivings are the methods that currently throw only IOException. All of these would have to be wrapped with TransportException. We can probably add a utility method to do the wrapping. Even though this is a pain it makes the client usage simpler Here s my plan HttpMethodBase deals ONLY with HttpExceptions. All protected and private methods that currently throw IOExceptions will have to be changed to throw HttpTransportException instead. All public methods that declare IOException in their throws clause would remain unchanged BUT in fact would not throw IOException. That should take care of the API compatibility issue. HttpConnection catches ALL IOExceptions and re-throws them as HttpTransportException This approach is simple and I personally like the beauty of simplicity at least when it comes to software engineering - There are rather a lot of exception classes which is both a plus and a minus. It s more for a client to learn. But they re not forced to deal with all of the exceptions they can just catch the ones that need special treatment and then treat all the others as generic HttpExceptions. I am not concerned about it at all. They can still do it like that. try   HttpClient.executeMethod ... catch IOException ex   System.out.println Oopsie...   System.exit 1 Does this all make sense I m scared to make this big a change without lots of feedback from other developers and from clients. I suggest that we should not be doing it in one giant leap. Let s fix things in a series of shorter dashes. Let s commit what you have got so far once it is approved by Mike and then we can move on to fixing the internals. I have got to hit the sack. It s Monday here already. OlegLaura Oleg Mike et al Generally I like the way things are sounding with this but having had a recent experience trying to track down the cause of an exception in Xerces I m really not so keen on ever seeing a nested exception again - particularly if it s only added for conceptual niceness. In particular I don t like the idea of wrapping every IOException in a HttpTransportException instead I would have dropped HttpTransportException and used IOException itself. The few IOExceptions that are recoverable would have to be wrapped in a HttpRecoverableException but the vast majority of exceptions that people would be trying to track down the source of would be plain ol unwrapped exceptions. It also seems to fit better with my view on exception handling that you don t wrap exceptions when possible. In essence an exception is thrown and works its way back up the stack until someone is prepared to deal with it. That doesn t work so well when you consider throwing a different exception as dealing with it . I don t really mind either way but I found it incredibly difficult to have to wade through long stack traces and work out which exception actually occurred and which was just created because the API didn t allow the original exception to be thrown. In fact I wound up having to grab the source to Xerces and rewrite parts of it s exception handling to work out what was going on for the record it was my fault . Sorry for coming to the party late I m happy to be ignored on this and I forfeit all rights to complain. I whole-heartedly agree. All IOExceptions should be wrapped in HttpTransportException otherwise the whole exercise does not make sense in the very first place. In the future 3.0 release we might even think about changing the super class of HttpException from IOException to Exception and completely doing away with IOExceptions in HttpClient execute HttpMethod execute methods. The overall philosophy should be as simple as that HttpProtocolException Something is wrong on the server side. Contact administrator of the target HTTP server. HttpTransportException If HttpRecoverableException simply retry. If not contact network administrator. Wrapping all exceptions certainly makes things cleaner. Though to echo Adrian s thoughts I think we should try to add value when we wrap exceptions. For example I m not sure wrapping an IOException at HttpConnection.write adds any valuable information. Also the input output streams of HttpConnection will continue to throw IOExceptions. We could certainly remove the subclassing of IOException for 3.0. We should probably make some note of it in the HttpException JavaDocs. Here s my plan HttpMethodBase deals ONLY with HttpExceptions. All protected and private methods that currently throw IOExceptions will have to be changed to throw HttpTransportException instead. All public methods that declare IOException in their throws clause would remain unchanged BUT in fact would not throw IOException. That should take care of the API compatibility issue. HttpConnection catches ALL IOExceptions and re-throws them as HttpTransportException I think places where only IOExceptions are thrown can be replaced with HttpExceptions if necessary. This should not cause API problems. The only issue would be if both an IOException and an HttpException were thrown. This would cause problems as Laura mentioned if someone is catching both. I suggest that we should not be doing it in one giant leap. Let s fix things in a series of shorter dashes. Let s commit what you have got so far once it is approved by Mike and then we can move on to fixing the internals. I think we re almost ready to go. I would like to wait another day or so to see if others have any comments. Mike Here s patch 3. I added a test for the exception nesting and made the HttpException constructor and printStackTrace methods work correctly. When running under JDK 1.4 it now passes the cause parameter via the new Throwable.initCause method and lets Throwable take care of printing stack traces. If on JDK 1.3 or earlier the HttpException.printStackTrace methods approximate the JDK 1.4 behavior. Adrian Does having printStackTrace also print out all of the nested exceptions take care of some of your objections It seems to make the debugging quite a bit easier because you can see the whole exception trace all the way back to the root cause. Now I need to go do this to our big system at work. - Created an attachment id 7280 refactoring try 3 Printing out the cause stack trace is a bare minimum for being able to debug but it is still really difficult to sort through all that mess - particularly if you wind up with a couple of non-fatal exceptions that build up to a fatal one for HttpClient that s likely to be connections to multiple servers or retrying the connection . The output winds up being pages and pages of useless stack traces. In some cases of course wrapping exceptions makes a lot of sense I d just suggest using the original IOException instead of wrapping it in a TransportException. If I were to propose a rule of thumb I would imagine it would be BAD catch xxxException e  throw new yyyException e.getMessage e OKAY catch xxxException e   throw new yyyException Some informative error message that fits the situation better than the original message e So essentially if the most appropriate useful exception message is the one that came with the original exception you should just throw the original exception otherwise wrap the exception and provide a more informative message. There are obvious cases where that guideline falls down like the exceptions that can be thrown by JCE in NTLM but the API requires them to be dealt with . As I said though it s not a huge issue for me just something that should be considered when thinking about how userfriendly our exception policy is. Thanks for the good work on this - I haven t had time to look into it much but it definitely feels like a much better exception API already.Adrian I do not why but I LOVE nested exceptions. Probably it is due to the stigma of having dealt a lot with EJBs. I remember those days of misery when Websphere App Server 4.0.x used to print a completely useless stack trace of EJBException without giving me even a hint at what had caused the EJBException in the first place. The day the problem was fixed with one of the WAS service releases was one of the happiest days in my life. Regardless of what one may think of nestable exceptions Laura s patch is a step in the right direction. I think we should apply the patch and address remaining concerned through a series of incremental patchesOleg I d have no objections to committing the patch it is a very definite improvement. As for your EJB example - would it not have been better to just get the original exception in the first place instead of having to wade through the EJB exception as well The API wouldn t have allowed that so it s not really an option in this case but it is an option in at least some of ours. Like I said I m happy either way. Once the patch is committed I should be able to take a little time to create a proposal patch for which exceptions could be left unwrapped then we ll see just how feasible it turns out and quite possibly I ll change my mind. Again great work Adrian Not necessarily low level exceptions pushed up all the way to the presentation layer are good Consider the following two scenarios Scenario 1 void DataLayer.doThis throws ThisDataException void DataLayer.doThat throws ThatDataException void DataLayer.doWhatever throws WhateverDataException void BusinessLayer1.doBusiness   throws ThisDataException ThatDataException WhateverDataException   dataLayer.doThis   dataLayer.doThat   dataLayer.doWhatever void PresentationLayer.showStuff   try     businessLayer.doBusiness      catch ThisDataException e      catch ThatDataException e      catch WhateverDataException e    Scenario 2 void DataLayer.doThis throws ThisDataException void DataLayer.doThat throws ThatDataException void DataLayer.doWhate throws WhateverDataException void BusinessLayer1.doBusiness throws BusinessLogicException   try     dataLayer.doThis     dataLayer.doThat     dataLayer.doWhatever    catch Exception data level e     throw new BusinessLogicException I was just trying to do my business data level e    void PresentationLayer.showStuff   try     businessLayer.doBusiness      catch BusinessLogicException e    IMHO in massive and complex business applications nestable exceptions can be your life saver. This said I admin it may not be directly applicable to our problem domain with HttpClient. However I do see IOException pushed all the way up to the caller as nothing more that a way of saying Oopsie OlegOleg Agreed there are definitely times where nested exceptions are better. I guess my main question has come down to how is HttpTransportException different and better than IOException My understanding of IOException is that it s thrown when communication goes wrong which is the same as my understanding of HttpTransportException. For the record I definitely agree we should nest exceptions like JSSE and crypto exceptions as well as other exceptions that are very much internal to how HttpClient works. I m just not sure that TransportException either shields the user from the internals of HttpClient or provides additional information that may be useful.Patch committed. Nice work Laura. MikeI just noticed that my patch mangled some comments in HeadMethod.java. They had a long of row non-ASCII characters a bullet I think which got messed up because I had Eclipse set to Cp1252 instead of Latin-1. Here s a patch....Created an attachment id 7298 Fix mangled comments in HeadMethod.java Comments fixed.Folks I am working on clean up of internal exception handling structure. Things look nasty. I have a few ideas I would like to try out before I get all desperate and stuff OlegCreated an attachment id 7307 refactoring try 4 OK. Here s what I got. I played around with several approaches and realized that wrapping all IOExceptions into HttpTransportExceptions was not simply feasible primarily because InputStream OutputStream derived classes cannot throw non-IOExceptions. I found no way to work that problem around in an acceptable manner The patch basically implements the first scenario of my original proposal and goes along the line suggested by Adrian IOException represents transport exceptions HttpException represents protocol exceptions Here s the list of important points TransportException no more HttpException is no longer derived from IOException which is good URIException is no longer derived from IOException which is good I had to deprecate HttpConnectionManager getConnection HostConfiguration long because of wrong exception type it throws. In ChunkedInputStream I had to implement a pretty ugly hack to work around exception type mismatch HttpConnection can now throw IOTimeoutException Let me know what you think Oleg I played around with several approaches and realized that wrapping all IOExceptions into HttpTransportExceptions was not simply feasible primarily because InputStream OutputStream derived classes cannot throw non-IOExceptions. I found no way to work that problem around in an acceptable manner Makes sense.   The patch basically implements the first scenario of my original proposal and goes along the line suggested by Adrian IOException represents transport exceptions HttpException represents protocol exceptions Here s the list of important points TransportException no more Adrian wins HttpException is no longer derived from IOException which is good I m not so sure this is a good thing. This adds up to a very large API change for many users. People who are wrapping HttpClient.executeMethod in a try catch IOException are going to be in for some trouble. I think we should leave the IOException inheritence of now even though it is ugly . URIException is no longer derived from IOException which is good This is only okay I think if we keep HttpException as an IOException for similar reasons as above. I had to deprecate HttpConnectionManager getConnection HostConfiguration long because of wrong exception type it throws Looks good to me. Adding the getConnectionWithTimeout method breaks the API but I do not think may people are creating their own connection mangers. In ChunkedInputStream I had to implement a pretty ugly hack to work around exception type mismatc That s not so bad. I think we should add an error log since the original stack track will be lost. HttpConnection can now throw IOTimeoutException Jolly good. Overall this patch is a good incremental change. The notable exception being the change to HttpException. This is a pretty big change and I do not think it is appropriate for 2.1. I suggest we keep HttpException as an IOException and make it very clear in JavaDocs release notes etc. that it will not be that way for 3.0. MikeMike believe it or not it was not an attempt at sneaking in some controversial changes while nobody was watching. I just got carried away. I agree we should keep current HttpException inheritance. A new patch will follow soon OlegCreated an attachment id 7314 refactoring try 5 I like the way this is going. Here are a couple of comments though they may be things you just haven t gotten to yet - The ugly hack in ChunkedInputStream isn t strictly necessary anymore since an HttpException is an IOException. But if we re planning to remove the IOException inheritance in 3.0 it should probably stay the way it is. - If we keep the hack the code that constructs the IOException should call its initCause method when running on JDK 1.4 . Maybe a package-access helper method in HttpException could take care of this so we don t have the same ugly reflection code all over the place. - The ugly hack in ChunkedInputStream isn t strictly necessary anymore since an HttpException is an IOException. But if we re planning to remove the IOException inheritance in 3.0 it should probably stay the way it is. It is not. But I really would like to keep it as once 3.0 development starts it would only take changing the super class of the HttpException - If we keep the hack the code that constructs the IOException should call its initCause method when running on JDK 1.4 . Maybe a package-access helper method in HttpException could take care of this so we don t have the same ugly reflection code all over the place. Quite right. I would like to check in this patch first though provided nobody objects .Go for it. MikeDitto. Check it in.Patch refactoring try 5 committed. OlegCreated an attachment id 7442 Refactoring of authentication try 1 Created an attachment id 7443 Refactoring of authentication try 2 Oleg Thanks for looking into this. The patch makes a big improvement to exception handling in authentication. Once question does encrypt byte byte actually work or should it have been link encrypt byte byte . My JavaDoc skills are really poor but that looks odd to me.Thanks Adrian. I can t claim to be very knowledgeable in Javadoc but I think link encrypt byte byte is surely better. OlegPatch Refactoring of authentication try 2 committed OlegCreated an attachment id 7510 Hopefully the final exception handling clean-up take 1 I cleaned up things somewhat and dealt with the remaining outstanding issues. Please let me know what you think. OlegThis looks good I m attaching one minor improvement that I didn t get around to in my original patch a slightly more efficient way of accessing initCause. Since I can t figure out a way to do a patch relative to your patch I ll just paste in a new copy of ExceptionUtils.java.Created an attachment id 7576 Slightly more efficient ExceptionUtils.java Oops here s one more thing. When I added TestExceptions I forgot to add it to the TestNoHost TestSuite. Could someone add it Created an attachment id 7580 Hopefully the final exception handling clean-up take 1 Laura Many thanks for your feedback. I patched ExceptionUtils and updated TestNoHost. OlegFolks Do you think it is ok to commit the outstanding patch and close the bug report OlegGo for it. MikeThe final patch committed. Oleg
