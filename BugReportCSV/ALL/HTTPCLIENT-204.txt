StackOverflowError in HttpConnection
When the HttpConnection WrappedOutputStream.flush encounters IOException druign write it is calling HttpConnection.close which calls HttpConnection.closeSocketAndStreams and which eventually calls HttpConnection WrappedOutputStream.flush again. The circular calls will cause StackOverflowError. I run into this accidentally when I was trying to extend HttpConnection. But looking through the code I believe any IOException may cause the same problem. The circular calls should be either removed or controlled. Below is part of teh stack trace java.lang.StackOverflowError         at java.lang.Exception. init Unknown Source         at java.io.IOException. init Unknown Source         at java.net.SocketException. init Unknown Source         at java.net.SocketOutputStream.socketWrite Native Method         at java.net.SocketOutputStream.write Unknown Source         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1273         at java.io.BufferedOutputStream.flushBuffer Unknown Source         at java.io.BufferedOutputStream.flush Unknown Source         at java.io.FilterOutputStream.close Unknown Source         at org.apache.commons.httpclient.HttpConnection.closeSocketAndStreams Ht tpConnection.java 1083         at org.apache.commons.httpclient.HttpConnection.close HttpConnection.jav a 1024         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.hand leException HttpConnection.java 1235         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1275         at java.io.BufferedOutputStream.flushBuffer Unknown Source         at java.io.BufferedOutputStream.flush Unknown Source         at java.io.FilterOutputStream.close Unknown Source         at org.apache.commons.httpclient.HttpConnection.closeSocketAndStreams Ht tpConnection.java 1083         at org.apache.commons.httpclient.HttpConnection.close HttpConnection.jav a 1024         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.hand leException HttpConnection.java 1235         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1275         at java.io.BufferedOutputStream.flushBuffer Unknown Source         at java.io.BufferedOutputStream.flush Unknown Source         at java.io.FilterOutputStream.close Unknown Source         at org.apache.commons.httpclient.HttpConnection.closeSocketAndStreams Ht tpConnection.java 1083         at org.apache.commons.httpclient.HttpConnection.close HttpConnection.jav a 1024         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.hand leException HttpConnection.java 1235         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1275         at java.io.BufferedOutputStream.flushBuffer Unknown Source         at java.io.BufferedOutputStream.flush Unknown Source         at java.io.FilterOutputStream.close Unknown Source         at org.apache.commons.httpclient.HttpConnection.closeSocketAndStreams Ht tpConnection.java 1083         at org.apache.commons.httpclient.HttpConnection.close HttpConnection.jav a 1024         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.hand leException HttpConnection.java 1235         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1275 Looks like the problem happens mroe often than I first thought. I think it needs to be fixed. I jsut run into one caused by server sid etiming out keep- alive socket. It went into the circular call right from there. java.net.SocketException Connection aborted by peer socket write error         at java.net.SocketOutputStream.socketWrite Native Method         at java.net.SocketOutputStream.write Unknown Source         at com.sun.net.ssl.internal.ssl.OutputRecord.a DashoA6275         at com.sun.net.ssl.internal.ssl.SSLSocketImpl.a DashoA6275         at com.sun.net.ssl.internal.ssl.AppOutputStream.write DashoA6275         at org.apache.commons.httpclient.HttpConnection WrappedOutputStream.writ e HttpConnection.java 1274         at java.io.BufferedOutputStream.flushBuffer Unknown Source         at java.io.BufferedOutputStream.flush Unknown Source         at org.apache.commons.httpclient.HttpConnection.flushRequestOutputStream HttpConnection.java 750         at org.apache.commons.httpclient.HttpMethodBase.writeRequest HttpMethodB ase.java 2161         at org.apache.commons.httpclient.HttpMethodBase.processRequest HttpMetho dBase.java 2494         at org.apache.commons.httpclient.HttpMethodBase.execute HttpMethodBase.j ava 1062         at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.jav a 599         at org.apache.commons.httpclient.HttpClient.executeMethod HttpClient.jav a 497         at com.sabre.evoya.client.common.tools.ServletProxyCore HttpClientRunner .executeMethod ServletProxyCore.java 2776         at com.sabre.evoya.client.common.tools.ServletProxyCore HttpClientRunner .sendObject ServletProxyCore.java 2657         at com.sabre.evoya.client.common.tools.ServletProxyCore.HttpClientSendRe ceive ServletProxyCore.java 1446         at com.sabre.evoya.client.common.tools.ServletProxyCore.sendReceive Serv letProxyCore.java 944         at com.sabre.evoya.client.common.tools.ServletProxyCore.sendReceive Serv letProxyCore.java 537         at com.sabre.evoya.client.common.tools.ServletProxyCore.sendReceive Serv letProxyCore.java 531         at com.sabre.jserver.Session.sendReceiveMultiByteBuffer Session.java 839         at com.sabre.jserver.TCPSession.sendReceiveMulti TCPSession.java 863         at com.sabre.jserver.TCPSession.processPacket TCPSession.java 262         at com.sabre.jserver.TCPSession.run TCPSession.java 178         at java.lang.Thread.run Unknown Source Created an attachment id 6115 patch Good catch. This should take care of it. MikeMakes sense to me. OlegMike I tested the patch and it worked. Thanks. Bin ChenPatch applied.New problem created bu the patch I have done some mroe testing and just realized that a new problem was created by the patch. The used flag in the HttpConnection class is set to false durign the process of dealing with recursive issue. As result the exception thrown out is NOT converted to HttpRecoverableException any more the raw SocketException is thrown instead . The case can be recreated by doing a keep- alive connection and wait for the connection to timeout. The Output exception occurred on a used connection. Will treat as recoverable. message will indicate teh exception is converted. Missing the message would indicate the raw exeption is thrown.Created an attachment id 6219 log file Created an attachment id 6220 patch Created an attachment id 6221 log with patch Agreed. I will path this one tonight. MikePatch applied.
