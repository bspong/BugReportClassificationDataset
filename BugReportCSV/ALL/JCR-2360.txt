JcrUtils.getRepository ... for simple repository access
As discussed on the mailing list it would be nice to have a trivially simple way one line of code to connect to a repository. The RepositoryFactory interface in JCR 2.0 defines a way for clients to get a repository reference without a direct implementation dependency but a client still needs extra code to handle the Service Provider lookup and the iteration through all the available repository factories. To simplify client code I d like to introduce a JcrUtils.getRepository Map String String method that takes care of the tasks mentioned above     Map String String parameters ... repository settings     Repository repository JcrUtils.getRepository parameters As a further simplification I d also like to introduce a JcrUtils.getRepository String method that builds the parameter map based on a given repository URI .     Repository repository JcrUtils.getRepository file path to repository     Repository repository JcrUtils.getRepository http localhost 8080 server The set of supported URI types is still to be defined.Proposed patch with the following supported URI types     jndi ... for o.a.j.core.jndi.RepositoryFactoryImpl     file ... for o.a.j.core.RepositoryFactoryImpl     http s ... for o.a.j.jcr2spi.Jcr2spiRepositoryFactory with o.a.j.spi2davex.Spi2davexRepositoryServiceFactory More elaborate support URI parameter support autodetection of file or http repository types etc. can be added as needed.I committed the patch and a followup change that introduced an o.a.j.commons.GenericRepositoryFactory class that implements the repository URI functionality and JNDI lookups as a standard RepositoryFactory.Instead of hard-coding the prefix-to-factory mapping we could add a way for factories to register one more multiple URL prefixes. Similar to JDBC http java.sun.com javase 6 docs api java sql DriverManager.html registerDriver java.sql.Driver - instead of an explicit register method the factory could return the list of prefixes it supports.How come I think of the OSGi ServiceRegistry would be faboulous helper for this kind of extensibility ... - OSGi ServiceRegistry See the title simple repository access . If I want a simple solution I definitely don t want to use OSGi.Instead of a new registry we could actually just let each specific repository factory to interpret the org.apache.jackrabbit.repository.uri parameter in addition to any custom parameters they may support. For example the jackrabbit-core repository factory could look up a file URI and only return an instantiated repository if the given path points to a Jackrabbit repository directory. Another repository factory could then also support file URIs that point to other types of files or directories. The nice thing about this approach is that we wouldn t need another registry mechanism as the normal service provider system already used by repository factories would be good enough. Instead of a new registry we could actually just let each specific repository factory to interpret the org.apache.jackrabbit.repository.uri ... 1 let each factory interpret org.apache.jackrabbit.repository.uri 1 let each factory interpret org.apache.jackrabbit.repository.uri This is now implemented with the new jcr2dav component and the jackrabbit-core changes in revision 897836. Any new RepositoryFactory implementations that want to work with JcrUtils.getRepository String uri should implement similar processing for the org.apache.jackrabbit.repository.uri configuration parameter.Currently using version 2.0.0 how can I connect to a remote Jackrabbit WebDav repository 
