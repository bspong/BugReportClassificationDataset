jcr-server should respect child node definition of jcr content
When creating a new file jcr content defaults to nt unstructured. This causes file creation to fail when the underlying persistent store i.e. SPI implementation does not support nt unstructured for jcr content. I suggest to check whether the underlying implementation provides its own node type for jcr content and use that one. If not default to nt unstructured.Suggested patchThe problem with using addNode jcr content without explicitly specifying a node type is that by default the node would then end up with nt base as it s node type if the parent is a standard nt file node.Just out of curiosity your patch actually adds the addNode jcr content call w o an explicit node type to the jcr server code. This does not really fit with the description of this issue... What is the default value for getContentNodeType and or is it configurable Puzzled - getContentNodeType is hardcoded to nt unstructured in DefaultHandler. So the current code always tries to create jcr content with type nt unstructured. This fails if the parent s child node definition does not allow nt unstructured for jcr content i.e. requires nt resource . As Jukka noted the patch is flawed. Corrected patch Check whether jcr content can be created with the note type returned by getContentNodeType . If so create it. Otherwise try to create jcr content without explicitly specifying a node type. Not sure if asking the primary node type is enough we should probably check all the mixin types too.Yes you re right. I see two options 1 Check whether any of getPrimaryNodeType or getMixinNodeTypes allows for adding the jcr content node of the given type. If so create it. Otherwise try to create jcr content without explicitly specifying a node type. 2 Try to create jcr content with the given type. On RepositoryException retry without explicitly specifying a node type. For 1 the supertypes should theoretically also be considered. However for a compliant repository implementation they can be ignored I think. 2 is more general since it just retries regardless of why adding failed on the first try. WDYT Just talked to Jukka. We decided that JCR-2070-1.patch should be fine. It doesn t break backwards compatibility while it enhances interoperability.Fixed at revision 770255
