SSL connections cannot be established using resolvable IP address
HttpClient 4.1 introduced a regression in establishing SSL connections to remote peers it seems this is a common regression for major httpclient updates see HTTPCLIENT-803 . The new SSLSocketFactory.connectSocket method calls the X509HostnameVerifier with InetSocketAddress.getHostName parameter. When the selected IP address has a reverse lookup name the verifier is called with the resolved name and so the IP check fails. 4.0 release checked for original ip hostname but this cannot be done with the new connectSocket method. The TestHostnameVerifier.java only checks 127.0.0.1 .2 and so masked the issue because the matching certificate has both localhost and 127.0.0.1 but actually only localhost is matched. A test case with 8.8.8.8 would be better.I am not able to reproduce the problem. SSL connections to remote peers pass the default host name verification. executing requestGET https www.verisign.com HTTP 1.1 DEBUG SingleClientConnManager - Get connection for route HttpRoute s - https www.verisign.com DEBUG DefaultClientConnectionOperator - Connecting to www.verisign.com 69.58.181.89 443 DEBUG RequestAddCookies - CookieSpec selected best-match DEBUG DefaultHttpClient - Attempt 1 to execute request DEBUG DefaultClientConnection - Sending request GET HTTP 1.1 DEBUG headers - GET HTTP 1.1 DEBUG headers - Host www.verisign.com DEBUG headers - Connection Keep-Alive DEBUG headers - User-Agent Apache-HttpClient 4.1 java 1.5 DEBUG DefaultClientConnection - Receiving response HTTP 1.1 200 OK DEBUG headers - HTTP 1.1 200 OK DEBUG headers - Date Thu 03 Feb 2011 20 14 35 GMT DEBUG headers - Server Apache DEBUG headers - Set-Cookie v1st D732270AE4FC9F76 path expires Wed 19 Feb 2020 14 28 00 GMT domain .verisign.com DEBUG headers - Set-Cookie v1st D732270AE4FC9F76 path expires Wed 19 Feb 2020 14 28 00 GMT domain .verisign.com DEBUG headers - X-Powered-By PHP 5.2.13 DEBUG headers - Keep-Alive timeout 5 max 100 DEBUG headers - Connection Keep-Alive DEBUG headers - Transfer-Encoding chunked DEBUG headers - Content-Type text html DEBUG ResponseProcessCookies - Cookie accepted version 0 name v1st value D732270AE4FC9F76 domain .verisign.com path expiry Wed Feb 19 15 28 00 GMT 01 00 2020 . DEBUG ResponseProcessCookies - Cookie accepted version 0 name v1st value D732270AE4FC9F76 domain .verisign.com path expiry Wed Feb 19 15 28 00 GMT 01 00 2020 . DEBUG DefaultHttpClient - Connection can be kept alive for 5000 MILLISECONDS HTTP 1.1 200 OK Response content length -1 DEBUG SingleClientConnManager - Releasing connection org.apache.http.impl.conn.SingleClientConnManager ConnAdapter 15ad5c6 DEBUG DefaultClientConnection - Connection shut down Are you using a custom SSL socket factory by any chance Does it implement the LayeredSchemeSocketFactory interface OlegWrong test. Try to connect to https 93.62.162.60 8443 . The certificate has CN 93.62.162.60 but the check is done for 93-62-162-60.ip23.fastwebnet.itI had to resort to a fairly ugly hack in order to fix the problem. A better solution would require changes to the X509HostnameVerifier API. I felt that deprecation of the X509HostnameVerifier interface was not warranted as the use of an IP address for CN in a certificate was a hack by itself. Please review. OlegWell I looked at the patch. It should fix the issue though not completely since the reverse lookup could give a wrong unresolvable hostname but as you said it s a crude hack and this opens to other security issues. Unfortunately the clean fix requires API modification. You say using an IP address as CN is a hack but actually using it as an ipAddress SubjectAlternativeName is perfectly valid. The security issues arise from the fact that httpclient tries to match dns generated data reverse lookups and now also resolved hostnames instead of what the user actually typed opening to DNS poisoning or connection redirect attacks. First scenario - user wants to connect to 1.2.3.4 - DNS reverse lookup is xxx.yyy.zzz - a malicious proxy redirects the connection to server 4.3.2.1 - server certificate contains CN or SAN set to xxx.yyy.zzz - All OK but shouldn t Second scenario - user wants to connect to xxx.yyy.zzz - hacked DNS incorrectly resolve it to 1.2.3.4 - server certificate has CN or SAN set to 1.2.3.4 - The connection is established OK but clearly shouldn t Fair enough. I ll revert the patch and close the issue as WONTFIX OlegHmm my comment was not meant to revert the patch. The first scenario was already exploitable and still is. Your patch is the correct solution without breaking the API. But to avoid any security issue including the ones already present the API have to be changed.The first scenario you are describing would also require involvement of green men from Mars and the malicious 4.3.2.1 server sending a certificate trusted by the client to be practical. OlegEven the second one requires the server presenting a trusted certificate. I don t see much difference beetween the two cases.I committed a slightly better workaround for the problem that does not require reverse DNS lookups. OlegGreat work good patch thanks 
