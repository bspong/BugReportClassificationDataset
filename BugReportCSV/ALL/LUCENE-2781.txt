Drop deprecations from trunk
subj. Also to each remaining deprecation add release version when it first appeared. Patch incoming. Stab one. Everything works except Solr - this fails to compile and a couple of tests that are commented-out and marked nocommit - these should be converted from DateField to DateUtil or dropped. New patch. Current status Lucene s deprecations are mostly out. Those which are still in are marked with Lucene version when they were deprecated - for future reference. I didn t sift through Solr and will not but I fixed it not to use any of Lucene s removed stuff eg. it builds and passes tests What has to be done There are a couple of commented out tests marked with nocommit - these used removed DateField class. If anybody knows how to fix them fast - please do this. If not I ll get back at them in a couple of days. Or maybe we can just drop them Version.LUCENE 2x should be dropped Version.LUCENE 3x - marked as deprecated New patch. Version 2x dropped 3x deprecated. Builds passes tests. Same rebased on latest trunk. Lets not allow this patch to get out of date... Earwin i ll try to help with the Solr stuff after i review this monster Earwin this is looking really nice at a glance ... i thought you said you weren t going to sift through solr seems like it works here is the only remaining issue the two commented out tests that used DateField In my opinion we could TODO these... i thought you said you weren t going to sift through solr I fixed it to work with de-deprecated Lucene I didn t remove any of Solr s own deprecations. is the only remaining issue the two commented out tests that used DateField In my opinion we could TODO these... Yes. That s the only remaining issue known to me. There are already a ton of similar todo s out there. Not sure I d like to increase that number but too lazy currently to do anything about it. We can todo yeah. OK i looked at the patch and i see a few issues mainly with the analyzer stuff. so if we are gonna really do the 2-version thing you suggested on the list unfortunately we cant yet remove anything we deprecated in 3.0 or 3.1 as we still need some of these deprecated classes to support Version 3.0 in 4.0. Yes I am aware some of these classes say in trunk 3.x deprecated This will be removed in Lucene 4.0 but this is wrong Examples include things like DutchStemmer which are deprecated in 3.1 branch 3x but weren t in 3.0 so we have to keep them unfortunately we cant yet remove anything we deprecated in 3.0 or 3.1 Not completely true. We can t remove some of the things deprecated in 3.0 or 3.1. Some other we can remove. I primarily relied on two pointers - something is already deprecated in 3.1 and or it has deprecated This will be removed in Lucene 4.0 stanza. Don t use the stanza if it s not true I also checked things required to support 3.0 indexes and remember leaving some such code intact but could surely miss something. Please post corrected version of the patch or name exact things we should preserve. Hmm.. and regarding this exact case. DutchStemFilter.java had this deprecated Use link SnowballFilter with link org.tartarus.snowball.ext.DutchStemmer instead which has the same functionality. considering the following snippet from DutchStemmer.java The algorithm is an implementation of the a href http snowball.tartarus.org algorithms dutch stemmer.html dutch stemming a algorithm in Martin Porter s snowball project. we can reliably drop DutchStemFilter DutchStemmer people will fix their code to use SnowballFilter and happily read their 3.0 indexes. No we can reliably drop DutchStemFilter DutchStemmer people will fix their code to use SnowballFilter and happily read their 3.0 indexes. No The DutchStemmer might claim that but it wasnt completely faithful to the algorithm buggy . here s my example from LUCENE-2055 DutchStemFilter passes 98.9 of snowball tests. all bugs were in handling of double consonants examples aangetroffen - aangetrof expected aangetroff afvoerbonnen - afvoerbon expected afvoerbonn klommen - klom expected klomm So we kept the buggy implementation for index back compat Ok restore it then and fix deprecation note to will drop it in Lucene 5.0 or something Earwin yeah ill update your patch for this stuff... since i was the culprit Earwin s patch I only restored anything necessary for 3.0 analyzer back compat along with any back-compat tests . All tests pass... in my opinion the patch is sorely needed I think Earwin s suggestion here makes a ton of sense Lets say you are on Lucene 2.4 when you upgrade to 3.0 it continues to provide you backwards compat via the version constant but Version.LUCENE 24 becomes is deprecated so its a deprecation in your code you know you must fix before you move to 4.0. At your leisure sometime during the entire 3.0-3.9 or whatever you migrate to Version.LUCENE 30 and the deprecation goes away. When you move to Lucene 4.0 the Version.LUCENE 24 stuff etc stuff is gone but its no surprise because you are guided via deprecations. 4.0 doesnt support 2.x indexes anyway. So I m strongly 1 to committing this 2.3MB patch that removes 100 000 lines of crap from trunk. 1 This sort of patch does not have a great shelflife so lets not let it rot. If there is anything in question lets leave it in for now and can work with smaller patches to fix. Thanks Earwin This is awesome work Ð thanks Earwin Committed revision 1040463. Thanks a lot Earwin this is tedious stuff and the patch was great... the only issues were from my wrong deprecation notices in analyzers I ll fix these in branch 3.x so people know they are staying aroound till 5.0 for index bw compat reasons. we should also deprecate Version 2.x in branch 3x. finally we should fix the usage of deprecated code in 3.x e.g. i think solr there needs to be fixed to use IWconfig too . ill see about merging these parts. attached is a patch for the branch 3x changes. Committed revision 1040505 for the 3x changes. Thanks again Earwin 
