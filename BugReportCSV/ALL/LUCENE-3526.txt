preflex codec returns wrong terms if you use an empty field name
spinoff from LUCENE-3473. I have a standalone test for this... the termsenum is returning a bogus extra empty-term I assume it has no postings i didnt try . This causes the checkindex test in LUCENE-3473 to fail because there are 4 terms instead of 3. test fails under preflex codec I committed this test to 3.x it passes there. same test but with out-of-bounds checks for docFreq and totalTermFreq in checkIndex. These would have found the bug too i committed already to 3.x s checkIndex Updated set of tests I changed TestRegexpRandom2 to sometimes use an empty field name for better testing. this seems to trigger its own problems junit Testcase testRegexps org.apache.lucene.search.TestRegexpRandom2 FAILED junit Terms are out of order field number 0 lastField number -1 text lastText junit junit.framework.AssertionFailedError Terms are out of order field number 0 lastField number -1 text lastText junit at org.apache.lucene.util.LuceneTestCaseRunner.runChild LuceneTestCaseRunner.java 149 junit at org.apache.lucene.util.LuceneTestCaseRunner.runChild LuceneTestCaseRunner.java 51 junit at org.apache.lucene.index.codecs.preflexrw.TermInfosWriter.add TermInfosWriter.java 213 junit at org.apache.lucene.index.codecs.preflexrw.PreFlexFieldsWriter PreFlexTermsWriter.finishTerm PreFlexFieldsWriter.java 192 junit at org.apache.lucene.index.FreqProxTermsWriterPerField.flush FreqProxTermsWriterPerField.java 409 junit at org.apache.lucene.index.FreqProxTermsWriter.flush FreqProxTermsWriter.java 92 I had thought to workaround this original issue with this hack-patch but i still get that fail... perhaps its a bad assert something unrelated Index src java org apache lucene index codecs preflex PreFlexFields.java src java org apache lucene index codecs preflex PreFlexFields.java revision 1188010 src java org apache lucene index codecs preflex PreFlexFields.java working copy -711 7 711 12 else getTermsDict .seekEnum termEnum term true - skipNext true if internedFieldName hackedy-hack we aren t actually positioned yet skipNext false else skipNext true unicodeSortOrder sortTermsByUnicode ok here s a patch... all tests pass now. The assert fail in the writer was a bad assert we previously had If there is a field named empty string then we will get 0 on this comparison yet it s OK . But it s not OK if two different field numbers map to the same name. if cmp 0 lastFieldNumber -1 return cmp which is nice but it doesn t cover the case of empty term PLUS empty string Term . in this case we would fall thru and return 0 which is wrong. oops wrong patch. here is the correct one I will add an additional test to 3.x for Term and see if it has any bad asserts like this and add it to the patch. There are more serious problems in 3.x here. if you create new Field you get IllegalArgumentException from Field s ctor name and value cannot both be empty But there are tons of other ways to index an empty term for the empty field for example initially make it garbage then .setValue or via tokenstream . If you do this and you have assertions enabled you will trip the same assert bug i fixed in trunk here. If you don t have assertions enabled you will create a corrupt index test terms freq prox...ERROR term docFreq 1 num docs seen 0 num docs deleted 0 So we need to figure out what the semantics should be for 3.x. is Term allowed or not I think the hack is actually correct but maybe change it to check termEnum.position 0 So this was a case we missed from LUCENE-3183 maybe there are more where we decided for the corner case of empty field and term text the caller must handle that the returned enum is unpositioned in exchange for not adding an if per next . And maybe add the same comment about LUCENE-3183 on top of that logic Patch putting back the safer-but-if-per-scan from LUCENE-3183 this fixed another test failure. 1 i m running the tests a lot this seems solid. I committed this thanks Mike Now to figure out wtf to do for 3.x... I m gonna close this issue and open a separate issue for Term on 3.x...
