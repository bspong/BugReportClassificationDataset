Incorrect usage of AttributeSource.addAttribute getAttribute leads to failures when onlyUseNewAPI true
when seting use only new API for TokenStream i received the following exception junit Caused by java.lang.IllegalArgumentException This AttributeSource does not have the attribute interface org.apache.lucene.analysis.tokenattributes.TermAttribute . junit at org.apache.lucene.util.AttributeSource.getAttribute AttributeSource.java 249 junit at org.apache.lucene.index.TermsHashPerField.start TermsHashPerField.java 252 junit at org.apache.lucene.index.DocInverterPerField.processFields DocInverterPerField.java 145 junit at org.apache.lucene.index.DocFieldProcessorPerThread.processDocument DocFieldProcessorPerThread.java 244 junit at org.apache.lucene.index.DocumentsWriter.updateDocument DocumentsWriter.java 772 junit at org.apache.lucene.index.DocumentsWriter.updateDocument DocumentsWriter.java 755 junit at org.apache.lucene.index.IndexWriter.updateDocument IndexWriter.java 2613 However i can t actually see the culprit that caused this exception suggest that the IllegalArgumentException include getClass .getName in order to be able to identify which TokenStream implementation actually caused this Have a proposed patch Doesn t look easy - I don t think AttributeSource is necessarily attached to any TokenStream - so you would have to trap it lower and rework the exception. I don t see the clean path for this myself. Though I certainly agree with its use. Looked a little closer on this and it looks like if the root TokenStream does not addAttribute for all attributes expected by the indexer this exception occurs I suppose if the Indexer called addAttribute instead of getAttribute this wouldn t happen attributes not provided by TokenStream but required by Indexer would be initialized at index time and would remain empty Updated getAttribute on AttributeSource as follows to find the source of my pain The caller must pass in a Class lt extends Attribute gt value. Returns the instance of the passed in Attribute contained in this AttributeSource throws IllegalArgumentException if this AttributeSource does not contain the Attribute public AttributeImpl getAttribute Class attClass AttributeImpl att AttributeImpl this.attributes.get attClass if att null throw new IllegalArgumentException getClass .getName does not have the attribute attClass . return att I see that this could end up being an arbitrary org.apache.lucene.util.AttributeSource though if you aren t fully integrating the new api Gotchya - in the summary it said you were looking for the TokenStream rather than the AttributeSource. I didn t follow that you could figure that out by knowing the AttributeSource impl name. In principle you should always use addAttribute when consuming a TokenStream if the attribute is unknown it will be created empty - no problem. MostLucene-internal code uses it in that way. getAttribute is currently only used for very special cases e.g. in tests to check if an attribute was really added . But there seems to be one relict of getAttribute in the code. To fix this bug I should replace the getAttribute call in the indexer by addAttribute . I will provide a patch for that. If you have an unknown TokenStream instance you will never know which of the attributes are really used. If you want to optimize this you could check before if the attribute is really used and e.g. exclude some code paths with very complicated calculations based on these missing attributes. I will also add an JavaDoc comment for this. The more helpful error message is in my opinion not needed because you cannot find out which of the filter stream in the chain is missing the attribute because all in the chain use the same Attribute instances. I agree that a more helpful error message may not be so helpful i refactored all my code to use the same new AttributeSource for all TokenStreams for the same Document anyway so all it would tell me is AttributeSource missing parameter Attached is a first patch that fixes the wrong getAttribute calss without checking if the attribute is available. For testing I added a system property to LuceneTestCase TokenStream.onlyUseNewAPI that can be set to true. When I have done this and explicitely excluded some tests like the deprecated Tee Sink test and the extra backwards test using this switch especially Highlighter fails because of assuming that all Attributes are always there. With onlyUseNewAPI false the tests pass because the used Attribute Impl is Token which implements all attributes. There is still one test TestMappingCharFilter using TokenStream.next which I fix tomorrow to use incrementToken. I am currently thinking about testing all affected tests automatically two times with both settings. Maybe I add a special LuceneTestCase subclass that runs all tests two times. All test depending on TokenStreams like the indexer should simply subclass this special class. For the beginning the system property is ON. I added it to common-build as true for testing. How do I pass the command line parameters from ant itsself to the underlying tests New patch that fixes also the two failing tests by setting onlyUseNewAPI to false for them. I will now create a new LuceneTestCase subclass that tries tests with old and new api automatically. Here is my idea for testing both apis of TokenStreams. All testcases that should tests both the backwards layer using Token instances and only the new API this are all analyzer tests TestIndexWriter highlighter and query parser test and a few more should subclass this class instead of LuceneTestCase. Here a new patch The default LuceneTestCase uses onlyUseNewAPI false which is the default . Some tests were rewritten to use a special TestCase superclass see previous file but updated in this patch that runs all tests two times with this flag enabled and disabled. I converted all core analyzer tests DocumentsWriter and the likely failing highlighter queryparser and memory index tests. I will commit this later if you like the possibility to run several tests two times with backwards layer enabled and not. The new base test case has now support to only run the tests twice for a Set of test names. I will commit this now. Committed Revision 806844
