Merge UUID to NodeId
The current NodeId class is mostly just a wrapper around UUID which causes two objects to be instantiated for each node identifier that the system uses. The memory and processing overhead is quite small but given that there are tons of NodeId instances it would be good to eliminate that overhead. There is also lots of code that just converts UUIDs to NodeIds and vice versa. We could simplify such code if we just used NodeId everywhere. Also we might want to open up the possibility of using non-UUID node identifiers at some point in future so it would make a lot of sense to remove the NodeId.getUUID method and rely directly on NodeId and it s equals hashCode and toString methods in many places where we currently use UUIDs.Attached a patch that merges NodeId and UUID. The patch is pretty straightforward and should cause no functional changes but given the size of the patch and the central role of NodeId I wanted to put the patch up for review before committing it. The main potential concerns that I could think of are the changed serialization format of NodeId and the removed SessionImpl.getNodeByUUID UUID method. All of our persistence managers use a custom serialization mechanisms so the change in the Java serialization format of NodeId should not cause problems. I removed the SessionImpl.getNodeByUUID UUID method since we already have the standard Session.getNodeByUUID String and the internal SessionImpl.getNodeById NodeId methods that should cover all use cases. If someone wants I can restore the method signature with a deprecation mark. 1The name UUID is currently used by some central components for example persistence managers . To simplify migration what about - Create a interface UUID a interface - Let NodeId implement UUID the interface - Merge NodeId and UUID the class like you did - UUID NodeId.getUUID return this What do you think ThomasThomas Create a interface UUID a interface I like the idea but it would change also jackrabbit-jcr-commons instead of just jackrabbit-core. Also I really prefer to get rid of the NodeId.getUUID method so we ll have easier time refactoring NodeIds in the future if we need to.If needed we could keep the getUUID method around as a deprecated one for 1.4 assuming we want to apply this change for 1.4 . Something like this should do the trick            deprecated           public UUID getUUID         return new UUID msb lsb      nice 1 for jukka s patch public UUID getUUID return new UUID msb lsb That would be a solution however return this would mean no overhead . change also jackrabbit-jcr-commons instead of just jackrabbit-core. The title suggest you want to merge the classes UUID and NodeId and I fully agree that would be great. But now I understand you want to copy paste the source code Sorry I really prefer having only one copy of the UUID code. It doesn t matter to me in what class that is but copying the source code is not an option for me that would be -1. Sorry I really prefer having only one copy of the UUID code. It doesn t matter to me in what class that is but copying the source code is not an option for me that would be -1. I was contemplating removing or deprecating the UUID class but it being a jackrabbit-jcr-commons class I m not sure how widely it is used outside jackrabbit-core. In any case I think the duplication of code in this case is really trivial the most complex parts I m duplicating are two if statements and a number of trivial bit shifts so I think the benefits should outweight concerns over duplication.Hmm a nice alternative We should in fact be making NodeId an interface and have an implementing class that extends UUID     public class UUIDNodeId extends UUID implements NodeId ... That should also nicely open the door for potential future non-UUID node identifiers. I ll come up with a patch for this. public class UUIDNodeId extends UUID implements NodeId ... Cool Or just NodeId extends UUID but having a NodeId interface is probably even better . 1 for this public class UUIDNodeId extends UUID implements NodeId ... I don t like this approach. Today we don t have a reason to introduce an interface for NodeId and I would rather stay away from it as long as possible. Otherwise we ll probably run into issues when it comes to equals methods - Is a UUIDNodeId equal to a UUID instance which contains the same value What about the other way around - What about other implementations of NodeId. Well basically the issues described by Joshua Bloch in Effective Java Item 7 Obey the general contract when overriding equals .In my view duplicating source code is worse than adding an interface but NodeId extends UUID would be a solution as well. Is a UUIDNodeId equal to a UUID instance which contains the same value What about the other way around I don t think the current situation is much different. NodeId equals should return false when comparing with any other class. Similar to Short.equals One could argue the equals should return true when comparing with Short 1 with Integer 1 but it does not     public boolean equals Object obj if obj instanceof Short return value Short obj .shortValue return false      If getUUID is used by applications then I would say a behavior like the following is necessary at least for the near future in order not to break them. deprecated public UUID getUUID return new UUID msb lsb If not the docs should say how to replace its functionality.while i do share tom s concerns regarding code duplication in general i don t care about code duplication in this particular case as it s only minimal and the benefits are obvious at least for me . therefore in the light of the previous comments still 1 for jukka s original patch.What about this public interface ItemId   boolean denotesNode public class PropertyId implements ItemId... public class NodeId extends UUID implements ItemId... Here is the patchsorry I named my patch the same as you did. Mine is the shorter one.To cope with the existing code shouldn t be public interface ItemId extends Serializable ItemId extends Serializable Yes sorry I forgot that. Also I didn t test the patch yet. My patch can be combined with Jukkas patch of course - the advantage is the improved backward compatibility.Both patches have their own disadvantages - Jukka s patch is slower more temporary objects and copies source code. - My patch is faster and avoids copying source code but it may not be as architecturally sound. I can live with Jukkas patch as long as there it is fully backward compatible as long as the UUID class is still available and as long as NodeId.getUUID is still supported . So I take back my -1 and vote 0 - ThomasI have now merged all UUID functionality to the NodeId class.
