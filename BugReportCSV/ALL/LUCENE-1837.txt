Remove Searcher from Weight explain
Explain needs to calculate corpus wide stats in a way that is consistent with MultiSearcher. Mark I did not follow that changes can you gimme a pointer to it Would be easier to track later too. - Just for the record. thanks The original mistake was in LUCENE-1066 - I don t think that should have been done. It didn t work as you can see by LUCENE-1087 The issue got worse when we went to per segment. We attempted to fix in LUCENE-1771 but we just made the old faulty behavior doable again and added cruft to the API that will encourage further abuse. Its possible that like being discussed in LUCENE-1821 we could pass the IndexSearcher here with approp warnings. Then perhaps even the output in TermWeight could be modified to indicate its per IndexSearcher rather than universal instead of removing. I don t feel strongly either way. Anyone have any comments objections I ll hold off until we resolve LUCENE-1821 in any case. So Mark this will revert LUCENE-1771 Ie no longer pass in the top searcher to weight.explain It won t revert the whole issue. Weight still an abstract class the sub reader with the doc still the reader passed rather than top level reader. The only revert Because TermWeight tried to take index level stats from the reader we passed that searcher to make the TermWeight explain behavior like it was when we passed top level reader - its the only place its used currently. But thats illegal now and it was illegal before. You cannot count on having access to the entire index through a Searcher - else we break MultiSearcher and remote use. So passing that Searcher is a recipe for illegal abuse. Same with the other issue Tim brought up - though if we end up passing an IndexSearcher there with all kinds of warnings to abuse at your own peril - I guess we could here. I m not sure I like it because we encourage code that doesn t work correctly with MultiSearcher. I think if we wan t to go down that road we should probably try to move away from support remote and multisearcher. It won t revert the whole issue. OK got it. Because TermWeight tried to take index level stats from the reader we passed that searcher to make the TermWeight explain behavior like it was when we passed top level reader - its the only place its used currently. PhraseQuery also prints the top-level docFreq for each term in the phrase. You cannot count on having access to the entire index through a Searcher - else we break MultiSearcher and remote use. I agree so our fix in LUCENE-1771 doesn t work w MultiSearcher. So we definitely need to do something here... The thing is it s useful for TermQuery s explain to print out the docFreq maxDoc right This was the original motivation of LUCENE-1066 . But it has to be the top-level numbers not the single-segment numbers. Really the Weight should gather hold all top-level stats it needs on construction The MultiSearcher is passed on Weight construction . Really the Weight should gather hold all top-level stats it needs on construction The MultiSearcher is passed on Weight construction . Ah - good point. I ve said it before myself - index level stats should be taken from the createWeightSearcher - I just don t integrate thoughts well So that seems like the right thing to do - only thing I don t like is that this info has to be calculated by calling each Searchable in the MultiSearcher and then you likely won t ever use it - explain is generally debug stuff. I don t like that. But I guess if you want the info you gotto do what you gotto do ... I don t like is that this info has to be calculated by calling each Searchable in the MultiSearcher and then you likely won t ever use it - explain is generally debug stuff. I don t like that. But those stats are already being computed in the default Similarity impl s idf . If we improved Similarity.idf so that it returned idf docFreq and maxDoc in one go then there s no added cost right Right - I was just writing to that affect. If we can get that info back too I think we are golden. What I was writting It looks like we have to calc twice not sure about phrasequery - with that it looks like we would have to calc a bunch of info the scorer doesn t even use with termweight. We want to grab the info on the TermWeight constructor and store it. That info is already calced but we don t have access to it public PhraseWeight Searcher searcher throws IOException this.similarity getSimilarity searcher idf similarity.idf terms searcher Similiarity idf public float idf Term term Searcher searcher throws IOException return idf searcher.docFreq term searcher.maxDoc edit not sure about phrasequery - with that it looks like we would have to calc a bunch of info the scorer doesn t even use Okay we do use all of that - again the info is just all hidden behind the Similarity. So we would also want all the docFreq info from every term in public float idf Collection terms Searcher searcher throws IOException And also If a Sim didn t do those calculations and its an impl detail now how could we ask for them back If we tie them to the API impls will be required to do those calcs for explain - when they didn t need to before. Prob not a huge deal but ... If a Sim didn t do those calculations and its an impl detail now how could we ask for them back We could require only that the thing that s returned can explain itself Okay very rough patch. No concern for back compat or anything. Added place holder class public static abstract class SimExplain abstract float getIdf abstract String explain public SimExplain idfExplain Term term Searcher searcher throws IOException public SimExplain idfExplain Collection terms Searcher searcher throws IOException Removed Searcher from explain method. So I think this is the right path - still a few issues to jump through though and still some ugliness I ve left in. I m just going to revert the Searcher here - a fix for the bugs can be tracked in LUCENE-1847 Patch looks good Mark and I agree separating out explainability of idf makes sense. committed r807180
