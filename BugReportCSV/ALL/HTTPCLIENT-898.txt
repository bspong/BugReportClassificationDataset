Improve multihome support
MultihomePlainSocketFactory is basically broken and should be deprecated. Multihome logic needs to be moved to the DefaultClientConnectionOperatorHi Oleg I don t know if this is of use but is the logic I am using at the moment which is an extension of the existing DefaultMultihomePlainSocketFactory Essentially this shares the set timeout between the available A records and allows iteration through those. List InetAddress addresses new ArrayList InetAddress inetadrs.length         addresses.addAll Arrays.asList inetadrs         Collections.shuffle addresses         IOException lastEx null                  int individualTimeout timeout addresses.size                  for int i 0 i addresses.size i             InetAddress remoteAddress addresses.get i             try                 wireLog.debug Attempting to connect to remoteAddress port with timeout value of individualTimeout                 sock.connect new InetSocketAddress remoteAddress port individualTimeout                 wireLog.debug RETURNING SOCKET - sock.toString                 return sock              catch SocketTimeoutException ex                  If the last socket on the list then throw a timeout exception                 if i addresses.size -1                                      wireLog.warn Connect to remoteAddress timed out. Throwing timeout exception.                     throw new ConnectTimeoutException Connect to remoteAddress timed out                                  else                                      wireLog.warn Connect to remoteAddress timed out. Trying next in the list.                      should we close the old socket                     sock new Socket                               catch IOException ex                  create new socket                  should we close the old socket                 sock new Socket                 wireLog.warn Connect to remoteAddress caused exception. Trying next in the list. ex                  keep the last exception and retry                 lastEx ex                                                Two comments - Please don t use Collections.shuffle on the address list. The list comes from the resolver in a given order for good reasons see RFC 3484 and randomizing it will do Very Bad Things in some situations. - The address list can potentially be very long 20 addresses . Trying to divide the timeout evenly between these addresses might not be the best thing to do. Most other libraries simply specify that timeout is done once per host tried which would probably not be unreasonable here either.FWIW the following code fragment was newly checked into Android s repository. Note that you need to deal with LayeredSocketFactory specifically or you will break SSL since SSLSocketFactory uses the given textual hostname both to figure out where to connect and for SSL hostname verification so if you just give it an IP it breaks verification . diff git a src org apache http conn scheme PlainSocketFactory.java b src org apache http conn scheme PlainSocketFactory.java index acc13f7..b15df44 100644 a src org apache http conn scheme PlainSocketFactory.java b src org apache http conn scheme PlainSocketFactory.java -35 7 35 9 import java.io.IOException  import java.net.InetAddress  import java.net.InetSocketAddress  import java.net.Socket import java.net.SocketTimeoutException   import org.apache.http.conn.ConnectTimeoutException  import org.apache.http.params.HttpConnectionParams  import org.apache.http.params.HttpParams   -113 9 115 11 public final class PlainSocketFactory implements SocketFactory           else              remoteAddress new InetSocketAddress host port           - - sock.connect remoteAddress timeout - try sock.connect remoteAddress timeout catch SocketTimeoutException ex throw new ConnectTimeoutException Connect to remoteAddress timed out          return sock         connectSocket diff git a src org apache http impl conn DefaultClientConnectionOperator.java b src org apache http impl conn DefaultClientConnectionOperator.java index 41488e1..854b2b0 100644 a src org apache http impl conn DefaultClientConnectionOperator.java b src org apache http impl conn DefaultClientConnectionOperator.java -44 7 44 9 import org.apache.http.protocol.HttpContext  import org.apache.http.conn.HttpHostConnectException  import org.apache.http.conn.OperatedClientConnection  import org.apache.http.conn.ClientConnectionOperator import org.apache.http.conn.ConnectTimeoutException  import org.apache.http.conn.scheme.LayeredSocketFactory import org.apache.http.conn.scheme.PlainSocketFactory  import org.apache.http.conn.scheme.Scheme  import org.apache.http.conn.scheme.SchemeRegistry  import org.apache.http.conn.scheme.SocketFactory -67 6 69 7 import org.apache.http.conn.scheme.SocketFactory  public class DefaultClientConnectionOperator      implements ClientConnectionOperator   private static final PlainSocketFactory staticPlainSocketFactory new PlainSocketFactory         The scheme registry for looking up socket factories.      protected SchemeRegistry schemeRegistry -121 19 124 55 public class DefaultClientConnectionOperator            final Scheme schm schemeRegistry.getScheme target.getSchemeName          final SocketFactory sf schm.getSocketFactory final SocketFactory plain sf final LayeredSocketFactory layered sf if sf instanceof LayeredSocketFactory plain sf staticPlainSocketFactory layered sf LayeredSocketFactory sf else plain sf sf layered sf null InetAddress addresses InetAddress.getAllByName target.getHostName   - Socket sock sf.createSocket - conn.opening sock target for int i 0 i addresses.length i Socket sock plain sf.createSocket conn.opening sock target   - try - sock sf.connectSocket sock target.getHostName try Socket connsock plain sf.connectSocket sock addresses i .getHostAddress                      schm.resolvePort target.getPort true if layeredsock sock conn.opening layeredsock target prepareSocket layeredsock context params conn.openCompleted sf.isSecure layeredsock params else prepareSocket sock context params conn.openCompleted sf.isSecure sock params break catch ConnectException ex if i addresses.length - 1 throw new HttpHostConnectException target ex catch ConnectTimeoutException ex if i addresses.length - 1 throw ex           - prepareSocket sock context params - conn.openCompleted sf.isSecure sock params       openConnection     I cannot find these changes in the master branch http android.git.kernel.org p platform external apache-http.git a summary I would be a shame if Google patched their own version of HttpClient which is a very old pre-BETA snapshot effectively creating a fork instead of submitting them upstream. OlegIt s not in the public git tree yet but it will be. I m not entirely sure what you mean by instead of submitting them upstream the patch is right there in my comment I did not realize you were with Google. My bad. I should have looked at your profile. 1 Do you happen to know if Andoid project has any plans of syncing their code line to the official HttpClient 4.0.x branch at some point of time 2 As far your patch is concerned it does solve the problem. However I would prefer a more radical but somewhat cleaner approach. I am thinking about deprecating the actual SocketFactory and LayeredSocketFactory interfaces and all implementing classes and replacing them with similar interfaces that are multihome capable public interface SocketFactory     Socket createSocket throws IOException     Socket connectSocket         Socket sock         String hostname         InetAddress removeAddress         int port         InetAddress localAddress         int localPort         HttpParams params      throws IOException UnknownHostException ConnectTimeoutException     boolean isSecure Socket sock throws IllegalArgumentException Alternatively we could introduce a optional interface for multihome support which would be slightly uglier but would allow us to continue using all old interfaces and classes. What would be your preference OlegIn general I don t work on Android I m working on IPv6 and this patch is mainly to improve the IPv6 support so I can t really speak for the Android team on that side. As far as I ve understood though breaking API compatibility will be problematic userspace applications depend on these APIs . I d assume you already have contacts within the Android team with which you can discuss these issues If not I can try digging up some addresses if you want.This change will not result in API breakage. All deprecated code will still be in place. And yes it would be great to have a contact person on the Google side. I used to stay in contact with Bob Lee for such matters but he stopped answering my emails some time ago. OlegOleg I m Bob s successor on the Android team. If you ve got questions about our use of the HTTP client code I ll do my best to answer em. I regret that we haven t given this code much attention lately that said I m happy that it hasn t really needed it. Steinar I committed your patch to the 4.0.x branch in case Google decided to sync up its version with the ASF code line. Please review http svn.apache.org viewvc rev 930190 view rev I will be working on a somewhat less hacky fix for the 4.1 release. OlegI refactored socket factory API in the SVN trunk. Old socket factory interfaces are now deprecated in favour of new ones that are better suited for dealing with multihome hosts. HttpClient remains API binary compatible with 4.0. Feel free to review and give feedback. http svn.apache.org viewvc rev 931624 view rev OlegFixed in SVN trunk and 4.0.x branch. Oleg
