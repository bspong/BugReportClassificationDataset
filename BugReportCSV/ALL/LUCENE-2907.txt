automaton termsenum bug when running with multithreaded search
This one popped in hudson with a test that runs the same query against fieldcache and with a filter rewrite and compares results However its actually worse and unrelated to the fieldcache you can set both to filter rewrite and it will still fail. by printing seeks its easy to see its not related to automaton. i created files per-segment printing the seeks and what the terms enum hands back ... here s the diff so when it fails automaton seeks to seek 7f 2f e6 8c b0 ce 8d d2 8b cb ae f4 84 b2 a2 and the termsenum skips over a large portion of the terms and returns the wrong result. here are the two files that I diffed but note this isnt the only segment that had wrong seeks... its just an example here s my patch to make the test more easily to reproduce it simply runs the exact same query against the same index over and over again until it pops Also it logs the seeks to the files because otherwise its too much to try to look at. just use the original commandline to reproduce ant test -Dtestcase TestFieldCacheRewriteMethod -Dtestmethod testRegexps -Dtests.seed 4072768173808710270 -6218549422363059201 -Dtests.multiplier 3 Have you found out what happens or where a thread-safety issue could be Each thread and each query should have its own TermsEnum Is there maybe a cache on codec-level involved At least there are no multiple-instance static caches in the search-side of the TermsEnums so there must be a multi-threading issue in the underlying SegmentReaders. To conclude At least Robert found out that FieldCacheTermsEnum always works correct Is this true The information on this issue is too small there seems to be lots of IRC GTalk communication in parallel. Have you found out what happens or where a thread-safety issue could be Yes i found the bug... unfortunately it is actually my automaton problem I will create a nice patch today. The information on this issue is too small there seems to be lots of IRC GTalk communication in parallel. what do you mean mike was working a long time on the bug but quickly had to stop working on it so he emailed me all of his state. I took over from there for a while and i opened this issue with my debugging... though I didn t have much time to work on it yesterday only like 1 hour because I already had plans. I tried to be completely open and dump all of my state debugging information brainstorming on this JIRA issue but it only resulted in me reporting misleading and confusing information... so I think the information on this issue is actually too much A bug in automaton that only hapoens in multi-threaded So its the cache there in combination with other things. in my opinion the problem is the cache in getNumberedStates. But the real solution in my opinion is to clean up all this crap so the termsenum only takes a completely immutable view of what it needs and for the Query to compile once in its ctor and remove any stupid caching. So this is what I am working on now. Yes the numbered states cache was always bugging me. But at least it is now synchronized it was not even that at the beginning . I think the problem may be that the parallel queries doing different segments with different numbered states at the same time. 1 to remove the cache and calculate on ctor then its really stateless editing description so its not confusing sorry attached is a patch. I removed all the transient synchronized stuff from the query. Instead AutomatonTermsEnum only takes an immutable compiled form of the automaton essentially a sorted transitions array . the query computes this compiled form or any other simpler rewritten form in its ctor. here s the same patch but cleaned up a bit e.g. making some things private final etc patch looks good - just being super picky you don t need all the this.bla in CompiledAutomaton I am not sure if CompiledAutomation is a good name since it is not really an automaton is it simon I am not sure if CompiledAutomation is a good name since it is not really an automaton is it it is a compiled form of the automaton... and it is a dfa mathematically. At the end of the day this CompiledAutomaton is an internal api we can change its name at any time. Committed revision 1067720. Thanks really nice now
