improve test coverage of multi-segment indices
Simple patch that adds a test-only helper class RandomIndexWriter that lets you add docs but it will randomly do things like use a different merge policy scheduler flush by doc count instead of RAM flush randomly so we get multi-segment indices but also randomly optimize in the end so we also sometimes test single segment indices . Attached patch. I only cutover TestRegexpRandom2 for starters... thanks I ll apply this logic to a few other multitermquery tests i am familiar with and upload a new patch. ok hopefully this is just my screwup but just in case i want to get uwe or someone to confirm I started converting some test cases to use this and got some failures in TestNumericRangeQuery64 junit Testsuite org.apache.lucene.search.TestNumericRangeQuery64 junit Testcase testRange 8bit org.apache.lucene.search.TestNumericRangeQuery64 FAILED junit Distinct term number is equal for all query types expected 494 but was 493 junit junit.framework.AssertionFailedError Distinct term number is equal for all query types expected 494 but was 493 junit at org.apache.lucene.search.TestNumericRangeQuery64.testRange TestNumericRangeQuery64.java 159 junit at org.apache.lucene.search.TestNumericRangeQuery64.testRange 8bit TestNumericRangeQuery64.java 167 ... junit Standard Output junit NOTE random static seed of testclass testRange 8bit was 7879034790334081579 to reproduce just plug in the seed to the beforeClass method Random random newStaticRandom TestNumericRangeQuery64.class 7879034790334081579L OK this was just my stupidity... the assertion here MTQ s getTermCount isnt valid for a multi-segment constant score rewrite case so i conditionalized the assert. here is the current progress i only converted a few more tests over but added more randomness to randomIW random codec compound file tii etc this caused a test fail in numericrange64... unfortunately it was an exception in another thread and we arent printing the random seed in this case... i need to fix this. ill upload the stacktrace separately stacktrace file here is an updated patch with a lot more tests converted over. the previous problem was just a bad assertion thanks Mike But this one has a new problem i angered spans.TestBasics somehow use seed 7669636241779895237L will try to debug it later feel free if you have ideas. here s the final patch... I got a good chunk of o.a.l.search tests converted over. I think I am sick of this now we can convert more later. I plan to commit soon... and try to merge to 3x Looks great Robert 1 to commit Committed revision 963720 to trunk. I ll work on the merge to 3x sure it will be completely smooth Committed revision 963780 to 3x Bulk close for 3.1
