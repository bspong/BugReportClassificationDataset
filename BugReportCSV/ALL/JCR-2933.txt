SQL2 Left Outer Join
Create this nodes. def n1 root.addNode node1 sling SamplePage n1.setProperty n1prop1 page1 def n2 n1.addNode node2 sling SampleContent n2.setProperty n2prop1 content1 Execute this Query Select from sling SamplePage as page left outer join sling SampleContent as content on ISDESCENDANTNODE content page where page.n1prop1 page1 and content.n2prop1 content1 The resultset have 1 row with 2 Nodes. This OK. Then execute this Select from sling SamplePage as page left outer join sling SampleContent as content on ISDESCENDANTNODE content page where page.n1prop1 page1 and content.n2prop1 XXXXX The resultset has 1 row with 1 node. This wrong. The result should be 0 rows. Old Versions prior 2.2.2 have also 0 rows as result. Also if nodes n2 not exists jackrabbit reports 1 row as result. This is the correct behaviour for a left outer join. The previously incorrect behaviour was fixed in Jackrabbit 2.1.2 as a part of JCR-2718.As discussed on users this actually is a problem. The join should only look at the join condition not the where clauses.Attached patch test that replicates the indicated and hopefully fixed problem. The solution consists of  - in the case where there is an Outer Join with a WHERE condition we ll run 2 queries in lucene one that has only the ON condition from the join and the other one that has ON and WHERE . This way it is easy to distinguish between a null row and a row that must not be included in the result set. I haven t tested in other scenarios than a 2 way Outer Join this is also indicated by the test. If you feel that there are corner cases that are not covered please let me now or even better submit a patch to the test this way we can keep track of these things. Can you check this testcase. It gives me 1 row. This is not correct. The property prop1 from the first two nodes have the same value. def n1 root.addNode node1 test SamplePage n1.setProperty prop1 page1 def n2 root.addNode node2 test SamplePage n2.setProperty prop1 page1 def n3 n1.addNode node3 test SampleContent Select from test SamplePage as page left outer join test SampleContent as content on ISDESCENDANTNODE content page where page.prop1 page1 and content.prop1 XXX yes Manfred you are right I fixed it and added the new testcase. Attaching the new version of the patch.oups I seriously forgot some System.out s in there here s the proper version of the fix.I m not sure if the proposed solution always works specially for 3 way joins. I think there should be a randomized test case that compares the result with a relational database. I wrote such a test case it could be adapted to SQL2 http code.google.com p h2database source browse trunk h2 src test org h2 test synth TestNestedJoins.java - this test case found quite a lot of problems including problems in Apache Derby DERBY-4712 - therefore it probably makes sense to run the test against other databases as well. I think the most stable database is PostgreSQL but we can t include it in our unit tests. Therefore I would pick H2 and Apache Derby meaning run the test against Jackrabbit H2 Derby and compare the results .wow as impressive as that is I m not even sure that is within JR s capabilities. Can you please submit a test that does a proper 3 way join to have something to look at I d like to see a simple test case working or breaking before we start doing something like ... select t0.x t1.x t2.x t3.x t4.x t5.x t6.x t7.x t8.x from t0 inner join t1 right outer join t2 inner join t3 on t2.x t3.x on t1.x t2.x left outer join t4 inner join t5 on t4.x t5.x on t1.x t4.x on t0.x t2.x left outer join t6 inner join t7 on t6.x t7.x on t1.x t6.x inner join t8 on t5.x t8.x ... As I see it join are something new in JR so I wouldn t go breaking everything just yet. There are also very few test cases that cover them. I find it worrying that the simple outer join 2 way if you will does not work properly. Also I d have that working and mark the 3 way up as experimental than having something that does not work at all. mark the 3 way up as experimental than having something that does not work at all. That s an option but then it should be documented. There are also very few test cases I find it worrying that the simple outer join 2 way if you will does not work properly. Yes that s why I think we should add more test cases - I m not even sure that is within JR s capabilities. I know Jackrabbit doesn t support explicitly nested joins using but nesting can be influences with placing the join condition SELECT FROM c LEFT OUTER JOIN a LEFT OUTER JOIN b ON ISCHILDNODE a b ON ISCHILDNODE a c SELECT FROM c LEFT OUTER JOIN a LEFT OUTER JOIN b ON ISCHILDNODE a b ON ISCHILDNODE a c and SELECT FROM a LEFT OUTER JOIN b ON ISCHILDNODE a b LEFT OUTER JOIN c ON ISCHILDNODE a c SELECT FROM a LEFT OUTER JOIN b ON ISCHILDNODE a b LEFT OUTER JOIN c ON ISCHILDNODE a c The next errorcase. The result from this query is 0. should be 2. def n1 root.addNode node1 test SamplePage n1.setProperty prop1 page1 def n2 root.addNode node2 test SamplePage n2.setProperty prop1 page2 def n3 n1.addNode node3 test SampleContent n3.setProperty prop1 content3 def n4 n2.addNode node4 test SampleContent n4.setProperty prop1 content3 sql Select from test SamplePage as page left outer join test SampleContent as content on ISDESCENDANTNODE content page where page.prop1 page1 and content.prop1 content3 or page.prop1 page2 and content.prop1 content3 Have you ever tested with more as 3 nodes if the left side have many rows the performance is very poor. Hi Manfred you are really devoted to this issue thank you for putting in the time. Here I think you might have hit a nice usecase for JCR-2852. A join with an OR condition didn t use to work 3 weeks ago I guess you could say is it still undergoing bugfixes and tests I ll look at this some more see what I can come up with. In the mean time I think you ll find that this query works select from test SamplePage as page left outer join test SampleContent as content on ISDESCENDANTNODE content page where page.prop1 page1 or page.prop1 page2 and content.prop1 content3 As you are referencing both sides of the join on both OR conditions this will never give you the performance you are apparently seeking. Talking about performance there are other pending issues that deal with certain aspects of SQL2 that are not up to speed. And as this is a tricky issue to tackle at best please refrain yourself from saying things like ... Have you ever tested with more as 3 nodes if the left side have many rows the performance is very poor. ... this does not help anybody especially when you are putting a thing like performance on the table. Performance does not come OOTB and if you eve have questions or need help with anything just ask on the list there are plenty of people willing to help. Hello Alex. I see the Sql2 is far from usuability. My Customer-Application has an Query Generator this highly depends on SQL2. I have this implemented some time ago with jackrabbit 2.0.0. With the old sql2. This worked but very slow. In the lasttime then i haved patched the old Sql2-Implementierung A bit hackish but this works much more better as the new implementierung.   Now i was just about to go with the mainstream and use the new implementation but i have not so much hope that this will work.   No answer Hi Manfred finally an answer I m attatching a new version of the patch that includes the upgraded version of JCR-2852 also. I ve also added a test for the latest problem testOuterJoinDoubleJoinSplit . Some performance things you should consider sometimes the query engine will split a given query into more subqueries that will be merged at runtime. This is not really documented it is on my todo list I ve also started the work for a query debugger. To see it in action just enable debug logging for QueryEngine. ...just add this to logback-test.xml when you run a test    logger name org.apache.jackrabbit.core.query.lucene.join.QueryEngine level DEBUG ...and look at the log target jcr.log . I ve had to time to look at tests for 3 way joins. that will be next I guess.man am I happy we have tests thanks jukka for keeping an eye on thingsThanks I committed the latest patch in revision 1092683. I assumed the truetrue was a typo and removed it. - I m resolving this as fixed. Let s use followup issues for any further fixes and other improvements.Merged to 2.2 branch in rev 1126536 and 1126527 child issue 
