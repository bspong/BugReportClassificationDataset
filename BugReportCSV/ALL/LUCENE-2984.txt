Move hasVectors hasProx responsibility out of SegmentInfo to FieldInfos
Spin-off from LUCENE-2881 which had this change already but due to some random failures related to this change I remove this part of the patch to make it more isolated and easier to test. Attaching my current state. This patch moves all responsibility for hasVectors hasProx out of SI into FIs. I also added some transactional code to FI that resets the FI storeTermVector for a field if the TermVectors creation for that FI in the current segment has not successful. http www.selckin.be trunk-2984-patched.txt here is a new patch that should fix selckins failur. I added javadoc some comments and TODOs to remove the hasProx hasVector flags once we don t need to support it anymore. I also added a testcase for the vector flags in the exception case. new patch I was running tests with the previous patch and tripped a very nifty exception. junit Testsuite org.apache.lucene.store.TestLockFactory junit Testcase testStressLocksNativeFSLockFactory org.apache.lucene.store.TestLockFactory FAILED junit IndexWriter hit unexpected exceptions junit junit.framework.AssertionFailedError IndexWriter hit unexpected exceptions junit at org.apache.lucene.store.TestLockFactory. testStressLocks TestLockFactory.java 164 junit at org.apache.lucene.store.TestLockFactory.testStressLocksNativeFSLockFactory TestLockFactory.java 144 junit at org.apache.lucene.util.LuceneTestCase LuceneTestCaseRunner.runChild LuceneTestCase.java 1282 junit at org.apache.lucene.util.LuceneTestCase LuceneTestCaseRunner.runChild LuceneTestCase.java 1211 junit junit junit Tests run 11 Failures 1 Errors 0 Time elapsed 7.092 sec junit junit Standard Output junit Stress Test Index Writer creation hit unexpected IOException java.io.FileNotFoundException u.fnm junit java.io.FileNotFoundException u.fnm junit at org.apache.lucene.store.MockDirectoryWrapper.openInput MockDirectoryWrapper.java 386 junit at org.apache.lucene.index.FieldInfos. init FieldInfos.java 273 junit at org.apache.lucene.index.SegmentInfo.loadFieldInfos SegmentInfo.java 264 junit at org.apache.lucene.index.SegmentInfo.getFieldInfos SegmentInfo.java 315 junit at org.apache.lucene.index.SegmentInfo.files SegmentInfo.java 603 junit at org.apache.lucene.index.SegmentInfos.files SegmentInfos.java 873 junit at org.apache.lucene.index.IndexFileDeleter CommitPoint. init IndexFileDeleter.java 625 junit at org.apache.lucene.index.IndexFileDeleter. init IndexFileDeleter.java 199 junit at org.apache.lucene.index.IndexWriter. init IndexWriter.java 830 junit at org.apache.lucene.store.TestLockFactory WriterThread.run TestLockFactory.java 283 junit Stress Test Index Writer creation hit unexpected IOException java.io.FileNotFoundException u.fnm junit Standard Error junit NOTE reproduce with ant test -Dtestcase TestLockFactory -Dtestmethod testStressLocksNativeFSLockFactory -Dtests.seed 9223296054268232625 -7758089421938554917 junit NOTE test params are codec RandomCodecProvider content MockFixedIntBlock blockSize 1397 locale ar MA timezone Indian Antananarivo junit NOTE all tests run in this JVM junit TestDateTools Test2BTerms TestAddIndexes TestFilterIndexReader TestIndexWriterExceptions TestIndexWriterMerging TestMaxTermFrequency TestParallelReaderEmptyIndex TestParallelTermEnum TestPerSegmentDeletes TestPersistentSnapshotDeletionPolicy TestSegmentReader TestStressAdvance TestConstantScoreQuery TestDateFilter TestDateSort TestDocIdSet TestNot TestPrefixQuery TestSetNorm TestTopScoreDocCollector TestBasics TestSpansAdvanced2 TestDirectory TestLockFactory junit NOTE Linux 2.6.37-gentoo amd64 Sun Microsystems Inc. 1.6.0 25 64-bit cpus 8 threads 1 free 136724544 total 292618240 that is caused by MockDirectoryWrapper behaving like Windows not deleting files if they are still open. So there might be a segments x file around but the x.fnm has already been deleted. That wasn t a problem before but since we now need FIs to decide if a segment is storing vectors or not this file is required. To work around this I had to add some code to IndexFileDeleter which makes me worry a little. Now I drop a commit-point if either I can t load the SIS or I can not load one of the FIs from the loaded SI. I still try to delete all files of the broken segment though but the question is if there could be cases where I should rather throw an exception in such a case. Maybe some infoStream output would be helpful here to. Any comments largely appreciated. next iteration. Since we are iterating FieldInfos to find out if we store vectors printing mergingSegments in IW registerMerge is not save anymore since a merge can update the segments FIs. I simplified that infostream output a little and made FieldInfos for new flushed segments readonly. I think we are close here so I will commit in a day or so if nobody objects Patch looks good Simon Maybe add a comment on the changes in IFD about why we also go and force-load the FIS for each segment It s sorta... spooky. Patch looks good Simon Maybe add a comment on the changes in IFD about why we also go and force-load the FIS for each segment It s sorta... spooky. ah yeah I already added a note to myself to do that - I will also add a infostream output for that. committed in revision 1102476
