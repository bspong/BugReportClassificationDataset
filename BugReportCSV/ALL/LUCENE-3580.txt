Most 4.0 PostingsReaders don t obey DISI contract
While trying to do some refactoring I noticed funky things going on with some codecs. One problem is that DocIdSetIterator says the following Returns the following ul li -1 or link NO MORE DOCS if link nextDoc or link advance int were not called yet. But most 4.0 Docs DocsAndPositionsEnums don t actually do this e.g. return 0 . instead we are relying on Scorers to cover for them which is inconsistent. Some scorers actually rely upon this behavior for example look at ReqExclScorer.toNonExcluded it calls docId on the excluded part before it calls nextDoc So we need to either fix these enums change these enums to not extend DocIdSetIterator and redefine what the actual contract should be for these enums change DocIdSetIterator or something else. Fixing the enums to return -1 here when they are uninitialized kinda sucks for the ones summing up document deltas... patch with a test and fixes for SimpleText and PreFlex but i didn t fix any of the other postings readers. updated patch fixing the other postings readers... i don t think this will hurt performance so I plan to commit soon. 1 good catch 1 thanks Robert I think DISI as basis contract for DocsEnum is a good thing so we should not remove that dependency. Same bug in termvectors reader sorry i forgot . I ll add tests for those and fix them as well actually i will reopen the issue i think we should add a check to QueryUtils to validate this for Scorers too since they are also DISIs. reopening to add tests fixes for other DISI impls Finally I think the idea to have two separate state variables is a nice fix for this I like that After the first next advance both are synchronous but the undefined state -1 for the docId is solved very elegant. for scorers i found no bugs at least in core tests... attached is my patch to AssertingIndexSearcher to check. here s a patch fixing the TV DISIs and adding tests. I think we can resolve the issue now. resolving for real this time hopefully
