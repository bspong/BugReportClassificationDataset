MultiThreadedHttpConnectionManager never reclaims unused connectons
There is no limit on the number of connections that will get created by the MultiThreadedHttpConnectionManager. Unused connections are never destroyed.Created an attachment id 5595 Fix take 1 Attached is another take on adding support for a maximum number of connections to the MultiThreadedHttpConnectionManager. This code is based upon the patch submitted by Carl Dunham. Here are some key points - the connection timeout is no longer implemented using a separate thread. instead threads use Object.wait and keep track of the amount of wait time. - unused connections are reclaimed in a LRU-like manner - an attempt is made to give connections to threads that can reuse them directly. for example if two threads are waiting for a connection the connection will be given first to the thread using the same host as the connection. - all connection access is still locked by a single monitor. I had hoped to make things a little more modular but after quite a bit of experimenting I discovered this was much harder that I had anticipated. To anyone who is interested in this functionality please take a good look at this patch. I suspect there are a few things that I am missing. Any real-world testing would be great. Thanks MikeCreated an attachment id 5710 Sample program and data This definitely works much better however now it seems that treads go off to nana land and stop taking work. The connections that they were working eventually go away so the system does not get overwhelmed like it use to but it doesn t do the work it is supposed to either. Ê I am still trying to track down exactly what is going on here as it is inconsistent. Sometimes one or two threads will keep trucking along sometimes they will all freeze up fairly soon. Ê I have attached a test program that I posted to the list awhile ago but should probably be here. It may be that there is just some sloppy coding on my part or I m missing some important point about detecting server-dropped connections or something....Created an attachment id 5718 Modified SimpleDownloader Hi Carl I have attached a modified version of SimpleDownloader. In this version I have changed the following - GetMethod creation has been changed so that it is not immediately recycled after creation - all of the hosts are now just accessed once - the threads now each print to their own log file - the HttpClient read timeout is now being set to 5000ms using HttpClient.setTimeout These changes seem to have fixed quite a few problems. I was able to run through all of the non working urls successfully. The nana threads were being caused by some servers that never respond to requests and also do not close connections. This was fixed by setting the read timeout. There are still a few things to look at. First there are a number of host connection pool not found for ... errors. Also the hosts that cause the read timeouts are valid hosts but for some reason they do not respond to HttpClient. Thoughts MikeHi Mike. Ê Well the problem is that deleteLeastUsedConnection is closing the connection and decrementing the counters doing what it should be doing except now this connection is unreferenced and subject to garbage collection. When the GC kicks in the referenceQueue is run and the counters decremented again. Somehow we have to make sure it that it only happens once. It pretty much has to happen in deleteLeastUsedConnection so that createConnection call can proceed so that means clearing the reference. Unfortunately we can only get the reference from the queue and trying to save it somewhere else could get painful. Perhaps you have an idea of how to untie this little knot... Ê Also I think this might explain why I still see hundreds of connection in netstat if for some reason the real socket isn t going away until the Java socket is GCd. Dunno. Brain hurts right now.... Ê CarlCarl Good catch. You are quite right. I remember thinking about that when working on this originally but I completely forgot about it. I will try to fix this tonight. Since WeakReference does not override hashCode and equals the only way to fix this is to iterate over the reference Map. I m not sure if there are actually as many connections open as suggested by netstat. With the current setup only 20 connections are ever open at once. I think what may be happening is that SimpleDownloader opens so many connections so quickly that it opens closes connection faster than netstat can report them. ÊSo netstat is showing all of the connections that are opened but it doesn t necessarily mean that they are still open. MikeCreated an attachment id 5757 fix take 2 This patch should take care of the GC problem. Please give it a try when you have a chance. Thanks MikeMike Ê It s working like a champ now. Thanks ÊAre there any more comments from others Oleg Jeff I will commit this one tonight if I do not hear any complaints. MikeThe patch has been applied. Many thanks to Carl for submitting the original patch and for the thorough testing. Mike
