fix reverseStringFilter for unicode 4.0
ReverseStringFilter is not aware of supplementary characters when it reverses it will create unpaired surrogates which will be replaced by U FFFD by the indexer but not at query time . The wrong words will conflate to each other and the right words won t match basically the whole thing falls apart. This patch implements in-place reverse with the algorithm from apache harmony AbstractStringBuilder.reverse0 Robert I cleaned up the patch a little and did some minor optimizations. I replace the ugly surrogatePair checks with the JDKs version. This method call will be inlined anyway I added some JavaDoc comments as well. I guess this is good to go once 3.1 is out. Is this an improvement or a bug The summary sounds kind of buggish ... Simon thanks l agree we should use these Character methods because I believe the JDK will implement them in the fastest way. bitmask for some things etc The reason it looked like this is because I copied pasted from apache harmony then edited to our needs allow char int int . Is this an improvement or a bug The summary sounds kind of buggish ... I ll try to restrain myself but I think we should have fixed unicode 4 support in lucene 3.0 because then it matches the unicode version of java 1.5 the problem is we could not do any of this in 2.9 because you need java 1.5 to actually implement most of the support so it was a chicken and egg problem. imho its all bugs but i ll list these issues as improvements I guess this is good to go once 3.1 is out. Simon I agree. One last question should we do the import static of Character. In other patches I am using Character.xxyyZZ instead. I just think we should use a consistent scheme does not matter to me which way I just think we should use a consistent scheme does not matter to me which way I agree we should rather not use the static import - its more expressive if it is explicit I will upload another patch. removed static import We will get this in once 3.0 is out. I wonder if we should add something to the changes.txt file Would make sense to me to add it to Changes in runtime behavior thoughts Due to the way this currently works taking completely valid unicode data and making invalid unicode data I am changing this to bug as Mark hinted at. This patch adds back compat for the buggy behavior with version. It is gross because there were many public static methods exposed but for example Solr is using these. btw Simon are you applying patches with Eclipse If so it will not work you need to open the patch in an editor select all copy and then apply from Clipboard. In your patch the test is corrupted the characters should be chinese... I think this is why you were confused about tests before. edit sorry simon mime-type charset issues on my side x-diff versus x-patch thing If it s really that broken for supplemental chars we don t have to support back compat right bq edit sorry simon mime-type charset issues on my side x-diff versus x-patch thing happens If it s really that broken for supplemental chars we don t have to support back compat right 1 This code is completely broken without the patch I would agree we do not need it in this case. simon Robert we can take the MatchV. Version of the patch while I still think this one should not maintain backcompatibility here as it maintains extremely broken code. I plan to commit this soon if nobody objects. simon added a CHANGES.txt entry. Will commit soon. Commited in revision 883149
