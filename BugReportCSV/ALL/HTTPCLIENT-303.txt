auto close idle connections
This has been mentioned several times on the mailing list most recently here http nagoya.apache.org eyebrowse ReadMsg listName commons-httpclient-dev jakarta.apache.org msgNo 5191 It is desirable for the http client to close it s connection after some configurable idle time. Failing to do so causes the server and every TCP resource in between to keep the socket open and possibly run out of resources under load. The HTTP 1.1 RFC has this to say under section 8.1.4 Servers will usually have some time-out value beyond which they will    no longer maintain an inactive connection. Proxy servers might make    this a higher value since it is likely that the client will be making    more connections through the same server. The use of persistent    connections places no requirements on the length or existence of    this time-out for either the client or the server.    When a client or server wishes to time-out it SHOULD issue a graceful    close on the transport connection. Clients and servers SHOULD both    constantly watch for the other side of the transport close and    respond to it as appropriate. If a client or server does not detect    the other side s close promptly it could cause unnecessary resource    drain on the network. The first sentence of the 2nd paragraph is interesting how is the client supposed to do a graceful close Does it simply mean closing the socket One possiblity may be to issue a HTTP OPTIONS request with a Connection close header.Failure to close the connection manifests itself differently depending on the server. Weblogic for example complains loudly Dec 9 2003 2 25 56 PM EST Error HTTP BEA-101083 Connection failure. java.io.IOException A complete message could not be read on socket weblogic.servlet.internal.MuxableSocketHTTP 194a955 - idle timeout 60000 ms socket timeout 30000 ms in the configured timeout period of 60 secs         at weblogic.socket.SocketMuxer TimeoutTrigger.trigger SocketMuxer.java 775 ... Mohammad This is already too late for the 2.0 release. However such a feature would be a welcome addition to the next release of HttpClient OlegCreated an attachment id 9471 example diff based off 2.0 rc2 The attachment is an example patch based off rc2. I attempted last night to convert it to work with the CVS HEAD but way too much has changed especially in the case of parameters to do it correctly and quickly. One thing in particular that I noted would be difficult is the lack of feedback when a setting is changed right now when the idle connection time changes the waiting IdleConnectionThread was notified but using the new HttpParams makes this a bit more difficult. It d be nice if settings had a way of adding PropertyChangeListeners. The attachment also makes no attempt to be generic or provide a pluggable way of manipulating connections based on various changes in their states it is essentially a proof-of-concept patch.Hi Sam Thanks for the patch. This seems to be a highly requested feature as of late. I will spend some time working on this in the next few days. Hopefully we ll have something by the time you return from vacation. MikeSam I just had a quick glance on the patch. I did not expect that the HttpConnection class had to be changed. Do you really need to know when the connection was released Is it not enough to know when it was returned to the pool In my humble opinion it s possible to handle this issue completely inside the connection manager without tampering the HttpConnection. OdiHi Odi My apogolies for the delay in this response I was touring Italy for a week or so. I highly recommend everyone spend part of their life in Venice it is truly fantastic. Anyways... HttpConnection required a small change to store the time the connection released and thus returned to the pool . It was not possible to make this change in the HttpConnectionAdapter class because the ConnectionPool in MultiThreadedConnectionManager did not access the adapter. An alternative method would have been to create another map where the key was the HttpConnection and the value was the time it was released and store this in ConnectionPool but I did not feel that adding another datastructure was worth it. It seemed that the released time was something that may have been worthwhile to other classes that use HttpConnection too. Much of the structure of the patch is going to have to change though to get it to work with the current CVS HEAD. I have no strong feelings either way about storing the release time in the HttpConnection if it seems that it can be best done elsewhere. Thanks  SamCreated an attachment id 10698 Take 2 After much delay here s a new take on this one. This patch still needs some work and a few more test cases but I think the overall design should work well. The only major question I have is in regard to HttpConnection references. The IdleConnectionHandler keeps hard references to the connections that it s holding. Normally I would be opposed to this but since they will eventually time out I think it s okay. How does everyone feel about this MikeFinally I found a little time to take a look at the patch. Somehow I can t help thinking that coupling IdleConnectionHandler with HttpConnection is not not ideal. What if one sets a ridiculously high idle timeout value Connections would be piling up in the IdleConnectionHandler unnecessarily. I would rather see IdleConnectionHandler monitor connections of just one connection manager and would rather have the IdleConnectionHandler stay alive as long as the connection manager itself stays alive. I understand your intention was to have only one dedicated thread watching over all active connections in order to conserve resources. I personally would rather prefer a little less resource efficient but slightly more elegant solution. Besides do not we encourage people to have just one HttpClient instance with just one connection manager per application do we Or maybe I just desperately need some sleep. Let me know if my rumbling makes any sense at all. If it does not I ll try to give the problem another look tomorrow morning I mean this morning Oleg Somehow I can t help thinking that coupling IdleConnectionHandler with HttpConnection is not not ideal. What if one sets a ridiculously high idle timeout value Connections would be piling up in the IdleConnectionHandler unnecessarily. Someone could certainly set an unwise timeout value but that is true for many HttpClient settings. We should ensure that the default value is good and then rely on people to not shooting themselves in the foot. I don t see the danger of having connections pile up. It may be somewhat unelegant but it at least ensures that connections are eventually cleaned up. The current alternative is to just let the connections get GCed. This method does not guarantee that the sockets are closed. As far as coupling IdleConnectionHandler with HttpConnection I m not sure how else to do it. What would you suggest I would rather see IdleConnectionHandler monitor connections of just one connection manager and would rather have the IdleConnectionHandler stay alive as long as the connection manager itself stays alive. I understand your intention was to have only one dedicated thread watching over all active connections in order to conserve resources. I personally would rather prefer a little less resource efficient but slightly more elegant solution. Besides do not we encourage people to have just one HttpClient instance with just one connection manager per application do we One IdleConnectionHandler per connection manager can be done with the current system. Since the idle handler is just a param a different one can be used per connection manager. I agree that having just one idle handler for all connection managers may not be good I also think the reverse is no better. My intention was to have a sane default behavior that supports customization. MikeMike I understand that elegancy is a matter of personal preference and is subjective so all I am trying is to see if there s another way to approach the problem which may not necessarily better or feasible at all. Important question here if tcp ip sockets stay open when java Socket instance garbage-collected or not. I believe the socket should be closed when GCed. That s why I feel I d rather have the idle connection handler hold onto connection managers than individual connections thus allowing connections to be GCed when no longer in use. All I am saying that my guts tell me that IdleConnectionManager HttpConnectionManager coupling seems to me slightly more elegant than IdleConnectionManager HttpConnection coupling. Oleg I believe the socket should be closed when GCed. Be very careful here. Sockets are not closed when GC ed. They re closed when finalized as implemented in java.net.PlainSocket . Yes the distinction is subtle but an important one. You can somewhat rely on an object being GC ed but you absolutely cannot rely on an object being finalized in a timeframe that matters . I m not sure if this is the right place to go into the details but if the statement above is not clear I ll be happy to demonstrate with a piece of code. In short I think it would be a very bad idea not to close the socket explicitly. Thanks MohMohammad You may find it shocking but to me an object may not be considered fully disposed of or garbage-collected until its finalizer has been executed. My apologies if that was not clear. OlegOleg you re correct at least according to the java language spec. Unfortunately the VM implementation seems to cause some serious issues. The following code does nothing as it should while true new Object The next piece of code however dies with an out of memory exception while true new java.util.zip.Deflater Deflater has a finalizer that frees up memory. For the life of me I can t reconcile this fact with the wording of the language spec. Sun has refused to fix the above http developer.java.sun.com developer bugParade bugs 4094554.html It s also odd that System.gc is a different call than System.runFinalization from the spec wording you wouldn t expect that . I believe this is the reason SWT component have to be disposed and don t rely on finalizers. The situation is even trickier with sockets because even after a socket is closed it has to go into TIME-WAIT. Thanks MohYes I agree the big question here is whether or not a Socket is closed when GCed. My assumption was that they are not guaranteed to be closed. I don t have any concrete information to back this up but my general impression is that some JVMs cannot be relied on to call finalize . Moh s reference to SWT seems to be a good example. Oleg in regard to the IdleConnectionManager HttpConnection coupling I am certainly interested in hearing other suggestions. Could you be more specific about about your thoughts here   MikeMike You have a perfectly valid solution to the problem so feel free to dismiss my ideas because they are based completely on personal preferences rather than on any objective good programming practices. This is how I would go about this problem What I do not quite like about the current implementation is that each connection manager needs to explicitly check connections in and out with the idle connection handler as a result the idle connection handler is coupled with the HttpConnection class the fact I tend to dislike out of my purely personal feelings At the same time there s no API that enforces a connection manager to respect this implicit contract. There s an assumption that a well behaving connection manager would do so which custom connection managers however may choose to ignore In my opinion HttpConnectionManager implementing classes appear better equipped to keep track of connection properties including how long a connection stays idle and all sorts of statistical data for instance active time versus idle time I would add a new method to the HttpConnectionManager class HttpConnectionManager closeIdleConnections int I would rather have HttpConnectionManager classes keep track of connections idle time Users would not need to always have a dedicated thread watching over connections. Some of them for instance I do I qualify as a user - would rather call closeIdleConnections once in a while from the main thread I would have an optional idle connection handler class for those who need it. It would maintain a list of connection managers it is watching over run a low priority thread and call on connection managers to close their idle connections without knowing a dang thing about what a connection is One may have multiple idle connection handlers watching over multiple connection managers without causing to much problems to one another as their coupling is very loose. There s no should be no harm in calling closeIdleConnections multiple time from multiple threads apart from the obvious performance hit I do not know if that makes any sense. If it does not I certainly will not object checking in the proposed patch OlegHi Oleg Thank you for taking the time to write such a thorough response. I have a much better idea of what you are saying and unfortunately I agree with you on a number of points I will begin work on a new patch. MikeCreated an attachment id 11272 Take 3 Here s another take on this patch. It incorporates most of Oleg s suggestions with a few changes. The most significant change it that there is no longer a thread polling for idle connections. Instead users must call HttpConnectionManager.closeIdleConnections . Please let me know what you think. MikeComments on the new patch 1 Looks like IdleConnectionHandler will have multi-threading issues the add method modifies the tree while the closeIdleConnections method is trying to iterate through the keySet. 2 I m not sure I understand why IdleConnectionHandler has a tree of lists very expensive structure as well as a hashset. Can t we handle this with just a simple list and a hashset 3 If IdleConnectionHandler.closeIdleConnections is never called will the tree structure ever get cleaned up Is there a memory leak under this condition 4 Can we add a simple utility class that implements thread and calls IdleConnectionHandler.closeIdleConnections so that everyone doesn t have to write their own Thanks Moh 1 Looks like IdleConnectionHandler will have multi-threading issues the add method modifies the tree while the closeIdleConnections method is trying to iterate through the keySet. I think it perfectly OK for IdleConnectionHandler to assume that multi-threading issues will be taken care of by the HttpConnectionManager 2 I m not sure I understand why IdleConnectionHandler has a tree of lists very expensive structure as well as a hashset. Can t we handle this with just a simple list and a hashset A tree of lists can scale much better and will be more efficient when dealing with a significant number of connections. However I think it is certainly an overkill for the simple one connection connection manager. Mike can we have something lighter for the SimpleHttpConnectionManager 3 If IdleConnectionHandler.closeIdleConnections is never called will the tree structure ever get cleaned up Is there a memory leak under this condition Mike is there any particular reason for not removing connections from the tree of lists in the IdleConnectionHandler remove method 4 Can we add a simple utility class that implements thread and calls IdleConnectionHandler.closeIdleConnections so that everyone doesn t have to write their own Agreed. A simple helper class can be quite handy Overall the patch looks very good to me Oleg 1 Looks like IdleConnectionHandler will have multi-threading issues the add method modifies the tree while the closeIdleConnections method is trying to iterate through the keySet. Yes it does not provide synchronized access. This is up to the connection manager to take care of. The multi-threaded connection manager handles this correctly and it is mentioned in the IdleConnectionHandler Javadocs. 2 I m not sure I understand why IdleConnectionHandler has a tree of lists very expensive structure as well as a hashset. Can t we handle this with just a simple list and a hashset It may be a little heavy but it works more efficiently as the number of connections increases. 3 If IdleConnectionHandler.closeIdleConnections is never called will the tree structure ever get cleaned up Is there a memory leak under this condition It will eventually get GCed if all references to it are lost. The connections are not guaranteed to be closed though. 4 Can we add a simple utility class that implements thread and calls IdleConnectionHandler.closeIdleConnections so that everyone doesn t have to write their own Sounds like a decent idea. Mike A tree of lists can scale much better and will be more efficient when dealing with a significant number of connections. However I think it is certainly an overkill for the simple one connection connection manager. Mike can we have something lighter for the SimpleHttpConnectionManager Can do. Mike is there any particular reason for not removing connections from the tree of lists in the IdleConnectionHandler remove method This is just to avoid iterating over the tree map. The map is keyed by the time added instead of the connection. Mike Created an attachment id 11297 Take 4 This one should address everyones concerns with the last patch. Please let me know what you think. Mike Yes it does not provide synchronized access. This is up to the connection manager to take care of.  Sorry about that I missed the javadoc at the top. There is however one downside to doing the synchronization at a higher level the lock is held while idle connections are being closed. In other words no new connections can be made no connections can be checked out etc while we re trying to close off old connections. Is socket.close a fast operation or can it take some time tens of milliseconds If it s slow we may have to think about this carefully. It will eventually get GCed if all references to it are lost. But all references to it are not lost my main thread holds onto the connection manager which holds onto the idle connection handler. Consider for example an HTTP proxy implemented using HttpClient the usage pattern requires lots of arbitrary connections to many different hosts. If nobody calls closeIdleConnections the tree structure will not get cleaned out and the chances of a http connection being reused are slim actually they re high for short bursts but low over the long run . Am I missing something Thanks MohHi Moh Sorry about that I missed the javadoc at the top. There is however one downside to doing the synchronization at a higher level the lock is held while idle connections are being closed. In other words no new connections can be made no connections can be checked out etc while we re trying to close off old connections. Is socket.close a fast operation or can it take some time tens of milliseconds If it s slow we may have to think about this carefully. This is true but I don t think there is much we can do about it. We need to ensure synchronized access to the connections and I think we will end up blocking one way or another. The upside is that closing idle connections should not happen happen terribly often. My feeling is that this will not be a major performance problem. Please let me know if your experience proves otherwise. But all references to it are not lost my main thread holds onto the connection manager which holds onto the idle connection handler. Consider for example an HTTP proxy implemented using HttpClient the usage pattern requires lots of arbitrary connections to many different hosts. If nobody calls closeIdleConnections the tree structure will not get cleaned out and the chances of a http connection being reused are slim actually they re high for short bursts but low over the long run . Am I missing something I guess I m not sure how this is different from the current behavior. The connection managers already hold references to all connections that they own. The idle connection handler just adds a second reference. These changes do not effect the connection life-cycle they just allow for tracking idle connections. MikeMike I have just been thinking honestly with millisecond precision what do you think is the probability of the tree node ending up containing more than one entry I d say no more than 2-3 . More than two Virtually zero. Is the tree of lists really worth the trouble What if we 1 rounded the time added precision to seconds or even decaseconds or 2 replaced the TreeMap and HashSet by a simple LinkedLink OlegCreated an attachment id 11320 Take 5 Ok this one has a simplified IdleConnectionHandler. MikeLooks good. 1 from me to commit OlegPatch applied to HEAD. MikeMike I know I have been torturing you for days with this patch but I just realized there s a small issue with the use of HashMap to store connections in the IdleConnectionHandler. What if an attempt is made to add another connection within the same millisecond This scenario is highly unlikely but not impossible. I see two ways to fix the problem 1 check if there s an entry for the given time if yes pad the current time value by one until a unique value is found 2 use a List to store objects containing the connection with its respective add time OlegHi Oleg The connections are no longer indexed by when they were added. I decided to do away with the tree map and instead am just scanning the full set of collections. Given that the idle handler is now only used in a single connection manager and that closeIdleConnections will not be called very often I think the original optimization is not really needed. MikeSilly me. I ve missed the fact that connection objects are used as the hash map keys not the time values. Oleg
