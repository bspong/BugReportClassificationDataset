Invalid redirects are not corrected
If a get is made to a page with a query argument containing a space many web servers notably including Tomcat 5 can generate a redirect in which the space in the query argument is not escaped correctly. Most browsers including IE and Firefox compensate for this by quoting any included spaces in the redirect location. Http client does not. When this broken URL is presented to a subsequent server the GET command is interprted incorrectly resulting usually in a 505. The fix is to replace spaces in redirect locations with s. This doesn t entirely fix the problem but that is the job of the web server developers.If we start to implement workarounds for all kinds of bugs that are tolerated by browsers we ll end up in hell s kitchen as a german proverb says. The solution to your problem is 1. disable automatic redirects 2. get the Location response header 3. fix anything you think should be fixed 4. generate a followup request with the fixed URL cheers   RolandI completely agree with Roland. HttpClient is not a browser. We do not compensate for wrong user input. Sanitizing user input is the domain of your application and not some library you are using. As my experience shows functions that try and guess what some malformed input could probably mean quickly become useless and source of errors. Shooting from the hip like this is not so good. I have already implemented a work-around as described in my original message. This problem is a bug in HttpClient either way you take it. Either of two cases applies - a possibly optional compensation is a good idea so that programs like HttpUnit can accurately test web sites by mimicing wide-spread behavior or - compensation is a bad thing in which case HttpClient should be checking for invalid input. I agree that this is also a bug on the part of Tomcat or more likely acegi . But that doesn t absolve HttpClient from the responsibility for checking for invalid inputs. Keep in mind that this is not user input but automatically generated input. Also the error produced is after the redirect happens and is a 505 unsupported protocol which is highly misleading. A simple check for valid location would allow HttpClient to provide an accurate and timely indication of error. Adding a validation check to the location header would certainly help in this situation. Seems reasonable. Ted a patch and test against 3.0 would go a long way to getting this issue resolved MikeTed do you mean you don t get an exception Does this only happen when an invalid URL in a Location header is encountered or when you create a new GetMethod Odi I haven t checked to see if GetMethod would throw an exception if I give it an invalid URL. Hopefully it would. What I have encountered is that when I construct a GetMethod with a valid URL and then that URL gives me a redirect with an invalid URL in the Location header field DUE TO A SERVER BUG NOT MY INPUT then I do not get an exception. Instead HttpClient dutifully submits the invalid URL to the server that handles the redirect and I get a 505 invalid protocol. The best thing for HttpClient to do would be to throw an exception when a redirect to an invalid URL happens. or even whenever access to an invalid URL is attempted . That would tell the user of HttpClient what they need to know the server gave an invalid Location field as soon as possible and as clearly as possible. The work-around that I use and which was independently suggested here can then be implemented ... disable automatic redirects and try to fix the URL by hand until the server can be corrected. I will be under water schedule-wise for the next few weeks. Otherwise I would be happy to produce a test case and a patch. When I come up for air I may be able to do it if it hasn t happened before then.If we build in this feature we must be able to switch it off through a parameter. How should we know that the server isn t capable of handling the presumably invalid redirect it sent us This change might break things that have worked before though not within the specifications. cheers   RolandTed Thanks for the clarifications. I guess everybody misunderstood your initial report. I suggest to create a new subclass of HttpProtocolException for this issue where we add the malformed URL as a field. So it can easily be handled by the application. I still would not try and fix the malformed URL.If we have to introduce new classes methods in otder to fix the problem it will have to wait until 3.1 OlegOleg it is just an exception sub-class. It won t break the API. In reply to comment 10 Oleg it is just an exception sub-class. It won t break the API. I am not saying it would break the API. However the introduction of a new exception class would effectively change the API which is meant to stay frozen until 3.0 release. I personally do not think this problem is severe enough to justify the API change so late in the release process. My preference would be to stick to the announced API freeze and to address this issue after the 3.0 release Oleg I agree with Oleg. Adding this class doesn t break the API but it does change it. 3.1 is the way to go. MikePlease make sure that relative URL s are allowed in the Location header. Strictly speaking this is against the HTTP RFC but I think that s more of an oversight in the RFC. There is really nothing wrong with a relative redirect and it s common practice after a POST request just google redirect afer post . All browsers handle relative redirects correctly. Thanks MohThe reason for this bug is that URI does not check for invalid characters. Space is not an allowed character in a URI. Fixing this issue correctly would mean to add a whole lot of checks to the URI class. With an URI consisting of several parts that all have different sets of allowed and reserved characters and because URIs can have several forms this is a worksome task. I should definitely rewrite that darn URI class once. It is just too bad.Created an attachment id 16371 Test cases Here are some test cases that reproduce the bug. The redirect test actually throws a ConnectionClose exception. This is because HttpClient does not detect the invalid URI and sends an invalid query to our internal test server which just terminates the connection. In reply to comment 13 Please make sure that relative URL s are allowed in the Location header. Strictly speaking this is against the HTTP RFC but I think that s more of an oversight in the RFC. There is really nothing wrong with a relative redirect and it s common practice after a POST request just google redirect afer post . All browsers handle relative redirects correctly. Thanks Moh Mohammad If the http.protocol.reject-relative-redirect parameter is set to false HttpClient will attempt to process relative redirects. OlegCreated an attachment id 16373 Test cases Fixed test case.Patch take 1 . Please review Olegpatch looks good cheers   Roland Patch checked in Oleg
