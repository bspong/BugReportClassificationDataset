httpMethod.abort needed
This is the problem I use the httpclient to fire many requests. At some point of time the server has queued up requests. So certain requests are waiting for response. Now when I call httpMethod.releaseConnection the request should stop waiting for the response and the connection should be closed. However this does not happen. The request is only given up after it has timed out.releaseConnection is meant to return a connection to the connection pool. However it does not close it because the connection should be reused if possible. What you want is a means to abort a request. This can be accomplished by explicitly closing the physical connection and not returning it to the pool. We should provide an abort method that does that. I am not sure how this integrates with the current connection manager architecture. This is a feature request and not a bug. As we are in beta now we can not implement this until we have branched 2.0 out. So targetting for 2.1.Created an attachment id 11477 Patch take 1 Well it looks like this is all it takes. Writing the test case was by far the most difficult part. Let me know if I overlooked any potential problems OlegHi Oleg This looks like the right way to handle abort. I have a few suggestions Ê- HttpMethodBase should check the abort flag before executing just in case abort was called before the method had a connection. Ê- A test case should be added for the above case. Other than these items I think this one is ready to go. MikeFair enough. How about this OlegCreated an attachment id 11479 Patch take 2 Looks good. MikeI am quite surprised that all it takes is a connection.close Looks as if we finally have a good architecture for connection handling - Good work guys.If nobody complains loudly I ll commit the patch tonight 20 00 GMT OlegOleg if the abort request comes from a different thread than the code that acts on the abort flag probably does then you may want the aborted boolean field to be volatile so it ll get updated immediately.Even though there are enough people out there who claim volatile variable implementation to be completely broken in many JDKs and even though there s no harm in calling abort multiple times you are completely right. I ll mark aborted flag as volatile before committing the patch OlegPatch committed with the changes suggested by Mike Sample Oleg
