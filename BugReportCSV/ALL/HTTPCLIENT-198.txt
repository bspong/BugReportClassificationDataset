The PostMethod did not bring back response headers from proxy servers
Description When doing tunnelling through proxy servers in case of 407 response the wrapper class ConnectMethod failed to pass the response header back to the wrapped method PostMethod in our case . As result the response headers are not passed back to the application. Proposed Fix Change the ConnectMethod to use the wrapped method instance to get response headers. It will be reinitialized again if CONNECT is successful. Also have to modify the addProxyAuthorizationRequestHeader code to use the wrapped method for the authenticator to work.Created an attachment id 5969 PATCH Bin We are aware of the ConnectMethod being a terrible mess. It needs a complete rewrite. Having to cast the HttpMethod interface to HttpMethodBase in order to get things done is simply appalling. The problem is we can t fix the problem cleanly while retaining API compatibility. There s already a bug report in the Bugzilla for it which has been targeted for 2.1 release. http nagoya.apache.org bugzilla show bug.cgi id 15534 How critical is this bug for you Can it be targeted for 2.1 release OlegIt is very critical for us to get all the bugs includign thi sone we reported fixed in order for us to use httpClient as Open Source once 2.0 is released. Currently we have to maintain our own version of the httpClient code and we will not be able to get any latest fixes merge in. For this particular problem when we negotiate NTLM proxy we need to get more information from user domain and host than Basic or Digest proxies. When we get a 407 response code back we have to look into the response header to find out what type of proxy is in use. I just don t know any other way for the application to get that information besides getting it from the method. We can not prompt all users for the additional information either that will confuse the user who don t use NTLM.Ok I see. I ll be working on a fix. I want to see if I manage to come up with a somewhat cleaner structure for the ConnectMethod. OlegA related issue I also noticed that the response body was also not brought back in the original method instance. Currently we do not have any need for this. But if an application want to display the response in a html page format it would need teh body as well. If you are going to fix it you may want to consider that as well.Created an attachment id 6009 Patch take 2 by Oleg Kalnichevski I have done my best to inject a bit of sanity into HttpClient s SSL tunneling code. Unfortunately without a better design HttpMethod split into HttpRequest HttpResponse pair this hacks appears the only feasible solution compatible with the present API. I really hate having to introduce such an ugly work-around. Anyone who sees a better approach is welcome to come forward with it OlegWow that is ugly Unfortuantely though I agree this is the way to go for now. There is no other way to return the response except to force it on the original method. It seems like we may also want to fake the response body on the method as well. It looks like a little extra code for HttpConnection was accidentally added as well. I m guessing this is from the patch for HTTPCLIENT-199. We will also need to resolve this one with the fix for HTTPCLIENT-195 as they both patch HttpMethodBase.shouldCloseConnection . Mike Mike I really feel bad about this hack. Really. I am currently working on a cumulative patch that will include all your fixes as all these problems appear to have been caused by the same flaky code. The patch should address this bug as well as http nagoya.apache.org bugzilla show bug.cgi id 19286 and http nagoya.apache.org bugzilla show bug.cgi id 19226 You ll hear from me within a few hours OlegCreated an attachment id 6015 Patch take 3 - includes fixes for HTTPCLIENT-199 HTTPCLIENT-195 This looks like a good merge to me. I think we also want to have the ConnectMethod set the response stream on a failed execute . I think we just need to add a readResponseBody after or in the fakeResponse call. MikeMike I was concerned about messing aroud with the response stream too much as I thought it might somehow interfere with connection pooling logic. I suggest I commit the patch as it so all the folks out there could test the latest fixes. If you find it safe to extend the HttpMethodBase fakeResponse method to include response stream we can do it with an incremental patch. What do you think OlegWorks for me. MikePatch take 3 has been committed. I leave the bug open until Mike decides if it is safe to add CONNECT method response to the wrapped method OlegMike can pass your judgement on this one OlegYup I m working on it right now. I should post something soon. MikeCreated an attachment id 6040 Fake ConnectMethod response patch The attached method adds support for setting the response body via the fakeResponse method. I have also created a test case to make sure that connections can be released after a failed CONNECT. MikePatch looks fine. I ran a few tests againt my local squid all seems ok. Go ahead and commit it. I do not think we should spend anymore time on code that should have never been there in the first place OlegCreated an attachment id 6053 Log file indicating that the cookie header added by app was not sent. Patch applied.
