Remove some synchronization on CachingNamespaceResolver
The methods getQName and getJCRName are unnecessarily synchronized and cause monitor contention with concurrent calls to the methods of the NameCache interface those are also synchronized . I propose the following change Index CachingNamespaceResolver.java CachingNamespaceResolver.java revision 488245 CachingNamespaceResolver.java working copy -84 7 84 7              deprecated use link NameFormat parse String NamespaceResolver        - public synchronized QName getQName String name public QName getQName String name              throws IllegalNameException UnknownPrefixException          return NameFormat.parse name this       -92 7 92 7              deprecated use link NameFormat format QName NamespaceResolver        - public synchronized String getJCRName QName name public String getJCRName QName name              throws NoPrefixDeclaredException          return NameFormat.format name this       1 and OK for inclusion in 1.2Fixed in trunk and 1.2 branch. svn revision 488671there are more synchronized methods that may lead to monitor contentionthe following methods are synchronized on the CachingNamespaceResolver instance QName retrieveName String jcrName String retrieveName QName name   this potentially leads to monitor contention since those methods are indirectly called by a lot of jcr api methods such as Node.getProperty etc . a possible solution would be to replace the internal LRUMap s with something that s optimized for concurrent read access e.g. an LRUMap implementation that is based on doug lea s ConcurrentReaderHashMap .How about this one How about this one 1 How about this one -1 as it feels way too complicated at least for 1.2. I also don t believe that replacing synchronization with a r w lock is going to help performance that much. The readLock.acquire call also contains a synchronized critical section that might well take longer to execute than the guarded single hash lookup. I suggest to resolve this issue as currently committed and to open a separate issue for improving the name resolution performance for Jackrabbit 1.3. I suggest to resolve this issue as currently committed and to open a separate issue for improving the name resolution performance for Jackrabbit 1.3. i d rather leave this issue open the core issue monitor contention with concurrent read access still exists a thread dumps show. the committed fix affected deprecated methods only and doesn t solve the core issue. i d rather leave this issue open the core issue monitor contention with concurrent read access still exists a thread dumps show. the committed fix affected deprecated methods only and doesn t solve the core issue. The issue title and description only mention the deprecated methods. I d rather open a separate issue with a better description of the core problem. Additionally from the release and Jira management perspective it s troublesome to have issues that are partially fixed in a release.Resolved. Please continue discussion on the core issue in JCR-688.
