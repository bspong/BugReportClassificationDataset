StopFilter should not create a new CharArraySet if the given set is already an instance of CharArraySet
With LUCENE-2094 a new CharArraySet is created no matter what type of set is passed to StopFilter. This does not behave as documented and could introduce serious performance problems. Yet according to the javadoc the instance of CharArraySet should be passed to CharArraySet.copy which is very fast for CharArraySet instances instead of copied via new CharArraySet Yet according to the javadoc the instance of CharArraySet should be passed to CharArraySet.copy which is very fast for CharArraySet instances instead of copied via new CharArraySet We shouldn t copy it at all. Comment from LUCENE-2094 the other issue To prevent provided set from being modified while they are in use in a filter the given set is copied and wrapped in an immutable instance of chararrayset. We should really avoid this type of nannyism in Lucene. Here s a patch that reverts to the previous behavior of using the set provided. Here s a patch that reverts to the previous behavior of using the set provided. Doesn t seem to lead anywhere to discuss with the performance police when I look at the average size of your comments. This was actually meant to be a pattern for analyzer subclasses so I won t be the immutability police here. Yonik will you take this issue and commit We should really avoid this type of nannyism in Lucene. oh well this seems to me like a void is isn t evil discussion - nevermind. Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years that forces people to write their own implementations for best performance and you happened to be the closest person at the time Related I m the one who added this to BooleanQuery some time ago Returns the list of clauses in this query. public List BooleanClause clauses return clauses Yes it probably should also say something like Don t modify - it may change the query to the comments. To the software pedant that s not safe and would probably be called bad design - but I strongly believe that our API should be for adults and one should be able to introspect objects like Queries w o suffering object allocations. We should also continue to develop Lucene for ourselves not for some mythic stupid user... I ve seen too many bad design decisions based on this will confuse users arguments rather than this is confusing . Sometimes it comes down to people trying to solve a class of problems that others aren t even having issues with - I don t ever recall someone accidentally modifying the set after they passed it to the StopFilter or someone accidentally modifying clauses from BooleanQuery. I also disagree with checking all input parameters in many cases things that could possibly be in someones inner loop and will throw an exception anyway . Say we have this piece of code boolean checkLength String str return str.length MY MAX LENGTH I think it s silly to add an explicit null check like so but you see plenty of code like that boolean checkLength String str if str null throw new RuntimeException Can t pass checkLength a null string return str.length MY MAX LENGTH There. Is that reply long enough for you Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years that forces people to write their own implementations for best performance and you happened to be the closest person at the time no worries thanks for the reply To the software pedant that s not safe and would probably be called bad design - ... I understand and I can totally see your point. I was kind of separated due to the kind of short rants don t get me wrong . I agree with you that we should not do that in a filter as this constructor could be called very very frequently especially if an analyzer does not implement reusableTokenStream. I would still argue that for an analyzer this is a different story and I would want to keep the code in analyzers copying the set. Classes instantiated so frequently as filters should not introduce possible bottlenecks while analyzers are usually shared that won t be much of a hassle - any performance police issues with this Yonik would you commit this issue please. I think we agreed on your solution. simon committed.
