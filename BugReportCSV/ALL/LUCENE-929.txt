contrib benchmark build doesn t handle checking if content is properly extracted
The contrib benchmark build does not properly handle checking to see if the content such as Reuters coll. is properly extracted. It only checks to see if the directory exists. Thus it is possible that the directory gets created and the extraction fails. Then the next time it is run it skips the extraction part and tries to continue on running the benchmark. The workaround is to manually delete the extraction directory. I didn t find a way to check if an Ant directory is empty and even if there is a way the extract process can still fail in the middle. So maybe an alternative solution is to extract the files in ExtractReuters to a tmp directory first and rename it if everything succeeds. Also always delete the target dir at startup. That way if extraction fails the directory doesn t exist and if it does exist we know it s ok unless manually tempered but that s not for us to solve . What do you think Seems ok to me. .. ExtractReuters to a tmp directory first and rename it if everything succeeds. Also always delete the target dir at startup should be always delete the tmp dir at start yes you re right . If the target exists the code should fail - we re not supposed to call it from Ant anyway and so if it s indeed called it may discover a bug in the build.xml and if it s called by a standalone program I think it d be better to fail so as to indicate the caller that the dir exists - maybe he ll want to delete and re-create it. Since ExtractReuters deletes all the files under the outputDir in its ctor I didn t fail its main if the directory exists. I ve done some re-formatting to the class but the relevant changes are under main . Committed revision 1063640 3x . Committed revision 1063647 trunk . Thanks Doron and Grant Bulk close for 3.1 Note this fix this doesn t work if the output dir has a trailing slash. See MAHOUT-694. Note this fix this doesn t work if the output dir has a trailing slash I think this is a separate issue - I mean not handling a trailing slash. Created LUCENE-3137 for handling this. There s now a simple patch for this in LUCENE-3137. I think this one can be closed Doron that s fine to open a new issue and close this one but it was this issue s fix that introduced the bug. Doron that s fine to open a new issue and close this one but it was this issue s fix that introduced the bug. Thanks for clarifying Okay so I will fix this in LUCENE-3137 it makes sense to me at this time since this one was resolved 4 months ago and fixed something else and resolve this one. Bulk close after release of 3.1
