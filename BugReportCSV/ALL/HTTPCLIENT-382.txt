Move multipart request to a new RequestEntity type
Multipart posts are currently handled via a separate post method the MultipartPostMethod. This separate method is unnecessary given the new RequestEntity mechanism.Created an attachment id 12841 Patch 1 Here s a first stab this one. This patch does the following  - Deprecates MultipartPostMethod in favor of MultipartRequestEntity PostMethod  - Adds isRepeatable to Part  - Moves the multipart boundary definition to a HttpMethod param  - Adds support to SimpleHttpServerConnection for reading request bodies  - Ports the old webapp-based multipart tests to the new SimpleHttpServer. These tests are a little weak perhaps we should consider making use of FileUpload for checking the multipart request. Please have a look and let me know what you think. MikeMike I like this redesign a lot. But it needs to be well-documented in the guide so that people understand how to use it. You made the MIME boundary string a param. I have a strong feeling that we should avoid that. The boundary string should not be a constant at all. It should be randomly generated on each request. Multipart-MIME is an extremely hierarchical format that can be nested deeply. So there can be more than one boundary string and we must ensure they are all unique within the same request. I know we had a request when somebody wanted to control the boundary string. We could still allow that by accepting an optional parameter in a Part constructor. HTTPCLIENT-164 has been marked as a duplicate of this bug. Mike I would like to echo Odi s comment on the boundary string. It does make sense to have it randomly generated when not explicitly defined. One little comment I have is that the patch currently makes use of some deprecated classes HttpConstants . If that s not intentional references to HttpConstants should be removed. Otherwise all looks cool OlegHi Odi Oleg Thank you for looking over the patch. I ll change the boundary string to be randomly generated where it can be overridden by using a param. The use of HttpConstants is intentional as there doesn t seem to be a non-deprecated replacement. Is the default content charset statically available anywhere else Mike Is the default content charset statically available anywhere else It s defined in the DefaultHttpParams these days. I would not like to see SimpleHttpServerConnection tightly coupled with DefaultHttpParams though. In my opinion the SimpleHttpServerConnection should define its own DEFAULT CONTENT CHAR static variable. HttpConstants should be let quietly go away in the next release. Oleg Created an attachment id 12889 patch 2 Here s another take on this one. The boundary is now randomly generated by default but it can be overridden using a param. The use of deprecated code has also been removed. There is still a need for some documentation javadoc updates but otherwise I think this works. Please have a look and let me know what you think. MikeVery nice Mike. You also spent a lot of work on test cases. I guess a random boundary thing is fair enough. If you are very paranoid you should include sort of a serial number however. Like 30 random characters a static counter that is increased with every call to a Part constructor. But as I said that is paranoid. I browsed through the patch and the only thing that caught my watching eye was private static byte MULTIPART CHARS - 1234567890abcdefghijklmnopqrstuvwxyz          ABCDEFGHIJKLMNOPQRSTUVWXYZ .getBytes Make sure to specify the encoding here or it won t work as intended on Z OS where they use EBCDIC. have a nice dayLooks cool to me system vs. ASCII charset issue aside OlegThanks for the feedback Odi Oleg. I ve applied this patch after fixing the encoding problem and adding a few docs. The use of a serial number in the boundary has been left out for now but can be easily added in the future. Also a multipart tutorial using the new entity still needs to be written. I ll leave this bug open until those items are resolved. MikeI think we should close this one. Multipart tutorial would be nice but we can live without it OlegI agree. It s certainly not a release blocker. Mike
