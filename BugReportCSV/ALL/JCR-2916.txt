Avoid String.intern when indexing
Lucene 3.0 now allows to create Fields with a String name that is already interned. We should use the new constructor in NodeIndexer to avoid unnecessary String.intern calls. The field names Jackrabbit uses are available in FieldNames and already interned.Attaching patch for lucene Field creation. I replaced all the Field constructors with the proper ones to skip the intern call. The same issue seems to apply to org.apache.lucene.index.Term it is also heavily used and now provides a constructor that allows skipping the intern call. Do you think that should be addressed in this issue too Generally the patch look OK. I ve identified two issues - IndexMigrationTest line 71 and NodeIndexer line 745 the field names still need to be interned. The names are not one of the already interned constants. Regarding Term usage I think we should create a separate issue for that.oops good catch That also goes for ChainedTermEnumTest. I redid the patch. I also changed the IDFieldTest to show the difference between the 2 constructors. Interesting enough just taking out id.toString shaved off more than 90 of the test time so it may not have been the most conclusive test. for me the old test went from 800ms to 30ms Anyway now it compares the 2 ways so it should be a tiny bit more relevant. created issue for the Lucene Term thingAttached a small JavaDoc change to InternalValue maybe we can sneak this one in too when applying the patch. It is too small to have its own issue.Patches committed in revision 1089030. Thanks 
