Make TokenStream Reuse Mandatory for Analyzers
In LUCENE-2309 it became clear that we d benefit a lot from Analyzer having to return reusable TokenStreams. This is a big chunk of work but its time to bite the bullet. I plan to attack this in the following way Collapse the logic of ReusableAnalyzerBase into Analyzer Add a ReuseStrategy abstraction to Analyzer which controls whether the TokenStreamComponents are reused globally as they are today or per-field. Convert all Analyzers over to using TokenStreamComponents. I ve already seen that some of the TokenStreams created in tests need some work to be reusable even if they aren t reused . Remove Analyzer.reusableTokenStream and convert everything over to using .tokenStream which will now be returning reusable TokenStreams . can we create a separate sub-tasks to fix the tests so we can backport at least a majority of the changes Do you mean correcting the TokenStreams in tests so they are reusable yeah just thinking it could be a nice cleanup Some of these are messy Done. LUCENE-3397 This is the uber patch which converts all but 8 Analyzers over to using ReusableAnalyzerBase. This also introduces the ReuseStrategy concept to ReusableAnalyzerBase will need some documentation before committing . For simplicity the ReuseStrategy maintains its own CloseableThreadLocal. The remaining Analyzers can be converted when I push the ReuseAnalyzerBase logic into Analyzer. After some small tidy and a review I think we should commit this even though we re going to collapse ReusabeAnalyzerBase. Improved patch which does some cleanup and documentation ReuseAnalyzerBase.ReuseStrategy. I m seeing one test fail in TestPayloads this class does some insanely non-reusable stuff with payloads. I ll keep digging. Grrr TestPayloads does some really non-reusable stuff. The only two options I can see are either using a NoReuseStrategy implementation in the test or instantiate the Analyzer again every time it does something crazy. I ve chosen the latter since I don t want to start the NoReuseStrategy slippery slope. We re in good shape now minus this stupidity . just a quick glance the MockAnalyzer needs to reuse-per-field This way we test the case where payloads are enabled for one field but not for another. Absolutely I missed that fieldname usage. Updated patch. Still all green. this patch looks good to me I like the reuse strategy and how you factored out the thread local stuff. I think we should commit and let bake this in Hi the ReuseStrategies look fine. I am just confused about the Generics. Why not make the whole abstract ReuseStrategy T-typed Then also ThreadLocal T is used and no casting anywhere. The subclasses for PerField and global then are typed to the correct class Map or TSComponents . Hi Uwe I originally had ReuseStrategy with a generic type but then decided it was overkill since it only benefits implementations not users of ReuseStrategy. If we want the extra type safety I ll happily make the change. I agree its somehow overkill. But if not on class level I would even remove the T parameter from ther getter method because it does not really fit it is only used there not even on the setter. There is no type enforcement anywhere so the extra T is just to remove the casting on the caller of the protected method but adding a SuppressWarnings on the implementor s side. So either make all T or use Object everywhere. Patch updated to trunk. Generic T is removed from ReuseStrategy. I m going to commit this soon and then work on the remaining Analyzers. patch looks great one question should we keep the reset can return false and we do not reuse this seems like it might be obselete though it would introduce an API break I think maybe we should change it to void Hmmm I agree that we should change it to void. If the source cannot be reset it should throw an Exception. We need to be able to rely on the fact that we are using reusable components. I ll update the patch. Patch updated to reset now returns void. I ll make sure to note this compat break in the CHANGES.txt. Patch updated to trunk. We re good to go now. Committed revision 1169607. Now attacking the remaining Analyzers. During the merging of changes I lost some conversions of some test Analyzers. Patch addresses them including the unholy TestPayloads . Committed revision 1169654. Patch which converts the last of the Analyzers over to using ReusableAnalyzerBase. At this stage RAB is now the only extension of Analyzer. Patch includes a few unique changes Adds AnalyzerWrapper which is used by Analyzers which wrap other Analyzers. This is necessary to allow access the TokenStreamComponents of the wrapped Analyzers without making TSC public. IndexSchemaRuntimeFieldTest is made out of IndexSchemaTest due to testRuntimeFieldCreation doing some thread-unsafe changes to the Analyzers stored in IndexSchema. When run in IndexSchemaTest depending on the execution order the test fails. When run by itself there is no problems. I think this is okay because the actual code being tested is documented as being thread-unsafe and the test also notes it does some tacky things. I m not going to look to commit this just yet as I want to collapse Analyzer and RAB into a single class. Patch which finalizes the remaining Analyzer changes and merges ReusableAnalyzerBase and Analyzer together. Command for the patch Keep old Analyzer.java temporarily for comparison svn rename lucene src java org apache lucene analysis Analyzer.java lucene src java org apache lucene analysis Analyzer.java.old svn rename lucene src java org apache lucene analysis ReusableAnalyzerBase.java lucene src java org apache lucene analysis Analyzer.java I have updated the javadocs to reflect the merging and have removed the assertFinal assertion since tokenStream and reusableTokenStream are always final now. All tests pass and javadocs build. I am looking to commit this soon with a MIGRATE.txt entry . Plan to commit this tomorrow. I think this one can be marked resolved by the way I reviewed the patches here thanks for putting in all this effort this fixes my biggest pet peeve about lucene....awesome. I haven t actually committed yet. I was hoping you d have a chance to review before I did. I ll now commit. 1 Committed revision 1175297. I don t want to mark this as resolved just yet. I want to spin off another sub-task to move all consumers over to reusableTokenStream and then rename it back to tokenStream . chris this seems to be done no can you close it TokenStream reuse is now mandatory
