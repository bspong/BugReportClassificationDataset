Unit tests for persistence managers
Currently we only test our persistence managers indirectly via JCR-level test cases. The downside of this approach is that we can only test one persistence manager implementation at a time and need separate build profiles to switch from one implementation to another. To ensure better coverage and consistent behaviour across all our persistence managers I implemented a simple unit test that works directly against the PersistenceManager interface.Patch attached. It covers the modern pool bundle PMs for Derby and H2 and also test the old-style persistence managers. Currently this adds only about 3 to the time it takes to run the jackrabbit-core test suite so I m thinking of simply including it in the default test run but if people prefer we can also put it in a separate integration test profile.To speed up the test I will try to change the test case to use an in-memory database by default.With the H2 database changing the database URL is enough manager.setUrl jdbc h2 mem database.getPath The memory is automatically released when the connection is closed. Derby also supports in-memory databases now but unfortunately it doesn t release the memory and there is no nice way to do that manually http wiki.apache.org db-derby InMemoryBackEndPrimer I suggest to only change the H2 JDBC URL.Patch committed in revision 910526. Good idea about in-memory databases. I updated the H2 JDBC URLs.
