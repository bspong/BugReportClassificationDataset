Redesign of HTTP authentication framework
The existing HTTP authentication framework has got a few glaring deficiencies - Authentication headers management evolved or degraded into a some sort of black art and proved very error-prone. - Existing logic intended to deal with authentication failures and authentication failure recovery is flawed. The resolution of the HTTPCLIENT-213 did appear possible without a better approach than the one based on AuthScheme getID. On top of that authentication logic got quite messy with the series of attempts to fix breakages in complex authentication schemes the latest being NTLM proxy basic host fix The patch I am about to attach is an attempt to address all the shortcomings mentioned above. It builds upon my previous patch that enabled authentication schemes to maintain authentication state and presents a complete redesign of the existing HTTP authentication framework. Basically there s no authentication code left untouched so please do take a closer look. Critique comments suggestions welcome. OlegCreated an attachment id 9576 Patch take 1 Any feedback so far Is anyone looking at the patch OlegHi Oleg This looks quite good. I like the changes to the AuthScheme interface. Authentication in HttpMethodDirector is quite complicated now more javadocs here would be quite helpful. I also noticed in the process of testing that HttpState.setAuthenticationPreemtive no longer seems to have any effect. Granted it is deprecated but now it s completely non-functional. Any thoughts about how we can fix this Mike HttpMethodDirector is quite complicated now more javadocs here would be quite helpful. That goes without saying. As soon as the code stabilizes somewhat Javadocs will be provided. I would wait until the first alpha though Granted it is deprecated but now it s completely non-functional. Any thoughts about how we can fix this I can t think of anything elegant but a dirty workaround should not be too difficult. Folks are there any objections to committing the patch Odi have you had a change to review the patch Are you still planning on reviewing it Oleg sorry Oleg I can not apply the patch to the current HEAD. It seems outdated.Created an attachment id 9909 Patch take 2 I think the patch is okay but the architecture is not perfect yet. You can still commit it I guess. I did not run any tests on it but rather scimmed the code. To do 1. I would like to get rid of the challenge stuff in AuthScheme interface. Challenge is really an implementation detail that should not be part of this interface. 2. For real stateful authentication we will need a single AuthScheme instance that lives during a complete authentication cycle. The AuthPolicy getAuthScheme method does not currently fulfill this. Odi I think the patch is okay but the architecture is not perfect yet. You can still commit it I guess. I did not run any tests on it but rather scimmed the code. Things can be always done better. The question is if the patch is step forward or backward. If you need more time to review the patch let me know. 2. For real stateful authentication we will need a single AuthScheme instance that lives during a complete authentication cycle. Unless we are talking about different things I believe that this is in fact the case. There s always preemptive auth scheme notwithstanding only one instance of authentication scheme within a complete authentication cycle. One may take this one step further and persist cache authentication schemes between method invocations to avoid re-authentication against the realms HttpClient already has authenticated with. But this is something for 4.0 Oleg The question is if the patch is step forward or backward. I think the code is moving towards the right places. It s certainly an improvement. Good work so far. Unless we are talking about different things I believe that this is in fact the case. There s always preemptive auth scheme notwithstanding only one instance of authentication scheme within a complete authentication cycle. Oh. So I have to look at it again. Then this is fine with me and I can try and make DigestAuth behave better - Commit it fine with me. MikePatch committed. OlegPrompted by the 2.0 incompatibility discovered by Vincent Massol vmassol at pivolis.com Specials thanks go to Gump and all the Gump Meisters I went over the authentication code one more time and made yet another series of changes I factored out the authentication challenge processing logic from the HttpMethodDirector to a class of its own. Thanks to that authentication challenge processing can now be tested separately. Test cases provided. HttpMethodDirector no longer intervenes if Authorization Proxy-Authorization are set manually by the user. Custom authorization headers are never overwritten Introduced a new class called AuthState that represents the authentication process state that contains all the authentication details. Basically it is just a convenience wrapper around the authentication scheme interface. Proxy and host authentication state objects moved to the HTTP method level so that they can be queried by the user to find out the details about authentication that has been performed by the HttpMethodDirector. With the current implementation all the details of proxy and host authentication are contained within the HttpMethodDirector instance which exists only within the lifetime of HttpClient executeMethod execution. As soon as the method returns the respective HttpMethodDirector instance gets GCed along with the authentication details More test cases OlegCreated an attachment id 10949 Follow-up patch take 1 Looks good to me. I like it. MikePatch committed. Oleg
