Optimize SegmentMerger to work on atomic Segment Readers where possible
This is a spin-off from LUCENE-2769 Currently SegmentMerger has some optimizations when it merges segments that are SegmentReaders e.g. when doing normal indexing or optimizing . But when you do IndexWriter.addIndexes IndexReader... the listed IndexReaders may not really be per-segment. SegmentMerger should track down all passed in reads down to the lowest level Segment Reader or other atomic readers like SlowMultiReaderWrapper and then merge. We can then remove most MultiFields usage except term merging itsself and clean up the code. This especially saves lots of memory for merging norms as no longer the duplicate norms arrays are created when MultiReaders are used Here the patch for 3.x really easy here 3.x was missing to return null in contrib misc for getSequentialSubReaders. Further optimizations here could also work per segment. For now we have to keep them atomic . As a side note Why is contrib misc s IndexSorter missing in trunk Updated patch for trunk else MultiPassIndexSplitter fails when source index has more then one segment. Final patches will commit soon. The changes in MultiPassIndexSplitter are not yet really needed but this is because FilterIndexReader is broken in trunk see related issue . But I add it here because for consistency we need it. This patch also removes the useless closeReaders method in SegmentMerger. This was used by tests only incorrectly and should never be called from production code. Looks great Uwe Committed trunk revision 1036970 Committed 3.x revision 1036971 Thanks Mike for the help with the stupid bug because of not-cloned TVReader After a discussion with Robert I supply a new patch with optrimized norms merging without reallocating and ArrayUtil.oversize implied y BytesRef . The fix is now to simply look before starting to merge norms how big the normsBuffer must be. So there is never reallocation needed. Will heavy commit now Committed optimization in trunk revision 1037077 Backported optimization to 3.x revision 1037083 Bulk close for 3.1
