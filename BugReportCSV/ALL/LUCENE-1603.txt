Changes for TrieRange in FilteredTermEnum and MultiTermQuery improvement
This is a patch that is needed for the MultiTermQuery-rewrite of TrieRange LUCENE-1602 Make the private members protected to have access to them from the very special TrieRangeTermEnum Fix a small inconsistency docFreq now only returns a value if a valid term is existing Improvement of MultiTermFilter.getDocIdSet to return DocIdSet.EMPTY DOCIDSET if the TermEnum is empty less memory usage and faster. Add the getLastNumberOfTerms to MultiTermQuery for statistics on different multi term queries and how may terms they affect using this new functionality the improvement of TrieRange can be shown extract from test case there 10000 docs index long values junit Average number of terms during random search on field8 junit Trie query 244.2 junit Classical query 3136.94 junit Average number of terms during random search on field4 junit Trie query 38.3 junit Classical query 3018.68 junit Average number of terms during random search on field2 junit Trie query 18.04 junit Classical query 3539.42 All core tests pass. The patch is here. Maybe the javadocs of getLastNumberOfTerms could be improved... Patch looks good. Should we allow lastNumberOfTerms to be the sum of all invocations Instead of clearing it per segment And maybe add a resetLastNumberOfTerms in case one wants to re-use a MultiTermQuery and recheck that count. This is also another idea. The sum is interesting too but not so helpful if the segments share the same terms. But for the number of seeks in TermDocs its interesting. Even if it sums up the numbers in the Trie tests are the same because index is optimized. So the note could be For real numbers to analyze your query use a optimized index for real seek counts on a complex index query structure do not optimize. By the way Are queries also rewritten per segment with the new Searchers If not one could use the BooleanQuery variant if he wants to have real term numbers on unoptimized index. I am - 0 about the change. In case of a change the method should be called getCurrentNumberOfTerms or something like that Ð naming is the hardest one. I was thinking that this count is a good way to measure how much net work was done hence the switch to sum. EG you could compare that count vs the count you get after having optimized the index to get a sense of how much you gained by optimizing. Whereas now with the count only showing the terms from the last segment searched is not really useful at all. Are queries also rewritten per segment with the new Searchers If not one could use the BooleanQuery variant if he wants to have real term numbers on unoptimized index. They are rewritten at the MultiReader level so you re right one could use that to get number of unique terms vs amount of work seeks done . If we do change it ow about get clearTotalNumberOfTerms Maybe declare the term number as transient it should not be serialized... Here the patch with the suggested changes. TrieRange test changes and so on come later. Looks good Uwe thanks. I plan to commit shortly. I changed one sentence in the javadoc to If you re-use the same query instance for another search be sure to first reset the term counter with link clearTotalNumberOfTerms . It was missing the reuse part making it sound like you always must call clear first . Thanks Uwe Just for completeness Should we add the number of terms methods also to the Filter counterparts of the MultiTermQueries as the new methods are only automatically appear in subclasses but not in related pass-to-query-only classes In trie-range I have these pass-to-query methods. An idea how to achive this would be to make the Filter counterparts subclasses of a new superclass MutiTermFilter that just passes all methods to the corresponding query. This would make the filter classes simplier and one must only add the new methods to this superclass not to every filter class manually. Should I add a patch An idea how to achive this would be to make the Filter counterparts subclasses of a new superclass MutiTermFilter that just passes all methods to the corresponding query. That d be great Ð can you reopen this attach patch To also expose getTotalTermCount to the Filter counterparts I provide a new supercalss for those filters MultiTermQueryWrapperFilter name to be discussed . Patch that provides that filter. Mike Can you please test drop-in-backwards-compatibility with this patch applied with Windows the checkout through Ant does not work correctly I also set the native line ending svn property of the new file in the patch. The update of the TrieRange follows after this is committed code not affected compiles still fine. Patch looks good Ð I ll commit shortly. Thanks Uwe Do you think the name is good MultiTermQueryWrapperFilter or simplier MultiTermFilter Its not really one of both its a mix between wrapper and the real filter It wraps the query but does the getDocIdSet and TermEnums himself. I think the name is good so it s clear you have to provide a MultiTermQuery yourself via subclass to use it.
