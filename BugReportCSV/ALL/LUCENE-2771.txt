Remove norms support from non-atomic IndexReaders
Spin-off from LUCENE-2769 Currently all IndexReaders support norms but the core of Lucene never uses it and its even dangerous because of memory usage. We should do the same like with MultiFields and factor it out and throw UOE on non-atomic readers. The SlowMultiReaderWrapper can then manage the norms. Also ParallelReader needs to be fixed. Here the relevant comments Robert Muir added a comment - 19 Nov 10 04 28 AM here is a hack patch for Uwe s idea about the norms. we need to change SegmentMerger to not call norms on the top-level IR but populate its normBuffer from the subs. in my opinion it seems crazy we are currently creating these big arrays this way yeah there is the hairy code for re-open that re-uses the big merged cache for the NRT case but still . Maybe i am missing something. Robert Muir added a comment - 19 Nov 10 04 28 AM here is a hack patch for Uwe s idea about the norms. we need to change SegmentMerger to not call norms on the top-level IR but populate its normBuffer from the subs. in my opinion it seems crazy we are currently creating these big arrays this way yeah there is the hairy code for re-open that re-uses the big merged cache for the NRT case but still . Maybe i am missing something. Robert Muir added a comment - 19 Nov 10 04 58 AM here s another hacky update but still a few tests explicitly check these norms and need to be fixed. maybe we could add an uncached MultiNorms or something at least in src test for convenience just to fill the byte arrays so these tests can assertEquals otherwise we are going to have to put a lot of SlowMultiReaderWrappers in these tests. Robert Muir added a comment - 19 Nov 10 04 58 AM here s another hacky update but still a few tests explicitly check these norms and need to be fixed. maybe we could add an uncached MultiNorms or something at least in src test for convenience just to fill the byte arrays so these tests can assertEquals otherwise we are going to have to put a lot of SlowMultiReaderWrappers in these tests. Robert Muir added a comment - 19 Nov 10 07 45 AM here is an updated patch with core contrib solr tests passing. For ParallelReader i forced it to require non-composite readers only e.g. SlowMultiReaderWrap them if thats not the case . TODO ParallelReader shouldnt need multifields etc anymore there are 5 Ignore d ParallelReader-related tests because of things like reopen isOptimized isCurrent merge in Uwe s improved SegmentsMerger clean up code. Robert Muir added a comment - 19 Nov 10 07 45 AM here is an updated patch with core contrib solr tests passing. For ParallelReader i forced it to require non-composite readers only e.g. SlowMultiReaderWrap them if thats not the case . TODO ParallelReader shouldnt need multifields etc anymore there are 5 Ignore d ParallelReader-related tests because of things like reopen isOptimized isCurrent merge in Uwe s improved SegmentsMerger clean up code. I think there may be hope for ParallelReader. Ie if the readers added to it a congruent consist same-sized sub-readers which I think is common then we can implement getSequentialSubReaders as simply returning an array of ParallelReaders of the sub-readers. If they are not congruent then it s effectively a SlowMultiReaderWrapper. here is a start to the new approach i described. it needs some cleanup and optimization but mostly just to add a cache to ParallelReader like i did to SlowMultiReaderWrapper... all tests pass this is much simpler. here is a patch with a cache on ParallelReader. i also fixed some bugs in my previous patch in general the patch should be reviewed as things are mostly unoptimized. e.g. the ParallelReader norms methods might not need to be entirely synchronized and maybe it can have a ctor that re-uses parts of the norms cache like DirectoryReader had before though that was complicated Ok not really related but i just can t stand it In the contrib demo SearchFiles example there is a OneNorms FilterIndexReader. I think this entire thing is a no-op since per-segment search and not a good thing to have in an example. I removed this here. i also turned some nocommits into TODO s really this Slow stuff doesn t need to be hyper-optimized. SegmentReader and AllOtherReaders are becoming less and less similar. Is it time to remove their common parent class Updated patch after commit of subissue LUCENE-2772. Some throughts The cache currently dont support reopening readers as FilterIndexReader throws UOE on reopen which is fine for most cases . But for this reader we should support reopen and implement it in the FilterIndexReader with optimized norms recreation copy over in the map only reopened segments . Another thing about MultiNorms We are inconsistent now We are using MultiFields everywhere in core queries but not MultiNorms. E.g. for a TermQuery you can currently get a Scorer but as soon as this scorer requests norms it will throw UOE. We should be consistent. As we have now the SlowMultiReaderWrapper we should remove MultiFields support from everywhere else in core Filters and Queries but also FieldCache . 1 for that from my side EDIT We use MultiFields nor everywhere anymore eg no longer in TermQuery Scorer. But still in filters and other parts. So we should open issue to remove all usage Some throughts The cache currently dont support reopening readers as FilterIndexReader throws UOE on reopen I don t see why SlowMultiReaderWrapper needs to support reopen is there really a use case for this But parallelreader still does with the patch and its tests pass . In fact reopen is completely unrelated to this issue or the cache here at all... so i don t understand your comment. In fact reopen is completely unrelated to this issue or the cache here at all... so i don t understand your comment. If you reopen an reader you can reuse the cache partly so instead of copying all norms from all subreaders again you can sometimes simply override a part of only a refreshed subreader . right but slowmultiwrapper never supported reopen before... so its unrelated. I am just collecting ideas Whats going on here should i commit the patch I had no time to further look into it I just have to recapitulate my comments and review the patch again. We should in all cases open another issue and remove Multi support from all core queries and filters where it is left . If you use a filter with a MultiReader it can throw UOE. Then you can always use SlowMultiReaderWrapper. We should in all cases open another issue and remove Multi support from all core queries and filters where it is left . If you use a filter with a MultiReader it can throw UOE. Then you can always use SlowMultiReaderWrapper. 1 This looks great Any reason not to commit now I was just only waiting for a review... i ll merge the patch and test again and commit shortly. Committed revision 1055238.
