SISM blocks the item state cache when loading a new item
The SharedItemStateManager.getNonVirtualItemState method contains a loadItemState call within a synchronized cache block. This prevents all item state cache access while a new item is being loaded from the persistence manager. I have at least one case where this has caused a serious performance drop essentially synchronizing repository access for all readers.Fixed in revision 919458. 1 we experienced this problem as wellMarcel and Thomas noted that moving the synchronization from the cache to the SISM instance may just relocate the problem. I think that this decoupling between itemExists and getItem should still help but will set up a test case to verify the actual gains.In revision 929506 I narrowed down the synchronization in getNonVirtualItemState to only cover the loading of new items in cases where a cache miss has occurred. Concurrent threads will now be able to continue accessing items in the cache while new items are being loaded from the persistence manager.ItemStateReferenceCache is thread safe for JMM happen-before rule put it in cache cache.cache state set parent container state.setContainer this the statments must be revert state.setContainer this cache.cache state Please find attached a patch for the 1.6 branchThanks I committed the patch to the 1.6 branch in revision 1005043.
