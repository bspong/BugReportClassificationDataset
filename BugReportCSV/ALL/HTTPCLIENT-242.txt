Add InputStream buffering.
Currently HttpClient does not buffer the InputStream received from the socket. Perhaps doing so would improve performance. Reported by Tony Bigbee.Created an attachment id 12597 Patch against 2.0 take 1 Looks good to me. I m trying to remember why we didn t do this sooner. Anyone recall MikeHi Mike the discussion usually centered around buffering for the response body. Since folks could just get the input stream and create their own buffered stream on top there didn t seem to be a need to create a buffered stream within Http Client. That s what I recall I didn t check the archives. cheers   RolandMy test results of averaging 5000 GET requests to a local Tomcat 4 reading a 725 bytes response body using the RequestBodyServlet from the TestWebapp . without patch 2.8002 ms request with patch 1.8266 ms request This is a 34 improvement. My test result of averaging 5000 GET requests to a local IIS reading 5079 bytes response body using a static HTML page . without patch 3.9436 ms request with patch 2.9062 ms request This is a 26 improvement My test result of averaging 5000 GET requests to a local Apache HTTPD with PHP 4.3 module reading 5079 bytes response body using a static HTML page . without patch 8.284 ms request with patch 7.3686 ms request This is a 11 improvement OdiPatch committed to CVS HEAD and 2.0 OlegCreated an attachment id 12898 ContentLengthInputStream fix Well it looks like we have a release blocker. Bjarne s patch attached above OlegClose but not quite - what if the readLimit on the mark call has been exceeded A simpler way to fix this would be to simply return false for markSupported and not pass the mark function through and throw an exception on reset. Or in the alternative have ContentLengthInputStream extend BufferedInputStream instead of FilterInputStream and then rely on the protected members of BufferedInputStream rather than duplicating the same logic. I m willing to submit a patch for either choice but I can t decide which one is better. Anyone Eric We already have one BufferedInputStream in the input stream chain. I would not want to have the input double-buffered. I am personally for option 1 if mark cant be fixed OlegI agree that this change may not fix the problem in all cases. Option 1 seems like the way to go. MikeCreated an attachment id 12899 ContentLengthInputStream - no mark reset. Alternative patch provided for ContentLengthInputStream. I thought about adding test-cases but the only thing I could think of was a spurious assertion that markSupported returned false which seemed like a silly point.One more note - let me know if you want me to generate the patch for HEAD as well.Looks good to me. A patch against CVS HEAD would be nice bit not a must OlegIf I hear no objections by 21 00GMT I ll commit the patch as is. OlegEric s patch committed to CVS HEAD and 2.0 Oleg
