Bug in UtilDateTypeConverterImpl
In this converter following line is used return this.getValueFactory .createValue java.util.Date propValue .getTime but propValue must be converted to java.util.Calendar not into long ValueFactory than converts to LongValue not DateValue as expected. Following code works OK final long timeInMilis java.util.Date propValue .getTime final Calendar calendar Calendar.getInstance calendar.setTimeInMillis timeInMilis return this.getValueFactory .createValue calendar but I dont know better Date- Calendar conversion. I don t see a bug here. The unit tests work fine. Futhermore if I apply your patch one unit test fails. Following the JDK doc a Date can be converted into a long which represents the numbers of milliseconds since the standard base time known as the epoch namely January 1 1970 00 00 00. Searching on Date and Calendar is not very friendly with lucene that s why calendar date are converted into long values. I think with this solution following is not possible Custom node type with property of type Date          propertyDefinition name jcr lastModified requiredType Date autoCreated false mandatory true onParentVersion IGNORE protected false multiple false jcrmapping with that property field-descriptor fieldName lastModified jcrName jcr lastModified Domain object with that property protected Date lastModified Jackrabbit throws exception because UtilDateTypeConverterImpl returns LongValue object but property is declared as Date. This can be fixed with changing requiredType Date to requiredType Long but I want use Date type with JCR. Jcrmapping can support saving converting Date properties as Longs as optional feature. I m ok to change if we find a nice solution for searching correctly on date. Lucene has a bad support for searching on date. FYI I would like to specify in the mapping file which atomic converter to use like this field-descriptor fieldName lastModified jcrName jcr lastModified atomicConverterClass com.blable.myDate2LongConverter Of course it will be a optional feature. If the attribute atomicConverterClass is not specify the current code will be used. Done - Now the date attributes are not converted if the UtilDateConverteImpl is used. XPath queries seem to work with date.
