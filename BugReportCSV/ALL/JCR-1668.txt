After RepositoryImpl instance has been created and shut down some classes cannot be unloaded
I ve built a simple web-application which contains one servlet loaded at start-up. In its init method an instance of RepositoryImpl is created in its destroy method this instance is stopped using shutdown . From the servlet code only classes in jackrabbit-core JCR API and Servlet API are referenced. jackrabbit-core version is 1.4.5 and jackrabbit-jcr-commons version is 1.4.2. Other jackrabbit libs are all of 1.4 version. Even if servlet s doGet method never gets called when the web-application is redeployed all its classes still hang in memory which produces a memory leak. init method is     public void init throws ServletException         super.init         try             RepositoryConfig repoConfig RepositoryConfig.create getClass .getResourceAsStream repository.xml .             repo RepositoryImpl.create repoConfig          catch Exception e             throw new ServletException e               while destroy method is     public void destroy         repo.shutdown         super.destroy      Even when I applied patches from JCR-1636 and added TransientFileFactory.shutdown call to destroy method nothing has changed. Tested this in Jetty 6.1.9 and Tomcat 6.0.14.Attaching the test web-application.Patch for JCR-1636 seems to open this new issue or at least is one case for classes that won t get unloaded Attaching a patch improving initial JCR-1636 patch. The patch stops the reaper thread too when shutting the TransientFileFactory down. But even with this patch applied web-application behaves the same way when redeploying classes are not unloaded.Attaching a second version of web-application. It unregisters database drivers and shuts log4j down on servlet destroy. Introspector caches are flushed. But still cannot be unloaded.The following worked for me - Deploy jackrabbit-webapp-1.5-SNAPSHOT into tomcat - Stop tomcat - Move derby-10.2.1.6.jar from WEB-INF lib to commons lib - Redeploying the webapp several times will eventually unload obsolete classes It seems there is a background thread in derby that prevents unloading of classes AntiGC unless you shutdown derby completely. See http db.apache.org derby docs 10.4 devguide tdevdvlp20349.html Marcel thanks for the link. The following line does the trick DriverManager.getConnection jdbc derby shutdown true There s yet another background thread that gives a memory leak in environments where the jackrabbit libraries can be dynamically updated OSGi webapps ... the revision table janitor in the DatabaseJournal class. This thread must be stopped when the stop method of the journal is called. W.r.t. the TransientFileFactory can t we automate the call to shutdown If RepositoryImpl.create registers the just created instance at the TransientFileFactory and RepositoryImpl.doShutdown de-registers the current instance then TransientFileFactory can keep a reference count and call shutDown itself when the reference count is 0. Mmm...that will not work if the TransientFileFactory is used outside the scope of an active repository instance and that could very well be the case judging from the classes that use it...Here s a patch based on Roman s patch. It additionally avoids raw types makes some fields final and makes the stopping field volatile. It also contains the code to properly stop the revision table janitor.Committed revision 796955.Merged to the 1.x branch in revision 801136.
