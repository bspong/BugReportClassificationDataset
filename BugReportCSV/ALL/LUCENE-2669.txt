NumericRangeQuery.NumericRangeTermsEnum sometimes seeks backwards
Subclasses of FilteredTermsEnum are supposed to seek forwards only this gives better performance typically . However we don t check for this so I added an assert to do that while digging into testing the SimpleText codec and NumericRangeQuery trips the assert Other MTQs seem not to trip it. I think I know what s happening Ð say NRQ has term ranges a-c e-f to seek to but then while it s .next ing through the first range the first term after c is f. At this point NRQ sees the range a-c is done and then tries to seek to term e which is before f. Maybe NRQ s accept method should detect this case where you ve accidentally .next d into or possibly beyond the next one or more seek ranges Patch w 2 asserts. NRQ only trips up on the first FilteredTermsEnum assert. That it doesn t trip the 2nd shows that indeed its seek ranges are properly sorted... This is a good catch NRQ should play ping-pong to avoid these unnecessary seeks Here a patch that fixed NRTE to only seek forward. This should also improve NRQ s perf in trunk. It works like the following nextSeekTerm checks that the next range already fits the current term. If not it forwards to the next sub-range and returns a seek term that is at least greater or equal the current term accept checks for the non-hit case seldom as for a NRQ most terms are hits until the upper sub-range-bound is reached if the next sub-range lower bound term on the stack is greater that the current one and only then returns NO AND SEEK. If this is not the case it does not seek but instead only move forward to the next sub-range and repeats the bounds checks for loop . Slightly more readable patch for -loop removed and so first if check in accept negated and used as while-clause instead Mike you set this as fix 3.1 and 4.0 but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily as it uses the old style logic from 3.0. Mike you set this as fix 3.1 and 4.0 but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily as it uses the old style logic from 3.0. Woops right Ð I ll fix to 4.0 only. Mike you set this as fix 3.1 and 4.0 but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily as it uses the old style logic from 3.0. We can maybe fix this also in 3.0 and not fetch a new enum when the same conditions apply. But its totally different code will do that in a separate patch if its easy the 3.0 3.1 enum is complicated... Committed revision 1001582 Thanks Mike for catching this Sweet that was fast Ð thanks Uwe 
