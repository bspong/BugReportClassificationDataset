CloseableThreadLocal is now obsolete
Since Lucene 3 depends on Java 5 we can use ThreadLocal remove to take care or resource management. I don t think using remove is sufficient Ð it only removes the calling thread s entry whereas we want all entries for any thread that stored something into the ThreadLocal to be eligible for GC when close is called. The problem is a live thread is slow ish to free its objects in a ThreadLocal instance even when the ThreadLocal instance is GC d. The close method works around this. Oh I see The lifecyle is different as close ing 1 instance of ClosableThreadLocal will take care of all threads that have accessed it vs only the caller thread for ThreadLocal . This is a very subtle difference and should be documented as such in ClosableThreadLocal IMHO You only need to close a ClosableThreadLocal instance once whereas you need to remove a ThreadLocal instance from every thread that accessed that ThreadLocal instance. That said wouldn t we risk that one thread close the ClosableThreadLocal when other threads are still using it That would invalidate currently used values Given that all threads supposedly follow the same code path wouldn t a remove be called by each thread If we would do it that way we wouldn t need the CloseableThreadLocal at all. Because even with 1.4 you can do a remove by simply setting the value to null internally remove does exactly that see src.java in yor jdk . So CloseableThreadLocal is needed. About the multiple-Threads closing problem This does not affect Lucene as it keeps track when it can be closed. If you close it to early it is the same as closing an IndexInput at the wrong time. So do not worry Right. May I suggest we amend CloseableThreadLocal with some additional documentation Here is a proposal. I have also optimised the removal for the current thread. O In any case this issue can be now be closed as invalid. Thanks for the explanation Michael Why did you add that the class should not be used outside of Lucene Also I don t think we need to reference this issue in the javadocs Michael I wrote the class should not be closed outside Lucene because of the potential multiple-Threads closing problem mentioned earlier. Feel free to change the comments including removing the reference to this issue my JavaDoc patch was a proposal not the absolute truth OK no problem... I ll sharpen the javadoc to state don t close this when other threads are still using it and remove reference to this issue. Thanks CŽdrik 
