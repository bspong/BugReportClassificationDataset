SPI RepositoryService.getItemInfos should be allowed to return entries outside of the requested tree.
michael duerig asked for for that extension of the semantic of RepositoryService.getItemInfos. currently this doesn t work and leads to an inconsistent hierarchy.Specifically I d like to be able to return items for getItemInfos sessionInfo nodeId which are not in the sub tree rooted at nodeId. This is useful in the case where an underlying data store returns such items anyway. For example an underlying data store might always return the parent and all grand-parents of a requested item and probably even some of its siblings i.e. MS Sharepoint . While traversing a repository from the root node to the leaves there wont be any gain. However there is quite some impact on random access. For example when iterating over the result set from a search.Even more specifically I want to broaden the contract of RepositoryService.getItemInfos to Method used to batch-read from the persistent storage. It must contain the NodeInfo for the given NodeId in the Iterator. In addition the iterator may contain arbitrary child ItemInfos from the entire hierarchy. This is fully backward compatible but might significantly simplify implementations. Proposed patchUpdated patch with some performance optimization by assuming locality hierarchy wise of the itemInfos in a batch. Fixed at revision 794012 included test casesReopening since the patch doesn t work. Due to dependency problems I kept running against the wrong version. Sorry I ll try to fix or revert the changes.Broadening the contract of RepositoryService.getItemInfos as suggested above is not possible. There is no way to find the target itemInfo in the returned iterator. Note that the itemId does not help here since the SPI implementation might return another form i.e. UUID based id that the current one.Fixed at revision 794102 With this fix RepositoryService.getItemInfos may return arbitrary item infos. Not just such which are child infos of the target item.michael i don t think it makes too much sense to add an improvement in an old branch without adding it to the trunk as well. reopening. could you fix it in the trunk too thanks angelaFixed in trunk at revision 794302 Merged the 1.5 changes to the 1.x branch in revision 801232.
