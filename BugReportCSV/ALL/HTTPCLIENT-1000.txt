Configure Maximum Connection Lifetimes
Provide a means of configuring a maximum lifetime for HttpClient connections. Currently it would appear as long as a connection is used it may persist indefinitely. This would be useful for situations where HttpClient needs to react to DNS changes such as the following situation that may occur when using DNS load balancing Ê- HttpClient maintains connections to example.com which resolves to IP A Ê- Machine at IP A fails and example.com now resolves to backup machine at IP B Ê- Since IP A is failing connections are destroyed and new connections are made to IP B Ê- Machine at IP A recovers but HttpClient maintains connections to IP B since the connections are still healthy The desired behavior would be that connections to IP B will reach their connection lifetime and new connections could be created back to IP A according to the updated DNS settings.We have started to look into this for ThreadSafeClientConnectionManager. It would appear implementation can be broken into two parts Ê1 Add the notion of a TTL for BasicPoolEntry and have ConnPoolByRoute factor this in when checking if an entry is expired Ê2 Have DefaultRequestDirector release connections that have surpassed their TTL- the released connection will be in turn be cleaned up by the connection pool We have started the first part by adding an optional third argument to ThreadSafeClientConnectionManager that propagates down to BasicPoolEntry where it is factored into isExpired. We considered using HttpParams but it would appear the relevant constructors were deprecated therefor does adding the argument to the constructor seem correct The second part will likely be a little more involved. Currently our intended approach is to add a method to ManagedClientConnection to check the status of a connection. We would call this method in DefaultRequestDirector execute to determine if we should release the internal ManagedClientConnection triggering it to fetch a new one. Are there any thoughts on this approach There are still some corners of the code I have not explored if there is an easier way to do this. Thank you MichajloWould the default maximum TTL be forever i.e. retain the current default behavior i.e. this would be opt-in functionality Yes the current constructors still exist and if the TTL argument is not provided than it will be set to -1 representing forever. Existing functionality will not be effected- not providing the TTL argument should produce the same expected behavior. 1 Add the notion of a TTL for c and have ConnPoolByRoute factor this in when checking if an entry is expired Michajlo I think BasicPoolEntry already has a mechanism for tracking time-to-live expiry attribute which is updated based on the value of the Keep-Alive header or by using a custom keep-alive strategy. Would it make sense to re-use it We considered using HttpParams but it would appear the relevant constructors were deprecated therefor does adding the argument to the constructor seem correct Yes it does. I am trying to reduce the usage of HttpParams in those areas where parameter hierarchies such as request - client - global are not applicable. Currently our intended approach is to add a method to ManagedClientConnection to check the status of a connection This can be tricky. We cannot introduce new methods to the ManagedClientConnection without breaking compatibility with 4.0 API. We might have to use an optional interface or interface extension for new methods. OlegFrom what I ve gathered from the code the BasicPoolEntry expiry field is used to close a connection after it has been idle for some time so as long as a connection is being used its expiry can continuously be pushed back and the connection will last indefinitely. I have been looking into redefining the expiry to be the lesser of expiry in its current definition and the time its expiration date based on TTL. This will bound expiry s growth ensuring that the connection will not last indefinitely. Could you elaborate more on what adding methods to ManagedClientConnection would break I have added isExpired to it and implemented it in BasicPoolConnAdapter and ConnAdapter and everything appears fine however there are a lot of things I am unfamiliar with. The difficulty is that we would like to force DefaultRequestDirector to give up a managed connection that is expired but there is no way of figuring it out from there. On the other hand perhaps the RequestDirector will let go of requests frequently enough that it will not matter I am working on better understanding how if DefaultRequestDirector reuses ManagedClientConnections. Thanks Michajlo as long as a connection is being used its expiry can continuously be pushed back and the connection will last indefinitely I see. Could you elaborate more on what adding methods to ManagedClientConnection would break Binary and API compatibility with 4.0 releases. 4.1 will no longer be compatible with applications that have custom implementations of ManagedClientConnection interface. OlegLooking into the code some more it would appear that just changing how BasicPoolEntry expiry is used is sufficient. Connections appear to be released back to the pool after requests and are cleaned up based on expiry where expiry is how long the connection may remain open for and in the pool after use. By setting expiry to be the lesser of this definition and BasicPoolEntry created TTL we can bound how long connections are maintained for. This patch contains the following changes Ê- ThreadSafeClientConnManager ConnPoolByRoute and BasicPoolEntry have an additional constructor with two extra arguments specifying connection TTL and TimeUnit. TTL defaults to -1 implying infinity the values are propogated down to BasicPoolEntry Ê- BasicPoolEntry contains updated logic to caclulate expiry Ê- Unit test to verify behavior Since TTL defaults to -1 which implies infinity this patch should have no effect if the optional arguments are not provided to the constructors. This patch is submitted with the permission of my employer. Thanks Michajlo Patch checked in. Many thanks Michajlo Oleg
