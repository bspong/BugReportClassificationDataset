Provide support for unconnected sockets
Overview description If Proxy settings are incorrect or host does not reply the HttpClient.executeMethod hangs and HttpMethod.abort does not stop it. Thus you cannot assert that the entire application will stop immediately on demand. Expected Results During a HttpMethod.executeMethod HttpMethod.abort should cancel immediately the executeMethod . Actual Results If HttpMethod.executeMethod freezes because of Proxy bad settings or not responding hostname in fact impossible to open the socket the abort method does not do anything. Platform I tested it on Windows XP and Linux Debian with HttpClient 3.0 RC2 but if you look further I point the problem and the source code of the nightly build is identical . See comments for the dialogue about the problem and 2 Test cases. The solution is described at the end but it may implies a change in the API and works only since Java 1.4.First mail to httpclient-user list Date 15 juin 2005 12 08 Objet Abort HttpMethod hangs due to bad proxy config Related to File MethodAbortTest.java and MethodAbortTest.log Hello I use HttpClient in my application to download description file. I work on ensuring that if the application gets closed everything stop as fast as possible. I m getting problem with this as many companies network http request get out through an http proxy. If I configure correctly the proxy settings and if I try to abort a GetMethod the connection is immediately stopped no problem. Now if I don t configure the proxy settings the abort method does not work and my application hangs until timeout. As my application will be deployed on many networks on which I cannot be sure of the correct settings I cannot accept that the application hangs until timeout. For better understanding here is the unit case I m using to test it source code at the end of this email There is two thread - The main thread that starts the second one sleeps for 3 seconds then aborts the second one. - The GetMethod thread that execute the GetMethod on a dummy site http test.dyndns.org does not work for me that do not reply and timeouts in 10 seconds. Preliminary for testing You must be on a network with a proxy. Configure the proxy settings at the beginning of the class. What do the test It just gets http test.dyndns.org Expected result - http test.dyndns.org does not reply correctly - so the execute wait for 10 seconds - and the main method abort the GetMethod after only 3 seconds - So the application stops just after the abort and don t wait for 10 seconds. 1st test with proxy settings. - uncomment the line client.getHostConfiguration .setProxy PROXY HOST PROXY PORT - Compile and start the class Result - The application stops correctly in 3 seconds just after the abort . 2nd test without proxy settings. - comment the line client.getHostConfiguration .setProxy PROXY HOST PROXY PORT - Compile and start the class Result - the abort method is executed in 3 seconds - BUT the execute method still hangs until the end of the 10 seconds timeout. Do anybody can produce the same type of acting See below my test class and logs. Thanks in advance Benjamin Chevillon France Télécom R DCreated an attachment id 15430 First test case test if HttpMethod thread is aborted immediately or not See HttpMethod logs for resultsCreated an attachment id 15431 First test case result HttpMethod thread with correct proxy settings aborts immediately Created an attachment id 15432 First test case result HttpMethod thread without correct proxy settings aborts does not do anything and thread die at timeout Second mail reply from Oleg Oleg Kalnichevski De Oleg Kalnichevski olegk apache.org Date 15 juin 2005 15 06 Objet Re Abort HttpMethod hangs due to bad proxy config Benjamin Java version 1.2 and below does not seem to offer any other means to interrupt a blocking I O operation except for Socket close. All HttpMethod abort can do is calling Connection close which in its turn simply closes in sequence the output stream the input stream and the socket itself http jakarta.apache.org commons httpclient 3.0 xref org apache commons httpclient HttpMethodBase.html 1007 http jakarta.apache.org commons httpclient 3.0 xref org apache commons httpclient HttpConnection.html 1141 Apparently the socket was blocked in the connect method while trying to establish the connection with the target host which in your case was the proxy org.apache.commons.httpclient.ConnectTimeoutException The host did not accept the connection within timeout of 10000 ms at org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket ReflectionSocketFactory.java 154 at org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket DefaultProtocolSocketFactory.java 124 So technically speaking from the JRE perspective the socket was still closed when HttpMethod abort was attempted hence Socket close appears to have made no effect on the blocked socket. I am afraid there s not really much we can do here. The only resort could possibly try would be calling Socket shutdownInput through reflection but I suspect it will have no effect on sockets blocked in the connect method either http java.sun.com j2se 1.4.2 docs api java net Socket.html shutdownInput OlegThird mail reply from Benjamin Date 15 juin 2005 18 01 Objet Re Abort HttpMethod hangs due to bad proxy config Thank you for your precise and quick reply. Encourage by this precision I downloaded the source code and traced it. Maybe this email should be posted to dev mailing list except if this question has already been fixed. Indeed the client.executeMethod hangs in org.apache.commons.httpclient.protocol.ReflectionSocketFactory where the socket is opened. It hangs on the line 139 in the trunk CVS 138 SOCKETBIND METHOD.invoke socket new Object localaddr 139 SOCKETCONNECT METHOD.invoke socket new Object remoteaddr new Integer timeout These 2 lines are similar to         socket.bind localaddr         socket.connect remoteaddr timeout But I was puzzled when you say that we cannot do much against it because we can cancel some similar problem on web browser and it takes effect immediately. Actually the socket.connect method can be canceled with socket.close see the class attached a socket is opened with a 10 seconds timeout and a second thread close it only 5 seconds later. It works. sorry for the quick dirty style of the class It does not work on HttpClient because the abort method close only the InputStream which is not already created at this moment since the socket hangs on opening . There are 2 problems - the socket is open within the same call of its creation so we don t have a pointer to it to close it . - the abort method has no way to call the close method deeply. The chain of call is here HttpClient.executeMethod - ...- HttpConnection.open - DefaultSocketFactory.createSocket - ReflectionSocketFactory.createSocket The public class closest to Socket is HttpConnection. A socket is created with the open method. It calls ReflectionSocketFactory.createSocket but inside this method the socket.bind .. and socket.connect .. methods are not separated and hangs. Thus the HttpConnection.open method never returns and the HttpConnection cannot close the socket since it socket variable is null . To resolve it there should be 2 calls to ReflectionSocketFactory in HttpConnection - One to create the socket until bind . This method always return immediately and this way we could have a variable that points to the Socket instance. - A second call to connect the socket. If the second call hangs then we could call HttpConnection.close since the socket variable is not null. Finally there should be a way to for the HttpClient to close the HttpConnection which concerns it. What do you think about this Tell me if I am wrong. Thanks Benjamin Created an attachment id 15433 Second test case It is possible to cancel immediately even if the socket cannot be connected Created an attachment id 15434 Second test case results socket.close stops immediately Fourth Mail reply from Oleg decision to file a bug Date 15 juin 2005 18 41 Objet Re Abort HttpMethod hangs due to bad proxy config Benjamin Your analysis is correct. Sockets blocked waiting in the connect method can indeed be interrupted by calling close on them. My assumption was wrong. The trouble is that the changes you are suggesting cannot be implemented without breaking the existing API. We cannot change ProtocolSocketFactory interface so late in the release process. Besides ability to create unconnected sockets has been introduced in Java 1.4 and cannot be easily simulated in older versions whereas HttpClient must stay Java 1.2 compatible until next major release 4.0 that is . Please file a bug feature request in Bugzilla and we ll get this feature incorporated in the next major release of HttpClient. As of version 4.0 HttpClient will require Java 1.4 or above. Oleg Resume of action to take and what s wrong Pb reason It does not work on HttpClient because the abort method close only the InputStream which is not already created at this moment since the socket hangs on opening . Actually the socket.connect method can be canceled with socket.close see the class attached There are 2 problems - the socket is open within the same call of its creation so we don t have a pointer to it to close it . - the abort method has no way to call the close method deeply. Solution To resolve it there should be 2 calls to ReflectionSocketFactory in HttpConnection - One to create the socket until bind . This method always return immediately and this way we could have a variable that points to the Socket instance. - A second call to connect the socket. If the second call hangs then we could call HttpConnection.close since the socket variable is not null. Finally there should be a way to for the HttpClient to close the HttpConnection which concerns it. Troubles The trouble is that the changes you are suggesting cannot be implemented without breaking the existing API. Besides ability to create unconnected sockets has been introduced in Java 1.4 and cannot be easily simulated in older versions whereas HttpClient must stay Java 1.2 compatible until next major release 4.0 that is .What happens if you just call Thread.interrupt A blocking call should immediately return with an InterruptedException IMHO.Right. But it depends on what you want to achieve. There may be cases where one may want to unblock the socket but not necessarily kill the running thread OlegAnyway I tried Thread.interrupt and it does not interrupt http java.sun.com j2se 1.4.2 docs api java lang Thread.html interrupt I don t think the thread is on any of the states listed no wait or sleep I don t think Socket creation is an InterruptibleChannel since it is not already connected nor Selector I don t understand quite well but... . These states seems to be linked to java.nio package which is not the case of java.net.Socket.If memory serves me correctly you must close the socket that a thread is blocked reading on in order to get that thread to continue processing beyond the call to read.That s correct but as I said it on comment 10 you cannot close the socket since there is no variable pointing to it. There is no variable because the creation and the connection of the socket are in the same function. The workaround is to split the creation and the connection ie split bind and connect of the Socket. This way a pointer to the Socket is returned and you can call close on this socket if the thread is blocked as you said it. As Oleg said these changes involve modifying the API so it marked for release 4.0. By the way. I don t know how important this bug has been marked I see P2 but I don t know what it means but I think it is very important because this bug means that you cannot control the behaviour of the client in a real time environnement for example you cannot be sure that the client will be closed immediately . BenjaminHere is a take on a new socket factory interface for HttpClient 4.x that supports unconnected sockets. It has a new method for returning an unconnected socket and the old method gets an optional unconnected socket as an additional argument. That way the timeout and local address binding stuff remains encapsulated in the factory. This patch addresses mainly the new interface. Implementations are modified but not necessarily pretty and definitely not tested. Since this issue is likely to affect HTTPCLIENT-602 I ll commit the patch next week unless somebody complains. We can straighten out the details later. Considering the original problem report this patch will not solve the issue completely. We can support unconnected sockets all right but where does the abort method go now that HttpMethod is gone - cheers   Roland Patch look good. It however breaks some test cases. TestSSLSocketFactory no longer compiles for me. Can this method be given a better name connectSocket maybe     Socket createSocket         Socket sock         String host         int port         InetAddress localAddress         int localPort         HttpParams params      throws IOException UnknownHostException ConnectTimeoutException Considering the original problem report this patch will not solve the issue completely. We can support unconnected sockets all right but where does the abort method go now that HttpMethod is gone - Implementing abort method should be double. Connection release may prove a much more serious problem in my opinion. I was thinking about something along these lines interface Request extends HttpRequest    void setConnection HttpConnection conn  void abort throws IOException interface Response extends HttpResponse    void setConnection HttpConnection conn  void abort throws IOException  void releaseConnection Better interface names are welcome. Oleg Hi Oleg I had forgotten that there are test cases - Will fix them before checking in. I had the method called connectSocket then realized that all other methods in the socket factory were called createSocket. I ll change it back tomorrow . My thoughts for abort were with the HttpClient interface HttpClient   void abort HttpRequest request and internally the HttpClient keeps a map from requests to allocated connections and other resources . Should work for connection release as well and avoids setting the connection on request and response. The response might need a link back to the client if we want to have a release method there. cheers   Roland patch committed with modifications - createSocket renamed to connectSocket - test case fixed Marking this issue as resolved. Additional work to make use of the unconnected sockets will be performed has part of other issues.
