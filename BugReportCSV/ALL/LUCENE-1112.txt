Document is partially indexed on an unhandled exception
With LUCENE-843 it s now possible for a subset of a document s fields terms to be indexed or stored when an exception is hit. This was not the case in the past it was all or none . I plan to make it all or none again by immediately marking a document as deleted if any exception is hit while indexing it. Discussion leading up to this http www.gossamer-threads.com lists lucene java-dev 56103 Patch demonstrating the problem testWickedLongTerm modified to fail when numDocs grows although addDocument throws an exception. Thanks Doron I ll fold this in though I ll move it to the testExceptionFromTokenStream case since it looks like we re going to no longer throw an exception on hitting a wicked-long-term . Patch attached. All tests pass. I plan to commit in a day or two. Here are the changes No longer throw an exception when massive term is hit. Instead we now print this message to infoStream if set WARNING document contains at least one immense term longer than the max length 16383 all of which were skipped. Please correct the analyzer to not produce such terms. The prefix of the first immense term is xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx... Still increment position when we hit a massive term An unhandled non-aborting exception immediately marks the document that hit the exception as deleted. I added comments at the top of DocumentsWriter to explain aborting vs non-aborting exceptions. This change actually adds the infrastructure for deleting by doc ID which we ve discussed adding to IW in the past but I haven t exposed any public APIs for doing so. No longer log to infoStream how many docs were deleted on flush since that deletion count is not accurate when mixing delete by term and by docID. I skimmed at the long token part of the patch In the test why is the position increment of another 3 I think it should be 2 assertEquals failed document should not be in the index 2 reader.numDocs should be document with skipped token should be in the index I believe that positon in DocumentsWriter is not required because invertField already incremented the position before calling addPosition my fault I suggested to still increment the position... In the test why is the position increment of another 3 I think it should be 2 It s not position increment that s 3 it s position that s 3 And I think it should be 3 because this field is abc xyz massive-term another term so another should have position 3 since we count massive-term as one position assertEquals failed document should not be in the index 2 reader.numDocs should be document with skipped token should be in the index Woops yes I ll fix the string. I believe that positon in DocumentsWriter is not required because invertField already incremented the position before calling addPosition my fault I suggested to still increment the position... Well invertField increments by positionIncrement minus 1 then addPosition increments by 1 this mirrors how DocumentWriter used to work . It s not position increment that s 3 it s position that s 3 ... Well invertField increments by positionIncrement minus 1 then addPosition increments by 1 this mirrors how DocumentWriter used to work . Right my mistake.
