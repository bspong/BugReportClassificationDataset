EdgeNGramTokenFilter stops on tokens smaller then minimum gram size.
If a token is encountered in the stream that is shorter in length than the min gram size the filter will stop processing the token stream. Working up a unit test now but may be a few days before I can provide it. Wanted to get it in the system. The NGramTokenFilter is affected by the same bug. Patch includes test to highlight broken EgdeNGramTokenFilter and NGramTokenFilter. Fixes for both. patch looks good ... the one question i have is whether the fix meets user expectations the patch as posted skips any input tokens that are shorter then the minimum ngram length ... is that what most people will expect or will people expect shorter tokens to be passed through ie should min be the minimum token size produced by the filters a hard min or should it be the minimum ngram size produced by the filter a soft min either way this patch is an improvement i m just wondering what we want to define the semantics to be or if we want to make an additional option for this I agree this is an improvement but like Hoss I m worried about silently skipping shorter-than-specified-min-ngram-size tokens. Perhaps we need boolean keepSmaller somewhere so we can explicitly control the behaviour Perhaps we need boolean keepSmaller somewhere so we can explicitly control the behaviour I m not sure. Is there a use case for this or is it an XY-problem I m not 100 sure - I m not using ngrams at the moment so I have no place to test this out but skipping a shorter than minimal ngrams seems like it would result in silent data loss. Ah here example What would happen to to be or not to be if min 4 and we relied on ngrams to perform phrase queries All of those terms would be dropped so a search for to be or not to be would result in 0 hits. If the above is correct I think this sounds like a bad thing that one wouldn t expect... Although you have a valid point I d like to argue this a bit. My arguments are probably considered silly by some. Perhaps it s just me that use ngrams for something completly different than what everybody else does but here we go Adding the feature as suggested by this patch is according to me to fix symptoms from bad use of character ngrams. BOL EOL whitespace and punctuation are all valid parts of character ngrams than can increase precision recall quite a bit. EdgeNGrams could sort of be considered such data too. So what I m saying here is that I consider your example a bad use of charachter ngrams that the whole sentance should have been grammed up. So in the case of 4-grams the output would end up as to b o be be be o and so on. Perhaps even to to b o be and so on. Supporting what I suggest will of course mean quite a bit of more work. A whole new filter that also does input text normalization such as removing double spaces and what not. That will probably not be implemented anytime soon. But adding the features in the patch to the filter actually means that this use is endorsed by the community and I m not sure that s a good idea. I thus think it would be better with some sort of secondary filter that did the exact same thing as the patch. Perhaps I should leave this issue alone and do some more work with LUCENE-1306 Karl - LUCENE-1306 - I agree I think the existing edge and non-edge ngram stuff should be folded into LUCENE-1306 or the other way around if it s easier . But won t question of what we do with the chunks shorter than min ngram remain Does adding that boolean hurt anything other than an if test for every ngram . I think is better to keep the main goal of ngram groups of characters between min and max. If is need in any practical situation for minimum ngram equals with one or two characters this can be done setting the minimum....otherwise the filter must work in the way that is expected.. If I expect subword with minimum 3 length why do I get a token with two characters while it is not accomplish the condition I m getting convinced to just drop ngrams minNgram. If nobody complains by the end of the week I ll commit. Otis this one looks ready to commit Thanks Todd Co. Sending CHANGES.txt Sending analyzers src java org apache lucene analysis ngram EdgeNGramTokenFilter.java Sending analyzers src java org apache lucene analysis ngram NGramTokenFilter.java Sending analyzers src test org apache lucene analysis ngram EdgeNGramTokenFilterTest.java Sending analyzers src test org apache lucene analysis ngram NGramTokenFilterTest.java Transmitting file data ..... Committed revision 794034.
