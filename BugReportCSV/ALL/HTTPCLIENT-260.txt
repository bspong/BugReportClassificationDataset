Authentication does not respond to stale nonce
When using digest authentication HTTP allows the server to mark the nonce value as stale. The client then must re-authenticate with a new nonce value provided by the server. Currently HttpClient does not support this functionality. I ve created a patch that allows HttpClient to support stale nonce values. It is attached below. The patch should be applied to HttpMethodBase.java home scohen downloads httpclient-src commons-httpclient-2.0-rc1 src java org apache commons httpclient HttpMethodBase.java 2003-07-31 22 15 26.000000000 -0400 org apache commons httpclient HttpMethodBase.java 2003-08-20 17 22 52.000000000 -0400 1351 1384                 throws IOException when errors occur reading or writing to from the         connection         throws HttpException when a recoverable error occurs         protected void addAuthorizationRequestHeader HttpState state HttpConnection conn throws IOException HttpException LOG.trace enter HttpMethodBase.addAuthorizationRequestHeader HttpState HttpConnection                add authorization header if needed if getRequestHeader HttpAuthenticator.WWW AUTH RESP null Header challenges getResponseHeaderGroup .getHeaders HttpAuthenticator.WWW AUTH if challenges.length 0 try AuthScheme authscheme HttpAuthenticator.selectAuthScheme challenges                       HttpAuthenticator.authenticate authscheme this conn state catch HttpException e log and move on if LOG.isErrorEnabled LOG.error e.getMessage e                                                                                                                                                     Adds a tt Content-Length tt or tt Transfer-Encoding Chunked tt         request header as long as no tt Content-Length tt request header         already exists.         1351 1391                 throws IOException when errors occur reading or writing to from the         connection         throws HttpException when a recoverable error occurs         protected void addAuthorizationRequestHeader HttpState state HttpConnection conn throws IOException HttpException LOG.trace enter HttpMethodBase.addAuthorizationRequestHeader HttpState HttpConnection                                                                                             add authorization header if needed Header challenges getResponseHeaderGroup .getHeaders HttpAuthenticator.WWW AUTH if challenges.length 0 try AuthScheme authscheme HttpAuthenticator.selectAuthScheme challenges if getRequestHeader HttpAuthenticator.WWW AUTH RESP null isNonceStale authscheme                       HttpAuthenticator.authenticate authscheme this conn state catch HttpException e log and move on if LOG.isErrorEnabled LOG.error e.getMessage e                                                                                                                                      private boolean isNonceStale AuthScheme authscheme return authscheme.getSchemeName .equalsIgnoreCase digest true .equalsIgnoreCase authscheme.getParameter stale                Adds a tt Content-Length tt or tt Transfer-Encoding Chunked tt         request header as long as no tt Content-Length tt request header         already exists.         2419 2430                   buffer.append port                              buffer.append               buffer.append authscheme.getID               String realm buffer.toString               if realmsUsed.contains realm                   if LOG.isInfoEnabled                       LOG.info Already tried to authenticate to                                 realm but still receiving                                 statusCode .                    2426 2442                   buffer.append port                              buffer.append               buffer.append authscheme.getID               String realm buffer.toString check to see if the server has made our nonce stale. if it has re-auth               if realmsUsed.contains realm if isNonceStale authscheme return false                   if LOG.isInfoEnabled                       LOG.info Already tried to authenticate to                                 realm but still receiving                                 statusCode .                    Hi Steve I agree that HttpClient does not handle the stale digest parameter but I do not think this should be a problem in standard use. Under what circumstances is this showing up Also if you could please repost your patch as an attachment and in diff -u format. Thanks MikeWe re working on a real estate standard called RETS and in order to interoperate we must deal with a specific vendor that expires nonce after the first auth attempt. I freely admit that this is very strange behavior but I can t tell them to change their client since they are technically in line with the spec both RETS and HTTP . I m sure this won t come up much but I don t see a reason why HttpClient shouldn t support a stale nonce. Here s the diff -u home scohen downloads httpclient-src commons-httpclient-2.0-rc1 src java org apache commons httpclient HttpMethodBase.java 2003-07-31 22 15 26.000000000 -0400 org apache commons httpclient HttpMethodBase.java 2003-08-21 13 26 43.000000000 -0400 -1353 30 1353 37        connection        throws HttpException when a recoverable error occurs        - protected void addAuthorizationRequestHeader HttpState state - HttpConnection conn - throws IOException HttpException - LOG.trace enter HttpMethodBase.addAuthorizationRequestHeader - HttpState HttpConnection protected void addAuthorizationRequestHeader HttpState state HttpConnection conn throws IOException HttpException LOG.trace enter HttpMethodBase.addAuthorizationRequestHeader HttpState HttpConnection              add authorization header if needed - if getRequestHeader HttpAuthenticator.WWW AUTH RESP null - Header challenges getResponseHeaderGroup .getHeaders - HttpAuthenticator.WWW AUTH - if challenges.length 0 - try - AuthScheme authscheme HttpAuthenticator.selectAuthScheme challenges Header challenges getResponseHeaderGroup .getHeaders HttpAuthenticator.WWW AUTH if challenges.length 0 try AuthScheme authscheme HttpAuthenticator.selectAuthScheme challenges if getRequestHeader HttpAuthenticator.WWW AUTH RESP null isNonceStale authscheme                      HttpAuthenticator.authenticate authscheme this conn state - catch HttpException e - log and move on - if LOG.isErrorEnabled - LOG.error e.getMessage e - catch HttpException e log and move on if LOG.isErrorEnabled LOG.error e.getMessage e                                                    private boolean isNonceStale AuthScheme authscheme return authscheme.getSchemeName .equalsIgnoreCase digest true .equalsIgnoreCase authscheme.getParameter stale              Adds a tt Content-Length tt or tt Transfer-Encoding Chunked tt        request header as long as no tt Content-Length tt request header -2423 6 2430 11              String realm buffer.toString                 if realmsUsed.contains realm check to see if the server has made our nonce stale. if it has re-auth if isNonceStale authscheme return false                  if LOG.isInfoEnabled                      LOG.info Already tried to authenticate to                                realm but still receiving I agree. It does appear to be compliant behavior I just thought it was strange. If you know of a server configuration that I can test against or if you have a wire log http jakarta.apache.org commons httpclient logging.html that would be great. Does anyone have a problem with this patch or something like it going into 2.0 MikeAttached below is a new solution to this problem along with a test case. Steve please give this a try when you have a chance. MikeCreated an attachment id 8029 fix 2 Mike I think it is OK to commit this one. OlegPatch applied.That works for me.Sorry You are absolutely correct. Mistake happens because of the JBoss environment including Jakarta Commons-HttpClient 2.0rc1 in the distribution of JBoss 3.2.3 . Tested with Jakarta Commons-HttpClient 2.0final and everything looks like it works. Thanks to you.Sorry You are absolutely correct. Mistake happens because of the JBoss environment including Jakarta Commons-HttpClient 2.0rc1 in the distribution of JBoss 3.2.3 . Tested with Jakarta Commons-HttpClient 2.0final and everything looks like it works. Thanks to you. HTTPCLIENT-327 has been marked as a duplicate of this bug. 
