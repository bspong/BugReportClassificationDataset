Node.restore may throw InvalidItemStateException
It seems that ItemManager cache is not maintained correctly. I m getting InvalidItemStateException propertyId has been modified externally tryin restore checkout versionable nodes in single thread. ItemState should be evicted from ItemStateManager cache when modified it seems that status of ItemState is changed to MODIFIED but itemState remains in the cache.Attached simple java class that can be used to reproduce the issue.When the versionable child node is restored it is first removed which is IMO not needed. The following change worked for me while all tests still pass Index src main java org apache jackrabbit core NodeImpl.java src main java org apache jackrabbit core NodeImpl.java revision 592000 src main java org apache jackrabbit core NodeImpl.java working copy -4010 7 4010 7                                                    oldVersion n.getBaseVersion .getName                       else if n.getParent .isSame this - n.internalRemove true oldVersion n.getBaseVersion .getName                       else                           since we delete the OPV Copy children beforehand all                           found nodes must be outside of this tree Tobi what do you think Somehow related to JCR-423.There is a lot of layers in Jackrabbit and almost each layer has own cache. It seems that caches are not invalidated properly. During save method on ItemImpl transient item states are disposed from SessionItemStateManager but it seems than ItemManager cache is not invalidated. Sometimes it works because ItemManager uses weak references but in some cases it is causing problems like this. To make it work I needed to put such line SessionImpl session .getItemManager .dispose between restore and checkout in our code. This line clears ItemManager cache completely.Marcel after applying your fix Jackrabbit tests passes but my application tests don t. It seems that by removing this line some events can be missed and index is not rebuilt correclty node can be indexed twice after restore . I think that problem is with caches that are not maintained correctly. I ve tried to evict items from ItemManager cache during save but is hard to understand dependencies between all the caches and I encountered another problem with dispatchindevents and HierarchyManager.Thanks for your feedback. IIRC the ItemManager is a listener on the ItemStateManager which provides the ItemStates for Items. This means it should get notifications whenever an ItemState changes.Actually ItemManager is notified on ItemState changes proper methods stateModifeid stateDiscarded are called but those methods do not invalidate the ItemManager cache. I tried do evict item from cache in ItemManager by adding single line     public void stateModified ItemState modified         ItemImpl item retrieveItem modified.getId         if item null             item.stateModified modified evictItem modified.getId               but it doesn t work seems that observation mechanism triggered after disposing transient states during stateMgr.update needs this data still to work properly. Here is exception after adding evict in stateModified method Caused by org.apache.jackrabbit.core.state.ItemStateException Unable to resolve path for item b0ec45fd-cf39-4ab5-bcd0-a8e95d06008f http www.jcp.org jcr 1.0 predecessors at org.apache.jackrabbit.core.observation.EventStateCollection.getPath EventStateCollection.java 520 at org.apache.jackrabbit.core.observation.EventStateCollection.createEventStates EventStateCollection.java 385 at org.apache.jackrabbit.core.state.SharedItemStateManager Update.begin SharedItemStateManager.java 655 at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate SharedItemStateManager.java 826 at org.apache.jackrabbit.core.state.SharedItemStateManager.update SharedItemStateManager.java 856 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 324 at org.apache.jackrabbit.core.state.XAItemStateManager.update XAItemStateManager.java 313 at org.apache.jackrabbit.core.state.LocalItemStateManager.update LocalItemStateManager.java 300 at org.apache.jackrabbit.core.state.SessionItemStateManager.update SessionItemStateManager.java 306 at org.apache.jackrabbit.core.ItemImpl.save ItemImpl.java 1244 my 2 cents i don t believe that this issue is related to ItemManager s cache of ItemImpl instances. quote from ItemManager s javadoc The ItemManager s responsabilities are ... guaranteeing that there aren t multiple instances representing the same Node or Property associated with the same Session instance. ... quote from ItemManager s javadoc there s no need to explicitly evict cached ItemImpl instances from ItemManager s cache. quite the contrary doing so would violate the ItemManager s contract.There is definitely problem with modCount attribute of ItemState. During each save this attribute is incremented by SharedItemStateManager but sometimes after restore ItemState holded by Items in ItemManager cache still has different old valueo modCount. Then during next save operation exception is thrown.i m able to reproduce it and will take a look at itthe problem is in the special case of the restore operation where an entire subnode is internally removed and recreated. this results in a change log that contains deleted and created property states with the same id. after the shared states are persisted the notification events update all caches correctly but when the local item state manager updates his state those deleted created states are thrown out of the cache. this causes a later reconnect to fail and the item is marked as stale. fix re-cache the state on a created event.fixed as proposed.change produces a lot of warning messages    ItemStateReferenceCache overwriting cached entry uuid ItemStateReferenceCache.java line 117    MLRUItemStateCache overwriting cached entry uuid MLRUItemStateCache.java line 140    ItemStateMap overwriting map entry uuid ItemStateMap.java line 8fixed warning messages.changes produce failures of jcr2spi tests. see JCR-1293.without the modifications the tests mentioned in JCR-1293 pass.not related to issue JCR-1293. so resolving it again.
