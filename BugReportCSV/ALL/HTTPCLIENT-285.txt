Ability to ignore reject cookies altogether
I was looking for a way to ignore cookies altogether but there doesn t appear to be one. I could definitely use this capability right now and I can see others making use of it at times.CVS HEAD already provides support for pluggable cookie policies. Writing and plugging in a reject-all-damn-cookies policy should be trivial in my option. I am a bit hesitant though to include such a policy into the stock version of HttpClient. Does anybody have a strong opinion either for or against reject all cookies policy as a standard feature OlegI don t have a strong opinion on the matter but it sounds like a good candidate for contrib. MikeI wonder whether cookie policy is the right place to address this particular issue. I m using the HTTP Client as an implementation of RFC 2616 HTTP 1.1 and cookies are specified in RFC 2965. I d prefer a way to switch off cookie parsing altogether like I can switch off automatic authentication or redirect handling. Preferably with the cookie parsing logic exposed to the programmer for cases when the application decides to parse some or all cookies anyway. Currently I m using a derived HttpState implementation that overrides all setters to no-ops. The primary reason for this is that my HttpState object becomes read-only and the same object can be used by various threads simultaneously without interferences. But I guess that s 3.0 talk. For 2.1 the reject-all-damn-cookies policy sounds like an appropriate solution that can be implemented with little effort.It s certainly a feature that should be provided by the stock implementation. Every web browser has this feature so I think we should provide it too.All right. Democracy wins.Created an attachment id 8760 patch 1 Roland I agree. I think disabling cookie parsing altogether makes more sense. Attached above is a patch that does exactly that. This change involves no API changes so it should be more than reasonable for 2.1. MikeMike I think there s a little more elegant solution. All it takes is a cookie policy that overrides CookieSpec parse method and simply returns an empty array of cookies without actually parsing the header. That is it. No need for the COOKIE PARSING ENABLED. OlegHello Oleg while there is no strict need to have a COOKIE PARSING ENABLED flag I still feel it is more elegant to have one. Not because it achieves a different result than a no-cookies policy but because it points out that cookie parsing is an optional feature that can be switched off as opposed to having a pass-through-without-effect mode. cheers   Roland Roland I respectfully disagree. What good does it make to have a cookie policy in place and to not parse cookie headers One would send a cookie to the target server only to end up ignoring it when it comes back with the response. I can t think of a case where this kind of setup would be of any use. Cheers OlegHello Oleg you re right that the cookie policy becomes pointless if cookie parsing is disabled. Like the bass and treble knobs on my old amplifier become useless if I enable the CD Direct mode. What about cases when you want to disable cookie parsing for some methods but have a cookie policy in place for those that do parse cookies For my application it doesn t matter in which way cookie parsing is disabled. It will have to handle cookies anyway because they need to be stored outside of the HTTP Client s HttpState and I don t want to create a new HttpState object for each request. But I still find the off switch preferable. I may even be able to rely on the HTTP Client s cookie parsing manually without having cookies stored in the state. regards   Roland What about cases when you want to disable cookie parsing for some methods but have a cookie policy in place for those that do parse cookies Roland that should not be a problem as the cookie policy applies on per method basis. But I still find the off switch preferable. I may even be able to rely on the HTTP Client s cookie parsing manually without having cookies stored in the state. You can instantiate any cookie spec of your liking and use it to parse cookie headers manually. Tastes differ of course but I personally do not see a lot value in having COOKIE PARSING ENABLED option. Again it s just an opinion which may well be wrong. Oleg Oleg Unfortunately I think you are correct A new cookie policy is more appropriate. Expect a new patch later today. MikeI ve just started to write a new RejectAllCookiesSpec or something like that and I have a question. What do we want to do about cookie formatting and matching My plan was to extend CookieSpecBase and just override parse . This means that cookies can still be sent they just won t be parsed. What about if we need to send cookies in the RFC2109 format Other than creating a different non-parsing spec for each real spec I think we may have to use the previous COOKIE PARSING ENABLED patch. What does everyone think MikeCreated an attachment id 8797 Patch 2 Here s another patch. This one disables cookie parsing using a new cookie policy. MikeOr else we could have two cookie spec params one for parsing and one for formatting. Then you define a new policy which neither parses nor formats cookies and folks can mix and match different specs at will. I thought for a few seconds about having a default cookie spec for both and defining an optional second parameter for the parsing case but things would get unnecessarily complicated. Having two parameters treats formatting and parsing as two different options that can be configured independently which seems more appropriate to me. cheers   Roland Mike I think CookieSpec match methods should be overridden too. If cookies are not parsed authomatically they should not be sent automatically. One could still format cookies using a cookie policy of his her liking and manually add the resultant cookie headers to the request provided the HTTPCLIENT-286 is resolved OlegCreated an attachment id 8871 Patch 3 Oleg Agreed. Here s a new patch that completely ignores cookies. MikeLooks good to me. OlegPatch applied to HEAD. MikeI see this change didn t make it into rc3. It s going to be in 2.0 full right Nevermind - I just saw the target of 2.1. Oh well.
