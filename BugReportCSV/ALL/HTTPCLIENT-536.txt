misleading lack of javadoc in StringRequestEntity
When using httpclient2 we were doing the following Add the Content-type header. This sets the charset to UTF-8. method.setRequestHeader Content-type text xml charset UTF-8 The given string is converted internally by the post method into a UTF-8 encoded byte array. method.setRequestBody xmlstring The comments show that this was the way we used to obtain a UTF-8 encoded XML document if this was wrong that may be the origin of the problem . When upgrading to httpclient3 and killing deprecated code this was converted to Add the Content-type header. This sets the charset to UTF-8. method.setRequestHeader Content-type text xml charset UTF-8 The given string is converted internally by the post method into a UTF-8 encoded byte array.         method.setRequestEntity new StringRequestEntity xmlstring which went without problem during the tests on my machine and on test production machine.. because platforms charset were UTF-8 which is not the case for production machines I think the javadoc of the used StringRequestEntity constructor should strongly state that it uses String getBytes for the content which uses the platform charset. Also I didn t notice any upgrade to 3.x documentation which would have helped me Agreed this needs documentation. And I vote for changing the class for 3.1 such that the default platform encoding is never used and an encoding must always be specified explicitely. The default platform encoding does not make the least sense in a networked environment. Being unaware of char to byte conversions and thus ignoring the encoding always leads to problems. We should encourage our users to think about the encoding by removing silly defaults. for 3.0 document behaviour correctly and deprecate the method for 3.1 always require an encoding explicitely In reply to comment 0 Add the Content-type header. This sets the charset to UTF-8. method.setRequestHeader Content-type text xml charset UTF-8 The given string is converted internally by the post method into a UTF-8 encoded byte array. method.setRequestEntity new StringRequestEntity xmlstring This should do the trick RequestEntity entity StringRequestEntity xmlstring text xml UTF-8 method.setRequestEntity entity Also I didn t notice any upgrade to 3.x documentation which would have helped me Well since no one bothered to contribute one it is not there. I can t do everything alone. We happily accept contributions. OlegOrtwin I agree more than 100 that default platform encoding should not be used. Oleg thanks for the suggestion please don t take it as personal critics I think you re doing an incredible job with HttpClient and we are already more than very happy with the availability as open source of this very fine software. I do contribute myself to some free software projects even in the documentation field however I don t have the necessary knowledge about HttpClient to contribute the missing upgrade guide. Please excuse me if my message sounded rude to your much appreciated contributions.Created an attachment id 17157 proposed patch The patch deprecates the first constructor and removes its use from the test cases. It also checks for inconsistent definition of the charset in the second constructor. So new StringRequestEntity text xml charset ISO-8859-1 UTF-8 will throw a runtime exception. The default platform encoding is still used when new StringRequestEntity null null is called. In reply to comment 3 Oleg thanks for the suggestion please don t take it as personal critics No worries nothing personal. To the contrary critique is very welcome. I simply enjoy working in HttpComponents HttpClient and ask nothing in return. Writing good documentation is unfortunately is not something I do well or enjoy doing for that matter and therefore some help from the community at large would be quite appreciated OlegCreated an attachment id 17159 Patch a slightly different take How about a slightly less drastic solution OlegOleg I thought about that as well but it effectively changes the behaviour of the method. However the behaviour is now independent of the platform which is certainly a good thing. I m not sure how useful this specific encoding is in the general case. I still opt for letting the user set it explicitely. Odi In reply to comment 7 Oleg I thought about that as well but it effectively changes the behaviour of the method. However the behaviour is now independent of the platform which is certainly a good thing. I m not sure how useful this specific encoding is in the general case. I still opt for letting the user set it explicitely. Odi I can t say I disagree. I personally do not have a very strong preference for either. What do others think Oleg Another option would be to just leave the method alone for 3.0 don t switch to ISO-8859-1 or deprecate and just make it clear via Javadocs what it does. Mike In reply to comment 9 Another option would be to just leave the method alone for 3.0 don t switch to ISO-8859-1 or deprecate and just make it clear via Javadocs what it does. Mike 1 I think this the best option. OlegCreated an attachment id 17214 Javadoc patch Folks please review Oleglooks goodYep. MikeJavadoc patch checked in OlegPatch take 1 . Please review OlegHi Oleg I think inline links need to be written as link ... not just ... Otherwise the patch looks fine. cheers and good night -   Roland Patch checked in Oleg
