reorganize contrib modules
it would be nice to reorganize contrib modules so that they are bundled together by functionality. For example the wikipedia contrib is a tokenizer i think really belongs in contrib analyzers there are two highlighters i think could be one highlighters package. there are many queryparsers and queries in different places in contrib That d be great 1 Here are my initial thoughts on this. I don t think we have to do the entire thing at one time either fold contrib regex into contrib queries alongside similar you would see regex fold the four queryparsers in contrib misc into contrib queryparser so under o.a.l.qp you would see core standard complexPhrase ext precedence analyzing fold the fast-vector-highlighter under highlighter so under o.a.l.search you would see highlight vectorhighlight In a second phase potentially a different issue i would like to discuss issues that might involve backwards breaks xml-query-parser really belongs in contrib queryparser but we would have to change pkg names. wikipedia really belongs in analysis but we would have to change pkg names. contrib surround what to do has both queryparser and queries maybe should stay as is. Any objections to doing the first part which has no pkg naming changes Here are my initial thoughts on this. 1 I think this initial re-org is great Robert I think it d be OK to rename XML QP and Wikipedia as well. Surround does seem trickier... maybe leave that for now. Robert - I think that s great reorganization. I do want to propose to omit the component name from the package where it makes sense . I.e. unless we want to have o.a.l.qp it doesn t mean that all QPs under contrib queryParser need to belong to the same package. If it makes sense for all of them to belong to o.a.l.search as an example then that s where they should go IMO. So I think it s ok if under contrib queryparser or contrib analyzers you ll see packages like o.a.l.analysis.ar fr snowball as well as I m perfectly fine if all of them exist under o.a.l.analysis. Analysis makes sense as a package name. When we talk about reorganization - it would be useful to run by some jdepend reports at - http clarkware.com software JDepend.html as a metric for the stability of the packages. I do want to propose to omit the component name from the package where it makes sense . Shai I agree its a little redundant yet under this issue I wanted to avoid changing package names as much as possible changing the package name breaks people s code and thats why I wanted to just do the first part with no pkg naming changes. I thought these initial svn moves are obvious wins and any further stuff can be done later under another issue... Typically I would prefer to do a full reorganization at once but in my opinion that is for a later probably longer and more frustrating discussion and it needs to involve Solr too. I personally don t have a strong opinion on this but i wanted to point it out for completeness the last time i remember a big discussion about reorging contribs there seemed to be a strong sentiment that we should be striving for more small contribs modules Ð specificly in terms of artifact size complexity. I think one specific example was that some poeple might want a few langauge specific analyzers but not all of them Ð and if they have no direct dependencies on each other just core we should try to build distribute them as tiny individual Jars Ð and possible in big bundled jars as well. So while it might make a lot of sense to organize some existing contribs into logical groups which might get build up in big bundled jars there are likely going to be people who still want to comsume the existing jars or even more granular jars Looking at the specific suggestions robert made it makes sense to logically organize all the query parsers under a common directory but how many users are actually using more then one and are we doing them a disservice if we only ship them in one big jar Ditto for the highlighters does anyone besides Solr use both highlighters in a single application Hoss Man the only problem I have with what you said is that it prevents factoring the code. Perhaps I want to refactor some code among our 7 queryparsers or 2 highlighters or whatever the only way I can do this is to shove stuff shared code into core I think this is bad. Otherwise I don t really care how things are packaged this proposal was supposed to be a small step towards modules. Perhaps I want to refactor some code among our 7 queryparsers or 2 highlighters or whatever the only way I can do this is to shove stuff shared code into core I think this is bad. agreed ... IIRC the idea in this discussion was the have a lot more smaller modules with a lot better defined advertised dependencies so that module X Y Z might all depend on modules A and B which had the common refactored code you speak of and the core module is special in that it must never depend on anything else. Like i said I personally don t have a very strong opinion about this i think people who are really concerned about jar sizes can compile their own after pruning the classes they don t care about Ð but it s definitely harder when those classes are all in one atomic source tree where you might not notice that someone refactored a common dependency that wasn t there before. agreed ... IIRC the idea in this discussion was the have a lot more smaller modules with a lot better defined advertised dependencies so that module X Y Z might all depend on modules A and B which had the common refactored code you speak of I didn t know this was the goal if what you say is true then I must say i completely misunderstood I completely disagree and I m completely off-base with this issue. This reorg is a great a great step for contrib IMO 1 I didn t know this was the goal if what you say is true then I must say i completely misunderstood I completely disagree and I m completely off-base with this issue. I m not saying it is a goal or should be a goal just that i seem to remember that this was teh direction that seemed to have support the last time i remember there being a big reorg the contribs discussion. i could be remembering wrong it could be that I thought it was a really great idea at the time so it stuck with me and now i m just more ambivalent A quick skim suggests this is the most recent thread i m thinking of... http old.nabble.com New-flexible-query-parser-to22549684.html a22637326 kitchen sink was the search term i was looking for ...but i don t think that was the first time it came up. it could be that I thought it was a really great idea at the time my problem is not in the idea but that its just unrealistic. more realistic lets say for the queryparsers would be for example moving the queryparsers together as i proposed here implementing some of the specialized ones with the new flexible queryparser LUCENE-1823 removing the now obselete specialized queryparsers. improving tests and general quality of the queryparsing package At this point the code might be mature enough for an idea like yours. I m also realistic and I know I probably cannot do much here except step 1 as I m not a queryparser expert. But I can say there s at least a patch open for step 2 even if this patch might not yet be ready. So this seems like a realistic small step forward towards improving things. The modularization idea won t cleanup contrib... some of it is hairy and that needs to be done first. Robert - I think that s exactly what I was proposing. You indicated that there are some components under contrib that you cannot move around because their package names would change and I said that I don t think their package names should change . So you can move XMLQP under contrib queryparsers and its package name will stay the same ... I also think that at least for analyzers having all of them under one contrib jar will allow us to improve the way our users interact w analyzers. Consider for example an AnalyzerFactory which when receiving a Locale returns a pre-configured Analyzer the best one we can think of for that Locale. That s to me a great service to our users and I don t see how we can do that if all analyzers are under different modules. Besides analyzers are logically close to each other because they perform a very specific task. Refactoring the analysis API again would be easier of all of them were under the same root directory ... less chance of missing some. Query parsers are different because I agree a user will likely pick one for his app and go with it. But I don t think we re talking about massive amount of code here right So again it makes sense to bundle them up together. We can have a module-level documentation of the different query parsers pros and cons for each use cases etc. and then the user can pick. If jar size is important to someone then I think that someone is already recompiling everything to include just what he needs and so we re not hurting anyone here. Therefore I see this reorg as a logical and important step towards modularization. But I don t think we re talking about massive amount of code here right And hopefully less code if we can put some of these things together and start looking at refactoring them a bit Until code in contrib is to a certain degree of maturity I feel we should organize it by functionality. Its easy for the users and it invites the sort of refactoring and cleanup that some of this code needs. Until code in contrib is to a certain degree of maturity I feel we should organize it by functionality. Its easy for the users and it invites the sort of refactoring and cleanup that some of this code needs. 1 attached is a patch for the first moves outlined. before applying the patch please run the following script regex - queries svn move lucene contrib regex lib lucene contrib queries svn move lucene contrib regex src java org apache lucene search regex lucene contrib queries src java org apache lucene search svn move lucene contrib regex src java org apache regexp lucene contrib queries src java org apache svn move lucene contrib regex src test org apache lucene search regex lucene contrib queries src test org apache lucene search svn delete lucene contrib regex fast-vector-highlighter - highlighter svn move lucene contrib fast-vector-highlighter src java org apache lucene search vectorhighlight lucene contrib highlighter src java org apache lucene search svn move lucene contrib fast-vector-highlighter src test org apache lucene search vectorhighlight lucene contrib highlighter src test org apache lucene search svn delete lucene contrib fast-vector-highlighter misc queryparsers - queryparser svn move lucene contrib misc src java org apache lucene queryParser lucene contrib queryparser src java org apache lucene queryParser svn move lucene contrib misc src test org apache lucene queryParser lucene contrib queryparser src test org apache lucene queryParser If no one objects especially including Hoss Man I would like to commit in a day or two but keeping the issue open and doing the more complex ones next. Would it be possible to move surround to the query parsers too Would it be possible to move surround to the query parsers too Yes I think we want to do this. I can do it in the second patch with the other moves. If no one objects especially including Hoss Man I really have no opinions I was just trying to chime in with my memories of hte past discussions Ð i don t necessarily think one way or another is more good bad right wrong. go with your gut. Committed 927696 and 927697 for the solr piece . Will keep the issue open and work on a patch for the next part. now that flex is merged its a good time to continue doing this. attached is a patch to move WikipediaTokenizer to contrib analyzers and remove contrib wikipedia there is nothing else in it . it also adds the factory and test to Solr. before applying the patch you must run the following svn commands mkdir lucene contrib analyzers common src java org apache lucene analysis wikipedia svn add lucene contrib analyzers common src java org apache lucene analysis wikipedia mkdir lucene contrib analyzers common src test org apache lucene analysis wikipedia svn add lucene contrib analyzers common src test org apache lucene analysis wikipedia svn move lucene contrib wikipedia src java org apache lucene wikipedia analysis lucene contrib analyzers common src java org apache lucene analysis wikipedia svn move lucene contrib wikipedia src test org apache lucene wikipedia analysis lucene contrib analyzers common src test org apache lucene analysis wikipedia svn rm lucene contrib wikipedia if no one objects I would like to commit this soon. attached is a patch to move surround to contrib queryparser. before applying the patch please run svn move lucene contrib surround src java org apache lucene queryParser surround lucene contrib queryparser src java org apache lucene queryParser svn move lucene contrib surround src test org apache lucene queryParser surround lucene contrib queryparser src test org apache lucene queryParser svn move lucene contrib surround README.txt lucene contrib queryparser svn delete lucene contrib surround i backported changes thus far to stable 941649 Bulk close for 3.1
