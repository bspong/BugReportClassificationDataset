SO TIMEOUT is not set on a request level
The scenario is as follows I m doing two consecutive requests to the same host using a multi-threaded or thread safe connection pool manager. The first invocation has a timeout of 10s and the second has a timeout of 30s. In version 3.1 of HttpClient all works well but in 4.0 I get a timeout exception in the second request after 10 seconds which means the first timeout is used. Looking at the code I see that in version 3.1 the HttpMethodDirector.executeWithRetry method invokes a method named applyConnectionParams that took care of setting the timeout taken from the request on the socket. But in version 4.0 the only place I see the timeout is set on the socket is when DefaultRequestDirector.execute HttpHost HttpRequest HttpContext opens a connection using the managedConn.open method. Since the connection is reused between the requests the second request uses a socket with a timeout of the first request. There is an effective work-around for the problem DefaultHttpClient httpclient new DefaultHttpClient httpclient.addRequestInterceptor new HttpRequestInterceptor          public void process             final HttpRequest request             final HttpContext context throws HttpException IOException         HttpClientConnection conn HttpClientConnection context.getAttribute                 ExecutionContext.HTTP CONNECTION         int timeout request.getParams .getIntParameter CoreConnectionPNames.SO TIMEOUT 0         conn.setSocketTimeout timeout      HttpGet request new HttpGet http www.google.com HttpResponse rsp httpclient.execute request HttpEntity entity rsp.getEntity System.out.println System.out.println rsp.getStatusLine System.out.println if entity null     entity.consumeContent Fixed in trunk and 4.0.x branch Oleg
