Memory leak when sorting
This is the same post I sended two days before to the Lucene user s list. This bug seems to have something in common with bug no. 30628 but that bug is closed as invalid. I m sending test code that everyone can try. The code is singular don t say there is no sense in reopening the same index. I can only show that reopening leaks memory. The index is filled by pseudo-real data they aren t significant and the process of index creation as well. The problem must be in field caching code used by sort. Affected versions of Lucene 1.4.1 CVS 1.5-rc1-dev This code survives only few first iterations if you run java with -Xmx5m. With Lucene 1.4-final ends regulary. import org.apache.lucene.analysis.standard.StandardAnalyzer import org.apache.lucene.document.Document import org.apache.lucene.document.Field import org.apache.lucene.index.IndexReader import org.apache.lucene.index.IndexWriter import org.apache.lucene.index.Term import org.apache.lucene.search.Hits import org.apache.lucene.search.IndexSearcher import org.apache.lucene.search.Searcher import org.apache.lucene.search.Sort import org.apache.lucene.search.SortField import org.apache.lucene.search.TermQuery import org.apache.lucene.store.Directory import org.apache.lucene.store.RAMDirectory import java.io.IOException import java.text.SimpleDateFormat import java.util.Calendar import java.util.Date Run this test with Lucene 1.4.1 and -Xmx5m public class ReopenTest private static long mem last 0 public static void main String args throws IOException Directory directory create index for int i 1 i 100 i System.err.println loop i index version IndexReader. getCurrentVersion directory search index directory add to index directory i private static void add to index Directory directory int i throws IOException IndexWriter writer new IndexWriter directory new StandardAnalyzer false SimpleDateFormat df new SimpleDateFormat yyyy-MM-dd Document doc new Document doc.add Field.Keyword date df.format new Date System.currentTimeMillis doc.add Field.Keyword id CD String.valueOf i doc.add Field.Text text Tohle neni text i writer.addDocument doc System.err.println index size writer.docCount writer.close private static void search index Directory directory throws IOException IndexReader reader IndexReader.open directory Searcher searcher new IndexSearcher reader print mem search 1 SortField fields new SortField 2 fields 0 new SortField date SortField.STRING true fields 1 new SortField id SortField.STRING false Sort sort new Sort fields TermQuery query new TermQuery new Term text text 5 print mem search 2 Hits hits searcher.search query sort print mem search 3 for int i 0 i hits.length i Document doc hits.doc i System.out.println doc i doc.toString print mem search 4 searcher.close reader.close private static void print mem String log long mem free Runtime.getRuntime .freeMemory long mem total Runtime.getRuntime .totalMemory long mem max Runtime.getRuntime .maxMemory long delta mem last - mem free -1 System.out.println log delta delta free mem free used mem total-mem free total mem total max mem max mem last mem free private static Directory create index throws IOException print mem create 1 Directory directory new RAMDirectory Calendar c Calendar.getInstance SimpleDateFormat df new SimpleDateFormat yyyy-MM-dd IndexWriter writer new IndexWriter directory new StandardAnalyzer true for int i 0 i 365 15 i Document doc new Document doc.add Field.Keyword date df.format new Date c.getTimeInMillis doc.add Field.Keyword id AB String.valueOf i doc.add Field.Text text Tohle je text i writer.addDocument doc doc new Document doc.add Field.Keyword date df.format new Date c.getTimeInMillis doc.add Field.Keyword id ef String.valueOf i doc.add Field.Text text Je tohle text i writer.addDocument doc c.add Calendar.DAY OF YEAR 1 writer.optimize System.err.println index size writer.docCount writer.close print mem create 2 return directory See here for some analysis http www.mail-archive.com lucene-user 40jakarta.apache.org msg09462.html We also see this bug in Lucene 1.4.1 but NOT in 1.4.1 RC3. Never mind. We had internal confusion about version numbering. I was looking at 1.4RC3. Created an attachment id 12890 patch that fixes the problem made against CVS HEAD as of September 29th Created an attachment id 12891 patch that fixes the problem made against 1.4.1 release Comparator cache entries couldn t ever go away because IndexReader objects used as weak referenced keys were strong-references by the very same WeakHashMap Entry object. This was because IndexReader was referenced from an instance variable of the Comparator objects - an implicit one because final IndexReader reader argument of comparator method is used inside Comparator object initialization. Moving initialization of the fieldOrder index variables outside object initialization eliminates the implicit reader field thus allowing IndexReader object s to be GCd correctly. Thanks for the patch. I did not verify whether it solves the memory leak problem. However I committed the changes and did an analog chance in SortComparator.java since they definitely cannot do any harm. Daniel agreed to make some tests soon. If positive he will close the bug. Christoph Thanks the patch works i.e. the test case doesn t throw out of memory anymore. The patch has been applied to CVS HEAD branch .
