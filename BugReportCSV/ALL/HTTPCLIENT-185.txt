Ordering of methods in PostMethod changes behaviour
I have just spent the best part of two days trying to work out why a servlet running in Tomcat was not getting UTF-8 when I had set my client to send UTF-8. It turns out that if I set my PostMethod request header after setting the request body the content does not get sent as UTF-8. The following gets sent as UTF-8       PostMethod post new PostMethod destinationUrl.toString       post.setStrictMode false       post.setRequestHeader Content-Type text xml charset UTF-8       post.setRequestHeader user-agent myAgent       post.setRequestBody content       post.setFollowRedirects true the following doesn t       PostMethod post new PostMethod destinationUrl.toString       post.setStrictMode false       post.setRequestBody content       post.setRequestHeader Content-Type text xml charset UTF-8       post.setRequestHeader user-agent myAgent       post.setFollowRedirects true In a live execution I would understand that order makes a big difference but when you fill out an object that feels like defining the values of a Java Bean this likely to be less obvious.Working on a fix. Draft patch posted to the mailing list OlegCreated an attachment id 5825 Patch take 2 Hi Oleg This one looks good. My only question is in regard to the formerly deprecated methods. You have removed the deprecated tags from most of the methods in PostMethod. Was this intentional Also a test might be nice. MikeMike Those methods were deprecated primarily because we wanted to spare us a trouble of having to maintain a list of parameters. Since it turned out that there was no way around keeping the parameters in order to be able to re-apply character encoding there s really no reason for having all these methods deprecated anymore. I know that test case for this bug is missing. The problem is that there s no way to ensure the correct executing of character encoding related tests on all platforms due to possible locale incompatibilities Java source files have no way of enforcing a particular character encoding last time I looked . There are funny people like myself who do not speak English natively and insist on having their LC CTYPE variable set to something other that en US. I d rather have our test cases execute on all platforms regardless of local regional settings. OlegThe way we used to handle this kind of thing in the JDK unit tests was to hardcode an array of chars in the test and give the Unicode value for each char. Then construct a String from it and use it in the test. It s a pain in the posterior but as you point out there s no way to have an actual non-ASCII string constant in a source file because you can t guarantee what character set will be used to compile it.In the context of test cases Another approach to this would be to specify an array of character ranges to test. For example   int tests new int 65 120 19000 21000 And then loop through each of the ranges. You even adapt the code so it prints out the array with the java formatting for copying and pasting. Thinking about it we probably should add several character encoding tests for several different character sets. With UTF-8 it is important to test characters appearing in various of the alphabets including those that would appear in the fourth byte - this is the only way to validate that everything is really passing through as expected. Also we should probably test the case where no character set is specified in the header. In my tests I was getting back cp1215 or something of the sort which would be MS-Window s default encoding rather what the ISO character set that was specified in the docs when I checked the encoding that was being received by my servlet in Tomcat 4.1.18 . This would have to be tested on multiple platforms to ensure that using the tested code with another VM doesn t spring any surprises.Laura Thanks for the hint. Of course I can simply use arrays of ints as input for the test case. I should have thought of it myself. Andre I ll whip up a few test cases for trivial stuff such as German umlauts and probably Cyrillic encodings Win1251 KOI8-R . If you could contribute more sophisticated ones it would really be hugely appreciated. In case of no charset being given in the Content-Type header HttpClient always falls back onto HTTP default content encoding ISO-8859-1. I am pretty sure about that. This said I ll provide a test case for default content encoding OlegCreated an attachment id 5846 Character generator for use in test cases Created a character generator for use in test cases. You will need to remove the package name. The idea is that this class can be modified to create the appropriate characters for the various character sets. Hopefully this will do the job.Created an attachment id 5869 Patch take 3 - test cases included Looks good to me. A quality team effort. MikePatch applied Oleg
