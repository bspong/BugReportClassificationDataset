IndexWriter does not properly account for the RAM consumed by pending deletes
IndexWriter with autoCommit false is able to carry buffered deletes for quite some time before materializing them to docIDs thus freeing up RAM used . It s only on triggering a merge or commit close that the deletes are materialized and the RAM is freed. I expect this in practice is a smallish amount of RAM but we should still fix it. I don t have a patch yet so if someone wants to grab this feel free Maybe I miss something but IndexWriter setMaxBufferedDeleteTerms can be used to set an upper bound for those terms. Once you hit the upper bound BufferedDeletes should be flushed to disc by calling IndexWriter flush . This can happend with either a add or a delete. Maybe I do not completely understand what you mean by materialized. Sorry you are correct Ð that s the obvious workaround here. But we default that to unlimited meaning flush when RAM limit is hit which I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete s RAM usage. But we default that to unlimited meaning flush when RAM limit is hit which I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete s RAM usage. I agree we should track the ram usage of BufferedDeletes too. One other thing I wonder about is why deletesInRam is only cleared on abort. Once IndexWriter doFlushInternal is executed the DocWriter pushes deletes from deletesInRam to deletesFlushed. Shouldn t this call deletesInRam clear to free the memory in this instance of BufferedDeletes. That could at least help a bit if I do not miss anything important. deletesInRAM is in fact cleared on calling deletesFlushed.update deletesInRAM . Ie that call transfers the deletesInRAM to deletesFlushed. Then when applyDeletes is called we clear deletesFlushed. HA true I missed that. Nevermind I did not catch it as it calls the clear methods directly instead of using BufferedDocs clear . Might be easier to catch if people look into that if we would call clear instead. I will attach a patch for this beautification. Regarding buffered delete s RAM usage accounting an exact number is quite difficult in this case as there are many strings involved Terms with field and value . BufferedDeletes terms stores Term Num and BufferedDeletes queries stores Query Num in both cases the value part is easy to account while especially for query the memory consumption is hard to guess similarly the amount of memory a Term takes. On the other hand I would like to have a notion of memory consumption os BufferedDeletes but the IndexWriters setRAMBufferSizeMB javaDoc clearly says that this does not include the memory used by buffered deletes. I would rather tend to leave it as it is and make it clear in javadoc wiki that setMaxBufferedDeleteTerms is the way to go if you run into memory problems. Feels quite ambiguous to estimate the memory of buffered deletes. I think is a good default once we fix the accounting in IndexWriter to properly account for buffered delete s RAM usage. is there already an issue to fix the RAM usage is there already an issue to fix the RAM usage This is the issue. I think even if our measure is not perfect we should try to take a stab at accounting for RAM usage of deletes it s a trap now. We shouldn t set traps. Attached patch. I made an estimate of RAM usage for buffered delete terms and docIDs that I think should be fairly close. Buffered delete Query instances however are undercounted I say this in the javadocs since measuring that would be rather challenging.
