DirectoryReader ignores NRT SegmentInfos in isOptimized 
DirectoryReader only takes shared with IW SegmentInfos into account in DirectoryReader isOptimized . This can return true even if the actual realtime reader sees more than one segments. public boolean isOptimized ensureOpen if segmentsInfos changes in IW this can return false positive return segmentInfos.size 1 hasDeletions DirectoryReader should check if this reader has a non-nul segmentInfosStart and use that instead here is a patch Nice catch Simon This is also a thread safety issue since IR should not touch the writer s segmentInfos outside of sync IW . Nice catch Simon This is also a thread safety issue since IR should not touch the writer s segmentInfos outside of sync IW . it seem like there is more about all that in DR - we should really only use the uncloned SegmentInfos if we are not in NRT mode getVersion uses it too which is wrong. I actually rely on the isOptimized in several tests and run into a NPE due to that though so we should really fix DR to use a private SegmentInfos or restrict the uncloned one for the isCurrent comparison Heh I ve mentioned this earlier in LUCENE-2355. I changed DirectoryReader to use the cloned version of SegmentInfos instead of two of them inconsistently. The only failure I get is on TestIndexWriterReader line 105 r1.close writer.close assertTrue r2.isCurrent where the writer is closed and afterwards it checks if the r2 reader still is the current one which failes since the writer.close method changes the version of the SegmentInfos. In my opinion this is actually the semantics I would expect from isCurrent the question is if we would want to change the semantics to return false from isCurrent if the writer we used to obtain the reader from is closed. I think we should consider it for consistency and simplicity though. here is a patch that removes the mutable state from DirectoryReader in the NRT case. The actual reason IMO why this has been introduced was that the RT reader returns true from isCurrent if the wirter was closed which is actually wrong since closing a writer changes the index and the reader should see that change. I also added a testcase for is current to check the semantics we need to backport to 3.x too Patch looks cool. here is a final patch - i will commit later Committed revision 1043277. I keep it open for backporting Ported back to 3x in revision 1043418. Bulk close for 3.1
