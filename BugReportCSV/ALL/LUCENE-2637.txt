FSDirectory.copyBytes isn t safe for SimpleFSDirectory
the copyBytes optimization from LUCENE-2574 is not safe for SimpleFSDirectory but works fine for NIOFSDirectory. With SimpleFSDirectory the copyBytes optimization causes index corruption. see http www.lucidimagination.com search document 36d2dbfc691909d5 bug triggered by testindexwriter testrandomstoredfields for background here are my steps to reproduce most of the time at least on windows 1. edit line 87 of TestIndexWriter to plugin the seed random newRandom 3312389322103990899L 2. edit line 5138 of TestIndexWriter to force SimpleFSDirectory Directory dir new SimpleFSDirectory index 3. run this command ant clean test-core -Dtestcase TestIndexWriter -Dtestmethod testRandomStoredFields -Dtests.iter 10 -Dtests.codec MockVariableIntBlock 29 As mentioned on the list i think this only fails on hudson because the test uses FSDirectory.open and somehow the issue only occurs with SimpleFSDirectory but not NIOFSDirectory If i comment out FSDirectory s optimized copyBytes LUCENE-2574 the test passes every time. So I think this is the root of the problem. Here s one suggested patch So the problem is that the optimized FSDirectory.copyBytes LUCENE-2574 produces corrupt indexes with SimpleFSDirectory. I fixed the test to use newDirectory so it won t fail just on windows with this bug.. the problem was the test used FSDirectory.open so no unix users ever saw this. I pushed the optimized copyBytes up into NIOFSDirectory where its safe and restored FSDirectory s simple implementation. editing the issue title description now that we understand the problem. related to this issue I want to question if we should really be using FileChannel.transferFrom in FSDirectory at all. Couldn t this make SimpleFSDirectory susceptible to LUCENE-2239 We documented on that issue that users should use SimpleFSDirectory to prevent the ClosedByInterruptException. I guess its worth considering if SimpleFSDirectory s copyBytes should simply copy byte and not use any NIOFS semantics. After testing this a lot for backing up indexes in Solr I never found a super compelling speed benefit to NIO byte copying and I think its actually a hit on some Windows systems . In the end after trying to get an NIO win for too long we gave up and went back to straight old stream copying. Strange I remember I did see performance gains using FileChannel API on Windows and Linux especially when the copy chunk was large 1 MB . Is this the only place where SimpleFSDir uses FileChannel If so then I guess not using it at all makes sense. I think given LUCENE-2239 we really should not be using any NIO apis in SimpleFSDir... We also tested .transferTo in LUCENE-1121 and had very mixed results Windows was sometimes much slower . OK here is my updated patch. After thinking about this a lot I removed all copyBytes optimizations completely. I don t care if the performance improves with NIO if it causes corrupt indexes its not worth it. I spent a ton of time debugging this and although i can t make the previous patch i uploaded to this issue fail that shoves the opto only into NIOFSDirectory I feel given the issues from LUCENE-2239 given the fact this optimization causes index corruption and has before that the best thing to do is remove it entirely. I d like to commit this soon and notify the lists that any windows users of trunk 3x should reindex since they might have index corruption. I don t give the wrong impression we should welcome optimizations to things like this but only with solid tests and I don t feel our suite of tests is mature enough to support this yet. 1 looks good 1 this is in my opinion the only right solution. SimpleFSDir should never use NIO to use NIO use NIOFSDir so transferTo and this NIO copy should only be there Robert you ve removed copyBytes from FSDirectory entirely. I thought and it looks like Uwe thought so too that it should be moved to NIOFSDirectory no What s the point of having NIOFSDir if it cannot use NIO API Robert you ve removed copyBytes from FSDirectory entirely Yes thats exactly what i did as mentioned in my jira comment with rationale. I thought and it looks like Uwe thought so too that it should be moved to NIOFSDirectory no What s the point of having NIOFSDir if it cannot use NIO API We had NIOFSDirectory in lucene 2.9 3.0 and it didnt have this optimization. I think we should take the conservative approach at the moment as mentioned in my JIRA comment. Optimizations like this need solid tests before being committed above and beyond this testRandomStoredFields that only fails 1 of the time if the implementation is incorrect. I think we should remove it completely for now to solve the bug. If somebody is able to fix the NIO code to work in all cases with rock-solid tests we can reenable it again but only in NIOFSDir . If somebody is able to fix the NIO code to work in all cases with rock-solid tests we can reenable it again but only in NIOFSDir . I completely agree. I would also propose that if we go this route we should open a separate issue if we want to do this that we only target trunk and not 3.x. the backport could always happen later after we feel comfortable that the optimization is safe but i don t like that this will be the second time we have to inform users about index corruption on our stable branch from this For the record the problem w the opto is that it pulls the unique FileChannel from the RandomAccessFile positions it and does non-positional reads. This is not safe because SimpleFSDir also does non-positional reads. So eg if a BG merge is running invoking .copyBytes when merging the fields and at the same time another thread is eg loading a stored doc from the same open file w SimpleFSDIr they conflict because they are both relying on the stateful position of RAF. NIOFSDir always does positional reads so it doesn t hit this. But I agree we should pull the opto from 3x trunk open new issue to re-add it only add it back to trunk once we have solid tests. EG the new TestCopyBytes I added does not catch this thread-safety issue but I think though I didn t test should catch the original corruption issue w the opto . And yes we must now notify 3x trunk users who uses SimpleFSDir because they are on windows or because they explicitly instantiated it that they may have latent index corruption and should run CheckIndex. I have still the question why do we do NIO-based optimizations in FSDir and only if both the given DataInput and this both are NIOFSIndexInput NIOFSIndexOutput so limit it only to the case when both involved directories are NIO. So I would move the optmization in another issue to NIOFSDir and do a check if input instanceof NIOFSIndexInput in all other cases call super I was also against the original Directory.copy method using NIO. NIO should only be used in NIOFSDir nowhere else. I am not sure what happens with MMapDirectory when used that way mixed together with possibly other IndexInput types. also for any future issue even if an optimized copyBytes is put in NIOFSDir we should be careful if it only works depending on NIOFSDir s internals. at the least instead of setting a trap we should make NIOFSIO and maybe NIOFS itself final. i think in general there is a lot involved and we should just open an issue if we want to go this route but there is a lot of complexity involved personally I would like to see what the gain is. Committed revision 995376 995379 3x 
