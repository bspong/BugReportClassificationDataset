<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:18:49 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-574/HTTPCLIENT-574.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-574] Subclasses do not have write access to StatusLine</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-574</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>HttpMethodBase provides the readStatusLine method explicitly designed for&lt;br/&gt;
subclasses to override. However, any attempt to do so quickly encounters issues&lt;br/&gt;
since the subclass does not have access to the statusLine member variable in&lt;br/&gt;
HttpMethodBase. The same holds true for several other member variables as well.&lt;br/&gt;
&lt;br/&gt;
Recommend that all access to member variables occur through accessors and that&lt;br/&gt;
mutators be provided to set them. See patch below.&lt;br/&gt;
----------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
Index: HttpMethodBase.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- HttpMethodBase.java	(revision 390815)&lt;br/&gt;
+++ HttpMethodBase.java	(working copy)&lt;br/&gt;
@@ -563,7 +563,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @return the status code associated with the latest response.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int getStatusCode() {&lt;br/&gt;
-        return statusLine.getStatusCode();&lt;br/&gt;
+        return getStatusLine().getStatusCode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
@@ -577,6 +577,13 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
+     * @param statusLine The statusLine to set.&lt;br/&gt;
+     */&lt;br/&gt;
+    protected final void setStatusLine(StatusLine statusLine) {&lt;br/&gt;
+        this.statusLine = statusLine;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Checks if response data is available.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @return &amp;lt;tt&amp;gt;true&amp;lt;/tt&amp;gt; if response data is available, &amp;lt;tt&amp;gt;false&amp;lt;/tt&amp;gt;&lt;br/&gt;
otherwise.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
@@ -798,7 +805,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @return The status text.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getStatusText() {&lt;br/&gt;
-        return statusLine.getReasonPhrase();&lt;br/&gt;
+        return getStatusLine().getReasonPhrase();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
@@ -920,16 +927,16 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOG.debug(&amp;quot;Resorting to protocol version default close connection policy&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// missing or invalid connection header, do the default&lt;br/&gt;
-        if (this.effectiveVersion.greaterEquals(HttpVersion.HTTP_1_1)) {&lt;br/&gt;
+        if (getEffectiveVersion().greaterEquals(HttpVersion.HTTP_1_1)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (LOG.isDebugEnabled()) {&lt;br/&gt;
-                LOG.debug(&amp;quot;Should NOT close connection, using &amp;quot; +&lt;br/&gt;
this.effectiveVersion.toString());&lt;br/&gt;
+                LOG.debug(&amp;quot;Should NOT close connection, using &amp;quot; +&lt;br/&gt;
getEffectiveVersion().toString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (LOG.isDebugEnabled()) {&lt;br/&gt;
-                LOG.debug(&amp;quot;Should close connection, using &amp;quot; +&lt;br/&gt;
this.effectiveVersion.toString());&lt;br/&gt;
+                LOG.debug(&amp;quot;Should close connection, using &amp;quot; +&lt;br/&gt;
getEffectiveVersion().toString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-        return this.effectiveVersion.lessEquals(HttpVersion.HTTP_1_0);&lt;br/&gt;
+        return getEffectiveVersion().lessEquals(HttpVersion.HTTP_1_0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
@@ -980,14 +987,14 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.responseConnection = conn;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;checkExecuteConditions(state, conn);&lt;br/&gt;
-        this.statusLine = null;&lt;br/&gt;
+        setStatusLine(null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.connectionCloseForced = false;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;conn.setLastResponseInputStream(null);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// determine the effective protocol version&lt;br/&gt;
-        if (this.effectiveVersion == null) {&lt;br/&gt;
-            this.effectiveVersion = this.params.getVersion(); &lt;br/&gt;
+        if (getEffectiveVersion() == null) {&lt;br/&gt;
+            setEffectiveVersion(this.params.getVersion()); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writeRequest(state, conn);&lt;br/&gt;
@@ -996,7 +1003,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// the method has successfully executed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;used = true; &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-        return statusLine.getStatusCode();&lt;br/&gt;
+        return getStatusCode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
@@ -1048,8 +1055,8 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getRequestHeaderGroup().clear();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getResponseHeaderGroup().clear();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getResponseTrailerHeaderGroup().clear();&lt;br/&gt;
-        statusLine = null;&lt;br/&gt;
-        effectiveVersion = null;&lt;br/&gt;
+        setStatusLine(null);&lt;br/&gt;
+        setEffectiveVersion(null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;aborted = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;used = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;params = new HttpMethodParams();&lt;br/&gt;
@@ -1586,18 +1593,18 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;enter HttpMethodBase.readResponse(HttpState, HttpConnection)&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Status line &amp;amp; line may have already been received&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// if &amp;#39;expect - continue&amp;#39; handshake has been used&lt;br/&gt;
-        while (this.statusLine == null) {&lt;br/&gt;
+        while (getStatusLine() == null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;readStatusLine(state, conn);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processStatusLine(state, conn);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;readResponseHeaders(state, conn);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processResponseHeaders(state, conn);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
-            int status = this.statusLine.getStatusCode();&lt;br/&gt;
+            int status = getStatusCode(); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ((status &amp;gt;= 100) &amp;amp;&amp;amp; (status &amp;lt; 200)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (LOG.isInfoEnabled()) {&lt;br/&gt;
-                    LOG.info(&amp;quot;Discarding unexpected response: &amp;quot; +&lt;br/&gt;
this.statusLine.toString()); &lt;br/&gt;
+                    LOG.info(&amp;quot;Discarding unexpected response: &amp;quot; +&lt;br/&gt;
getStatusLine().toString()); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-                this.statusLine = null;&lt;br/&gt;
+                setStatusLine(null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;readResponseBody(state, conn);&lt;br/&gt;
@@ -1675,7 +1682,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (Wire.CONTENT_WIRE.enabled()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;is = new WireLogInputStream(is, Wire.CONTENT_WIRE);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-        boolean canHaveBody = canResponseHaveBody(statusLine.getStatusCode());&lt;br/&gt;
+        boolean canHaveBody = canResponseHaveBody(getStatusCode());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStream result = null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Header transferEncodingHeader =&lt;br/&gt;
responseHeaders.getFirstHeader(&amp;quot;Transfer-Encoding&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We use Transfer-Encoding if present and ignore Content-Length.&lt;br/&gt;
@@ -1714,7 +1721,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long expectedLength = getResponseContentLength();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (expectedLength == -1) {&lt;br/&gt;
-                if (canHaveBody &amp;amp;&amp;amp;&lt;br/&gt;
this.effectiveVersion.greaterEquals(HttpVersion.HTTP_1_1)) {&lt;br/&gt;
+                if (canHaveBody &amp;amp;&amp;amp;&lt;br/&gt;
getEffectiveVersion().greaterEquals(HttpVersion.HTTP_1_1)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Header connectionHeader =&lt;br/&gt;
responseHeaders.getFirstHeader(&amp;quot;Connection&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String connectionDirective = null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (connectionHeader != null) {&lt;br/&gt;
@@ -1850,19 +1857,19 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} while(true);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//create the status line from the status string&lt;br/&gt;
-        statusLine = new StatusLine(s);&lt;br/&gt;
+        setStatusLine(new StatusLine(s));&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//check for a valid HTTP-Version&lt;br/&gt;
-        String versionStr = statusLine.getHttpVersion();&lt;br/&gt;
+        String versionStr = getStatusLine().getHttpVersion();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (getParams().isParameterFalse(HttpMethodParams.UNAMBIGUOUS_STATUS_LINE) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;&amp;amp; versionStr.equals(&amp;quot;HTTP&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getParams().setVersion(HttpVersion.HTTP_1_0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (LOG.isWarnEnabled()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOG.warn(&amp;quot;Ambiguous status line (HTTP protocol version missing):&amp;quot; +&lt;br/&gt;
-                statusLine.toString());&lt;br/&gt;
+                getStatusLine().toString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
-            this.effectiveVersion = HttpVersion.parse(versionStr);&lt;br/&gt;
+            setEffectiveVersion(HttpVersion.parse(versionStr));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
@@ -1943,9 +1950,9 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;readResponseHeaders(state, conn);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processResponseHeaders(state, conn);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-                    if (this.statusLine.getStatusCode() ==&lt;br/&gt;
HttpStatus.SC_CONTINUE) {&lt;br/&gt;
+                    if (getStatusCode() == HttpStatus.SC_CONTINUE) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Discard status line&lt;br/&gt;
-                        this.statusLine = null;&lt;br/&gt;
+                        setStatusLine(null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOG.debug(&amp;quot;OK to continue received&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
@@ -2087,7 +2094,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String getRequestLine(HttpConnection conn) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return  HttpMethodBase.generateRequestLine(conn, getName(),&lt;br/&gt;
-                getPath(), getQueryString(), this.effectiveVersion.toString());&lt;br/&gt;
+                getPath(), getQueryString(), getEffectiveVersion().toString());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
@@ -2128,6 +2135,13 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
+     * @param effectiveVersion The effectiveVersion to set.&lt;br/&gt;
+     */&lt;br/&gt;
+    protected final void setEffectiveVersion(HttpVersion effectiveVersion) {&lt;br/&gt;
+        this.effectiveVersion = effectiveVersion;&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
+    /**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Per RFC 2616 section 4.3, some response can never contain a message&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* body.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
@@ -2358,7 +2372,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// set used so that the response can be read&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.used = true;&lt;br/&gt;
-        this.statusLine = statusline;&lt;br/&gt;
+        setStatusLine(statusline);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.responseHeaders = responseheaders;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.responseBody = null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.responseStream = responseStream;</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12334133">HTTPCLIENT-574</key>
            <summary>Subclasses do not have write access to StatusLine</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="olegk">Oleg Kalnichevski</assignee>
                                <reporter username="fdutton@bellsouth.net">Faron Dutton</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Apr 2006 21:54:47 +0100</created>
                <updated>Sun, 22 Apr 2007 08:11:17 +0100</updated>
                    <resolved>Mon, 7 Aug 2006 11:50:15 +0100</resolved>
                            <version>3.0 Final</version>
                                <fixVersion>3.1 Beta 1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                                                  <comments>
                    <comment id="12383156" author="fdutton@bellsouth.net" created="Sun, 2 Apr 2006 21:55:43 +0100"  >Created an attachment (id=18014)&lt;br/&gt;
Patch&lt;br/&gt;
</comment>
                    <comment id="12383157" author="olegk" created="Mon, 3 Apr 2006 05:57:09 +0100"  >(In reply to comment #0)&lt;br/&gt;
&amp;gt; HttpMethodBase provides the readStatusLine method explicitly designed for&lt;br/&gt;
&amp;gt; subclasses to override. However, any attempt to do so quickly encounters issues&lt;br/&gt;
&amp;gt; since the subclass does not have access to the statusLine member variable in&lt;br/&gt;
&amp;gt; HttpMethodBase. The same holds true for several other member variables as well.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Recommend that all access to member variables occur through accessors and that&lt;br/&gt;
&amp;gt; mutators be provided to set them. See patch below.&lt;br/&gt;
&lt;br/&gt;
This _may_ be right. However I personally would very much rather keep things as&lt;br/&gt;
they are at the very least for the sake of consistency, unless the same coding&lt;br/&gt;
convention can be applied throughout the entire code base. Moreover,&lt;br/&gt;
HttpMethodBase class will go as version 4.0. There&amp;#39;s no point in trying to apply&lt;br/&gt;
a new coding convention to something which is fundamentally flawed conceptually.&lt;br/&gt;
&lt;br/&gt;
Could you please come up with a patch that just provides access to private&lt;br/&gt;
instance variables that you need with the minimal impact on the existing code?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12383158" author="fdutton@bellsouth.net" created="Tue, 4 Apr 2006 05:36:22 +0100"  >The only other option, which is lass safe, is to change all private member&lt;br/&gt;
variables to protected. If this is what you prefer I can produce a patch for it.</comment>
                    <comment id="12383159" author="olegk" created="Tue, 4 Apr 2006 05:39:14 +0100"  >(In reply to comment #3)&lt;br/&gt;
&amp;gt; The only other option, which is lass safe, is to change all private member&lt;br/&gt;
&amp;gt; variables to protected. If this is what you prefer I can produce a patch for it.&lt;br/&gt;
&lt;br/&gt;
What about just a protected getter?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12383160" author="fdutton@bellsouth.net" created="Tue, 4 Apr 2006 19:33:00 +0100"  >The getter is already public for statusLine. The attached patch has a protected&lt;br/&gt;
setter and changes the rest of the code to use both the getter and setter&lt;br/&gt;
instead of using the member variable directly. For example,&lt;br/&gt;
&amp;quot;setStatusLine(null);&amp;quot; is used instead of &amp;quot;statusLine = null;&amp;quot; Same thing for&lt;br/&gt;
effectiveVersion.&lt;br/&gt;
&lt;br/&gt;
I am no longer sure I understand what you meant by keeping a consistent coding&lt;br/&gt;
style. Could you elaborate?</comment>
                    <comment id="12383161" author="olegk" created="Tue, 4 Apr 2006 19:50:51 +0100"  >I thought the whole issue was one could not have access to some private instance&lt;br/&gt;
variable because they did not have a corresponding protected getter. If that is&lt;br/&gt;
the case I am fully prepared to accept a patch for it. Otherwise I see no point&lt;br/&gt;
in providing protected setters for a _limited_ number of private instance&lt;br/&gt;
variables in a _single_ class just because some believe this is a better way.&lt;br/&gt;
&lt;br/&gt;
It is just not feasible that we patch HttpMethodBase in order to please every&lt;br/&gt;
single user out there. HttpMethodBase is helplessly broken. It simply needs to go.&lt;br/&gt;
&lt;br/&gt;
I hope this makes my position clearer&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12383162" author="fdutton@bellsouth.net" created="Tue, 4 Apr 2006 20:27:55 +0100"  >If I have offended you then I appologize. I did not open this issue just because&lt;br/&gt;
I think it could be done a better way. I have not commented on the suitability&lt;br/&gt;
of the code. I would like to try again :-)&lt;br/&gt;
&lt;br/&gt;
readResponse enters a loop looking for a non-null statusLine. readStatusLine is&lt;br/&gt;
responsible for setting the variable to a non-null value. If I override&lt;br/&gt;
readStatusLine I cannot set the variable and readResponse is stuck in the loop.&lt;br/&gt;
I cannot override getStatusLine since readResponse uses the variable directly.&lt;br/&gt;
&lt;br/&gt;
I see four solutions here. Never override readStatusLine (should be private),&lt;br/&gt;
make variable protected, add a setter, or change code to use existing getter.&lt;br/&gt;
Any of the last three will work for me.&lt;br/&gt;
&lt;br/&gt;
The same problems exist with the other member variables; I just used statusLine&lt;br/&gt;
as an example. I can resubmit the patch for any solution you choose and I can&lt;br/&gt;
ensure that all member variables are accessed in a consistent manner.</comment>
                    <comment id="12383163" author="olegk" created="Tue, 4 Apr 2006 20:51:53 +0100"  >(In reply to comment #7)&lt;br/&gt;
&amp;gt; If I have offended you then I appologize. I did not open this issue just because&lt;br/&gt;
&amp;gt; I think it could be done a better way. I have not commented on the suitability&lt;br/&gt;
&amp;gt; of the code. I would like to try again :-)&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
No offense taken at all. The point I was trying to make (rather unsuccessfully)&lt;br/&gt;
is that merits of what some may consider a good practice tend to be subjective&lt;br/&gt;
and context specific. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; readResponse enters a loop looking for a non-null statusLine. readStatusLine is&lt;br/&gt;
&amp;gt; responsible for setting the variable to a non-null value. If I override&lt;br/&gt;
&amp;gt; readStatusLine I cannot set the variable and readResponse is stuck in the loop.&lt;br/&gt;
&amp;gt; I cannot override getStatusLine since readResponse uses the variable directly.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I see four solutions here. Never override readStatusLine (should be private),&lt;br/&gt;
&amp;gt; make variable protected, add a setter, or change code to use existing getter.&lt;br/&gt;
&amp;gt; Any of the last three will work for me.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; The same problems exist with the other member variables; I just used statusLine&lt;br/&gt;
&amp;gt; as an example. I can resubmit the patch for any solution you choose and I can&lt;br/&gt;
&amp;gt; ensure that all member variables are accessed in a consistent manner.&lt;br/&gt;
&lt;br/&gt;
My preference would be to make those variables protected. &lt;br/&gt;
&lt;br/&gt;
HttpMethodBase (imho) is a horrible pile of &amp;lt;self-censored&amp;gt; broken beyond&lt;br/&gt;
redemption. I just want to keep it as stable as possible in the 3.x branch and&lt;br/&gt;
do away with it in the 4.x branch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12383164" author="oglueck" created="Tue, 4 Apr 2006 21:58:34 +0100"  >+1 to make them protected</comment>
                    <comment id="12383165" author="fdutton@bellsouth.net" created="Wed, 5 Apr 2006 19:08:42 +0100"  >Created an attachment (id=18025)&lt;br/&gt;
Change private member variables to protected.&lt;br/&gt;
</comment>
                    <comment id="12383166" author="olegk" created="Fri, 7 Apr 2006 00:50:49 +0100"  >Faron,&lt;br/&gt;
I think this is too much. Please pprovide a patch with _minimal_ impact on the&lt;br/&gt;
existing code. Please make protected only those variables that you absolutely&lt;br/&gt;
must have write access to.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12383167" author="olegk" created="Tue, 18 Apr 2006 22:31:50 +0100"  >Faron,&lt;br/&gt;
&lt;br/&gt;
Feel free to re-open the bug if you provide an alternative patch. I am closing&lt;br/&gt;
the bug as WONTFIX for now&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12424025" author="caleb.lyness" created="Fri, 28 Jul 2006 09:34:52 +0100"  >Minimal diff required to override some functionality in child classes</comment>
                    <comment id="12426192" author="olegk" created="Mon, 7 Aug 2006 11:50:14 +0100"  >Patch checked in&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327397" name="ASF.LICENSE.NOT.GRANTED--HttpMethodBase.diff" size="2858" author="fdutton@bellsouth.net" created="Wed, 5 Apr 2006 19:08:42 +0100" />
                    <attachment id="12327396" name="ASF.LICENSE.NOT.GRANTED--HttpMethodBase.diff" size="7821" author="fdutton@bellsouth.net" created="Sun, 2 Apr 2006 21:55:43 +0100" />
                    <attachment id="12337686" name="change.diff" size="1233" author="caleb.lyness" created="Fri, 28 Jul 2006 09:34:52 +0100" />
                </attachments>
            <subtasks>
            <subtask id="12346827">HTTPCLIENT-591</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>39180</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 3 Apr 2006 04:57:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133614</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47926</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>