<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:15:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-303/HTTPCLIENT-303.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-303] auto close idle connections</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-303</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>This has been mentioned several times on the mailing list (most recently here:&lt;br/&gt;
&lt;a href=&quot;http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-httpclient-dev@jakarta.apache.org&amp;msgNo=5191&quot;&gt;http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-httpclient-dev@jakarta.apache.org&amp;amp;msgNo=5191&lt;/a&gt;&lt;br/&gt;
)&lt;br/&gt;
It is desirable for the http client to close it&amp;#39;s connection after some&lt;br/&gt;
configurable idle time. Failing to do so causes the server (and every TCP&lt;br/&gt;
resource in between) to keep the socket open and possibly run out of resources&lt;br/&gt;
under load.&lt;br/&gt;
&lt;br/&gt;
The HTTP 1.1 RFC has this to say under section 8.1.4:&lt;br/&gt;
Servers will usually have some time-out value beyond which they will&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;no longer maintain an inactive connection. Proxy servers might make&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;this a higher value since it is likely that the client will be making&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;more connections through the same server. The use of persistent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;connections places no requirements on the length (or existence) of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;this time-out for either the client or the server.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;When a client or server wishes to time-out it SHOULD issue a graceful&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;close on the transport connection. Clients and servers SHOULD both&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;constantly watch for the other side of the transport close, and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;respond to it as appropriate. If a client or server does not detect&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;the other side&amp;#39;s close promptly it could cause unnecessary resource&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;drain on the network.&lt;br/&gt;
&lt;br/&gt;
The first sentence of the 2nd paragraph is interesting: how is the client&lt;br/&gt;
supposed to do a &amp;quot;graceful close&amp;quot;? Does it simply mean closing the socket?&lt;br/&gt;
One possiblity may be to issue a HTTP/OPTIONS * request with a Connection:close&lt;br/&gt;
header.</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333862">HTTPCLIENT-303</key>
            <summary>auto close idle connections</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mohammad.rezaei@gs.com">Mohammad Rezaei</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Dec 2003 05:37:31 +0000</created>
                <updated>Wed, 16 Feb 2011 20:45:08 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:38 +0100</resolved>
                            <version>2.0 Milestone 2</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381305" author="mohammad.rezaei@gs.com" created="Wed, 10 Dec 2003 05:39:10 +0000"  >Failure to close the connection manifests itself differently depending on the&lt;br/&gt;
server. Weblogic, for example, complains loudly:&lt;br/&gt;
&lt;br/&gt;
&amp;lt;Dec 9, 2003 2:25:56 PM EST&amp;gt; &amp;lt;Error&amp;gt; &amp;lt;HTTP&amp;gt; &amp;lt;BEA-101083&amp;gt; &amp;lt;Connection failure.&lt;br/&gt;
java.io.IOException: A complete message could not be read on socket:&lt;br/&gt;
&amp;#39;&lt;a href=&apos;mailto:weblogic.servlet.internal.MuxableSocketHTTP@194a955&apos;&gt;weblogic.servlet.internal.MuxableSocketHTTP@194a955&lt;/a&gt; - idle timeout: &amp;#39;60000&amp;#39; ms,&lt;br/&gt;
socket timeout: &amp;#39;30000&amp;#39; ms&amp;#39;, in the configured timeout period of &amp;#39;60&amp;#39; secs&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at weblogic.socket.SocketMuxer$TimeoutTrigger.trigger(SocketMuxer.java:775)&lt;br/&gt;
...&lt;br/&gt;
</comment>
                    <comment id="12381306" author="olegk" created="Wed, 10 Dec 2003 06:02:55 +0000"  >Mohammad,&lt;br/&gt;
This is already too late for the 2.0 release. However, such a feature would be a&lt;br/&gt;
welcome addition to the next release of HttpClient&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381307" author="sberlin@limepeer.com" created="Wed, 10 Dec 2003 06:20:59 +0000"  >Created an attachment (id=9471)&lt;br/&gt;
example diff (based off 2.0 rc2)&lt;br/&gt;
</comment>
                    <comment id="12381308" author="sberlin@limepeer.com" created="Wed, 10 Dec 2003 06:24:18 +0000"  >The attachment is an example patch based off rc2.  I attempted last night to convert it to work &lt;br/&gt;
with the CVS HEAD, but way too much has changed (especially in the case of parameters) to do it &lt;br/&gt;
correctly and quickly.  One thing in particular that I noted would be difficult is the lack of feedback &lt;br/&gt;
when a setting is changed -- right now when the idle connection time changes, the waiting &lt;br/&gt;
IdleConnectionThread was notified, but using the new HttpParams makes this a bit more difficult.  &lt;br/&gt;
It&amp;#39;d be nice if settings had a way of adding PropertyChangeListeners.  The attachment also makes &lt;br/&gt;
no attempt to be generic or provide a pluggable way of manipulating connections based on various &lt;br/&gt;
changes in their states -- it is essentially a proof-of-concept patch.</comment>
                    <comment id="12381309" author="becke@u.washington.edu" created="Wed, 10 Dec 2003 06:51:37 +0000"  >Hi Sam,&lt;br/&gt;
&lt;br/&gt;
Thanks for the patch.  This seems to be a highly requested feature as of late. I&lt;br/&gt;
will spend some time working on this in the next few days.  Hopefully we&amp;#39;ll have&lt;br/&gt;
something by the time you return from vacation.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381310" author="oglueck" created="Wed, 10 Dec 2003 15:07:30 +0000"  >Sam,&lt;br/&gt;
&lt;br/&gt;
I just had a quick glance on the patch. I did not expect that the HttpConnection&lt;br/&gt;
class had to be changed. Do you really need to know when the connection was&lt;br/&gt;
released? Is it not enough to know when it was returned to the pool?&lt;br/&gt;
In my humble opinion it&amp;#39;s possible to handle this issue completely inside the&lt;br/&gt;
connection manager without tampering the HttpConnection.&lt;br/&gt;
&lt;br/&gt;
Odi</comment>
                    <comment id="12381311" author="sberlin@limepeer.com" created="Sun, 21 Dec 2003 08:31:01 +0000"  >Hi Odi,&lt;br/&gt;
&lt;br/&gt;
My apogolies for the delay in this response -- I was touring Italy for a week &lt;br/&gt;
or so.  (I highly recommend everyone spend part of their life in Venice, it is &lt;br/&gt;
truly fantastic.)&lt;br/&gt;
&lt;br/&gt;
Anyways... HttpConnection required a small change to store the time the &lt;br/&gt;
connection released (and thus returned to the pool).  It was not possible to &lt;br/&gt;
make this change in the HttpConnectionAdapter class because the ConnectionPool &lt;br/&gt;
in MultiThreadedConnectionManager did not access the adapter.  An alternative &lt;br/&gt;
method would have been to create another map where the key was the &lt;br/&gt;
HttpConnection and the value was the time it was released and store this in &lt;br/&gt;
ConnectionPool, but I did not feel that adding another datastructure was worth &lt;br/&gt;
it.  It seemed that the released time was something that may have been &lt;br/&gt;
worthwhile to other classes that use HttpConnection too.&lt;br/&gt;
&lt;br/&gt;
Much of the structure of the patch is going to have to change, though, to get &lt;br/&gt;
it to work with the current CVS HEAD.  I have no strong feelings either way &lt;br/&gt;
about storing the release time in the HttpConnection, if it seems that it can &lt;br/&gt;
be best done elsewhere.&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
&amp;nbsp;Sam</comment>
                    <comment id="12381312" author="becke@u.washington.edu" created="Mon, 8 Mar 2004 12:21:36 +0000"  >Created an attachment (id=10698)&lt;br/&gt;
Take 2&lt;br/&gt;
</comment>
                    <comment id="12381313" author="becke@u.washington.edu" created="Mon, 8 Mar 2004 12:25:41 +0000"  >After much delay here&amp;#39;s a new take on this one.  This patch still needs some work and a few more test &lt;br/&gt;
cases, but I think the overall design should work well.  The only major question I have is in regard to &lt;br/&gt;
HttpConnection references.  The IdleConnectionHandler keeps hard references to the connections that &lt;br/&gt;
it&amp;#39;s holding.  Normally I would be opposed to this, but since they will eventually time out I think it&amp;#39;s &lt;br/&gt;
okay.   How does everyone feel about this?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381314" author="olegk" created="Fri, 9 Apr 2004 08:36:52 +0100"  >Finally I found a little time to take a look at the patch. Somehow I can&amp;#39;t help&lt;br/&gt;
thinking that coupling IdleConnectionHandler with HttpConnection is not not&lt;br/&gt;
ideal. What if one sets a ridiculously high idle timeout value? Connections&lt;br/&gt;
would be piling up in the IdleConnectionHandler unnecessarily.&lt;br/&gt;
&lt;br/&gt;
I would rather see IdleConnectionHandler monitor connections of just one&lt;br/&gt;
connection manager, and would rather have the IdleConnectionHandler stay alive&lt;br/&gt;
as long as the connection manager itself stays alive. I understand your&lt;br/&gt;
intention was to have only one dedicated thread watching over all active&lt;br/&gt;
connections in order to conserve resources. I personally would rather prefer a&lt;br/&gt;
little less resource efficient but slightly more elegant solution. Besides, do&lt;br/&gt;
not we encourage people to have just one HttpClient instance with just one&lt;br/&gt;
connection manager per application, do we?&lt;br/&gt;
&lt;br/&gt;
Or maybe I just desperately need some sleep. Let me know if my rumbling makes&lt;br/&gt;
any sense at all. If it does not I&amp;#39;ll try to give the problem another look&lt;br/&gt;
tomorrow morning (I mean this morning)&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381315" author="becke@u.washington.edu" created="Fri, 9 Apr 2004 11:05:35 +0100"  >&amp;gt; Somehow I can&amp;#39;t help thinking that coupling IdleConnectionHandler with HttpConnection is not not&lt;br/&gt;
&amp;gt; ideal. What if one sets a ridiculously high idle timeout value? Connections&lt;br/&gt;
&amp;gt; would be piling up in the IdleConnectionHandler unnecessarily.&lt;br/&gt;
&lt;br/&gt;
Someone could certainly set an unwise timeout value, but that is true for many HttpClient settings.  We &lt;br/&gt;
should ensure that the default value is good, and then rely on people to not shooting themselves in the &lt;br/&gt;
foot.&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t see the danger of having connections pile up.  It may be somewhat unelegant, but it at least &lt;br/&gt;
ensures that connections are eventually cleaned up.  The current alternative is to just let the &lt;br/&gt;
connections get GCed.  This method does not guarantee that the sockets are closed.&lt;br/&gt;
&lt;br/&gt;
As far as coupling IdleConnectionHandler with HttpConnection, I&amp;#39;m not sure how else to do it.  What &lt;br/&gt;
would you suggest? &lt;br/&gt;
&lt;br/&gt;
&amp;gt; I would rather see IdleConnectionHandler monitor connections of just one&lt;br/&gt;
&amp;gt; connection manager, and would rather have the IdleConnectionHandler stay alive&lt;br/&gt;
&amp;gt; as long as the connection manager itself stays alive. I understand your&lt;br/&gt;
&amp;gt; intention was to have only one dedicated thread watching over all active&lt;br/&gt;
&amp;gt; connections in order to conserve resources. I personally would rather prefer a&lt;br/&gt;
&amp;gt; little less resource efficient but slightly more elegant solution. Besides, do&lt;br/&gt;
&amp;gt; not we encourage people to have just one HttpClient instance with just one&lt;br/&gt;
&amp;gt; connection manager per application, do we?&lt;br/&gt;
&lt;br/&gt;
One IdleConnectionHandler per connection manager can be done with the current system.  Since the &lt;br/&gt;
idle handler is just a param, a different one can be used per connection manager.  I agree that having &lt;br/&gt;
just one idle handler for all connection managers may not be good, I also think the reverse is no better.  &lt;br/&gt;
My intention was to have a sane default behavior that supports customization.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381316" author="olegk" created="Fri, 9 Apr 2004 21:26:23 +0100"  >Mike, I understand that &amp;#39;elegancy&amp;#39; is a matter of personal preference and is&lt;br/&gt;
subjective, so all I am trying is to see if there&amp;#39;s another way to approach the&lt;br/&gt;
problem, which may not necessarily better or feasible at all.&lt;br/&gt;
&lt;br/&gt;
Important question here if tcp/ip sockets stay open when java Socket instance&lt;br/&gt;
garbage-collected or not. I believe the socket should be closed when GCed.&lt;br/&gt;
That&amp;#39;s why I feel I&amp;#39;d rather have the idle connection handler hold onto&lt;br/&gt;
connection managers than individual connections, thus allowing connections to be&lt;br/&gt;
GCed when no longer in use. All I am saying that my guts tell me that&lt;br/&gt;
IdleConnectionManager / HttpConnectionManager coupling seems (to me) slightly&lt;br/&gt;
more elegant than IdleConnectionManager / HttpConnection coupling.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381317" author="mohammad.rezaei@gs.com" created="Sat, 10 Apr 2004 00:51:28 +0100"  >&amp;gt; I believe the socket should be closed when GCed.&lt;br/&gt;
Be very careful here. Sockets are not closed when GC&amp;#39;ed. They&amp;#39;re closed when&lt;br/&gt;
finalized (as implemented in java.net.PlainSocket). Yes, the distinction is&lt;br/&gt;
subtle, but an important one.&lt;br/&gt;
You can somewhat rely on an object being GC&amp;#39;ed, but you absolutely cannot rely&lt;br/&gt;
on an object being finalized (in a timeframe that matters).&lt;br/&gt;
I&amp;#39;m not sure if this is the right place to go into the details, but if the&lt;br/&gt;
statement above is not clear, I&amp;#39;ll be happy to demonstrate with a piece of code.&lt;br/&gt;
In short, I think it would be a very bad idea not to close the socket explicitly.&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh</comment>
                    <comment id="12381318" author="olegk" created="Sat, 10 Apr 2004 01:24:56 +0100"  >Mohammad,&lt;br/&gt;
You may find it shocking, but to me an object may not be considered fully&lt;br/&gt;
disposed of or garbage-collected until its finalizer has been executed. My&lt;br/&gt;
apologies if that was not clear.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381319" author="mohammad.rezaei@gs.com" created="Sat, 10 Apr 2004 01:37:19 +0100"  >Oleg, you&amp;#39;re correct, at least according to the java language spec.&lt;br/&gt;
Unfortunately, the VM implementation seems to cause some serious issues. The&lt;br/&gt;
following code does nothing, as it should:&lt;br/&gt;
&lt;br/&gt;
while(true) new Object();&lt;br/&gt;
&lt;br/&gt;
The next piece of code, however, dies with an out of memory exception:&lt;br/&gt;
&lt;br/&gt;
while(true) new java.util.zip.Deflater();&lt;br/&gt;
&lt;br/&gt;
Deflater has a finalizer that frees up memory. For the life of me, I can&amp;#39;t&lt;br/&gt;
reconcile this fact with the wording of the language spec. Sun has refused to&lt;br/&gt;
fix the above:&lt;br/&gt;
&lt;a href=&quot;http://developer.java.sun.com/developer/bugParade/bugs/4094554.html&quot;&gt;http://developer.java.sun.com/developer/bugParade/bugs/4094554.html&lt;/a&gt;&lt;br/&gt;
It&amp;#39;s also odd that System.gc() is a different call than System.runFinalization()&lt;br/&gt;
(from the spec wording, you wouldn&amp;#39;t expect that).&lt;br/&gt;
I believe this is the reason SWT component have to be disposed and don&amp;#39;t rely on&lt;br/&gt;
finalizers. The situation is even trickier with sockets, because even after a&lt;br/&gt;
socket is closed, it has to go into TIME-WAIT. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh</comment>
                    <comment id="12381320" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 06:52:51 +0100"  >Yes, I agree the big question here is whether or not a Socket is closed when GCed.  My assumption was &lt;br/&gt;
that they are not guaranteed to be closed.   I don&amp;#39;t have any concrete information to back this up but &lt;br/&gt;
my general impression is that some JVMs cannot be relied on to call finalize().  Moh&amp;#39;s reference to SWT &lt;br/&gt;
seems to be a good example. &lt;br/&gt;
&lt;br/&gt;
Oleg, in regard to the IdleConnectionManager / HttpConnection coupling I am certainly interested in &lt;br/&gt;
hearing other suggestions. Could you be more specific about about your thoughts here?&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Mike</comment>
                    <comment id="12381321" author="olegk" created="Mon, 12 Apr 2004 23:15:31 +0100"  >Mike,&lt;br/&gt;
You have a perfectly valid solution to the problem, so feel free to dismiss my&lt;br/&gt;
ideas because they are based completely on personal preferences rather than on&lt;br/&gt;
any objective good programming practices. &lt;br/&gt;
&lt;br/&gt;
This is how I would go about this problem: &lt;br/&gt;
&lt;br/&gt;
* What I do not quite like about the current implementation is that each&lt;br/&gt;
connection manager needs to explicitly check connections in and out with the&lt;br/&gt;
idle connection handler (as a result the idle connection handler is coupled with&lt;br/&gt;
the HttpConnection class, the fact I tend to dislike out of my purely personal&lt;br/&gt;
feelings)&lt;br/&gt;
* At the same time there&amp;#39;s no API that enforces a connection manager to respect&lt;br/&gt;
this implicit contract. There&amp;#39;s an assumption that a well behaving connection&lt;br/&gt;
manager would do so, which custom connection managers, however, may choose to ignore&lt;br/&gt;
* In my opinion HttpConnectionManager implementing classes appear better&lt;br/&gt;
equipped to keep track of connection properties (including how long a connection&lt;br/&gt;
stays idle and all sorts of statistical data: for instance, active time versus&lt;br/&gt;
idle time)&lt;br/&gt;
* I would add a new method to the HttpConnectionManager class:&lt;br/&gt;
HttpConnectionManager#closeIdleConnections(int);&lt;br/&gt;
* I would rather have HttpConnectionManager classes keep track of connections&lt;br/&gt;
idle time&lt;br/&gt;
* Users would not need to always have a dedicated thread watching over&lt;br/&gt;
connections. Some of them (for instance, I (do I qualify as a user? ;-)) would&lt;br/&gt;
rather call closeIdleConnections once in a while from the main thread &lt;br/&gt;
* I would have an optional idle connection handler class for those who need it.&lt;br/&gt;
It would maintain a list of connection managers it is watching over, run a low&lt;br/&gt;
priority thread, and call on connection managers to close their idle connections&lt;br/&gt;
without knowing a dang thing about what a connection is&lt;br/&gt;
* One may have multiple idle connection handlers watching over multiple&lt;br/&gt;
connection managers without causing to much problems to one another as their&lt;br/&gt;
coupling is very loose. There&amp;#39;s no (should be no) harm in calling&lt;br/&gt;
closeIdleConnections multiple time from multiple threads (apart from the obvious&lt;br/&gt;
performance hit)&lt;br/&gt;
&lt;br/&gt;
I do not know if that makes any sense. If it does not, I certainly will not&lt;br/&gt;
object checking in the proposed patch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381322" author="becke@u.washington.edu" created="Tue, 13 Apr 2004 10:36:00 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
Thank you for taking the time to write such a thorough response.  I have a much better idea of what &lt;br/&gt;
you are saying, and unfortunately I agree with you on a number of points :)  I will begin work on a new &lt;br/&gt;
patch.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381323" author="becke@u.washington.edu" created="Mon, 19 Apr 2004 10:11:17 +0100"  >Created an attachment (id=11272)&lt;br/&gt;
Take 3&lt;br/&gt;
</comment>
                    <comment id="12381324" author="becke@u.washington.edu" created="Mon, 19 Apr 2004 10:15:21 +0100"  >Here&amp;#39;s another take on this patch.  It incorporates most of Oleg&amp;#39;s suggestions, with a few changes.  The &lt;br/&gt;
most significant change it that there is no longer a thread polling for idle connections.  Instead, users &lt;br/&gt;
must call HttpConnectionManager.closeIdleConnections().  Please let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381325" author="mohammad.rezaei@gs.com" created="Mon, 19 Apr 2004 22:27:09 +0100"  >Comments on the new patch:&lt;br/&gt;
&lt;br/&gt;
1) Looks like IdleConnectionHandler will have multi-threading issues: the add&lt;br/&gt;
method modifies the tree, while the closeIdleConnections method is trying to&lt;br/&gt;
iterate through the keySet.&lt;br/&gt;
2) I&amp;#39;m not sure I understand why IdleConnectionHandler has a tree of lists (very&lt;br/&gt;
expensive structure) as well as a hashset. Can&amp;#39;t we handle this with just a&lt;br/&gt;
simple list and a hashset?&lt;br/&gt;
3) If IdleConnectionHandler.closeIdleConnections is never called, will the tree&lt;br/&gt;
structure ever get cleaned up? Is there a memory leak under this condition?&lt;br/&gt;
4) Can we add a simple utility class that implements thread and calls&lt;br/&gt;
IdleConnectionHandler.closeIdleConnections so that everyone doesn&amp;#39;t have to&lt;br/&gt;
write their own?&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh&lt;br/&gt;
</comment>
                    <comment id="12381326" author="olegk" created="Tue, 20 Apr 2004 00:23:31 +0100"  >&amp;gt; 1) Looks like IdleConnectionHandler will have multi-threading issues: the add&lt;br/&gt;
&amp;gt; method modifies the tree, while the closeIdleConnections method is trying to&lt;br/&gt;
&amp;gt; iterate through the keySet.&lt;br/&gt;
&lt;br/&gt;
I think it perfectly OK for IdleConnectionHandler to assume that multi-threading&lt;br/&gt;
issues will be taken care of by the HttpConnectionManager&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 2) I&amp;#39;m not sure I understand why IdleConnectionHandler has a tree of &lt;br/&gt;
&amp;gt; lists (very expensive structure) as well as a hashset. Can&amp;#39;t we handle &lt;br/&gt;
&amp;gt; this with just a simple list and a hashset?&lt;br/&gt;
&lt;br/&gt;
A tree of lists can scale much better and will be more efficient when dealing&lt;br/&gt;
with a significant number of connections. However, I think it is certainly an&lt;br/&gt;
overkill for the simple (one connection) connection manager. Mike, can we have&lt;br/&gt;
something lighter for the SimpleHttpConnectionManager?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 3) If IdleConnectionHandler.closeIdleConnections is never called, will &lt;br/&gt;
&amp;gt; the tree structure ever get cleaned up? Is there a memory leak under &lt;br/&gt;
&amp;gt; this condition?&lt;br/&gt;
&lt;br/&gt;
Mike, is there any particular reason for not removing connections from the tree&lt;br/&gt;
of lists in the IdleConnectionHandler#remove method?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 4) Can we add a simple utility class that implements thread and calls&lt;br/&gt;
&amp;gt; IdleConnectionHandler.closeIdleConnections so that everyone doesn&amp;#39;t have to&lt;br/&gt;
&amp;gt; write their own?&lt;br/&gt;
&lt;br/&gt;
Agreed. A simple helper class can be quite handy&lt;br/&gt;
&lt;br/&gt;
Overall, the patch looks very good to me&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381327" author="becke@u.washington.edu" created="Tue, 20 Apr 2004 10:42:05 +0100"  >&amp;gt; 1) Looks like IdleConnectionHandler will have multi-threading issues: the add&lt;br/&gt;
&amp;gt; method modifies the tree, while the closeIdleConnections method is trying to&lt;br/&gt;
&amp;gt; iterate through the keySet.&lt;br/&gt;
&lt;br/&gt;
Yes, it does not provide synchronized access.  This is up to the connection manager to take care of.  &lt;br/&gt;
The multi-threaded connection manager handles this correctly, and it is mentioned in the &lt;br/&gt;
IdleConnectionHandler Javadocs. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; 2) I&amp;#39;m not sure I understand why IdleConnectionHandler has a tree of lists (very&lt;br/&gt;
&amp;gt; expensive structure) as well as a hashset. Can&amp;#39;t we handle this with just a&lt;br/&gt;
&amp;gt; simple list and a hashset?&lt;br/&gt;
&lt;br/&gt;
It may be a little heavy, but it works more efficiently as the number of connections increases.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 3) If IdleConnectionHandler.closeIdleConnections is never called, will the tree&lt;br/&gt;
&amp;gt; structure ever get cleaned up? Is there a memory leak under this condition?&lt;br/&gt;
&lt;br/&gt;
It will eventually get GCed if all references to it are lost.  The connections are not guaranteed to be &lt;br/&gt;
closed though.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 4) Can we add a simple utility class that implements thread and calls&lt;br/&gt;
&amp;gt; IdleConnectionHandler.closeIdleConnections so that everyone doesn&amp;#39;t have to&lt;br/&gt;
&amp;gt; write their own?&lt;br/&gt;
&lt;br/&gt;
Sounds like a decent idea.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381328" author="becke@u.washington.edu" created="Tue, 20 Apr 2004 10:47:43 +0100"  >&amp;gt; A tree of lists can scale much better and will be more efficient when dealing&lt;br/&gt;
&amp;gt; with a significant number of connections. However, I think it is certainly an&lt;br/&gt;
&amp;gt; overkill for the simple (one connection) connection manager. Mike, can we have&lt;br/&gt;
&amp;gt; something lighter for the SimpleHttpConnectionManager?&lt;br/&gt;
&lt;br/&gt;
Can do.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Mike, is there any particular reason for not removing connections from the tree&lt;br/&gt;
&amp;gt; of lists in the IdleConnectionHandler#remove method?&lt;br/&gt;
&lt;br/&gt;
This is just to avoid iterating over the tree map.  The map is keyed by the time added instead of the &lt;br/&gt;
connection.&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
</comment>
                    <comment id="12381329" author="becke@u.washington.edu" created="Wed, 21 Apr 2004 09:58:43 +0100"  >Created an attachment (id=11297)&lt;br/&gt;
Take 4&lt;br/&gt;
</comment>
                    <comment id="12381330" author="becke@u.washington.edu" created="Wed, 21 Apr 2004 09:59:33 +0100"  >This one should address everyones concerns with the last patch.  Please let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381331" author="mohammad.rezaei@gs.com" created="Wed, 21 Apr 2004 21:30:14 +0100"  >&amp;gt; Yes, it does not provide synchronized access.  This is up to the connection&lt;br/&gt;
manager to take care of.  &lt;br/&gt;
&amp;nbsp;Sorry about that, I missed the javadoc at the top. There is, however, one&lt;br/&gt;
downside to doing the synchronization at a higher level: the lock is held while&lt;br/&gt;
idle connections are being closed. In other words, no new connections can be&lt;br/&gt;
made, no connections can be checked out, etc while we&amp;#39;re trying to close off old&lt;br/&gt;
connections. Is socket.close() a fast operation or can it take some time (tens&lt;br/&gt;
of milliseconds)? If it&amp;#39;s slow, we may have to think about this carefully.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; It will eventually get GCed if all references to it are lost.&lt;br/&gt;
But all references to it are not lost: my main thread holds onto the connection&lt;br/&gt;
manager, which holds onto the idle connection handler. Consider for example an&lt;br/&gt;
HTTP proxy, implemented using HttpClient: the usage pattern requires lots of&lt;br/&gt;
arbitrary connections to many different hosts. If nobody calls&lt;br/&gt;
closeIdleConnections, the tree structure will not get cleaned out and the&lt;br/&gt;
chances of a http connection being reused are slim (actually, they&amp;#39;re high for&lt;br/&gt;
short bursts, but low over the long run). Am I missing something?&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh</comment>
                    <comment id="12381332" author="becke@u.washington.edu" created="Thu, 22 Apr 2004 06:55:55 +0100"  >Hi Moh,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Sorry about that, I missed the javadoc at the top. There is, however, one&lt;br/&gt;
&amp;gt; downside to doing the synchronization at a higher level: the lock is held while&lt;br/&gt;
&amp;gt; idle connections are being closed. In other words, no new connections can be&lt;br/&gt;
&amp;gt; made, no connections can be checked out, etc while we&amp;#39;re trying to close off old&lt;br/&gt;
&amp;gt; connections. Is socket.close() a fast operation or can it take some time (tens&lt;br/&gt;
&amp;gt; of milliseconds)? If it&amp;#39;s slow, we may have to think about this carefully.&lt;br/&gt;
&lt;br/&gt;
This is true, but I don&amp;#39;t think there is much we can do about it.  We need to ensure synchronized access &lt;br/&gt;
to the connections, and I think we will end up blocking one way or another.  The upside is that closing &lt;br/&gt;
idle connections should not happen happen terribly often.  My feeling is that this will not be a major &lt;br/&gt;
performance problem.  Please let me know if your experience proves otherwise.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; But all references to it are not lost: my main thread holds onto the connection&lt;br/&gt;
&amp;gt; manager, which holds onto the idle connection handler. Consider for example an&lt;br/&gt;
&amp;gt; HTTP proxy, implemented using HttpClient: the usage pattern requires lots of&lt;br/&gt;
&amp;gt; arbitrary connections to many different hosts. If nobody calls&lt;br/&gt;
&amp;gt; closeIdleConnections, the tree structure will not get cleaned out and the&lt;br/&gt;
&amp;gt; chances of a http connection being reused are slim (actually, they&amp;#39;re high for&lt;br/&gt;
&amp;gt; short bursts, but low over the long run). Am I missing something?&lt;br/&gt;
&lt;br/&gt;
I guess I&amp;#39;m not sure how this is different from the current behavior.  The connection managers already &lt;br/&gt;
hold references to all connections that they own.  The idle connection handler just adds a second &lt;br/&gt;
reference.  These changes do not effect the connection life-cycle they just allow for tracking idle &lt;br/&gt;
connections.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381333" author="olegk" created="Sat, 24 Apr 2004 18:48:56 +0100"  >Mike,&lt;br/&gt;
I have just been thinking: honestly, with millisecond precision what do you&lt;br/&gt;
think is the probability of the tree node ending up containing more than one&lt;br/&gt;
entry? I&amp;#39;d say no more than 2-3%. More than two? Virtually zero. Is the tree of&lt;br/&gt;
lists really worth the trouble? What if we (1) rounded the &amp;#39;time added&amp;#39;&lt;br/&gt;
precision to seconds or even decaseconds or (2) replaced the TreeMap and HashSet&lt;br/&gt;
by a simple LinkedLink?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381334" author="becke@u.washington.edu" created="Sun, 25 Apr 2004 00:14:11 +0100"  >Created an attachment (id=11320)&lt;br/&gt;
Take 5&lt;br/&gt;
</comment>
                    <comment id="12381335" author="becke@u.washington.edu" created="Sun, 25 Apr 2004 00:15:34 +0100"  >Ok, this one has a simplified IdleConnectionHandler.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381336" author="olegk" created="Sun, 25 Apr 2004 00:41:07 +0100"  >Looks good. +1 from me to commit&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381337" author="becke@u.washington.edu" created="Mon, 26 Apr 2004 05:56:32 +0100"  >Patch applied to HEAD.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381338" author="olegk" created="Mon, 26 Apr 2004 07:24:59 +0100"  >Mike, I know I have been torturing you for days with this patch, but I just&lt;br/&gt;
realized there&amp;#39;s a small issue with the use of HashMap to store connections in&lt;br/&gt;
the IdleConnectionHandler. What if an attempt is made to add another connection&lt;br/&gt;
within the same millisecond? This scenario is highly unlikely but not&lt;br/&gt;
impossible. I see two ways to fix the problem: (1) check if there&amp;#39;s an entry for&lt;br/&gt;
the given time, if yes, &amp;#39;pad&amp;#39; the current time value by one until a unique value&lt;br/&gt;
is found; (2) use a List to store objects containing the connection with its&lt;br/&gt;
respective add time&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381339" author="becke@u.washington.edu" created="Mon, 26 Apr 2004 08:55:43 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
The connections are no longer indexed by when they were added.  I decided to do away with the tree &lt;br/&gt;
map and instead am just scanning the full set of collections.  Given that the idle handler is now only &lt;br/&gt;
used in a single connection manager and that closeIdleConnections will not be called very often I think &lt;br/&gt;
the original optimization is not really needed.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381340" author="olegk" created="Tue, 27 Apr 2004 00:22:33 +0100"  >Silly me. I&amp;#39;ve missed the fact that connection objects are used as the hash map&lt;br/&gt;
keys, not the time values.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327034" name="ASF.LICENSE.NOT.GRANTED--changes.txt" size="11227" author="sberlin@limepeer.com" created="Wed, 10 Dec 2003 06:20:59 +0000" />
                    <attachment id="12327038" name="ASF.LICENSE.NOT.GRANTED--idleTimeout.patch" size="26531" author="becke@u.washington.edu" created="Sun, 25 Apr 2004 00:14:11 +0100" />
                    <attachment id="12327037" name="ASF.LICENSE.NOT.GRANTED--idleTimeout.patch" size="27677" author="becke@u.washington.edu" created="Wed, 21 Apr 2004 09:58:43 +0100" />
                    <attachment id="12327036" name="ASF.LICENSE.NOT.GRANTED--idleTimeout.patch" size="18743" author="becke@u.washington.edu" created="Mon, 19 Apr 2004 10:11:17 +0100" />
                    <attachment id="12327035" name="ASF.LICENSE.NOT.GRANTED--timeout.patch" size="16884" author="becke@u.washington.edu" created="Mon, 8 Mar 2004 12:21:36 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25372</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 10 Dec 2003 06:02:55 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>18593</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189274</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>