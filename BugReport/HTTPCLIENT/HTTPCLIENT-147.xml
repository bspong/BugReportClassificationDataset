<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:14:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-147/HTTPCLIENT-147.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-147] HttpClient enter 100% for endless time</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-147</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>I was working masively using HttpClient (I was testing it for usage within a &lt;br/&gt;
server) and it got to 100% CPU for an endless time.&lt;br/&gt;
&lt;br/&gt;
I was querying urls of the type &lt;br/&gt;
&lt;a href=&quot;http://search.barnesandnoble.com/booksearch/results.asp?WRD=&amp;lt;text&amp;gt;&amp;sort=R&amp;SAT=1&quot;&gt;http://search.barnesandnoble.com/booksearch/results.asp?WRD=&amp;amp;lt;text&amp;amp;gt;&amp;amp;sort=R&amp;amp;SAT=1&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
To reproduce it, run 100-200 urls with random words instead of &amp;lt;text&amp;gt; and &lt;br/&gt;
you&amp;#39;ll probably reproduce the problem.</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: PC</environment>
            <key id="12333706">HTTPCLIENT-147</key>
            <summary>HttpClient enter 100% for endless time</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="olegk">Oleg Kalnichevski</assignee>
                                <reporter username="mickey@fetchbook.info">Mickey</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Jan 2003 00:21:05 +0000</created>
                <updated>Sun, 22 Apr 2007 08:10:13 +0100</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:13 +0100</resolved>
                            <version>2.0 Alpha 2</version>
                                <fixVersion>2.0 Beta 1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12379890" author="jsdever@apache.org" created="Tue, 28 Jan 2003 05:10:57 +0000"  >Need more information. What operating system is this occuring on?</comment>
                    <comment id="12379891" author="apernoud@sopragroup.com" created="Thu, 20 Feb 2003 23:52:00 +0000"  >I&amp;#39;ve met this too.&lt;br/&gt;
I have two servlets interacting using httpclient. Using my old nightly it &lt;br/&gt;
worked fine, with current CVS the servlet using httpclient finally uses 100% &lt;br/&gt;
CPU without any reason.&lt;br/&gt;
Config : 2 Tomcat 4.1.18, each one on Windows 2000 Server.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m using MultiThreadedHttpConnectionManager to maintain a pool of connections &lt;br/&gt;
between both apps, and all my requests are made this way :&lt;br/&gt;
try&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method.execute(state, mymanager.getconnection())&lt;br/&gt;
}&lt;br/&gt;
catch (Exception e)&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;log it&lt;br/&gt;
}&lt;br/&gt;
finally&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method.releaseconnection()&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
I have nothing weird in logs, both apps are still up, but the one with &lt;br/&gt;
httpclient starts using 100% cpu &amp;quot;I don&amp;#39;t know when&amp;quot; and never stops. I didn&amp;#39;t &lt;br/&gt;
met the trouble using my old nightly, and the trouble has appeared when testing &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-116&quot; title=&quot;Request/Response race condition when doing multiple requests on the same connection.&quot;&gt;&lt;strike&gt;HTTPCLIENT-116&lt;/strike&gt;&lt;/a&gt;</comment>
                    <comment id="12379892" author="olegk" created="Fri, 21 Feb 2003 00:01:05 +0000"  >Aur&amp;#xE9;lien,&lt;br/&gt;
Could you please let me know exactly want nightly build you had been using before?&lt;br/&gt;
Oleg &lt;br/&gt;
</comment>
                    <comment id="12379893" author="apernoud@sopragroup.com" created="Fri, 21 Feb 2003 00:26:51 +0000"  >An old old one, that was between 2.0a1 and 2.0a2 :(&lt;br/&gt;
Looking the class in jar, it says 30 may 2002&lt;br/&gt;
With this one, there wasn&amp;#39;t the connectionmanager so I used a modified version &lt;br/&gt;
of httpmulticlient</comment>
                    <comment id="12379894" author="olegk" created="Fri, 21 Feb 2003 01:00:38 +0000"  >The bug appears to have been found by Sam Maloney &amp;lt;&lt;a href=&apos;mailto:sam.maloney@filogix.com&apos;&gt;sam.maloney@filogix.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
&lt;br/&gt;
===========================================================================&lt;br/&gt;
Here is the problem:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;br/&gt;
org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:46)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;br/&gt;
org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:81)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:878)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;br/&gt;
org.apache.commons.httpclient.HttpConnectionAdapter.readLine(MultiThreadedHttpConnectionManager_fixed.java:730)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at &lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1917)&lt;br/&gt;
&lt;br/&gt;
You can see that readStatusLine looks like this:&lt;br/&gt;
&lt;br/&gt;
&amp;lt;SNIP&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//read out the HTTP status string&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String statusString = conn.readLine();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while ((statusString != null) &amp;amp;&amp;amp; !statusString.startsWith(&amp;quot;HTTP/&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;statusString = conn.readLine();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (statusString == null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// A null statusString means the connection was lost before we got a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// response.  Try again.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new HttpRecoverableException(&amp;quot;Error in parsing the status &amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ &amp;quot; line from the response: unable to find line starting&lt;br/&gt;
with&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ &amp;quot; \&amp;quot;HTTP/\&amp;quot;&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;lt;/SNIP&amp;gt;&lt;br/&gt;
&lt;br/&gt;
You can see from the above code, that until conn.readLine() returns null or a &lt;br/&gt;
string starting with &amp;quot;HTTP/&amp;quot;, this piece of code will keep looping &lt;br/&gt;
indefinatly (what is taking 100% CPU). Right now, readLine never will return &lt;br/&gt;
null, only empty strings.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m guessing readLine must have returned null at one point, as every place &lt;br/&gt;
that calls it expects null to be returned on closed connection.&lt;br/&gt;
&lt;br/&gt;
The way readLine must work for the calling code to work is:&lt;br/&gt;
&lt;br/&gt;
1) Read data upto \r\n, return line. (currently happens)&lt;br/&gt;
2) if EOF before finding \r\n, but we have data in our buffer, return the &lt;br/&gt;
buffer. (also happens)&lt;br/&gt;
&lt;br/&gt;
3) if EOF before finding any data (buf.size()==0), then return null to signal &lt;br/&gt;
that no more data is possible, and caller should NOT call again. (this is &lt;br/&gt;
what patch adds)&lt;br/&gt;
&lt;br/&gt;
If we return empty string like is happening currently, then the caller will &lt;br/&gt;
not know NOT to call again. In this bugs case, the caller keeps reading lines &lt;br/&gt;
until it finds &amp;#39;HTTP/&amp;#39;. Since the empty string doesn&amp;#39;t match that, the caller &lt;br/&gt;
will keep trying to get the next line, and they will just keep getting &amp;quot;&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
Here is my patch again, updated to apply to HttpParser (where the readLine &lt;br/&gt;
code has been moved to since my last patch). I have retested the new patch &lt;br/&gt;
and it is working in all my test cases, including the one to reproduce the &lt;br/&gt;
bug.&lt;br/&gt;
&lt;br/&gt;
Index: HttpParser.java&lt;br/&gt;
===================================================================&lt;br/&gt;
RCS file: &lt;br/&gt;
/home/cvspublic/jakarta-commons/httpclient/src/java/org/apache/commons/httpclient/HttpParser.java,v&lt;br/&gt;
retrieving revision 1.1&lt;br/&gt;
diff -u -r1.1 HttpParser.java&lt;br/&gt;
--- HttpParser.java     16 Feb 2003 13:10:16 -0000      1.1&lt;br/&gt;
+++ HttpParser.java     20 Feb 2003 15:51:51 -0000&lt;br/&gt;
@@ -58,6 +58,10 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
+        if (buf.size() &amp;lt;= 0) {&lt;br/&gt;
+            // Then we just started reading, but the stream is EOF (closed).&lt;br/&gt;
+            return null; // Let caller know we got EOF BEFORE any data.&lt;br/&gt;
+        }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (WIRE_LOG.isDebugEnabled()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WIRE_LOG.debug(&amp;quot;&amp;lt;&amp;lt; \&amp;quot;&amp;quot; + buf.toString() + (ch&amp;gt;0 ? &amp;quot;\&amp;quot; [\\r\\n]&amp;quot; : &lt;br/&gt;
&amp;quot;&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
@@ -79,6 +83,12 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static String readLine(InputStream inputStream) throws IOException &lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOG.trace(&amp;quot;enter HttpConnection.readLine()&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;byte[] rawdata = readRawLine(inputStream);&lt;br/&gt;
+&lt;br/&gt;
+        if (rawdata == null) {&lt;br/&gt;
+            // Then there was EOF before any data was read, we must let &lt;br/&gt;
caller know.&lt;br/&gt;
+            return null;&lt;br/&gt;
+        }&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int len = rawdata.length;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (( len &amp;gt;= 2) &amp;amp;&amp;amp; (rawdata[len - 2] == &amp;#39;\r&amp;#39;) &amp;amp;&amp;amp; (rawdata[len - 1] == &lt;br/&gt;
&amp;#39;\n&amp;#39;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return HttpConstants.getString(rawdata, 0, rawdata.length - 2);&lt;br/&gt;
</comment>
                    <comment id="12379895" author="olegk" created="Wed, 26 Feb 2003 21:34:55 +0000"  >I assume this bug can be considered done with. Problems related to this bug&lt;br/&gt;
should re-resubmitted as new bugs&lt;br/&gt;
Oleg </comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>16458</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 28 Jan 2003 05:10:57 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133201</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189188</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>