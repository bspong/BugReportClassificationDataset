<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:21:53 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-881/HTTPCLIENT-881.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-881] AbstractClientConnAdapter doesn&apos;t ensure that only one of ConnectionReleaseTrigger.abortConnection, .releaseConnection has effect</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-881</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>If HttpUriRequest.abort() is called at about the same time that the request completes, it&amp;#39;s possible for an aborted connection to be returned to the pool.  The next time the connection is used, HttpClient.execute fails without retrying, throwing this exception:&lt;br/&gt;
&lt;br/&gt;
java.io.IOException: Connection already shutdown&lt;br/&gt;
	at org.apache.http.impl.conn.DefaultClientConnection.opening(DefaultClientConnection.java:112)&lt;br/&gt;
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:120)&lt;br/&gt;
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:147)&lt;br/&gt;
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:101)&lt;br/&gt;
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:381)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:641)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:576)&lt;br/&gt;
&lt;br/&gt;
Steps to reproduce:&lt;br/&gt;
1) Set a breakpoint in ThreadSafeClientConnManager.releaseConnection just after &amp;quot;reusable&amp;quot; is set (and found to be true).&lt;br/&gt;
2) Run to the breakpoint in releaseConnection.&lt;br/&gt;
3) Call HttpUriRequest.abort.&lt;br/&gt;
4) Let releaseConnection complete.&lt;br/&gt;
&lt;br/&gt;
When the connection is next used, the exception will be thrown.&lt;br/&gt;
&lt;br/&gt;
Snippet from ThreadSafeClientConnManager:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void releaseConnection(ManagedClientConnection conn, long validDuration, TimeUnit timeUnit) {&lt;br/&gt;
		...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean reusable = hca.isMarkedReusable();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (log.isDebugEnabled()) {                             // breakpoint here&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (reusable) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.debug(&amp;quot;Released connection is reusable.&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.debug(&amp;quot;Released connection is not reusable.&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;hca.detach();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (entry != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectionPool.freeEntry(entry, reusable, validDuration, timeUnit);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
I think that AbstractClientConnAdapter should be modified as follows:&lt;br/&gt;
&lt;br/&gt;
1) Add &amp;quot;released&amp;quot; flag:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** True if the connection has been released. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean released;&lt;br/&gt;
&lt;br/&gt;
2) Modify abortConnection:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void abortConnection() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized(this) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (aborted || released) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;aborted = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unmarkReusable(); // this line and all that follow unchanged&lt;br/&gt;
&lt;br/&gt;
3) Modify releaseConnection:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void releaseConnection() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized(this) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (aborted || released) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;released = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (connManager != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connManager.releaseConnection(this, duration, TimeUnit.MILLISECONDS);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12438234">HTTPCLIENT-881</key>
            <summary>AbstractClientConnAdapter doesn&apos;t ensure that only one of ConnectionReleaseTrigger.abortConnection, .releaseConnection has effect</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="tboemker">Tim Boemker</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Oct 2009 20:10:19 +0100</created>
                <updated>Tue, 25 Jan 2011 10:59:22 +0000</updated>
                    <resolved>Fri, 16 Oct 2009 13:29:27 +0100</resolved>
                            <version>4.0 Final</version>
                                <fixVersion>4.1 Alpha1</fixVersion>
                                <component>HttpConn</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12766256" author="olegk" created="Thu, 15 Oct 2009 22:09:16 +0100"  >Tim,&lt;br/&gt;
&lt;br/&gt;
Would you be able to put all these changes in a patch (udiff format as produced by &amp;#39;svn diff&amp;#39; command)?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12766268" author="tboemker" created="Thu, 15 Oct 2009 22:37:35 +0100"  >Also attached.&lt;br/&gt;
&lt;br/&gt;
Index: AbstractClientConnAdapter.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- AbstractClientConnAdapter.java      (revision 825665)&lt;br/&gt;
+++ AbstractClientConnAdapter.java      (working copy)&lt;br/&gt;
@@ -86,6 +86,9 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** True if the connection has been aborted. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private volatile boolean aborted;&lt;br/&gt;
&lt;br/&gt;
+    /** True if the connection has been released. */&lt;br/&gt;
+    private boolean released;&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** The duration this is valid for while idle (in ms). */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private volatile long duration;&lt;br/&gt;
&lt;br/&gt;
@@ -316,16 +319,25 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void releaseConnection() {&lt;br/&gt;
+        synchronized(this) {&lt;br/&gt;
+            if (aborted || released) {&lt;br/&gt;
+                return;&lt;br/&gt;
+            }&lt;br/&gt;
+            released = true;&lt;br/&gt;
+        }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (connManager != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connManager.releaseConnection(this, duration, TimeUnit.MILLISECONDS);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void abortConnection() {&lt;br/&gt;
-        if (aborted) {&lt;br/&gt;
-            return;&lt;br/&gt;
+        synchronized(this) {&lt;br/&gt;
+            if (aborted || released) {&lt;br/&gt;
+                return;&lt;br/&gt;
+            }&lt;br/&gt;
+            aborted = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-        aborted = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unmarkReusable();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shutdown();&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12766514" author="olegk" created="Fri, 16 Oct 2009 13:29:27 +0100"  >Tim&lt;br/&gt;
&lt;br/&gt;
There was a regression in the test suite with your patch. I came up with a slight variation on your patch that appears to fix the race condition while preserving compatibility with the original behaviour of HttpUriRequest#abort(). Please pull the latest code from the SVN repository, review the changes an confirm the problem has been adequately fixed.&lt;br/&gt;
&lt;br/&gt;
I did not investigate thoroughly why those test cases started to fail. It can well be the test cases are flawed somehow.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
Results :&lt;br/&gt;
&lt;br/&gt;
Tests in error:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testAbortDuringConnecting(org.apache.http.impl.conn.TestTSCCMWithServer)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testAbortBeforeSocketCreate(org.apache.http.impl.conn.TestTSCCMWithServer)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testAbortAfterSocketConnect(org.apache.http.impl.conn.TestTSCCMWithServer)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testAbortAfterOperatorOpen(org.apache.http.impl.conn.TestTSCCMWithServer)&lt;br/&gt;
&lt;br/&gt;
Tests run: 477, Failures: 0, Errors: 4, Skipped: 0&lt;br/&gt;
----</comment>
                    <comment id="12766537" author="olegk" created="Fri, 16 Oct 2009 15:13:07 +0100"  >I figured why the test cases were failing. It was due to an erroneous assumption that connection abort would not automatically release the connection back to the manager. I also removed an old ugly hack that was no longer relevant / valid.&lt;br/&gt;
&lt;br/&gt;
All looks okay to me now. Double-check, nonetheless.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12766560" author="tboemker" created="Fri, 16 Oct 2009 16:32:54 +0100"  >The current version of the code still has a race condition.  In AbstractClientConnection.java, it&amp;#39;s possible for abortConnection and releaseConnection both to read shutdown as false and for both to continue execution.  ThreadSafeClientConnManager.releaseConnection is not thread-safe when two threads are trying to release the same connection.&lt;br/&gt;
&lt;br/&gt;
I am following these steps to demonstrate the race condition:&lt;br/&gt;
1) Let abortConnection and releaseConnection both step through the line that tests whether shutdown is already set.&lt;br/&gt;
2) Let the thread running releaseConnection run just past the line in ThreadSafeClientConnManager.releaseConnection that sets local variable reusable from hca.isMarkedReusable.&lt;br/&gt;
3) Let the thread running abortConnection run to the same point.&lt;br/&gt;
4) Let the thread running releaseConnection finish.&lt;br/&gt;
5) Let the thread running abortConnection finish.&lt;br/&gt;
6) Attempt another request to the same host.&lt;br/&gt;
&lt;br/&gt;
These steps consistently produce the following error:&lt;br/&gt;
java.lang.IllegalStateException: There is no entry that could be dropped.&lt;br/&gt;
	at org.apache.http.impl.conn.tsccm.RouteSpecificPool.dropEntry(RouteSpecificPool.java:244)&lt;br/&gt;
	at org.apache.http.impl.conn.tsccm.ConnPoolByRoute.freeEntry(ConnPoolByRoute.java:418)&lt;br/&gt;
	at org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager.releaseConnection(ThreadSafeClientConnManager.java:254)&lt;br/&gt;
	at org.apache.http.impl.conn.AbstractClientConnAdapter.abortConnection(AbstractClientConnAdapter.java:338)&lt;br/&gt;
	at org.apache.http.impl.client.DefaultRequestDirector.abortConnection(DefaultRequestDirector.java:1058)&lt;br/&gt;
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:566)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:674)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:609)&lt;br/&gt;
	...&lt;br/&gt;
&lt;br/&gt;
I propose the following change to the current version of AbstractClientConnection.java:&lt;br/&gt;
&lt;br/&gt;
Index: AbstractClientConnAdapter.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- AbstractClientConnAdapter.java      (revision 825909)&lt;br/&gt;
+++ AbstractClientConnAdapter.java      (working copy)&lt;br/&gt;
@@ -311,20 +311,24 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void releaseConnection() {&lt;br/&gt;
-        if (shutdown) {&lt;br/&gt;
-            return;&lt;br/&gt;
+        synchronized(this) {&lt;br/&gt;
+            if (shutdown) {&lt;br/&gt;
+                return;&lt;br/&gt;
+            }&lt;br/&gt;
+            shutdown = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-        shutdown = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (connManager != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connManager.releaseConnection(this, duration, TimeUnit.MILLISECONDS);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void abortConnection() {&lt;br/&gt;
-        if (shutdown) {&lt;br/&gt;
-            return;&lt;br/&gt;
+        synchronized(this) {&lt;br/&gt;
+            if (shutdown) {&lt;br/&gt;
+                return;&lt;br/&gt;
+            }&lt;br/&gt;
+            shutdown = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-        shutdown = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;unmarkReusable();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;shutdown();&lt;br/&gt;
&lt;br/&gt;
With this code change, the regression tests pass and, I think, the problem is fixed.</comment>
                    <comment id="12766599" author="olegk" created="Fri, 16 Oct 2009 17:54:50 +0100"  >* Methods mutating the internal state of the AbstractClientConnAdapter class and its subclasses made synchronized&lt;br/&gt;
* ThreadSafeClientConnManager#releaseConnection method now synchronizes access to the BasicPooledConnAdapter instance&lt;br/&gt;
&lt;br/&gt;
Please review / re-test&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12766630" author="tboemker" created="Fri, 16 Oct 2009 18:58:37 +0100"  >With the latest changes, I&amp;#39;m able to get HttpClient.execute to throw an IllegalStateException.&lt;br/&gt;
&lt;br/&gt;
Steps to reproduce:&lt;br/&gt;
&lt;br/&gt;
1) Run one thread to line 385 in DefaultRequestDirector, where it calls establishRoute.&lt;br/&gt;
2) Run a second thread that calls HttpUriRequest.abort.  Abort calls BasicPooledConnAdapter.abortConnection, which calls ThreadSafeClientConnManager.releaseConnection, which calls BasicPooledConnAdapter.detach.&lt;br/&gt;
3) Let the main thread continue. It throws an IllegalStateException because the adapter is now detached:&lt;br/&gt;
&lt;br/&gt;
java.lang.IllegalStateException: Adapter is detached.&lt;br/&gt;
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.assertAttached(AbstractPooledConnAdapter.java:75)&lt;br/&gt;
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.getRoute(AbstractPooledConnAdapter.java:91)&lt;br/&gt;
	at org.apache.http.impl.client.DefaultRequestDirector.establishRoute(DefaultRequestDirector.java:641)&lt;br/&gt;
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:385)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:674)&lt;br/&gt;
	at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:609)</comment>
                    <comment id="12766636" author="tboemker" created="Fri, 16 Oct 2009 19:15:41 +0100"  >I see that the code in AbstractClientConnAdapter.abortConnection was changed from this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Usually #abortConnection() is expected to be called from &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// a helper thread in order to unblock the main execution thread &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// blocked in an I/O operation. It may be unsafe to call &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// #releaseConnection() from the helper thread, so we have to rely&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// on an IOException thrown by the closed socket on the main thread &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// to trigger the release of the connection back to the &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// connection manager.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// However, if this method is called from the main execution thread &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// it should be safe to release the connection immediately. Besides, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// this also helps ensure the connection gets released back to the &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// manager if #abortConnection() is called from the main execution &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// thread while there is no blocking I/O operation.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (executionThread.equals(Thread.currentThread())) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;releaseConnection();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
to this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (connManager != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connManager.releaseConnection(this, duration, TimeUnit.MILLISECONDS);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Perhaps the comment in the original code was correct.</comment>
                    <comment id="12766663" author="olegk" created="Fri, 16 Oct 2009 20:04:22 +0100"  >I think it is perfectly reasonable that an attempt to perform an operation on an aborted connection would cause an exception of some sort. I made sure, though, that a normal operation (such as I/O operation) would result in an InterruptedIOException not IllegalStateException.&lt;br/&gt;
&lt;br/&gt;
Please re-test&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12766683" author="tboemker" created="Fri, 16 Oct 2009 21:20:53 +0100"  >I did not find a defect in the new code.</comment>
                </comments>
                    <attachments>
                    <attachment id="12422282" name="ASF.LICENSE.NOT.GRANTED--HTTPCLIENT-881.patch" size="1204" author="tboemker" created="Thu, 15 Oct 2009 22:37:35 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 15 Oct 2009 21:09:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133893</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47382</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>