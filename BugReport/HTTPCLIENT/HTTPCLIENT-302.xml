<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:15:53 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-302/HTTPCLIENT-302.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-302] exception during writeRequest leaves the connection un-released</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-302</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>The execute method has the following (simplified) flow:&lt;br/&gt;
1) get connection&lt;br/&gt;
2) write request&lt;br/&gt;
3) read result&lt;br/&gt;
4) release connection.&lt;br/&gt;
The release in step 4 happens when the input is completely read, which works fine.&lt;br/&gt;
If an exception occurs between steps 1 and 2, the connection is also released&lt;br/&gt;
properly.&lt;br/&gt;
However, if an exception occurs during step 2, the connection is never released&lt;br/&gt;
back and the connection manager eventually runs out of connections.&lt;br/&gt;
&lt;br/&gt;
The easiest way to test this is to make a simple subclass of PostMethod that&lt;br/&gt;
overrides the writeRequest method:&lt;br/&gt;
&lt;br/&gt;
public class TestConnectionReleaseMethod extends PostMethod&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected void writeRequest(HttpState state, HttpConnection conn) throws&lt;br/&gt;
IOException, HttpException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new IOException(&amp;quot;for testing&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333861">HTTPCLIENT-302</key>
            <summary>exception during writeRequest leaves the connection un-released</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mohammad.rezaei@gs.com">Mohammad Rezaei</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Dec 2003 04:20:47 +0000</created>
                <updated>Wed, 16 Feb 2011 20:44:46 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:38 +0100</resolved>
                            <version>Snapshot</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381288" author="olegk" created="Wed, 10 Dec 2003 05:59:32 +0000"  >Hhm, I/O exceptions thrown in writeRequest method are supposed to be treated as&lt;br/&gt;
recoverable, causing the writeRequest method to be retried without releasing the&lt;br/&gt;
connection. What kind of exception are you getting exactly? Besides, any idea if&lt;br/&gt;
CVS HEAD also exhibits this problem?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381289" author="mohammad.rezaei@gs.com" created="Thu, 11 Dec 2003 00:56:57 +0000"  >The unfortunate reality with IOExceptions is that they can occur when you least&lt;br/&gt;
expect them. I ran into this while doing rigorous exception testing (see the&lt;br/&gt;
test code below).&lt;br/&gt;
&lt;br/&gt;
The statement &amp;quot;writeRequest method are supposed to be treated as&lt;br/&gt;
recoverable&amp;quot; appears to be false: the method signature has IOException in it. It&lt;br/&gt;
is not possible to remove that either, because an IOException can truly occur&lt;br/&gt;
during the write. Of course, it is possible to change the method signature to&lt;br/&gt;
&amp;quot;throws HttpRecoverableException&amp;quot; and catch other exceptions and wrap them as&lt;br/&gt;
HttpRecoverableException. However, from the HTTP spec, a generic writeRequest is&lt;br/&gt;
*not* simply retriable (it is not considered idempotent for POST, PUT, etc; see&lt;br/&gt;
section 9.1 of the RFC). I would strongly discourage wrapping the IOException&lt;br/&gt;
inside writeRequest.&lt;br/&gt;
</comment>
                    <comment id="12381290" author="olegk" created="Thu, 11 Dec 2003 01:51:31 +0000"  >&amp;gt; The statement &amp;quot;writeRequest method are supposed to be treated as&lt;br/&gt;
&amp;gt; recoverable&amp;quot; appears to be false: the method signature has IOException in it&lt;br/&gt;
&lt;br/&gt;
Feel free to examine the source code and double-check. There is one situation I&lt;br/&gt;
know of, when I/O exceptions would not be rethrown as HttpRecoverableException,&lt;br/&gt;
that is, the connection is not known to have successfully completed a write&lt;br/&gt;
operation at least once. In all other cases, I/O exceptions are rethrown as&lt;br/&gt;
HttpRecoverableException (derived from IOException).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; However, from the HTTP spec, a generic writeRequest is *not* simply &lt;br/&gt;
&amp;gt; retriable (it is not considered idempotent for POST, PUT, etc; see&lt;br/&gt;
&amp;gt; section 9.1 of the RFC). I would strongly discourage wrapping the IOException&lt;br/&gt;
&amp;gt; inside writeRequest&lt;br/&gt;
&lt;br/&gt;
If understand the word of the spec correctly the section 9.1 postulates that&lt;br/&gt;
&amp;quot;... methods can also have the property of &amp;quot;idempotence&amp;quot; in that ... the&lt;br/&gt;
side-effects of N &amp;gt; 0 identical requests is the same as for a single request...&amp;quot;&lt;br/&gt;
&lt;br/&gt;
HttpClient never automatically re-executes requests on a read operation failure.&lt;br/&gt;
Auto-recovery MAY takes place (if enabled) on a write operation (that is, the&lt;br/&gt;
request body never makes it to the server in its entirety). That guarantees that&lt;br/&gt;
there&amp;#39;s at least one, but not more that one, successful request for a given&lt;br/&gt;
resource. Feel free to correct me if I am missing something. Besides,&lt;br/&gt;
auto-recovery can be customized through the use of MethodRetryHandler interface&lt;br/&gt;
&lt;br/&gt;
Again, any idea under what circumstances the reported problem occurs? Do you&lt;br/&gt;
happen to know if CVS HEAD also exhibits the problem?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381291" author="mohammad.rezaei@gs.com" created="Thu, 11 Dec 2003 03:18:30 +0000"  >This is an interesting discussion and I really appreciate the attention, time&lt;br/&gt;
and effort that goes into answering this.  &lt;br/&gt;
&lt;br/&gt;
Let me answer the questions first:&lt;br/&gt;
&amp;gt; any idea under what circumstances the reported problem occurs? &lt;br/&gt;
The problem has not (yet?) occured in running code. It was detected during&lt;br/&gt;
&amp;quot;exception testing&amp;quot;. By &amp;quot;exception testing&amp;quot; I mean I put a line of code that says:&lt;br/&gt;
&lt;br/&gt;
if (CAUSE_RANDOM_ERROR) if (Math.random() &amp;gt; ERROR_RATE) throw new&lt;br/&gt;
IOException(&amp;quot;Random error, for testing only!&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
anywhere an IO operation can occur. You&amp;#39;d be amazed the kinds of issue that come&lt;br/&gt;
to light when you do this. Essentially, it is a decent way to test all the error&lt;br/&gt;
handling code that people write but only execute under rare circumstances.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Do you happen to know if CVS HEAD also exhibits the problem?&lt;br/&gt;
This is against RC2. The CVS codepath is quite different, but from reading the&lt;br/&gt;
source, I&amp;#39;m don&amp;#39;t think the problem is fixed. Essentially, the connection is&lt;br/&gt;
only released if the response body is consumed. If the write failed, there is no&lt;br/&gt;
body to consume and therefore, the release won&amp;#39;t occur.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Feel free to examine the source code and double-check. There is one situation I&lt;br/&gt;
&amp;gt; know of, when I/O exceptions would not be rethrown as HttpRecoverableException,&lt;br/&gt;
&amp;gt; that is, the connection is not known to have successfully completed a write&lt;br/&gt;
&amp;gt; operation at least once. In all other cases, I/O exceptions are rethrown as&lt;br/&gt;
&amp;gt; HttpRecoverableException (derived from IOException).&lt;br/&gt;
&lt;br/&gt;
From reading the code, it seems the outputstream is wrapped inside&lt;br/&gt;
WrappedOutputStream which rethrows any exceptions *inside its methods* as&lt;br/&gt;
recoverable. There are two problems with this approach. &lt;br/&gt;
1) IOExceptions can (and do) occur outside the methods wrapped by&lt;br/&gt;
WrappedOutputStream. 2 examples: a) FilePart.java line 258 is reading a file.&lt;br/&gt;
That can throw an IOException. No amount of wrapping of the OutputStream will&lt;br/&gt;
catch this. b) A custom method that further wraps the stream (e.g. with an&lt;br/&gt;
ObjectOutputStream) may throw errors without ever touching the underlying stream&lt;br/&gt;
(e.g. NotSerializableException).&lt;br/&gt;
2) RuntimeExceptions have the same effect.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;gt; HttpClient never automatically re-executes requests on a read operation failure.&lt;br/&gt;
&amp;gt; Auto-recovery MAY takes place (if enabled) on a write operation (that is, the&lt;br/&gt;
&amp;gt; request body never makes it to the server in its entirety). That guarantees that&lt;br/&gt;
&amp;gt; there&amp;#39;s at least one, but not more that one, successful request for a given&lt;br/&gt;
&amp;gt; resource. Feel free to correct me if I am missing something. Besides,&lt;br/&gt;
&amp;gt; auto-recovery can be customized through the use of MethodRetryHandler interface&lt;br/&gt;
&lt;br/&gt;
Thanks for the clarification. You still have to be extremely careful if you&lt;br/&gt;
enable auto recovery on write. Just because the write failed somewhere, doesn&amp;#39;t&lt;br/&gt;
mean the server didn&amp;#39;t do anything. Take the simple case of a multi-part mime&lt;br/&gt;
message consisting of several files (to be saved on the server). If the last&lt;br/&gt;
file being sent dies with an IOException (e.g. the network drive it was on went&lt;br/&gt;
to lala land), the server very likely already received and processed all the&lt;br/&gt;
files prior to that. Resending those files can cause major issues (for example,&lt;br/&gt;
the server may refuse to overwrite an existing file,  a batch process waiting&lt;br/&gt;
for a file may rerun some transactions, etc).&lt;br/&gt;
&lt;br/&gt;
How about this fix: add&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (IOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;releaseConnection = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw e;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (RuntimeException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;releaseConnection = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw e;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
to the last try clause in HttpMethodDirector#executeWithRetry ?&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12381292" author="olegk" created="Thu, 11 Dec 2003 04:01:01 +0000"  >&amp;gt; if (CAUSE_RANDOM_ERROR) if (Math.random() &amp;gt; ERROR_RATE) throw new&lt;br/&gt;
&amp;gt; IOException(&amp;quot;Random error, for testing only!&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
OK. I see.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; From reading the code, it seems the outputstream is wrapped &lt;br/&gt;
&amp;gt; insideWrappedOutputStream which rethrows any exceptions *inside its methods* &lt;br/&gt;
&amp;gt; asrecoverable. There are two problems with this approach. &lt;br/&gt;
&lt;br/&gt;
Mohammad, actually that is that way it is supposed to be. IOException thrown&lt;br/&gt;
when retrieving request content or runtime exceptions are not recoverable HTTP&lt;br/&gt;
transport exceptions and should not be treated as such &lt;br/&gt;
&lt;br/&gt;
&amp;gt; Thanks for the clarification. You still have to be extremely careful if you&lt;br/&gt;
&amp;gt; enable auto recovery on write.&lt;br/&gt;
&lt;br/&gt;
Agreed. I personally am not in favour of having auth-recovery activated per&lt;br/&gt;
default, but according to the feedback we were getting from our users the&lt;br/&gt;
majority did not appear to share that conviction.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; How about this fix: add&lt;br/&gt;
&amp;gt;                 catch (IOException e) {&lt;br/&gt;
&amp;gt;                     releaseConnection = true;&lt;br/&gt;
&amp;gt;                     throw e;&lt;br/&gt;
&amp;gt;                 } catch (RuntimeException e) {&lt;br/&gt;
&amp;gt;                     releaseConnection = true;&lt;br/&gt;
&amp;gt;                     throw e;&lt;br/&gt;
&amp;gt;                 }&lt;br/&gt;
&amp;gt; to the last try clause in HttpMethodDirector#executeWithRetry ?&lt;br/&gt;
&lt;br/&gt;
That can be done. I would not like to change 2.0 branch, though, for the&lt;br/&gt;
following reason: the invocation of HttpClient#execute(HttpMethod) MUST be&lt;br/&gt;
followed by HttpMethod#releaseconnection regardless of the outcome (preferably&lt;br/&gt;
by calling it in the finally clause). This is a part of HttpClient API contract.&lt;br/&gt;
So, personally do not see this bug serious enough to warrant modification of&lt;br/&gt;
HttpClient 2.0 which is the release candidate phase.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381293" author="becke@u.washington.edu" created="Wed, 17 Dec 2003 11:03:40 +0000"  >Created an attachment (id=9607)&lt;br/&gt;
Test case and 2.0 patch&lt;br/&gt;
</comment>
                    <comment id="12381294" author="becke@u.washington.edu" created="Wed, 17 Dec 2003 11:05:56 +0000"  >Here&amp;#39;s a test case and a possible fix for 2.0.  I&amp;#39;m not sure this is exactly what we want, but it&amp;#39;s a &lt;br/&gt;
start.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381295" author="skoehler@upb.de" created="Wed, 17 Dec 2003 11:40:18 +0000"  >i believe that this has something to do with the fact, that the connection would&lt;br/&gt;
have to be closed because HttpClient cannot finish the request due to the lack&lt;br/&gt;
of data.&lt;br/&gt;
the anoying thing for me was, that HttpClient tries to finish a HTTP-request if&lt;br/&gt;
one calls releaseConnection(). finishing a HTTP-request ment downloading the&lt;br/&gt;
rest of the requested data for me. in this case this behaviour is even more fatal.&lt;br/&gt;
&lt;br/&gt;
this is a serious issue since it causes connections to idle around if this error&lt;br/&gt;
happens - if i understand everything correctly.</comment>
                    <comment id="12381296" author="mohammad.rezaei@gs.com" created="Wed, 17 Dec 2003 22:42:31 +0000"  >Same condition occurs on a RuntimeException. Mike&amp;#39;s patch can easily be updated&lt;br/&gt;
to take care of it.&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
Moh&lt;br/&gt;
</comment>
                    <comment id="12381297" author="becke@u.washington.edu" created="Thu, 18 Dec 2003 10:00:36 +0000"  >Created an attachment (id=9617)&lt;br/&gt;
Possible patch 2&lt;br/&gt;
</comment>
                    <comment id="12381298" author="becke@u.washington.edu" created="Thu, 18 Dec 2003 10:04:13 +0000"  >Okay.  Here it is.  This one releases and closes the connection in the event of an unrecoverable &lt;br/&gt;
exception in HttpMethodBase.processRequest().  Let&amp;#39;s give it a try and see how it holds up.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381299" author="olegk" created="Fri, 19 Dec 2003 02:31:49 +0000"  >+1 to be committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381300" author="becke@u.washington.edu" created="Fri, 19 Dec 2003 14:02:29 +0000"  >Patch applied to 2.0.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381301" author="olegk" created="Mon, 12 Jan 2004 04:32:15 +0000"  >Created an attachment (id=9904)&lt;br/&gt;
Patch against HEAD (take 1)&lt;br/&gt;
</comment>
                    <comment id="12381302" author="olegk" created="Mon, 12 Jan 2004 04:34:54 +0000"  >Mike&amp;#39;s patch ported to CVS HEAD. Please review</comment>
                    <comment id="12381303" author="becke@u.washington.edu" created="Tue, 13 Jan 2004 05:07:35 +0000"  >Looks good.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381304" author="olegk" created="Tue, 13 Jan 2004 07:04:08 +0000"  >Patch committed to CVS HEAD. &lt;br/&gt;
Oleg.</comment>
                </comments>
                    <attachments>
                    <attachment id="12327033" name="ASF.LICENSE.NOT.GRANTED--connrelease.patch" size="7836" author="olegk" created="Mon, 12 Jan 2004 04:32:15 +0000" />
                    <attachment id="12327032" name="ASF.LICENSE.NOT.GRANTED--releaseConnection.patch" size="2706" author="becke@u.washington.edu" created="Thu, 18 Dec 2003 10:00:36 +0000" />
                    <attachment id="12327031" name="ASF.LICENSE.NOT.GRANTED--releaseConnection.patch" size="2517" author="becke@u.washington.edu" created="Wed, 17 Dec 2003 11:03:40 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25370</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 10 Dec 2003 05:59:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133353</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189243</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>