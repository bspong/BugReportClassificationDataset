<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:13:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-1152/HTTPCLIENT-1152.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-1152] org.apache.http.impl.client.cache.memcached.MemcachedHttpCacheStorage should verify class of returned object before casting</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-1152</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>org.apache.http.impl.client.cache.memcached.MemcachedHttpCacheStorage&lt;br/&gt;
&lt;br/&gt;
Original (in getEntry function): &lt;br/&gt;
&amp;nbsp;&amp;nbsp;byte[] data = (byte[]) client.get(url);&lt;br/&gt;
&lt;br/&gt;
Should be:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Object obj= client.get(url);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (null == obj || !(objinstanceof byte[])) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;byte[] data = (byte[])obj;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Original (in updateEntry function):&lt;br/&gt;
&amp;nbsp;&amp;nbsp;byte[] oldBytes = (v != null) ? (byte[]) v.getValue() : null;&lt;br/&gt;
&lt;br/&gt;
Should be:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;byte[] oldBytes = (v != null &amp;amp;&amp;amp; (v.getValue() instanceof byte[])) ? (byte[]) v.getValue() : null;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12535889">HTTPCLIENT-1152</key>
            <summary>org.apache.http.impl.client.cache.memcached.MemcachedHttpCacheStorage should verify class of returned object before casting</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jonm">Jon Moore</assignee>
                                <reporter username="tinclon">Clinton Nielsen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Dec 2011 19:27:15 +0000</created>
                <updated>Mon, 9 Jan 2012 21:27:14 +0000</updated>
                    <resolved>Mon, 9 Jan 2012 14:46:26 +0000</resolved>
                            <version>4.1.1</version>
                                <fixVersion>4.1.3</fixVersion>
                <fixVersion>4.2 Beta1</fixVersion>
                                <component>HttpCache</component>
                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13173858" author="rajika" created="Wed, 21 Dec 2011 04:45:50 +0000"  >There is possibility of getting a Class Cast Exception.  Here is a patch for the issue. I also fixed some code indentation for more readability. &lt;br/&gt;
&lt;br/&gt;
Rajika</comment>
                    <comment id="13174122" author="tinclon" created="Wed, 21 Dec 2011 14:33:26 +0000"  >Looks like the patch fixes the problems in updateEntry, but fails to fix the same problem in getEntry.</comment>
                    <comment id="13174195" author="olegk" created="Wed, 21 Dec 2011 16:40:42 +0000"  >One thing I do not quite understand. Why would there be anything other than byte array in the memcache? In case someone was silly enough to have stuck some arbitrary object in the memcache used by HttpClientCache throwing ClassCastException seems perfectly reasonable.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="13174204" author="tinclon" created="Wed, 21 Dec 2011 16:55:10 +0000"  >Could be that somebody is using the cache for other purposes as well, and just happens to set an object with a URL as a key that conflicts with an object that is set by MemcachedHttpCacheStorage.&lt;br/&gt;
&amp;nbsp;-- this could (and also probably should) be mitigated by allowing the client of MemcachedHttpCacheStorage to set a client-defined prefix String that will be prefixed to all keys, thus avoiding potential collisions.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
In my case, it is that we are using jmemcacheddaemon for local testing purposes, and (unfortunately) jmemcacheddaemon has a known bug where cache misses return an empty string instead of a null object. This causes MemcachedHttpCacheStorage to throw a ClassCastException instead of just returning null, because String cannot be cast to byte[].</comment>
                    <comment id="13174296" author="olegk" created="Wed, 21 Dec 2011 18:47:40 +0000"  >&amp;gt; Could be that somebody is using the cache for other purposes as well, and just happens to set an object with a URL as a key that&lt;br/&gt;
&amp;gt; conflicts with an object that is set by MemcachedHttpCacheStorage&lt;br/&gt;
&lt;br/&gt;
Could be that somebody is using computer to hammer nails. We can&amp;#39;t stop people from doing silly stuff.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;  -- this could (and also probably should) be mitigated by allowing the client of MemcachedHttpCacheStorage to set a client-defined &lt;br/&gt;
&amp;gt; prefix String that will be prefixed to all keys, thus avoiding potential collisions. &lt;br/&gt;
&lt;br/&gt;
This is actually a very reasonable suggestion. Probably what we need is a generic strategy that can be used to generate a unique cache key from a request url. This would also take care of &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-1153&quot; title=&quot;org.apache.http.impl.client.cache.memcached.MemcachedHttpCacheStorage uses URL as cache key - shouldn&amp;#39;t.&quot;&gt;&lt;strike&gt;HTTPCLIENT-1153&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; In my case, it is that we are using jmemcacheddaemon for local testing purposes, and (unfortunately) jmemcacheddaemon has &lt;br/&gt;
&amp;gt; a known bug where cache misses return an empty string instead of a null object. &lt;br/&gt;
&lt;br/&gt;
OK. But I do not think that polluting a general purpose library with a hack clearly specific to your local environment is the right thing to do. Simply implement a custom HttpCacheStorage which is aware of the empty string semantics.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="13174304" author="tinclon" created="Wed, 21 Dec 2011 18:51:36 +0000"  >&amp;gt;&amp;gt; In my case, it is that we are using jmemcacheddaemon for local testing purposes, and (unfortunately) jmemcacheddaemon has &lt;br/&gt;
&amp;gt;&amp;gt; a known bug where cache misses return an empty string instead of a null object. &lt;br/&gt;
&lt;br/&gt;
&amp;gt;OK. But I do not think that polluting a general purpose library with a hack clearly specific to your local environment is the right thing to do. Simply implement a custom HttpCacheStorage which is aware of the empty string semantics. &lt;br/&gt;
&lt;br/&gt;
Fair enough. But as a general principle, if memcached ever retrieves an object that isn&amp;#39;t the expected type, it should count as a cache-miss. It certainly shouldn&amp;#39;t throw a ClassCastException. Just &amp;#39;miss&amp;#39; and move on.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
--- I actually had already extended MemcachedHttpCacheStorage to make it aware of the empty-string problem, and also to hash URLs using SHA-512, and to allow a custom prefix on the keys. So I&amp;#39;m good. I just opened these bugs so you could be aware and make changes if you want.  :)</comment>
                    <comment id="13174305" author="jonm" created="Wed, 21 Dec 2011 18:55:07 +0000"  >I&amp;#39;m actually going to reopen this, as I think it&amp;#39;s a pretty small change that adds to the robustness of the library (and I&amp;#39;ll work on integrating and committing it). Upon encountering something weird coming back out of memcached, I think logging a warning and then acting as if it were a cache miss is good and prudent behavior.&lt;br/&gt;
</comment>
                    <comment id="13174309" author="jonm" created="Wed, 21 Dec 2011 18:56:45 +0000"  >@Clinton: I&amp;#39;ve been thinking about adding an optional string-prefix configuration option to the memcached storage as well; would you mind opening that as a separate improvement request?&lt;br/&gt;
</comment>
                    <comment id="13174321" author="tinclon" created="Wed, 21 Dec 2011 19:06:25 +0000"  >Yup, I&amp;#39;ll do that right away.</comment>
                    <comment id="13182525" author="jonm" created="Mon, 9 Jan 2012 14:35:05 +0000"  >@Rajika: just checked your patch in, along with the addition of a WARN-level log message if we encounter memcached giving us something other than a byte[] back. Will work on porting this to the 4.1.x branch next.</comment>
                    <comment id="13182532" author="jonm" created="Mon, 9 Jan 2012 14:46:26 +0000"  >Checked into trunk and backported to 4.1.x.&lt;br/&gt;
&lt;br/&gt;
@Clinton - can you review and close this issue if you&amp;#39;re satisfied?&lt;br/&gt;
</comment>
                    <comment id="13182540" author="tinclon" created="Mon, 9 Jan 2012 14:57:02 +0000"  >Checked the diff. It looks like the issue is only half-fixed.&lt;br/&gt;
The fix has been applied to the updateEntry function, but not to the getEntry function.&lt;br/&gt;
&lt;br/&gt;
Thanks.</comment>
                    <comment id="13182546" author="jonm" created="Mon, 9 Jan 2012 15:11:54 +0000"  >@Clinton - good catch; will fix forthwith.</comment>
                    <comment id="13182555" author="jonm" created="Mon, 9 Jan 2012 15:28:31 +0000"  >@Clinton - added the same checking to the getEntry() side and refactored the commonality out. This is checked into trunk now.&lt;br/&gt;
</comment>
                    <comment id="13182567" author="tinclon" created="Mon, 9 Jan 2012 15:44:51 +0000"  >Verified as fixed in trunk.</comment>
                    <comment id="13182813" author="jonm" created="Mon, 9 Jan 2012 21:27:14 +0000"  >Ok, also backported to 4.1.x.</comment>
                </comments>
                    <attachments>
                    <attachment id="12508197" name="HTTPCLIENT-1152.patch" size="3082" author="rajika" created="Wed, 21 Dec 2011 04:45:50 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 21 Dec 2011 04:45:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>221573</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>46896</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>