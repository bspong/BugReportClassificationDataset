<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:17:46 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-466/HTTPCLIENT-466.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-466] URI.parseUriReference treats strings with leading &apos;:&apos; as absolute URIs with zero-length scheme</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-466</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>URI.parseUriReference treats strings with leading &amp;#39;:&amp;#39; as absolute URIs with a&lt;br/&gt;
zero-length scheme. If you then try to derelativize such a URI against a base&lt;br/&gt;
URI, you just get the same URI with leading &amp;#39;:&amp;#39;. &lt;br/&gt;
&lt;br/&gt;
IE and Firefox treat URI strings with a leading &amp;#39;:&amp;#39; as relative URIs. For&lt;br/&gt;
example, an HREF of &amp;quot;:foo&amp;quot; in the context of base URI&lt;br/&gt;
&amp;quot;&lt;a href=&quot;http://www.example.com/path/page&quot;&gt;http://www.example.com/path/page&lt;/a&gt;&amp;quot; would derelativize as&lt;br/&gt;
&amp;quot;&lt;a href=&quot;http://www.example.com/path/:foo&quot;&gt;http://www.example.com/path/:foo&lt;/a&gt;&amp;quot;. (Only if another character comes before the&lt;br/&gt;
colon is it interpreted as a URI scheme.)&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;d be desirable for HTTPClient URI to do the same thing.&lt;br/&gt;
&lt;br/&gt;
Example code to demonstrate:&lt;br/&gt;
&lt;br/&gt;
import org.apache.commons.httpclient.URI;&lt;br/&gt;
URI base = new URI(&amp;quot;&lt;a href=&quot;http://www.example.com/path/page&quot;&gt;http://www.example.com/path/page&lt;/a&gt;&amp;quot;);&lt;br/&gt;
URI rel1 = new URI(&amp;quot;:foo/boo&amp;quot;);&lt;br/&gt;
System.out.println((new URI(base,rel1)).toString()); // displays just &amp;quot;:foo&amp;quot;&lt;br/&gt;
&lt;br/&gt;
A potential fix would be for URI.parseUriReference() to avoid interpreting a &amp;#39;:&amp;#39;&lt;br/&gt;
in the zero position as indicating a zero-length scheme:&lt;br/&gt;
&lt;br/&gt;
-       if (atColon &amp;lt; 0 || (atSlash &amp;gt;= 0 &amp;amp;&amp;amp; atSlash &amp;lt; atColon)) {&lt;br/&gt;
+       if (atColon &amp;lt;= 0 || (atSlash &amp;gt;= 0 &amp;amp;&amp;amp; atSlash &amp;lt; atColon)) {&lt;br/&gt;
&lt;br/&gt;
and&lt;br/&gt;
&lt;br/&gt;
-        if (at &amp;lt; length &amp;amp;&amp;amp; tmp.charAt(at) == &amp;#39;:&amp;#39;) {&lt;br/&gt;
+        if (at &amp;gt; 0 &amp;amp;&amp;amp; at &amp;lt; length &amp;amp;&amp;amp; tmp.charAt(at) == &amp;#39;:&amp;#39;) {</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: All</environment>
            <key id="12334025">HTTPCLIENT-466</key>
            <summary>URI.parseUriReference treats strings with leading &apos;:&apos; as absolute URIs with zero-length scheme</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="gojomo@archive.org">Gordon Mohr</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Jun 2005 09:04:17 +0100</created>
                <updated>Wed, 16 Feb 2011 20:44:41 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:11:02 +0100</resolved>
                            <version>3.0 Final</version>
                                <fixVersion>3.0 RC3</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12382368" author="rolweber@de.ibm.com" created="Wed, 1 Jun 2005 16:28:59 +0100"  >The colon is a reserved character, which means it may or may not have&lt;br/&gt;
to be escaped, depending on where it occurs. RFC 2396 includes the&lt;br/&gt;
following statements:&lt;br/&gt;
&lt;br/&gt;
[section 2.2, page 7]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;... If the data for a URI component would conflict with the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;reserved purpose, then the conflicting data must be escaped before&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;forming the URI.&lt;br/&gt;
&lt;br/&gt;
[bottom of page 16, top of page 17]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Authors should be aware that a path segment which contains a colon&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;character cannot be used as the first segment of a relative URI path&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;(e.g., &amp;quot;this:that&amp;quot;), because it would be mistaken for a scheme name.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;It is therefore necessary to precede such segments with other&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;segments (e.g., &amp;quot;./this:that&amp;quot;) in order for them to be referenced as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;a relative path.&lt;br/&gt;
&lt;br/&gt;
An application with a user interface, such as a browser, has to deal with&lt;br/&gt;
non-standard input and may interpret data in the way that is most likely&lt;br/&gt;
to make sense. For HttpClient however, it is desirable - and essential -&lt;br/&gt;
that data gets interpreted as stated in the relevant specifications.&lt;br/&gt;
&lt;br/&gt;
Though the WWW seems to be guided by what a particular browser does rather&lt;br/&gt;
than by specifications, we strive to set an example, within our domain :-)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12382369" author="gojomo@archive.org" created="Wed, 1 Jun 2005 17:25:56 +0100"  >Since zero-length schemes are illegal, the current behavior results in a&lt;br/&gt;
nonsensical construction: an ostensibly absolute URI with a zero-length&lt;br/&gt;
&amp;#39;scheme&amp;#39;. That&amp;#39;s not a legal URI. &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t see any inherent conflicts with the referenced specification sections.&lt;br/&gt;
In particular, there is no conflict with the colon&amp;#39;s reserved purpose when a&lt;br/&gt;
colon is in the first position, because zero-length schemes are illegal, thus&lt;br/&gt;
the colon cannot be a scheme-delimiter. &lt;br/&gt;
&lt;br/&gt;
Similarly, the &amp;quot;should be aware&amp;quot; paragraph posits a &amp;quot;mistaken&amp;quot; impression that&lt;br/&gt;
is actually impossible, if you are enforcing non-zero-length scheme names. So&lt;br/&gt;
its prescription is more reasonably understood as applying to path-segments&lt;br/&gt;
where the colon appears after the first position, as in the example given in the&lt;br/&gt;
text. &lt;br/&gt;
&lt;br/&gt;
Harmonizing HTTPClient URI behavior with browser behavior is just as consistent&lt;br/&gt;
with the specifications, and would avoid creating instances with nonsensical&lt;br/&gt;
scheme-parts, which are not legal absolute URIs. I believe the browsers, in this&lt;br/&gt;
case, have implemented the most reasonable interpretation of the spec. </comment>
                    <comment id="12382370" author="oglueck" created="Wed, 1 Jun 2005 17:34:43 +0100"  >Gordon,&lt;br/&gt;
&lt;br/&gt;
you are asking for robustness against a specific spec violation that occurs in&lt;br/&gt;
real-world applications. I am in favour for making HttpClient more robust&lt;br/&gt;
against such things. We should think carefully if we want to include this fix&lt;br/&gt;
into the URI class (thus intelligently breaking the spec) or leave it to the&lt;br/&gt;
caller to comply to the spec.&lt;br/&gt;
&lt;br/&gt;
Ortwin Gl&amp;#xFC;ck</comment>
                    <comment id="12382371" author="rolweber@de.ibm.com" created="Wed, 1 Jun 2005 17:58:45 +0100"  >&amp;gt; Authors should be aware that a path segment which contains a colon&lt;br/&gt;
&amp;gt; character cannot be used as the first segment of a relative URI path&lt;br/&gt;
&lt;br/&gt;
From my point of view, a path segment *contains* a colon if any one of&lt;br/&gt;
it&amp;#39;s characters is a colon. Including the first one.&lt;br/&gt;
&lt;br/&gt;
But section 3.1 of RFC 2396 states:&lt;br/&gt;
&lt;br/&gt;
&amp;gt;  Relative URI references are distinguished from absolute URI in that&lt;br/&gt;
&amp;gt;  they do not begin with a scheme name.&lt;br/&gt;
&lt;br/&gt;
which supports your interpretation, and that of the browsers.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12382372" author="oglueck" created="Wed, 1 Jun 2005 18:06:24 +0100"  >Gordon,&lt;br/&gt;
&lt;br/&gt;
just out of curiosity: where is this URL coming from? Are you extracting it from&lt;br/&gt;
a HTML page? Does the user enter it?</comment>
                    <comment id="12382373" author="gojomo@archive.org" created="Wed, 1 Jun 2005 18:43:45 +0100"  >A typo on some page somewhere -- a stray extra &amp;#39;:&amp;#39; in front of a true absolute&lt;br/&gt;
http URI -- triggered a bug reported against our crawler. See:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;a href=&quot;http://groups.yahoo.com/group/archive-crawler/message/1894&quot;&gt;http://groups.yahoo.com/group/archive-crawler/message/1894&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
(We have a httpclient.URI subclass, UURI, which enforces additional cleanup on&lt;br/&gt;
URIs, and our deserialization of such instances was being thrown off by&lt;br/&gt;
receiving URI strings that should have already been derelativized beginning with&lt;br/&gt;
colons.)&lt;br/&gt;
&lt;br/&gt;
Further investigation revealed that any HREF starting with a colon was&lt;br/&gt;
interpreted as absolute by httpclient.URI, but relative by the browsers.&lt;br/&gt;
&lt;br/&gt;
Thanks for your consideration!</comment>
                    <comment id="12382374" author="oglueck" created="Wed, 1 Jun 2005 19:02:03 +0100"  >When I rethink it, I&amp;#39;d rather see this fixed on your side, Gordon. I don&amp;#39;t think&lt;br/&gt;
HttpClient is the right place to fix the problem. It seems that a URL like this&lt;br/&gt;
has an ambiguous interpretation: &lt;br/&gt;
&amp;nbsp;1. colon is part of the path name (perfectly legal in Unix) and should be URL&lt;br/&gt;
escaped&lt;br/&gt;
&amp;nbsp;2. no scheme and thus invalid&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d rather not have heuristics inside a class that implements a spec. Better&lt;br/&gt;
feed well-defined input to the URI class and get well-defined output back than&lt;br/&gt;
have URI to guess what your input could possibly mean.&lt;br/&gt;
&lt;br/&gt;
I recommend marking this bug as invalid.</comment>
                    <comment id="12382375" author="rolweber@de.ibm.com" created="Wed, 1 Jun 2005 20:48:13 +0100"  >Hello Odi,&lt;br/&gt;
&lt;br/&gt;
generally, the colon does not require URL-escaping when used in a path&lt;br/&gt;
component. It only needs to be escaped if there is an ambiguity whether&lt;br/&gt;
it is part of a path in a relative URL, or the scheme separator in an&lt;br/&gt;
absolute URL.&lt;br/&gt;
I can understand Gordon&amp;#39;s argument that there is no such ambiguity when&lt;br/&gt;
the colon is the first character.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12382376" author="oglueck" created="Wed, 1 Jun 2005 21:01:34 +0100"  >I read RFC-2396 again. Roland, you are right. Point taken. So we need to include&lt;br/&gt;
some test cases into the suite and see if Gordon&amp;#39;s patch does what it should.</comment>
                    <comment id="12382377" author="gojomo@archive.org" created="Thu, 2 Jun 2005 05:43:37 +0100"  >Definitely, it&amp;#39;s an ambiguous case. But given that the class has to do something&lt;br/&gt;
when presented with such input, I think two relevant questions would be:&lt;br/&gt;
&lt;br/&gt;
(1) Is the current behavior desirable?&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think so. Interpreting a potential URI &amp;quot;:foo&amp;quot; as an absolute URI results&lt;br/&gt;
in an illegal, uninterpretable URI. I think this is highlighted by the example&lt;br/&gt;
in my initial report:&lt;br/&gt;
&lt;br/&gt;
(new URI(new URI(&amp;quot;&lt;a href=&quot;http://www.example.com/path/page&quot;&gt;http://www.example.com/path/page&lt;/a&gt;&amp;quot;), new URI(&amp;quot;:foo&amp;quot;))).toString(); &lt;br/&gt;
&lt;br/&gt;
Having this return &amp;quot;:foo&amp;quot; causes the nonsensical interpretation to spread to&lt;br/&gt;
another instance (losing the original context). In contrast, having this return&lt;br/&gt;
&amp;quot;&lt;a href=&quot;http://www.example.com/path/:foo&quot;&gt;http://www.example.com/path/:foo&lt;/a&gt;&amp;quot; means the only possible legal URI has been&lt;br/&gt;
made from an ambiguous situation. &lt;br/&gt;
&lt;br/&gt;
It would in my opinion be better to raise an exception than have the current&lt;br/&gt;
behavior. Then wrapping code could note the problem and attempt a workaround&lt;br/&gt;
like encoding or prepending a &amp;quot;./&amp;quot; to force path-interpretation. But then that&lt;br/&gt;
would force the question: is &amp;quot;:foo&amp;quot; definitively prohibited by rfc2396 section 5&lt;br/&gt;
(or rfc3986 section 4.2), or is it simply a case not contemplated by its language?&lt;br/&gt;
&lt;br/&gt;
(2) Is there any situation where the current behavior (or alternatively, raising&lt;br/&gt;
an exception) would be preferable to the suggested behavior of treating&lt;br/&gt;
URI-strings that begin with a &amp;#39;:&amp;#39; as relative references?&lt;br/&gt;
&lt;br/&gt;
I can&amp;#39;t think of any such situation, save for a hypothetical pedantic URI-format&lt;br/&gt;
checker, which would not want the current behavior, but rather a warning of some&lt;br/&gt;
sort that an ambiguous case has been encountered. &lt;br/&gt;
&lt;br/&gt;
Short of that, while I&amp;#39;d agree harmonization with browser behavior is not&lt;br/&gt;
all-important, it is very valuable unless there&amp;#39;s a clear justification to do&lt;br/&gt;
otherwise. Any ambiguous URI-writing practice that nonetheless works in browsers&lt;br/&gt;
is likely to persist. </comment>
                    <comment id="12382378" author="oglueck" created="Thu, 2 Jun 2005 17:57:57 +0100"  >Sidenote: Don&amp;#39;t compare HttpClient with web browsers as HttpClient is not a&lt;br/&gt;
browser. We are trying to implement a standard. While we must be relaxed in some&lt;br/&gt;
areas of this standard to be compatible with real-world servers, we are very&lt;br/&gt;
strict when it comes to API level.&lt;br/&gt;
&lt;br/&gt;
This means, that the only criteria to make a fix for this problem is, whether&lt;br/&gt;
:foo can be interpreted unambiguously or not.</comment>
                    <comment id="12382379" author="gojomo@archive.org" created="Fri, 3 Jun 2005 04:59:14 +0100"  >I would suggest that web browser behavior is a valid and important source of&lt;br/&gt;
input, along with formal specifications.&lt;br/&gt;
&lt;br/&gt;
(1) While HTTPClient is not a &amp;quot;web browser&amp;quot;, one of its key uses is in creating&lt;br/&gt;
web browsers and stand-ins for web browsers (like crawlers). Indeed, the&lt;br/&gt;
HTTPClient project home page, when listing examples of &amp;quot;HTTP-aware client&lt;br/&gt;
applications&amp;quot; that may find HTTPClient &amp;quot;of interest&amp;quot;, lists &amp;quot;web browsers&amp;quot; first. &lt;br/&gt;
&lt;br/&gt;
(2) While HTTPClient is not a &amp;quot;web browser&amp;quot;, all &amp;quot;web browsers&amp;quot; are themselves&lt;br/&gt;
HTTP client applications. Their behavior in aggregate establishes what users and&lt;br/&gt;
server/app developers expect. The major browsers individually, and all browsers&lt;br/&gt;
together as a class, have much more developer and user attention (and QA and&lt;br/&gt;
usability testing) than HTTPClient, and so often encode within their established&lt;br/&gt;
practices a lot of hard-won wisdom about the most beneficial and&lt;br/&gt;
broadly-compatible interpretation of specs. In a case like this, where the specs&lt;br/&gt;
could plausibly be read more than one way, browsers are likely to have&lt;br/&gt;
encountered the ambiguity and forced the issue one way or the other first. &lt;br/&gt;
&lt;br/&gt;
(3) There are both &amp;quot;standards&amp;quot; from formal specs, and de facto &amp;quot;standards&amp;quot; that&lt;br/&gt;
emerge from consensus practice, even if never formally specified. Both are&lt;br/&gt;
important, and in the HTTP domain, web browsers are the major force in&lt;br/&gt;
establishing the de facto standards. A library that only implements the formal&lt;br/&gt;
standards is interesting for some purposes but not others. &lt;br/&gt;
&lt;br/&gt;
(4) HTTPClient&amp;#39;s &amp;quot;compatibility&amp;quot; mode for cookies already emulates browser&lt;br/&gt;
tolerance of nonstandard server/app cookie formats, so that servers see what&lt;br/&gt;
they would expect to get on followup hits from widely-deployed browsers. That&lt;br/&gt;
same pragmatic approach of accomodating the browser lead would make sense here.&lt;br/&gt;
For example, if a web page specifies a background image as relative URI&lt;br/&gt;
&amp;quot;:bg.jpg&amp;quot;, and popular web browser http client software like IE and Firefox both&lt;br/&gt;
resolve this relatively and display it properly (and they do!), that should&lt;br/&gt;
factor in for how HTTPClient decides to interpret such URIs, even if some&lt;br/&gt;
wordage in the specs suggest another way. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not saying browser behavior trumps all other considerations, but it should&lt;br/&gt;
not be ruled out as one valid and pragmatic criterion.  </comment>
                    <comment id="12382380" author="oglueck" created="Fri, 3 Jun 2005 05:16:21 +0100"  >Gordon, &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t want to extend this discussion of the goals of the HttpClient project.&lt;br/&gt;
We should focus around this specific issue here (this is an issue tracking&lt;br/&gt;
system and not an evangelist forum). In short: (1) and (2) are obviously right,&lt;br/&gt;
(3) is somehow true and out of question. The first paragraph of (4) i have&lt;br/&gt;
already explained (we support non-standard servers to some extent).&lt;br/&gt;
The second paragraph is a problem: Yes I know that major browsers interprete&lt;br/&gt;
this in a certain way. They all deal with poorly written HTML which is mostly&lt;br/&gt;
off standards in vast areas on the internet. HttpClient is really *not a&lt;br/&gt;
browser*. People use it to do Webservices or XML-RPC. HttpClient does not have&lt;br/&gt;
to fix broken HTML links. We don&amp;#39;t care about HTML *at all*. All we do is&lt;br/&gt;
*HTTP*. Parsing HTML is up to *you*. Fixing broken HTML code and broken URLs in&lt;br/&gt;
that code is up to *you*. Feed correct URIs to HttpClient and it will work fine.&lt;br/&gt;
Moaning does not help. I explained the criteria for this issue to be fixed in&lt;br/&gt;
HttpClient. More I can not do for you unfortunately. Even if this does not make&lt;br/&gt;
you happy. Sorry, mate.</comment>
                    <comment id="12382381" author="gojomo@archive.org" created="Fri, 3 Jun 2005 07:56:32 +0100"  >I certainly agree that HTML fixup is out of HTTPClient&amp;#39;s purview; the issue is&lt;br/&gt;
URIs, an area where HTTPClient has provided a very capable implementation class&lt;br/&gt;
(which works well for URIs far afield of HTTP, too). &lt;br/&gt;
&lt;br/&gt;
Now, a particularly important kind of http client, the web browser, gets most of&lt;br/&gt;
its URIs through HTML, but that&amp;#39;s just an illustrative example. The questionable&lt;br/&gt;
URI &amp;quot;:foo&amp;quot;, which is at least plausibly legal, could be interpreted with an&lt;br/&gt;
absolute base context from XML, or CSS, or HTTP headers, or something else&lt;br/&gt;
entirely. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve already worked around the issue. (BTW, thanks for making the HTTPClient URI&lt;br/&gt;
class so much easier to derive from than the imho fatally flawed java.net.URI.)&lt;br/&gt;
So I&amp;#39;m happy no matter how this issue is dispatched. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m just making an appeal for giving some nonzero weight to the wisdom encoded&lt;br/&gt;
in widespread web browser practice, when deciding what to do in these kind of&lt;br/&gt;
situations. In this particular case, I think web browser practice clearly points&lt;br/&gt;
the way to most useful/practical spec interpretation. That might not always be&lt;br/&gt;
the case, but I would think either congruence or contrast with IE/Firefox&lt;br/&gt;
practice would always be an interesting data point when deciding desired behavior. &lt;br/&gt;
&lt;br/&gt;
Enough said, thanks for your consideration. </comment>
                    <comment id="12382382" author="ck@rrzn.uni-hannover.de" created="Fri, 3 Jun 2005 21:51:19 +0100"  >I am a little bit surprised that this discussion has moved away from the      &lt;br/&gt;
original problem.      &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Basically, in this case, the browsers are in fact conforming to the              &lt;br/&gt;
RFC, whereas HttpClient is not.  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Empty schemes are simply not allowed (see BNF            &lt;br/&gt;
in Appendix A of RFC 2396), so treating &amp;quot;:foo&amp;quot; as an URI with empty scheme and        &lt;br/&gt;
opaque part &amp;quot;foo&amp;quot; is incorrect per se. According to the BNF, it MUST NOT be        &lt;br/&gt;
treated as an absoluteURI.        &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
On the other hand, a &amp;#39;:&amp;#39; is a perfectly valid path segment (see the BNF and        &lt;br/&gt;
section 3.3 of the RFC). I do not see any ambiguity here.    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Let&amp;#39;s apply Gordon&amp;#39;s patch.  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12382383" author="olegk" created="Fri, 3 Jun 2005 22:02:15 +0100"  >Most of those so called common browsers, for instance, accept virtually any&lt;br/&gt;
garbage for a cookie in order to be compatible with thousands of broken CGI&lt;br/&gt;
scripts out there. &lt;br/&gt;
&lt;br/&gt;
So, in general I _personally_ do not think the behavior of browsers should be&lt;br/&gt;
used as the most common denominator. In this particular case, however,&lt;br/&gt;
HttpClient clearly doesn&amp;#39;t handle the URI in question correctly. I am +1 to&lt;br/&gt;
commit the patch. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382384" author="oglueck" created="Fri, 3 Jun 2005 22:32:22 +0100"  >Created an attachment (id=15282)&lt;br/&gt;
Patch&lt;br/&gt;
&lt;br/&gt;
Christian, it is all getting very redundant here. I have already pointed out in&lt;br/&gt;
comment 5 that I am +1. I was just making my point clear what the criteria is&lt;br/&gt;
to include this patch. The criteria is fulfilled apparently. Patch and test&lt;br/&gt;
case attached.</comment>
                    <comment id="12382385" author="olegk" created="Fri, 3 Jun 2005 22:44:25 +0100"  >Looks good to me.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382386" author="becke@u.washington.edu" created="Fri, 3 Jun 2005 22:58:36 +0100"  >Patch away.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                </comments>
                    <attachments>
                    <attachment id="12327244" name="ASF.LICENSE.NOT.GRANTED--issue35148.diff" size="3756" author="oglueck" created="Fri, 3 Jun 2005 22:32:22 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>35148</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 1 Jun 2005 15:28:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133513</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47137</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>