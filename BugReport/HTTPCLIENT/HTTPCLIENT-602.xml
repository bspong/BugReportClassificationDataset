<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:19:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-602/HTTPCLIENT-602.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-602] refactor HttpClientConnection and HttpProxyConnection</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-602</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Instead of trying to define a full abstraction for client connections, let&amp;#39;s define only a minimal interface in HttpCore with only those methods actually needed in the core. In particular, the core does not need to open connections (since &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCORE-11&quot; title=&quot;Provide generic server and client connection primitives that can work with arbitrary HTTP data receivers and transmitters.&quot;&gt;&lt;strike&gt;HTTPCORE-11&lt;/strike&gt;&lt;/a&gt;), and it does not care whether a connection is direct or through a proxy. An abstraction for client connections can be defined in HttpConn.&lt;br/&gt;
&lt;br/&gt;
(original description:)&lt;br/&gt;
As discussed on the mailing list, separating the responsibility for establishing connections from the connection objects could improve the design and help with proxy support.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12348654">HTTPCLIENT-602</key>
            <summary>refactor HttpClientConnection and HttpProxyConnection</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rolandw">Roland Weber</assignee>
                                <reporter username="rolandw">Roland Weber</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Aug 2006 18:59:12 +0100</created>
                <updated>Sun, 4 Feb 2007 11:30:30 +0000</updated>
                    <resolved>Sun, 4 Feb 2007 11:30:30 +0000</resolved>
                                            <fixVersion>4.0 Alpha 1</fixVersion>
                                <component>HttpConn</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12430573" author="rolandw" created="Fri, 25 Aug 2006 19:28:06 +0100"  >Take 1 on alternative connection interfaces. Note that this is a tar, not a patch.&lt;br/&gt;
&lt;br/&gt;
I have used class and interface names that do not collide with existing ones. The idea is to have a few review cycles on the new interface before I have to modify all code that uses connections. Even so it took several hours longer than I had expected for a first draft. All classes and interfaces spelled &amp;quot;connexion&amp;quot; are supposed to be renamed to &amp;quot;connection&amp;quot;. (Did you know that &amp;quot;connexion&amp;quot; is an oldfashioned but correct british spelling?) The code in the default implementation classes is copied and pasted from existing implementations. They compile and javadoc, but they have not been tested.&lt;br/&gt;
&lt;br/&gt;
The general idea is to turn the connection into a simple container for a socket and associated objects. The logic for creating the socket, that is for establishing the connection, is moved to an &amp;quot;operator&amp;quot; (as in switchboard). The tricky part is that the operator must be able to modify the connection&amp;#39;s state in ways that should not be available to an application developer. In order to achieve this, I have defined a third interface with internal operations that are only exposed to the operator. Here is a list of the new interfaces and classes:&lt;br/&gt;
&lt;br/&gt;
HttpClientConnexion - container for the connection, replaces HttpClientConnection and HttpProxyConnection. Knows it&amp;#39;s operator and delegates calls such as open and close there.&lt;br/&gt;
HttpClientConnInternal - internal operations for the connection. An instance of this interface is passed to the operator whenever the connection delegates a call there.&lt;br/&gt;
HttpClientConnOperator - provides logic for opening and closing connections, uses the connection internal operations&lt;br/&gt;
AbstractHttpClientConnection - defines all attributes mandated by the HttpClientConnexion and HttpClientConnInternal interfaces and implements the delegation to the operator. Internal operations are implemented by an inner class. Derived classes can focus on send/receive operations.&lt;br/&gt;
&lt;br/&gt;
impl.DefaultHttpClientConnexion - implements send/receive logic mostly copied over from DefaultHttpClientConnection and AbstractHttpConnection.&lt;br/&gt;
impl.DefaultHttpClientConnOperator - implements socket creation logic mostly copied over from DefaultHttpClientConnection and DefaultHttpProxyConnection, and close/shutdown logic copied over from AbstractHttpConnection.&lt;br/&gt;
&lt;br/&gt;
I had some trouble in assigning the responsibility for the stale connection check (fallback implementation in DHCCOperator, better implementation in DHCConnexion) and the response availability check (connection, for now). The hooks that allow for the connection to create receiver/transmitter objects after the socket has been created by the operator need improvement. Anyway, you&amp;#39;ll get the idea, and I have already spent three evenings with this.&lt;br/&gt;
&lt;br/&gt;
Please let me know what you think. I may find time for minor revisions this weekend, everything else must wait at least one week, probably two.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12430981" author="olegk" created="Mon, 28 Aug 2006 15:09:14 +0100"  >Blocked by &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCORE-11&quot; title=&quot;Provide generic server and client connection primitives that can work with arbitrary HTTP data receivers and transmitters.&quot;&gt;&lt;strike&gt;HTTPCORE-11&lt;/strike&gt;&lt;/a&gt;</comment>
                    <comment id="12435212" author="olegk" created="Sat, 16 Sep 2006 13:03:02 +0100"  >Roland,&lt;br/&gt;
&lt;br/&gt;
Please give me time until Sunday to come up with an alternative proposal for your consideration&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12436631" author="rolandw" created="Thu, 21 Sep 2006 21:20:57 +0100"  >Updated the description with the results of our last discussion on the mailing list.</comment>
                    <comment id="12437133" author="olegk" created="Sat, 23 Sep 2006 19:37:23 +0100"  >Hi Roland,&lt;br/&gt;
&lt;br/&gt;
Could you possibly live with these changed, at least short term (see two patches attached)? &lt;br/&gt;
&lt;br/&gt;
Changelog:&lt;br/&gt;
----------&lt;br/&gt;
* HttpCore: HttpClientConnection#open() method is no more&lt;br/&gt;
* HttpAsync: Added  HttpAsyncClientConnection interface, which extends HttpClientConnection and preserves the semantics of HttpClientConnection that existed before the changes to the interface &lt;br/&gt;
&lt;br/&gt;
I admit HttpAsyncClientConnection is quite hackish and is not meant a long term solution. However, it does help to preserve the existing semantics of HttpAsync and helps us get HttpCore moving forward. Moreover, I think in the future it would make sense for HttpAsync to adopt a connection framework of either HttpCore NIO or HttpConn, so all this hooplah about open method will no longer be of any relevance.    &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12437223" author="rolandw" created="Sun, 24 Sep 2006 17:02:18 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
no objections from my side. You should remove or fix the class end comment in HttpAsyncClientConnection, though :-)&lt;br/&gt;
And the @author tag for both interface and implementation.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12437226" author="olegk" created="Sun, 24 Sep 2006 17:30:02 +0100"  >20060923-httpasync.patch  and 20060923-httpcore.patch checked in. I am going to move the issue to HttpClient shortly.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12437537" author="rolandw" created="Mon, 25 Sep 2006 13:31:48 +0100"  >I just noticed that HttpClientConnection still has the getTargetHost() method. If our goal is to define only a minimal interface in HttpCore, that should be removed too. HttpRequestExecutor no longer creates the HttpContext, so the caller can initialize the target host in the context.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12440104" author="olegk" created="Thu, 5 Oct 2006 11:14:43 +0100"  >&amp;gt; I just noticed that HttpClientConnection still has the getTargetHost() method. If our goal is to define only a minimal interface in HttpCore, &lt;br/&gt;
&amp;gt; that should be removed too. HttpRequestExecutor no longer creates the HttpContext, so the caller can initialize the target host in the context. &lt;br/&gt;
&lt;br/&gt;
Taken care of. #getTargetHost() method removed from HttpClientConnection&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12461046" author="rolandw" created="Wed, 27 Dec 2006 17:28:52 +0000"  >Even if connections do not themselves use socket factories, there needs to be code that uses both interfaces. Patches for these two issues can therefore not be developed in parallel.</comment>
                    <comment id="12470042" author="rolandw" created="Sun, 4 Feb 2007 11:30:30 +0000"  >I consider this issue fixed with the OperatedClientConnection. We can open a new issue for changes after review.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12348737">HTTPCORE-11</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12334034">HTTPCLIENT-475</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12341474" name="20060923-httpasync.patch" size="16874" author="olegk" created="Sat, 23 Sep 2006 19:38:07 +0100" />
                    <attachment id="12341473" name="20060923-httpcore.patch" size="14291" author="olegk" created="Sat, 23 Sep 2006 19:38:07 +0100" />
                    <attachment id="12339592" name="2k6-08-25-core-conn-1.tar" size="61440" author="rolandw" created="Fri, 25 Aug 2006 19:28:06 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 28 Aug 2006 14:09:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133642</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47949</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>