<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:22:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-981/HTTPCLIENT-981.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-981] CachingHttpClient returns a 411 respones when executing a POST (HttpPost) request </title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-981</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>The CachingHttpClient validates requests prior executing them, by calling RequestProtocolCompliance.requestIsFatallyNonCompliant(..).&lt;br/&gt;
&lt;br/&gt;
When executing an HttpPost, this method considers the request is invalid because it does not contain (yet) a content-length header. Indeed, I observed that this header is generated at the time the DefaultHttpClient fires the request.&lt;br/&gt;
&lt;br/&gt;
NB: i&amp;#39;m using the Cache 4.1-alpha2 plugged over the HttpClient 4.0.1-final. I can&amp;#39;t use the latest version for both because I need to rely on a stable version if there&amp;#39;s any. I would be curious to know if we get the same behaviour in 4.1...&lt;br/&gt;
&lt;br/&gt;
Anyway, I would see two fixes for that issue:&lt;br/&gt;
- make HttpPost set the content-length at the time the entity is set,&lt;br/&gt;
- or remove the validation step on the CachingHttpClient side.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12472079">HTTPCLIENT-981</key>
            <summary>CachingHttpClient returns a 411 respones when executing a POST (HttpPost) request </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="vcarel">Vianney Carel</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Aug 2010 10:47:19 +0100</created>
                <updated>Tue, 25 Jan 2011 11:00:19 +0000</updated>
                    <resolved>Wed, 25 Aug 2010 13:30:42 +0100</resolved>
                            <version>4.1 Alpha2</version>
                                <fixVersion>4.1 Beta1</fixVersion>
                                <component>HttpCache</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12901376" author="vwdiesel" created="Mon, 23 Aug 2010 13:54:39 +0100"  >This problem I think needs a call from Oleg...&lt;br/&gt;
&lt;br/&gt;
The Cache portion of this is designed and tested to be HTTP 1.1 Conditionally compliant which means that when a request is handed to it - the request has to be complete.  If the request handed to the caching client has a body it has to have a content-length header according to the spec.  My gut says that setting the content-length should be something that the person &amp;#39;using&amp;#39; the client in their code should be setting and not leaving it up to the implementation to set for them, but Oleg may have a different opinion.&lt;br/&gt;
&lt;br/&gt;
We could remove that validation, but I think that it should stay.&lt;br/&gt;
&lt;br/&gt;
Joe</comment>
                    <comment id="12901453" author="olegk" created="Mon, 23 Aug 2010 16:48:09 +0100"  >There is no easy solution to this problem. Users of HttpClient are generally advised to not mess around with protocol specific headers (especially Content-Length and Transfer-Encoding) and let HttpClient generate those headers automatically. So, if a request passed to HttpClient for execution encloses an entity it HttpClient ensures a proper composition of the message head and a correct delimitation of the content body.&lt;br/&gt;
&lt;br/&gt;
One could run the request through the protocol processor in order to populate the request with all mandatory headers prior to passing it to the RequestProtocolCompliance validator. This would add up to the processing overhead and increase complexity of the cache implementation.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12901478" author="vcarel" created="Mon, 23 Aug 2010 17:57:07 +0100"  >By the way, is there any good reason of validating the requests within CachingHttpClient ?&lt;br/&gt;
&lt;br/&gt;
I would presume that it&amp;#39;s for ensuring that requests are valid before using them to generate the cache&amp;#39;s keys... but if the request is executed successfully and returning an HTTP 2xx/3xx, couldn&amp;#39;t we assume the request is valid consequently ?&lt;br/&gt;
&lt;br/&gt;
Vianney&lt;br/&gt;
</comment>
                    <comment id="12901489" author="vwdiesel" created="Mon, 23 Aug 2010 18:11:16 +0100"  >The HTTP 1.1 spec has items that pertain to both the structure and completeness of a Request and a Response - You could Infer that a request was &amp;#39;good enough&amp;#39; for the server to make an interpretation and supply a possible answer to the a request - but it would hard than to do something reasonable with the cache beyond saying that it should be allowed to cache any 2xx responses that make sense.&lt;br/&gt;
&lt;br/&gt;
I have to admit that I am starting to lean in the direction of easing this item out of the caching code and tests rather then tying it into the HttpClient Protocol processor.  I would love to get Jon&amp;#39;s and Dave&amp;#39;s opinion on this as well.  Jon will be in the office tomorrow and I will mention it to him - Dave is here today and I will point him in the direction of this discussion. &lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Joe</comment>
                    <comment id="12901513" author="davidmays" created="Mon, 23 Aug 2010 19:03:49 +0100"  >There is a fine line that we attempt to draw in distinguishing between a caching proxy (from which we derive our conditional compliance guidelines) and a local cache. I think one principle we should try to follow is that if you add CachingHttpClient into your project today, the change should not include &amp;quot;getting errors you didn&amp;#39;t get yesterday.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Ultimately, the protocol compliance of the request is the responsibility of the HttpClient, and CachingHttpClient should trust that it will happen. &lt;br/&gt;
&lt;br/&gt;
I think instead of a 411, in this case, some kind of Log.Warn or Log.Info should be in place. Maybe CachingHttpClient should warn you that your request *might* result in never getting a cache hit, if something about the request makes it inherently un-cacheable in an unexpected or unusual way.&lt;br/&gt;
&lt;br/&gt;
I am not initially in favor of putting in additional validations that are already taken care of by the Protocol Processor. I am also not in favor of doing that work twice per request. Without having looked at the code recently, I&amp;#39;m not certain what sort of refactoring would have to take place to move protocol processing further &amp;quot;up the chain&amp;quot; so that requests that went into the cachingclient would already be guaranteed compliant. My intuition says that it would be non-trivial.&lt;br/&gt;
&lt;br/&gt;
At any rate, I am definitely not 100% solid on my position here, and would like to get more thoughts from the community.&lt;br/&gt;
&lt;br/&gt;
Dave&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12901558" author="cimjmoore" created="Mon, 23 Aug 2010 20:39:18 +0100"  >As others have said, this check originates from the original design of the caching module as a decorator around a backend HttpClient; modelling the module&amp;#39;s behavior as a proxy seemed like a good model for understanding the protocol requirements for it. &lt;br/&gt;
&lt;br/&gt;
That said, the caching module isn&amp;#39;t *actually* a proxy--it&amp;#39;s just *part* of a client. As such, some of the proxy requirements can end up a little awkward. This is probably one of those cases; especially since the DefaultHttpClient already appropriately computes Content-Length, I&amp;#39;d be ok with removing this check from the caching module.&lt;br/&gt;
</comment>
                    <comment id="12901711" author="vwdiesel" created="Tue, 24 Aug 2010 03:40:24 +0100"  >This patch should remove the tests and the check that the caching client was making to verify that all requests that have bodies have a content length header.  A comment to the test that is marked as ignore was added to indicate why the test was removed.  The test code was left in place because it might be of use to the HTTP client project in general.&lt;br/&gt;
&lt;br/&gt;
This code submission is authorized by my employer with rights granted to the ASF.</comment>
                    <comment id="12902404" author="olegk" created="Wed, 25 Aug 2010 13:30:42 +0100"  >Patch checked in.&lt;br/&gt;
&lt;br/&gt;
Many thanks, Joe, for contributing it.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12452886" name="remove_411_status_request_compliance.patch" size="4022" author="vwdiesel" created="Tue, 24 Aug 2010 03:40:24 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 23 Aug 2010 12:54:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133982</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47330</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>