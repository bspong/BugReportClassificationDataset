<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:13:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-132/HTTPCLIENT-132.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-132] New Preferences Architecture</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-132</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>An architectural solution is needed to configure various aspects of HttpClient,&lt;br/&gt;
Methods and Connections. &lt;br/&gt;
&lt;br/&gt;
Features:&lt;br/&gt;
- can configure certain properties per request / per connection&lt;br/&gt;
- all configuration is done in a consistant way &lt;br/&gt;
- do not use system properties&lt;br/&gt;
- configuration is completely optional: default values should be used if no&lt;br/&gt;
configuration is made&lt;br/&gt;
&lt;br/&gt;
This is a refactoring request / reminder. File configuration issues as&lt;br/&gt;
dependencies of this bug.</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333691">HTTPCLIENT-132</key>
            <summary>New Preferences Architecture</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="olegk">Oleg Kalnichevski</assignee>
                                <reporter username="oglueck">Ortwin Gl&#252;ck</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Dec 2002 19:11:26 +0000</created>
                <updated>Thu, 2 May 2013 03:28:36 +0100</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:11 +0100</resolved>
                            <version>2.0 Alpha 1</version>
                                <fixVersion>3.0 Final</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12379749" author="oglueck" created="Tue, 17 Dec 2002 19:23:33 +0000"  >Obviously this Bugzilla is not configured to allow dependencies. So just add&lt;br/&gt;
comments with the bug numbers:&lt;br/&gt;
&lt;br/&gt;
#8288&lt;br/&gt;
#10790&lt;br/&gt;
#10791&lt;br/&gt;
#10793&lt;br/&gt;
#10797&lt;br/&gt;
</comment>
                    <comment id="12379750" author="olegk" created="Sat, 30 Aug 2003 22:43:32 +0100"  >I have new preference architecure almost ready. I&amp;#39;ll submit the first revision &lt;br/&gt;
of the patch as soon as I get back from Croatia.&lt;br/&gt;
&lt;br/&gt;
It turned out to be much more difficult than I initally though. At least three &lt;br/&gt;
attempts to come up with acceptable solution bogged down. But the 4th one &lt;br/&gt;
looks promising. &lt;br/&gt;
&lt;br/&gt;
Oleg.</comment>
                    <comment id="12379751" author="olegk" created="Sat, 30 Aug 2003 22:48:15 +0100"  >See my comments above</comment>
                    <comment id="12379752" author="olegk" created="Thu, 4 Sep 2003 05:15:49 +0100"  >Created an attachment (id=8053)&lt;br/&gt;
Patch (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379753" author="olegk" created="Thu, 4 Sep 2003 05:17:45 +0100"  >Important points:&lt;br/&gt;
&lt;br/&gt;
- collections of HTTP parameters may be linked together to form a hierarchy&lt;br/&gt;
- Parameters can be set at the global level, Http client level or Http method level&lt;br/&gt;
- If a parameter is not defined at the current level, its value is drawn from a&lt;br/&gt;
higher levels of the hierarchy at which the parameter is defined&lt;br/&gt;
- If parameter is not defined at the current level or any level above, a default&lt;br/&gt;
value is returned&lt;br/&gt;
- Some parameters are not applicable at the Http method level </comment>
                    <comment id="12379754" author="becke@u.washington.edu" created="Thu, 4 Sep 2003 10:09:38 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I like it.  Overall the design is quite good.  I have number of ideas/questions which I will &lt;br/&gt;
elaborate on below.&lt;br/&gt;
&lt;br/&gt;
High level stuff:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- How should we handle the storage of more complicated configuration options, like the date &lt;br/&gt;
formats used in DateParser?  This is definitely something that I think should be able to &lt;br/&gt;
configure, in the default case at least.  Another item that has been brought up is the ability to &lt;br/&gt;
define a set of default headers to be applied to all methods.  Here a couple of ideas off the top &lt;br/&gt;
of my head:&lt;br/&gt;
&lt;br/&gt;
# 1 - delimit values&lt;br/&gt;
http.dateFormats=EEE, dd-MMM-yyyy HH:mm:ss z&amp;lt;SOME_DELIM&amp;gt;EEE dd-MMM-yyyy HH-mm-&lt;br/&gt;
ss z&lt;br/&gt;
&lt;br/&gt;
# 2 - indirection&lt;br/&gt;
http.dateFormats=format1, format2&lt;br/&gt;
format1=EEE, dd-MMM-yyyy HH:mm:ss z&lt;br/&gt;
format2=EEE dd-MMM-yyyy HH-mm-ss z&lt;br/&gt;
&lt;br/&gt;
The first choice is the easiest but has the delimiter choice problem.  The second choice is more &lt;br/&gt;
exact but requires more work and is a little less obvious.  I think the solution here will depend &lt;br/&gt;
somewhat on the answer to the next question.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Is there a need for both specific configuration params like getConnectionManagerTimeout() &lt;br/&gt;
and generic ones like getParameter(String)?  I feel like we should have custom methods for all &lt;br/&gt;
configuration values, or all generic ones with support for type specific params like &lt;br/&gt;
getLongValue(String), but not both.  I am leaning more toward all specific configuration &lt;br/&gt;
methods.  This configuration system is only meant to support HttpClient.  It should not need to &lt;br/&gt;
be generic enough to be usable for other purposes.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Implementation details (perhaps too soon for this):&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I think HttpParams.load() should use a PropertyResourceBundle to load/parse the &lt;br/&gt;
configuration.  It avoids implementing the nasty details and provides support for splitting lines &lt;br/&gt;
with &amp;quot;\&amp;quot;, among other things.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I think we probably want a HttpMethodBase.setParams() or something of the sort.&lt;br/&gt;
&lt;br/&gt;
What do you think?&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12379755" author="oglueck" created="Thu, 4 Sep 2003 15:35:41 +0100"  >A comment about classloaders to finde the properties file. We must be very&lt;br/&gt;
careful about this and be as much compatible with other components i.e. handle&lt;br/&gt;
it the same way. I am not 100% sure but I think the &amp;#39;most common&amp;#39; procedure is a&lt;br/&gt;
follows:&lt;br/&gt;
&lt;br/&gt;
1. Try the current thread&amp;#39;s context ClassLoader (if not null) and look for the&lt;br/&gt;
properties file&lt;br/&gt;
2. Try the ClassLoader that loaded the class and look for the properties file&lt;br/&gt;
3. Use the Jar file service provider mechanism (see&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html)&quot;&gt;http://java.sun.com/j2se/1.3/docs/guide/jar/jar.html)&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
We must check other projects like Xerces, JCE how they handle ClassLoaders.</comment>
                    <comment id="12379756" author="becke@u.washington.edu" created="Thu, 4 Sep 2003 20:28:58 +0100"  >I thought about this quite a bit more last night as I was going to sleep and I have changed my &lt;br/&gt;
mind, particularly in regard to specific vs. generic configuration.  My feeling now is that &lt;br/&gt;
HttpParams should be a source for generic configuration and that specific configuration should be &lt;br/&gt;
handled by the specific users of the values.  For example HttpParams would have methods like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getParam(String key)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long getLongParam(String key)&lt;br/&gt;
&lt;br/&gt;
and default options like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getParam(String key, String default)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long getLongParam(String key, long default)&lt;br/&gt;
&lt;br/&gt;
Then classes like HttpVersion or HttpMethodBase would have the specifics like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final String PARAM_PROTOCOL_VERSION = &amp;quot;http.protocol.version&amp;quot;&lt;br/&gt;
&lt;br/&gt;
and&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void setHttpVersion(HttpVersion version, HttpParams params)&lt;br/&gt;
&lt;br/&gt;
Again, these are just some ideas.  I like this separation of things better though.  This allows &lt;br/&gt;
HttpParams to be flexible enough to handle various kinds of configuration, and pushes the &lt;br/&gt;
specifics to the classes that care about them.&lt;br/&gt;
&lt;br/&gt;
What do you think?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379757" author="adrian@ephox.com" created="Thu, 4 Sep 2003 21:07:43 +0100"  >In response to Ortwin&amp;#39;s comments (I haven&amp;#39;t had a chance to look into the patch yet), if you are &lt;br/&gt;
trying to load arbitrary things from the classpath you create a major problem and for applets since &lt;br/&gt;
those attempts translate into requests back to the original server which may include popping up &lt;br/&gt;
authentication dialogs to the user etc.  I&amp;#39;m not sure why HttpClient needs a way to be configured &lt;br/&gt;
by a dynamically located properties file, since it is always used through it&amp;#39;s programmatic API &lt;br/&gt;
anyway.  It seems to me that just passing in a properties file (or some other configuration object) &lt;br/&gt;
to the HttpClient constructor would do and we could avoid the need to implement and maintain &lt;br/&gt;
code for automatically locating the properties file.&lt;br/&gt;
&lt;br/&gt;
Either way, it&amp;#39;s an absolute must for us to have a way to turn off this autodiscovery.  I&amp;#39;m happy to &lt;br/&gt;
implement this myself once things settle down if need be though.</comment>
                    <comment id="12379758" author="eric@tibco.com" created="Thu, 4 Sep 2003 21:22:03 +0100"  >Some quick thoughts from here, having scanned the proposed patch only very briefly:&lt;br/&gt;
&lt;br/&gt;
* I like the idea of keeping parameters generic.  I use the Slide WebDAV&lt;br/&gt;
extensions, and likely there will be options that make sense to specify for that&lt;br/&gt;
in the future (default encoding of XML requests, for example).  Clients may also&lt;br/&gt;
have preferences that they associate with HttpClient, but are not necessarily&lt;br/&gt;
used by HttpClient.  By keeping the options generic, extensions like WebDAV, and&lt;br/&gt;
other client wrappers can use the same mechanism for setting their preferences.&lt;br/&gt;
If you make the settings functions specific, it will be harder over time for the&lt;br/&gt;
library to accommodate new options, and clients will not be able to extend it as&lt;br/&gt;
easily.&lt;br/&gt;
&lt;br/&gt;
* The &amp;quot;discovery&amp;quot; process standard could use the approach outlined here:&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/parsers/SAXParserFactory.html#newInstance()&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/javax/xml/parsers/SAXParserFactory.html#newInstance()&lt;/a&gt;&lt;br/&gt;
which is as close to a &amp;quot;standard&amp;quot; as Java has for this kind of thing.&lt;br/&gt;
&lt;br/&gt;
* Ortwin has an excellent point, namely that the discovery process should kick&lt;br/&gt;
in only if the caller doesn&amp;#39;t provide default information.&lt;br/&gt;
</comment>
                    <comment id="12379759" author="olegk" created="Thu, 4 Sep 2003 22:22:30 +0100"  >Folks,&lt;br/&gt;
It&amp;#39;s my first day at work after two weeks of holidays, so things are a bit &lt;br/&gt;
hectic right now. I&amp;#39;ll try to respond to every comment made but that may take a &lt;br/&gt;
while and a few postings&lt;br/&gt;
&lt;br/&gt;
&amp;gt; # 2 - indirection&lt;br/&gt;
&amp;gt; http.dateFormats=format1, format2&lt;br/&gt;
&amp;gt; format1=EEE, dd-MMM-yyyy HH:mm:ss z&lt;br/&gt;
&amp;gt; format2=EEE dd-MMM-yyyy HH-mm-ss z&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s the way Sun does it, and it may well be the way most users would expect &lt;br/&gt;
it to work (me for one)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - Is there a need for both specific configuration params &lt;br/&gt;
&amp;gt; like getConnectionManagerTimeout() and generic ones like getParameter&lt;br/&gt;
(String)?  &lt;br/&gt;
&lt;br/&gt;
Not really. I also agree that ideally two methods should not be mixed up. I &lt;br/&gt;
sense that the majority of respondent favor the generic approach over specific, &lt;br/&gt;
like I do. I just felt that having to parse some frequently values such as &lt;br/&gt;
protocol version might be too much of a performance hit. I thought an exception &lt;br/&gt;
could be made for the most frequently used parameters (maybe just protocol &lt;br/&gt;
version). However, if we all agree that performance degradation will be offset &lt;br/&gt;
by greater flexibility, I do not mind taking purely generic approach&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - I think HttpParams.load() should use a PropertyResourceBundle to &lt;br/&gt;
&amp;gt; load/parse the  configuration.  It avoids implementing the nasty &lt;br/&gt;
&amp;gt; details and provides support for splitting lines with &amp;quot;\&amp;quot;, among&lt;br/&gt;
&amp;gt; other things.&lt;br/&gt;
&lt;br/&gt;
Agreed. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; - I think we probably want a HttpMethodBase.setParams() or something&lt;br/&gt;
&amp;gt; of the sort.&lt;br/&gt;
&lt;br/&gt;
Can do.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379760" author="rolweber@de.ibm.com" created="Thu, 4 Sep 2003 22:26:11 +0100"  >I don&amp;#39;t like the generic approach so much. It involves defining property names&lt;br/&gt;
which introduce typos and requires converting data representations. If you&lt;br/&gt;
know you need a boolean to indicate whether redirects should be chased or not&lt;br/&gt;
(just to give an example), give it a setter and a getter and let the compiler&lt;br/&gt;
check for typos. To me, a generic mechanism is something for &amp;quot;things we haven&amp;#39;t&lt;br/&gt;
thought about&amp;quot;, or &amp;quot;things we couldn&amp;#39;t know about&amp;quot; in Eric&amp;#39;s case. Useful, but&lt;br/&gt;
rather a fallback than a preferred choice.&lt;br/&gt;
Unfortunately, I won&amp;#39;t find the time to look at the code in the near future.&lt;br/&gt;
But is there a way to have base class that provides a generic mechanism and&lt;br/&gt;
to use adapter classes for the individual components? Something like:&lt;br/&gt;
&lt;br/&gt;
HttpParams: generic parameters and conversion methods from and to strings&lt;br/&gt;
HttpClientParams: specific getters and setters for the client&amp;#39;s properties,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;kept in attributes. Constructor and/or readFrom(HttpParams) to initialize&lt;br/&gt;
&amp;nbsp;&amp;nbsp;the attributes, and saveTo(HttpParams) to write them back.&lt;br/&gt;
HttpMethodParams: like HttpClientParams, just for the HttpMethodBase params&lt;br/&gt;
HttpGetMethodParams: derived from HttpMethodParams, adding some GET-specific&lt;br/&gt;
&amp;nbsp;&amp;nbsp;attributes.&lt;br/&gt;
...and so on for every component that defines parameters&lt;br/&gt;
&lt;br/&gt;
I know this may create a lot of new classes, but I always was a friend of&lt;br/&gt;
lots of (simple) classes :-)</comment>
                    <comment id="12379761" author="olegk" created="Fri, 5 Sep 2003 03:36:17 +0100"  >&amp;gt; We must be very careful about this and be as much compatible with &lt;br/&gt;
&amp;gt; other components i.e. handle it the same way&lt;br/&gt;
&lt;br/&gt;
Odi, Adrian,&lt;br/&gt;
I think your concerns are well grounded. In order to address them I am going to&lt;br/&gt;
make sure that &lt;br/&gt;
&lt;br/&gt;
1) configuration file discovery mechanism behaves consistently with the common&lt;br/&gt;
practices outlined in the reference provided by Eric&lt;br/&gt;
2) discovery mechanism kicks in ONLY if no configuration file explicitly&lt;br/&gt;
specified through a system property &lt;br/&gt;
3) fat, scary warning message is logged if no configuration file is explicitly&lt;br/&gt;
given &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379762" author="olegk" created="Fri, 5 Sep 2003 03:51:39 +0100"  >&amp;gt; HttpParams: generic parameters and conversion methods from and to strings&lt;br/&gt;
&amp;gt; HttpClientParams: specific getters and setters for the client&amp;#39;s properties,&lt;br/&gt;
&amp;gt;   kept in attributes. Constructor and/or readFrom(HttpParams) to initialize&lt;br/&gt;
&amp;gt;   the attributes, and saveTo(HttpParams) to write them back.&lt;br/&gt;
&amp;gt; HttpMethodParams: like HttpClientParams, just for the HttpMethodBase params&lt;br/&gt;
&amp;gt; HttpGetMethodParams: derived from HttpMethodParams, adding some GET-specific&lt;br/&gt;
&amp;gt;   attributes.&lt;br/&gt;
&amp;gt; ...and so on for every component that defines parameters&lt;br/&gt;
&lt;br/&gt;
Roland, how about this?&lt;br/&gt;
&lt;br/&gt;
interface HttpGenericParams: implemented by HttpParams&lt;br/&gt;
interface HttpClientParams: derived from HttpGenericParams, implemented by&lt;br/&gt;
HttpClient&lt;br/&gt;
interface HttpHttpParams: derived from HttpGenericParams, implemented by&lt;br/&gt;
HttpMethodBase&lt;br/&gt;
&lt;br/&gt;
Interface implementations act as a facade that abstract the intricacies of&lt;br/&gt;
physical representation and conversion of parameters contained in the associated&lt;br/&gt;
HttpParams instance. All parameters can still be accessed directly through&lt;br/&gt;
HttpGenericParams interface. That would also be a way to interact with&lt;br/&gt;
non-standard parameters&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379763" author="adrian@ephox.com" created="Fri, 5 Sep 2003 09:36:18 +0100"  >Hi Oleg,&lt;br/&gt;
I&amp;#39;ve had a chance to look over the patch and it looks like some really good work - well done!&lt;br/&gt;
&lt;br/&gt;
Continuing my applet-focussed view of the world:&lt;br/&gt;
&lt;br/&gt;
&amp;gt;2) discovery mechanism kicks in ONLY if no configuration file explicitly&lt;br/&gt;
&amp;gt;specified through a system property &lt;br/&gt;
&lt;br/&gt;
This won&amp;#39;t help unsigned applets at all and while I don&amp;#39;t think HttpClient is particularly useful in &lt;br/&gt;
such a context anyway it would be nice to avoid system properties for configuration since that was &lt;br/&gt;
one of the goals of the new architecture anyway.  Certainly setting a system property would be a &lt;br/&gt;
good option, but would it be possible to just create a HttpParams object manually and not use a &lt;br/&gt;
properties file at all?  I wouldnt&amp;#39; be too worried if such a scheme causes undue problems but it is a &lt;br/&gt;
nice to have feature.&lt;br/&gt;
&lt;br/&gt;
Otherwise I like it, particularly with your latest suggestion for handling Roland&amp;#39;s suggestions and &lt;br/&gt;
with the aid of good documentation supporting it (that I&amp;#39;m happy to add to my todo list).</comment>
                    <comment id="12379764" author="becke@u.washington.edu" created="Fri, 5 Sep 2003 12:01:27 +0100"  >Here is another idea that combines some of what Oleg and Roland are saying, but in a different &lt;br/&gt;
way.  How about something like:&lt;br/&gt;
&lt;br/&gt;
interface HttpParams with getters and setter for simple types like (String, int, etc.): implemented &lt;br/&gt;
by PropertyHttpParams(the current HttpParams)&lt;br/&gt;
&lt;br/&gt;
class HttpParamsFactory with factory methods for getting access to instances of HttpParams.&lt;br/&gt;
&lt;br/&gt;
These classes would handle loading/storing/access for the basics.  For the various specifics like &lt;br/&gt;
HttpVersion we would have static/instance methods like the following:&lt;br/&gt;
&lt;br/&gt;
class HttpVersion {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static HttpVersion getHttpVersion(HttpParams params) { ... }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static void setHttpVersion(HttpVersion version, HttpParams params) { ... }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
This setup allows for more flexibility at the base HttpParams level, which I think is important, &lt;br/&gt;
but doesn&amp;#39;t add specific Params classes/interfaces(ClientParams, MethodParams, etc.).  I feel like &lt;br/&gt;
there is really only going to be one way to go from HttpVersion-&amp;gt;String and vice-versa and that &lt;br/&gt;
adding interfaces/abstraction for this is overkill.&lt;br/&gt;
&lt;br/&gt;
Some food for thought, or at least I hope:)&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379765" author="rolweber@de.ibm.com" created="Fri, 5 Sep 2003 14:29:17 +0100"  >Hello Oleg, Mike,&lt;br/&gt;
&lt;br/&gt;
I like the interface approach. Mike, the generic approach with automatic&lt;br/&gt;
conversion for simple data types is fine for simple data types. But for&lt;br/&gt;
something like the various date formats, you&amp;#39;d have parsing code at the&lt;br/&gt;
place where the formats are needed. I would prefer something like&lt;br/&gt;
params.getDateFormats() that returns a parsed string array, with the&lt;br/&gt;
parsing code offloaded to a different class. Of course, that could also&lt;br/&gt;
be achieved by using a helper like ParamsParser.getDateFormats(param)&lt;br/&gt;
and a generic parameter store.&lt;br/&gt;
Still, this would *require* a generic data store even in cases where&lt;br/&gt;
configuration is done programatically. Folks would have to convert their&lt;br/&gt;
type-specific parameters they obtained from whereever to the generic&lt;br/&gt;
format, which would then be converted back by the http client code.&lt;br/&gt;
&lt;br/&gt;
Mike, the HttpParamsFactory is an excellent suggestion. I learned from&lt;br/&gt;
my work on OpenCard that a forced config loading mechanism is a bad idea.&lt;br/&gt;
Sooner or later someone is going to create a small footprint version of&lt;br/&gt;
your code, or use it in a setting you didn&amp;#39;t expect originally, and they&lt;br/&gt;
will want to get rid of whatever well-designed loading mechanism you put&lt;br/&gt;
in, just because they have their own or don&amp;#39;t want to specify one.&lt;br/&gt;
&lt;br/&gt;
I would even go so far as to avoid any reference from the run-time classes&lt;br/&gt;
to the configuration classes. So instead of having a default constructor&lt;br/&gt;
for HttpClient that uses HttpParamsFactory to obtain it&amp;#39;s parameters, put&lt;br/&gt;
a factory method in the factory to create a configured HttpClient:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpClient HttpParamsFactory.createConfiguredClient()&lt;br/&gt;
So folks that want to provide the properties themselves can just drop&lt;br/&gt;
HttpParamsFactory from the package without any impact on the rest of the&lt;br/&gt;
classes.&lt;br/&gt;
&lt;br/&gt;
In a customer project, I put all configuration loading and default&lt;br/&gt;
initialization code into a separate, optional package and was quite&lt;br/&gt;
happy with that decision.&lt;br/&gt;
</comment>
                    <comment id="12379766" author="oglueck" created="Fri, 5 Sep 2003 16:09:55 +0100"  >Oleg, Adrian&lt;br/&gt;
&lt;br/&gt;
I am not convinced that we should really use a configuration FILE at all. This&lt;br/&gt;
would imply that all HttpClient objects were configured with exactly the same&lt;br/&gt;
parameters (if not customized after instantiation). I think this is of little&lt;br/&gt;
(to no) use. I have rather come to the conclusion that configuration should be&lt;br/&gt;
done instrinsic. If someone wants a properties / XML file he can always write&lt;br/&gt;
his own configuration mechanism. We may supply a &amp;quot;PropertiesFileConfigurator&amp;quot; in&lt;br/&gt;
the contrib package. Default values can also be provided in a class.&lt;br/&gt;
&lt;br/&gt;
Generic parameters vs. getters/setters:&lt;br/&gt;
This was discussed in earlier approches too. The main argument not to use&lt;br/&gt;
getters/setters is the sheer (?) number of parameters and future extenstions&lt;br/&gt;
while keeping the API small and constant enough. But there are some good&lt;br/&gt;
arguments pro getters/setters:&lt;br/&gt;
&amp;nbsp;- compile time (spell-)checking is less error prone&lt;br/&gt;
&amp;nbsp;- you can use reflection (for Digester, O-R persistence etc.)&lt;br/&gt;
&amp;nbsp;- easier to understand and read&lt;br/&gt;
&amp;nbsp;- enforces strong type checking&lt;br/&gt;
&lt;br/&gt;
But I think we must use a combination of both!&lt;br/&gt;
&lt;br/&gt;
Why?&lt;br/&gt;
If I set certain parameters on a high level like HttpClient, it must be able to&lt;br/&gt;
pass them down to the Methods it executes. But I don&amp;#39;t want getters/setter for&lt;br/&gt;
Method properties in HttpClient.&lt;br/&gt;
&lt;br/&gt;
How?&lt;br/&gt;
Make getters/setters in those classes where the parameter is evaluated only.&lt;br/&gt;
This may be in more than one class (just think of HTTP version) if classes are&lt;br/&gt;
only loosely coupled.&lt;br/&gt;
Higher level classes like HttpClient must take generic parameters and configure&lt;br/&gt;
the objects it uses.&lt;br/&gt;
Use a parameter object and not just an interface. This enables us to pass sets&lt;br/&gt;
of parameters along to other classes.&lt;br/&gt;
&lt;br/&gt;
Those are my recommendations. Feel free to criticise them.&lt;br/&gt;
</comment>
                    <comment id="12379767" author="rolweber@de.ibm.com" created="Fri, 5 Sep 2003 19:17:36 +0100"  >Yet more thoughts on generic vs. specific configuration objects...&lt;br/&gt;
If you use generic configuration, you will probably look up a property&lt;br/&gt;
(like &amp;#39;use HTTP 1.1&amp;#39;? or &amp;#39;follow Redirects&amp;#39;) once and then store them&lt;br/&gt;
in an attribute of the object that did the lookup.&lt;br/&gt;
When I suggested configuration objects, my idea was to remove these&lt;br/&gt;
attributes from the class that needs to be configured. Instead of using&lt;br/&gt;
a local configuration attribute, it accesses the configuration object&lt;br/&gt;
every time the value is needed. Used that way, type conversion on every&lt;br/&gt;
access becomes a real penalty.&lt;br/&gt;
&lt;br/&gt;
Ortwin, default configuration objects could be configuration values&lt;br/&gt;
themselves. Instead of finding a method&amp;#39;s configuration parameters&lt;br/&gt;
individually in the parameters for the HttpClient, you could use a&lt;br/&gt;
single setter and getter:&lt;br/&gt;
&amp;nbsp;void setDefaultMethodParams(HttpMethodParams)&lt;br/&gt;
&amp;nbsp;HttpMethodParams getDefaultMethodParams()&lt;br/&gt;
&lt;br/&gt;
The generic extension mechanism can be a getter and setter for a&lt;br/&gt;
HashMap named &amp;#39;customParameters&amp;#39; in each parameter class.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12379768" author="oglueck" created="Fri, 5 Sep 2003 20:07:33 +0100"  >Parameter classes could be inner classes.&lt;br/&gt;
What about considering an existing configuration tool like the Configuration&lt;br/&gt;
project from the Jakarta Sandbox?&lt;br/&gt;
&lt;br/&gt;
Odi</comment>
                    <comment id="12379769" author="olegk" created="Fri, 5 Sep 2003 21:19:13 +0100"  >All right. We all seem agree to disagree at this time. If do not move on we &lt;br/&gt;
will get nowhere. I suggest the following: I provide a second draft that will &lt;br/&gt;
attempt to incorporate those ideas that we all more or less in agreement about:&lt;br/&gt;
&lt;br/&gt;
* HttpParam class should at this time be dealing with generic properties only. &lt;br/&gt;
HttpClient &amp;amp; HttpMethod specifics will be later built on top of it. We all yet &lt;br/&gt;
have to come an agreement as to how exactly it is to be implemented.&lt;br/&gt;
* Configuration file discovery mechanism is inherently evil and should be &lt;br/&gt;
banished to the contrib package for eternity.  &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379770" author="olegk" created="Sat, 6 Sep 2003 21:27:20 +0100"  >Created an attachment (id=8082)&lt;br/&gt;
Patch (take 2)&lt;br/&gt;
</comment>
                    <comment id="12379771" author="olegk" created="Sat, 6 Sep 2003 21:30:24 +0100"  >With property file gone things got surprisingly easier. The new patch should&lt;br/&gt;
address a lot of concerns expressed above. Please give me your feedback.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379772" author="becke@u.washington.edu" created="Sat, 6 Sep 2003 23:32:32 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m glad you decided to take another stab at this.  This version has some definite improvements, &lt;br/&gt;
and I think I can see the light at the end of the tunnel now.  Specifics below:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Removing the reliance on the properties and string based values was an excellent idea.  This &lt;br/&gt;
greatly simplifies things and makes the process of loading defaults separate.  Nice.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- To replace the loading of defaults from properties I think we need an HttpParamsFactory.  This &lt;br/&gt;
would replace the static GLOBAL_DEFAULTS.  HttpParamsFactory would have a plugable mechanism &lt;br/&gt;
for defining the default params.  Things like the static initializer in HttpMethodParams could be &lt;br/&gt;
moved there.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Are isParameterFalse() and isParameterTrue() necessary?  Seems like getBooleanParameter() &lt;br/&gt;
should be enough :)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- All of the various PROTOCOL_STRICTNESS_PARAMS should be broken out to individual methods I &lt;br/&gt;
think.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Once parameters have methods for getting/setting them I do not think the public param Strings &lt;br/&gt;
for them are required.&lt;br/&gt;
&lt;br/&gt;
Again, nice work.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379773" author="olegk" created="Mon, 8 Sep 2003 05:44:17 +0100"  >&amp;nbsp;- To replace the loading of defaults from properties I think we need an&lt;br/&gt;
HttpParamsFactory.  This &lt;br/&gt;
&amp;gt; would replace the static GLOBAL_DEFAULTS.  HttpParamsFactory would have a&lt;br/&gt;
plugable mechanism &lt;br/&gt;
&amp;gt; for defining the default params.  Things like the static initializer in&lt;br/&gt;
HttpMethodParams could be &lt;br/&gt;
&amp;gt; moved there.&lt;br/&gt;
&lt;br/&gt;
Mike, I just do not see how this can work without resorting to system&lt;br/&gt;
properties. How are you planning to initialize the factory class? &lt;br/&gt;
&lt;br/&gt;
I think that any properties persistence mechanism can simply feed the&lt;br/&gt;
GLOBAL_DEFAULTS with the values retrieved from a persistent storage. Is class&lt;br/&gt;
factory pattern really necessary in this particular case. Probably I just can&amp;#39;t&lt;br/&gt;
see an elegant way of implementing it. Give me a gentle push in the right direction.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt;  - Are isParameterFalse() and isParameterTrue() necessary?  Seems like&lt;br/&gt;
getBooleanParameter() &lt;br/&gt;
&amp;gt; should be enough :)&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
True, but I just felt isParameterTrue() &amp;amp; isParameterFalse() required one&lt;br/&gt;
parameter less and were a bit more readable. I do not mind removing them, though.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;gt;  - All of the various PROTOCOL_STRICTNESS_PARAMS should be broken out to&lt;br/&gt;
individual methods I &lt;br/&gt;
&amp;gt; think.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
I have to disagree. In my opinion it would create too much clutter. But again,&lt;br/&gt;
if the majority favours this approach, I&amp;#39;ll happily oblige.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379774" author="rolweber@de.ibm.com" created="Tue, 9 Sep 2003 00:11:24 +0100"  >Hello Oleg,&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m currently stuck at a customer site and can dial in only occasionally.&lt;br/&gt;
Since I&amp;#39;m unable to browse through the source, could you consider the&lt;br/&gt;
following two use cases?&lt;br/&gt;
&lt;br/&gt;
1. A servlet class is instantiated multiple times with different config,&lt;br/&gt;
but in the same classloader context. Can different instances of the servlet&lt;br/&gt;
create HttpClient instances with different parameters?&lt;br/&gt;
&lt;br/&gt;
2. A framework uses HttpClient and has it&amp;#39;s own mechanism for defining&lt;br/&gt;
properties. How tricky is it to pass the properties - once they are&lt;br/&gt;
loaded - to the Http Client?&lt;br/&gt;
&lt;br/&gt;
Loading the set of default properties should be initiated by the application.&lt;br/&gt;
I don&amp;#39;t see a need for an automatic loading mechanism, or automatic selection&lt;br/&gt;
of an HttpParamsFactory. Make it a one-liner to choose a factory and delegate&lt;br/&gt;
that responsibility to the application (or the framework) that is using the&lt;br/&gt;
Http Client.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12379775" author="olegk" created="Tue, 9 Sep 2003 00:36:39 +0100"  >&amp;gt; 1. A servlet class is instantiated multiple times with different config,&lt;br/&gt;
&amp;gt; but in the same classloader context. Can different instances of the servlet&lt;br/&gt;
&amp;gt; create HttpClient instances with different parameters?&lt;br/&gt;
&lt;br/&gt;
Of course! What would my patch be worth otherwise? It is still up to you to &lt;br/&gt;
decide if you want your HttpClient instances to share the same global defaults. &lt;br/&gt;
One can simply set HttpClient#getParams#setDefaults(null) to make it disregard &lt;br/&gt;
global defaults.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 2. A framework uses HttpClient and has it&amp;#39;s own mechanism for defining&lt;br/&gt;
&amp;gt; properties. How tricky is it to pass the properties - once they are&lt;br/&gt;
&amp;gt; loaded - to the Http Client?&lt;br/&gt;
&lt;br/&gt;
Allow me to try to explain that with the following pseudo-code snippet:&lt;br/&gt;
&lt;br/&gt;
// Select either global HttpParams or HttpClient&amp;#39;s params or HttpMethod&amp;#39;s params&lt;br/&gt;
HttpParams params = GLOBAL_DEFAULTS // Or &lt;br/&gt;
HttpParams params = httpClient.getParams(); // Or&lt;br/&gt;
HttpParams params = httpMethod.getParams();&lt;br/&gt;
&lt;br/&gt;
while (storage.hasMore()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;storageitem = storage.getNext();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;String paramName = storageitem.getName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Object paramValue = storageitem.getObject();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;params.setParameter(paramName, paramValue);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
This may look trivial, but at the moment I can&amp;#39;t see why we would want &lt;br/&gt;
something more complex. I still would like to know, though, what Mike has got &lt;br/&gt;
on his mind with the HttpParamsFactory&lt;br/&gt;
&lt;br/&gt;
Cheers&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379776" author="becke@u.washington.edu" created="Tue, 9 Sep 2003 11:27:50 +0100"  >Created an attachment (id=8109)&lt;br/&gt;
Patch (HttpParamsFactory)&lt;br/&gt;
</comment>
                    <comment id="12379777" author="becke@u.washington.edu" created="Tue, 9 Sep 2003 11:43:38 +0100"  >The attached patch contains a quick implementation of what I had in mind with regard to a &lt;br/&gt;
HttpParamsFactory.  The main purpose is to consolidate all of the initialization of the HttpParams &lt;br/&gt;
to a single/configurable location.  I see the benefits of this approach as the following:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Initialization of HttpParams is localized and formalized.  The method for specifying a new &lt;br/&gt;
initialization routine is clear and easily modifiable.&lt;br/&gt;
&amp;nbsp;- Creation/initialization of the default HttpParams is not necessarily a one time occurrence.  Since &lt;br/&gt;
HttpParamsFactory.getDefaultParams() is called every time the default params are requested, the &lt;br/&gt;
defaults could be completely static, new for every call, or perhaps created on a per-thread basis.  &lt;br/&gt;
The choice is up to the implementor.  We would most likely just provide the default static &lt;br/&gt;
initialization factory.&lt;br/&gt;
&lt;br/&gt;
Overall, I think this approach buys us some nice flexibility with little overhead.  What do you think?&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12379778" author="olegk" created="Wed, 10 Sep 2003 01:11:17 +0100"  >Mike,&lt;br/&gt;
I like the patch, even though it makes things more complex than absolutely&lt;br/&gt;
necessary. I agree with you, though, that greater flexibility makes it well&lt;br/&gt;
worth paying the price.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll incorporate your changes into the new patch which I intend to submit tomorrow. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379779" author="olegk" created="Thu, 11 Sep 2003 04:42:28 +0100"  >Created an attachment (id=8137)&lt;br/&gt;
Patch (take 4)&lt;br/&gt;
</comment>
                    <comment id="12379780" author="olegk" created="Thu, 11 Sep 2003 04:49:26 +0100"  >The forth revision of the patch incorporates Mike&amp;#39;s code with some minor&lt;br/&gt;
variations. &lt;br/&gt;
&lt;br/&gt;
As far as I am concerned that looks pretty much like it. What do you think?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379781" author="becke@u.washington.edu" created="Thu, 11 Sep 2003 05:12:45 +0100"  >I think it&amp;#39;s ready to commit.  I&amp;#39;m anxious to get in there and start using it.  The only change I would &lt;br/&gt;
suggest it to move all of the params classes to a new params package.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379782" author="olegk" created="Thu, 11 Sep 2003 05:22:59 +0100"  >Mike, I just could not get Eclipse to create a patch with *HttpParams* classes&lt;br/&gt;
in org.apache.commons.httpclient.params package. I&amp;#39;ll move them back before&lt;br/&gt;
committing the patch.&lt;br/&gt;
&lt;br/&gt;
If no objections raised by tomorrow 22:00 GMT, I&amp;#39;ll commit the patch.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379783" author="becke@u.washington.edu" created="Thu, 11 Sep 2003 05:27:27 +0100"  >Sounds good to me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379784" author="olegk" created="Fri, 12 Sep 2003 04:19:40 +0100"  >Patch committed. &lt;br/&gt;
&lt;br/&gt;
I am leaving the bug report open until javadocs for new classes are provided and&lt;br/&gt;
references to deprecated methods removed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379785" author="becke@u.washington.edu" created="Tue, 16 Sep 2003 10:27:33 +0100"  >Created an attachment (id=8239)&lt;br/&gt;
Javadocs + more configuration items.&lt;br/&gt;
</comment>
                    <comment id="12379786" author="becke@u.washington.edu" created="Tue, 16 Sep 2003 10:29:17 +0100"  >This patch adds some javadocs, makes use the default connection manager config,&lt;br/&gt;
and moves date parser formats to a configuration item.  Please take a look.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379787" author="olegk" created="Thu, 18 Sep 2003 05:04:55 +0100"  >Mike,&lt;br/&gt;
The patch looks good to me. Wouldn&amp;#39;t it be better, though, if&lt;br/&gt;
java.util.Collection or java.util.Set were used to store multi-value parameters?&lt;br/&gt;
I suppose in that way multi-value parameter would be easier to deal with.&lt;br/&gt;
Imagine if one wanted to add an additional DateFormat to the standard set of&lt;br/&gt;
DateFormats. That would require quite a bit of ugly code with the current&lt;br/&gt;
implementation, I think.&lt;br/&gt;
&lt;br/&gt;
Cheers&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379788" author="becke@u.washington.edu" created="Thu, 18 Sep 2003 07:04:14 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
I heartily agree.  A collection makes much more sense than an array.  I will make this change and &lt;br/&gt;
apply the patch.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379789" author="rolweber@de.ibm.com" created="Fri, 19 Sep 2003 16:36:58 +0100"  >Hi folks,&lt;br/&gt;
&lt;br/&gt;
my apologies for taking so long to look into this again. The current&lt;br/&gt;
architecture is definitely useful, so take these comments as something&lt;br/&gt;
that might just as well end up on the lower end of some to-do list :-)&lt;br/&gt;
There are two things I&amp;#39;m not quite happy with:&lt;br/&gt;
&lt;br/&gt;
1. Taking HttpClient as an example, I&amp;#39;m missing a constructor&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpClient(HttpClientParams)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;I really want a way to instantiate classes without triggering&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;the properties loading mechanism at all. Second best would be a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;setParams(HttpClientParams), so I can simply copy the params&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;of another client. Ok, the copying idea makes more sense using&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpMethodParams and HttpMethodBase as an example :-)&lt;br/&gt;
&lt;br/&gt;
2. From a design point of view, shouldn&amp;#39;t HttpMethodParams better&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;be an attribute than a base class of HttpClientParams?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Since that would require parsing properties into different&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;params objects, I don&amp;#39;t really think it&amp;#39;s worth the effort.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;I just want to put it up for discussion.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12379790" author="rolweber@de.ibm.com" created="Fri, 19 Sep 2003 18:44:55 +0100"  >Having thought about it again, I now realize my misconception in point 2.&lt;br/&gt;
HttpMethodParams and HttpClientParams are rather independent classes.&lt;br/&gt;
Shouldn&amp;#39;t they both be derived from DefaultHttpParams directly?&lt;br/&gt;
</comment>
                    <comment id="12379791" author="olegk" created="Fri, 19 Sep 2003 19:22:43 +0100"  >Hi Roland. Welcome back.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 1. Taking HttpClient as an example, I&amp;#39;m missing a constructor&lt;br/&gt;
&amp;gt;    HttpClient(HttpClientParams)&lt;br/&gt;
&amp;gt;    I really want a way to instantiate classes without triggering&lt;br/&gt;
&amp;gt;    the properties loading mechanism at all. Second best would be a&lt;br/&gt;
&amp;gt;    setParams(HttpClientParams), so I can simply copy the params&lt;br/&gt;
&amp;gt;    of another client. Ok, the copying idea makes more sense using&lt;br/&gt;
&amp;gt;    HttpMethodParams and HttpMethodBase as an example :-)&lt;br/&gt;
&lt;br/&gt;
Addition of HttpClient#HttpClient(HttpClientParams) sounds reasonable. We might &lt;br/&gt;
need to make DefaultHttpParams cloneable, which would be a good thing to do &lt;br/&gt;
anyways&lt;br/&gt;
&lt;br/&gt;
&amp;gt; HttpMethodParams and HttpClientParams are rather independent classes.&lt;br/&gt;
&amp;gt; Shouldn&amp;#39;t they both be derived from DefaultHttpParams directly?&lt;br/&gt;
&lt;br/&gt;
Any of parameters relevant on the HttpMethod level should also be settable on &lt;br/&gt;
HttpClient level when applicable of a number of methods, IMO. Off course, there &lt;br/&gt;
is no real need for &amp;#39;extends&amp;#39; relationship between HttpClientParams and &lt;br/&gt;
HttpMethodParams other than for reusing a few methods&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379792" author="rolweber@de.ibm.com" created="Fri, 19 Sep 2003 20:18:56 +0100"  >Hello Oleg,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Any of parameters relevant on the HttpMethod level should also be settable on &lt;br/&gt;
&amp;gt; HttpClient level when applicable of a number of methods, IMO.&lt;br/&gt;
&lt;br/&gt;
So you want to use the same params object for the client and methods, or use&lt;br/&gt;
the client params object as default for the methods object. Sounds good to me.&lt;br/&gt;
Keep the hierarchy as it is.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Addition of HttpClient#HttpClient(HttpClientParams) sounds reasonable. We&lt;br/&gt;
&amp;gt; might need to make DefaultHttpParams cloneable, [...]&lt;br/&gt;
&lt;br/&gt;
Right, no-one should use the same params object for multiple clients or methods&lt;br/&gt;
and expect setters to be invoked without side effects. That should be made&lt;br/&gt;
clear in the JavaDocs for the constructors that accept params objects.&lt;br/&gt;
&lt;br/&gt;
It would surely be useful if all params objects were cloneable. I&amp;#39;d say that&lt;br/&gt;
on cloning, a params object should copy the parameters it holds locally, but&lt;br/&gt;
keep the same reference for the default params. No need to clone defaults,&lt;br/&gt;
since they are accessed read-only.&lt;br/&gt;
&lt;br/&gt;
While you&amp;#39;re at it, can you add an &amp;quot;implements Serializable&amp;quot; as well?&lt;br/&gt;
I don&amp;#39;t know what it would be good for, but maybe someone someday wants&lt;br/&gt;
do deserialize params objects in an HttpParamsFactory.&lt;br/&gt;
&lt;br/&gt;
regards,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12379793" author="becke@u.washington.edu" created="Fri, 19 Sep 2003 20:31:53 +0100"  >&amp;gt; Right, no-one should use the same params object for multiple clients or methods&lt;br/&gt;
&amp;gt; and expect setters to be invoked without side effects. That should be made&lt;br/&gt;
&amp;gt; clear in the JavaDocs for the constructors that accept params objects.&lt;br/&gt;
&lt;br/&gt;
I agree this could cause some strange problems.  Is there even a case to share the same instance &lt;br/&gt;
of a params object between multiple methods/clients?  If not, perhaps the constructor should &lt;br/&gt;
always make copies.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; It would surely be useful if all params objects were cloneable. I&amp;#39;d say that&lt;br/&gt;
&amp;gt; on cloning, a params object should copy the parameters it holds locally, but&lt;br/&gt;
&amp;gt; keep the same reference for the default params. No need to clone defaults,&lt;br/&gt;
&amp;gt; since they are accessed read-only.&lt;br/&gt;
&lt;br/&gt;
Sounds like a good idea.  I would suggest a copy constructor along with/instead of Cloneable as &lt;br/&gt;
cloning can be a little ugly.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; While you&amp;#39;re at it, can you add an &amp;quot;implements Serializable&amp;quot; as well?&lt;br/&gt;
&amp;gt; I don&amp;#39;t know what it would be good for, but maybe someone someday wants&lt;br/&gt;
&amp;gt; do deserialize params objects in an HttpParamsFactory.&lt;br/&gt;
&lt;br/&gt;
Agreed.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379794" author="rolweber@de.ibm.com" created="Fri, 19 Sep 2003 20:42:25 +0100"  >Hello Mike,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Is there even a case to share the same instance of a params object between&lt;br/&gt;
&amp;gt; multiple methods/clients?  If not, perhaps the constructor should always&lt;br/&gt;
&amp;gt; make copies.&lt;br/&gt;
&lt;br/&gt;
I intend to create params objects from my servlets&amp;#39;s configuration, and&lt;br/&gt;
to use them to create all methods affected by that configuration. The idea&lt;br/&gt;
of having a constructor that accepts a params object was to avoid creating&lt;br/&gt;
default params that get replaced immediately afterwards. Copying params&lt;br/&gt;
in the constructor would leave me without a chance to avoid additional&lt;br/&gt;
object creation, even though the one I pass in is exactly the one I want&lt;br/&gt;
to be used by the method.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I would suggest a copy constructor along with/instead of Cloneable as&lt;br/&gt;
&amp;gt; cloning can be a little ugly.&lt;br/&gt;
&lt;br/&gt;
Good point. I support &amp;quot;along with&amp;quot;. Cloning has the advantage that you&lt;br/&gt;
do not need to know the exact class of the object you&amp;#39;re dealing with.&lt;br/&gt;
</comment>
                    <comment id="12379795" author="becke@u.washington.edu" created="Fri, 19 Sep 2003 21:23:29 +0100"  >Hello Roland,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I intend to create params objects from my servlets&amp;#39;s configuration, and&lt;br/&gt;
&amp;gt; to use them to create all methods affected by that configuration. The idea&lt;br/&gt;
&amp;gt; of having a constructor that accepts a params object was to avoid creating&lt;br/&gt;
&amp;gt; default params that get replaced immediately afterwards. Copying params&lt;br/&gt;
&amp;gt; in the constructor would leave me without a chance to avoid additional&lt;br/&gt;
&amp;gt; object creation, even though the one I pass in is exactly the one I want&lt;br/&gt;
&amp;gt; to be used by the method.&lt;br/&gt;
&lt;br/&gt;
Sounds like a good enough reason to me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379796" author="olegk" created="Sat, 20 Sep 2003 07:01:01 +0100"  >I&amp;#39;ll be working on a patch this weekend that will incorporate the suggested&lt;br/&gt;
improvements among other things.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379797" author="olegk" created="Mon, 22 Sep 2003 18:14:44 +0100"  >Created an attachment (id=8311)&lt;br/&gt;
Follow-up patch 1 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379798" author="olegk" created="Mon, 22 Sep 2003 18:18:03 +0100"  >Changelog:&lt;br/&gt;
- Ability to &amp;#39;deep&amp;#39; clone DefaultHttpParams and its sub-classes&lt;br/&gt;
- HttpClient constructors that accept custom parameter set&lt;br/&gt;
- Complete javadoc&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379799" author="rolweber@de.ibm.com" created="Mon, 22 Sep 2003 19:26:07 +0100"  >Hello Oleg,&lt;br/&gt;
&lt;br/&gt;
1. public HttpClient(HttpClientParams params)&lt;br/&gt;
Can we add something like HttpConnectionManager.setParams(p)?&lt;br/&gt;
I think the newly created connection manager should have a chance&lt;br/&gt;
to learn from the parameters how many connections it is supposed&lt;br/&gt;
to create and such stuff.&lt;br/&gt;
&lt;br/&gt;
2. DefaultHttpParams.clone()&lt;br/&gt;
I believe the clone method is a little too smart. Think of the most&lt;br/&gt;
common and simple case. You implemented an awfully complex way to&lt;br/&gt;
clone objects of classes String, Integer, Long, Boolean and so on,&lt;br/&gt;
all of which are serializable and non-modifiable classes that do&lt;br/&gt;
not need to be cloned at all.&lt;br/&gt;
I suggest the simple approach: clone the collection but not it&amp;#39;s&lt;br/&gt;
elements and tell folks they shouldn&amp;#39;t put complex objects in there.&lt;br/&gt;
In case of stored arrays such as for the date formats, a new array&lt;br/&gt;
has to be created when the old one is supposed to be modified. If&lt;br/&gt;
a parameter object cares about whether it needs to be cloned or not,&lt;br/&gt;
then it implements way too much logic to be a parameter object.&lt;br/&gt;
&lt;br/&gt;
Otherwise, it&amp;#39;s peachy :-)&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12379800" author="olegk" created="Mon, 22 Sep 2003 19:44:17 +0100"  >&amp;gt; 1. public HttpClient(HttpClientParams params)&lt;br/&gt;
&amp;gt; Can we add something like HttpConnectionManager.setParams(p)?&lt;br/&gt;
&lt;br/&gt;
HttpParams-enable HttpConnection &amp;amp; HttpConnectionManager is the next item on my &lt;br/&gt;
list.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 2. DefaultHttpParams.clone()&lt;br/&gt;
&amp;gt; I believe the clone method is a little too smart. Think of the most&lt;br/&gt;
&amp;gt; common and simple case. &lt;br/&gt;
&lt;br/&gt;
Actually I spent a healthy part of my last weekend studying different &lt;br/&gt;
approaches to object cloning in Java. General sentiment is that &lt;br/&gt;
java.lang.Object#clone() and java.lang.Cloneable are just plan broken. There &lt;br/&gt;
are enough folks out there who believe that object serialization is the only &lt;br/&gt;
way to go. &lt;br/&gt;
&lt;br/&gt;
I am a bit reluctant to put constraints on type of objects that may be used as &lt;br/&gt;
parameter values as there&amp;#39;s always a chance that we may overlook a legitimate &lt;br/&gt;
use pattern. I would also prefer to use Collection classes instead of arrays as &lt;br/&gt;
things may turn ugly if one wanted, for instance, just to add one additional &lt;br/&gt;
DateFormat to the standard set of DateFormats. All that array content juggling &lt;br/&gt;
can get a bit messy&lt;br/&gt;
&lt;br/&gt;
I agree my clone method does appear to be an overkill, but that was the only &lt;br/&gt;
approach which I felt was robust enough to handle all sorts of cases without &lt;br/&gt;
running a risk of screwing things up in a subtle way. Anyways, I do not mind &lt;br/&gt;
having a simpler method, but first of all, we need to agree on what type of &lt;br/&gt;
objects we should allow as parameter values. My opinion that we should allow all&lt;br/&gt;
&lt;br/&gt;
Cheers&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12379801" author="rolweber@de.ibm.com" created="Mon, 22 Sep 2003 20:17:03 +0100"  >Hello Oleg,&lt;br/&gt;
&lt;br/&gt;
first, let me define the term&amp;#39;s I&amp;#39;ll use in this posting:&lt;br/&gt;
&lt;br/&gt;
params object: instance of DefaultHttpParams or one of it&amp;#39;s subclasses&lt;br/&gt;
parameter object: an object stored in a params object &lt;br/&gt;
&lt;br/&gt;
To me, a parameter object represents a value. The value may be simple&lt;br/&gt;
or structured, but it is accessed read-only by the HTTP client. The&lt;br/&gt;
parameter object may change it&amp;#39;s value asynchronously, but such change&lt;br/&gt;
is never effected directly by the HTTP client.&lt;br/&gt;
Params objects may be modified by the HTTP client, namely by the setter&lt;br/&gt;
methods that store the set values in the params object. However, such&lt;br/&gt;
change is always an addition, replacement, or removal of a parameter&lt;br/&gt;
object, never a modification of an existing one. Furthermore, the HTTP&lt;br/&gt;
client never implicitly clones params objects.&lt;br/&gt;
&lt;br/&gt;
Under these assumptions, there is no need to make copies of parameter&lt;br/&gt;
objects from the HTTP client&amp;#39;s point of view, as they are read-only.&lt;br/&gt;
An application programmer who uses parameter objects with changing&lt;br/&gt;
values may have a need to control whether the same object or clones&lt;br/&gt;
are stored in different params objects. However, as the HTTP client&lt;br/&gt;
does not create clones implicitly, the application programmer has full&lt;br/&gt;
freedom to clone all parameter objects that require cloning whenever&lt;br/&gt;
params objects are prepared. Cloning may be controlled explicitly by&lt;br/&gt;
replacing copy-by-reference entries in a cloned params object, or the&lt;br/&gt;
params classes can be derived to clone specific entries. It is none&lt;br/&gt;
of the HTTP client&amp;#39;s concern.&lt;br/&gt;
</comment>
                    <comment id="12379802" author="olegk" created="Mon, 22 Sep 2003 20:24:28 +0100"  >Makes sense to me. I&amp;#39;ll simplify the DefaultHttpParams#clone() method and post &lt;br/&gt;
a new revision of the patch shortly.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379803" author="olegk" created="Mon, 22 Sep 2003 22:53:39 +0100"  >Created an attachment (id=8313)&lt;br/&gt;
Follow-up patch 1 (take 2)&lt;br/&gt;
</comment>
                    <comment id="12379804" author="olegk" created="Mon, 22 Sep 2003 22:56:17 +0100"  >DefaultHttpParams#clone() updated to incorporate Roland&amp;#39;s feedback.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379805" author="rolweber@de.ibm.com" created="Tue, 23 Sep 2003 14:19:50 +0100"  >Oleg, I like it.&lt;br/&gt;
&lt;br/&gt;
Mike, there is no copy constructor right now. As it would have the&lt;br/&gt;
same signature as the constructor that takes default parameters, I&lt;br/&gt;
suggest to leave it that way.&lt;br/&gt;
</comment>
                    <comment id="12379806" author="becke@u.washington.edu" created="Tue, 23 Sep 2003 20:37:51 +0100"  >Oleg, I agree, it looks good.&lt;br/&gt;
&lt;br/&gt;
Roland, I noticed the lack of copy constructor as well.  As you point out it would conflict with the &lt;br/&gt;
default params constructor.  Just having clone() is good enough for me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379807" author="olegk" created="Tue, 23 Sep 2003 21:45:00 +0100"  >All right then. I&amp;#39;ll commit the patch around 22:00 GMT, if nobody objects&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379808" author="olegk" created="Wed, 24 Sep 2003 03:57:21 +0100"  >Follow-up patch 1 (take 2) committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379809" author="olegk" created="Thu, 2 Oct 2003 21:58:50 +0100"  >Created an attachment (id=8429)&lt;br/&gt;
Follow-up patch 2 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379810" author="olegk" created="Thu, 2 Oct 2003 22:01:30 +0100"  >Changelog:&lt;br/&gt;
* Massive cleanup of deprecated methods&lt;br/&gt;
* HeadMethod class changed to take advantage of the new preference architecture&lt;br/&gt;
* EntityEnclosingMethod class changed to take advantage of the new preference &lt;br/&gt;
architecture&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379811" author="becke@u.washington.edu" created="Fri, 3 Oct 2003 10:18:08 +0100"  >Looks good to me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379812" author="olegk" created="Sat, 4 Oct 2003 05:04:32 +0100"  >Follow-up patch 2 (take 1) committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379813" author="olegk" created="Mon, 13 Oct 2003 04:11:16 +0100"  >Created an attachment (id=8543)&lt;br/&gt;
Follow-up patch 3 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379814" author="olegk" created="Mon, 13 Oct 2003 04:14:58 +0100"  >Changelog:&lt;br/&gt;
- HttpConnection &amp;amp; HttpConnectionManager classes updated to take advantage of&lt;br/&gt;
the new preference architecute.&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379815" author="olegk" created="Sat, 18 Oct 2003 00:24:43 +0100"  >Created an attachment (id=8609)&lt;br/&gt;
Follow-up patch 3 (take 2)&lt;br/&gt;
</comment>
                    <comment id="12379816" author="olegk" created="Sat, 18 Oct 2003 00:26:27 +0100"  >New patch adds receive buffer size parameter for HttpConnection and &lt;br/&gt;
HttpConnectionManager classes.&lt;br/&gt;
&lt;br/&gt;
Folks, any feedback on the follow-up patch 3 so far?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379817" author="becke@u.washington.edu" created="Mon, 20 Oct 2003 00:02:52 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
These changes look good.   I have only one question.  Why does HttpConnection now have &lt;br/&gt;
setSoTimeout() and setSocketTimeout()?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379818" author="olegk" created="Mon, 20 Oct 2003 01:57:41 +0100"  >Mike,&lt;br/&gt;
I agree it&amp;#39;s ugly. The problem is there are situations when read timeout must be&lt;br/&gt;
changed on an open socket (when handling 100-continue handshake) The choice here&lt;br/&gt;
is between two evils: either make HttpConnectionParams tightly coupled with&lt;br/&gt;
HttpConnection or Socket object, or to provide a way to set read timeout on&lt;br/&gt;
Httpconnection directly. If you see a more elegant way of solving the problem,&lt;br/&gt;
give me a hint&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379819" author="becke@u.washington.edu" created="Mon, 20 Oct 2003 20:14:36 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Ah.  I see what you are doing.  This seems like a decent solution, nothing better comes to mind.  &lt;br/&gt;
To keep things consistent I think setSoTimeout(int) should still set the timeout on the socket, if &lt;br/&gt;
present.  The new Javadoc @link on setSoTimeout() should be changed to setSocketTimeout().  &lt;br/&gt;
Other than that I think it&amp;#39;s good to be committed.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379820" author="olegk" created="Thu, 23 Oct 2003 03:45:07 +0100"  >Follow-up patch 3 committed.&lt;br/&gt;
&lt;br/&gt;
I am planning to submit one more, hopefully the final, follow-up patch shortly&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379821" author="olegk" created="Thu, 23 Oct 2003 04:56:36 +0100"  >Created an attachment (id=8679)&lt;br/&gt;
Follow-up patch 4 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379822" author="olegk" created="Thu, 23 Oct 2003 05:05:02 +0100"  >Changelog:&lt;br/&gt;
- The patch removes those HttpClientParams parameters that are better served by&lt;br/&gt;
the HttpConnectionManagerParams&lt;br/&gt;
- MultiThreadedHttpConnectionManager specific parameters changed to take&lt;br/&gt;
advantage of the new preference architecture &lt;br/&gt;
&lt;br/&gt;
Do you think that the following parameters should be deprecated?&lt;br/&gt;
&lt;br/&gt;
MultiThreadedHttpConnectionManager#getMaxHostConnections&lt;br/&gt;
MultiThreadedHttpConnectionManager#setMaxHostConnections&lt;br/&gt;
MultiThreadedHttpConnectionManager#getMaxTotalConnections&lt;br/&gt;
MultiThreadedHttpConnectionManager#setMaxTotalConnections&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379823" author="becke@u.washington.edu" created="Fri, 24 Oct 2003 10:03:59 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
A few comments:&lt;br/&gt;
&lt;br/&gt;
- I think the connectionManagerTimeout should be left on the HttpClient.  The value is used by &lt;br/&gt;
HttpClient/HttpMethodDirector when retrieving connections and not directly by the connection &lt;br/&gt;
managers.  In fact this seems to be causing a compile error in HttpMethodDirector, which was &lt;br/&gt;
initially undetected by Eclipse for some reason.&lt;br/&gt;
- What happened to the soTimeout option?&lt;br/&gt;
&lt;br/&gt;
I agree MultiThreadedHttpConnectionManager maxHostConnections and maxTotalConnections &lt;br/&gt;
should be moved to preferences and deprecated.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379824" author="olegk" created="Sat, 25 Oct 2003 19:43:45 +0100"  >Created an attachment (id=8734)&lt;br/&gt;
Follow-up patch 4 (take 2)&lt;br/&gt;
</comment>
                    <comment id="12379825" author="olegk" created="Sat, 25 Oct 2003 19:46:44 +0100"  >&amp;gt; - What happened to the soTimeout option?&lt;br/&gt;
&lt;br/&gt;
Mike, I do not quite get what is the point of your concern hrere. Socket read&lt;br/&gt;
timeout has been moved to HttpConnectionManagerParams. I believe that is where&lt;br/&gt;
it should be. &lt;br/&gt;
&lt;br/&gt;
Let me know what you think about the new patch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379826" author="becke@u.washington.edu" created="Sun, 26 Oct 2003 01:22:58 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Perhaps I&amp;#39;m missing something but I don&amp;#39;t see the soTimeout option on the &lt;br/&gt;
HttpConnectionManagerParams.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379827" author="olegk" created="Sun, 26 Oct 2003 01:33:54 +0000"  >Mike, &lt;br/&gt;
HttpConnectionManagerParams inherits SO_TIMEOUT/TCP_NODELAY/SO_RCVBUF/SO_SNDBUF&lt;br/&gt;
parameters along with several others from HttpConnectionParams. Do you see any&lt;br/&gt;
problem with that?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379828" author="becke@u.washington.edu" created="Sun, 26 Oct 2003 02:03:58 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
You are quite right.  Somehow I seem to have missed that :)  I agree I think HttpConnectionParams &lt;br/&gt;
is the right place for soTimeout, et al.  The patch looks good to me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379829" author="olegk" created="Sun, 26 Oct 2003 17:57:28 +0000"  >Patch committed. It looks like the journey is finally over.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12333603">HTTPCLIENT-44</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12326715" name="ASF.LICENSE.NOT.GRANTED--config.patch" size="14026" author="becke@u.washington.edu" created="Tue, 16 Sep 2003 10:27:33 +0100" />
                    <attachment id="12326713" name="ASF.LICENSE.NOT.GRANTED--httpParams.patch" size="49486" author="becke@u.washington.edu" created="Tue, 9 Sep 2003 11:27:50 +0100" />
                    <attachment id="12326722" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="20303" author="olegk" created="Sat, 25 Oct 2003 19:43:45 +0100" />
                    <attachment id="12326721" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="17833" author="olegk" created="Thu, 23 Oct 2003 04:56:36 +0100" />
                    <attachment id="12326720" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="54031" author="olegk" created="Sat, 18 Oct 2003 00:24:43 +0100" />
                    <attachment id="12326719" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="51078" author="olegk" created="Mon, 13 Oct 2003 04:11:16 +0100" />
                    <attachment id="12326718" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="32973" author="olegk" created="Thu, 2 Oct 2003 21:58:50 +0100" />
                    <attachment id="12326717" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="32360" author="olegk" created="Mon, 22 Sep 2003 22:53:39 +0100" />
                    <attachment id="12326716" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="33729" author="olegk" created="Mon, 22 Sep 2003 18:14:44 +0100" />
                    <attachment id="12326714" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="59921" author="olegk" created="Thu, 11 Sep 2003 04:42:28 +0100" />
                    <attachment id="12326712" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="52097" author="olegk" created="Sat, 6 Sep 2003 21:27:20 +0100" />
                    <attachment id="12326711" name="ASF.LICENSE.NOT.GRANTED--prefs.patch" size="47485" author="olegk" created="Thu, 4 Sep 2003 05:15:49 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>15435</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 30 Aug 2003 21:43:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133186</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189268</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>