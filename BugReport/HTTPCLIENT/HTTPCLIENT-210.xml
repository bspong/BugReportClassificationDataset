<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:14:46 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-210/HTTPCLIENT-210.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-210] Exception handling in HttpClient requires redesign</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-210</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>When I use httpclient2.0-alpha3 and setTimeout(60000), after the specified &lt;br/&gt;
time, I would like to see InterruptedIOException thrown, but I got &lt;br/&gt;
HttpRecoverableException instead, which is pretty general. I would like to see &lt;br/&gt;
the original exception. Thanks</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: PC</environment>
            <key id="12333769">HTTPCLIENT-210</key>
            <summary>Exception handling in HttpClient requires redesign</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="laura@lwerner.org">Laura Werner</assignee>
                                <reporter username="xwhu_1999@yahoo.com">jen x</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 May 2003 04:37:37 +0100</created>
                <updated>Sun, 22 Apr 2007 08:10:23 +0100</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:23 +0100</resolved>
                            <version>2.0 Beta 1</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12380439" author="adrian@ephox.com" created="Tue, 13 May 2003 06:22:49 +0100"  >My suggestion for this is to add the ability to get the original exception (if&lt;br/&gt;
available) from HttpException, similar to the way that Java 1.4 can wrap&lt;br/&gt;
exceptions.  This way we:&lt;br/&gt;
&lt;br/&gt;
a. maintain backwards compatibility&lt;br/&gt;
b. make exception catching simple for the non-picky user (like it is currently)&lt;br/&gt;
c. allow users with more complex requirements to find out the information they need.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll do up an initial patch for this to show the changes to the exception&lt;br/&gt;
classes, but we&amp;#39;ll have to go through HttpClient and find all the cases where we&lt;br/&gt;
create a HttpException because of another exception and pass that through. &lt;br/&gt;
Simple to do with a decent IDE, but my HttpClient code is only in a decent IDE&lt;br/&gt;
when I&amp;#39;m at home so that step will have to wait.&lt;br/&gt;
&lt;br/&gt;
My other query is whether or not this should go into 2.0 or leave it for 2.1 -&lt;br/&gt;
should it be before or after beta 1?  I think we need to do beta 1 before&lt;br/&gt;
looking at anything but total catastrophic failure at the moment.</comment>
                    <comment id="12380440" author="adrian@ephox.com" created="Tue, 13 May 2003 06:43:55 +0100"  >Created an attachment (id=6332)&lt;br/&gt;
Initial patch to add capabilities to exception classes.&lt;br/&gt;
</comment>
                    <comment id="12380441" author="becke@u.washington.edu" created="Tue, 13 May 2003 11:38:12 +0100"  >Created an attachment (id=6336)&lt;br/&gt;
patch 2&lt;br/&gt;
</comment>
                    <comment id="12380442" author="becke@u.washington.edu" created="Tue, 13 May 2003 11:46:01 +0100"  >The patch above is an extension to Adrian&amp;#39;s original patch.  I got a little carried away, but I think &lt;br/&gt;
the changes are all for the better.  What I&amp;#39;ve changed:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- All subclasses of URIException have (Throwable) and (String, Throwable) constructors.&lt;br/&gt;
&amp;nbsp;- All exceptions created within HttpClient now use the Throwable constructors where appropriate.&lt;br/&gt;
&amp;nbsp;- A new test case has been created for these exceptions.&lt;br/&gt;
&amp;nbsp;- Basic Nestable support has been &amp;quot;borrowed&amp;quot; from commons-lang.  I moved a few classes over &lt;br/&gt;
from Lang to better support printing nested exceptions.  These classes have default access and &lt;br/&gt;
can be removed with no API changes if they are not wanted.&lt;br/&gt;
&lt;br/&gt;
Please take a look when you get a chance.&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
</comment>
                    <comment id="12380443" author="adrian@ephox.com" created="Tue, 13 May 2003 11:55:23 +0100"  >Gee, put something down for a moment and someone else goes and does all the hard&lt;br/&gt;
work. :)  Thanks for that Mike.&lt;br/&gt;
&lt;br/&gt;
Your patch looks good to me, my only question is whether or not it&amp;#39;s overkill to&lt;br/&gt;
pull in a bunch of stuff from lang to print the stack traces etc.  The original&lt;br/&gt;
use case certainly doesn&amp;#39;t require this but it is something that is nice when&lt;br/&gt;
debugging.  I would have left out the extra classes until there was a particular&lt;br/&gt;
need for them.  Maybe I&amp;#39;ve just been programming applets too long.  I&amp;#39;m&lt;br/&gt;
certainly not going to be upset either way.&lt;br/&gt;
&lt;br/&gt;
Thanks for doing all the hard work on this one Mike.</comment>
                    <comment id="12380444" author="becke@u.washington.edu" created="Tue, 13 May 2003 12:04:23 +0100"  >Hi Adrian,&lt;br/&gt;
&lt;br/&gt;
I hope I didn&amp;#39;t step on your toes with this one.&lt;br/&gt;
&lt;br/&gt;
Yes, the classes from Lang may be a bit of overkill.  I&amp;#39;m happy to remove them if that&amp;#39;s the &lt;br/&gt;
consensus.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380445" author="adrian@ephox.com" created="Tue, 13 May 2003 12:08:01 +0100"  >Hi Mike,&lt;br/&gt;
No stepping on toes here - I wish more people would jump in and clean up things&lt;br/&gt;
on my todo list. :)&lt;br/&gt;
&lt;br/&gt;
Let&amp;#39;s see what others have to say on the lang stuff, it is conceptually very&lt;br/&gt;
nice, you&amp;#39;ve done well.&lt;br/&gt;
&lt;br/&gt;
Adrian.</comment>
                    <comment id="12380446" author="olegk" created="Tue, 13 May 2003 23:03:03 +0100"  >I really like the patch and really like the concept of nestable exceptions. But &lt;br/&gt;
somehow it does not feel right &amp;#x91;borrowing&amp;#x92; classes from another Commons &lt;br/&gt;
project. Can&amp;#x92;t we have something really lightweight for the time being and then &lt;br/&gt;
probably introduce commons-lang as a dependency as of 2.1 release and on?&lt;br/&gt;
&lt;br/&gt;
public class ChainedException extends Exception {&lt;br/&gt;
private Throwable cause = null;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public ChainedException() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public ChainedException(String message) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(message);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public ChainedException(String message, Throwable cause) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(message);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.cause = cause;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public Throwable getCause() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return cause;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public void printStackTrace() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cause != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println(&amp;quot;Caused by:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cause.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public void printStackTrace(java.io.PrintStream ps) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.printStackTrace(ps);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cause != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ps.println(&amp;quot;Caused by:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cause.printStackTrace(ps);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public void printStackTrace(java.io.PrintWriter pw) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.printStackTrace(pw);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cause != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;Caused by:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cause.printStackTrace(pw);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380447" author="oglueck" created="Tue, 13 May 2003 23:07:09 +0100"  >Maybe you can just add a new Exception class that extends&lt;br/&gt;
HttpRecoverableException. The user can then catch this particular type if he wants.</comment>
                    <comment id="12380448" author="becke@u.washington.edu" created="Wed, 14 May 2003 00:03:13 +0100"  >I agree, stealing and modifying some classes from Lang is a little nasty.  In&lt;br/&gt;
this case though I think it&amp;#39;s a decent solution. My main rationale for this&lt;br/&gt;
choice was to avoid having to implement something from scratch.  I feel that we&lt;br/&gt;
might as well take advantage of something that already works.&lt;br/&gt;
&lt;br/&gt;
To ensure that there are no long term side-effects these classes have been made&lt;br/&gt;
package-protected.  If we want to use Lang in 2.1 we could make the changes with&lt;br/&gt;
no API modifications to URIException, other than the Nestable interface. The use&lt;br/&gt;
of the Lang classes is not meant to be a replacement but just a behind the&lt;br/&gt;
scenes fix until we can use the real deal.&lt;br/&gt;
&lt;br/&gt;
If we want to keep this functionality, but without the other classes, we could&lt;br/&gt;
just move the handling into URIException and delete Nestable, NestableDelegate&lt;br/&gt;
and ExceptionUtils.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m pretty flexible on this one.  If we like the changes made to URIException&lt;br/&gt;
and the subclasses, changing or removing how it&amp;#39;s implemented is pretty easy. &lt;br/&gt;
What do you think?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380449" author="olegk" created="Wed, 14 May 2003 00:20:36 +0100"  >Mike,&lt;br/&gt;
I personally can live with either. Let&amp;#39;s hear what Jandalf has to say. If he &lt;br/&gt;
confirms that copying files from another project would not be considered bad &lt;br/&gt;
mannered, I suggest we just keep the files as they are. If such an action would &lt;br/&gt;
be considered offensive, though, let&amp;#39;s just keep stuff as simple as possible. &lt;br/&gt;
The ChainedException class I posted above has served me well in several &lt;br/&gt;
applications. In most cases such a lightweight exception chaining mechanism is &lt;br/&gt;
quite sufficient. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380450" author="jsdever@apache.org" created="Thu, 15 May 2003 00:38:03 +0100"  >Lets try and clarify the purpose of all this.  The bug reporter either wants :&lt;br/&gt;
A) programatic notification with access to the IIOE object, or&lt;br/&gt;
B) a text output of the IIOE message&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not sure what the reporter really wants, but with A) you can get B), plus&lt;br/&gt;
you can modify flow control and specificly act on the IIOE.  Even if the&lt;br/&gt;
reporter only wants B), we should be programming to allow for A) for the most&lt;br/&gt;
flexibility.&lt;br/&gt;
&lt;br/&gt;
The posted patch and the exception chaining idea really does not help with A). &lt;br/&gt;
In particular the IIOE has a bytesTransferred field that the programmer may need&lt;br/&gt;
direct access to as part of their flow control and exception handling logic.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not against importing parts of Lang, or adding another package dependency,&lt;br/&gt;
but I don&amp;#39;t feel that the proposed solution fully addresses the problem.&lt;br/&gt;
&lt;br/&gt;
There are some other possibilities:&lt;br/&gt;
1) As Odi suggested, we could extend HTTPRE.  This addresses A), and is&lt;br/&gt;
interface perserving.  Its a bit of a kludge because there may be many other&lt;br/&gt;
exception that we may need to wrap, all which add more classes.&lt;br/&gt;
2) We could just throw out the IIOE (which is trivial solution).  But this will&lt;br/&gt;
cause users to modify code.  Its not too late for that, but if there are other&lt;br/&gt;
expcetions that need to be treated the same way in the future, then it means&lt;br/&gt;
more user code changes.  This would be a fragile approach.&lt;br/&gt;
3) We could create a particular wrapper for the IIOE that extends&lt;br/&gt;
RuntimeException.  This is similar to 1), but has semantic differences for flow&lt;br/&gt;
control, and requires that the user have a robust exception handling strategy.</comment>
                    <comment id="12380451" author="olegk" created="Thu, 15 May 2003 01:38:20 +0100"  >Jeff,&lt;br/&gt;
&lt;br/&gt;
I just want to make sure that we are talking about the same thing. &lt;br/&gt;
&lt;br/&gt;
1) I think the bug reporter clearly wants scenario A. &lt;br/&gt;
&lt;br/&gt;
2) The IIOE instance the user may want to act upon would be nested in the&lt;br/&gt;
HTTPRE. All that the user would have to do is to get the original root exeption&lt;br/&gt;
upon receiving HTTPRE and to test if it is an instance of IIOE class. I believe&lt;br/&gt;
that it the essense of the exception chaining&lt;br/&gt;
&lt;br/&gt;
I do not quite see why you think that the patch does not address the problem.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380452" author="jsdever@apache.org" created="Thu, 15 May 2003 03:03:36 +0100"  >So (using Oleg&amp;#39;s ChainedException class) you dont mind seeing user code that&lt;br/&gt;
looks like this:&lt;br/&gt;
&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;httpclient.execute(httpmethod);&lt;br/&gt;
} catch (HttpRecoverableException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Throwable cause = e.getCause();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (cause instanceOf InterruptedIOException) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InterruptedIOException iioe = (InterruptedIOException) cause;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do somthing with iioe.bytesTransferred&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (cause instanceOf SomeOtherGawdAwefulException) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SomeOtherGawdAwefulException sogae = &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(SomeOtherGawdAwefulException) cause;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do something with sogae&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do something by default&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
When it should look like this:&lt;br/&gt;
&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;httpclient.execute(httpmethod);&lt;br/&gt;
} catch InterruptedIOException) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do somthing with iioe.bytesTransferred&lt;br/&gt;
} catch (SomeOtherGawdAwefulException sogae) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do something with sogae&lt;br/&gt;
} catch (HttpRecoverableException hre)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//do somthing by default&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
There are some variations on this, but I don&amp;#39;t see it getting a lot cleaner&lt;br/&gt;
(unless I&amp;#39;m missing somthing again).</comment>
                    <comment id="12380453" author="olegk" created="Thu, 15 May 2003 03:37:30 +0100"  >Actually I do not. The problem is that HttpClient#executeMethod may not throw&lt;br/&gt;
SomeOtherGawdAwefulException (unless it&amp;#39;s a runtime exception or a sub class of&lt;br/&gt;
either IOException or HttpException). The only way to get hold of the original&lt;br/&gt;
exception along with all its properties is to chain it. The alternative would be&lt;br/&gt;
to implement all the possible exception types as sub classes of HttpException,&lt;br/&gt;
which is in my opinion is as ugly. Exception chaining is the most flexible way&lt;br/&gt;
of dealing with heterogeneous exceptions, and flexibility usually carries a&lt;br/&gt;
price tag. &lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12380454" author="olegk" created="Fri, 13 Jun 2003 03:10:16 +0100"  >HttpClient is in need of careful revision of the entire exception handling&lt;br/&gt;
logic. There has to be a clear distinction between protocol exceptions&lt;br/&gt;
(malformed request, malformed response, unsupported protocol version, etc) and&lt;br/&gt;
transport exceptions (read/write failures, read/write timeouts). Likewise&lt;br/&gt;
distinction should be made between recoverable and non-recoverable transport&lt;br/&gt;
exceptions.</comment>
                    <comment id="12380455" author="laura@lwerner.org" created="Sun, 13 Jul 2003 11:02:42 +0100"  >I&amp;#39;m attaching a preliminary patch for this, following Oleg&amp;#39;s proposal on the&lt;br/&gt;
mailing list.  Here are some areas where I&amp;#39;d like feedback:&lt;br/&gt;
&lt;br/&gt;
- Is AuthenticationException too broad?  Should there be different exceptions for:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Incorrect credentials / password / login / whatever, vs.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Other problem: no such provider, unknown auth type, ..&lt;br/&gt;
&lt;br/&gt;
- I added an HttpInterruptedException for cases where client code tells us to&lt;br/&gt;
abort a transaction.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Should I leave this out until we actually add the abort code?&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- Should it be called HttpAbortedException instead?  Or something else?&lt;br/&gt;
&lt;br/&gt;
- I&amp;#39;m starting to wonder if all these classes really need &amp;quot;Http&amp;quot; at the&lt;br/&gt;
beginning of their names.  HttpException definitely does, for compatibility&lt;br/&gt;
reasons if nothing else.  But could the others just be ProtocolException,&lt;br/&gt;
TransportException, etc?  There&amp;#39;s a chance for a collision if a Java file uses&lt;br/&gt;
two different network libraries that both have a ProtocolException, but it&lt;br/&gt;
doesn&amp;#39;t seem to likely.&lt;br/&gt;
&lt;br/&gt;
- I added a primitive exception chaining mechanism to HttpTransportException. &lt;br/&gt;
Right now it wraps any Throwable.  Oleg had suggested wrapping just IOException.&lt;br/&gt;
&amp;nbsp;Any preferences?  Also, how fancy does the chaining mechanism need to be?  I&amp;#39;m&lt;br/&gt;
happy with just &amp;quot;getCause()&amp;quot;, but if people want me to I could add some of the&lt;br/&gt;
other exception chain accessors that commons-lang uses in its classes.&lt;br/&gt;
&lt;br/&gt;
- I haven&amp;#39;t yet gone through and wrapped all of the IOExceptions and&lt;br/&gt;
SocketExceptions inside HttpTransportException.  I want to get the exception&lt;br/&gt;
hierarchy right first.&lt;br/&gt;
&lt;br/&gt;
- I also haven&amp;#39;t cleaned up &amp;quot;throws&amp;quot; and &amp;quot;@throws&amp;quot; declarations yet.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s Oleg&amp;#39;s proposal, from an email sent around July 6, 2003.  On 7/7/2003&lt;br/&gt;
Mike suggested having HttpException extend IOException, which is what I implemented.&lt;br/&gt;
&lt;br/&gt;
Oleg wrote:&lt;br/&gt;
2) Go elaborate&lt;br/&gt;
-----------------&lt;br/&gt;
&amp;nbsp;org.apache.commons.lang.exception.NestableException (or equivalent)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;+-- org.apache.commons.httpclient.HttpException (Root exception)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+-- ...httpclient.HttpProtocolException (Root protocol exception)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  +-- ...httpclient.cookie.MalformedCookieException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  +-- ...httpclient.auth.AuthenticationException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  +-- ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+-- ...httpclient.HttpTransportException        |   (should &amp;#39;wrap&amp;#39;&lt;br/&gt;
java.io.IOException)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+-- ...httpclient.RecoverableHttpException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|  +-- ...httpclient.TimeoutHttpException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|     |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|     +-- ...httpclient.ConnectTimeoutHttpException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|     |&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|     +-- ...httpclient.IOTimeoutHttpException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+-- ...httpclient.InterruptedHttpException&lt;br/&gt;
&lt;br/&gt;
Pros:&lt;br/&gt;
&amp;nbsp;- flexibility&lt;br/&gt;
&amp;nbsp;- clarity&lt;br/&gt;
Cons:&lt;br/&gt;
&amp;nbsp;- complexity&lt;br/&gt;
&amp;nbsp;- most likely requires an external dependency&lt;br/&gt;
In my opinion we MUST get exception handling right before we do anything&lt;br/&gt;
else. Exception handling is a foundation of any flexible architecture.&lt;br/&gt;
I personally can live with either of these two approaches. If you see&lt;br/&gt;
other alternatives, please share your ideas &lt;br/&gt;
&lt;br/&gt;
Mike wrote:&lt;br/&gt;
As an addendum to my previous email, it would also be possible to use Oleg&amp;#39;s #2&lt;br/&gt;
option and just change HttpException to extend IOException. This would also&lt;br/&gt;
allow us to keep API compatability.  If this was done we could remove the throws&lt;br/&gt;
IOException from HttpClient.executeMethod(). &lt;br/&gt;
&lt;br/&gt;
Oleg replied:&lt;br/&gt;
Mike&amp;#39;s suggestion to extend IOException does seem to be the best option that we&lt;br/&gt;
have right now. It provides a (relatively) easy migration path for 2.0 users&lt;br/&gt;
(API compatibility still does not save them from having to rethink their&lt;br/&gt;
exception handling framework), while giving us enough flexibility to get things&lt;br/&gt;
done (more or less) right. </comment>
                    <comment id="12380456" author="laura@lwerner.org" created="Sun, 13 Jul 2003 11:03:34 +0100"  >Created an attachment (id=7276)&lt;br/&gt;
Initial patch to rework exception hierarchy for HttpClient 2.1&lt;br/&gt;
</comment>
                    <comment id="12380457" author="olegk" created="Sun, 13 Jul 2003 19:43:08 +0100"  >I believe Mike&amp;#39;s response to Laura should be included into the bug report&lt;br/&gt;
--------------------------------------------------------------------------&lt;br/&gt;
Michael Becke Wrote:&lt;br/&gt;
&lt;br/&gt;
Very nice work Laura.  Thank you for taking the initiative on this one. &lt;br/&gt;
&amp;nbsp;&amp;nbsp;Please see the in-lined comments below.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I&amp;#39;m attaching a preliminary patch for this, following Oleg&amp;#39;s proposal &lt;br/&gt;
&amp;gt; on the&lt;br/&gt;
&amp;gt; mailing list.  Here are some areas where I&amp;#39;d like feedback:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; - Is AuthenticationException too broad?  Should there be different &lt;br/&gt;
&amp;gt; exceptions for:&lt;br/&gt;
&amp;gt;   - Incorrect credentials / password / login / whatever, vs.&lt;br/&gt;
&amp;gt;   - Other problem: no such provider, unknown auth type, ..&lt;br/&gt;
&lt;br/&gt;
Possibly.  I could see this extra information as quite useful.  My only &lt;br/&gt;
worry would be that we have too many exception types.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - I added an HttpInterruptedException for cases where client code &lt;br/&gt;
&amp;gt; tells us to&lt;br/&gt;
&amp;gt; abort a transaction.&lt;br/&gt;
&amp;gt;   - Should I leave this out until we actually add the abort code?&lt;br/&gt;
&amp;gt;   - Should it be called HttpAbortedException instead?  Or something &lt;br/&gt;
&amp;gt; else?&lt;br/&gt;
&lt;br/&gt;
I think we will probably need it but I would say to leave it out for &lt;br/&gt;
now.  We can always add it when the time comes.&lt;br/&gt;
&lt;br/&gt;
I think HttpAbortedException is better.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - I&amp;#39;m starting to wonder if all these classes really need &amp;quot;Http&amp;quot; at the&lt;br/&gt;
&amp;gt; beginning of their names.  HttpException definitely does, for &lt;br/&gt;
&amp;gt; compatibility&lt;br/&gt;
&amp;gt; reasons if nothing else.  But could the others just be &lt;br/&gt;
&amp;gt; ProtocolException,&lt;br/&gt;
&amp;gt; TransportException, etc?  There&amp;#39;s a chance for a collision if a Java &lt;br/&gt;
&amp;gt; file uses&lt;br/&gt;
&amp;gt; two different network libraries that both have a ProtocolException, &lt;br/&gt;
&amp;gt; but it&lt;br/&gt;
&amp;gt; doesn&amp;#39;t seem to likely.&lt;br/&gt;
&lt;br/&gt;
I say lose the Http.  It seems a little redundant.  No worries about &lt;br/&gt;
name collision.  That&amp;#39;s the beauty of packages.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - I added a primitive exception chaining mechanism to &lt;br/&gt;
&amp;gt; HttpTransportException.&lt;br/&gt;
&amp;gt; Right now it wraps any Throwable.  Oleg had suggested wrapping just &lt;br/&gt;
&amp;gt; IOException.&lt;br/&gt;
&amp;gt;  Any preferences?  Also, how fancy does the chaining mechanism need to &lt;br/&gt;
&amp;gt; be?  I&amp;#39;m&lt;br/&gt;
&amp;gt; happy with just &amp;quot;getCause()&amp;quot;, but if people want me to I could add &lt;br/&gt;
&amp;gt; some of the&lt;br/&gt;
&amp;gt; other exception chain accessors that commons-lang uses in its classes.&lt;br/&gt;
&lt;br/&gt;
I think we should push the cause all the way up to the HttpException &lt;br/&gt;
level.  Nestable exceptions occur in other places than just IO.  Your &lt;br/&gt;
TODO example of NTLM IllegalBlockSize is a good one.  I imagine there &lt;br/&gt;
will be a few involving URIExceptions as well.&lt;br/&gt;
&lt;br/&gt;
I think leaving just getCause() for now is fine.  The most important &lt;br/&gt;
part is getting the hierarchy right.  We can add bells and whistles at &lt;br/&gt;
a later time.&lt;br/&gt;
</comment>
                    <comment id="12380458" author="olegk" created="Sun, 13 Jul 2003 19:49:25 +0100"  >Laura, Mike,&lt;br/&gt;
I just realized that HttpConnection#handleException(IOException) method should&lt;br/&gt;
be updated to take advantage of the new exception handling features, such as&lt;br/&gt;
nested exceptions. Besides, do we really have to throw plain IOException there?&lt;br/&gt;
I believe it should be rethrown at least as HttpTransportException.&lt;br/&gt;
&lt;br/&gt;
Cheers&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380459" author="laura@lwerner.org" created="Mon, 14 Jul 2003 04:04:51 +0100"  >&amp;gt; Besides, do we really have to throw plain IOException there?&lt;br/&gt;
&amp;gt; I believe it should be rethrown at least as HttpTransportException.&lt;br/&gt;
&lt;br/&gt;
Good question.  Now that the easy part is (almost) done, I was starting to think&lt;br/&gt;
about what kinds of exceptions the HttpClient library should through.  Even&lt;br/&gt;
though it&amp;#39;s a big change, I think we should probably thrown *only* HttpException&lt;br/&gt;
and its subclasses (plus RuntimeException subclasses like&lt;br/&gt;
IllegalStateException).  If some of the methods still throw raw IOExceptions, it&lt;br/&gt;
kind of defeats the purpose of having HttpTransportException in the first place.&lt;br/&gt;
&lt;br/&gt;
The spot where I have misgivings are the methods that currently throw only&lt;br/&gt;
IOException.  All of these would have to be wrapped with TransportException. &lt;br/&gt;
(We can probably add a utility method to do the wrapping.)  Even though this is&lt;br/&gt;
a pain, it makes the client usage simpler:&lt;br/&gt;
&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpClient.executeMethod(...);&lt;br/&gt;
} catch (HttpException ex) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// It broke&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
If someone wants to distinguish specific problems, they can do:&lt;br/&gt;
&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpClient.executeMethod(...);&lt;br/&gt;
} catch (HttpTransportException ex) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// I/O problem.  Tell the sysadmin or whatever.&lt;br/&gt;
} catch (HttpProtocolException ex) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// Report this to the user&lt;br/&gt;
} catch (HttpException ex) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;// It just plain broke&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
There are a few caveats:&lt;br/&gt;
- Existing code will have to be changed.  Most client code currently catches&lt;br/&gt;
both HttpException and IOException.  The compiler will now say &amp;quot;IOException is&lt;br/&gt;
not thrown in try block&amp;quot; and issue an error or warning (I forget which).  &lt;br/&gt;
- The model is slightly complicated: you have to remember to catch HttpException&lt;br/&gt;
last, for example.  But I think compilers catch this too.&lt;br/&gt;
- There are rather a lot of exception classes, which is both a plus and a minus.&lt;br/&gt;
&amp;nbsp;It&amp;#39;s more for a client to learn.  But they&amp;#39;re not forced to deal with all of&lt;br/&gt;
the exceptions; they can just catch the ones that need special treatment and&lt;br/&gt;
then treat all the others as generic HttpExceptions.&lt;br/&gt;
&lt;br/&gt;
Does this all make sense?  I&amp;#39;m scared to make this big a change without lots of&lt;br/&gt;
feedback from other developers and from clients.&lt;br/&gt;
</comment>
                    <comment id="12380460" author="laura@lwerner.org" created="Mon, 14 Jul 2003 04:49:20 +0100"  >I&amp;#39;m attaching another patch.  The big changes are:&lt;br/&gt;
- Renamed most classes to remove the initial &amp;quot;Http&amp;quot;.  I still want more feedback&lt;br/&gt;
on this.  It&amp;#39;s easy enough to change back.  (Gotta love the Eclipse refactoring&lt;br/&gt;
tools!)&lt;br/&gt;
&lt;br/&gt;
- Moved wrapped exception &amp;quot;cause&amp;quot; from TransportException to HttpException&lt;br/&gt;
&lt;br/&gt;
- Provided more wrapping functionality to parallel the methods that were added&lt;br/&gt;
to Throwable in JDK 1.4.  I haven&amp;#39;t tested these yet, though.&lt;br/&gt;
&lt;br/&gt;
- Better JavaDoc for exception classes.&lt;br/&gt;
&lt;br/&gt;
Once people have a chance to review this and give feedback on my last comment,&lt;br/&gt;
I&amp;#39;ll start changing all the places where the library throws exceptions.</comment>
                    <comment id="12380461" author="laura@lwerner.org" created="Mon, 14 Jul 2003 04:50:12 +0100"  >Created an attachment (id=7277)&lt;br/&gt;
HttpClient 2.1 exception refactoring, take 2&lt;br/&gt;
</comment>
                    <comment id="12380462" author="olegk" created="Mon, 14 Jul 2003 06:09:56 +0100"  >Laura,&lt;br/&gt;
I&amp;#39;ll just throw some ideas at you, but I am not 100% sure that what I am about&lt;br/&gt;
to suggest is feasible. So, take it with a grain of salt.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Good question.  Now that the easy part is (almost) done, I was starting to think&lt;br/&gt;
&amp;gt; about what kinds of exceptions the HttpClient library should through.  Even&lt;br/&gt;
&amp;gt; though it&amp;#39;s a big change, I think we should probably thrown *only* HttpException&lt;br/&gt;
&amp;gt; and its subclasses (plus RuntimeException subclasses like&lt;br/&gt;
&amp;gt; IllegalStateException).  If some of the methods still throw raw IOExceptions, it&lt;br/&gt;
&amp;gt; kind of defeats the purpose of having HttpTransportException in the first place.&lt;br/&gt;
&lt;br/&gt;
I whole-heartedly agree. All IOExceptions should be wrapped in&lt;br/&gt;
HttpTransportException, otherwise the whole exercise does not make sense in the&lt;br/&gt;
very first place. In the future (3.0 release) we might even think about changing&lt;br/&gt;
the super class of HttpException from IOException to Exception and completely&lt;br/&gt;
doing away with IOExceptions in HttpClient#execute &amp;amp; HttpMethod#execute methods. &lt;br/&gt;
&lt;br/&gt;
The overall philosophy should be as simple as that:&lt;br/&gt;
&lt;br/&gt;
* HttpProtocolException: Something is wrong on the server side. Contact&lt;br/&gt;
administrator of the target HTTP server.&lt;br/&gt;
* HttpTransportException: If HttpRecoverableException, simply retry. If not,&lt;br/&gt;
contact network administrator.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The spot where I have misgivings are the methods that currently throw only&lt;br/&gt;
&amp;gt; IOException.  All of these would have to be wrapped with TransportException. &lt;br/&gt;
&amp;gt; (We can probably add a utility method to do the wrapping.)  Even though this is&lt;br/&gt;
&amp;gt; a pain, it makes the client usage simpler:&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s my plan:&lt;br/&gt;
&lt;br/&gt;
* HttpMethodBase deals ONLY with HttpExceptions. All protected and private&lt;br/&gt;
methods that currently throw IOExceptions will have to be changed to throw&lt;br/&gt;
HttpTransportException instead. All public methods that declare IOException in&lt;br/&gt;
their &amp;#39;throws&amp;#39; clause would remain unchanged BUT in fact would not throw&lt;br/&gt;
IOException. That should take care of the API compatibility issue.&lt;br/&gt;
* HttpConnection catches ALL IOExceptions and re-throws them as&lt;br/&gt;
HttpTransportException&lt;br/&gt;
&lt;br/&gt;
This approach is simple, and I personally like the beauty of simplicity (at&lt;br/&gt;
least when it comes to software engineering)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - There are rather a lot of exception classes, which is both a plus and a minus.&lt;br/&gt;
&amp;gt;  It&amp;#39;s more for a client to learn.  But they&amp;#39;re not forced to deal with all of&lt;br/&gt;
&amp;gt; the exceptions; they can just catch the ones that need special treatment and&lt;br/&gt;
&amp;gt; then treat all the others as generic HttpExceptions.&lt;br/&gt;
&lt;br/&gt;
I am not concerned about it at all. They can still do it like that.&lt;br/&gt;
&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;HttpClient.executeMethod(...);&lt;br/&gt;
} catch (IOException ex) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Oopsie...&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;System.exit(1);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Does this all make sense?  I&amp;#39;m scared to make this big a change without lots of&lt;br/&gt;
&amp;gt; feedback from other developers and from clients.&lt;br/&gt;
&lt;br/&gt;
I suggest that we should not be doing it in one giant leap. Let&amp;#39;s fix things in&lt;br/&gt;
a series of shorter dashes. Let&amp;#39;s commit what you have got so far (once it is&lt;br/&gt;
approved by Mike), and then we can move on to fixing the internals.&lt;br/&gt;
&lt;br/&gt;
I have got to hit the sack. It&amp;#39;s Monday here already.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380463" author="adrian@ephox.com" created="Mon, 14 Jul 2003 06:47:13 +0100"  >Laura, Oleg, Mike, et al,&lt;br/&gt;
Generally I like the way things are sounding with this, but having had a recent experience trying to &lt;br/&gt;
track down the cause of an exception in Xerces I&amp;#39;m really not so keen on ever seeing a nested &lt;br/&gt;
exception again - particularly if it&amp;#39;s only added for conceptual niceness.&lt;br/&gt;
&lt;br/&gt;
In particular, I don&amp;#39;t like the idea of wrapping every IOException in a HttpTransportException, &lt;br/&gt;
instead I would have dropped HttpTransportException and used IOException itself.  The few &lt;br/&gt;
IOExceptions that are recoverable would have to be wrapped in a HttpRecoverableException but &lt;br/&gt;
the vast majority of exceptions that people would be trying to track down the source of, would be &lt;br/&gt;
plain ol&amp;#39; unwrapped exceptions.&lt;br/&gt;
&lt;br/&gt;
It also seems to fit better with my view on exception handling that you don&amp;#39;t wrap exceptions when &lt;br/&gt;
possible.  In essence, an exception is thrown and works its way back up the stack until someone is &lt;br/&gt;
prepared to deal with it.  That doesn&amp;#39;t work so well when you consider throwing a different &lt;br/&gt;
exception as &amp;quot;dealing with it&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t really mind either way, but I found it incredibly difficult to have to wade through long stack &lt;br/&gt;
traces *and* work out which exception actually occurred and which was just created because the &lt;br/&gt;
API didn&amp;#39;t allow the original exception to be thrown.  In fact, I wound up having to grab the source &lt;br/&gt;
to Xerces and rewrite parts of it&amp;#39;s exception handling to work out what was going on (for the &lt;br/&gt;
record, it was my fault).&lt;br/&gt;
&lt;br/&gt;
Sorry for coming to the party late, I&amp;#39;m happy to be ignored on this and I forfeit all rights to &lt;br/&gt;
complain. :)</comment>
                    <comment id="12380464" author="becke@u.washington.edu" created="Mon, 14 Jul 2003 07:07:06 +0100"  >&amp;gt;I whole-heartedly agree. All IOExceptions should be wrapped in&lt;br/&gt;
&amp;gt; HttpTransportException, otherwise the whole exercise does not make sense in the&lt;br/&gt;
&amp;gt; very first place. In the future (3.0 release) we might even think about changing&lt;br/&gt;
&amp;gt; the super class of HttpException from IOException to Exception and completely&lt;br/&gt;
&amp;gt; doing away with IOExceptions in HttpClient#execute &amp;amp; HttpMethod#execute methods. &lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; The overall philosophy should be as simple as that:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; * HttpProtocolException: Something is wrong on the server side. Contact&lt;br/&gt;
&amp;gt; administrator of the target HTTP server.&lt;br/&gt;
&amp;gt; * HttpTransportException: If HttpRecoverableException, simply retry. If not,&lt;br/&gt;
&amp;gt; contact network administrator.&lt;br/&gt;
&lt;br/&gt;
Wrapping all exceptions certainly makes things cleaner.  Though, to echo Adrian&amp;#39;s thoughts, I &lt;br/&gt;
think we should try to add value when we wrap exceptions.  For example I&amp;#39;m not sure wrapping &lt;br/&gt;
an IOException at HttpConnection.write() adds any valuable information.  Also, the input/output &lt;br/&gt;
streams of HttpConnection will continue to throw &lt;br/&gt;
IOExceptions.&lt;br/&gt;
&lt;br/&gt;
We could certainly remove the subclassing of IOException for 3.0.  We should probably make &lt;br/&gt;
some note of it in the HttpException JavaDocs.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Here&amp;#39;s my plan:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; * HttpMethodBase deals ONLY with HttpExceptions. All protected and private&lt;br/&gt;
&amp;gt; methods that currently throw IOExceptions will have to be changed to throw&lt;br/&gt;
&amp;gt; HttpTransportException instead. All public methods that declare IOException in&lt;br/&gt;
&amp;gt; their &amp;#39;throws&amp;#39; clause would remain unchanged BUT in fact would not throw&lt;br/&gt;
&amp;gt; IOException. That should take care of the API compatibility issue.&lt;br/&gt;
&amp;gt; * HttpConnection catches ALL IOExceptions and re-throws them as&lt;br/&gt;
&amp;gt; HttpTransportException&lt;br/&gt;
&lt;br/&gt;
I think places where only IOExceptions are thrown can be replaced with HttpExceptions if &lt;br/&gt;
necessary.  This should not cause API problems.  The only issue would be if both an IOException &lt;br/&gt;
and an HttpException were thrown.  This would cause problems, as Laura mentioned, if &lt;br/&gt;
someone is catching both.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I suggest that we should not be doing it in one giant leap. Let&amp;#39;s fix things in&lt;br/&gt;
&amp;gt; a series of shorter dashes. Let&amp;#39;s commit what you have got so far (once it is&lt;br/&gt;
&amp;gt; approved by Mike), and then we can move on to fixing the internals.&lt;br/&gt;
&lt;br/&gt;
I think we&amp;#39;re almost ready to go.  I would like to wait another day or so to see if others have any &lt;br/&gt;
comments.&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
</comment>
                    <comment id="12380465" author="laura@lwerner.org" created="Mon, 14 Jul 2003 07:21:26 +0100"  >Here&amp;#39;s patch #3.  I added a test for the exception nesting and made the&lt;br/&gt;
HttpException constructor and printStackTrace methods work correctly.  When&lt;br/&gt;
running under JDK 1.4, it now passes the &amp;quot;cause&amp;quot; parameter via the new&lt;br/&gt;
Throwable.initCause method and lets Throwable take care of printing stack&lt;br/&gt;
traces.  If on JDK 1.3 or earlier, the HttpException.printStackTrace methods&lt;br/&gt;
approximate the JDK 1.4 behavior.&lt;br/&gt;
&lt;br/&gt;
Adrian: Does having printStackTrace also print out all of the nested exceptions&lt;br/&gt;
take care of some of your objections?  It seems to make the debugging quite a&lt;br/&gt;
bit easier because you can see the whole exception trace all the way back to the&lt;br/&gt;
root cause.  Now I need to go do this to our big system at work. :-)</comment>
                    <comment id="12380466" author="laura@lwerner.org" created="Mon, 14 Jul 2003 07:22:15 +0100"  >Created an attachment (id=7280)&lt;br/&gt;
refactoring, try #3&lt;br/&gt;
</comment>
                    <comment id="12380467" author="adrian@ephox.com" created="Mon, 14 Jul 2003 07:54:36 +0100"  >Printing out the cause stack trace is a bare minimum for being able to debug, but it is still really &lt;br/&gt;
difficult to sort through all that mess - particularly if you wind up with a couple of non-fatal &lt;br/&gt;
exceptions that build up to a fatal one (for HttpClient that&amp;#39;s likely to be connections to multiple &lt;br/&gt;
servers or retrying the connection).  The output winds up being pages and pages of useless stack &lt;br/&gt;
traces.&lt;br/&gt;
&lt;br/&gt;
In some cases of course wrapping exceptions makes a lot of sense, I&amp;#39;d just suggest using the &lt;br/&gt;
original IOException instead of wrapping it in a TransportException.  If I were to propose a rule of &lt;br/&gt;
thumb, I would imagine it would be:&lt;br/&gt;
&lt;br/&gt;
BAD:&lt;br/&gt;
catch (xxxException e) {&lt;br/&gt;
&amp;nbsp;throw new yyyException(e.getMessage(), e);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
OKAY:&lt;br/&gt;
catch (xxxException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;throw new yyyException(&amp;quot;Some informative error message that fits the situation better than the &lt;br/&gt;
original message&amp;quot;, e);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
So essentially, if the most appropriate/useful exception message is the one that came with the &lt;br/&gt;
original exception you should just throw the original exception, otherwise wrap the exception and &lt;br/&gt;
provide a more informative message.&lt;br/&gt;
&lt;br/&gt;
There are obvious cases where that guideline falls down (like the exceptions that can be thrown by &lt;br/&gt;
JCE in NTLM but the API requires them to be dealt with).&lt;br/&gt;
&lt;br/&gt;
As I said though, it&amp;#39;s not a huge issue for me, just something that should be considered when &lt;br/&gt;
thinking about how userfriendly our exception policy is.&lt;br/&gt;
&lt;br/&gt;
Thanks for the good work on this - I haven&amp;#39;t had time to look into it much but it definitely feels &lt;br/&gt;
like a much better exception API already.</comment>
                    <comment id="12380468" author="olegk" created="Tue, 15 Jul 2003 03:19:59 +0100"  >Adrian,&lt;br/&gt;
I do not why, but I LOVE nested exceptions. Probably it is due to the stigma of&lt;br/&gt;
having dealt a lot with EJBs. I remember those days of misery when Websphere App&lt;br/&gt;
Server 4.0.x used to print a completely useless stack trace of EJBException&lt;br/&gt;
without giving me even a hint at what had caused the EJBException in the first&lt;br/&gt;
place. The day the problem was fixed with one of the WAS service releases was&lt;br/&gt;
one of the happiest days in my life.&lt;br/&gt;
&lt;br/&gt;
Regardless of what one may think of nestable exceptions, Laura&amp;#39;s patch is a step&lt;br/&gt;
in the right direction. I think we should apply the patch and address remaining&lt;br/&gt;
concerned through a series of incremental patches</comment>
                    <comment id="12380469" author="adrian@ephox.com" created="Tue, 15 Jul 2003 05:33:04 +0100"  >Oleg,&lt;br/&gt;
I&amp;#39;d have no objections to committing the patch it is a very definite improvement.&lt;br/&gt;
&lt;br/&gt;
As for your EJB example - would it not have been better to just get the original exception in the &lt;br/&gt;
first place instead of having to wade through the EJB exception as well?  The API wouldn&amp;#39;t have &lt;br/&gt;
allowed that so it&amp;#39;s not really an option in this case, but it is an option in at least some of ours.&lt;br/&gt;
&lt;br/&gt;
Like I said, I&amp;#39;m happy either way.  Once the patch is committed I should be able to take a little time &lt;br/&gt;
to create a proposal patch for which exceptions could be left unwrapped then we&amp;#39;ll see just how &lt;br/&gt;
feasible it turns out (and quite possibly I&amp;#39;ll change my mind. :)&lt;br/&gt;
&lt;br/&gt;
Again, great work!</comment>
                    <comment id="12380470" author="olegk" created="Tue, 15 Jul 2003 05:58:54 +0100"  >Adrian,&lt;br/&gt;
Not necessarily low level exceptions pushed up all the way to the presentation&lt;br/&gt;
layer are good&lt;br/&gt;
&lt;br/&gt;
Consider the following two scenarios&lt;br/&gt;
&lt;br/&gt;
-------------------------------------------------------------------------------------------------&lt;br/&gt;
Scenario 1:&lt;br/&gt;
-------------------------------------------------------------------------------------------------&lt;br/&gt;
void DataLayer.doThis() throws ThisDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void DataLayer.doThat() throws ThatDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void DataLayer.doWhatever() throws WhateverDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void BusinessLayer1.doBusiness() &lt;br/&gt;
&amp;nbsp;&amp;nbsp;throws ThisDataException, ThatDataException, WhateverDataException&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;dataLayer.doThis()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;dataLayer.doThat()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;dataLayer.doWhatever()&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void PresentationLayer.showStuff() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;businessLayer.doBusiness();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch(ThisDataException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch(ThatDataException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch(WhateverDataException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
-------------------------------------------------------------------------------------------------&lt;br/&gt;
Scenario 2:&lt;br/&gt;
-------------------------------------------------------------------------------------------------&lt;br/&gt;
void DataLayer.doThis() throws ThisDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void DataLayer.doThat() throws ThatDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void DataLayer.doWhate() throws WhateverDataException {&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
void BusinessLayer1.doBusiness() throws BusinessLogicException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dataLayer.doThis()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dataLayer.doThat()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dataLayer.doWhatever()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} catch(Exception data_level_e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new BusinessLogicException(&amp;quot;I was just trying to do my business&amp;quot;,&lt;br/&gt;
data_level_e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
void PresentationLayer.showStuff() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;businessLayer.doBusiness();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;catch(BusinessLogicException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
-------------------------------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
IMHO, in massive and complex business applications nestable exceptions can be&lt;br/&gt;
your life saver. This said, I admin it may not be directly applicable to our&lt;br/&gt;
problem domain with HttpClient. However, I do see IOException pushed all the way&lt;br/&gt;
up to the caller as nothing more that a way of saying &amp;quot;Oopsie&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380471" author="adrian@ephox.com" created="Tue, 15 Jul 2003 07:00:06 +0100"  >Oleg,&lt;br/&gt;
Agreed there are definitely times where nested exceptions are better.&lt;br/&gt;
&lt;br/&gt;
I guess my main question has come down to: how is HttpTransportException() different and better &lt;br/&gt;
than IOException?  My understanding of IOException is that it&amp;#39;s thrown when communication goes &lt;br/&gt;
wrong, which is the same as my understanding of HttpTransportException.&lt;br/&gt;
&lt;br/&gt;
For the record I definitely agree we should nest exceptions like JSSE and crypto exceptions as well &lt;br/&gt;
as other exceptions that are very much internal to how HttpClient works.  I&amp;#39;m just not sure that &lt;br/&gt;
TransportException either shields the user from the internals of HttpClient or provides additional &lt;br/&gt;
information that may be useful.</comment>
                    <comment id="12380472" author="becke@u.washington.edu" created="Tue, 15 Jul 2003 10:22:40 +0100"  >Patch committed.  Nice work Laura.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380473" author="laura@lwerner.org" created="Tue, 15 Jul 2003 12:06:14 +0100"  >I just noticed that my patch mangled some comments in HeadMethod.java.  They had&lt;br/&gt;
a long of row non-ASCII characters (a bullet, I think), which got messed up&lt;br/&gt;
because I had Eclipse set to Cp1252 instead of Latin-1.  Here&amp;#39;s a patch....</comment>
                    <comment id="12380474" author="laura@lwerner.org" created="Tue, 15 Jul 2003 12:06:46 +0100"  >Created an attachment (id=7298)&lt;br/&gt;
Fix mangled comments in HeadMethod.java&lt;br/&gt;
</comment>
                    <comment id="12380475" author="becke@u.washington.edu" created="Tue, 15 Jul 2003 20:32:55 +0100"  >Comments fixed.</comment>
                    <comment id="12380476" author="olegk" created="Tue, 15 Jul 2003 20:42:05 +0100"  >Folks, I am working on clean up of internal exception handling structure. &lt;br/&gt;
Things look nasty. &lt;br/&gt;
&lt;br/&gt;
I have a few ideas I would like to try out before I get all desperate and stuff&lt;br/&gt;
&lt;br/&gt;
Oleg </comment>
                    <comment id="12380477" author="olegk" created="Tue, 15 Jul 2003 22:24:06 +0100"  >Created an attachment (id=7307)&lt;br/&gt;
refactoring, try #4&lt;br/&gt;
</comment>
                    <comment id="12380478" author="olegk" created="Tue, 15 Jul 2003 22:42:48 +0100"  >OK. Here&amp;#39;s what I got.&lt;br/&gt;
&lt;br/&gt;
I played around with several approaches and realized that wrapping all&lt;br/&gt;
IOExceptions into HttpTransportExceptions was not simply feasible, primarily&lt;br/&gt;
because InputStream / OutputStream derived classes cannot throw&lt;br/&gt;
non-IOExceptions. I found no way to work that problem around in an acceptable manner&lt;br/&gt;
&lt;br/&gt;
The patch basically implements the first scenario of my original proposal and&lt;br/&gt;
goes along the line suggested by Adrian: &lt;br/&gt;
* IOException represents transport exceptions&lt;br/&gt;
* HttpException represents protocol exceptions&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s the list of important points&lt;br/&gt;
* TransportException no more&lt;br/&gt;
* HttpException is no longer derived from IOException (which is good)&lt;br/&gt;
* URIException is no longer derived from IOException (which is good)&lt;br/&gt;
* I had to deprecate HttpConnectionManager#getConnection(HostConfiguration,&lt;br/&gt;
long) because of wrong exception type it throws.&lt;br/&gt;
* In ChunkedInputStream I had to implement a pretty ugly hack to work around&lt;br/&gt;
exception type mismatch&lt;br/&gt;
* HttpConnection can now throw IOTimeoutException&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380479" author="becke@u.washington.edu" created="Wed, 16 Jul 2003 04:06:10 +0100"  >&amp;gt; I played around with several approaches and realized that wrapping all&lt;br/&gt;
&amp;gt; IOExceptions into HttpTransportExceptions was not simply feasible, primarily&lt;br/&gt;
&amp;gt; because InputStream / OutputStream derived classes cannot throw&lt;br/&gt;
&amp;gt; non-IOExceptions. I found no way to work that problem around in an acceptable&lt;br/&gt;
manner&lt;br/&gt;
&lt;br/&gt;
Makes sense.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;gt; The patch basically implements the first scenario of my original proposal and&lt;br/&gt;
&amp;gt; goes along the line suggested by Adrian: &lt;br/&gt;
&amp;gt; * IOException represents transport exceptions&lt;br/&gt;
&amp;gt; * HttpException represents protocol exceptions&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Here&amp;#39;s the list of important points&lt;br/&gt;
&amp;gt; * TransportException no more&lt;br/&gt;
&lt;br/&gt;
Adrian wins:)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * HttpException is no longer derived from IOException (which is good)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not so sure this is a good thing. This adds up to a very large API change&lt;br/&gt;
for many users.  People who are wrapping HttpClient.executeMethod() in a try{&lt;br/&gt;
}catch(IOException) are going to be in for some trouble.  I think we should&lt;br/&gt;
leave the IOException inheritence of now (even though it is ugly).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * URIException is no longer derived from IOException (which is good)&lt;br/&gt;
&lt;br/&gt;
This is only okay I think if we keep HttpException as an IOException for similar&lt;br/&gt;
reasons as above.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * I had to deprecate HttpConnectionManager#getConnection(HostConfiguration,&lt;br/&gt;
&amp;gt; long) because of wrong exception type it throws&lt;br/&gt;
&lt;br/&gt;
Looks good to me.  Adding the getConnectionWithTimeout() method breaks the API&lt;br/&gt;
but I do not think may people are creating their own connection mangers.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * In ChunkedInputStream I had to implement a pretty ugly hack to work around&lt;br/&gt;
&amp;gt; exception type mismatc&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s not so bad.  I think we should add an error log since the original stack&lt;br/&gt;
track will be lost.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * HttpConnection can now throw IOTimeoutException&lt;br/&gt;
&lt;br/&gt;
Jolly good.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Overall this patch is a good incremental change.  The notable exception being&lt;br/&gt;
the change to HttpException.  This is a pretty big change and I do not think it&lt;br/&gt;
is appropriate for 2.1.  I suggest we keep HttpException as an IOException and&lt;br/&gt;
make it very clear (in JavaDocs, release notes, etc.) that it will not be that&lt;br/&gt;
way for 3.0.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380480" author="olegk" created="Wed, 16 Jul 2003 04:42:56 +0100"  >Mike, believe it or not, it was not an attempt at sneaking in some controversial&lt;br/&gt;
changes while nobody was watching. I just got carried away. I agree we should&lt;br/&gt;
keep current HttpException inheritance. &lt;br/&gt;
&lt;br/&gt;
A new patch will follow soon&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380481" author="olegk" created="Wed, 16 Jul 2003 05:12:30 +0100"  >Created an attachment (id=7314)&lt;br/&gt;
refactoring, try #5&lt;br/&gt;
</comment>
                    <comment id="12380482" author="laura@lwerner.org" created="Wed, 16 Jul 2003 12:48:29 +0100"  >I like the way this is going.  Here are a couple of comments, though they may be&lt;br/&gt;
things you just haven&amp;#39;t gotten to yet:&lt;br/&gt;
&lt;br/&gt;
- The &amp;quot;ugly hack&amp;quot; in ChunkedInputStream isn&amp;#39;t strictly necessary anymore, since&lt;br/&gt;
an HttpException is an IOException.  But if we&amp;#39;re planning to remove the&lt;br/&gt;
IOException inheritance in 3.0, it should probably stay the way it is.&lt;br/&gt;
&lt;br/&gt;
- If we keep the hack, the code that constructs the IOException should call its&lt;br/&gt;
initCause method when running on JDK 1.4+.  Maybe a package-access helper method&lt;br/&gt;
in HttpException could take care of this, so we don&amp;#39;t have the same ugly&lt;br/&gt;
reflection code all over the place.</comment>
                    <comment id="12380483" author="olegk" created="Wed, 16 Jul 2003 16:06:13 +0100"  >&amp;gt; - The &amp;quot;ugly hack&amp;quot; in ChunkedInputStream isn&amp;#39;t strictly necessary anymore, since&lt;br/&gt;
&amp;gt; an HttpException is an IOException.  But if we&amp;#39;re planning to remove the&lt;br/&gt;
&amp;gt; IOException inheritance in 3.0, it should probably stay the way it is.&lt;br/&gt;
&lt;br/&gt;
It is not. But I really would like to keep it, as once 3.0 development starts,&lt;br/&gt;
it would only take changing the super class of the HttpException &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - If we keep the hack, the code that constructs the IOException should call its&lt;br/&gt;
&amp;gt; initCause method when running on JDK 1.4+.  Maybe a package-access helper method&lt;br/&gt;
&amp;gt; in HttpException could take care of this, so we don&amp;#39;t have the same ugly&lt;br/&gt;
&amp;gt; reflection code all over the place.&lt;br/&gt;
&lt;br/&gt;
Quite right. I would like to check in this patch first, though, (provided nobody&lt;br/&gt;
objects). </comment>
                    <comment id="12380484" author="becke@u.washington.edu" created="Wed, 16 Jul 2003 20:31:12 +0100"  >Go for it.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380485" author="laura@lwerner.org" created="Thu, 17 Jul 2003 00:40:29 +0100"  >Ditto.  Check it in.</comment>
                    <comment id="12380486" author="olegk" created="Thu, 17 Jul 2003 04:53:15 +0100"  >Patch (refactoring, try #5) committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380487" author="olegk" created="Tue, 22 Jul 2003 17:41:02 +0100"  >Created an attachment (id=7442)&lt;br/&gt;
Refactoring of authentication, try #1&lt;br/&gt;
</comment>
                    <comment id="12380488" author="olegk" created="Tue, 22 Jul 2003 18:09:56 +0100"  >Created an attachment (id=7443)&lt;br/&gt;
Refactoring of authentication, try #2&lt;br/&gt;
</comment>
                    <comment id="12380489" author="adrian@ephox.com" created="Tue, 22 Jul 2003 19:29:30 +0100"  >Oleg,&lt;br/&gt;
Thanks for looking into this.  The patch makes a big improvement to exception handling in &lt;br/&gt;
authentication.&lt;br/&gt;
&lt;br/&gt;
Once question: does {@encrypt(byte[],byte[])} actually work or should it have been {@link &lt;br/&gt;
#encrypt(byte[],byte[])}.  My JavaDoc skills are really poor but that looks odd to me.</comment>
                    <comment id="12380490" author="olegk" created="Tue, 22 Jul 2003 21:12:21 +0100"  >Thanks, Adrian. I can&amp;#39;t claim to be very knowledgeable in Javadoc, but I think &lt;br/&gt;
{@link #encrypt(byte[],byte[])} is surely better. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380491" author="olegk" created="Wed, 23 Jul 2003 02:14:37 +0100"  >Patch &amp;#39;Refactoring of authentication, try #2&amp;#39; committed&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380492" author="olegk" created="Fri, 25 Jul 2003 22:00:46 +0100"  >Created an attachment (id=7510)&lt;br/&gt;
(Hopefully) the final exception handling clean-up (take 1)&lt;br/&gt;
</comment>
                    <comment id="12380493" author="olegk" created="Fri, 25 Jul 2003 22:02:41 +0100"  >I cleaned up things somewhat and dealt with the remaining outstanding issues. &lt;br/&gt;
Please let me know what you think. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380494" author="laura@lwerner.org" created="Wed, 30 Jul 2003 12:56:16 +0100"  >This looks good!&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m attaching one minor improvement that I didn&amp;#39;t get around to in my original&lt;br/&gt;
patch: a slightly more efficient way of accessing initCause.  Since I can&amp;#39;t&lt;br/&gt;
figure out a way to do a patch relative to your patch, I&amp;#39;ll just paste in a new&lt;br/&gt;
copy of ExceptionUtils.java.</comment>
                    <comment id="12380495" author="laura@lwerner.org" created="Wed, 30 Jul 2003 12:57:09 +0100"  >Created an attachment (id=7576)&lt;br/&gt;
Slightly more efficient ExceptionUtils.java&lt;br/&gt;
</comment>
                    <comment id="12380496" author="laura@lwerner.org" created="Wed, 30 Jul 2003 13:09:23 +0100"  >Oops, here&amp;#39;s one more thing.  When I added TestExceptions, I forgot to add it to&lt;br/&gt;
the TestNoHost TestSuite.  Could someone add it?</comment>
                    <comment id="12380497" author="olegk" created="Wed, 30 Jul 2003 20:06:37 +0100"  >Created an attachment (id=7580)&lt;br/&gt;
(Hopefully) the final exception handling clean-up (take 1)&lt;br/&gt;
</comment>
                    <comment id="12380498" author="olegk" created="Wed, 30 Jul 2003 20:08:48 +0100"  >Laura,&lt;br/&gt;
Many thanks for your feedback. I patched ExceptionUtils and updated TestNoHost. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380499" author="olegk" created="Tue, 5 Aug 2003 06:06:09 +0100"  >Folks,&lt;br/&gt;
Do you think it is ok to commit the outstanding patch and close the bug report?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12380500" author="becke@u.washington.edu" created="Tue, 5 Aug 2003 10:51:49 +0100"  >Go for it.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380501" author="olegk" created="Wed, 6 Aug 2003 03:36:07 +0100"  >The final patch committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12326877" name="ASF.LICENSE.NOT.GRANTED--auth.patch" size="22597" author="olegk" created="Tue, 22 Jul 2003 18:09:56 +0100" />
                    <attachment id="12326876" name="ASF.LICENSE.NOT.GRANTED--auth.patch" size="18549" author="olegk" created="Tue, 22 Jul 2003 17:41:02 +0100" />
                    <attachment id="12326873" name="ASF.LICENSE.NOT.GRANTED--charset.patch.txt" size="1785" author="laura@lwerner.org" created="Tue, 15 Jul 2003 12:06:46 +0100" />
                    <attachment id="12326869" name="ASF.LICENSE.NOT.GRANTED--exception.patch" size="61533" author="becke@u.washington.edu" created="Tue, 13 May 2003 11:38:12 +0100" />
                    <attachment id="12326870" name="ASF.LICENSE.NOT.GRANTED--exceptions_1.patch.txt" size="47976" author="laura@lwerner.org" created="Sun, 13 Jul 2003 11:03:34 +0100" />
                    <attachment id="12326871" name="ASF.LICENSE.NOT.GRANTED--exceptions_2.patch.txt" size="50951" author="laura@lwerner.org" created="Mon, 14 Jul 2003 04:50:12 +0100" />
                    <attachment id="12326872" name="ASF.LICENSE.NOT.GRANTED--exceptions_3.patch.txt" size="58309" author="laura@lwerner.org" created="Mon, 14 Jul 2003 07:22:15 +0100" />
                    <attachment id="12326880" name="ASF.LICENSE.NOT.GRANTED--exceptions.patch" size="13814" author="olegk" created="Wed, 30 Jul 2003 20:06:37 +0100" />
                    <attachment id="12326878" name="ASF.LICENSE.NOT.GRANTED--exceptions.patch" size="10667" author="olegk" created="Fri, 25 Jul 2003 22:00:46 +0100" />
                    <attachment id="12326875" name="ASF.LICENSE.NOT.GRANTED--exceptions.patch" size="33396" author="olegk" created="Wed, 16 Jul 2003 05:12:30 +0100" />
                    <attachment id="12326874" name="ASF.LICENSE.NOT.GRANTED--exceptions.patch" size="34409" author="olegk" created="Tue, 15 Jul 2003 22:24:06 +0100" />
                    <attachment id="12326879" name="ASF.LICENSE.NOT.GRANTED--ExceptionUtil.java" size="4623" author="laura@lwerner.org" created="Wed, 30 Jul 2003 12:57:09 +0100" />
                    <attachment id="12326868" name="ASF.LICENSE.NOT.GRANTED--wrapCause.patch" size="5739" author="adrian@ephox.com" created="Tue, 13 May 2003 06:43:55 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>19868</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 13 May 2003 05:22:49 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133264</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>188822</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>