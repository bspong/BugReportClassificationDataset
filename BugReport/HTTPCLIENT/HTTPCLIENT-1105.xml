<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:12:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-1105/HTTPCLIENT-1105.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-1105] Built-in way to do auto-retry for certain status codes</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-1105</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>The HttpRequestRetryHandler mechanism is great.  It allows API users to plug in their own logic to control whether or not a retry should automatically be done, how many times it should be retried, etc.  That works perfectly in scenarios where an exception is caught while issuing the request.  It falls short, however, in this scenario...&lt;br/&gt;
&lt;br/&gt;
If I&amp;#39;m hitting a service that returns a 503, I want to be able to retry that request automatically as well.  As of right now, I need to write my own logic to accomplish that, and it&amp;#39;s clunky trying to integrate it with the httpClient.execute() call, since it&amp;#39;s my ResponseHandler impl that ends up getting the 503.  I can see use cases for auto-retrying upon getting other HTTP statuses as well, not just 503.&lt;br/&gt;
&lt;br/&gt;
My request here is...I would love to be able to configure, either on the HttpClient itself or on a wrapping class or something, that a request should automatically be retried if the HTTP status code is among of a set of statuses that I configure.  It would be nice if you could set the max # of retries, an optional sleep time in between retries (perhaps optional incremental backoff if you want to get fancy).  I&amp;#39;m not sure if this is possible, but it would be nice if -- when this type of status-based retry is enabled -- my ResponseHandler wouldn&amp;#39;t even get invoked until retry was successful.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s an alternative suggestion, possibly simpler to build, but definitely not as elegant:&lt;br/&gt;
&lt;br/&gt;
In my ResponseHandler, you could throw a RetryRequestException or something like that, and the calling code would catch that and do as expected.  That might simplify the mechanism so to speak.&lt;br/&gt;
&lt;br/&gt;
Anyway, I would love not to have to roll my own retry code, since I suspect this is something that hundreds (thousands?) of HttpClient users have had to code.  Seems like providing a standardized, well-written way to do it would go a long way to helping many coders out there.&lt;br/&gt;
&lt;br/&gt;
Thanks!</description>
                <environment></environment>
            <key id="12511463">HTTPCLIENT-1105</key>
            <summary>Built-in way to do auto-retry for certain status codes</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="dcheckoway">Dan Checkoway</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Jun 2011 13:04:40 +0100</created>
                <updated>Sat, 23 Jul 2011 10:58:11 +0100</updated>
                    <resolved>Wed, 29 Jun 2011 14:15:36 +0100</resolved>
                            <version>4.1.1</version>
                                <fixVersion>4.2 Alpha1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13054425" author="olegk" created="Fri, 24 Jun 2011 13:56:44 +0100"  >Probably the best and cleanest way to solve the problem would be a decorator class for HttpClient interface similar to CachingHttpClient. It should be fairly easy to implement.&lt;br/&gt;
&lt;br/&gt;
We happily take contributions.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="13056533" author="avasile" created="Tue, 28 Jun 2011 15:29:50 +0100"  >Sample work for the above functionality. Most of the work is copied from the CachingHttpClient. My environment is not fully functional, so I wasn&amp;#39;t able to optimize the imports. Please share your thoughts...</comment>
                    <comment id="13057066" author="olegk" created="Wed, 29 Jun 2011 09:03:54 +0100"  >Looks reasonable to me. I just would make an abstract strategy interface out of ServiceUnavailableRetryConfig. &lt;br/&gt;
&lt;br/&gt;
Oleg </comment>
                    <comment id="13057090" author="avasile" created="Wed, 29 Jun 2011 10:07:15 +0100"  >Good idea. I attached the updated path with you comment, plus some javadocs and retry functionality updated.</comment>
                    <comment id="13057213" author="olegk" created="Wed, 29 Jun 2011 14:15:36 +0100"  >Patch committed with some changes. I changed the signature of the ServiceUnavailableRetryStrategy to make it more consistent with HttpRequestRetryHandler. I also did not quite like recursive invocation of the #callBackend method. I replaced recursive method call with a simple loop.&lt;br/&gt;
&lt;br/&gt;
Please review.&lt;br/&gt;
&lt;br/&gt;
I also noticed that the default ServiceUnavailableRetryStrategy implementation was not fully thread safe. Ideally all instance variables in the DefaultServiceUnavailableRetryStrategy should be made final and the class should be made immutable.&lt;br/&gt;
&lt;br/&gt;
Otherwise, many thanks for the contribution.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="13057459" author="avasile" created="Wed, 29 Jun 2011 21:45:24 +0100"  >Looks OK to me...</comment>
                </comments>
                    <attachments>
                    <attachment id="12484446" name="patch_auto_retry.diff" size="22545" author="avasile" created="Tue, 28 Jun 2011 15:29:50 +0100" />
                    <attachment id="12484610" name="patch_auto_retry_v2.diff" size="27090" author="avasile" created="Wed, 29 Jun 2011 10:07:15 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 24 Jun 2011 12:56:44 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>67121</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>46980</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>