<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:15:46 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-295/HTTPCLIENT-295.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-295] HttpClient loops endlessly while trying to retrieve status line</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-295</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>When fed with the wrong URL, for example &lt;a href=&quot;http://localhost:19/&quot;&gt;http://localhost:19/&lt;/a&gt; (chargen port),&lt;br/&gt;
HttpClient will loop endlessly while attempting to read the status line.&lt;br/&gt;
&lt;br/&gt;
This is caused by a bug in HttpMethodBase.readStatusLine(HttpState, HttpConnection)&lt;br/&gt;
&lt;br/&gt;
(while loop without any exceptional abort condition).&lt;br/&gt;
&lt;br/&gt;
wire log excerpt:&lt;br/&gt;
&lt;br/&gt;
2003/11/10 12:33:04:085 CET [DEBUG] HttpMethodDirector - -Execute loop try 1&lt;br/&gt;
2003/11/10 12:33:04:312 CET [DEBUG] wire - -&amp;gt;&amp;gt; &amp;quot;GET / HTTP/1.1[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:351 CET [DEBUG] HttpMethodBase - -Adding Host request header&lt;br/&gt;
2003/11/10 12:33:04:532 CET [DEBUG] wire - -&amp;gt;&amp;gt; &amp;quot;User-Agent: Jakarta&lt;br/&gt;
Commons-HttpClient[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:554 CET [DEBUG] wire - -&amp;gt;&amp;gt; &amp;quot;Host: localhost:19[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:559 CET [DEBUG] wire - -&amp;gt;&amp;gt; &amp;quot;[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:639 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;!&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefgh[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:669 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghi[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:673 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;#$%&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghij[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:692 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;$%&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijk[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:698 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;%&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijkl[\r][\n]&amp;quot;&lt;br/&gt;
2003/11/10 12:33:04:703 CET [DEBUG] wire - -&amp;lt;&amp;lt;&lt;br/&gt;
&amp;quot;&amp;amp;&amp;#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklm[\r][\n]&amp;quot;&lt;br/&gt;
&amp;lt;snip&amp;gt;</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333854">HTTPCLIENT-295</key>
            <summary>HttpClient loops endlessly while trying to retrieve status line</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ck@rrzn.uni-hannover.de">Christian Kohlsch&#195;&#188;tter</reporter>
                        <labels>
                    </labels>
                <created>Mon, 10 Nov 2003 20:43:47 +0000</created>
                <updated>Wed, 16 Feb 2011 20:45:12 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:36 +0100</resolved>
                            <version>Snapshot</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381180" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:50:38 +0000"  >Created an attachment (id=9016)&lt;br/&gt;
Test connection on localhost&amp;#39;s chargen port (and echo), if open&lt;br/&gt;
</comment>
                    <comment id="12381181" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:53:47 +0000"  >Created an attachment (id=9017)&lt;br/&gt;
Suggested patch for HttpMethodBase.readStatusLine&lt;br/&gt;
</comment>
                    <comment id="12381182" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:54:20 +0000"  >Created an attachment (id=9018)&lt;br/&gt;
Suggested patch for HttpMethodBase.readStatusLine&lt;br/&gt;
</comment>
                    <comment id="12381183" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:55:49 +0000"  >Please ignore attachment id=9017 (source instead of patch).&lt;br/&gt;
Look at id=9018 instead.&lt;br/&gt;
</comment>
                    <comment id="12381184" author="olegk" created="Mon, 10 Nov 2003 22:14:12 +0000"  >Christian,&lt;br/&gt;
Could you, please, parameterize &amp;#39;maxLinesToInspect&amp;#39; value using HttpMethodParams&lt;br/&gt;
class and resubmit the patch?&lt;br/&gt;
&lt;br/&gt;
Oleg </comment>
                    <comment id="12381185" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 15:47:18 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
I don&amp;#39;t think that it would be a good idea to make that a configurable &lt;br/&gt;
parameter. RFC2616 states that the very first line of the response _must_ be &lt;br/&gt;
the status line (No CR or LF is allowed before that). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
But I guess that you have made bad experiences with some servers, that is why &lt;br/&gt;
you have implemented the loop readStatusLine at all, haven&amp;#39;t you? &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
If so, then maxLinesToInspect should be set to a reasonable, fixed value (any &lt;br/&gt;
value between 2 and 5 should be ok), because if the loop _is_ looping, you are &lt;br/&gt;
already breaking the standard (a strict-mode check would make sense here!) &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
If not, we can remove the loop completely (and can forget that configurable &lt;br/&gt;
parameter :-) &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381186" author="oglueck" created="Tue, 11 Nov 2003 16:33:33 +0000"  >Sooner or later somebody will request this as a configurable parameter. We have&lt;br/&gt;
a very wide range of users. So we will need every parameter to be configurable.</comment>
                    <comment id="12381187" author="olegk" created="Tue, 11 Nov 2003 17:09:10 +0000"  >Christian,&lt;br/&gt;
The problem here is persistent HTTP/1.1 connections. Occasionally some broken&lt;br/&gt;
SGI scripts report content-length value that in fact does not reflect the real&lt;br/&gt;
length of the content body sent across the wire.&lt;br/&gt;
&lt;br/&gt;
Consider the following:&lt;br/&gt;
---------------------------&lt;br/&gt;
HTTP/1.1 200 OK&lt;br/&gt;
Content-Length: 5&lt;br/&gt;
&lt;br/&gt;
Screw you&lt;br/&gt;
Really bad&lt;br/&gt;
HTTP/1.1 200 OK&lt;br/&gt;
Content-Length: 9&lt;br/&gt;
&lt;br/&gt;
Ooopsie&lt;br/&gt;
---------------------------&lt;br/&gt;
With the status line read loop in place HttpClient at least stands a chance of&lt;br/&gt;
graceful recovery from this kind of mishap. Unfortunately in this situation I do&lt;br/&gt;
not see an alternative to just scanning input stream for something that may (or&lt;br/&gt;
may not) happen to be a valid response line&lt;br/&gt;
&lt;br/&gt;
So, it is paramount that the suggested check is off per default. Only in very&lt;br/&gt;
special cases like yours one may choose to activate it. That&amp;#39;s why the parameter&lt;br/&gt;
is a must&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381188" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 17:54:48 +0000"  >Created an attachment (id=9052)&lt;br/&gt;
Modified patch, maximum garbage lines default to Integer.MAX_VALUE&lt;br/&gt;
</comment>
                    <comment id="12381189" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 17:55:27 +0000"  >Created an attachment (id=9053)&lt;br/&gt;
Improved testcase&lt;br/&gt;
</comment>
                    <comment id="12381190" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 17:58:44 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
good argument. I have attached the new patch (as well as an improved &lt;br/&gt;
testcase). &lt;br/&gt;
Now, in lenient mode, the maximum number of &amp;quot;garbage&amp;quot; lines is &lt;br/&gt;
Integer.MAX_VALUE (following your argumentation, 5 is too little). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
In strict-mode, this number is set to 0 by default. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Is this OK? &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381191" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 18:39:37 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
another idea: &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
In case of reusing persistent connections, wouldn&amp;#39;t it be better to simply &lt;br/&gt;
read/skip any available bytes before sending the next Request header? &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Because conversation is rather like this: (+&amp;gt;  &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
-&amp;gt;&amp;gt; GET / HTTP/1.1 &lt;br/&gt;
-&amp;gt;&amp;gt; Host: &lt;a href=&quot;http://www.foo.com&quot;&gt;www.foo.com&lt;/a&gt; &lt;br/&gt;
-&amp;gt;&amp;gt; &lt;br/&gt;
-&amp;lt;&amp;lt; HTTP/1.1 200 OK &lt;br/&gt;
-&amp;lt;&amp;lt; Content-Length: 5 &lt;br/&gt;
-&amp;lt;&amp;lt; &lt;br/&gt;
-&amp;lt;&amp;lt; ***** you &lt;br/&gt;
-&amp;lt;&amp;lt; Really bad &lt;br/&gt;
-&amp;gt;&amp;gt; GET /bar HTTP/1.1 &lt;br/&gt;
-&amp;gt;&amp;gt; Host: &lt;a href=&quot;http://www.foo.com&quot;&gt;www.foo.com&lt;/a&gt; &lt;br/&gt;
-&amp;gt;&amp;gt; &lt;br/&gt;
-&amp;lt;&amp;lt; HTTP/1.1 200 OK &lt;br/&gt;
-&amp;lt;&amp;lt; Content-Length: 9 &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Before sending the second GET, just read the surplus &amp;quot; you\r\nReally bad&amp;quot; off &lt;br/&gt;
the stream (throw an Exception or skip it/append it to the response, according &lt;br/&gt;
to strict/lenient mode). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
I guess that would be a cleaner handling (as the surplus &amp;quot;garbage&amp;quot; belongs to &lt;br/&gt;
the first method request, not to the second one). &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381192" author="oglueck" created="Tue, 11 Nov 2003 18:44:55 +0000"  >Chris, that is very unreliable. It is not guaranteed as to WHEN packets arrive.&lt;br/&gt;
After you have read all available data, the server may still continue sending&lt;br/&gt;
more garbage...</comment>
                    <comment id="12381193" author="olegk" created="Tue, 11 Nov 2003 18:53:31 +0000"  >Christian,&lt;br/&gt;
Odi has a point here. There is no reliable way of telling where one response&lt;br/&gt;
body ends and another one starts, if content length information is messed up.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll review your patch and give you feedback as soon as I can. Once the patch is&lt;br/&gt;
approved by at least two committers, it&amp;#39;ll be checked in.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381194" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 19:25:40 +0000"  >Agreed. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
In other words, can we assume that reusing the HTTP connection is &lt;br/&gt;
unreliable/should be avoided if there are more bytes available than specified &lt;br/&gt;
with Content-Length? &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
In this case, at least, I would suggest to close the current connection and &lt;br/&gt;
open a fresh one. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381195" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 20:50:17 +0000"  >Created an attachment (id=9056)&lt;br/&gt;
Testcase cleanup: Now uses HttpClient&amp;#39;s TimeoutController&lt;br/&gt;
</comment>
                    <comment id="12381196" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:23:28 +0000"  >Created an attachment (id=9064)&lt;br/&gt;
New patch, includes surplus response data check on first request (see mailing list)&lt;br/&gt;
</comment>
                    <comment id="12381197" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:24:06 +0000"  >Created an attachment (id=9065)&lt;br/&gt;
new version of TestBadPorts&lt;br/&gt;
</comment>
                    <comment id="12381198" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:24:33 +0000"  >Created an attachment (id=9066)&lt;br/&gt;
New test: TestBadContentLength&lt;br/&gt;
</comment>
                    <comment id="12381199" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:29:54 +0000"  >Please have a look at the latest three attachments. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
I have included a check for surplus response data, which now also cures &lt;br/&gt;
HttpClient from mis-interpreting malicious response bodies (as discussed &lt;br/&gt;
in the mailing list). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Please look at TestBadContentLength for the additional test scenario. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381200" author="olegk" created="Thu, 13 Nov 2003 01:03:50 +0000"  >Chritian,&lt;br/&gt;
I am a bit stressed out right now, but I&amp;#39;ll try to take a closer look at your&lt;br/&gt;
patch tonight. There are things I would possible like to see done differently.&lt;br/&gt;
Feedback to follow. &lt;br/&gt;
&lt;br/&gt;
But I REALLY like your TestBadContentLength testcase. We all would greatly&lt;br/&gt;
appreciate if you could look at the possibility of replacing the current&lt;br/&gt;
SimpleHttpConnection based testing framework with something of based on your&lt;br/&gt;
approach.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381201" author="ck@rrzn.uni-hannover.de" created="Thu, 13 Nov 2003 21:27:08 +0000"  >Created an attachment (id=9093)&lt;br/&gt;
Simple, generic HTTP Server; used TestBadContentLength as example&lt;br/&gt;
</comment>
                    <comment id="12381202" author="ck@rrzn.uni-hannover.de" created="Thu, 13 Nov 2003 21:40:24 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
thank you for compliments :) &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
I also think that it is quite important for a HTTP client to have a bundled, &lt;br/&gt;
tiny HTTP server for testing. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Unfortunately, at the moment, I do not have the time to dig that deep into &lt;br/&gt;
HttpClient&amp;#39;s test cases. However, I provide a simple HTTP server framework, &lt;br/&gt;
where you can construct the replies yourselves (anyone interested in?) &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
By default, the SimpleHttpServer does nothing but throwing a &amp;quot;503 Service &lt;br/&gt;
Unavailable&amp;quot; until you extend it with your own request handlers. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
One is provided in the new TestBadContentLength. Another one is a handler &lt;br/&gt;
chain, where multiple handlers can be stacked up, even to very complex &lt;br/&gt;
structures (chains of chains). The chain stops on the first handler that &lt;br/&gt;
writes to the given output stream. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
By the way: It is not very well tested, just give it a try. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381203" author="olegk" created="Fri, 14 Nov 2003 03:05:04 +0000"  >Christian,&lt;br/&gt;
I finally found enough time to thoroughly examine your patch. While OK in&lt;br/&gt;
general there were a few minor details that I did not quite like:&lt;br/&gt;
- Throwing a protocol exception from ResponseConsumedWatcher#responseConsumed&lt;br/&gt;
was not such a good idea after all. I think it requires too much of ugly code&lt;br/&gt;
for very little (or none at all) practical gains. In my version of the patch&lt;br/&gt;
extra response content results in a warning message. No exception is thrown.&lt;br/&gt;
- HTTP spec requires that HTTP agents ignore all blank lines that precede the&lt;br/&gt;
response status line. In your patch is was not taken into consideration&lt;br/&gt;
- I adjusted the new parameters to be more in line with existing parameter&lt;br/&gt;
conventions in HttpClient&lt;br/&gt;
&lt;br/&gt;
Bottom line, I did go a bit rough on your patch. Please let me know if these&lt;br/&gt;
changes are OK with you or not. If there&amp;#xE2;&amp;#x80;&amp;#x99;s something you do not quite agree&lt;br/&gt;
with, let me know&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll take a closer at your simple HTTP Server stuff a bit later. I am quite&lt;br/&gt;
determined to replace the existing SimpleHttpConnection testing framework with a&lt;br/&gt;
new one based on your code.&lt;br/&gt;
&lt;br/&gt;
Cheers&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381204" author="olegk" created="Fri, 14 Nov 2003 03:09:21 +0000"  >Created an attachment (id=9095)&lt;br/&gt;
Patch (take 2)&lt;br/&gt;
</comment>
                    <comment id="12381205" author="olegk" created="Fri, 14 Nov 2003 06:34:53 +0000"  >Created an attachment (id=9096)&lt;br/&gt;
Patch (take 3) Contains a minor bug fix&lt;br/&gt;
</comment>
                    <comment id="12381206" author="ck@rrzn.uni-hannover.de" created="Mon, 17 Nov 2003 22:00:23 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
thank you for reviewing my patch.&lt;br/&gt;
&lt;br/&gt;
I think the reviewed version is OK in general (AFAICS from the diff - I haven&amp;#39;t&lt;br/&gt;
applied it yet). Just a few comments (new ideas?) by me:&lt;br/&gt;
&lt;br/&gt;
In my opinion, &amp;quot;strict&amp;quot; mode should be very pedantic about standards compliance.&lt;br/&gt;
HttpClient should notify the user wherever a problematic, non-standards&lt;br/&gt;
situation is detected.&lt;br/&gt;
&lt;br/&gt;
Of course, trailing whitespace should be silently ignored, but any other&lt;br/&gt;
characters should be regarded as &amp;quot;unexpected&amp;quot; (is there a section in RFC 2616&lt;br/&gt;
for that? I haven&amp;#39;t found it yet).&lt;br/&gt;
&lt;br/&gt;
The question is: Is (non-whitespace) garbage following the response (caused by a&lt;br/&gt;
wrong Content-Length header, for example) &amp;quot;unexpected&amp;quot; enough?&lt;br/&gt;
&lt;br/&gt;
In your version of the patch, there is no chance to get informed about such a&lt;br/&gt;
situation - and in &amp;#39;lenient&amp;#39; mode, the detection is disabled completely (did you&lt;br/&gt;
check the TestBadContentLength testcase? does it pass?).&lt;br/&gt;
&lt;br/&gt;
Regarding the ProtocolException/ResponseConsumedWatcher thing, of course, it&lt;br/&gt;
_is_ a workaround to get that Exception thrown to the caller. However, I would&lt;br/&gt;
appreciate it if the user _would_ receive that Exception (somehow).&lt;br/&gt;
&lt;br/&gt;
I even think it is not such a bad idea to keep that in responseConsumed(), just&lt;br/&gt;
to inform every HttpClient component that there was an error while reading the&lt;br/&gt;
response (the interface is not public, anyway). Instead of throwing an&lt;br/&gt;
Exception, we could also have a boolean &amp;quot;without/with errors&amp;quot; return value, of&lt;br/&gt;
course...&lt;br/&gt;
&lt;br/&gt;
In short, I would prefer the following behaviour:&lt;br/&gt;
&lt;br/&gt;
- For any mode: If garbage is detected, read (up to a certain limit of bytes&lt;br/&gt;
&amp;quot;N&amp;quot;) until end of garbage (maximum of N bytes) or until a non-whitespace&lt;br/&gt;
character is received; N is something &amp;lt; 10 (should be user-definable).&lt;br/&gt;
&lt;br/&gt;
- For any mode, close the connection (the conncetion is definitely unreliable).&lt;br/&gt;
&lt;br/&gt;
- For strict mode, throw a ProtocolException if anything else but whitespace has&lt;br/&gt;
been received.&lt;br/&gt;
&lt;br/&gt;
- (Optionally) introduce an extra &amp;quot;pedantic&amp;quot; mode (inherits strict mode) and&lt;br/&gt;
throw a ProtocolException even if N bytes of _whitespace_ garbage have been&lt;br/&gt;
received.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Best regards,&lt;br/&gt;
&lt;br/&gt;
Christian</comment>
                    <comment id="12381207" author="ck@rrzn.uni-hannover.de" created="Mon, 17 Nov 2003 22:38:45 +0000"  >Odi,&lt;br/&gt;
&lt;br/&gt;
agreed - whitespace is a wrong term. CRLF is better. &amp;quot;CRLF or LF&amp;quot; is correct ;-)&lt;br/&gt;
(see RFC2616, section 19.3).&lt;br/&gt;
&lt;br/&gt;
Would you then prefer my first version of the patch, or do you have another idea&lt;br/&gt;
how to handle this?&lt;br/&gt;
&lt;br/&gt;
Oleg: what do you think?&lt;br/&gt;
&lt;br/&gt;
By the way: Could anybody give me an exact reference to a RFC 2616 section for&lt;br/&gt;
the &amp;quot;official&amp;quot; behaviour?&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Christian&lt;br/&gt;
</comment>
                    <comment id="12381208" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 20:09:25 +0000"  >Created an attachment (id=9189)&lt;br/&gt;
Revised patch; please review&lt;br/&gt;
</comment>
                    <comment id="12381209" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 20:20:59 +0000"  >Please have a look at the revised patch (also see mailing list discussion). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
I have changed Oleg&amp;#39;s suggested &amp;quot;TEST_EXTRA_INPUT&amp;quot; to &amp;quot;LOG_EXTRA_INPUT&amp;quot; (we &lt;br/&gt;
always test but log only in strict mode), and reversed the &amp;quot;-1&amp;quot; to &lt;br/&gt;
Integer.MAX_VALUE (terminates as opposed to the -1 solution, and saves one &lt;br/&gt;
comparison per loop cycle). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Moreover, there is no difference between empty and garbage lines anymore. Both &lt;br/&gt;
of them are taken into account for LOG_EXTRA_INPUT, which makes no difference &lt;br/&gt;
for lenient mode, anyway. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The suggested CRLF-only checking is simply omitted, as it would make things &lt;br/&gt;
just too complicated without any advantage (the connection is closed anyway in &lt;br/&gt;
case of a wrong Content-Length header etc.). </comment>
                    <comment id="12381210" author="olegk" created="Wed, 19 Nov 2003 21:04:26 +0000"  >Christian,&lt;br/&gt;
1. Please DO NOT use System.out.println()! This is a big NO-NO in HttpClient.&lt;br/&gt;
Please use commons-logging capabilities instead&lt;br/&gt;
2. Do you mind renaming LOG_EXTRA_INPUT to WARN_EXTRA_INPUT?&lt;br/&gt;
3. Integer value &amp;#xE2;&amp;#x80;&amp;#x93;1 used extensively throughout HttpClient to denote that an&lt;br/&gt;
integer parameter is disabled (not applicable). I would prefer this convention&lt;br/&gt;
to apply to STATUS_LINE_GARBAGE_LIMIT for the consistency sake, even at the&lt;br/&gt;
expense of a few CPU cycles. &lt;br/&gt;
&lt;br/&gt;
Otherwise looks OK to me.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381211" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 21:21:08 +0000"  >Gosh! Shame on me. This System.out.println() was left over from debugging... &lt;br/&gt;
Please remove it while I am standing in the corner. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The problem with -1 vs. Integer.MAX_VALUE is that checking is not disabled in &lt;br/&gt;
this case. It will just terminate after reading Integer.MAX_VALUE (2^31-1) &lt;br/&gt;
lines, whereas -1 won&amp;#39;t. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Feel free to apply modifications, I think I can live with them :) &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381212" author="olegk" created="Wed, 19 Nov 2003 21:43:59 +0000"  >There&amp;#39;s no need to stand in the corner. I believe none of us is a five-year-old&lt;br/&gt;
here. Apart from left-over println() statement my comments were merely hair&lt;br/&gt;
picking. I leave it to your discretion to decide what changes need to be made to&lt;br/&gt;
the patch.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381213" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 21:56:54 +0000"  >Created an attachment (id=9191)&lt;br/&gt;
Final (?) patch&lt;br/&gt;
</comment>
                    <comment id="12381214" author="olegk" created="Fri, 21 Nov 2003 06:05:13 +0000"  >Created an attachment (id=9221)&lt;br/&gt;
Patch (take 6)&lt;br/&gt;
</comment>
                    <comment id="12381215" author="olegk" created="Fri, 21 Nov 2003 06:11:49 +0000"  >It turned out that Christian&amp;#39;s patch broke 3 test cases. In fact there&amp;#39;s nothing&lt;br/&gt;
wrong with the patch itself. It is just SimpleHttpConnection stuff is too&lt;br/&gt;
flacky: its isResponseAvailable method does not seem to be able to produce&lt;br/&gt;
correct results. I worked the problem around in all three cases. &lt;br/&gt;
&lt;br/&gt;
It is time we replaced SimpleHttpConnection with something a bit more robust&lt;br/&gt;
&lt;br/&gt;
I am +1 to commit Christian&amp;#39;s patch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381216" author="ck@rrzn.uni-hannover.de" created="Thu, 27 Nov 2003 18:23:13 +0000"  >I would just like to ask if there are any objects against the patch, or if &lt;br/&gt;
Oleg can commit it. &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381217" author="oglueck" created="Sat, 6 Dec 2003 05:26:42 +0000"  >Chris, the TestBadContentLength test is now in CVS HEAD but it still fails and&lt;br/&gt;
is not included in the test nohost suite. Could you take care of it please?&lt;br/&gt;
Cheers. Odi</comment>
                    <comment id="12381218" author="ck@rrzn.uni-hannover.de" created="Mon, 8 Dec 2003 23:24:58 +0000"  >Created an attachment (id=9441)&lt;br/&gt;
Patch for CVS HEAD&amp;#39;s TestBadContentLength&lt;br/&gt;
</comment>
                    <comment id="12381219" author="ck@rrzn.uni-hannover.de" created="Mon, 8 Dec 2003 23:28:02 +0000"  >Odi, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
please check this patch (matching HttpClient&amp;#39;s &amp;quot;old&amp;quot; behaviour without the &lt;br/&gt;
ProtocolException suggestions). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381220" author="olegk" created="Wed, 10 Dec 2003 01:46:23 +0000"  >Christian,&lt;br/&gt;
Well, I have some bad news. &lt;br/&gt;
&lt;br/&gt;
I was working on merging TestBadContentLength patch with the main one (Patch&lt;br/&gt;
(take 6)) in order to get it prepared to be checked in into CVS trunk. When I&lt;br/&gt;
reran the tests, I unfortunately discovered that several I/O exception were&lt;br/&gt;
thrown that were not there before. Aparently those exceptions have been caused&lt;br/&gt;
by the newer Tomcat (version 4.1.29) which appears to be dropping connection&lt;br/&gt;
immediately after having sent the response body if the &amp;#39;connection: close&amp;#39;&lt;br/&gt;
request header is present in the request. So what is happening is that&lt;br/&gt;
HttpConnection.isResponseAvailable results in an I/O exception, as the socket is&lt;br/&gt;
closed on the server side the same moment the last response byte was sent:&lt;br/&gt;
&lt;br/&gt;
[ERROR] HttpMethodBase - -Unexpected I/O error when testing for extra response&lt;br/&gt;
data &amp;lt;java.io.IOException: Stream closed&amp;gt;java.io.IOException: Stream closed&lt;br/&gt;
	at java.io.PushbackInputStream.ensureOpen(PushbackInputStream.java, Compiled Code)&lt;br/&gt;
	at java.io.PushbackInputStream.available(PushbackInputStream.java:238)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.isResponseAvailable(HttpConnection.java:863)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.responseBodyConsumed(HttpMethodBase.java:2263)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase$1.responseConsumed(HttpMethodBase.java:1765)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.AutoCloseInputStream.notifyWatcher(AutoCloseInputStream.java,&lt;br/&gt;
Compiled Code)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.AutoCloseInputStream.checkClose(AutoCloseInputStream.java,&lt;br/&gt;
Compiled Code)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java,&lt;br/&gt;
Compiled Code)&lt;br/&gt;
	at java.io.FilterInputStream.read(FilterInputStream.java:90)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.AutoCloseInputStream.read(AutoCloseInputStream.java:161)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.getResponseBody(HttpMethodBase.java,&lt;br/&gt;
Compiled Code)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.getResponseBodyAsString(HttpMethodBase.java:740)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.TestMethodsLocalHost.testMethodsGet(TestMethodsLocalHost.java:174)&lt;br/&gt;
	&lt;br/&gt;
This is of course a fringe case, but the whole idea of having&lt;br/&gt;
HttpConnection.isResponseAvailable was to make HttpClient more reliable, and not&lt;br/&gt;
less reliable. We clearly overlooked this scenario.&lt;br/&gt;
&lt;br/&gt;
In Java prior to version 1.4 there is no way to test if the socket has been&lt;br/&gt;
closed on the other side, so using Socket#isClosed is not an option. I am afraid&lt;br/&gt;
HttpMethodParams.WARN_EXTRA_INPUT stuff must be completely removed. &lt;br/&gt;
&lt;br/&gt;
The offending code needs to be removed, and the whole process will have to start&lt;br/&gt;
from the very start.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381221" author="ck@rrzn.uni-hannover.de" created="Wed, 10 Dec 2003 21:08:48 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
in fact, this checked exception is caught and simply logged with LOG.error &lt;br/&gt;
(see patched HttpMethodBase.responseBodyConsumed()). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
A simple solution would to be to remove this LOG.error(...) statement (just as &lt;br/&gt;
in closeSocketAndStreams) - at least if WARN_EXTRA_INPUT is false &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
If you really wish that this potential IOException will not be triggered at &lt;br/&gt;
all, I suggest an option to have the already discussed TEST_EXTRA_INPUT modes &lt;br/&gt;
&amp;quot;disabled&amp;quot;/&amp;quot;enabled and silent&amp;quot;/&amp;quot;enabled with logging&amp;quot;. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381222" author="olegk" created="Wed, 10 Dec 2003 21:17:22 +0000"  >&amp;gt; in fact, this checked exception is caught and simply logged with LOG.error &lt;br/&gt;
&amp;gt; (see patched HttpMethodBase.responseBodyConsumed()). &lt;br/&gt;
&lt;br/&gt;
Christian,&lt;br/&gt;
Unfortunately I can&amp;#39;t agree that this is just a matter of ignoring the said&lt;br/&gt;
checked exception. The problem is that there&amp;#39;s no (or I personally do not know&lt;br/&gt;
of a) reliable way to tell if the I/O exception is thrown due to a closed socket&lt;br/&gt;
or due to a communication error. The former can be safely ignored but the latter&lt;br/&gt;
cannot. Unless you know how to resolve this problem without resorting error&lt;br/&gt;
message parsing, I persnally would rather see this check removed altogether.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381223" author="ck@rrzn.uni-hannover.de" created="Wed, 10 Dec 2003 21:39:51 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
it really does not matter what caused that IOException (no parsing needed). &lt;br/&gt;
If an IOException is thrown, the connection is not reusable. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Excerpt from patched responseBodyConsumed(): &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
try { &lt;br/&gt;
&amp;nbsp;&amp;nbsp;if(responseConnection.isResponseAvailable()) { &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(...) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setConnectionCloseForced(true); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;} &lt;br/&gt;
} catch (IOException e) { &lt;br/&gt;
&amp;nbsp;&amp;nbsp;LOG.error(&amp;quot;Unexpected I/O error when testing for extra response data&amp;quot;, e); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;setConnectionCloseForced(true); &lt;br/&gt;
} &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381224" author="olegk" created="Wed, 10 Dec 2003 21:58:46 +0000"  >Maybe I am getting paranoid, but it still matters to me. I do not like the idea&lt;br/&gt;
of just ignoring exceptions altogether, or putting a error/warning message for&lt;br/&gt;
what is essentially a normal behaviour. &lt;br/&gt;
&lt;br/&gt;
Folks, do you think it is OK if we just ignored I/O exceptions in this&lt;br/&gt;
situation? Please let us know&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381225" author="ck@rrzn.uni-hannover.de" created="Wed, 10 Dec 2003 22:44:47 +0000"  >Oleg, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
IMHO, if a specific thrown Exception is regarded as part of some &lt;br/&gt;
normal/tolerable behaviour, it is safe to ignore that Exception &lt;br/&gt;
(even without logging). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
This seems to be the case here! &lt;br/&gt;
Our potential IOException is basically thrown by InputStream.available(), &lt;br/&gt;
which means that there was a problem with retrieving the number of &lt;br/&gt;
readable bytes from the stream. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The exact reason for this problem does not matter. The IOException is &lt;br/&gt;
a reliable signal for HttpClient that the HTTP connection should not be &lt;br/&gt;
reused. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
By the way, the following two methods also silently ignore Exceptions. &lt;br/&gt;
Do you think that this behaviour needs to be changed? &lt;br/&gt;
HttpConnection.shutdownOutput() &lt;br/&gt;
HttpConnection.closeSocketAndStreams() &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381226" author="olegk" created="Wed, 10 Dec 2003 23:04:43 +0000"  >&amp;gt; By the way, the following two methods also silently ignore Exceptions. &lt;br/&gt;
&amp;gt; Do you think that this behaviour needs to be changed? &lt;br/&gt;
&lt;br/&gt;
In both cases, I believe it is OK to ignore I/O exceptions. I would not mind&lt;br/&gt;
seeing a warning in case of closeSocketAndStreams, though, but I can also live&lt;br/&gt;
without one. Anyways, feel free to provide a patch.&lt;br/&gt;
&lt;br/&gt;
I do not mind checking in the patch with I/O exceptions silently ignored, if +1&lt;br/&gt;
from at least one committer is secured.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381227" author="adrian@ephox.com" created="Thu, 11 Dec 2003 06:25:51 +0000"  >&amp;gt;I do not mind checking in the patch with I/O exceptions silently ignored, if +1&lt;br/&gt;
&amp;gt;from at least one committer is secured.&lt;br/&gt;
&lt;br/&gt;
Oleg,&lt;br/&gt;
I would be -0 to silentlly ignoring exceptions.  That would be a -1 if I&amp;#39;d actually had time to follow &lt;br/&gt;
HttpClient and do something about it myself.  I would suggest that if you expect the exception to &lt;br/&gt;
happen from time to time and can deal with it by just carrying on that at minimum you log the &lt;br/&gt;
exception at debug level.  That way when people start seeing a problem with HttpClient, we&amp;#39;ll tell &lt;br/&gt;
them to turn on debugging and that exception will become visible and they can then check that it&amp;#39;s &lt;br/&gt;
not the cause of the problem.&lt;br/&gt;
&lt;br/&gt;
Adrian.</comment>
                    <comment id="12381228" author="ck@rrzn.uni-hannover.de" created="Thu, 11 Dec 2003 15:26:49 +0000"  >Adrian, &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
this is a wise (+1-worthy) solution.  &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Christian &lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381229" author="olegk" created="Fri, 12 Dec 2003 06:56:22 +0000"  >Patch committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327020" name="ASF.LICENSE.NOT.GRANTED--badcontentlength.patch" size="1782" author="ck@rrzn.uni-hannover.de" created="Mon, 8 Dec 2003 23:24:58 +0000" />
                    <attachment id="12327011" name="ASF.LICENSE.NOT.GRANTED--badcontent.patch" size="10814" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:23:28 +0000" />
                    <attachment id="12327016" name="ASF.LICENSE.NOT.GRANTED--conn-reuse.patch" size="7871" author="olegk" created="Fri, 14 Nov 2003 06:34:53 +0000" />
                    <attachment id="12327015" name="ASF.LICENSE.NOT.GRANTED--conn-reuse.patch" size="7047" author="olegk" created="Fri, 14 Nov 2003 03:09:21 +0000" />
                    <attachment id="12327019" name="ASF.LICENSE.NOT.GRANTED--garbagelines.patch" size="12095" author="olegk" created="Fri, 21 Nov 2003 06:05:13 +0000" />
                    <attachment id="12327006" name="ASF.LICENSE.NOT.GRANTED--HttpMethodBase.java" size="85200" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:53:47 +0000" />
                    <attachment id="12327014" name="ASF.LICENSE.NOT.GRANTED--http-server.tar.gz" size="6753" author="ck@rrzn.uni-hannover.de" created="Thu, 13 Nov 2003 21:27:08 +0000" />
                    <attachment id="12327018" name="ASF.LICENSE.NOT.GRANTED--patch24560-final2.patch" size="8134" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 21:56:54 +0000" />
                    <attachment id="12327017" name="ASF.LICENSE.NOT.GRANTED--patch24560-final.patch" size="8117" author="ck@rrzn.uni-hannover.de" created="Wed, 19 Nov 2003 20:09:25 +0000" />
                    <attachment id="12327007" name="ASF.LICENSE.NOT.GRANTED--statusline.patch" size="1824" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:54:20 +0000" />
                    <attachment id="12327008" name="ASF.LICENSE.NOT.GRANTED--statusline.v2.patch" size="3997" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 17:54:48 +0000" />
                    <attachment id="12327013" name="ASF.LICENSE.NOT.GRANTED--TestBadContentLength.java" size="11148" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:24:33 +0000" />
                    <attachment id="12327012" name="ASF.LICENSE.NOT.GRANTED--TestBadPorts.java" size="5268" author="ck@rrzn.uni-hannover.de" created="Wed, 12 Nov 2003 18:24:06 +0000" />
                    <attachment id="12327010" name="ASF.LICENSE.NOT.GRANTED--TestBadPorts.java" size="5268" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 20:50:17 +0000" />
                    <attachment id="12327009" name="ASF.LICENSE.NOT.GRANTED--TestBadPorts.java" size="5823" author="ck@rrzn.uni-hannover.de" created="Tue, 11 Nov 2003 17:55:27 +0000" />
                    <attachment id="12327005" name="ASF.LICENSE.NOT.GRANTED--TestBadPorts.java" size="5272" author="ck@rrzn.uni-hannover.de" created="Mon, 10 Nov 2003 20:50:38 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>16.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24560</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 10 Nov 2003 22:14:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133346</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189302</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>