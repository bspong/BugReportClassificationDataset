<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:19:09 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-610/HTTPCLIENT-610.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-610] HttpMethodBase.getResponseBodyAsString(long limit)</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-610</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Currently HttpMethodBase.getResponseBodyAsString() prints warning in log, and suggests using getResponseStream(). However getResponseBodyAsString() is extremely useful (as it is easy to use). So my wish is to have method&lt;br/&gt;
&lt;br/&gt;
getResponseBodyAsString(long limit)&lt;br/&gt;
&lt;br/&gt;
that should throw HttpException if response size exceeds specified limit.&lt;br/&gt;
&lt;br/&gt;
Same things with getResponseBody(long limit) .&lt;br/&gt;
&lt;br/&gt;
Original methods should be deprecated because of danger, explained in javadoc.</description>
                <environment></environment>
            <key id="12357401">HTTPCLIENT-610</key>
            <summary>HttpMethodBase.getResponseBodyAsString(long limit)</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="oglueck">Ortwin Gl&#252;ck</assignee>
                                <reporter username="yozh">Stepan Koltsov</reporter>
                        <labels>
                    </labels>
                <created>Thu, 30 Nov 2006 21:10:03 +0000</created>
                <updated>Sun, 22 Apr 2007 08:11:22 +0100</updated>
                    <resolved>Fri, 1 Dec 2006 11:29:55 +0000</resolved>
                            <version>3.1 Alpha 1</version>
                                <fixVersion>3.1 RC1</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12454842" author="oglueck" created="Fri, 1 Dec 2006 09:17:17 +0000"  >We will not deprecate the old method. If the content length is known, there is no problem calling them.</comment>
                    <comment id="12454854" author="oglueck" created="Fri, 1 Dec 2006 09:37:58 +0000"  >Proposed patch incl. test cases.</comment>
                    <comment id="12454858" author="olegk" created="Fri, 1 Dec 2006 09:57:14 +0000"  >Odi,&lt;br/&gt;
&lt;br/&gt;
In those cases when the content length is not known (because chunk or identity transfer encoding is being used, for insyance) I think it would be more efficient to use  ByteArrayOutputStream instead of pre-allocating the maxLen of bytes. Consider the situation where maxLen is rather largish (say several MB) and chunk coded-content is just a couple of KB.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12454864" author="oglueck" created="Fri, 1 Dec 2006 10:18:27 +0000"  >True. What about the initial size of the ByteArrayOutputStream? By default it&amp;#39;s 32 bytes. This means lots of copying and object allocations when the content is large. I guess this makes the method unsuitable for high-performance / low-footprint applications. But those applications are better off using getResponseBodyAsStream() anyway. It&amp;#39;s just a convenience method after all.</comment>
                    <comment id="12454870" author="olegk" created="Fri, 1 Dec 2006 10:30:20 +0000"  >We should apply the same logic as in #getResponseBody method at the very least for the consistency sake:&lt;br/&gt;
&lt;br/&gt;
ByteArrayOutputStream outstream = new ByteArrayOutputStream(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;contentLength &amp;gt; 0 ? (int) contentLength : DEFAULT_INITIAL_BUFFER_SIZE);&lt;br/&gt;
&lt;br/&gt;
Otherwise +1 to commit&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12454881" author="oglueck" created="Fri, 1 Dec 2006 11:29:55 +0000"  >Patch committed with improvement suggested by Oleg.</comment>
                    <comment id="12454889" author="yozh" created="Fri, 1 Dec 2006 12:06:47 +0000"  >Thank you for resolving this issue.&lt;br/&gt;
&lt;br/&gt;
However why not add similar&lt;br/&gt;
&lt;br/&gt;
byte[] getResponseBody(long limit)&lt;br/&gt;
&lt;br/&gt;
?</comment>
                    <comment id="12454891" author="olegk" created="Fri, 1 Dec 2006 12:17:06 +0000"  >Odi,&lt;br/&gt;
&lt;br/&gt;
It would also be very nice to have this method ported to HttpCore&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk/module-main/src/main/java/org/apache/http/util/EntityUtils.java&quot;&gt;http://svn.apache.org/repos/asf/jakarta/httpcomponents/httpcore/trunk/module-main/src/main/java/org/apache/http/util/EntityUtils.java&lt;/a&gt; &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12346202" name="patch-take2.txt" size="7708" author="oglueck" created="Fri, 1 Dec 2006 10:18:27 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 1 Dec 2006 09:17:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133650</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47901</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>