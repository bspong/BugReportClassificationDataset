<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:22:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-915/HTTPCLIENT-915.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-915] Provide a clean mechanism to attatch user define attributes to connections</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-915</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>It would be nice to have a way to attach user defined attributes to a connection.&lt;br/&gt;
Ideally it&amp;#39;d be nice if such support could be added to HttpClientConnection, but understandably this may not be possible due to back-compatibility issues.&lt;br/&gt;
So, we could have something like HttpConnectionContext perhaps (or similar) with:&lt;br/&gt;
&lt;br/&gt;
HttpConnectionContext#setAttribute(String name, Object value)&lt;br/&gt;
Object HttpConnectionContext#getAttribute(String name)&lt;br/&gt;
&lt;br/&gt;
This would be made available in the HttpContext of a request (like the connection is today):&lt;br/&gt;
&lt;br/&gt;
HttpConnectionContext connectionContext = (HttpConnectionContext) httpContext.getAttribute(ExecutionContext.HTTP_CONNECTION_CONTEXT);&lt;br/&gt;
&lt;br/&gt;
This would make a few things much cleaner to implement than they are today: The most obvious being my current use case of wanting connection isolated cookies.&lt;br/&gt;
&lt;br/&gt;
Currently to achieve this goal we need to provide custom client connection + connection operator + connection manager implementations. Then there is no clean way to currently obtain the actual connection instance created by a custom operator in the HttpContext: As it&amp;#39;s wrapped by the connection pool and #getWrappedConnection is protected - so we need to resort to reflection in interceptors.&lt;br/&gt;
&lt;br/&gt;
Providing a clean mechanism for attaching user defined attributes to a connection instance as described above would make such implementations far far simpler.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12456757">HTTPCLIENT-915</key>
            <summary>Provide a clean mechanism to attatch user define attributes to connections</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="irvingd">dave irving</reporter>
                        <labels>
                    </labels>
                <created>Fri, 19 Feb 2010 09:11:41 +0000</created>
                <updated>Tue, 25 Jan 2011 10:59:30 +0000</updated>
                    <resolved>Mon, 22 Feb 2010 18:47:53 +0000</resolved>
                            <version>4.0.1</version>
                                <fixVersion>4.1 Alpha2</fixVersion>
                                <component>HttpConn</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12835667" author="oglueck" created="Fri, 19 Feb 2010 09:44:21 +0000"  >I think a simple Object is enough. If you need name/value pairs you can store a Map there. Access to the object should be synchronized to or use a volatile field.</comment>
                    <comment id="12835696" author="irvingd" created="Fri, 19 Feb 2010 11:04:34 +0000"  >&amp;gt; I think a simple Object is enough. If you need name/value pairs you can &lt;br/&gt;
&amp;gt; store a Map there. &lt;br/&gt;
&lt;br/&gt;
I disagree... Unfortunately this introduces coupling between disparate clients.&lt;br/&gt;
What happens if I write a &amp;quot;CookiePerConnectionInterceptor&amp;quot; which wants to put a CookieStore in the connection.&lt;br/&gt;
&lt;br/&gt;
Some other interceptor (written by someone else / another project etc) decides that It would like to put a Map of name values pairs in instead.&lt;br/&gt;
&lt;br/&gt;
Oops - now the two can&amp;#39;t work together.&lt;br/&gt;
&lt;br/&gt;
The motivation for using an attribute based approach is that it&amp;#39;s easy to scope your usage of it.</comment>
                    <comment id="12835704" author="oglueck" created="Fri, 19 Feb 2010 11:25:07 +0000"  >I see your point. Anyway I think it&amp;#39;s a bit questionable design. This basically introduces global variables, very well comparable with thread-local variables. We all know where that leads if you start passing all sorts of information around that way. Better keep local Maps with the Connection as the (weak ref) key. You can better controll access to those maps individually.</comment>
                    <comment id="12835706" author="irvingd" created="Fri, 19 Feb 2010 11:28:43 +0000"  >&amp;gt; Better keep local Maps with the Connection as the (weak ref) key. You can &lt;br/&gt;
&amp;gt; better controll access to those maps individually.&lt;br/&gt;
&lt;br/&gt;
Thats quite a PITA just to get connection specific attributes.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I see your point. Anyway I think it&amp;#39;s a bit questionable design. This basically introduces &lt;br/&gt;
&amp;gt; global variables, very well comparable with thread-local variables.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d say its a pretty well trodden ground: HttpContext?</comment>
                    <comment id="12835710" author="olegk" created="Fri, 19 Feb 2010 11:47:19 +0000"  >I also see potential issues with the connection bound state. HTTP connections are meant to be stateless. They can be pooled and re-used within a completely different user / security context. If a connection contains attributes that are user specific / security sensitive, all sorts of issues may arise, very much like with thread local variables. However, you already have this problem with NTLM and SSL connections anyway. So, this feature should be used with caution, but we should still provide support for it.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12835715" author="irvingd" created="Fri, 19 Feb 2010 12:00:56 +0000"  >I completely agree with you, Oleg. &lt;br/&gt;
&lt;br/&gt;
This feature certainly would have scope for misunderstanding / misuse - and I&amp;#39;d guess javadocs should point out what it&amp;#39;s there for, and what it&amp;#39;s not. &lt;br/&gt;
&lt;br/&gt;
My actual use case here is Connection specific cookies (Appears to have been needed by other users too).&lt;br/&gt;
&lt;br/&gt;
If there are concerns that providing a connection context interface could possibly lead to confusion (e.g. clients not making the distinction between it and HttpContext, or not realising that 99% of the time they shouldn&amp;#39;t be attaching state to connections), I&amp;#39;d be equally happy with any other solution that allows this use case to be met without resorting to the currently required reflection hacks:&lt;br/&gt;
&lt;br/&gt;
Any of:&lt;br/&gt;
&lt;br/&gt;
- Provide a a configuration parameter explicity for this case &amp;quot;CONNECTION_ISOLATED_COOKIES&amp;quot; or somesuch&lt;br/&gt;
- If a user implements a custom connection / operator / manager etc, provide them with some way to actually get hold of their custom connection implementation during request execution without requiring the use of reflection&lt;br/&gt;
&lt;br/&gt;
Overall though, I tend to favour the connection attributes approach:&lt;br/&gt;
&lt;br/&gt;
- Obviates the need to write custom connection / operator / manager classes just to provide connection state (which is needed in some scenarios, e.g, this use case)&lt;br/&gt;
- Is less dangerous than exposing unwrapped connections during request execution (which could expose circumvention of pooling etc)</comment>
                    <comment id="12835730" author="olegk" created="Fri, 19 Feb 2010 12:39:30 +0000"  >How about this? I made both DefaultClientConnection and AbstractClientConnAdapter implement HttpContext. This enables connections managed by HttpClient carry additional attributes / state. I reused HttpContext for simplicity.  We could also create a special interface for that.&lt;br/&gt;
&lt;br/&gt;
Please review and let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12835735" author="irvingd" created="Fri, 19 Feb 2010 12:51:56 +0000"  >(Non binding) +1 from me. Looks perfect. &lt;br/&gt;
&lt;br/&gt;
Thanks so much for looking in to this so quickly.&lt;br/&gt;
&lt;br/&gt;
Dave</comment>
                    <comment id="12836823" author="olegk" created="Mon, 22 Feb 2010 18:47:53 +0000"  >Patch checked in.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12436318" name="HTTPCLIENT-915-take1.patch" size="3973" author="olegk" created="Fri, 19 Feb 2010 12:39:30 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 19 Feb 2010 09:44:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133922</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47364</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>