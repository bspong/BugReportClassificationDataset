<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:18:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-587/HTTPCLIENT-587.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-587] derelativizing of relative URIs with a scheme is incorrect</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-587</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>URI constructor &amp;quot;public URI(URI base, URI relative) throws URIException&amp;quot; assumes that if given &amp;#39;relative&amp;#39; URI has a scheme, it should provide an authority and complete path to the constructed URI. However, a URI can have a scheme but still be relative, requiring the authority and base path of the &amp;#39;base&amp;#39; URI. &lt;br/&gt;
&lt;br/&gt;
Demonstration code:&lt;br/&gt;
&lt;br/&gt;
URI base = new URI(&amp;quot;&lt;a href=&quot;http://www.example.com/some/page&quot;&gt;http://www.example.com/some/page&lt;/a&gt;&amp;quot;);&lt;br/&gt;
URI rel = new URI(&amp;quot;http:boo&amp;quot;);&lt;br/&gt;
URI derel = new URI(base,rel);&lt;br/&gt;
derel.toString();&lt;br/&gt;
(java.lang.String) http:boo&lt;br/&gt;
&lt;br/&gt;
In fact, derel should be &amp;quot;&lt;a href=&quot;http://www.example.com/some/boo&quot;&gt;http://www.example.com/some/boo&lt;/a&gt;&amp;quot;. &lt;br/&gt;
&lt;br/&gt;
RFC2396 is a little confused about this; section 3.1 states &amp;quot;&amp;quot;Relative URI references are distinguished from absolute URI in that they do not begin with a scheme name.&amp;quot; But, in section 5, there are several sentences talking about relative URIs that begin with schemes (and how this prevents using relative URIs that have leading path segments that look like scheme identifiers). &lt;br/&gt;
&lt;br/&gt;
RFC3896, which supercedes RFC2396, removes the implication a relative URI cannot begin with a scheme, leaving the other text explcitly discussing relative URIs with schemes. &lt;br/&gt;
&lt;br/&gt;
Both Firefox (1.5) and IE (6.0) treat &amp;quot;http:boo&amp;quot; the same as &amp;quot;boo&amp;quot; for purposes of derelativization against an HTTP base URI, which would give the final URI &amp;quot;&lt;a href=&quot;http://www.example.com/some/boo&quot;&gt;http://www.example.com/some/boo&lt;/a&gt;&amp;quot; in the example above. &lt;br/&gt;
&lt;br/&gt;
Even relative URIs like &amp;quot;http:../../boo&amp;quot; are explicitly legal. &lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12344473">HTTPCLIENT-587</key>
            <summary>derelativizing of relative URIs with a scheme is incorrect</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="gojomo">Gordon Mohr</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Jun 2006 08:52:19 +0100</created>
                <updated>Sun, 22 Apr 2007 08:11:19 +0100</updated>
                    <resolved>Wed, 21 Jun 2006 18:54:54 +0100</resolved>
                            <version>3.0.1</version>
                                <fixVersion>3.1 Alpha 1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12416435" author="gojomo" created="Fri, 16 Jun 2006 08:53:55 +0100"  >Er, that&amp;#39;s RFC3986 that obsoletes RFC2396. </comment>
                    <comment id="12416521" author="olegk" created="Fri, 16 Jun 2006 22:29:01 +0100"  >Gordon,&lt;br/&gt;
URI code in HttpClient is broken beyond redemption and will be removed as of next major version. I would not like to spend a single cycle on trying to fix numerous problems with URI class unless absolutely necessary. Does this problem affect a production system or it is just nit picking?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12416562" author="gojomo" created="Sat, 17 Jun 2006 01:54:06 +0100"  >For all of 3.0.1 URI&amp;#39;s problems, it&amp;#39;s better than the Sun class.&lt;br/&gt;
&lt;br/&gt;
Is the next version&amp;#39;s URI class under development and verified to avoid this problem? &lt;br/&gt;
&lt;br/&gt;
We are still using the 3.x HttpClient in production systems (web crawling) , since no later releases are officially available. This issue showed up in several real crawls -- in the usual case (where the page author made a mistake, for example &amp;quot;http:&lt;a href=&quot;http://www.example.com&quot;&gt;www.example.com&lt;/a&gt;&amp;quot;) the impact is low but there is a risk of important, compliant HREFs not being followed. &lt;br/&gt;
&lt;br/&gt;
I will try to work up a patch. </comment>
                    <comment id="12416567" author="olegk" created="Sat, 17 Jun 2006 02:17:05 +0100"  >&amp;gt; For all of 3.0.1 URI&amp;#39;s problems, it&amp;#39;s better than the Sun class. &lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s wrong with the JDK URI class? I thought it was kind of okay? Actually I was thinking about suggesting that our &amp;#39;home brewed&amp;#39; URI class be replaced with the JDK URI class, as HttpClient 4.0 will require Java 1.4 anyways.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; We are still using the 3.x HttpClient in production systems (web crawling) , since no later releases are officially available.&lt;br/&gt;
&lt;br/&gt;
Have you looked at HttpCore? I believe its API should be better suited for web crawlers. For one HttpCore does not attempt to validate request-URIs. It will happily execute requests against any arbitrary request URI&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I will try to work up a patch.&lt;br/&gt;
&lt;br/&gt;
Please do so. If you do not provide a fix for this bug, most likely it will have to wait until 4.0&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12416592" author="gojomo" created="Sat, 17 Jun 2006 05:46:44 +0100"  >&amp;gt; What&amp;#39;s wrong with the JDK URI class?&lt;br/&gt;
&lt;br/&gt;
(a) It still has bugs where it fails to implement the spec at well as httpclient.URI. One recent example, still a problem in current JDK 1.6 betas:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4708535&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4708535&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
java.net.URI base = new java.net.URI(&amp;quot;&lt;a href=&quot;http://www.example.com/some/page&quot;&gt;http://www.example.com/some/page&lt;/a&gt;&amp;quot;);&lt;br/&gt;
java.net.URI rel = new java.net.URI(&amp;quot;&amp;quot;);&lt;br/&gt;
java.net.URI derel = base.resolve(rel);&lt;br/&gt;
derel.toString();&lt;br/&gt;
(java.lang.String) &lt;a href=&quot;http://www.example.com/some/&quot;&gt;http://www.example.com/some/&lt;/a&gt;   // INCORRECT&lt;br/&gt;
&lt;br/&gt;
org.apache.commons.httpclient.URI base = new org.apache.commons.httpclient.URI(&amp;quot;&lt;a href=&quot;http://www.example.com/some/page&quot;&gt;http://www.example.com/some/page&lt;/a&gt;&amp;quot;);&lt;br/&gt;
org.apache.commons.httpclient.URI rel = new org.apache.commons.httpclient.URI(&amp;quot;&amp;quot;);&lt;br/&gt;
org.apache.commons.httpclient.URI derel = new org.apache.commons.httpclient.URI(base,rel);&lt;br/&gt;
derel.toString();&lt;br/&gt;
(java.lang.String) &lt;a href=&quot;http://www.example.com/some/page&quot;&gt;http://www.example.com/some/page&lt;/a&gt;  // CORRECT&lt;br/&gt;
&lt;br/&gt;
(b) java.net.URI and its maintainers reject the idea that there should be any facility in the URI class for tolerating the same sorts of formal spec deviations often seen in real URIs and domain names. &lt;br/&gt;
&lt;br/&gt;
As one example, domain names with &amp;#39;_&amp;#39; are technically illegal but have often been tolerated by DNS-related software and we have run across functioning websites at subdomains with &amp;#39;_&amp;#39; in their name. Browsers browse these sites fine, so we want to be able to crawl them. java.net.URI can&amp;#39;t help us.&lt;br/&gt;
&lt;br/&gt;
Now of course, it&amp;#39;s legitimate and useful to provide a class which regirously implements all written standards. Not everyone wants a class that also tolerates de facto practices. But that leads us to the ultimate problem with java.net.URI:&lt;br/&gt;
&lt;br/&gt;
(c) java.net.URI licensing and language declarations make it resistant to reuse and adaptation to other legitimate uses&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s not open source and major portions of its implementation are &amp;#39;private&amp;#39; or &amp;#39;final&amp;#39;. So it&amp;#39;s impossible to reuse 99% of it (such as its various RFC syntax character-class definitions, fields, and working parsing code) while also either  patching the bugs like in (a) above or overriding the strictness which makes it unsuitable for some purposes like in (b) above. &lt;br/&gt;
&lt;br/&gt;
In comparison, the org.apache.commons.httpclient.URI class is friendly to subclassing (which we&amp;#39;ve used to work around bugs and change the behavior to better fit our problem domain) and if that didn&amp;#39;t work ith respect to a bug, we&amp;#39;d at least have the option of patching it ourselves and redistributing the fix. &lt;br/&gt;
&lt;br/&gt;
So our project would very much miss the pretty-good (and at least serviceable when broken) httpclient.URI class if it were dropped in favor of the JDK java.net.URI class. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; Have you looked at HttpCore?&lt;br/&gt;
&lt;br/&gt;
Only a little. Until it has an official test release, and comes close to matching the HttpClient facilities for cookies, URIs,  etc., it probably won&amp;#39;t be suitable to replace our HttpClient 3.x use.&lt;br/&gt;
&lt;br/&gt;
(The ability to issue unvalidated request strings would be useful -- but we&amp;#39;ve already patched this into HttpClient 3.x to the extent we need it. Also, we still need to perform best-effort, highly-tolerant parsing of URIs into their traditional constituent parts for various decisions and kinds of analysis.)</comment>
                    <comment id="12416602" author="gojomo" created="Sat, 17 Jun 2006 07:42:33 +0100"  >Patch with unit test illustrating problem, and patch which resolves unit test without breaking any prior unit tests. &lt;br/&gt;
&lt;br/&gt;
Theory of patch is:&lt;br/&gt;
&lt;br/&gt;
(1) There is a block that previously ran when relative._scheme !=null -- it assumed this meant &amp;#39;relative&amp;#39; was an absolute URI and copied all its state into the new URI instance. Now, this block only runs if scheme !=null AND either the relative._scheme is different than the &amp;#39;base&amp;#39; scheme (meaning no derelativization would be appropriate) or relative._authority is non-null (implying it truly is an absolute URI)&lt;br/&gt;
&lt;br/&gt;
(2) There is a block for derelativizing the path that previously ran only when relative._scheme and relative._authority were both null -- assuming that this was the only case where combining the paths was necessary. Now, this block also runs when relative._authority is null and the relative._scheme is identical to the base_scheme. &lt;br/&gt;
&lt;br/&gt;
(3) The early setting of this._authority to base._authority (~line 6 of method) counts on authority being reset later if necessary. It appears the same tack should be taken with _is_net_path; otherwise the later setURI() will not retain the set-up _authority. &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12416625" author="olegk" created="Sat, 17 Jun 2006 23:14:10 +0100"  >Looks good to me. I&amp;#39;ll check in the patch in a few days if nobody complains&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12416972" author="rolandw" created="Wed, 21 Jun 2006 03:56:34 +0100"  >Patch looks good to me.&lt;br/&gt;
&lt;br/&gt;
I agree with (3), _authority and _is_net_path seem to be partially redundant.&lt;br/&gt;
The &amp;quot;net path&amp;quot; stuff may be an attempt to support Windows-style network paths with the same class.&lt;br/&gt;
I hope this code somehow vanishes from 4.0 :-(&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12417075" author="olegk" created="Wed, 21 Jun 2006 18:54:54 +0100"  >Patch checked in. Many thanks, Gordon&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12335571" name="httpclient-587.patch" size="3227" author="gojomo" created="Sat, 17 Jun 2006 07:42:33 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 16 Jun 2006 21:29:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133627</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47917</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>