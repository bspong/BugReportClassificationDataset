<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:12:27 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-1044/HTTPCLIENT-1044.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-1044] DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-1044</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>See attached patch file for a fix:&lt;br/&gt;
&lt;br/&gt;
Fix treats PUT requests as idempotent, marking them to be retried when their enclosed HttpEntity is either null or repeatable.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12495648">HTTPCLIENT-1044</key>
            <summary>DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="steffenyount">Steffen Yount</reporter>
                        <labels>
                    </labels>
                <created>Sat, 15 Jan 2011 02:16:23 +0000</created>
                <updated>Fri, 23 Sep 2011 15:07:11 +0100</updated>
                    <resolved>Tue, 8 Feb 2011 21:08:18 +0000</resolved>
                            <version>4.0.3</version>
                <version>4.1 Final</version>
                                <fixVersion>4.2 Alpha1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12982007" author="steffenyount" created="Sat, 15 Jan 2011 02:19:23 +0000"  >Here&amp;#39;s the patch</comment>
                    <comment id="12982048" author="olegk" created="Sat, 15 Jan 2011 08:49:07 +0000"  >Steffen,&lt;br/&gt;
&lt;br/&gt;
While PUT methods should be idempotent, in real life often they are not. This change may potentially break existing applications in very nasty ways. My personal preference would be to not apply this change.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12982668" author="olegk" created="Mon, 17 Jan 2011 15:17:35 +0000"  >Closing as WONTFIX. I would like to keep the default implementation more idiot-proof. Applications whose PUT methods are known to be idempotent can still provide a custom implementation of HttpRequestRetryHandler to have PUT methods retried automatically.&lt;br/&gt;
&lt;br/&gt;
Oleg  </comment>
                    <comment id="12984002" author="steffenyount" created="Thu, 20 Jan 2011 02:20:16 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
Thanks for considering my patch, and sorry for the long turn around in getting back to you.&lt;br/&gt;
&lt;br/&gt;
*** I think there is value in uniform application/non-application of the RFC&amp;#39;s rules here:&lt;br/&gt;
&lt;br/&gt;
To demonstrate what I mean, I believe I can make a statement equally valid to your first comment with respect to the GET method.&lt;br/&gt;
&lt;br/&gt;
&amp;quot;While GET methods should be limited to actions of retrieval and be idempotent, in real life often they are not. The current implementation may already be breaking existing applications in very nasty ways.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
Some common examples of GET method usage diverging from spec in this way: html form submissions, RPC based APIs over HTTP, tracking pixel requests, JSONP APIs (hack for cross domain scripting limitations).&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think the RFC&amp;#39;s idempotence rules should be selectively respected on some HTTP methods and not on others (without really good reasons). &amp;quot;Do or do not&amp;quot; as Yoda would say. :-)&lt;br/&gt;
&lt;br/&gt;
The current implementation retries GET, HEAD, DELETE, OPTIONS, and TRACE assuming idempotence.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
*** It is better to keep the default implementation more idiot-proof:&lt;br/&gt;
&lt;br/&gt;
I agree with your assessment that assuming idempotence and unintentionally retrying non-idempotent requests can break applications in &amp;quot;very nasty ways&amp;quot;. &lt;br/&gt;
&lt;br/&gt;
The nastiest of these ways are in debugging what went wrong, since a) the failure modes that lead to retries are rarely replicated or tested by app developers and b) many novice developers lack the insight to understand the value of idempotent implementations and to identify idempotence/non-idempotence related bugs.&lt;br/&gt;
&lt;br/&gt;
Considering that automatic retries are optional as far as the RFC is concerned and considering the two points above, I&amp;#39;m on board with your assessment that the default behavior of the DefaultHttpRequestRetryHandler shouldn&amp;#39;t be to retry PUT methods automatically.&lt;br/&gt;
&lt;br/&gt;
But, I also think this reasoning should be taken one step further in the interest of uniformity and idiot-proofing: the default behavior shouldn&amp;#39;t be using RFC defined method idempotence to enable/disable automatic retries on any of the HTTP methods.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
*** Still, I think it would be great for the HttpClient libraries to provide an out of the box HttpRequestRetryHandler that uses the RFC2616&amp;#39;s rules for HTTP method idempotence to enable/disable automatic retries.&lt;br/&gt;
&lt;br/&gt;
Sure, it is true that I can use a custom implementation of HttpRequestRetryHandler. But the supported behavior I&amp;#39;m asking for here isn&amp;#39;t something crazy. It&amp;#39;s something that should work in apps that respect the RFC2616&amp;#39;s rules for HTTP method idempotence, and it is something that could be provided out of the box. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
*** I&amp;#39;ve provided 2 new alternative patches to make changes in this direction, please let me know if either one is acceptable. &lt;br/&gt;
&lt;br/&gt;
The changes in &amp;quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-1044&quot; title=&quot;DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.&quot;&gt;&lt;strike&gt;HTTPCLIENT-1044&lt;/strike&gt;&lt;/a&gt;_planB.patch&amp;quot; are:&lt;br/&gt;
1. Defaulting to not retry GET, HEAD, DELETE, OPTIONS, and TRACE based on assumed idempotence.&lt;br/&gt;
2. Adding a check to prevent resending unrepeatable entities that have already been sent once.&lt;br/&gt;
3. Removing the &amp;quot;requestSentRetryEnabled&amp;quot; flag which seemed to be included for specifying entity repeatability and allowed both PUT and POST methods to be resent.&lt;br/&gt;
4. Adding a &amp;quot;retryIdempotentMethods&amp;quot; flag in place of the &amp;quot;requestSentRetryEnabled&amp;quot; flag. This flag allows GET, HEAD, PUT, DELETE, OPTIONS, and TRACE methods to be resent. (default value: false) &lt;br/&gt;
&lt;br/&gt;
The changes in &amp;quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-1044&quot; title=&quot;DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.&quot;&gt;&lt;strike&gt;HTTPCLIENT-1044&lt;/strike&gt;&lt;/a&gt;_planC.patch&amp;quot; are:&lt;br/&gt;
1. Defaulting to not retry GET, HEAD, DELETE, OPTIONS, and TRACE based on assumed idempotence.&lt;br/&gt;
2. Adding a check to prevent resending unrepeatable entities that have already been sent once.&lt;br/&gt;
3. Adding a new DefaultIdempotentHttpRequestRetryHandler class which does allow GET, HEAD, PUT, DELETE, OPTIONS, and TRACE methods to be resent.&lt;br/&gt;
&lt;br/&gt;
Cheers,&lt;br/&gt;
-Steffen</comment>
                    <comment id="12984117" author="olegk" created="Thu, 20 Jan 2011 09:58:57 +0000"  >(1) The check for the enclosing entity being repeatable is redundant and unnecessary. The responsibility to decide as to whether or not an entity is repeatable lies with the request director.&lt;br/&gt;
&lt;br/&gt;
(2) There are many ways people can do silly things. I am aware that some web applications can process GET requests in such a manner that effectively renders them non-idempotent. This is however fairly rare. Entity enclosing methods are more likely to cause issues when retried automatically. The default HttpRequestRetryHandler implementation represents a compromise between requirements of the HTTP spec and tolerance to common misbehaviours by real world applications.&lt;br/&gt;
&lt;br/&gt;
(3) I can live with plan C as long as the default HttpRequestRetryHandler implementation remains unchanged and the point (1) is taken into consideration.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12984490" author="steffenyount" created="Thu, 20 Jan 2011 23:56:36 +0000"  >Cool, I see now where the RequestDirector is doing that...&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve uploaded &amp;quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-1044&quot; title=&quot;DefaultHttpRequestRetryHandler is not handling PUT as an idempotent method for retries, though RFC2616 section 9.1.2 clearly defines it to be one.&quot;&gt;&lt;strike&gt;HTTPCLIENT-1044&lt;/strike&gt;&lt;/a&gt;_planC_v2.patch&amp;quot; which implements your suggestions.&lt;br/&gt;
&lt;br/&gt;
Is this the best way for me to submit this change?&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
-Steffen</comment>
                    <comment id="12984908" author="olegk" created="Fri, 21 Jan 2011 20:12:04 +0000"  >Yes, it is. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll commit the patch as soon as we have some kind of a release plan for 4.2 (or 4.1.1)&lt;br/&gt;
&lt;br/&gt;
Oleg </comment>
                    <comment id="12985225" author="steffenyount" created="Sat, 22 Jan 2011 23:35:27 +0000"  >Great!&lt;br/&gt;
&lt;br/&gt;
Thank you,&lt;br/&gt;
-Steffen</comment>
                    <comment id="12992187" author="olegk" created="Tue, 8 Feb 2011 21:08:18 +0000"  >Steffen&lt;br/&gt;
&lt;br/&gt;
I ended up committing a slightly different implementation conceptually similar to the one proposed by you. Please review:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/httpclient/src/main/java/org/apache/http/impl/client/StandardHttpRequestRetryHandler.java&quot;&gt;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/httpclient/src/main/java/org/apache/http/impl/client/StandardHttpRequestRetryHandler.java&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
(*shameless extortion*) Also, feel free to contribute test cases&lt;br/&gt;
&lt;br/&gt;
Oleg  </comment>
                    <comment id="12992259" author="steffenyount" created="Wed, 9 Feb 2011 00:56:30 +0000"  >It looks like the two implementations will produce identical behaviors.&lt;br/&gt;
&lt;br/&gt;
For the choice of class name I like your name &amp;quot;StandardHttpRequestRetryHandler&amp;quot; better.&lt;br/&gt;
&lt;br/&gt;
Also, I think your choice of positively identifying the idempotent methods rather than checking for not-a-POST like I did, makes the code much cleaner to read... almost self documenting :-)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m happy with your implementation.&lt;br/&gt;
&lt;br/&gt;
Thank you for spending time on this issue!&lt;br/&gt;
&lt;br/&gt;
While, your extortion does make me feel guilty, and I know I would probably be a better programmer if I figured out how to integrate with the test framework, I still don&amp;#39;t see myself getting around to writing test cases for this anytime soon... Sorry about that, it&amp;#39;s a really busy quarter for me...&lt;br/&gt;
&lt;br/&gt;
Cheers and thanks again!&lt;br/&gt;
-Steffen</comment>
                </comments>
                    <attachments>
                    <attachment id="12468437" name="HTTPCLIENT-1044.patch" size="2848" author="steffenyount" created="Sat, 15 Jan 2011 02:19:23 +0000" />
                    <attachment id="12468816" name="HTTPCLIENT-1044_planB.patch" size="4863" author="steffenyount" created="Thu, 20 Jan 2011 02:22:10 +0000" />
                    <attachment id="12468817" name="HTTPCLIENT-1044_planC.patch" size="7174" author="steffenyount" created="Thu, 20 Jan 2011 02:22:10 +0000" />
                    <attachment id="12468922" name="HTTPCLIENT-1044_planC_v2.patch" size="5145" author="steffenyount" created="Thu, 20 Jan 2011 23:46:46 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 15 Jan 2011 08:49:07 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>59595</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>46938</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>