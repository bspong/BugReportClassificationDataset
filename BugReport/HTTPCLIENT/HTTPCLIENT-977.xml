<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:22:47 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-977/HTTPCLIENT-977.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-977] provide a memcached implementation for HttpCache</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-977</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>The feature here would be an implementation of the HttpCache interface that stored cache entries in memcached.</description>
                <environment></environment>
            <key id="12471323">HTTPCLIENT-977</key>
            <summary>provide a memcached implementation for HttpCache</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="cimjmoore">Jonathan Moore</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Aug 2010 18:28:12 +0100</created>
                <updated>Tue, 25 Jan 2011 11:00:17 +0000</updated>
                    <resolved>Wed, 8 Sep 2010 22:22:04 +0100</resolved>
                                            <fixVersion>4.1 Beta1</fixVersion>
                                <component>HttpCache</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12897347" author="cimjmoore" created="Wed, 11 Aug 2010 18:29:53 +0100"  >We have some outdated code that does this that we are starting to pick up to implement and contribute back for this one.&lt;br/&gt;
&lt;br/&gt;
One major question is how the contribution should be structured.&lt;br/&gt;
&lt;br/&gt;
Should this be a new top-level module under httpcomponents-client, so that it can be optionally included as desired?&lt;br/&gt;
&lt;br/&gt;
Or should it show up as a new package (with associated dependencies) under the httpclient-cache module?&lt;br/&gt;
</comment>
                    <comment id="12900761" author="azeem" created="Fri, 20 Aug 2010 17:36:17 +0100"  >&lt;br/&gt;
-This patch adds the package org.apache.http.impl.client.cache.memcached, and tests for this class.&lt;br/&gt;
- The package contains a single class, MemcachedHttpCacheStorage, which is a HttpCache implementation built around Memcached. &lt;br/&gt;
-It uses Memcached client version 2.5 for JAVA.  The pom.xml was also updated to incorporate this. &lt;br/&gt;
-The patch implements HttpCacheOperationException. &lt;br/&gt;
&lt;br/&gt;
This patch is submitted by the permission of my employer. &lt;br/&gt;
&lt;br/&gt;
Thank you,&lt;br/&gt;
Mohammed Azeem</comment>
                    <comment id="12901150" author="olegk" created="Sun, 22 Aug 2010 11:49:25 +0100"  >Mohammed et al&lt;br/&gt;
&lt;br/&gt;
There are some bad news. It turned out that memcached is licensed under kind of license of its own [1].  It looks like MIT type of license to me, but I am not sure and I am not a legal expect. Wikipedia categories that license as &amp;#39;Permissive free software licence&amp;#39; but it does not necessarily mean it is compatible with ASLv2 used by Apache products.&lt;br/&gt;
&lt;br/&gt;
I am very reluctant to go through the pains of dealing with our legal folks in order to find out whether or not the license is compatible with ASLv2 only to be able to include just one optional class.&lt;br/&gt;
&lt;br/&gt;
Can you live with memcached cache storage implementation not being a part of stock version of HttpClient?&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;http://github.com/memcached/memcached/blob/master/LICENSE&quot;&gt;http://github.com/memcached/memcached/blob/master/LICENSE&lt;/a&gt;&lt;br/&gt;
[2] &lt;a href=&quot;http://en.wikipedia.org/wiki/Permissive_free_software_license&quot;&gt;http://en.wikipedia.org/wiki/Permissive_free_software_license&lt;/a&gt;</comment>
                    <comment id="12901215" author="matthew" created="Sun, 22 Aug 2010 22:44:46 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
(I work with Jonathan and Mohammed)&lt;br/&gt;
&lt;br/&gt;
since we are using spymemcached to talk to memcached, isn&amp;#39;t spymemcached&amp;#39;s license (which is MIT) the one we must be concerned with?&lt;br/&gt;
&lt;br/&gt;
-matt </comment>
                    <comment id="12901373" author="vwdiesel" created="Mon, 23 Aug 2010 13:47:55 +0100"  >In either event I would say that we probably need to remove this contribution in the short term so as not to hold up the overall release of the next version of the client.  We can then work with Oleg to find the right path to either:&lt;br/&gt;
&lt;br/&gt;
1) Contribute to ASF because the license is indeed compatible as determined by the ASF.&lt;br/&gt;
2) Source/Store the contribution on something like google code with ASFs agreement that we can put a link to the google code site and the memcached implementation for people to download&lt;br/&gt;
&lt;br/&gt;
Both paths should still provided the needed functionality to people - just a question of the ease with which they can find it.&lt;br/&gt;
&lt;br/&gt;
There may be other options that I haven&amp;#39;t listed.&lt;br/&gt;
&lt;br/&gt;
Joe</comment>
                    <comment id="12901445" author="olegk" created="Mon, 23 Aug 2010 16:33:28 +0100"  >MIT license is compatible with ASLv2, so at the very least we would not need to go through the license approval process. Nevertheless, we would have to comply with the requirements of the license such giving a proper attribution to the author of the library and distributing a copy of the license itself with each the release package of HttpClient. ASL release process is already an enormous pain the in rectum and I am reluctant to make it even more complex because of an optional component. &lt;br/&gt;
&lt;br/&gt;
What could be another possibility is using the memcache storage backend as an example of writing a custom HttpCacheStorage in the tutorial. This way we would not have to deal with distribution of the library itself, while the implementation would still be available to the users, albeit in source only.&lt;br/&gt;
&lt;br/&gt;
What is your preference?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12901451" author="vwdiesel" created="Mon, 23 Aug 2010 16:41:55 +0100"  >I would say we take two paths.&lt;br/&gt;
&lt;br/&gt;
1) We do as you describe and place the source into a tutorial about the use of the tool (to make sure that there is adequate reference to a memcache implementation)&lt;br/&gt;
2) We have a link out to a remote google code as to provide a place for ongoing support and work on memcached caching and implementation work to be done.&lt;br/&gt;
&lt;br/&gt;
This will allow there to be a working version included in the apache release and for there to be a place to get potentially newer releases outside of the apache release cycle.  Does this make sense or is it over kill?&lt;br/&gt;
&lt;br/&gt;
Joe</comment>
                    <comment id="12902391" author="olegk" created="Wed, 25 Aug 2010 13:02:13 +0100"  >I personally think that would be an overkill for a library which essentially consists of just one file. Let&amp;#39;s revisit this issue in the BETA development phase.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12902395" author="aelder" created="Wed, 25 Aug 2010 13:06:59 +0100"  >Could it be an optional dependency that is not included in the HC distribution? That way the source code can be included in svn and the src distribution and the Memcached dependency would be used by Maven when building the source but the Memcached  artifacts themselves would not be included in any distribution so no licensing needs to be changed.&lt;br/&gt;
</comment>
                    <comment id="12902419" author="olegk" created="Wed, 25 Aug 2010 13:45:54 +0100"  >I am not sure this would save us from having to give appropriate attribution to the original author and to distribute a copy of the license with every copy of the caching module. I may be wrong here, though.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12906347" author="cimjmoore" created="Sun, 5 Sep 2010 15:12:28 +0100"  >If we make the memcached client Maven dependency&amp;#39;s scope be &amp;quot;provided&amp;quot;, does that fix our licensing issues? Then a client may link it into their executable at their option, and we can just provide instructions on how to do so if desired. Then there would actually not be anything included from that project (neither source code nor compiled binary). &lt;br/&gt;
&lt;br/&gt;
Failing that, can we just include the source code for MemcachedHttpCacheStorage.java in httpclient-contrib for now?&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;ll separately pursue options for providing non-source access (perhaps it&amp;#39;s worth building an Apache 2.0-licensed Java memcached client, for example).&lt;br/&gt;
</comment>
                    <comment id="12906459" author="aelder" created="Mon, 6 Sep 2010 09:37:50 +0100"  >In my opinion yes that would be fine. Either optional or provided would stop the Memcached dependency getting included so there would be no additional licensing requirements for the HC distributions.</comment>
                    <comment id="12906949" author="olegk" created="Tue, 7 Sep 2010 20:49:12 +0100"  >I see no point being a more fervent Catholic than the Pope himself. As we are no going to distribute the memcached client with the cache module, most likely we are all clean. If there is any issue with the attribution clause of the MIT license, we can add it later.&lt;br/&gt;
&lt;br/&gt;
Mohammed,&lt;br/&gt;
&lt;br/&gt;
Would it be a big deal for you to rebuild the patch against the latest snapshot off the trunk?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12906962" author="azeem" created="Tue, 7 Sep 2010 21:48:10 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Sure, I can rebuild the patch against the latest snapshot off the trunk.&lt;br/&gt;
&lt;br/&gt;
Mohammed</comment>
                    <comment id="12907423" author="azeem" created="Wed, 8 Sep 2010 21:45:43 +0100"  >Rebuilt the patch against the latest trunk. So, the patch now includes MemcachedHttpCacheStorage.java and TestMemcachedHttpCacheStorage.java. The patch is being submitted with the permission of my employer. </comment>
                    <comment id="12907435" author="olegk" created="Wed, 8 Sep 2010 22:22:04 +0100"  >Patch committed. Many thanks, Mohammed&lt;br/&gt;
&lt;br/&gt;
Is there any chance we could avoid buffering the cache entries in memory when saving to / loading from the cache storage?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12452642" name="MemcachedHttpCacheStorage.patch" size="35483" author="azeem" created="Fri, 20 Aug 2010 17:36:17 +0100" />
                    <attachment id="12454157" name="MemcachedHttpCacheStoragePatch.patch" size="11670" author="azeem" created="Wed, 8 Sep 2010 21:45:43 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 20 Aug 2010 16:36:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133978</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47335</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>