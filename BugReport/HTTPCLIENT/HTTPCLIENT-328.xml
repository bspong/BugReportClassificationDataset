<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:16:17 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-328/HTTPCLIENT-328.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-328] Proxy tunneling/auth with CONNECT for non-HTTP protocols</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-328</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>HttpClient would be even more useful if it supported connections tunneled &lt;br/&gt;
through proxies and proxy authentication for non-HTTP protocols. E.g. Binary &lt;br/&gt;
protocols such as SSH or JXTA-TCP could be tunneled through a web proxy if &lt;br/&gt;
HttpClient provided access to the underlying Socket after the negotiations &lt;br/&gt;
(auth, CONNECT) with the web proxy were complete.</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333887">HTTPCLIENT-328</key>
            <summary>Proxy tunneling/auth with CONNECT for non-HTTP protocols</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="m_sample@canada.com">Mike Sample</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Apr 2004 13:26:06 +0100</created>
                <updated>Wed, 16 Feb 2011 20:43:48 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:42 +0100</resolved>
                            <version>Snapshot</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381550" author="m_sample@canada.com" created="Fri, 2 Apr 2004 13:27:47 +0100"  >Created an attachment (id=11098)&lt;br/&gt;
Source code/mods implementing proxy tunneling/auth for non-HTTP&lt;br/&gt;
</comment>
                    <comment id="12381551" author="olegk" created="Sat, 3 Apr 2004 06:22:32 +0100"  >Mike,&lt;br/&gt;
Are these changes against CVS HEAD or HTTPCLIENT_2_0_BRANCH? It would simplify&lt;br/&gt;
(and speed up) the review process substantially if you submit the patch in diff&lt;br/&gt;
-u format. &lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://www.apache.org/dev/contributors.html#patches&quot;&gt;http://www.apache.org/dev/contributors.html#patches&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Also consider providing a sample application to demonstrate the use of this&lt;br/&gt;
feature. The demo should go into src/examples directory&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/src/examples/?only_with_tag=HTTPCLIENT_2_0_BRANCH&quot;&gt;http://cvs.apache.org/viewcvs.cgi/jakarta-commons/httpclient/src/examples/?only_with_tag=HTTPCLIENT_2_0_BRANCH&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381552" author="m_sample@canada.com" created="Sat, 3 Apr 2004 07:56:11 +0100"  >Created an attachment (id=11110)&lt;br/&gt;
Patch to HEAD to provide access to the Socket after CONNECT. Must still manually add NullMethod.java from initial src zip&lt;br/&gt;
</comment>
                    <comment id="12381553" author="m_sample@canada.com" created="Sat, 3 Apr 2004 08:37:41 +0100"  >Created an attachment (id=11111)&lt;br/&gt;
Src files for an example of using HttpClient to tunnel non-HTTP. Warning compiled but not tested. Based on tested code tho.&lt;br/&gt;
</comment>
                    <comment id="12381554" author="m_sample@canada.com" created="Sat, 3 Apr 2004 08:46:44 +0100"  >Oleg, &lt;br/&gt;
&lt;br/&gt;
I based my changes/patch on the HEAD rev. Hope this isn&amp;#39;t too big of an &lt;br/&gt;
inconvenience to get this stuff into the next stable release.&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think the rcs $ variables that have different values in the patch file &lt;br/&gt;
will cause any problems. They should be replaced upon checkin/checkout.&lt;br/&gt;
&lt;br/&gt;
Also, the patch src files contain the obligatory &amp;#39;this file is different from &lt;br/&gt;
the original Apache version&amp;#39; notice which should probably be nuked before &lt;br/&gt;
checkin.&lt;br/&gt;
&lt;br/&gt;
As you will notice, the way the Socket is detached in not the most efficient &lt;br/&gt;
in that HttpClient creates various input stream wrappers etc. that will be &lt;br/&gt;
discarded.  Something to consider if re-factoring work goes on later. The goal &lt;br/&gt;
of this change was to disturb as little as possible...&lt;br/&gt;
&lt;br/&gt;
/Mike</comment>
                    <comment id="12381555" author="olegk" created="Sun, 4 Apr 2004 18:35:03 +0100"  >Mike,&lt;br/&gt;
I believe I might have a different solution to this problem. It takes a little&lt;br/&gt;
more code but on the other hand it requires virtually no modifications to the&lt;br/&gt;
existing classes, primarily HttpConnection. There&amp;#39;s also no need to &amp;quot;detach&amp;quot; the&lt;br/&gt;
socket potentially creating problems for the connection manager.&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12381556" author="olegk" created="Sun, 4 Apr 2004 18:36:10 +0100"  >Created an attachment (id=11121)&lt;br/&gt;
Patch (a slightly different take on the problem)&lt;br/&gt;
</comment>
                    <comment id="12381557" author="m_sample@canada.com" created="Mon, 5 Apr 2004 02:53:26 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s a much nicer way of doing it.  In my original solution I was concerned &lt;br/&gt;
about detachSocket confusing the HttpConnection (in fact it took me a lot of &lt;br/&gt;
fiddling around to make so HttpConnection didn&amp;#39;t close the Socket on me).  Your &lt;br/&gt;
solution has more code but is much cleaner so maintenance shoud be easier than &lt;br/&gt;
with the few lines of my hack.&lt;br/&gt;
&lt;br/&gt;
If I understand your new code and HttpClient correctly, because you use the &lt;br/&gt;
connect method directly, one should be able to control how the socket is &lt;br/&gt;
created by using a non-secure ProtocolSocketFactory.  Is this correct? If so &lt;br/&gt;
awesome!&lt;br/&gt;
&lt;br/&gt;
Any idea about which release these changes would go into and when that release &lt;br/&gt;
might occur?  &lt;br/&gt;
&lt;br/&gt;
Thx, &lt;br/&gt;
&lt;br/&gt;
/Mike</comment>
                    <comment id="12381558" author="becke@u.washington.edu" created="Mon, 5 Apr 2004 12:40:29 +0100"  >Created an attachment (id=11131)&lt;br/&gt;
Another patch&lt;br/&gt;
</comment>
                    <comment id="12381559" author="becke@u.washington.edu" created="Mon, 5 Apr 2004 13:04:36 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
I agree, the ProxyClient is a much better way to handle this.  I have made just a few changes to your &lt;br/&gt;
patch to simplify things a little.  In particular ProxyClient now makes use of the HttpMethodDirector &lt;br/&gt;
instead of handling authentication on its own. &lt;br/&gt;
&lt;br/&gt;
Mike, in regard to your question, you are correct.  You will be able to have full control over how the &lt;br/&gt;
socket is created.  The only caveat is that if you want to tunnel SSL you will need to force the proxy to &lt;br/&gt;
connect to port 443.  For example:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;proxyclient.getHostConfiguration().setHost(&amp;quot;SSL-host&amp;quot;, 443);&lt;br/&gt;
&lt;br/&gt;
If a port is not specified, the protocol default (usually 80) will be used.&lt;br/&gt;
&lt;br/&gt;
I imagine these changes will be part of the 3.0 release.  Pinning down an exact ETA for 3.0 may be a &lt;br/&gt;
little difficult.  Does anyone have a particular schedule in mind?&lt;br/&gt;
&lt;br/&gt;
Mike </comment>
                    <comment id="12381560" author="m_sample@canada.com" created="Tue, 6 Apr 2004 00:14:36 +0100"  >Mike B,&lt;br/&gt;
&lt;br/&gt;
Thanks for the clarifications. &lt;br/&gt;
&lt;br/&gt;
One question - you mentioned you must use port 443 in order to get http client &lt;br/&gt;
to use SSL automatically.  Is this, more precisely, that if you use 443 as &lt;br/&gt;
your dst port, HttpClient will use the Protocol&amp;#39;s SecureProtocolSocketFactory &lt;br/&gt;
to add SSL to the underlying Socket created with the &lt;br/&gt;
DefaultProtocolSocketFactory?   If so, then I can use port 443 without &lt;br/&gt;
actually running SSL provided I specifiy my own No-op &lt;br/&gt;
SecureProtocolSocketFactory.     &lt;br/&gt;
&lt;br/&gt;
The reason this is important to me is that my goal is to tunnel jxta through &lt;br/&gt;
web proxies with hopefully not requiring any admin port opening etc., and many &lt;br/&gt;
proxies only allow CONNECT to go to 443 or 8443.   However, if the above &lt;br/&gt;
holds, it looks like if I use 443 with a No-op SPSF I still can&amp;#39;t avoid the &lt;br/&gt;
DefaultProtocolSocketFactory.&lt;br/&gt;
&lt;br/&gt;
Perhaps HttpConnection could create the initial socket for SSL via the &lt;br/&gt;
SecureProtocolSocketFactory&amp;#39;s non-wrapping create methods (since they do not &lt;br/&gt;
appear to be used otherwise) - but may break old httpclient using code unless &lt;br/&gt;
you watched for null and even then some may just throw.   &lt;br/&gt;
&lt;br/&gt;
Alternatively, if the DefaultProtocolSocketFactory could allow pluggable &lt;br/&gt;
implementations, then no one&amp;#39;s existing code would break.   The motivation for &lt;br/&gt;
this is that jxta for example tries to create Sockets with a timeout whereas &lt;br/&gt;
the use of the DefaultSocketFactory for &amp;#39;secure&amp;#39; connections does not.&lt;br/&gt;
&lt;br/&gt;
Thx,&lt;br/&gt;
&lt;br/&gt;
/Mike</comment>
                    <comment id="12381561" author="olegk" created="Tue, 6 Apr 2004 03:55:33 +0100"  >Mike (S)&lt;br/&gt;
The way things have been implemented the default socket factory is always the&lt;br/&gt;
one that is associated with the &amp;#39;http&amp;#39; protocol:&lt;br/&gt;
&lt;br/&gt;
&amp;lt;code_snip&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public synchronized void setHost(String host, int port) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setHost(host, null, port, Protocol.getProtocol(&amp;quot;http&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;lt;/code_snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
There&amp;#39;s absolutely nothing that presents you from registering any other socket&lt;br/&gt;
factory as &amp;#39;http&amp;#39; protocol socket factory. Likewise, you can always register a&lt;br/&gt;
Protocol of you own and always explicitly use that Protocol with the PtoxyClient. &lt;br/&gt;
&lt;br/&gt;
Mike (B)&lt;br/&gt;
&lt;br/&gt;
I have clearly overlooked the possibility of simply (re)using&lt;br/&gt;
HttpMethodDirector. Ironically enough it was me how introduced the safeguard&lt;br/&gt;
against HttpMethodDirector&amp;#39;s recursive execution of the ConnectMethod (which I&lt;br/&gt;
had though was the reason why HttpMethodDirector could not be used)&lt;br/&gt;
&lt;br/&gt;
I think the patch is good to be committed&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381562" author="m_sample@canada.com" created="Tue, 6 Apr 2004 04:52:46 +0100"  >Oleg and Mike B,&lt;br/&gt;
&lt;br/&gt;
Many thanks for getting an idea and a hack to a proper patch.&lt;br/&gt;
&lt;br/&gt;
To clarify all my ramblings about SocketFactories, here is line of code in &lt;br/&gt;
HttpConnection.open() that concerned me:&lt;br/&gt;
&lt;br/&gt;
&amp;lt;code&amp;gt;&lt;br/&gt;
final ProtocolSocketFactory socketFactory =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(isSecure() &amp;amp;&amp;amp; isProxied()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;? new DefaultProtocolSocketFactory()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;: protocolInUse.getSocketFactory());&lt;br/&gt;
&lt;br/&gt;
&amp;lt;/code&amp;gt;&lt;br/&gt;
&lt;br/&gt;
I just wanted to be sure I could avoid the DefaultSocketFactory even if I use &lt;br/&gt;
port 443.  Looks like the solution is simply to always provide a non-Secure &lt;br/&gt;
socketfactory so isSecure() evalutates to false.  Then if I want SSL on top of &lt;br/&gt;
the tunneled socket (and to avoid DefaultSocketFactory) I can simply wrap the &lt;br/&gt;
returned socket myself in the same way as done in SSLProtocolSocketFactory. &lt;br/&gt;
&lt;br/&gt;
Cheers,&lt;br/&gt;
&lt;br/&gt;
/Mike S.</comment>
                    <comment id="12381563" author="becke@u.washington.edu" created="Tue, 6 Apr 2004 10:14:49 +0100"  >Hi Mike,&lt;br/&gt;
&lt;br/&gt;
The DefaultProtocolSocketFactory will only be used if the specified Protocol is an instance of &lt;br/&gt;
SecureProtocolSocketFactory.  Since the SSL tunnel is never actually created by the ProxyClient there is &lt;br/&gt;
no reason to use a secure factory.  Even if one wanted to create a SSL tunnel it would have to be done &lt;br/&gt;
manually as you mention.  So, you are correct.  You can use whichever socket factory you like and then &lt;br/&gt;
manually wrap the socket afterward, if necessary.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381564" author="becke@u.washington.edu" created="Tue, 6 Apr 2004 10:19:16 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I agree the patch is pretty much ready to go.   The only things missing are some JavaDocs.  Do you want &lt;br/&gt;
to finish this one up, or should I take care of it?  I don&amp;#39;t want to steal this one from you :)&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381565" author="olegk" created="Tue, 6 Apr 2004 16:36:55 +0100"  >Mike,&lt;br/&gt;
It&amp;#39;s virtually all your code now, so if you feel like bringing this one to a&lt;br/&gt;
logical conclusion, please do so&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381566" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 10:38:31 +0100"  >Created an attachment (id=11214)&lt;br/&gt;
Yet another patch&lt;br/&gt;
</comment>
                    <comment id="12381567" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 10:40:34 +0100"  >This patch adds some comments and a new inner class ConnectResponse.  This class is used to return &lt;br/&gt;
both the socket and connect method.  The method will be useful in cases when the CONNECT fails.  &lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381568" author="olegk" created="Mon, 12 Apr 2004 19:34:32 +0100"  >Cool. Looks good to me.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381569" author="becke@u.washington.edu" created="Tue, 13 Apr 2004 10:10:09 +0100"  >Patch applied.  Many thanks to Mike Sample for the excellent idea.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                </comments>
                    <attachments>
                    <attachment id="12327082" name="ASF.LICENSE.NOT.GRANTED--connect.patch" size="15458" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 10:38:31 +0100" />
                    <attachment id="12327079" name="ASF.LICENSE.NOT.GRANTED--proxy-tunnel-example.zip" size="5599" author="m_sample@canada.com" created="Sat, 3 Apr 2004 08:37:41 +0100" />
                    <attachment id="12327077" name="ASF.LICENSE.NOT.GRANTED--proxy-tunnel.zip" size="40619" author="m_sample@canada.com" created="Fri, 2 Apr 2004 13:27:47 +0100" />
                    <attachment id="12327081" name="ASF.LICENSE.NOT.GRANTED--socket.patch" size="11367" author="becke@u.washington.edu" created="Mon, 5 Apr 2004 12:40:29 +0100" />
                    <attachment id="12327080" name="ASF.LICENSE.NOT.GRANTED--tunnel.patch" size="20433" author="olegk" created="Sun, 4 Apr 2004 18:36:10 +0100" />
                    <attachment id="12327078" name="ASF.LICENSE.NOT.GRANTED--tunnel-patch.txt" size="8543" author="m_sample@canada.com" created="Sat, 3 Apr 2004 07:56:11 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>28151</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 3 Apr 2004 05:22:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133377</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47231</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>