<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:18:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-589/HTTPCLIENT-589.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-589] Do not consume the remaining response content if the connection is to be closed</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-589</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>I am working on a HttpClient-based application to send and receive potentially large files (up to Gigabytes). When receiving large files the application allows the user to cancel the download, at which time it closes the response input stream behind the scenes.&lt;br/&gt;
&lt;br/&gt;
The input stream currently provided by HttpMethodBase.getResponseBody() for un-chunked responses with a known content length is a ContentLengthInputStream, which automatically reads the remainder of the wrapped response instead of closing it straight away. This behaviour does not work well with very large files as the data is downloaded unnecessarily and the connection is held open for long very periods.&lt;br/&gt;
&lt;br/&gt;
Per the HTTP 1.1 spec section 14.10 it seems to me that either a server or a client in an HTTP 1.1 connection can use the Connection:close directive to signal that a connection will be non-persistent, and will therefore not require that all data be read before the connection can be released (the cleaning up ContentLengthInputStream performs for persistent connections).&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.10&quot;&gt;http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.10&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Could HttpMethodBase be modified to check for this directive, from the server or client, and avoid wrapping the response input stream in ContentLengthInputStream when it is present? It seems straight-forward, though there may be side-effects I am not aware of. &lt;br/&gt;
</description>
                <environment>All environments</environment>
            <key id="12345172">HTTPCLIENT-589</key>
            <summary>Do not consume the remaining response content if the connection is to be closed</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="olegk">Oleg Kalnichevski</assignee>
                                <reporter username="jmurty">James Murty</reporter>
                        <labels>
                    </labels>
                <created>Thu, 29 Jun 2006 09:08:53 +0100</created>
                <updated>Tue, 20 Feb 2007 17:43:12 +0000</updated>
                    <resolved>Tue, 20 Feb 2007 17:43:12 +0000</resolved>
                            <version>3.1 Alpha 1</version>
                                <fixVersion>4.0 Alpha 1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12418359" author="jmurty" created="Thu, 29 Jun 2006 09:21:29 +0100"  >Diff against trunk file to add handling of Connection:close for my specific use-case.&lt;br/&gt;
&lt;br/&gt;
Note that this is a minimal change purely to meet my needs. The Connection:close directive should probably be checked in more cases than are covered in this diff.</comment>
                    <comment id="12418405" author="oglueck" created="Thu, 29 Jun 2006 16:09:57 +0100"  >The request makes sense. The patch however currently breaks 3 test cases.&lt;br/&gt;
James, please submit patches in unidiff format (diff -u).</comment>
                    <comment id="12418410" author="olegk" created="Thu, 29 Jun 2006 16:30:54 +0100"  >First off, James, what&amp;#39;s wrong with just calling HttpMethod#abort?&lt;br/&gt;
&lt;br/&gt;
Secondly, in my opinion there is a better fix for this issue if it does have to be fixed. The HttpMethodBase#releaseConnection method is the proper place to deal with the issue.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12418455" author="jmurty" created="Thu, 29 Jun 2006 20:30:03 +0100"  >Ortwin,&lt;br/&gt;
Sorry for the bad patch. I&amp;#39;ll submit a better version once I can confirm it runs correctly against the latest SVN version and test cases.&lt;br/&gt;
&lt;br/&gt;
Oleg,&lt;br/&gt;
I initially tried both the HttpMethod#abort and releaseConnection methods but both end up calling close on the response input stream, and if this input stream is the ContentLengthInputStream it will block until the whole response is read. &lt;br/&gt;
&lt;br/&gt;
I suppose the releaseConnection method could be changed to perform differently in the case where the ContentLength wrapper is used, but it seems easier not to add this wrapper in the first place rather than working around it later on. The advantage of leaving the input stream unwrapped in the Connection:close case is that methods like abort and releaseConnection then close down the stream immediately without any further changes. &lt;br/&gt;
&lt;br/&gt;
The proposed changes act much like the existing code for the case when the response length is unknown. However, I don&amp;#39;t have a good understanding of how this approach might affect other aspects of the client so there could well be problems I don&amp;#39;t appreciate...&lt;br/&gt;
</comment>
                    <comment id="12418460" author="olegk" created="Thu, 29 Jun 2006 20:46:03 +0100"  >&amp;gt; I initially tried both the HttpMethod#abort and releaseConnection methods but both end up calling close on the response input stream&lt;br/&gt;
&lt;br/&gt;
With all due respect I do not think this observation is correct. See for yourself:&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/HttpMethodBase.html#1008&quot;&gt;http://jakarta.apache.org/commons/httpclient/xref/org/apache/commons/httpclient/HttpMethodBase.html#1008&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I suppose the releaseConnection method could be changed to perform differently in the case where the ContentLength wrapper is used, but it seems easier not to add this wrapper in the first place rather than working around it later on&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s been a conscious design decision on our part that the consumer of HttpClient must not be able to close the underlying socket stream directly and I personally want to keep it this way. &lt;br/&gt;
&lt;br/&gt;
Besides, this problem has nothing to do with the content-length delimited content streams. The problem equally affects chunk-encoded content streams. If the server responds with &amp;#39;connection: close&amp;#39; there&amp;#39;s no point in reading the stream to the end of stream regardless whether it is content-length delimited or chunk encoded. I hope this will point you in the right direction.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12418474" author="jmurty" created="Thu, 29 Jun 2006 21:56:56 +0100"  >Thanks Oleg,&lt;br/&gt;
&lt;br/&gt;
You were exactly right about the abort method, I thought I had tried that but must have been mistaken. &lt;br/&gt;
&lt;br/&gt;
My application toolkit only makes response input streams visible to users, not the HttpMethod objects, so I&amp;#39;ve worked around my problem by wrapping the response input streams in my own class which aborts the method and releases the connection. This works fine.</comment>
                    <comment id="12418478" author="olegk" created="Thu, 29 Jun 2006 22:29:46 +0100"  >Here is what I think is the proper fix for the problem. At the same time I am a little wary of adding to the stable branch. Maybe this issue should be tackled in the 4.0 version&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12418482" author="oglueck" created="Thu, 29 Jun 2006 22:53:53 +0100"  >James,&lt;br/&gt;
&lt;br/&gt;
Oleg is right. The abort method was specifically designed for the purpose to let the user cancel a download.&lt;br/&gt;
&lt;br/&gt;
Oleg,&lt;br/&gt;
In my opinion the patch is a correct optimization of the releaseConnection() method. It passes all current tests and I am confident that it does not break anything. To be sure we need some feedback from users with more complex setups like NTLM proxies. Those are the corner cases where changes like this one might cause problems.&lt;br/&gt;
&lt;br/&gt;
Odi</comment>
                    <comment id="12418495" author="olegk" created="Fri, 30 Jun 2006 00:39:31 +0100"  >Mike, Roland, what do you think?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12418497" author="rolandw" created="Fri, 30 Jun 2006 01:07:27 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
the patch looks good.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12418567" author="mbecke" created="Fri, 30 Jun 2006 12:55:26 +0100"  >Looks good to me.  I have no problems applying this to 3.0 and 3.1.  It&amp;#39;s really just an optimization.  I don&amp;#39;t think it should cause any issues.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12418587" author="olegk" created="Fri, 30 Jun 2006 16:53:13 +0100"  >Odi, Mike, Roland,&lt;br/&gt;
&lt;br/&gt;
I am having a second thought about this patch. Even though it does prove useful in some corner cases, it actually negatively impacts performance in the most common use cases (when the response content has been fully consumed or the connection can be kept alive). The invocation of the HttpMethodBase#shouldCloseConnection method is far from being cheap. With this patch the method gets called twice for every response in the overwhelming number of cases. I suggest this issue be marked as WONTFIX or be dealt with in the 4.0 version.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12418824" author="mbecke" created="Sun, 2 Jul 2006 12:48:02 +0100"  >I agree that shouldCloseConnection() is non-trivial, but I don&amp;#39;t see calling it twice as a major performance issue.  There&amp;#39;s no IO or other blocking going on.  There are probably plenty of places in 3.0 that do with some optimization, but that has not really been the focus for 3.0 to date.  The added benefit of this change outweights the minor performance hit in my book.  Roland?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12418855" author="rolandw" created="Sun, 2 Jul 2006 23:17:05 +0100"  >Hi Oleg, Mike,&lt;br/&gt;
&lt;br/&gt;
sorry for the late reply - I decided that I needed to spend some time away from any computers.&lt;br/&gt;
&lt;br/&gt;
I guess it would be possible to introduce a flag or something to avoid the double header parsing, but I don&amp;#39;t have the time to work on a patch.&lt;br/&gt;
If it saves IO calls, it&amp;#39;s probably worth to apply this patch as it is.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12418908" author="oglueck" created="Mon, 3 Jul 2006 15:10:15 +0100"  >I agree with Mike and Roland. Roland, using a flag to shortcut a double call is probably impossible as the method depends a lot on the state which is likely to change between calls. &lt;br/&gt;
&lt;br/&gt;
Odi</comment>
                    <comment id="12474508" author="rolandw" created="Tue, 20 Feb 2007 17:43:12 +0000"  >This has been addressed as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-627&quot; title=&quot;overhaul connection manager and associated connection interface&quot;&gt;&lt;strike&gt;HTTPCLIENT-627&lt;/strike&gt;&lt;/a&gt;.</comment>
                </comments>
                    <attachments>
                    <attachment id="12336158" name="conn-release.patch" size="1117" author="olegk" created="Thu, 29 Jun 2006 22:29:46 +0100" />
                    <attachment id="12336118" name="HttpMethodBase.java.diff" size="1754" author="jmurty" created="Thu, 29 Jun 2006 09:21:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 29 Jun 2006 15:09:57 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133629</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47941</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>