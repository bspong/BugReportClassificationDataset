<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:14:06 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-154/HTTPCLIENT-154.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-154] Allow redirects between hosts and ports</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-154</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Redirects to different hosts, ports and protocols are currently prevented. &lt;br/&gt;
Historicly, HttpMethodBase.checkValidRedirects() is used to prevent these types&lt;br/&gt;
of redirects due how state information was being managed in the connection.  &lt;br/&gt;
&lt;br/&gt;
Much has changed since then.  We should relax the check and allow for redirects&lt;br/&gt;
&amp;nbsp;between hosts and ports. &lt;br/&gt;
&lt;br/&gt;
Redirects across protocols should not be considered at this time as there are&lt;br/&gt;
other issues related to security that is best left up to the user of HttpClient.</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12333713">HTTPCLIENT-154</key>
            <summary>Allow redirects between hosts and ports</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="becke@u.washington.edu">Michael Becke</assignee>
                                <reporter username="jsdever@apache.org">Jeff Dever</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Feb 2003 03:11:01 +0000</created>
                <updated>Sun, 22 Apr 2007 08:10:14 +0100</updated>
                    <resolved>Mon, 15 May 2006 22:44:56 +0100</resolved>
                            <version>2.0 Alpha 1</version>
                                <fixVersion>3.0 Final</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12379923" author="olegk" created="Fri, 4 Apr 2003 22:00:07 +0100"  >Fix is not feasible without breaking existing API. </comment>
                    <comment id="12379924" author="olegk" created="Tue, 3 Jun 2003 23:45:22 +0100"  >*** &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-219&quot; title=&quot;HttpMethodBase.checkValidRedirects() is too restrictive&quot;&gt;&lt;strike&gt;HTTPCLIENT-219&lt;/strike&gt;&lt;/a&gt; has been marked as a duplicate of this bug. ***</comment>
                    <comment id="12379925" author="olegk" created="Mon, 21 Jul 2003 21:31:56 +0100"  >Mike,&lt;br/&gt;
I think you were going to take this one over. So, I reassign the report back to&lt;br/&gt;
the &lt;a href=&apos;mailto:commons-httpclient-dev@jakarta.apache.org&apos;&gt;commons-httpclient-dev@jakarta.apache.org&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379926" author="becke@u.washington.edu" created="Mon, 21 Jul 2003 21:47:20 +0100"  >Thank you.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379927" author="becke@u.washington.edu" created="Tue, 22 Jul 2003 20:48:33 +0100"  >Created an attachment (id=7445)&lt;br/&gt;
Patch 1&lt;br/&gt;
</comment>
                    <comment id="12379928" author="becke@u.washington.edu" created="Tue, 22 Jul 2003 20:49:14 +0100"  >Here&amp;#39;s a first attempt at this refactor.  This patch is not complete but I would&lt;br/&gt;
like some input before I do any major polishing.  Here is what&amp;#39;s new:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- Retry and redirect logic have been moved to a new class, HttpMethodSession.&lt;br/&gt;
&amp;nbsp;- Header[] getResponseHeaders(String) has been added to HttpMethod.&lt;br/&gt;
&amp;nbsp;- Support for &amp;quot;locking&amp;quot; has been added to HttpConnection.  This allows the&lt;br/&gt;
HttpMethodSession to hold on to connections between redirects/retries.&lt;br/&gt;
&amp;nbsp;- HttpMethodBase.used is now being ignored.  Any thoughts on this method. &lt;br/&gt;
Should this just be depreacted?&lt;br/&gt;
&amp;nbsp;- realm and proxyRealm have been deprecated in HttpMethodBase as they are now&lt;br/&gt;
handled in HttpMethodSession.  These probably need to be faked.&lt;br/&gt;
&amp;nbsp;- HttpMethodBase.getRecoverableExceptionCount() has been deprecated.  This&lt;br/&gt;
probably needs to be faked.&lt;br/&gt;
&amp;nbsp;- a test NoHostHttpConnectionManager has been added.&lt;br/&gt;
&amp;nbsp;- all of the various tests executing methods directly have been updated.  Note:&lt;br/&gt;
&amp;nbsp;only those that failed have been updated, this needs to be completed.&lt;br/&gt;
&amp;nbsp;- TestNoHostBase has been added.&lt;br/&gt;
&lt;br/&gt;
What has not been done:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- ConnectMethod support has not been added.  This is my next task.&lt;br/&gt;
&amp;nbsp;- Robust comments and logging have not been added.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379929" author="olegk" created="Wed, 23 Jul 2003 02:52:32 +0100"  >I REALLY like the way things are shaping up. These are those few comments that I&lt;br/&gt;
have at the moment&lt;br/&gt;
&lt;br/&gt;
* In particular I like the idea of HttpMethodSession (maybe just HttpSession?).&lt;br/&gt;
I would make an interface out of it, however, as in the future we may give users&lt;br/&gt;
an option to provide a pluggable custom implementation of the HTTP session. &lt;br/&gt;
&lt;br/&gt;
* I would not deprecate &amp;#39;used&amp;#39; flag as yet. I helps prevent the user from&lt;br/&gt;
executing the same method multiple times and getting ambiguous results. In the&lt;br/&gt;
future (3.0) this flag should disappear along with the entire concept of method&lt;br/&gt;
recycling.&lt;br/&gt;
&lt;br/&gt;
* I would pass state &amp;amp; connection manager as HttpMethodSession&amp;#39;s constructor&lt;br/&gt;
parameters. We, then, later may completely do away with those setter methods&lt;br/&gt;
(setSoTimeout, setConnectionTimeout, setHttpConnectionFactoryTimeout and so on),&lt;br/&gt;
as I think we should be using a hash map to store HttpClient preferences instead&lt;br/&gt;
of just keeping on extending APIs with all those numerous options. I&amp;#39;ll expand&lt;br/&gt;
later on this point when we get to discuss the new preferences architecture.&lt;br/&gt;
&lt;br/&gt;
* I would also provide Header[] getRequestHeaders(String) at the very least for&lt;br/&gt;
the sake of API completeness.&lt;br/&gt;
&lt;br/&gt;
+        if (method instanceof HttpMethodBase) {&lt;br/&gt;
+            return ((HttpMethodBase) method).getMethodRetryHandler();&lt;br/&gt;
+        } else {&lt;br/&gt;
+            return new DefaultMethodRetryHandler();&lt;br/&gt;
+        }&lt;br/&gt;
&lt;br/&gt;
* IMHO things like that should strongly hint at some design improvements. Do you&lt;br/&gt;
think there is way doing without that ugly HttpMethodBase cast? I would suggest&lt;br/&gt;
adding getMethodRetryHandler to HttpMethod interface, if there are no other&lt;br/&gt;
alternatives&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379930" author="eric@tibco.com" created="Wed, 23 Jul 2003 03:19:29 +0100"  >I added the &amp;quot;recoverableExceptionCount&amp;quot; for test case purposes.  I think&lt;br/&gt;
deprecating it (or removing it - are we working on 3.0?), would be OK, and the&lt;br/&gt;
deprecated implementation could return a constant.  The only question here would&lt;br/&gt;
be whether the corresponding test case actually tests the relevant code.&lt;br/&gt;
&lt;br/&gt;
Alas, I don&amp;#39;t have time this week to look at the patch, so the above is just&lt;br/&gt;
based on your comments.</comment>
                    <comment id="12379931" author="becke@u.washington.edu" created="Wed, 23 Jul 2003 12:06:58 +0100"  >&amp;gt; * In particular I like the idea of HttpMethodSession (maybe just HttpSession?).&lt;br/&gt;
&amp;gt; I would make an interface out of it, however, as in the future we may give users&lt;br/&gt;
&amp;gt; an option to provide a pluggable custom implementation of the HTTP session. &lt;br/&gt;
&lt;br/&gt;
I agree the name is not good.  HttpSession is already is use in javax.servlet so I would suggest &lt;br/&gt;
against that as well.  Any other ideas?&lt;br/&gt;
&lt;br/&gt;
We could certainly move &amp;quot;HttpMethodSession&amp;quot; to an interface.  I would like to wait a little on that &lt;br/&gt;
though.  I imagine it will be changing quite a bit for a while and I do not want to expose something &lt;br/&gt;
so volatile.  &lt;br/&gt;
&lt;br/&gt;
&amp;gt; * I would not deprecate &amp;#39;used&amp;#39; flag as yet. I helps prevent the user from&lt;br/&gt;
&amp;gt; executing the same method multiple times and getting ambiguous results. In the&lt;br/&gt;
&amp;gt; future (3.0) this flag should disappear along with the entire concept of method&lt;br/&gt;
&amp;gt; recycling.&lt;br/&gt;
&lt;br/&gt;
The problem is that this also keeps HttpMethodSession from executing a method more than once.  &lt;br/&gt;
We could add a hack to HttpMethodBase to override used in HttpMethodSession but that would be &lt;br/&gt;
a little nasty.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * I would pass state &amp;amp; connection manager as HttpMethodSession&amp;#39;s constructor&lt;br/&gt;
&amp;gt; parameters. We, then, later may completely do away with those setter methods&lt;br/&gt;
&amp;gt; (setSoTimeout, setConnectionTimeout, setHttpConnectionFactoryTimeout and so on),&lt;br/&gt;
&amp;gt; as I think we should be using a hash map to store HttpClient preferences instead&lt;br/&gt;
&amp;gt; of just keeping on extending APIs with all those numerous options. I&amp;#39;ll expand&lt;br/&gt;
&amp;gt; later on this point when we get to discuss the new preferences architecture.&lt;br/&gt;
&lt;br/&gt;
My impression was that preferences would mostly be just for default values.  Do you envision the &lt;br/&gt;
ability to create a custom set of preferences for each method execute?  &lt;br/&gt;
&lt;br/&gt;
My preference would be to leave these alone for now until we know what the preferences will look &lt;br/&gt;
like.  If we keep HttpMethodSession hidden for now we won&amp;#39;t have to look at the ugliness.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * I would also provide Header[] getRequestHeaders(String) at the very least for&lt;br/&gt;
&amp;gt; the sake of API completeness.&lt;br/&gt;
&lt;br/&gt;
I agree.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; +        if (method instanceof HttpMethodBase) {&lt;br/&gt;
&amp;gt; +            return ((HttpMethodBase) method).getMethodRetryHandler();&lt;br/&gt;
&amp;gt; +        } else {&lt;br/&gt;
&amp;gt; +            return new DefaultMethodRetryHandler();&lt;br/&gt;
&amp;gt; +        }&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * IMHO things like that should strongly hint at some design improvements. Do you&lt;br/&gt;
&amp;gt; think there is way doing without that ugly HttpMethodBase cast? I would suggest&lt;br/&gt;
&amp;gt; adding getMethodRetryHandler to HttpMethod interface, if there are no other&lt;br/&gt;
&amp;gt; alternatives&lt;br/&gt;
&lt;br/&gt;
Yes, this is not pretty.  There are a number of places where things are accessible from &lt;br/&gt;
HttpMethodBase but not HttpMethod.  In general we have 3 options for these cases:&lt;br/&gt;
&lt;br/&gt;
1) do a nasty hack like above&lt;br/&gt;
2) move the methods to HttpMethod&lt;br/&gt;
3) deprecate/remove the code&lt;br/&gt;
&lt;br/&gt;
So far I have been leaning towards 1 and 3 so that HttpMethod does not have to be changed too &lt;br/&gt;
much.  Having said that I wonder if anyone is implementing HttpMethod directly.  Especially when &lt;br/&gt;
considering how complicated HttpMethodBase is.  Though I understand the general appeal of &lt;br/&gt;
interfaces I wonder if the HttpMethod interface is really necessary.  I do not expect that we will &lt;br/&gt;
remove HttpMethod any time soon but I wonder if we should worry about making additions to it.&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
</comment>
                    <comment id="12379932" author="rolweber@de.ibm.com" created="Wed, 23 Jul 2003 19:16:23 +0100"  >If my understanding is correct without looking at the source code, the&lt;br/&gt;
purpose of HttpMethodSession is to execute several methods, or one method&lt;br/&gt;
multiple times, in order to follow redirects. So how about HttpMethodChain&lt;br/&gt;
or HttpMethodSequence? Or giving it a more personal name, like&lt;br/&gt;
HttpMethodChainer or HttpRedirector?&lt;br/&gt;
&lt;br/&gt;
As for the &amp;#39;used&amp;#39; flag, does HttpMethodSession have to execute the same&lt;br/&gt;
HttpMethod object without recycling? If so, you could add a reset() or&lt;br/&gt;
redirect(URI) method that resets the &amp;#39;used&amp;#39; flag and performs the other&lt;br/&gt;
adjustments required to execute the redirect. Or would it be possible to&lt;br/&gt;
simply recycle the method, just as an application would have to do it?&lt;br/&gt;
&lt;br/&gt;
To keep the getters and setters for options out of a class, I like to&lt;br/&gt;
introduce XxxOptions classes. HttpClientOptions and HttpMethodOptions&lt;br/&gt;
jump into my mind here. All that remains in the original class is one&lt;br/&gt;
getter and setter for the options. When overdesigning, one might define&lt;br/&gt;
an interface with just the getter methods, and a default implementation&lt;br/&gt;
with getters and setters. Just to point out that the class will not&lt;br/&gt;
modify the options passed to it :-)&lt;br/&gt;
&lt;br/&gt;
Roland</comment>
                    <comment id="12379933" author="olegk" created="Wed, 23 Jul 2003 23:20:20 +0100"  >I like HttpRedirector, but it is not quite representative of the class &lt;br/&gt;
functionality, which besides redirects is supposed to be handing authentication &lt;br/&gt;
&amp;amp; retries. How about HttpMethodDirector?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379934" author="becke@u.washington.edu" created="Thu, 24 Jul 2003 11:37:40 +0100"  >Oops...  I originally sent this to the mailing list but meant to post is here.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; If my understanding is correct without looking at the source code, the&lt;br/&gt;
&amp;gt; purpose of HttpMethodSession is to execute several methods, or one method&lt;br/&gt;
&amp;gt; multiple times, in order to follow redirects. So how about HttpMethodChain&lt;br/&gt;
&amp;gt; or HttpMethodSequence? Or giving it a more personal name, like&lt;br/&gt;
&amp;gt; HttpMethodChainer or HttpRedirector?&lt;br/&gt;
&lt;br/&gt;
Yes, one method multiple times.&lt;br/&gt;
&lt;br/&gt;
I think I like Oleg&amp;#39;s HttpMethodDirector the best so far.  There is still room for &lt;br/&gt;
improvement though.  How about HttpMethodCoordinator or &lt;br/&gt;
ClassThatDoesStuffWithHttpMethods:)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; As for the &amp;#39;used&amp;#39; flag, does HttpMethodSession have to execute the same&lt;br/&gt;
&amp;gt; HttpMethod object without recycling? If so, you could add a reset() or&lt;br/&gt;
&amp;gt; redirect(URI) method that resets the &amp;#39;used&amp;#39; flag and performs the other&lt;br/&gt;
&amp;gt; adjustments required to execute the redirect. Or would it be possible to&lt;br/&gt;
&amp;gt; simply recycle the method, just as an application would have to do it?&lt;br/&gt;
&lt;br/&gt;
The same HttpMethod must be re-executed for each retry/redirect.  Previously this &lt;br/&gt;
was handled inside HttpMethod so we did not have to worry about resetting used &lt;br/&gt;
externally.   Recycling is not really an option as we would have to reconfigure the &lt;br/&gt;
method each time.  This would require knowing or getting all of the values set on &lt;br/&gt;
the HttpMethod.  A reset() method or something of the sort could be added to &lt;br/&gt;
HttpMethod for handling this.  This corresponds to option 2 from my previous &lt;br/&gt;
email.  This is probably the best option assuming that we want to keep used at all.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; To keep the getters and setters for options out of a class, I like to&lt;br/&gt;
&amp;gt; introduce XxxOptions classes. HttpClientOptions and HttpMethodOptions&lt;br/&gt;
&amp;gt; jump into my mind here. All that remains in the original class is one&lt;br/&gt;
&amp;gt; getter and setter for the options. When overdesigning, one might define&lt;br/&gt;
&amp;gt; an interface with just the getter methods, and a default implementation&lt;br/&gt;
&amp;gt; with getters and setters. Just to point out that the class will not&lt;br/&gt;
&amp;gt; modify the options passed to it :-)&lt;br/&gt;
&lt;br/&gt;
Sounds like a reasonable approach.  I agree that having a bunch of getters and &lt;br/&gt;
setters is not ideal, though I think this is a separate issue.  This should be fixed/&lt;br/&gt;
redesigned when we get to implementing configuration.  For now I prefer keeping &lt;br/&gt;
this hidden or just unstable until we get there.&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12379935" author="rolweber@de.ibm.com" created="Thu, 24 Jul 2003 13:34:36 +0100"  >How about using a musical term? HttpMethodConductor :-)&lt;br/&gt;
But I also like the HttpMethodDirector.</comment>
                    <comment id="12379936" author="olegk" created="Thu, 24 Jul 2003 20:12:24 +0100"  >Well, then, do not we want to be seen as contemporary? How about &lt;br/&gt;
HttpMethodJockey? HMJ in short?&lt;br/&gt;
&lt;br/&gt;
(Mini-Me on behalf of Me: Evil Comrade Oleg is just trying to be humorous)&lt;br/&gt;
</comment>
                    <comment id="12379937" author="becke@u.washington.edu" created="Mon, 11 Aug 2003 10:16:21 +0100"  >Created an attachment (id=7734)&lt;br/&gt;
patch 2&lt;br/&gt;
</comment>
                    <comment id="12379938" author="becke@u.washington.edu" created="Mon, 11 Aug 2003 10:24:50 +0100"  >Hello All.  Sorry for the long delay on this one.  Attached now is a second attempt at this fix.  This &lt;br/&gt;
patch is still not particularly polished but it should be fully functional now.  Here&amp;#39;s what&amp;#39;s new:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- HttpMethodSession has been renamed to HttpMethodDirector a per Oleg&amp;#39;s suggestion.&lt;br/&gt;
&amp;nbsp;- Tunneled SSL support has been added and ConnectMethod has been changed.  The &lt;br/&gt;
ConnectMethod(HttpMethod) constructor is now deprecated and the wrapped method is no longer &lt;br/&gt;
used.&lt;br/&gt;
&amp;nbsp;- HttpMethodDirector has been refactored a little and some comments have been added.&lt;br/&gt;
&lt;br/&gt;
Please take a look at this when you get a chance.  I would like to commit an early version of this &lt;br/&gt;
before too long.  It has been fairly difficult to maintain this patch as other changes have been &lt;br/&gt;
made to HttpMethodBase.&lt;br/&gt;
&lt;br/&gt;
Good Night,&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379939" author="olegk" created="Tue, 12 Aug 2003 00:06:06 +0100"  >Mike,&lt;br/&gt;
I had a look at the patch and find it good to be committed. Most probably we &lt;br/&gt;
would still need to massage the HttpMethodDirector a bit, but overall it is a &lt;br/&gt;
HUGE improvement.  Code has become much cleaner. Really great work&lt;br/&gt;
&lt;br/&gt;
Are you planning to deprecate the following method&lt;br/&gt;
&lt;br/&gt;
HttpMethodBase#getDoAuthentication()&lt;br/&gt;
HttpMethodBase#getFollowRedirects()&lt;br/&gt;
HttpMethodBase#setDoAuthentication()&lt;br/&gt;
HttpMethodBase#setFollowRedirects()&lt;br/&gt;
&lt;br/&gt;
They seem to have become completely superfluous &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379940" author="becke@u.washington.edu" created="Tue, 12 Aug 2003 05:09:43 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
I definitely agree that some major refactoring is needed.  We should be able to do that once &lt;br/&gt;
committed.  If there are no objections from anyone else I will commit tonight.&lt;br/&gt;
&lt;br/&gt;
How do you feel about the changes to ConnectMethod?&lt;br/&gt;
&lt;br/&gt;
I think we should keep doAuthentication and followRedirects as they are still in use and do not &lt;br/&gt;
have a replacement yet.  Once we have a configuration architecture we should be able to remove/&lt;br/&gt;
deprecate them if we want.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379941" author="laura@lwerner.org" created="Tue, 12 Aug 2003 05:58:16 +0100"  >I agree with Oleg: this is really nice.  A few comments you can take or leave...&lt;br/&gt;
&lt;br/&gt;
* It&amp;#39;s a bit ugly that HttpMethodDirectory has to be default-constructed and&lt;br/&gt;
then have all its properties set with &amp;quot;set&amp;quot; methods, because this means you can&lt;br/&gt;
get it into an inconsistent state fairly easily.  But since it&amp;#39;s not an API&lt;br/&gt;
class, it doesn&amp;#39;t matter right now.&lt;br/&gt;
&lt;br/&gt;
* As Oleg said, getMethodRetryHandler is disgusting, but you knew that already.&lt;br/&gt;
:-)  Since HttpMethod is a mess and will probably go away in 3.0 (I hope), it&amp;#39;s&lt;br/&gt;
probably OK to leave it this way for now.  The retry handler could also go into&lt;br/&gt;
a configuration object, but that would make it global and I think clients need&lt;br/&gt;
the flexibility to change it for individual methods.&lt;br/&gt;
&lt;br/&gt;
* Should realms and proxyRealms be lazy-allocated?  It&amp;#39;s probably a premature&lt;br/&gt;
optimization, but I thought I&amp;#39;d throw it out there.&lt;br/&gt;
&lt;br/&gt;
* The CustomHttpConnection example is now using a deprecated ConnectMethod&lt;br/&gt;
constructor.&lt;br/&gt;
&lt;br/&gt;
* TestGetMethodLocal is calling a now-deprecated method on HttpMethodBase&lt;br/&gt;
&lt;br/&gt;
* What&amp;#39;s the &amp;quot;locked&amp;quot; property on HttpConnection used for?  That sort of&lt;br/&gt;
modality in an object can be confusing.  I couldn&amp;#39;t find anyone who sets it to&lt;br/&gt;
true, though.&lt;br/&gt;
&lt;br/&gt;
Like I said, it looks good.  I don&amp;#39;t have any objection to checking it in.&lt;br/&gt;
* I like what you did with ConnectMethod</comment>
                    <comment id="12379942" author="becke@u.washington.edu" created="Tue, 12 Aug 2003 08:20:33 +0100"  >Hi Laura,&lt;br/&gt;
&lt;br/&gt;
Thank you for your comments.  Everything you have mentioned should be put on the HttpClient &lt;br/&gt;
TODO list, most of them for the near future.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * It&amp;#39;s a bit ugly that HttpMethodDirectory has to be default-constructed and&lt;br/&gt;
&amp;gt; then have all its properties set with &amp;quot;set&amp;quot; methods, because this means you can&lt;br/&gt;
&amp;gt; get it into an inconsistent state fairly easily.  But since it&amp;#39;s not an API&lt;br/&gt;
&amp;gt; class, it doesn&amp;#39;t matter right now.&lt;br/&gt;
&lt;br/&gt;
I definitely agree.  We should look at a better option for this and other configuration needs before &lt;br/&gt;
long.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * As Oleg said, getMethodRetryHandler is disgusting, but you knew that already.&lt;br/&gt;
&amp;gt; :-)  Since HttpMethod is a mess and will probably go away in 3.0 (I hope), it&amp;#39;s&lt;br/&gt;
&amp;gt; probably OK to leave it this way for now.  The retry handler could also go into&lt;br/&gt;
&amp;gt; a configuration object, but that would make it global and I think clients need&lt;br/&gt;
&amp;gt; the flexibility to change it for individual methods.&lt;br/&gt;
&lt;br/&gt;
Yup, that&amp;#39;s pretty much the situation.  It&amp;#39;s ugly but I think we need to keep it for now.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * Should realms and proxyRealms be lazy-allocated?  It&amp;#39;s probably a premature&lt;br/&gt;
&amp;gt; optimization, but I thought I&amp;#39;d throw it out there.&lt;br/&gt;
&lt;br/&gt;
We certainly could.  They are actually never read at the moment so we could be really lazy and &lt;br/&gt;
never allocate them :) This is something that should get worked out after some refactoring.  I just &lt;br/&gt;
left them in as a reminder.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * The CustomHttpConnection example is now using a deprecated ConnectMethod&lt;br/&gt;
&amp;gt; constructor.&lt;br/&gt;
&lt;br/&gt;
Yes, we probably want to rework or remove this example then.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * TestGetMethodLocal is calling a now-deprecated method on HttpMethodBase&lt;br/&gt;
&lt;br/&gt;
We should remove that once we have a replacement. It might have to wait until we do the request/&lt;br/&gt;
response split.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; * What&amp;#39;s the &amp;quot;locked&amp;quot; property on HttpConnection used for?  That sort of&lt;br/&gt;
&amp;gt; modality in an object can be confusing.  I couldn&amp;#39;t find anyone who sets it to&lt;br/&gt;
&amp;gt; true, though.&lt;br/&gt;
&lt;br/&gt;
Yes, it&amp;#39;s a bit of hidden magic.  It&amp;#39;s there to prevent a connection from getting released between &lt;br/&gt;
method retries.  Previously this was handled by the inExecute flag of HttpMethodBase but that was &lt;br/&gt;
no longer possible once retries were moved.  We should definitely look at a better solution for this.  &lt;br/&gt;
&lt;br/&gt;
I believe it is set to true in only one place(HttpMethodDirector.establishValidOpenConnection()).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Like I said, it looks good.  I don&amp;#39;t have any objection to checking it in.&lt;br/&gt;
&amp;gt; * I like what you did with ConnectMethod&lt;br/&gt;
&lt;br/&gt;
Thank you.  I appreciate all of the constructive comments.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379943" author="becke@u.washington.edu" created="Tue, 12 Aug 2003 10:38:34 +0100"  >Patch applied.  Let the cleanup begin...&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379944" author="olegk" created="Sun, 9 Nov 2003 05:43:32 +0000"  >Created an attachment (id=9001)&lt;br/&gt;
Cleanup patch 1 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379945" author="olegk" created="Sun, 9 Nov 2003 05:44:40 +0000"  >Folks,&lt;br/&gt;
Somehow this crucial patch got neglected recently. As I was working on resolving&lt;br/&gt;
another bug I found a few things about HttpMethodDirector which I thought might&lt;br/&gt;
be potentially error-prone. For instance, I found the recursive invocation of&lt;br/&gt;
MethodExecute particularly questionable. So, I took liberty of refactoring&lt;br/&gt;
things quite a bit. &lt;br/&gt;
&lt;br/&gt;
Mike, I did go quite tough on your code, and changed a lot, so please do not&lt;br/&gt;
hesitate to point out if you find anything disagreeable. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379946" author="becke@u.washington.edu" created="Mon, 10 Nov 2003 09:44:14 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I think these changes are fine.  Functionally there does not seem to be much different, but if it &lt;br/&gt;
increases readability I&amp;#39;m fine with it.  &lt;br/&gt;
&lt;br/&gt;
The TestHttpConnectionManager.testConnectMethodFailureRelease() test is now failing for me.  &lt;br/&gt;
This patch is not the cause I think.  It is possible that this test failed previously.  It seems the &lt;br/&gt;
problem is that Connect methods that fail don&amp;#39;t result in closing the connection.  So even if the &lt;br/&gt;
connect results in a non 200 result the connection is still considered open and is reused.  Any &lt;br/&gt;
thoughts?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379947" author="olegk" created="Mon, 10 Nov 2003 16:51:03 +0000"  >Mike,&lt;br/&gt;
Curiously enough, TestHttpConnectionManager.testConnectMethodFailureRelease()&lt;br/&gt;
works just fine for me with and without the patch. I do not have a slightest&lt;br/&gt;
idea as to why it fails on you. It must be some sort of local setting of yours.&lt;br/&gt;
What kind of setup are you running?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379948" author="olegk" created="Tue, 11 Nov 2003 07:24:09 +0000"  >Mike, I checked in the patch. I feel, however, that the code still needs a bit&lt;br/&gt;
more polish. Another patch is to follow. I will also retest all the combinations&lt;br/&gt;
of proxy + target server authentication.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379949" author="olegk" created="Mon, 17 Nov 2003 00:40:56 +0000"  >Created an attachment (id=9133)&lt;br/&gt;
Cleanup patch 2 (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379950" author="olegk" created="Mon, 17 Nov 2003 00:43:36 +0000"  >Folks,&lt;br/&gt;
My previous patch completely broke SSL via proxy logic by not performing&lt;br/&gt;
authentication on CONNECT methods. This patch fixes the problem along with some&lt;br/&gt;
additional code refactoring. Please let me know what you think. &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379951" author="olegk" created="Wed, 19 Nov 2003 18:46:33 +0000"  >If there are no objections, I&amp;#39;ll apply the patch tonight around 21:00GMT&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379952" author="olegk" created="Thu, 20 Nov 2003 05:37:40 +0000"  >Just committed the patch. As far as I am concerned that appears to be it. &lt;br/&gt;
&lt;br/&gt;
Mike, could you please have a look at what I have done to your code, when you&lt;br/&gt;
happen to have a moment to spare? If all these changes are OK with you, I think&lt;br/&gt;
the bug can be closed. Otherwise, let me know what needs to be improved/reworked&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379953" author="becke@u.washington.edu" created="Thu, 11 Dec 2003 10:54:43 +0000"  >Closed some time ago.</comment>
                </comments>
                    <attachments>
                    <attachment id="12326745" name="ASF.LICENSE.NOT.GRANTED--methoddirector.patch" size="29068" author="olegk" created="Sun, 9 Nov 2003 05:43:32 +0000" />
                    <attachment id="12326744" name="ASF.LICENSE.NOT.GRANTED--methodDirector.txt" size="104176" author="becke@u.washington.edu" created="Mon, 11 Aug 2003 10:16:21 +0100" />
                    <attachment id="12326746" name="ASF.LICENSE.NOT.GRANTED--methoddir.patch" size="24154" author="olegk" created="Mon, 17 Nov 2003 00:40:56 +0000" />
                    <attachment id="12326743" name="ASF.LICENSE.NOT.GRANTED--redirect.patch" size="82825" author="becke@u.washington.edu" created="Tue, 22 Jul 2003 20:48:33 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>16729</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 4 Apr 2003 21:00:07 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133208</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189321</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>