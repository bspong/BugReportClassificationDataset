<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:17:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-485/HTTPCLIENT-485.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-485] Connection is not released back to the pool if a runtime exception is thrown in HttpMethod#releaseConnection method</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-485</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>the default config of leaving the HttpClientParams.CONNECTION_MANAGER_TIMEOUT as zero means &lt;br/&gt;
that the first time the connection manager fails to immediately get a connection you application hangs. &lt;br/&gt;
(at least using MultiThreadedHttpConnectionManager.)&lt;br/&gt;
&lt;br/&gt;
this is because the zero gets passed onto a call to Object.wait(long timeout) and, from the docs, &amp;quot;If &lt;br/&gt;
timeout is zero, however, then real time is not taken into consideration and the thread simply waits &lt;br/&gt;
until notified.&amp;quot;. &lt;br/&gt;
&lt;br/&gt;
since nothing ever &amp;quot;notify()&amp;quot;s the thread everything just stops...&lt;br/&gt;
&lt;br/&gt;
the default behaviour of the client more should be more predictable. you don&amp;#39;t expect it to hang your &lt;br/&gt;
entire app if it can&amp;#39;t get a connection, you expect it to timeout then throw an exception or give some &lt;br/&gt;
other kind of feedback.&lt;br/&gt;
&lt;br/&gt;
it would make sense to give a default of, say, arbitrarily, 10 seconds or so. this would save every single &lt;br/&gt;
user of the classes having to dig around in the code/documentation and explictly set this param. they &lt;br/&gt;
might decide that the default value isn&amp;#39;t right and hence change it, but that&amp;#39;s tweaking behaviour, not &lt;br/&gt;
correcting it. i certainly thought it was a bug in the code (yours or mine), not my config and have been &lt;br/&gt;
fretting around it for a while.&lt;br/&gt;
&lt;br/&gt;
best,&lt;br/&gt;
garry</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: All</environment>
            <key id="12334044">HTTPCLIENT-485</key>
            <summary>Connection is not released back to the pool if a runtime exception is thrown in HttpMethod#releaseConnection method</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="garry@ascii-turf.net">garry hill</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 Jul 2005 06:12:57 +0100</created>
                <updated>Wed, 16 Feb 2011 20:43:46 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:11:05 +0100</resolved>
                            <version>3.0 RC3</version>
                                <fixVersion>3.0 RC4</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12382532" author="becke@u.washington.edu" created="Sun, 31 Jul 2005 12:07:50 +0100"  >Hi Gary,&lt;br/&gt;
&lt;br/&gt;
The default timeout of zero does seem reasonable to me.  The MultiThreadedHttpConnectionManager &lt;br/&gt;
manages a pool of connections and requests that call getConnection() without a timeout wait until one is &lt;br/&gt;
available.  Threads will only block &amp;quot;forever&amp;quot;  if the acquired connections are never returned.  If &lt;br/&gt;
HttpMethod.releaseConnection() is called for all requests this will never be an issue.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m going to mark this one as invalid.  Please feel free to reopen it if you can make a strong case for &lt;br/&gt;
changing the default behavior.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12382533" author="oglueck" created="Mon, 1 Aug 2005 21:26:02 +0100"  >I share Mike&amp;#39;s oppinion. Moreover, every OS on this planet will eventually shut&lt;br/&gt;
down a connection that never ACKs a SYN. Just to save on resources. It may take&lt;br/&gt;
quite long (platform dependent) though. But the socket will not hang forever.&lt;br/&gt;
&lt;br/&gt;
Ortwin Gl&amp;#xFC;ck</comment>
                    <comment id="12382534" author="garry@ascii-turf.net" created="Tue, 2 Aug 2005 00:13:57 +0100"  >&lt;br/&gt;
hey there.&lt;br/&gt;
&lt;br/&gt;
ok. i think i&amp;#39;m getting a handle on this and maybe there is a more serious problem lurking in the code... &lt;br/&gt;
i might be wrong but bear with me.&lt;br/&gt;
&lt;br/&gt;
the situation seems to be this:&lt;br/&gt;
&lt;br/&gt;
i&amp;#39;m repeatedly connecting to the same server using a multi threaded connection manager which, &lt;br/&gt;
however, is only managing a single thread.&lt;br/&gt;
&lt;br/&gt;
but, the server, or my connection, is unstable and goes down.&lt;br/&gt;
&lt;br/&gt;
here&amp;#39;s the tail of the log from the session in question:&lt;br/&gt;
&lt;br/&gt;
=====================&lt;br/&gt;
...&lt;br/&gt;
07/30 01:18:12 DEBUG HttpMethodBase [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpMethodBase.readResponseBody(HttpConnection)&lt;br/&gt;
07/30 01:18:12 DEBUG HttpConnection [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpConnection.getResponseInputStream()&lt;br/&gt;
07/30 01:18:12 DEBUG HttpMethodBase [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpMethodBase.canResponseHaveBody(int)&lt;br/&gt;
07/30 01:18:12 DEBUG HttpConnection [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpConnection.close()&lt;br/&gt;
07/30 01:18:12 DEBUG HttpConnection [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpConnection.closeSockedAndStreams()&lt;br/&gt;
07/30 01:18:12 DEBUG HttpMethodBase [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - &lt;br/&gt;
Resorting to protocol version default close connection policy&lt;br/&gt;
07/30 01:18:12 DEBUG HttpMethodBase [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - Should &lt;br/&gt;
NOT close connection, using HTTP/1.1&lt;br/&gt;
07/30 01:18:12 DEBUG HttpConnection [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpConnection.isResponseAvailable()&lt;br/&gt;
07/30 01:18:14 DEBUG GetMethod [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/mis/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/mis/&lt;/a&gt;  3] - enter &lt;br/&gt;
GetMethod(String)&lt;br/&gt;
07/30 01:18:14 DEBUG HttpMethodBase [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/mis/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/mis/&lt;/a&gt;  3] - &lt;br/&gt;
HttpMethodBase.addRequestHeader(Header)&lt;br/&gt;
07/30 01:18:14 DEBUG HttpClient [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/mis/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/mis/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpClient.executeMethod(HttpMethod)&lt;br/&gt;
07/30 01:18:14 DEBUG HttpClient [5948 &lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/mis/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/mis/&lt;/a&gt;  3] - enter &lt;br/&gt;
HttpClient.executeMethod(HostConfiguration,HttpMethod,HttpState)&lt;br/&gt;
07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 &lt;a href=&quot;http://humboldt.craigslist.org:&quot;&gt;http://humboldt.craigslist.org:&lt;/a&gt;&lt;br/&gt;
80/sfo/eby/mis/  3] - enter HttpConnectionManager.getConnectionWithTimeout(HostConfiguration, &lt;br/&gt;
long)&lt;br/&gt;
07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 &lt;a href=&quot;http://humboldt.craigslist.org:&quot;&gt;http://humboldt.craigslist.org:&lt;/a&gt;&lt;br/&gt;
80/sfo/eby/mis/  3] - HttpConnectionManager.getConnection:  config = HostConfiguration&lt;br/&gt;
[host=&lt;a href=&quot;http://humboldt.craigslist.org&quot;&gt;http://humboldt.craigslist.org&lt;/a&gt;], timeout = 0&lt;br/&gt;
07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 &lt;a href=&quot;http://humboldt.craigslist.org:&quot;&gt;http://humboldt.craigslist.org:&lt;/a&gt;&lt;br/&gt;
80/sfo/eby/mis/  3] - enter HttpConnectionManager.ConnectionPool.getHostPool(HostConfiguration)&lt;br/&gt;
07/30 01:18:14 DEBUG MultiThreadedHttpConnectionManager [5948 &lt;a href=&quot;http://humboldt.craigslist.org:&quot;&gt;http://humboldt.craigslist.org:&lt;/a&gt;&lt;br/&gt;
80/sfo/eby/mis/  3] - Unable to get a connection, waiting..., hostConfig=HostConfiguration&lt;br/&gt;
[host=&lt;a href=&quot;http://humboldt.craigslist.org&quot;&gt;http://humboldt.craigslist.org&lt;/a&gt;]&lt;br/&gt;
=========================&lt;br/&gt;
(that&amp;#39;s where it hung)&lt;br/&gt;
&lt;br/&gt;
I think the key is that the connection manager is only handing one thread. your assumption is that &lt;br/&gt;
eventually there&amp;#39;ll be another open connection that closes and notifies() the connection manager so that &lt;br/&gt;
it stops waiting. but what if there aren&amp;#39;t any other running threads? there&amp;#39;s nothing waiting for an ACK &lt;br/&gt;
since our only connecting thread is stopped in Thread.wait(0)... so what&amp;#39;s going to pop us out of the &lt;br/&gt;
wait?&lt;br/&gt;
&lt;br/&gt;
Now,  my understanding is fuzzy, especially the effect of the loss of internet connectivity on the &lt;br/&gt;
connection manager that&amp;#39;s running as HTTP 1.1 and not closing connections, but i think there&amp;#39;s a &lt;br/&gt;
genuine deadlock situation with this edge condition of a MultiThreaded...ConnectionManager that&amp;#39;s &lt;br/&gt;
only running one thread.&lt;br/&gt;
&lt;br/&gt;
Maybe your answer will be simply &amp;quot;don&amp;#39;t use MultiThreaded...ConnectionManager if you only want to &lt;br/&gt;
run one thread&amp;quot; ;)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m tempted to REOPEN this but i think i&amp;#39;ll leave that as your call... i feel like a salmon in a barrel.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
garry</comment>
                    <comment id="12382535" author="garry@ascii-turf.net" created="Tue, 2 Aug 2005 00:24:16 +0100"  >&lt;br/&gt;
P.S. I should have added that this was consistently happening on two platforms, linux and mac. It wasn&amp;#39;t &lt;br/&gt;
just a one off, it was every time. It took varying amounts of time to happen, but it always happened and &lt;br/&gt;
the machine sat there for hours. I have a controller thread that asks for checkpoints every ten minutes and &lt;br/&gt;
all my logs showed were about 20-30 of these checkpoint requests falling on deaf ears. If threads have &lt;br/&gt;
ears of course.&lt;br/&gt;
&lt;br/&gt;
g</comment>
                    <comment id="12382536" author="oglueck" created="Tue, 2 Aug 2005 00:45:00 +0100"  >Garry,&lt;br/&gt;
&lt;br/&gt;
The MTCM manages one connection pool per host config. There is a limit of&lt;br/&gt;
simultaneous connections to a certain host which by default is something like 2&lt;br/&gt;
(as recommended by RFC-2616). So if the MTCM has handed out the 2 connections&lt;br/&gt;
the next call to getConnection will block until one of the connections is handed&lt;br/&gt;
back to the connection manager. Of course this will never happen if you never&lt;br/&gt;
call releaseConnection on the method. So it is vitally important that the&lt;br/&gt;
releaseConnection call is in a finally clause. Please check your code for&lt;br/&gt;
ommissions of that.&lt;br/&gt;
&lt;br/&gt;
Ortwin Gl&amp;#xFC;ck</comment>
                    <comment id="12382537" author="garry@ascii-turf.net" created="Tue, 2 Aug 2005 01:29:15 +0100"  >(In reply to comment #5)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; So it is vitally important that the&lt;br/&gt;
&amp;gt; releaseConnection call is in a finally clause. Please check your code for&lt;br/&gt;
&amp;gt; ommissions of that.&lt;br/&gt;
&lt;br/&gt;
Yes, all method calls have their corresponding finally { method.releaseConnection(); } calls.&lt;br/&gt;
&lt;br/&gt;
I have my MTCM configured to just one connection per host, since that&amp;#39;s all i need.&lt;br/&gt;
&lt;br/&gt;
We&amp;#39;re talking about code that runs fine for hours and hours but then, inevitably, hangs in that wait(0) &lt;br/&gt;
method. Well, maybe not &amp;quot;inevitably&amp;quot;, but certainly whenever there&amp;#39;s any kind of instability in the &lt;br/&gt;
connection to the internet, which in my case seems to be inevitable.&lt;br/&gt;
&lt;br/&gt;
Hmm, but looking at the trace, that last page &amp;lt;&lt;a href=&quot;http://humboldt.craigslist.org:80/sfo/eby/&quot;&gt;http://humboldt.craigslist.org:80/sfo/eby/&lt;/a&gt;&amp;gt; leads you &lt;br/&gt;
to a infinite redirect (blinking &amp;#39;/&amp;#39; &amp;lt;-&amp;gt; &amp;#39;//&amp;#39;). Could that be affecting the way the connection is closed? &lt;br/&gt;
&lt;br/&gt;
I see your point, my trace shows no call to HttpConnection.releaseConnection() but i can promise you &lt;br/&gt;
that i&amp;#39;ve got a call to it (via the method) in my finally block.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12382538" author="oglueck" created="Tue, 2 Aug 2005 01:58:03 +0100"  >An infinite redirect would certainly keep your only connection open forever and&lt;br/&gt;
keep it from being returned to the pool. There is an option to limit the maximum&lt;br/&gt;
number of redirects and to allow circular redirects. Normally circular redirects&lt;br/&gt;
are not allowed and lead to an exception. If you did not change any parameters&lt;br/&gt;
then a circular redirect should not happen. If you have used the finally clause&lt;br/&gt;
correctly your connection will be returned to the pool and there is no problem.&lt;br/&gt;
Without seeing the code I can not tell more...&lt;br/&gt;
&lt;br/&gt;
The two options are controlled like this:&lt;br/&gt;
&lt;br/&gt;
HttpClient client = new HttpClient(mtcm);&lt;br/&gt;
client.getParams().setParameter(&amp;quot;http.protocol.max-redirects&amp;quot;, new Integer(10));&lt;br/&gt;
client.getParams().setParameter(&amp;quot;http.protocol.allow-circular-redirects&amp;quot;,&lt;br/&gt;
Boolean.FALSE);</comment>
                    <comment id="12382539" author="garry@ascii-turf.net" created="Fri, 5 Aug 2005 05:35:34 +0100"  >(In reply to comment #7)&lt;br/&gt;
&amp;gt; An infinite redirect would certainly keep your only connection open forever and&lt;br/&gt;
&amp;gt; keep it from being returned to the pool. There is an option to limit the maximum&lt;br/&gt;
&amp;gt; number of redirects and to allow circular redirects. &lt;br/&gt;
&lt;br/&gt;
the default config limits you to 100 redirects in total, circular or not. i left it at this and the trace shows &lt;br/&gt;
that it does indeed give up after 100 - so no &amp;quot;infinite loop&amp;quot; that was stopping the connection being &lt;br/&gt;
released.&lt;br/&gt;
&lt;br/&gt;
and my releaseConnections() ARE IN A FINALLY BLOCK, just in case that comes up again.</comment>
                    <comment id="12382540" author="garry@ascii-turf.net" created="Fri, 5 Aug 2005 05:40:36 +0100"  >&lt;br/&gt;
ok, i have an update.&lt;br/&gt;
&lt;br/&gt;
the problem seems to be that the method gets into an illegal state and instead of properly releasing the &lt;br/&gt;
connection back to the pool, throws this instead:&lt;br/&gt;
&lt;br/&gt;
java.lang.IllegalStateException: Connection is not open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.HttpConnection.assertOpen(HttpConnection.java:1269)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.HttpConnection.isResponseAvailable(HttpConnection.java:872)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.MultiThreadedHttpConnectionManager&lt;br/&gt;
$HttpConnectionAdapter.isResponseAvailable(MultiThreadedHttpConnectionManager.java:1307)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.HttpMethodBase.responseBodyConsumed(HttpMethodBase.java:&lt;br/&gt;
2272)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.HttpMethodBase$1.responseConsumed(HttpMethodBase.java:&lt;br/&gt;
1755)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.AutoCloseInputStream.notifyWatcher&lt;br/&gt;
(AutoCloseInputStream.java:180)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.AutoCloseInputStream.close(AutoCloseInputStream.java:140)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.commons.httpclient.HttpMethodBase.releaseConnection(HttpMethodBase.java:1086)&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
this i think, as i&amp;#39;ve said before, comes about as a result of an unstable connection - no idea if that&amp;#39;s at &lt;br/&gt;
my end or the server end.&lt;br/&gt;
&lt;br/&gt;
this is the situation that gives you the hang: the last method didn&amp;#39;t close/release properly and so on the &lt;br/&gt;
next call to MTCM.getConnection() just wait()s forever. &lt;br/&gt;
&lt;br/&gt;
unfortunately i turned off the trace of the httpclient just hours before this happened, ain&amp;#39;t that always &lt;br/&gt;
the way.&lt;br/&gt;
&lt;br/&gt;
hope this helps to clarify the issue.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&lt;br/&gt;
garry</comment>
                    <comment id="12382541" author="oglueck" created="Fri, 5 Aug 2005 07:51:21 +0100"  >Garry, I guess you dug up a dead body. Thanks a lot!</comment>
                    <comment id="12382542" author="garry@ascii-turf.net" created="Fri, 5 Aug 2005 11:51:07 +0100"  >(In reply to comment #10)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Garry, I guess you dug up a dead body. &lt;br/&gt;
&lt;br/&gt;
i knew something smelled rotten.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Thanks a lot!&lt;br/&gt;
&lt;br/&gt;
i&amp;#39;m assuming you&amp;#39;re not being sarcastic - in which case: a pleasure. good luck fixing it...&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
g</comment>
                    <comment id="12382543" author="olegk" created="Fri, 5 Aug 2005 19:03:36 +0100"  >Created an attachment (id=15900)&lt;br/&gt;
Patch (take1)&lt;br/&gt;
&lt;br/&gt;
Folks, please review and let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382544" author="oglueck" created="Fri, 5 Aug 2005 19:59:01 +0100"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
You have changed the contract of isResponseAvailable(): no exception thrown any&lt;br/&gt;
more. Is this change necessary? If yes, please change the Javadocs as well.&lt;br/&gt;
&lt;br/&gt;
Odi</comment>
                    <comment id="12382545" author="olegk" created="Fri, 5 Aug 2005 20:09:57 +0100"  >Created an attachment (id=15901)&lt;br/&gt;
Patch (take2)&lt;br/&gt;
&lt;br/&gt;
All right. How about this?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382546" author="oglueck" created="Fri, 5 Aug 2005 20:22:19 +0100"  >I like this one better.</comment>
                    <comment id="12382547" author="becke@u.washington.edu" created="Fri, 5 Aug 2005 23:24:16 +0100"  >It looks pretty good.  My only concern is with the potential performance penalty&lt;br/&gt;
of adding another call to isOpen().  Is there any way to do this without testing&lt;br/&gt;
if the connection is open?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12382548" author="oglueck" created="Fri, 5 Aug 2005 23:34:17 +0100"  >It&amp;#39;s possible to catch the IllegalStateException instead. That would certainly&lt;br/&gt;
be faster:&lt;br/&gt;
&lt;br/&gt;
boolean avail;&lt;br/&gt;
try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;avail = responseConnection.isResponseAvailable();&lt;br/&gt;
} catch(IllegalStateException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;avail = false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
if(avail) { ...</comment>
                    <comment id="12382549" author="olegk" created="Fri, 5 Aug 2005 23:43:58 +0100"  >(In reply to comment #17)&lt;br/&gt;
&amp;gt; It&amp;#39;s possible to catch the IllegalStateException instead. That would certainly&lt;br/&gt;
&amp;gt; be faster:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
I seriuosly doubt that a boolean variable test would be slower than setting up a&lt;br/&gt;
try/catch/finally frame.&lt;br/&gt;
&lt;br/&gt;
Symantically (at least IMO) IllegalStateException should represent a fatal&lt;br/&gt;
exception one should not attempt to recover from. I would rather not throw it&lt;br/&gt;
all (see my original patch)&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
&amp;gt; boolean avail;&lt;br/&gt;
&amp;gt; try {&lt;br/&gt;
&amp;gt;   avail = responseConnection.isResponseAvailable();&lt;br/&gt;
&amp;gt; } catch(IllegalStateException e) {&lt;br/&gt;
&amp;gt;   avail = false;&lt;br/&gt;
&amp;gt; }&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; if(avail) { ...&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12382550" author="oglueck" created="Sat, 6 Aug 2005 00:05:02 +0100"  >Oleg, &lt;br/&gt;
&lt;br/&gt;
right, I did not see isOpen was just a simple wrapped boolean check.&lt;br/&gt;
I do not like the semantics of that exception either. Is it feasible to change&lt;br/&gt;
the contract that late in the release process? I mean, personally I&amp;#39;d say fix it&lt;br/&gt;
rather earlier than later and go with patch 1. But I don&amp;#39;t know about our&lt;br/&gt;
users... Maybe ask on the list?</comment>
                    <comment id="12382551" author="plynch@apache.org" created="Sat, 6 Aug 2005 00:16:42 +0100"  >I just read this thread with interest as a simple junit test on my end&lt;br/&gt;
reproduced this quite easily, although without all the waiting around - by using&lt;br/&gt;
a proxy server instead.&lt;br/&gt;
&lt;br/&gt;
Here is code that will reproduce this for me every time.&lt;br/&gt;
&lt;br/&gt;
HttpClient httpClient =&lt;br/&gt;
new HttpClient(new MultiThreadedHttpConnectionManager());&lt;br/&gt;
final HttpConnectionManagerParams params =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;httpClient.getHttpConnectionManager().getParams();&lt;br/&gt;
params.setMaxTotalConnections(20);&lt;br/&gt;
params.setDefaultMaxConnectionsPerHost(20);&lt;br/&gt;
httpClient.getParams().setCookiePolicy(CookiePolicy.IGNORE_COOKIES);&lt;br/&gt;
&lt;br/&gt;
// *this next line helps trigger IllegalStateException*&lt;br/&gt;
// without a proxy , we get an UnknownHostException instead&lt;br/&gt;
// the proxy server is running normally&lt;br/&gt;
httpClient.getHostConfiguration().setProxy(&amp;quot;127.0.0.1&amp;quot;, 8222);&lt;br/&gt;
// use a non-reachale url&lt;br/&gt;
final PostMethod post = new PostMethod(&amp;quot;&lt;a href=&quot;http://foo/bar/baz&quot;&gt;http://foo/bar/baz&lt;/a&gt;&amp;quot;);&lt;br/&gt;
final NameValuePair[] data ={new NameValuePair(&amp;quot;name&amp;quot;, &amp;quot;value&amp;quot;)};&lt;br/&gt;
post.setRequestBody(data);&lt;br/&gt;
try&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//next line throws non-doc&amp;#39;d IllegalStateException&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;httpClient.executeMethod(post);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// print response to stdout&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(post.getResponseBodyAsStream());&lt;br/&gt;
}&lt;br/&gt;
finally&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;post.releaseConnection();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Trace this creates from the call to executeMethod()&lt;br/&gt;
---------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
java.lang.IllegalStateException: Connection is not open&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.assertOpen(HttpConnection.java:1269)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.write(HttpConnection.java:968)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.write(HttpConnection.java:937)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection.print(HttpConnection.java:1027)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter.print(MultiThreadedHttpConnectionManager.java:1622)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.writeRequestHeaders(HttpMethodBase.java:2046)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.writeRequest(HttpMethodBase.java:1919)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:993)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:393)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:168)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:396)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12382552" author="olegk" created="Sat, 6 Aug 2005 00:27:48 +0100"  >(In reply to comment #19)&lt;br/&gt;
&amp;gt; Oleg, &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; right, I did not see isOpen was just a simple wrapped boolean check.&lt;br/&gt;
&amp;gt; I do not like the semantics of that exception either. Is it feasible to change&lt;br/&gt;
&amp;gt; the contract that late in the release process? I mean, personally I&amp;#39;d say fix it&lt;br/&gt;
&amp;gt; rather earlier than later and go with patch 1. But I don&amp;#39;t know about our&lt;br/&gt;
&amp;gt; users... Maybe ask on the list?&lt;br/&gt;
&lt;br/&gt;
Firstly, HttpConnection is not meant to be used directly. Effectively it is a&lt;br/&gt;
private class. Secondly, IllegalStateException is an unchecked exception, so no&lt;br/&gt;
code should be broken if it is no longer thrown. This said, one meager boolean&lt;br/&gt;
test seems to solve the problem, so I think it is a rather modest price to pay&lt;br/&gt;
for keeping everyone content.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12382553" author="becke@u.washington.edu" created="Sat, 6 Aug 2005 00:29:34 +0100"  >Sorry, never mind.  I was confusing isOpen with isStale(). &lt;br/&gt;
&lt;br/&gt;
My preference would be for the first patch.  It does introduce a small API&lt;br/&gt;
change, but HttpConnection is essentially only used by HttpClient classes.  A&lt;br/&gt;
quick poll on the dev list would be good, but my guess is that virtualy no-one&lt;br/&gt;
uses HttpConnection directly.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12382554" author="olegk" created="Sat, 6 Aug 2005 00:31:49 +0100"  >(In reply to comment #20)&lt;br/&gt;
&amp;gt; I just read this thread with interest as a simple junit test on my end&lt;br/&gt;
&amp;gt; reproduced this quite easily, although without all the waiting around - by using&lt;br/&gt;
&amp;gt; a proxy server instead.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Here is code that will reproduce this for me every time.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s pretty cool. I&amp;#39;ll see if I reproduce the bug using our proxy mockup.&lt;br/&gt;
Should I succeed, I&amp;#39;ll incorporate your test case into the patch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382555" author="oglueck" created="Sat, 6 Aug 2005 00:38:33 +0100"  >Just being careful, Oleg. People writing their own connection mananagers might&lt;br/&gt;
use it (don&amp;#39;t know what for...). Removing an unchecked exception is a subtle&lt;br/&gt;
change in that no IDE will signal the change in your code when you drop in the&lt;br/&gt;
new HttpClient jar. So if anyone is relying on the exception being thrown if the&lt;br/&gt;
connection is closed their code will break. I am sounding really academic now I&lt;br/&gt;
must say... Just go for patch 1 and cross fingers. .-)</comment>
                    <comment id="12382556" author="olegk" created="Sat, 6 Aug 2005 01:11:47 +0100"  >(In reply to comment #23)&lt;br/&gt;
&amp;gt; (In reply to comment #20)&lt;br/&gt;
&amp;gt; &amp;gt; I just read this thread with interest as a simple junit test on my end&lt;br/&gt;
&amp;gt; &amp;gt; reproduced this quite easily, although without all the waiting around - by using&lt;br/&gt;
&amp;gt; &amp;gt; a proxy server instead.&lt;br/&gt;
&amp;gt; &amp;gt; &lt;br/&gt;
&amp;gt; &amp;gt; Here is code that will reproduce this for me every time.&lt;br/&gt;
&amp;gt; &amp;gt; &lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; That&amp;#39;s pretty cool. I&amp;#39;ll see if I reproduce the bug using our proxy mockup.&lt;br/&gt;
&amp;gt; Should I succeed, I&amp;#39;ll incorporate your test case into the patch&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Oleg&lt;br/&gt;
&lt;br/&gt;
Nope. No luck with the test case. I get a&lt;br/&gt;
org.apache.commons.httpclient.NoHttpResponseException  from our proxy mockup,&lt;br/&gt;
which seems quite reasonable to me.&lt;br/&gt;
&lt;br/&gt;
Folks, &lt;br/&gt;
&lt;br/&gt;
If I get it right, the consensus is that we go with the patch (take 1). If I&lt;br/&gt;
hear no complaints I&amp;#39;ll commit the patch (take 1) in a few days&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382557" author="plynch@apache.org" created="Sat, 6 Aug 2005 01:34:35 +0100"  >Is it acceptable that for the same code one could expect either&lt;br/&gt;
UnknownHostException OR NoHttpResponseException?&lt;br/&gt;
&lt;br/&gt;
FWIW the proxy server I was using is here &lt;a href=&quot;http://www.proxomitron.info/&quot;&gt;http://www.proxomitron.info/&lt;/a&gt;&lt;br/&gt;
</comment>
                    <comment id="12382558" author="olegk" created="Sat, 6 Aug 2005 01:49:42 +0100"  >(In reply to comment #26)&lt;br/&gt;
&amp;gt; Is it acceptable that for the same code one could expect either&lt;br/&gt;
&amp;gt; UnknownHostException OR NoHttpResponseException?&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
Peter,&lt;br/&gt;
What we have is a rather simple proxy server mockup, which I think simply drops&lt;br/&gt;
the connection on unsuspecting HttpClient in case of DNS name resolution&lt;br/&gt;
failure, hence NoHttpResponseException thrown by HttpClient. This is not an&lt;br/&gt;
issue with HttpClient or the test code but rather with the mockup proxy&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
&amp;gt; FWIW the proxy server I was using is here &lt;a href=&quot;http://www.proxomitron.info/&quot;&gt;http://www.proxomitron.info/&lt;/a&gt;&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12382559" author="olegk" created="Tue, 9 Aug 2005 06:33:58 +0100"  >Patch 1 committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327272" name="ASF.LICENSE.NOT.GRANTED--connrelease.patch" size="1723" author="olegk" created="Fri, 5 Aug 2005 20:09:57 +0100" />
                    <attachment id="12327271" name="ASF.LICENSE.NOT.GRANTED--connrelease.patch" size="1982" author="olegk" created="Fri, 5 Aug 2005 19:03:36 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>35944</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 31 Jul 2005 11:07:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133532</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47236</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>