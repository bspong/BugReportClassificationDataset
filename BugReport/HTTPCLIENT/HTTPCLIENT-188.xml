<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:14:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-188/HTTPCLIENT-188.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-188] recoverable exceptions when reading are not retried</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-188</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>If a recoverable exception occurs after a request is written then the method is&lt;br/&gt;
not retried.</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: Other</environment>
            <key id="12333747">HTTPCLIENT-188</key>
            <summary>recoverable exceptions when reading are not retried</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="becke@u.washington.edu">Michael Becke</reporter>
                        <labels>
                    </labels>
                <created>Wed, 16 Apr 2003 20:31:16 +0100</created>
                <updated>Wed, 16 Feb 2011 20:44:43 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:19 +0100</resolved>
                            <version>2.0 Alpha 3</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12380143" author="becke@u.washington.edu" created="Wed, 16 Apr 2003 20:31:58 +0100"  >Created an attachment (id=5859)&lt;br/&gt;
patch 1&lt;br/&gt;
</comment>
                    <comment id="12380144" author="olegk" created="Thu, 17 Apr 2003 20:34:06 +0100"  >Mike,&lt;br/&gt;
&lt;br/&gt;
- Overall it is a step in the right direction. You know I personally would like&lt;br/&gt;
to see retry logic moved from HttpMethodBase to HttpClient, however, for the&lt;br/&gt;
time being the patch is a good interim solution &lt;br/&gt;
&lt;br/&gt;
- isRecoverableAfterReqest is apparently misspelled &lt;br/&gt;
&lt;br/&gt;
- I think &amp;#39;isRecoverable*&amp;#39; flag should apply to writing the request as well as&lt;br/&gt;
reading the response. There should be a way to disable all sorts of retries. For&lt;br/&gt;
instance, the user may want to assign a unique id to each and every request to&lt;br/&gt;
the server. Request auto-retry might mess this scheme up. We should also&lt;br/&gt;
differentiate between request write recoverable exceptions &amp;amp; failure reading&lt;br/&gt;
response exceptions in order to provide the users with a finer control over HTTP&lt;br/&gt;
communication. For that end I&amp;#39;d want to see HttpRecoverableException sub-classed&lt;br/&gt;
into several specific types of recoverable exceptions&lt;br/&gt;
&lt;br/&gt;
Auto-retries in Sun&amp;#39;s implementation of HTTP client was particularly awful. Some&lt;br/&gt;
response reads timed out and were subsequently retried. As a result I had&lt;br/&gt;
several hits on the server for the same request. That was my primary reason for&lt;br/&gt;
dropping Sun&amp;#39;s stuff and turning to HttpClient. I strongly believe we should not&lt;br/&gt;
fall into the same trap here. &lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12380145" author="eric@tibco.com" created="Thu, 17 Apr 2003 21:02:09 +0100"  >I like Adrian Suttons recent suggestion for detecting whether the socket read&lt;br/&gt;
will fail after the write - Set the timeout on the socket to one ms, and try a&lt;br/&gt;
read of a single byte before doing the write.  His psuedo code (although I&lt;br/&gt;
changed the catch clause after reading the SO_TIMEOUT docs):&lt;br/&gt;
&lt;br/&gt;
if (socketInputStream.available() == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;socket.setSoTimeout(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;socketInputStream.read();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;socket.setSoTimeout(oldValue);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (InterruptedIOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We&amp;#39;re good to go!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (IOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Connection is half closed, request will fail.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new HttpRecoverableException(&amp;quot;Argg!&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// There really shouldn&amp;#39;t be data on the input stream before the request is&lt;br/&gt;
sent.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// We probably should throw an exception in this case because the previous&lt;br/&gt;
response&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// wasn&amp;#39;t fully read.&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Adrian suggested using a wrapper around the socket input stream that does mark&lt;br/&gt;
and reset, but I&amp;#39;d like to suggest the alternative of a PushbackInputStream&lt;br/&gt;
wrapper, so if a byte did get read, it could be pushed back.  Perhaps we could&lt;br/&gt;
add a function to the HttpConnection called something like &amp;quot;isConnectionStale()&amp;quot;&lt;br/&gt;
which would be called by processRequest() instead of calling &amp;quot;isOpen()&amp;quot;.  The&lt;br/&gt;
stale check could do the &amp;quot;isOpen&amp;quot; check, and attempt to read one byte as per above.&lt;br/&gt;
&lt;br/&gt;
Would this work?&lt;br/&gt;
&lt;br/&gt;
Unfortunately, I have not been able to reproduce the problem with recoverable&lt;br/&gt;
exceptions here, so I cannot test the change.  I should have time to put&lt;br/&gt;
together a patch some time today or tomorrow, if nobody else can pick it up, but&lt;br/&gt;
I would still need someone else to test it.</comment>
                    <comment id="12380146" author="eric@tibco.com" created="Fri, 18 Apr 2003 00:16:55 +0100"  >Created an attachment (id=5878)&lt;br/&gt;
stale_conn.patch - does peek-ahead read on recycled connections&lt;br/&gt;
</comment>
                    <comment id="12380147" author="eric@tibco.com" created="Fri, 18 Apr 2003 00:19:29 +0100"  >Instead of mucking with the logic of HttpMethodBase.processRequest(), I put the&lt;br/&gt;
isStale() check only in the connection managers if they are doling out an&lt;br/&gt;
existing open connection.  As I said before, I&amp;#39;ve not been able to cause the&lt;br/&gt;
problem to occur, and I&amp;#39;m wondering if someone else will test it.&lt;br/&gt;
&lt;br/&gt;
Thanks.</comment>
                    <comment id="12380148" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 09:05:34 +0100"  >Very nice Eric.  This seems to have fixed the problem.  I ran a few tests and&lt;br/&gt;
things look good.  I refactored a little and added a some logging, but the core&lt;br/&gt;
&amp;nbsp;logic is the same. Patch to come soon.&lt;br/&gt;
&lt;br/&gt;
To anyone who has been experiencing this problem, please try this patch out.  I&lt;br/&gt;
think this may be the one.&lt;br/&gt;
&lt;br/&gt;
Again, nice work.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380149" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 09:08:28 +0100"  >Created an attachment (id=5886)&lt;br/&gt;
Eric&amp;#39;s patch plus a little&lt;br/&gt;
</comment>
                    <comment id="12380150" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 10:26:00 +0100"  >Created an attachment (id=5887)&lt;br/&gt;
Retry handler&lt;br/&gt;
</comment>
                    <comment id="12380151" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 10:35:06 +0100"  >Attached above is a redo of &amp;quot;patch 1&amp;quot;. I think Eric&amp;#39;s patch for detecting stale&lt;br/&gt;
connections is the ultimate fix for this bug.  The discussion however has also&lt;br/&gt;
brought up some issues with the current retry logic. As Oleg was pointing out,&lt;br/&gt;
the current retry implementation is quite rigid.  This patch hopes to fix this&lt;br/&gt;
by extracting the retry logic to a new interface.  This change gives full&lt;br/&gt;
control over retrying to the user and still allows for the current functionality&lt;br/&gt;
with no modifications.  Please take a look when possible.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12380152" author="apernoud@sopragroup.com" created="Fri, 18 Apr 2003 15:00:18 +0100"  >I&amp;#39;ll try it today, but I have just a question (I might be wrong) :&lt;br/&gt;
While debugging, I&amp;#39;ve seen that isOpen() is called really often for one &lt;br/&gt;
request, and looking at the patch, it seems the test will try catch IOException &lt;br/&gt;
every time isOpen is called. Isn&amp;#39;t it gonna affect performance ? Isn&amp;#39;t it &lt;br/&gt;
possible to check the stale of HttpConnection only once before the request ?&lt;br/&gt;
Again, I have to check what I say, but when I made a breakpoint on isOpen() &lt;br/&gt;
method once, I went inside a lot of time.&lt;br/&gt;
Anyway, a big thank you for this patch that I&amp;#39;m gonna try ASAP.</comment>
                    <comment id="12380153" author="apernoud@sopragroup.com" created="Fri, 18 Apr 2003 17:39:01 +0100"  >It woooooooooooooorks !!!!!!!!!!!!!! I had a test case here, and indeed, the &lt;br/&gt;
isStale() method returned true, so the connection got closed on client side and &lt;br/&gt;
then httpclient opened a new one.&lt;br/&gt;
Thank you so much to everyone (Adrian for this idea, eric for first patch, and &lt;br/&gt;
mike for always being active on response time).&lt;br/&gt;
And forget about the isOpen() method being called multiple times, I just &lt;br/&gt;
checked, this is called only once/request.&lt;br/&gt;
This is just in time for my production release, It could&amp;#39;nt be better. Thanks &lt;br/&gt;
thanks thanks</comment>
                    <comment id="12380154" author="olegk" created="Fri, 18 Apr 2003 18:13:52 +0100"  >Mike, you rock! Your retry handler is a beauty. Aur&amp;#xE9;lien is apparently happy too. &lt;br/&gt;
&lt;br/&gt;
I think you should go ahead with committing both patches. As soon as the patches&lt;br/&gt;
land in the CVS code tree I suggest we call CVS commit freeze and hand matters&lt;br/&gt;
over to Jandalf to take care of long promised BETA-1 release.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
PS: Do I sound too impatient? ;-)</comment>
                    <comment id="12380155" author="apernoud@sopragroup.com" created="Fri, 18 Apr 2003 18:18:52 +0100"  >I haven&amp;#39;t tested yet the retry handler but I&amp;#39;ll give it a shot today, seems &lt;br/&gt;
good.</comment>
                    <comment id="12380156" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 21:01:04 +0100"  >Both patches have been applied.  Many thanks to Eric, Adrian, Aur&amp;#xE9;lien and Oleg&lt;br/&gt;
for working through this problem.  This has been a major problem for a while now&lt;br/&gt;
and I think we finally have a good solution.&lt;br/&gt;
&lt;br/&gt;
Oleg, I am also quite ready for a beta-1.  Hopefully it will come soon.  I think&lt;br/&gt;
if we do not hear anything new by the end of the day we should call for a release.&lt;br/&gt;
&lt;br/&gt;
Mike </comment>
                </comments>
                    <attachments>
                    <attachment id="12326793" name="ASF.LICENSE.NOT.GRANTED--recoverable.patch" size="12809" author="becke@u.washington.edu" created="Wed, 16 Apr 2003 20:31:58 +0100" />
                    <attachment id="12326796" name="ASF.LICENSE.NOT.GRANTED--retry.patch" size="9651" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 10:26:00 +0100" />
                    <attachment id="12326794" name="ASF.LICENSE.NOT.GRANTED--stale_conn.patch" size="9542" author="eric@tibco.com" created="Fri, 18 Apr 2003 00:16:55 +0100" />
                    <attachment id="12326795" name="ASF.LICENSE.NOT.GRANTED--stale.patch" size="6568" author="becke@u.washington.edu" created="Fri, 18 Apr 2003 09:08:28 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>19063</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 17 Apr 2003 19:34:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133242</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189130</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>