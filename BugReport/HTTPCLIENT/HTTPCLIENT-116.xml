<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:13:28 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-116/HTTPCLIENT-116.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-116] Request/Response race condition when doing multiple requests on the same connection.</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-116</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>If one tries to do multiple request over the same socket connection a race &lt;br/&gt;
condition occurs in the input/output streams.&lt;br/&gt;
eg. &lt;br/&gt;
-- Some request --&amp;gt;&lt;br/&gt;
&amp;lt;- HTTP/1.1 200 OK&lt;br/&gt;
&amp;lt;- Some: Headers&lt;br/&gt;
&amp;lt;- &lt;br/&gt;
&amp;lt;- The body.&lt;br/&gt;
&lt;br/&gt;
-- Next request --&amp;gt;&lt;br/&gt;
&amp;lt;- HTTP/1.1 200 OK&lt;br/&gt;
&amp;lt;- More: Headers&lt;br/&gt;
&amp;lt;- &lt;br/&gt;
&amp;lt;- Some data.&lt;br/&gt;
&lt;br/&gt;
If the second request is sent, but the second response isn&amp;#39;t yet received &lt;br/&gt;
before the client starts to try to read it, it&amp;#39;ll get &lt;br/&gt;
a &amp;quot;org.apache.commons.httpclient.HttpRecoverableException: Error in parsing the &lt;br/&gt;
status  line from the response: unable to find line starting with &amp;quot;HTTP/&amp;quot;&amp;quot; &lt;br/&gt;
exception (it will think &amp;quot;The body.&amp;quot; is part of the second response).&lt;br/&gt;
&lt;br/&gt;
The following code will reproduce the problem:&lt;br/&gt;
&lt;br/&gt;
import java.io.*;&lt;br/&gt;
import java.net.*;&lt;br/&gt;
import java.util.*;&lt;br/&gt;
import org.apache.commons.httpclient.*;&lt;br/&gt;
import org.apache.commons.httpclient.methods.*;&lt;br/&gt;
&lt;br/&gt;
public class HttpClientRaceBug {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SimpleHttpServer.listen(8987);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpClient client = new HttpClient();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.startSession(&amp;quot;localhost&amp;quot;, 8987);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.getState().setCredentials(&amp;quot;Test Realm&amp;quot;,  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new UsernamePasswordCredentials(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; 100; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;GetMethod meth = new GetMethod();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.executeMethod(meth);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final class SimpleHttpServer implements Runnable {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Socket socket;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public SimpleHttpServer(Socket socket) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.socket = socket;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void listen(final int port) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread server = new Thread() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ServerSocket ss = new ServerSocket(port);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Thread(new &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SimpleHttpServer(ss.accept())).start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server.setDaemon(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server.start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedReader in = new BufferedReader(new &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader(this.socket.getInputStream()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int len = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean auth = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while ((line = in.readLine()) != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;&amp;gt; &amp;quot; + line);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (line.trim().equals(&amp;quot;&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;in.read(new char[len]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doOutput(auth);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auth = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (line.indexOf(&amp;#39;:&amp;#39;) &amp;gt; -1) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringTokenizer tok = new StringTokenizer(line, &amp;quot;:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String key = tok.nextToken().toLowerCase();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (key.equals(&amp;quot;content-length&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len = Integer.parseInt(tok.nextToken().trim());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (key.equals(&amp;quot;authorization&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auth = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static int count = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void doOutput(boolean authorized) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Writer out = new OutputStreamWriter(this.socket.getOutputStream());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String id = (count &amp;lt; 100) ? &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((count &amp;lt; 10) ? &amp;quot;00&amp;quot; + count : &amp;quot;0&amp;quot; + count) : &amp;quot;&amp;quot; + count;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (authorized) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;HTTP/1.1 401 Unauthorized\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;WWW-Authenticate: Basic realm=\&amp;quot;Test Realm\&amp;quot;\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Response-Id: &amp;quot; + id + &amp;quot;\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Content-Type: text/html; charset=iso-8859-1\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Content-Length: 17\r\n\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;My Response (&amp;quot; + id + &amp;quot;)&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void write(Writer out, String text) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&amp;quot;&amp;lt; &amp;quot; + text);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.write(text);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: PC</environment>
            <key id="12333675">HTTPCLIENT-116</key>
            <summary>Request/Response race condition when doing multiple requests on the same connection.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="becke@u.washington.edu">Michael Becke</assignee>
                                <reporter username="mike.vannoord@brainna.com">mike.vannoord</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Oct 2002 00:58:29 +0100</created>
                <updated>Sun, 22 Apr 2007 08:10:09 +0100</updated>
                    <resolved>Mon, 15 May 2006 22:44:55 +0100</resolved>
                            <version>Snapshot</version>
                                <fixVersion>2.0 Beta 1</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12379650" author="jsdever@apache.org" created="Wed, 5 Feb 2003 15:09:05 +0000"  >According to Adrian, the issue causing this bug has been fixed. The test code&lt;br/&gt;
included by the orginator of this bug runs with the correct sequence of&lt;br/&gt;
authorization challenges and authentication responses.  &lt;br/&gt;
&lt;br/&gt;
However, there is still an unexplained HttpRecoverable exception when writing&lt;br/&gt;
the request, not when reading from it, that should be investigated:&lt;br/&gt;
&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase processRequest&lt;br/&gt;
INFO: Recoverable exception caught when writing request&lt;br/&gt;
&amp;gt; GET / HTTP/1.1&lt;br/&gt;
&amp;gt; Host: localhost:8987&lt;br/&gt;
&amp;gt; User-Agent: Jakarta Commons-HttpClient/2.0alpha2&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;lt; HTTP/1.1 401 Unauthorized&lt;br/&gt;
&amp;lt; WWW-Authenticate: Basic realm=&amp;quot;Test Realm&amp;quot;&lt;br/&gt;
&amp;lt; Response-Id: 199&lt;br/&gt;
&amp;lt; Content-Type: text/html; charset=iso-8859-1&lt;br/&gt;
&amp;lt; Content-Length: 17&lt;br/&gt;
&lt;br/&gt;
&amp;lt; My Response (199)Feb 5, 2003 1:54:30 AM&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase processRequest&lt;br/&gt;
INFO: Recoverable exception caught when writing request&lt;br/&gt;
&amp;gt; GET / HTTP/1.1&lt;br/&gt;
&amp;gt; Authorization: Basic Zm9vOmJhcg==&lt;br/&gt;
&amp;gt; Host: localhost:8987&lt;br/&gt;
&amp;gt; User-Agent: Jakarta Commons-HttpClient/2.0alpha2&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;lt; HTTP/1.1 200 OK&lt;br/&gt;
&amp;lt; WWW-Authenticate: Basic realm=&amp;quot;Test Realm&amp;quot;&lt;br/&gt;
&amp;lt; Response-Id: 200&lt;br/&gt;
&amp;lt; Content-Type: text/html; charset=iso-8859-1&lt;br/&gt;
&amp;lt; Content-Length: 17&lt;br/&gt;
&lt;br/&gt;
&amp;lt; My Response (200)</comment>
                    <comment id="12379651" author="apernoud@sopragroup.com" created="Thu, 13 Feb 2003 21:08:00 +0000"  >I&amp;#39;ve encountered this bug in 2.0a2 and in the nightly from today (02/13/03), &lt;br/&gt;
and It&amp;#39;s a bigger bug than it seems&lt;br/&gt;
&lt;br/&gt;
My conf : I&amp;#39;m using a MultiThreadedConnectionManager to make lots of request &lt;br/&gt;
towards one server.&lt;br/&gt;
Each time I need a connection, I use the getConnection(hostConfig) and execute &lt;br/&gt;
the method using the connection. I always do a releaseconnection in my try() -&amp;gt; &lt;br/&gt;
finally{} to be sure the connection is really closed.&lt;br/&gt;
&lt;br/&gt;
With an old nightly (around may 2002), using HttpMultiClient and its &lt;br/&gt;
connectionmanager, everything was right. With the new release, and the nightly, &lt;br/&gt;
everything goes fine if requests are made one after the other. If two requests &lt;br/&gt;
are made simultaneously, I have many many exceptions of this kind :&lt;br/&gt;
&lt;br/&gt;
java.lang.IllegalStateException: Connection is not open&lt;br/&gt;
	at org.apache.commons.httpclient.HttpConnection.assertOpen&lt;br/&gt;
(HttpConnection.java:1019)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpConnection.readLine&lt;br/&gt;
(HttpConnection.java:896)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.readStatusLine&lt;br/&gt;
(HttpMethodBase.java:1898)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.readResponse&lt;br/&gt;
(HttpMethodBase.java:1704)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.processRequest&lt;br/&gt;
(HttpMethodBase.java:2304)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.execute&lt;br/&gt;
(HttpMethodBase.java:957)&lt;br/&gt;
&lt;br/&gt;
and sometimes I also have the &amp;quot;INFO: Recoverable exception caught when writing &lt;br/&gt;
request&amp;quot;, it depends.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll try to make a testcase this afternoon to reproduce it, cause here all I do &lt;br/&gt;
is open many browser and &amp;quot;refresh&amp;quot; them :)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m afraid this bug isn&amp;#39;t over yet.</comment>
                    <comment id="12379652" author="apernoud@sopragroup.com" created="Thu, 13 Feb 2003 23:26:43 +0000"  >Created an attachment (id=4858)&lt;br/&gt;
To reproduce the bug of handling multiple connections and multiple simultaneous requests to same host&lt;br/&gt;
</comment>
                    <comment id="12379653" author="apernoud@sopragroup.com" created="Thu, 13 Feb 2003 23:30:18 +0000"  >I created an attachment to reproduce the bug.&lt;br/&gt;
&lt;br/&gt;
If I understand well how works HttpClient, this attachment should *always* end. &lt;br/&gt;
Sometimes it simply blocks (waiting for a connection, even if I did the &lt;br/&gt;
releaseconnection at the end of my getmethod), sometimes it throws exceptions &lt;br/&gt;
saying connection isn&amp;#39;t open...&lt;br/&gt;
&lt;br/&gt;
I personnaly have to go back to my nightly that used HttpMultiClient, cause &lt;br/&gt;
this is a major bug for my project, my webapp could wait for a connection for &lt;br/&gt;
ever :-(</comment>
                    <comment id="12379654" author="becke@u.washington.edu" created="Fri, 14 Feb 2003 03:22:36 +0000"  >It seems that there may be a few things going on.  If you could, please try the&lt;br/&gt;
following:&lt;br/&gt;
&lt;br/&gt;
1 - change the following line in SimpleRequest.run():&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;aConnection.releaseConnection();&lt;br/&gt;
&lt;br/&gt;
to:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method.releaseConnection();&lt;br/&gt;
&lt;br/&gt;
2 - I think there may be something wrong in the implementation of the&lt;br/&gt;
SimpleHttpServer.  Please try running against a real http server.  I tried it&lt;br/&gt;
will Tomcat running locally.&lt;br/&gt;
&lt;br/&gt;
After doing these two things I was able to get everything working reliably. &lt;br/&gt;
Please let me know how things fare for you.&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379655" author="becke@u.washington.edu" created="Fri, 14 Feb 2003 10:04:16 +0000"  >Ok, I think I&amp;#39;ve figured it out.  It seems that calling&lt;br/&gt;
HttpConnection.releaseConnection() is inherently unsafe.  Connections are used&lt;br/&gt;
on a per method basis but have no reference to the method they are being used&lt;br/&gt;
by.  Here&amp;#39;s a scenario:&lt;br/&gt;
&lt;br/&gt;
1) A method (A) gets a connection from the connectionManager&lt;br/&gt;
2) A is executed&lt;br/&gt;
3) The response from A is read fully and the connection is implicitly released&lt;br/&gt;
4) The released connection is given to another method (B)&lt;br/&gt;
5) Following the execution of A the user code calls&lt;br/&gt;
HttpConnection.releaseConnection()&lt;br/&gt;
6) The connection is released again&lt;br/&gt;
7) B executes but is using a released connection&lt;br/&gt;
&lt;br/&gt;
As you can see the connection was released twice for the method A.  Currently&lt;br/&gt;
there is no way for a connection to know that it has already been released from&lt;br/&gt;
a particular method.  This is not a problem if the&lt;br/&gt;
HttpMethod.releaseConnection() is always used, since it knows to only release&lt;br/&gt;
its connection once.&lt;br/&gt;
&lt;br/&gt;
So, for a quick fix, HttpConnection.releaseConnection() should not be used in&lt;br/&gt;
client code.  I&amp;#39;ll try to come up with a solution that fixes it, but we may just&lt;br/&gt;
have to remove it from public consumption.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379656" author="apernoud@sopragroup.com" created="Fri, 14 Feb 2003 18:14:16 +0000"  >Thanks a lot Michael, now all errors I said before are gone.&lt;br/&gt;
&lt;br/&gt;
But I have new troubles, about stream being closed, that I didn&amp;#39;t have with the &lt;br/&gt;
old httpMultiClient. The fact is my app is parsing the stream (XHTML) with &lt;br/&gt;
Xerces parser, and I have errors I never add before :&lt;br/&gt;
&lt;br/&gt;
java.lang.NullPointerException: &lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.responseBodyConsumed&lt;br/&gt;
(HttpMethodBase.java:2438)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase$1.responseConsumed&lt;br/&gt;
(HttpMethodBase.java:2466)&lt;br/&gt;
	at org.apache.commons.httpclient.AutoCloseInputStream.notifyWatcher&lt;br/&gt;
(AutoCloseInputStream.java:215)&lt;br/&gt;
	at org.apache.commons.httpclient.AutoCloseInputStream.checkClose&lt;br/&gt;
(AutoCloseInputStream.java:187)&lt;br/&gt;
	at org.apache.commons.httpclient.AutoCloseInputStream.read&lt;br/&gt;
(AutoCloseInputStream.java:123)&lt;br/&gt;
&lt;br/&gt;
(and above is called by Xerces Parser reading the stream)&lt;br/&gt;
&lt;br/&gt;
Do you have any idea where it might come from ? It only happens when doing &lt;br/&gt;
multiple simultaneous requests. One user is ok...&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m still using the nightly from 13/02</comment>
                    <comment id="12379657" author="apernoud@sopragroup.com" created="Fri, 14 Feb 2003 18:31:39 +0000"  >Ok, a quick look at httpmethod.releaseconnection told me :&lt;br/&gt;
&lt;br/&gt;
if (responseStream != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// FYI - this may indirectly invoke responseBodyConsumed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;responseStream.close();&lt;br/&gt;
^^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;br/&gt;
&lt;br/&gt;
So I told to myself, well, let&amp;#39;s remove the releaseconnection() method... But &lt;br/&gt;
it&amp;#39;s still there, even removing all the releaseconnection ni my code, I get &lt;br/&gt;
this exception when multiple requests are made simultenaously...&lt;br/&gt;
&lt;br/&gt;
Thx again for your fast answer and help !</comment>
                    <comment id="12379658" author="becke@u.washington.edu" created="Sat, 15 Feb 2003 01:06:20 +0000"  >Created an attachment (id=4878)&lt;br/&gt;
Test MultiThreadedHttpConnectionManager&lt;br/&gt;
</comment>
                    <comment id="12379659" author="becke@u.washington.edu" created="Sat, 15 Feb 2003 01:30:17 +0000"  >I just attached a test version of MultiThreadedHttpConnection manager.  Mind you&lt;br/&gt;
this code is quite ugly.  This seems to have fixed the problem for me.  Please&lt;br/&gt;
give this a shot if you can.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379660" author="becke@u.washington.edu" created="Tue, 18 Feb 2003 05:59:41 +0000"  >Created an attachment (id=4908)&lt;br/&gt;
Fix patch 1&lt;br/&gt;
</comment>
                    <comment id="12379661" author="jsdever@apache.org" created="Thu, 20 Feb 2003 09:06:43 +0000"  >Patch committed.  Please retest and close.</comment>
                    <comment id="12379662" author="apernoud@sopragroup.com" created="Thu, 20 Feb 2003 23:46:00 +0000"  >Tested CVS today, works for me.&lt;br/&gt;
But now it seems I&amp;#39;m encountering &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-147&quot; title=&quot;HttpClient enter 100% for endless time&quot;&gt;&lt;strike&gt;HTTPCLIENT-147&lt;/strike&gt;&lt;/a&gt; about httpclient using 100% CPU :&lt;br/&gt;
&lt;a href=&quot;http://nagoya.apache.org/bugzilla/show_bug.cgi?id=16458&quot;&gt;http://nagoya.apache.org/bugzilla/show_bug.cgi?id=16458&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll explain the trouble there since httpclient seems to continue working, but &lt;br/&gt;
is using 90% CPU after like half an hour of using.</comment>
                    <comment id="12379663" author="apernoud@sopragroup.com" created="Fri, 21 Feb 2003 22:26:08 +0000"  >I&amp;#39;ve retested my webapp using CVS from yesterday evening, and I still have many &lt;br/&gt;
exceptions of this type :&lt;br/&gt;
Error in parsing the &lt;br/&gt;
status  line from the response: unable to find line starting with &amp;quot;HTTP/&lt;br/&gt;
&lt;br/&gt;
I compared my new sources to my old ones that were using HttpMultiClient, &lt;br/&gt;
they&amp;#39;re &amp;quot;identical&amp;quot; in term of using httpclient lib. Except the new one is &lt;br/&gt;
using HttpMultiThreadConnectionManager instead of HttpMultiClient&lt;br/&gt;
&lt;br/&gt;
The old one never throws HttpException, and in the new one, while testing a &lt;br/&gt;
great number of users using Opensta, if I open a browser myself and try to see &lt;br/&gt;
what happens, I sometimes have the exception aboved and sometimes streams are &lt;br/&gt;
being &amp;quot;exchanged&amp;quot; one another (looks like the original request/race bug where a &lt;br/&gt;
getresponsebodyasstream is not returning the good stream...)</comment>
                    <comment id="12379664" author="becke@u.washington.edu" created="Fri, 21 Feb 2003 22:52:20 +0000"  >Do you have a test case that shows this problem?  The original test you created&lt;br/&gt;
seems to be working correctly. &lt;br/&gt;
&lt;br/&gt;
I have one idea about what might be causing this.  It sounds like you are using&lt;br/&gt;
the getResponseBodyAsStream() method.  Could you be using this response stream&lt;br/&gt;
after the method has been released?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379665" author="apernoud@sopragroup.com" created="Fri, 21 Feb 2003 23:24:16 +0000"  >I&amp;#39;m currently working on making another test case, with aconnectionmanager to &lt;br/&gt;
keep a pool of connections, and a servlet to maintain session, cause it seems &lt;br/&gt;
some requests of my app are made without session in cookies.&lt;br/&gt;
I&amp;#39;m not using getresponseasstream after releasing the connection, here is my &lt;br/&gt;
using :&lt;br/&gt;
&lt;br/&gt;
try&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;new Method&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;method.execute(astate,connectionmanager.getconnection())&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;work with the stream&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;return what i have to return&lt;br/&gt;
}&lt;br/&gt;
catch exception&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;log it&lt;br/&gt;
}&lt;br/&gt;
finally&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;method.releaseconnection&lt;br/&gt;
}</comment>
                    <comment id="12379666" author="apernoud@sopragroup.com" created="Sat, 22 Feb 2003 01:12:06 +0000"  >Created an attachment (id=4970)&lt;br/&gt;
A new testcase&lt;br/&gt;
</comment>
                    <comment id="12379667" author="apernoud@sopragroup.com" created="Sat, 22 Feb 2003 01:14:04 +0000"  >Ok I&amp;#39;ve attached a new test case that shows the trouble. I&amp;#39;m sorry for the &lt;br/&gt;
code, it&amp;#39;s not &amp;quot;beautiful&amp;quot;, but it should work.&lt;br/&gt;
In fact I&amp;#39;m trying to reproduce what I&amp;#39;m doing in my webapp in this testcase, &lt;br/&gt;
and the bug shows up, so maybe I&amp;#39;m doing something wrong (I hope I&amp;#39;m not...).&lt;br/&gt;
&lt;br/&gt;
Here the way it works :&lt;br/&gt;
&lt;br/&gt;
Multiple simultaneous requests towars a servlet.&lt;br/&gt;
request are this kind : /httpclient/servlet?parameter=i&lt;br/&gt;
&lt;br/&gt;
I use a global state that I initialize at first to make a session with the &lt;br/&gt;
servlet&lt;br/&gt;
All requests have unique i parameter&lt;br/&gt;
&lt;br/&gt;
The servlet takes the request, if session is valid -&amp;gt; returns i, else &lt;br/&gt;
return &amp;quot;new session&amp;quot; or &amp;quot;session not valid&amp;quot;&lt;br/&gt;
&lt;br/&gt;
As the method knows what it asked, it checks if it&amp;#39;s what he asked.&lt;br/&gt;
Yes -&amp;gt; do nothing&lt;br/&gt;
No -&amp;gt; print &amp;quot;I asked for &amp;quot; myuniqueid &amp;quot;and got&amp;quot; responsebodystring&lt;br/&gt;
&lt;br/&gt;
For few requests, it goes ok, for a lot, there are exceptions, and then you see &lt;br/&gt;
errors of not getting the good result, you see the http parse exception &amp;quot;can&amp;#39;t &lt;br/&gt;
find HTTP/&amp;quot;...&lt;br/&gt;
&lt;br/&gt;
As I might be doing something wrong, please test this case, and if I&amp;#39;m not &lt;br/&gt;
doing something wrong, could you include it in a real test case (I don&amp;#39;t know &lt;br/&gt;
how to do testcase yet) ??&lt;br/&gt;
&lt;br/&gt;
Thx,&lt;br/&gt;
Aurelien</comment>
                    <comment id="12379668" author="becke@u.washington.edu" created="Sat, 22 Feb 2003 03:24:57 +0000"  >I have tried this new test case, but it seems to work fine for me.  I&amp;#39;m running&lt;br/&gt;
the servet in Tomcat 4.1.18 and have tried it with 1000 concurrent requests. &lt;br/&gt;
Does this test fail for you?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379669" author="mike.vannoord@brainna.com" created="Sat, 22 Feb 2003 06:19:06 +0000"  >Created an attachment (id=4975)&lt;br/&gt;
Test case (the original problem, revisited)&lt;br/&gt;
</comment>
                    <comment id="12379670" author="mike.vannoord@brainna.com" created="Sat, 22 Feb 2003 06:36:13 +0000"  >The original problem (the race condition) still exists, though the reason for &lt;br/&gt;
it may have changed.  Consider this scenario:&lt;br/&gt;
&lt;br/&gt;
1) The Method executes using a connection aquired from the &lt;br/&gt;
SimpleHttpConnectionManager.&lt;br/&gt;
2) The response is read until there is no more data (i.e. InputStream.read() &lt;br/&gt;
== -1).&lt;br/&gt;
3) The connection gets returned to the manager ready to be used again, i.e. no &lt;br/&gt;
sockets/streams are closed.&lt;br/&gt;
4) A new Method submits a request to an HTTP server using the existing &lt;br/&gt;
connection.&lt;br/&gt;
5) The Method attempts to read the server&amp;#39;s response before the server has &lt;br/&gt;
prepared it (its a very inefficient server...not like tomcat ;) )&lt;br/&gt;
6) The connection&amp;#39;s InputStream.read() will return -1 and the Method will &lt;br/&gt;
assume the response is invalid (it&amp;#39;ll throw the &amp;quot;HttpRecoverableException: &lt;br/&gt;
Error in parsing the status  line from the response: unable to find line &lt;br/&gt;
starting with &amp;quot;HTTP/&amp;quot;&amp;quot; exception).&lt;br/&gt;
&lt;br/&gt;
Hopefully my test case will demonstrate this scenario.  It can quite easily be &lt;br/&gt;
fixed by simply waiting for the response before starting to read it.  &lt;br/&gt;
HttpConnection already has a &amp;quot;waitForResponse()&amp;quot; method which could be used &lt;br/&gt;
(although waitForResponse() will seriously burn some CPU cycles if not tweeked &lt;br/&gt;
a little).</comment>
                    <comment id="12379671" author="sam.maloney@filogix.com" created="Sat, 22 Feb 2003 08:57:45 +0000"  >&amp;gt; 6) The connection&amp;#39;s InputStream.read() will return -1 and the Method will  &lt;br/&gt;
&amp;gt; assume the response is invalid..... &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
This is incorrect. An InputStream will block until the requested amount of data has &lt;br/&gt;
become available, or the connection is closed (EOF). (See JDK JavaDoc for &lt;br/&gt;
InputStream). &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
If the socket is still connected on both ends, calling (int)read() on the client end will &lt;br/&gt;
block until one byte is available. It will only return -1 on EOF. </comment>
                    <comment id="12379672" author="mike.vannoord@brainna.com" created="Tue, 25 Feb 2003 23:00:37 +0000"  >Thanks, Sam.  You&amp;#39;re exactly correct.  If I modify my test case server to &lt;br/&gt;
simply flush its output rather than close it, everything works perfectly.  &lt;br/&gt;
&lt;br/&gt;
It begs the question, however, should this client fully support HTTP 1.1 &lt;br/&gt;
servers which don&amp;#39;t necessarily maintain a persistent connection?  The HTTP 1.1 &lt;br/&gt;
RFC says the servers &amp;quot;SHOULD&amp;quot; meet this requirement, not that they &amp;quot;MUST&amp;quot; meet &lt;br/&gt;
it.</comment>
                    <comment id="12379673" author="apernoud@sopragroup.com" created="Thu, 27 Feb 2003 17:35:01 +0000"  >Ok now I&amp;#39;m sure my troubles don&amp;#39;t come from this anymore, so as I&amp;#39;m the one &lt;br/&gt;
that reopened it I&amp;#39;ll close it !</comment>
                    <comment id="12379674" author="erik.van.oosten@backstream.com" created="Tue, 29 Apr 2003 20:56:30 +0100"  >The following program produces the bug almost always. It uses the&lt;br/&gt;
util.concurrent package to let 2 threads start simultaneously.&lt;br/&gt;
&lt;br/&gt;
I tried the program with the nightly build 20030429 and release 2 Alpha 1.&lt;br/&gt;
&lt;br/&gt;
The program is a rewrite of &lt;a href=&apos;mailto:mike.vannoord@brainna.com&apos;&gt;mike.vannoord@brainna.com&lt;/a&gt;&amp;#39;s program. But only the&lt;br/&gt;
main method has been changed.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
import java.io.*;&lt;br/&gt;
import java.net.*;&lt;br/&gt;
import java.util.*;&lt;br/&gt;
import org.apache.commons.httpclient.*;&lt;br/&gt;
import org.apache.commons.httpclient.methods.*;&lt;br/&gt;
&lt;br/&gt;
import EDU.oswego.cs.dl.util.concurrent.Latch;&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;* &amp;lt;br&amp;gt;&lt;br/&gt;
&amp;nbsp;* @version $Revision: $&lt;br/&gt;
&amp;nbsp;*/&lt;br/&gt;
public class HttpClientRaceBug {&lt;br/&gt;
	/** Source control revision number */&lt;br/&gt;
	public static final String RCS_VERSION = &amp;quot;$Revision: $&amp;quot;;&lt;br/&gt;
	&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SimpleHttpServer.listen(8987);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final HttpClient client = new HttpClient();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.startSession(&amp;quot;localhost&amp;quot;, 8987);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.getState().setCredentials(&amp;quot;Test Realm&amp;quot;,  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new UsernamePasswordCredentials(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;));&lt;br/&gt;
&lt;br/&gt;
			final Latch go = new Latch();&lt;br/&gt;
			&lt;br/&gt;
			Thread thread1 = new Thread(&amp;quot;1&amp;quot;) {&lt;br/&gt;
				public void run() {&lt;br/&gt;
					try {&lt;br/&gt;
						go.acquire();&lt;br/&gt;
		                GetMethod meth = new GetMethod();&lt;br/&gt;
		                int lState = client.executeMethod(meth);&lt;br/&gt;
						byte[] aData = meth.getResponseBody();&lt;br/&gt;
						System.out.println(&amp;quot;String 1: &amp;quot; + new String(aData));&lt;br/&gt;
					} catch (Exception ex) {&lt;br/&gt;
						ex.printStackTrace();&lt;br/&gt;
					}&lt;br/&gt;
				}&lt;br/&gt;
			};&lt;br/&gt;
			Thread thread2 = new Thread(&amp;quot;2&amp;quot;) {&lt;br/&gt;
				public void run() {&lt;br/&gt;
					try {&lt;br/&gt;
						go.acquire();&lt;br/&gt;
		                GetMethod meth = new GetMethod();&lt;br/&gt;
		                int lState = client.executeMethod(meth);&lt;br/&gt;
						byte[] aData = meth.getResponseBody();&lt;br/&gt;
						System.out.println(&amp;quot;String 2: &amp;quot; + new String(aData));&lt;br/&gt;
					} catch (Exception ex) {&lt;br/&gt;
						ex.printStackTrace();&lt;br/&gt;
					}&lt;br/&gt;
				}&lt;br/&gt;
			};&lt;br/&gt;
&lt;br/&gt;
			thread1.start();&lt;br/&gt;
			thread2.start();&lt;br/&gt;
			Thread.sleep( 1000L ); /* sleep 1s */&lt;br/&gt;
			&lt;br/&gt;
			go.release();&lt;br/&gt;
&lt;br/&gt;
			Thread.sleep( 3000L ); /* sleep 3s */&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static final class SimpleHttpServer implements Runnable {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Socket socket;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public SimpleHttpServer(Socket socket) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.socket = socket;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void listen(final int port) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread server = new Thread() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ServerSocket ss = new ServerSocket(port);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Thread(new &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SimpleHttpServer(ss.accept())).start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server.setDaemon(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;server.start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedReader in = new BufferedReader(new &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InputStreamReader(this.socket.getInputStream()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int len = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean auth = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while ((line = in.readLine()) != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;&amp;gt; &amp;quot; + line);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (line.trim().equals(&amp;quot;&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;in.read(new char[len]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doOutput(auth);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auth = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (line.indexOf(&amp;#39;:&amp;#39;) &amp;gt; -1) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringTokenizer tok = new StringTokenizer(line, &amp;quot;:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String key = tok.nextToken().toLowerCase();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (key.equals(&amp;quot;content-length&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len = Integer.parseInt(tok.nextToken().trim());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (key.equals(&amp;quot;authorization&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;auth = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static int count = 0;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void doOutput(boolean authorized) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Writer out = new OutputStreamWriter(this.socket.getOutputStream());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count++;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String id = (count &amp;lt; 100) ? &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((count &amp;lt; 10) ? &amp;quot;00&amp;quot; + count : &amp;quot;0&amp;quot; + count) : &amp;quot;&amp;quot; + count;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (authorized) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;HTTP/1.1 200 OK\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;HTTP/1.1 401 Unauthorized\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;WWW-Authenticate: Basic realm=\&amp;quot;Test Realm\&amp;quot;\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Response-Id: &amp;quot; + id + &amp;quot;\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Content-Type: text/html; charset=iso-8859-1\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;Content-Length: 17\r\n\r\n&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;write(out, &amp;quot;My Response (&amp;quot; + id + &amp;quot;)&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void write(Writer out, String text) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(&amp;quot;&amp;lt; &amp;quot; + text);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.write(text);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
</comment>
                    <comment id="12379675" author="apernoud@sopragroup.com" created="Tue, 29 Apr 2003 21:09:19 +0100"  >I think the trouble you have come from the out.close() that closes the &lt;br/&gt;
outputstream instead of simply flushing it...&lt;br/&gt;
try to change this :&lt;br/&gt;
write(out, &amp;quot;Content-Type: text/html; charset=iso-8859-1\r\n&amp;quot;);&lt;br/&gt;
write(out, &amp;quot;Content-Length: 17\r\n\r\n&amp;quot;);&lt;br/&gt;
write(out, &amp;quot;My Response (&amp;quot; + id + &amp;quot;)&amp;quot;);&lt;br/&gt;
out.close();&lt;br/&gt;
^^^^^^^^^^^^^^^^^&lt;br/&gt;
with out.flush(), see it it works then, and close the bug.</comment>
                    <comment id="12379676" author="eric@tibco.com" created="Tue, 29 Apr 2003 21:15:23 +0100"  >Unfortunately for the latest poster, the default connection manager for&lt;br/&gt;
HttpClient is not MultiThreadedConnectionManager, so of course his alteration&lt;br/&gt;
with multiple threads fails.&lt;br/&gt;
&lt;br/&gt;
If we do anything for this bug, it would be that we change the default&lt;br/&gt;
HttpClient connection manager to the multi-threaded one, but that has some&lt;br/&gt;
potential bad side effects for code (apparent lock-ups) that does not have the&lt;br/&gt;
discipline to ensure that releaseConnection() gets called for all requests.</comment>
                    <comment id="12379677" author="erik.van.oosten@backstream.com" created="Tue, 29 Apr 2003 21:31:39 +0100"  >Perhaps that can be solved by always creating new connections when the pool of&lt;br/&gt;
connections is empty. (That is, if it works for a pool.)</comment>
                    <comment id="12379678" author="becke@u.washington.edu" created="Tue, 29 Apr 2003 21:35:49 +0100"  >The MultiThreadedHttpConnectionManager must be used for multi-threading to work.&lt;br/&gt;
&amp;nbsp;Please take a look at the folowing example: &lt;br/&gt;
&lt;a href=&quot;http://cvs.apache.org/viewcvs/jakarta-commons/httpclient/src/examples/MultiThreadedExample.java?rev=1.1&amp;content-type=text/vnd.viewcvs-markup&quot;&gt;http://cvs.apache.org/viewcvs/jakarta-commons/httpclient/src/examples/MultiThreadedExample.java?rev=1.1&amp;amp;content-type=text/vnd.viewcvs-markup&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I am also working on some documentation regarding threading to be added to the&lt;br/&gt;
user guide.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379679" author="erik.van.oosten@backstream.com" created="Tue, 29 Apr 2003 21:49:17 +0100"  >Thanks Michael. Using the MultiThreadedHttpConnectionManager works.&lt;br/&gt;
&lt;br/&gt;
I did not close the bug because it does not work with the latest build (20030429).&lt;br/&gt;
</comment>
                    <comment id="12379680" author="becke@u.washington.edu" created="Tue, 29 Apr 2003 23:11:03 +0100"  >It seems to be an issue with the SimpleHttpServer. I tried this code against&lt;br/&gt;
Tomcat and Apache running locally and had no trouble.  In particular I believe&lt;br/&gt;
the call to close the output stream at the end of the response is the culprit. &lt;br/&gt;
Removing this line fixes things.&lt;br/&gt;
&lt;br/&gt;
I forget where I read this recently but closing the stream explictly can cause&lt;br/&gt;
problems.  It has something to do with the stream being reset before the data&lt;br/&gt;
can be read on the client side.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379681" author="mike.vannoord@brainna.com" created="Tue, 29 Apr 2003 23:20:20 +0100"  >It should be noted that my SimpleHttpServer reports that it is an HTTP 1.1 &lt;br/&gt;
server, but it doesn&amp;#39;t support persistant connections.  So for future &lt;br/&gt;
reference, anybody who wants to use this code ought to change the output header &lt;br/&gt;
to HTTP/1.0 or to simply flush() the output stream, rather than close() it.</comment>
                    <comment id="12379682" author="erik.van.oosten@backstream.com" created="Tue, 13 May 2003 16:44:46 +0100"  >It seems that the problem re-appeared again in my code (even with the multi&lt;br/&gt;
threaded http connection manager).&lt;br/&gt;
I&amp;#39;ll move to using one HttpClient instance per request.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Erik.&lt;br/&gt;
</comment>
                    <comment id="12379683" author="adrian@ephox.com" created="Tue, 13 May 2003 17:01:24 +0100"  >Erik,&lt;br/&gt;
Simply moving to using multiple HttpClient instances isn&amp;#39;t a particularly good option as if this bug&lt;br/&gt;
is still causing problems, other people will eventually run into it.  It would be really good if you&lt;br/&gt;
could take a little time going through the trouble shooting guide at&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/httpclient/troubleshooting.html&quot;&gt;http://jakarta.apache.org/commons/httpclient/troubleshooting.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
and in particular provide the wire trace log.  Also make sure you are using the latest nightly of&lt;br/&gt;
HttpClient and that you aren&amp;#39;t using the SimpleHttpServer that was posted in this thread as it was&lt;br/&gt;
the cause of the problem last time.  Details of your exact setup (JRE version, server you&amp;#39;re using &lt;br/&gt;
and a specific test case) are also invaluable in these situations.  While it&amp;#39;s quite possible that the&lt;br/&gt;
bug has been reintroduced, most of the people who were seeing this problem are no longer seeing&lt;br/&gt;
it so that suggest the problem is specific to your configuration and we&amp;#39;ll need as much detail to &lt;br/&gt;
reproduce it as possible.&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
&lt;br/&gt;
Adrian Sutton.</comment>
                    <comment id="12379684" author="erik.van.oosten@backstream.com" created="Tue, 13 May 2003 19:43:32 +0100"  >I am sorry for all the fuss I have created so far. Being inspired by Adrian, I&lt;br/&gt;
went into the matter again, and found out that the bug was in my own code.&lt;br/&gt;
&lt;br/&gt;
Thanks for the support.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Erik.&lt;br/&gt;
</comment>
                    <comment id="12379685" author="erik.van.oosten@backstream.com" created="Tue, 13 May 2003 23:54:41 +0100"  >I hate concurrency bugs. I am almost ashamed to mention this again, but now we&lt;br/&gt;
actually use the stuff &amp;#39;en mass&amp;#39;, a problem showed up again.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Unfortunaly, turning on the log as described in the &amp;#39;trouble shooting&amp;#39; did not&lt;br/&gt;
help. When logging is turned on the bug no longer appears!&lt;br/&gt;
&lt;br/&gt;
What we do see is a number of broken pipes reported by HttpClient. Why this&lt;br/&gt;
could be the case is unclear to me. The servlet it is talking to, is no where&lt;br/&gt;
near its maximum capacity. So maybe the problem is no longer a concurreny problem.&lt;br/&gt;
&lt;br/&gt;
Here is some information on the configuration:&lt;br/&gt;
- We are using HttpClient from a servlet (running in Tomcat 4.1.18) to connect&lt;br/&gt;
to another servlet (running in Tomcat 4.0.3). The latter is heavilly tested for&lt;br/&gt;
concurrency.&lt;br/&gt;
- Both Tomcats run on the same Linux host (Red hat 8.0) with an abundance of&lt;br/&gt;
memory and CPU power&lt;br/&gt;
- Both Tomcats use the same jdk (jdk1.3_06) but run in a different jvm.&lt;br/&gt;
- We are using the MulitThreadedConnectionManager&lt;br/&gt;
</comment>
                    <comment id="12379686" author="becke@u.washington.edu" created="Wed, 14 May 2003 00:09:16 +0100"  >Do any of the methods fail throwing an exception?  If so, what does the error&lt;br/&gt;
look like?  Which version of HttpClient are you using?  Are you using SSL?  Is&lt;br/&gt;
it possible that the methods complete, but that errors are being printed&lt;br/&gt;
internally?  In normal use connections will time and you will get broken pipe&lt;br/&gt;
errors, but this should be handled internally and retried.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                </comments>
                    <attachments>
                    <attachment id="12326693" name="ASF.LICENSE.NOT.GRANTED--connectionManager.patch" size="17158" author="becke@u.washington.edu" created="Tue, 18 Feb 2003 05:59:41 +0000" />
                    <attachment id="12326695" name="ASF.LICENSE.NOT.GRANTED--HttpClientRaceBug.java" size="3283" author="mike.vannoord@brainna.com" created="Sat, 22 Feb 2003 06:19:06 +0000" />
                    <attachment id="12326694" name="ASF.LICENSE.NOT.GRANTED--MultiThreadBug.zip" size="2944" author="apernoud@sopragroup.com" created="Sat, 22 Feb 2003 01:12:06 +0000" />
                    <attachment id="12326691" name="ASF.LICENSE.NOT.GRANTED--MultiThreadedHttpConnectionManagerBug.java" size="3340" author="apernoud@sopragroup.com" created="Thu, 13 Feb 2003 23:26:43 +0000" />
                    <attachment id="12326692" name="ASF.LICENSE.NOT.GRANTED--MultiThreadedHttpConnectionManager.java" size="31596" author="becke@u.washington.edu" created="Sat, 15 Feb 2003 01:06:20 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13463</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Feb 2003 15:09:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133170</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>188747</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>