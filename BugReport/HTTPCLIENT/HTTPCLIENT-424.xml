<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:17:18 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-424/HTTPCLIENT-424.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-424] setAuthPreemptive restricted to BASIC AuthScheme</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-424</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Pre-emptive authentication is hardcoded to be restricted to the BASIC&lt;br/&gt;
authentication scheme.  To fully support custom authentication schemes,&lt;br/&gt;
pre-emptive authentication should be made configurable, either globally, or on a&lt;br/&gt;
per-scheme basis.  A potential compromise may be to require AuthSchemes to&lt;br/&gt;
report whether they support pre-emptive capability if we wish to explicitly&lt;br/&gt;
exclude certain schemes from pre-emptive authentication.&lt;br/&gt;
&lt;br/&gt;
(reported against 3.0 RC 1)</description>
                <environment>Operating System: Windows 2000&lt;br/&gt;
Platform: PC</environment>
            <key id="12333983">HTTPCLIENT-424</key>
            <summary>setAuthPreemptive restricted to BASIC AuthScheme</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="arh14@cornell.edu">Aaron Hamid</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 Feb 2005 06:19:21 +0000</created>
                <updated>Tue, 25 Jan 2011 10:58:34 +0000</updated>
                    <resolved>Fri, 23 May 2008 17:57:53 +0100</resolved>
                            <version>3.0 Beta 1</version>
                                <fixVersion>4.0 Beta 1</fixVersion>
                                <component>HttpAuth</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12382116" author="olegk" created="Tue, 8 Feb 2005 07:25:41 +0000"  >Created an attachment (id=14201)&lt;br/&gt;
Patch (take 1)&lt;br/&gt;
&lt;br/&gt;
Well, this is the only solution I can think of which would not require an API&lt;br/&gt;
change. This is not the nicest solution, but the least intrusive one.&lt;br/&gt;
HttpClient 4.0 will have a better framework for tackling problems like this&lt;br/&gt;
one.&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382117" author="becke@u.washington.edu" created="Tue, 8 Feb 2005 12:14:54 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
Not pretty but it works.  The only missing thing is the Javadocs for AuthState.is/setPreemptive().&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12382118" author="oglueck" created="Tue, 8 Feb 2005 17:19:48 +0000"  >Feasible to solve it like that. Bad luck this bug hit in so late. Ouch, that&lt;br/&gt;
hurt. We may have to add documentation about how to select a different scheme&lt;br/&gt;
for preemti. auth. to the Authentication Guide.</comment>
                    <comment id="12382119" author="arh14@cornell.edu" created="Tue, 8 Feb 2005 23:30:03 +0000"  >Is it necessary to enforce a specific Authscheme at all?  Ideally I think there&lt;br/&gt;
should be no &amp;quot;special cases&amp;quot; as to what schemes support preemptive auth or not&lt;br/&gt;
(and theoretically one should be able to register several schemes which are&lt;br/&gt;
preemptive).&lt;br/&gt;
&lt;br/&gt;
How about just:&lt;br/&gt;
&lt;br/&gt;
-         if (this.authScheme != null) {&lt;br/&gt;
-            throw new IllegalStateException(&amp;quot;Authentication state already&lt;br/&gt;
initialized&amp;quot;);&lt;br/&gt;
-        this.authScheme = AuthPolicy.getAuthScheme(&amp;quot;basic&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.preemptive = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
There is already logic in HttpMethodDirector to detect whether credentials are&lt;br/&gt;
pre-emptively accessible:&lt;br/&gt;
&lt;br/&gt;
authenticateHost/Proxy:&lt;br/&gt;
&lt;br/&gt;
Credentials credentials = this.state.getCredentials(authscope);&lt;br/&gt;
if (credentials != null) {&lt;br/&gt;
...&lt;br/&gt;
} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (method.getHostAuthState().isPreemptive()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LOG.warn(&amp;quot;Preemptive authentication requested but no default &amp;quot; +&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;credentials available&amp;quot;); &lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
</comment>
                    <comment id="12382120" author="olegk" created="Wed, 9 Feb 2005 00:50:19 +0000"  >&amp;gt; Is it necessary to enforce a specific Authscheme at all?  Ideally I think &lt;br/&gt;
&amp;gt; there should be no &amp;quot;special cases&amp;quot; as to what schemes support preemptive &lt;br/&gt;
&amp;gt; auth or not (and theoretically one should be able to register several &lt;br/&gt;
&amp;gt; schemes which are preemptive).&lt;br/&gt;
&lt;br/&gt;
Aaron, &lt;br/&gt;
&lt;br/&gt;
(1) Preemptive auth is a hangover from the old HTTP/1.0, which we unfortunately&lt;br/&gt;
have to support. Ideally all authentication schemes should simply be able&lt;br/&gt;
properly challenge the client, if it fails to provide credentials with the&lt;br/&gt;
initial request. I do not understand why Kerberos seems unable to do so, but I&lt;br/&gt;
know next to nothing about Kerberos&lt;br/&gt;
&lt;br/&gt;
(2) Unfortunately the preemptive authentication has to be treated as a &amp;quot;special&lt;br/&gt;
case&amp;quot;, because the server simply may not support that particular auth scheme and&lt;br/&gt;
may request the client to authenticate using a different scheme. In all other&lt;br/&gt;
cases the server is not supposed to change the authentication scheme used in the&lt;br/&gt;
middle of the authentication process. &lt;br/&gt;
&lt;br/&gt;
You are very welcome to provide a fully functional patch to address the&lt;br/&gt;
limitation. Otherwise, I am planning to revisit the problem in the course of 4.0&lt;br/&gt;
development&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382121" author="arh14@cornell.edu" created="Wed, 9 Feb 2005 01:14:20 +0000"  >&amp;gt; (1) Preemptive auth is a hangover from the old HTTP/1.0, which we&lt;br/&gt;
&amp;gt; unfortunately have to support. Ideally all authentication schemes should&lt;br/&gt;
&amp;gt; simply be able properly challenge the client, if it fails to provide&lt;br/&gt;
&amp;gt; credentials with the initial request. I do not understand why Kerberos&lt;br/&gt;
&amp;gt; seems unable to do so, but I know next to nothing about Kerberos&lt;br/&gt;
&lt;br/&gt;
Well, of course we are &amp;quot;able&amp;quot; to do so, it is merely superfluous if we know&lt;br/&gt;
ahead of time the authentication scheme that will be required and will send our&lt;br/&gt;
credentials along with every request.  I don&amp;#39;t understand why this is considered&lt;br/&gt;
deprecated behavior.  It is simply an unnecessary step if the client &amp;quot;doesn&amp;#39;t&lt;br/&gt;
fail&amp;quot; to provide the credentials with the initial request, and I don&amp;#39;t see the&lt;br/&gt;
challenge mandated in the HTTP spec.  All our requests will always have&lt;br/&gt;
credentials.  The challenge provides no additional cryptographic security (I&amp;#39;m&lt;br/&gt;
not sure where it does in BASIC or DIGEST either, but in any case that also&lt;br/&gt;
ppears not to be specified in the HTTP spec). (regarding Kerberos: credentials&lt;br/&gt;
are established on the client and server in an entirely out of band mechanism&lt;br/&gt;
prior to any communication whatsoever, so the payload is simply immaterial to&lt;br/&gt;
the application protocol, in this case HTTP; you can envision it as a&lt;br/&gt;
one-time-use password that always changes and is not replayable)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; (2) Unfortunately the preemptive authentication has to be treated as a&lt;br/&gt;
&amp;gt; &amp;quot;special case&amp;quot;, because the server simply may not support that particular&lt;br/&gt;
&amp;gt; auth scheme and may request the client to authenticate using a different&lt;br/&gt;
&amp;gt; scheme. In all other cases the server is not supposed to change the&lt;br/&gt;
&amp;gt; authentication scheme used in the middle of the authentication process. &lt;br/&gt;
&lt;br/&gt;
I imagine this scenario is identical to the scenario in which the server&lt;br/&gt;
requests an authentication type the client does not (or will not) support.  In&lt;br/&gt;
either case, if neither parties are able to fulfill the other&amp;#39;s requirements,&lt;br/&gt;
the request will fail, which is the desired behavior.  (e.g. I would certainly&lt;br/&gt;
not desire a situation wherein one party requires a highly secure authentication&lt;br/&gt;
method, yet is forced into a less secure method by the other party.)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; You are very welcome to provide a fully functional patch to address the&lt;br/&gt;
&amp;gt; limitation. Otherwise, I am planning to revisit the problem in the course&lt;br/&gt;
&amp;gt; of 4.0&lt;br/&gt;
&lt;br/&gt;
I will see what I can come up with.</comment>
                    <comment id="12382122" author="olegk" created="Wed, 9 Feb 2005 02:05:02 +0000"  >&amp;gt; I don&amp;#39;t understand why this is considered deprecated behavior.&lt;br/&gt;
&lt;br/&gt;
My understanding is that &amp;quot;expect-continue&amp;quot; handshake was designed primarily to&lt;br/&gt;
render the preemptive authentication superfluous. I admin I may err in my&lt;br/&gt;
assumption, though.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I will see what I can come up with.&lt;br/&gt;
&lt;br/&gt;
In my opinion the authentication framework was the most complex piece of logic I&lt;br/&gt;
have ever written for HttpClient. I took me almost half a year to get it working&lt;br/&gt;
with all possible combination of authentication schemes (Basic vs Digest vs&lt;br/&gt;
NTLM) / host authentication and(or) proxy authentication / HTTPS tunnelling vs&lt;br/&gt;
direct HTTP / connection &amp;#39;keep-alive&amp;#39; vs connection &amp;#39;close&amp;#39;) /&lt;br/&gt;
CredentialsProvider vs HttpState / preemptive vs &amp;#39;expect-continue&amp;#39;. &lt;br/&gt;
&lt;br/&gt;
The challenge is not to get it working with Kerberos but rather to ensure that&lt;br/&gt;
the framework still works properly in all possible combinations mentioned above. &lt;br/&gt;
&lt;br/&gt;
Luckily we now have a fairly decent test case coverage, but there&amp;#39;s no easy way&lt;br/&gt;
to unit-test the NTLM authentication (which is by far the most complex), so I am&lt;br/&gt;
a little reluctant to see changes of such magnitude so late in the release process.&lt;br/&gt;
&lt;br/&gt;
Anyways, a well written, thoroughly tested patch will never be turned down&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382123" author="olegk" created="Sat, 12 Feb 2005 05:34:31 +0000"  >Pushed to 4.0</comment>
                    <comment id="12382124" author="arh14@cornell.edu" created="Wed, 23 Mar 2005 02:24:01 +0000"  >I have found that I can achieve what I desire in either of two ways:&lt;br/&gt;
&lt;br/&gt;
1) hack AuthState to not set the scheme back to basic when setPreemptive(), and&lt;br/&gt;
then specifically set my custom AuthScheme on the method&lt;br/&gt;
2) simply use HostParams.getDefaultParams() to register my DEFAULT_HEADERS with&lt;br/&gt;
my authentication headers pre-filled&lt;br/&gt;
&lt;br/&gt;
The latter is obviously much easier and straightforward.  I don&amp;#39;t know why I&lt;br/&gt;
didn&amp;#39;t realize this before. :(</comment>
                    <comment id="12599428" author="olegk" created="Fri, 23 May 2008 17:57:53 +0100"  >I am very pleasantly surprised at how easy it turned out to add support for preemptive authentication using DIGEST. &lt;br/&gt;
&lt;br/&gt;
HttpClient 4.0 rocks!!!!&lt;br/&gt;
&lt;br/&gt;
DIGEST preemptive:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/module-client/src/examples/org/apache/http/examples/client/ClientPreemptiveDigestAuthentication.java&quot;&gt;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/module-client/src/examples/org/apache/http/examples/client/ClientPreemptiveDigestAuthentication.java&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
BASIC preemptive:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/module-client/src/examples/org/apache/http/examples/client/ClientPreemptiveBasicAuthentication.java&quot;&gt;http://svn.apache.org/repos/asf/httpcomponents/httpclient/trunk/module-client/src/examples/org/apache/http/examples/client/ClientPreemptiveBasicAuthentication.java&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327189" name="ASF.LICENSE.NOT.GRANTED--preemptiveauth.patch" size="2224" author="olegk" created="Tue, 8 Feb 2005 07:25:41 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>33432</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Feb 2005 07:25:41 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133471</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47478</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>