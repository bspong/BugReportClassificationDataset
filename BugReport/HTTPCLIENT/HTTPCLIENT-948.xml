<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:22:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-948/HTTPCLIENT-948.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-948] IdleConnectionHandler can leave closed connections in a inconsistent state</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-948</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>IdleConnectionHandler when shutting down &amp;#39;stale&amp;#39; connection does not update the state of AbstractPoolEntry thus causing an inconsistency between the state of the connection (closed) and that of the pool entry (still assumed open). The problem is mitigated by the fact that the pooling manager usually evicts closed connections almost immediately. There is a small window of time in the ThreadSafeClientConnManager#closeIdleConnection method, at which a connection can be closed by the IdleConnectionHandler and immediately leased from the pool by another thread in an inconsistent state before the main thread gets a chance to re-acquire the pool lock and clean out closed connections.&lt;br/&gt;
&lt;br/&gt;
For 4.0.x the problem can be worked around by retaining the pool lock for the entire span of the #closeIdleConnection. For the 4.1 branch a better solution should be devised. This probably means a complete rewrite or deprecation of IdleConnectionHandler.</description>
                <environment></environment>
            <key id="12465951">HTTPCLIENT-948</key>
            <summary>IdleConnectionHandler can leave closed connections in a inconsistent state</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="olegk">Oleg Kalnichevski</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Jun 2010 12:15:32 +0100</created>
                <updated>Tue, 25 Jan 2011 11:00:09 +0000</updated>
                    <resolved>Tue, 15 Jun 2010 15:22:21 +0100</resolved>
                            <version>4.0.1</version>
                <version>4.1 Alpha2</version>
                                <fixVersion>4.1 Beta1</fixVersion>
                                <component>HttpConn</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12874586" author="sberlin" created="Wed, 2 Jun 2010 15:02:36 +0100"  >Excellent find, Oleg!  I just tried navigating through the classes to get a feel for what&amp;#39;s involved, and man... is that code super complex!  &lt;br/&gt;
&lt;br/&gt;
Can the HttpConnection escape into user-code anywhere?  If so, I think the problem may extend into the fact that the &amp;quot;AbstractClientConnAdapter&amp;quot; subclasses do not call super.abortConnection in their close/shutdown methods.  Otherwise, I think it is possible that an HttpConnection that user has captured (that may be lingering as &amp;#39;free&amp;#39;) can have its state &amp;amp; connection shutdown (by the user calling &amp;#39;close&amp;#39; or &amp;#39;shutdown&amp;#39; on the connection), but the BasicPoolEntry will be left up-for-grabs by ConnPoolByRoute.getFreeEntry.  Normally this would resolve itself the next time closeExpiredConnections or closeIdleConnections was called, because it would iterate through entries and delete them... but there would be a period of time where a shutdown entry is available.  This is a very similar problem to what you describe above.&lt;br/&gt;
&lt;br/&gt;
I think there a few things here that can be fixed, in a few different ways:&lt;br/&gt;
&lt;br/&gt;
1) If it is not safe to link HttpConnection.abort or HttpConnection.shutdown to HttpConnection.abortConnection (as described above), then we can make ConnPoolByRoute.getFreeEntry (or more specifically, RouteSpecificPool.allocEntry) more robust:  It can inspect the entries it&amp;#39;s about to return and, if they&amp;#39;re closed or otherwise unusable, it deletes that entry and continues iterating.  (This is safe, because in ConnPoolByRoute, if no entries are returned, the getEntryBlocking method will just create a new one if there&amp;#39;s enough capacity.)  The tricky thing here will be keeping the state in sync between CPBR &amp;amp; RSP, so maybe it is better to leave RSP alone and make CPBR.getFreeEntry inspect the result RSP.allocEntry, and if it is closed/unusable, then it just calls deleteEntry on itself (which will clean it all up properly), and then continue iterating looking for a good connection.&lt;br/&gt;
&lt;br/&gt;
2) Regardless of point 1), I think CPBR.getFreeEntry needs to add a &amp;#39;wrapped&amp;#39; HttpConnection to IdleConnectionHandler.  That is, a connection that when it is closed or aborted, it will also shutdown the BasicPoolEntry it is attached to.  Normally this would be handled by the AbstractClientConnAdapter subclasses, but the HttpConnection that is given to the IdleConnectionHandler is not the &amp;#39;attached&amp;#39; form of the connection, it is the plain old DefaultHttpClientConnection.  I do not think we can get the full attached form of the http connection here, so our next best option is to create a fake HttpConnection (or, better yet, a &amp;#39;Closeable&amp;#39; and change IdleConnectionHandler to work on &amp;#39;Closeable&amp;#39;s).   The fake connection would override shutdown &amp;amp; close in order to also shutdown the BasicPoolEntry.&lt;br/&gt;
&lt;br/&gt;
3) As an alternative to 2), ConnPoolByRoute can maintain an additional Map from Connection -&amp;gt; BasicPoolEntry.  The &amp;#39;closeIdleConnections&amp;#39; &amp;amp; &amp;#39;closeExpiredConnections&amp;#39; methods in IdleConnectionHandler can take an additional Map&amp;lt;HttpConnection, BasicPoolEntry&amp;gt; and upon closing a connection they would do a lookup in the map &amp;amp; shutdown the entry.  In additional to that, to be extremely safe, the IdleConnectionHandler could also take a an AbstractConnPool parameter and call freeEntry on the entry it expired, so that it&amp;#39;s immediately removed.  (This last part wouldn&amp;#39;t be necessary if 1) were implemented.  It would also significantly increase the amount of locks/unlocks performed.)&lt;br/&gt;
&lt;br/&gt;
I think the best option is to do 1) &amp;amp; 2).  1) makes getFreeEntry a lot safer, and 2) is a very straightforward approach.  3) seems like a lot of overhead.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12875134" author="olegk" created="Thu, 3 Jun 2010 15:36:56 +0100"  >&amp;gt; I just tried navigating through the classes to get a feel for what&amp;#39;s involved, and man... is that code super complex! &lt;br/&gt;
&lt;br/&gt;
Roland, who pretty much devised the entire connection management API, had a tendency to over-design and over-complicate things. He also seems to have treated thread-safety as an afterthought and never got around to finishing his work. On a number of occasions I felt like deprecating all connection pooling classes and starting over. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; Can the HttpConnection escape into user-code anywhere?&lt;br/&gt;
&lt;br/&gt;
I do not think so. The real connections always get wrapped with an &amp;#39;adaptor&amp;#39; class to ensure that the user can not mess with the real connection once it has been released back to the pool. The user code always gets hold of an adaptor instead of the real thing. The IdleConnectionHandler probably was the only exception to that rule I can think of.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I think the best option is to do 1) &amp;amp; 2). 1) makes getFreeEntry a lot safer, and 2) is a very straightforward approach. 3) seems like a lot of overhead. &lt;br/&gt;
&lt;br/&gt;
I also think (1) and (2) seem the way to go. At the same time I would like to invest a few cycles into evaluation a possibility of merging the functionality of IdleConnectionHandler into BasicPoolEntry.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12878769" author="olegk" created="Mon, 14 Jun 2010 23:04:52 +0100"  >Sam,&lt;br/&gt;
&lt;br/&gt;
I redesigned idle connection handing code. Please review:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc?rev=954659&amp;view=rev&quot;&gt;http://svn.apache.org/viewvc?rev=954659&amp;amp;view=rev&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12878979" author="olegk" created="Tue, 15 Jun 2010 15:22:21 +0100"  >Closing as FIXED&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 2 Jun 2010 14:02:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133953</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47348</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>