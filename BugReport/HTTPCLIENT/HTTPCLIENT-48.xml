<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:17:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-48/HTTPCLIENT-48.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-48] User interaction for authentication</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-48</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Some actions require user input.  Like forwarding to another host or retrieveing&lt;br/&gt;
authentication credentials.  Should have some way for clients to setup listeners&lt;br/&gt;
for such events so that they can be handled on the fly.  No gui, programatic&lt;br/&gt;
only.</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: Other</environment>
            <key id="12333607">HTTPCLIENT-48</key>
            <summary>User interaction for authentication</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jsdever@sympatico.ca">Jeff Dever</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Jul 2002 10:23:13 +0100</created>
                <updated>Thu, 2 May 2013 03:28:36 +0100</updated>
                    <resolved>Mon, 15 May 2006 22:44:50 +0100</resolved>
                            <version>2.0 Alpha 1</version>
                                <fixVersion>3.0 Final</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12379350" author="rolweber@de.ibm.com" created="Wed, 1 Oct 2003 16:12:57 +0100"  >snippet of David Hay&amp;#39;s posting to the HTTP client mailing list:&lt;br/&gt;
&lt;br/&gt;
I would suspect that&lt;br/&gt;
any authorization callback handler would need to pass along the host, port,&lt;br/&gt;
realm, authorization scheme and possibly the status code (so we&amp;#39;d know if&lt;br/&gt;
this was a proxy authorization or not).&lt;br/&gt;
&lt;br/&gt;
Just to give an implementation idea, what I currently have is an iterface&lt;br/&gt;
called AuthorizationPrompter that has a single method:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Credentials getCredentials( String realm, String host );&lt;br/&gt;
&lt;br/&gt;
I can then register implementations of this with my custom HttpState&lt;br/&gt;
subclass.  Then, my HttpState subclass I have the following code:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public synchronized Credentials getCredentials( String realm, String&lt;br/&gt;
host )&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Credentials credentials = super.getCredentials( realm, host );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( credentials == null ) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;credentials = promptForCredentials( realm, host );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if ( credentials != null ) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setCredentials( realm, host, credentials );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return credentials;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
there&amp;#39;s a similar method for getProxyCredentials.  Of course, the &amp;quot;if&lt;br/&gt;
(credentials == null)&amp;quot; should probably live in the calling method, but&lt;br/&gt;
that&amp;#39;s the idea.&lt;br/&gt;
</comment>
                    <comment id="12379351" author="rolweber@de.ibm.com" created="Wed, 1 Oct 2003 16:26:56 +0100"  >Hello David,&lt;br/&gt;
&lt;br/&gt;
don&amp;#39;t try to guess what the handler will need to know. That&amp;#39;s what we&lt;br/&gt;
did in OpenCard and failed with. It wasn&amp;#39;t long until someone required&lt;br/&gt;
something we hadn&amp;#39;t thought of, but the interface was already defined&lt;br/&gt;
and could not be changed anymore. Your suggestion:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Credentials getCredentials( String realm, String host );&lt;br/&gt;
&lt;br/&gt;
looks pretty much that way too. Even if you add port and authorization&lt;br/&gt;
scheme and possibly the status code as additional arguments. Rather,&lt;br/&gt;
define a class that holds such information and can be subclassed for&lt;br/&gt;
new authorization schemes, should someone choose to invent one. Like:&lt;br/&gt;
&lt;br/&gt;
class AuthSpec { attributes: type / host / port / realm / HttpMethod }&lt;br/&gt;
&lt;br/&gt;
public Credentials getCredentials(AuthSpec authspec) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (type unknown) throw UnknownAuthenticationTypeException&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
I wonder whether host vs. proxy authentication should be distinguished&lt;br/&gt;
within the AuthSpec object, as a separate boolean flag, or by using two&lt;br/&gt;
different methods to get credentials for the host or proxy, respectively.&lt;br/&gt;
The existing class HttpAuthenticator uses distinct methods, and so does&lt;br/&gt;
HttpState. It&amp;#39;s probably best to stick with that decision.&lt;br/&gt;
&lt;br/&gt;
regards,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12379352" author="olegk" created="Mon, 15 Dec 2003 19:52:42 +0000"  >Patch for the &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-306&quot; title=&quot;Redesign of HTTP authentication framework&quot;&gt;&lt;strike&gt;HTTPCLIENT-306&lt;/strike&gt;&lt;/a&gt; should provide adequate infrastructure to make&lt;br/&gt;
interactive authentication possible.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379353" author="olegk" created="Thu, 22 Jan 2004 21:46:37 +0000"  >Created an attachment (id=10054)&lt;br/&gt;
Patch (take 1)&lt;br/&gt;
</comment>
                    <comment id="12379354" author="olegk" created="Thu, 22 Jan 2004 21:48:55 +0000"  >Changelog:&lt;br/&gt;
* interactive authentication support&lt;br/&gt;
* another bug fix in NTLMScheme class&lt;br/&gt;
* InteractiveAuthenticationExample demo app&lt;br/&gt;
&lt;br/&gt;
At the moment I opted for keeping credentials callbacks in a static (global)&lt;br/&gt;
class. I am not sure that this is the best solution, but at the moment I lack&lt;br/&gt;
better ideas. Do authentication callbacks make sense on per HttpState basis?&lt;br/&gt;
HttpClient? HttpClientParams? I felt that credentials callbacks should be global&lt;br/&gt;
in order to avoid multiple authentication dialogs  popping up in multithreaded&lt;br/&gt;
applications, which, in my opinion, would be a bit confusing. At the same time I&lt;br/&gt;
can well imagine that some may feel differently. &lt;br/&gt;
&lt;br/&gt;
Please let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12379355" author="rolweber@de.ibm.com" created="Mon, 26 Jan 2004 22:02:54 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I would leave it to the implementor of the callbacks to make sure there&lt;br/&gt;
is only one dialog on the screen. What about a multiuser-browser that is&lt;br/&gt;
running multiple browser windows for different users on different X Servers?&lt;br/&gt;
I guess there would be an instance of HTTP Client for each user, but we&lt;br/&gt;
cannot know for sure.&lt;br/&gt;
Also, one might have some default GUI handlers installed but want to&lt;br/&gt;
execute individual methods with other, non-GUI callbacks in place.&lt;br/&gt;
&lt;br/&gt;
HttpState sounds like a good place to me. Especially if the callbacks are&lt;br/&gt;
part of the hierarchical parameters, as you suggested. Is it possible to&lt;br/&gt;
modify the global defaults parameters via API? I don&amp;#39;t remember.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12379356" author="olegk" created="Tue, 27 Jan 2004 02:08:27 +0000"  >Roland,&lt;br/&gt;
I agree with you that the current design may be too contraining. I just thought&lt;br/&gt;
credential callbacks had in fact nothing to do with HTTP state. I also did not&lt;br/&gt;
feel like making HttpState class coupled with AuthScheme interface. &lt;br/&gt;
&lt;br/&gt;
Folks, please speak out: what should it be the home for the credential&lt;br/&gt;
callbacks: HttpState or HttpClientParams?&lt;br/&gt;
&lt;br/&gt;
Cheers,&lt;br/&gt;
Oleg</comment>
                    <comment id="12379357" author="eric@tibco.com" created="Tue, 27 Jan 2004 05:09:49 +0000"  >A subtle distinction, argh!  I think it breaks down like this:&lt;br/&gt;
* HttpState - properties of the HTTP communication (cookies, authentication info)&lt;br/&gt;
* HttpClientParams - behavioral characteristics desired by the client -&lt;br/&gt;
timeouts, spec conformance, resource usage)&lt;br/&gt;
&lt;br/&gt;
Based on those criteria, I think I would choose HttpClientParams.  How&lt;br/&gt;
authentication is handled would seem to be a behavioral characteristic desired&lt;br/&gt;
by the client.  But perhaps my categorizations are not correct?</comment>
                    <comment id="12379358" author="rolweber@de.ibm.com" created="Tue, 27 Jan 2004 14:13:19 +0000"  >I&amp;#39;d consider the callbacks a part of the&lt;br/&gt;
&amp;quot;authentication info&amp;quot;, hence HttpState... :-)&lt;br/&gt;
&lt;br/&gt;
May I throw in the HttpMethod level as another choice?&lt;br/&gt;
</comment>
                    <comment id="12379359" author="oglueck" created="Thu, 29 Jan 2004 17:16:06 +0000"  >I think this patch goes to far. Currently credentials are stored inside&lt;br/&gt;
HttpState. This makes it very flexible to use HttpClient either from stock or&lt;br/&gt;
create your own methods or even replace the HttpClient completely. So I would&lt;br/&gt;
rather keep HttpState the place where to ask for credentials from within HttpClient.&lt;br/&gt;
&lt;br/&gt;
What we need and what the patch already contains is a callback to retrieve&lt;br/&gt;
credentials. But the CredentialsPrompter beeing a monostate limits the&lt;br/&gt;
flexibility of the credentials retrieval. Whether the prompter is a single&lt;br/&gt;
instance for multiple HttpClients or if there are multiple instances should be a&lt;br/&gt;
decision of the user.&lt;br/&gt;
&lt;br/&gt;
I suggest not to implement the CredentialsPrompter. Instead just provide&lt;br/&gt;
HttpState::setCredentialsCallback(CredentialsCallback) and change the&lt;br/&gt;
get[Proxy]Credentials methods to use the callback. We can still leave the&lt;br/&gt;
credential setters in for convenience and handle them through a default&lt;br/&gt;
implementation of the callback.&lt;br/&gt;
&lt;br/&gt;
The advantages are:&lt;br/&gt;
&amp;nbsp;* user can easily choose which callback to use for which HttpClient instance&lt;br/&gt;
&amp;nbsp;* preemptive auth does not break&lt;br/&gt;
&amp;nbsp;* simpler code&lt;br/&gt;
&amp;nbsp;* less API change&lt;br/&gt;
&lt;br/&gt;
I will provide a patch in a minute to explain my ideas.</comment>
                    <comment id="12379360" author="olegk" created="Thu, 29 Jan 2004 17:37:18 +0000"  >Odi, &lt;br/&gt;
CredentialsPrompter has been ruled out already. But I just have some&lt;br/&gt;
reservations about HttpState being the best place for this kind of stuff. From&lt;br/&gt;
the conceptual standpoint credentials callbacks do not seem to have much to do&lt;br/&gt;
with the HTTP state. Besides, I am kind of hesitant to make HttpState coupled&lt;br/&gt;
with AuthScheme interface. But since the majority seems to be leaning towards&lt;br/&gt;
HttpState solution, I do not really mind. We can revisit this problem as a part&lt;br/&gt;
of 4.0 API (re)design.&lt;br/&gt;
&lt;br/&gt;
Do you want to take this patch over or shall I continue working on it?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12379361" author="oglueck" created="Thu, 29 Jan 2004 18:25:35 +0000"  >Created an attachment (id=10141)&lt;br/&gt;
take2&lt;br/&gt;
</comment>
                    <comment id="12379362" author="oglueck" created="Thu, 29 Jan 2004 18:28:14 +0000"  >Just added the patch against CVS HEAD.&lt;br/&gt;
When you look at it you can see that it makes code much cleaner. The inner class&lt;br/&gt;
could actually be extracted as well to make HttpState even lighter. The patch&lt;br/&gt;
cause surprisingly few changes in the rest of the code.</comment>
                    <comment id="12379363" author="olegk" created="Thu, 29 Jan 2004 20:54:04 +0000"  >Odi, I think it is a better approach. I especially like the idea to abstract &lt;br/&gt;
away all the credentials persistence/retrieval logic. There&amp;#39;s one catch, &lt;br/&gt;
though. The patch in its current form simply does not attempt to provide any &lt;br/&gt;
recovery mechanism for authentication failures, leaving the user without any &lt;br/&gt;
possibility to re-authenticate if given credentials are invalid. I believe &lt;br/&gt;
there has to be a way to discard the existing credentials and prompt the user &lt;br/&gt;
for new ones, which basically brings us back to my patch, albeit without global &lt;br/&gt;
CredentialsPrompter. &lt;br/&gt;
&lt;br/&gt;
If you like I can take your patch as a starting point and add missing &lt;br/&gt;
functionality from mine.&lt;br/&gt;
</comment>
                    <comment id="12379364" author="becke@u.washington.edu" created="Thu, 29 Jan 2004 23:42:43 +0000"  >Oleg, Odi, Roland, et al.,&lt;br/&gt;
&lt;br/&gt;
Here are a few quick thoughts..&lt;br/&gt;
&lt;br/&gt;
In regard to the credentials, I think they should remain in the HttpState.  In some sense it is acting &lt;br/&gt;
as a cache for known credentials.  I agree with Oleg and I think we should move towards a single &lt;br/&gt;
set of credentials based upon host, port, and perhaps scheme.  I see no need to keep host/proxy &lt;br/&gt;
credentials separate.&lt;br/&gt;
&lt;br/&gt;
As far as the location for the CredentialsProvider/CredentialsCallback I prefer the params.  While I &lt;br/&gt;
see the logic of keeping it with the credentials in the HttpState, I still think the credentials are really &lt;br/&gt;
just held there as a cache.  In general I imagine someone would just want to set the credentials &lt;br/&gt;
provider globally, either to one that prompts the user, or one (the default) that does nothing. Once &lt;br/&gt;
credentials have been provided and successfully used they can be added to the HttpState and &lt;br/&gt;
reused later.  The params also provide more flexibility in that they can be configured globally, and &lt;br/&gt;
where needed they can also be used on a more fine grained level.&lt;br/&gt;
&lt;br/&gt;
What do you think?&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379365" author="olegk" created="Fri, 30 Jan 2004 01:03:44 +0000"  >Darn. It looks like we all agree to disagree. &lt;br/&gt;
&lt;br/&gt;
Let me try to find a common ground, unless we want to find ourselves in a&lt;br/&gt;
classical design impasse.&lt;br/&gt;
&lt;br/&gt;
(1) Odi, your idea to abstract away the credentials persistence stuff is great,&lt;br/&gt;
but possibly it is too radical for the 3.0. Let us revisit this problem in the&lt;br/&gt;
course of 4.0 API redesign. Can we stick to the concept of HttpState being a&lt;br/&gt;
cache of objects representing HTTP session state for the 3.x release? Let&amp;#39;s face&lt;br/&gt;
it there are uglier things in HttpClient 2.0 than HttpState class&lt;br/&gt;
&lt;br/&gt;
(2) HttpState (as a cache) in its present form does not seem to be the ideal&lt;br/&gt;
placeholder for the credential callbacks. Can we all live with HttpParams as an&lt;br/&gt;
alternative for the 3.x release. Again, it may change in the 4.0&lt;br/&gt;
&lt;br/&gt;
(3) Reasons for keeping proxy and host credentials distinct are purely emotional&lt;br/&gt;
/ perceptional. Usually users could not care less if they are authenticating&lt;br/&gt;
against a proxy or target host as long as they are presented with a sane name&lt;br/&gt;
for the authentication realm. For instance, IE 5.x does not differentiate&lt;br/&gt;
between proxy &amp;amp; host authentication. &lt;br/&gt;
&lt;br/&gt;
Getting rid of separate repository for proxy credentials will GREATLY simplify&lt;br/&gt;
authentication code in HttpMethodDirector. I think this is well worth it.&lt;br/&gt;
Besides, may I suggest to have a boolean flag (proxy yes|no) added to&lt;br/&gt;
CredentialsCallback interface to keep everyone happy?&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12379366" author="rolweber@de.ibm.com" created="Fri, 30 Jan 2004 16:37:09 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
the boolean flag should indeed be sufficient. Is there still&lt;br/&gt;
a way to set default credentials for both proxy and host if&lt;br/&gt;
both are kept in the same namespace?&lt;br/&gt;
&lt;br/&gt;
I can very well live with the callbacks in the HttpParams. My&lt;br/&gt;
mistake here, I thought the discussion was about whether to put&lt;br/&gt;
them in params for the state or for the client. Obviously, there&lt;br/&gt;
are no params for the state - stupid me. In that case, let me&lt;br/&gt;
suggest again to add them at the method level, with a fallback&lt;br/&gt;
to the client and global settings.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland</comment>
                    <comment id="12379367" author="olegk" created="Fri, 30 Jan 2004 23:55:30 +0000"  >Created an attachment (id=10158)&lt;br/&gt;
Patch (take 3)&lt;br/&gt;
</comment>
                    <comment id="12379368" author="olegk" created="Sat, 31 Jan 2004 00:33:45 +0000"  >Folks,&lt;br/&gt;
This patch is based on the patch (take 1) with the following changes:&lt;br/&gt;
* Global CredentialsPrompter class has been removed&lt;br/&gt;
* Authentication callbacks moved to HttpMethodParams class&lt;br/&gt;
* Authentication realm key is now comprised of host name, port, realm name and&lt;br/&gt;
authentication type&lt;br/&gt;
&lt;br/&gt;
Please let me know what you think. I know that test cases are lacking. As soon&lt;br/&gt;
as the API stabilize a little, I&amp;#39;ll provide test cases  for new functionality&lt;br/&gt;
using Odi&amp;#39;s shiny new simple HTTP server / simple proxy framework&lt;br/&gt;
</comment>
                    <comment id="12379369" author="becke@u.washington.edu" created="Sat, 31 Jan 2004 02:48:54 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Overall I think the design is good now.  I have just a few comments on some of the specifics.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I would prefer the name CredentialsProvider to CredentialsCallback.  Though callback works, I &lt;br/&gt;
think provider is a little more standard.&lt;br/&gt;
&amp;nbsp;- Also, I am wondering if the CredentialsCallback.getCredentials() method should be changed to &lt;br/&gt;
accept an instance of HttpAuthRealm instead of the scheme, host, and port.&lt;br/&gt;
&amp;nbsp;- The callback param is currently assumed to be a Collection, but I wonder if this is really &lt;br/&gt;
necessary.  It seems like just a CredentialsCallback should be sufficient, especially since it can be &lt;br/&gt;
configured on a per method basic.&lt;br/&gt;
&lt;br/&gt;
I haven&amp;#39;t had time to look closely at the HttpMethodDirector authentication logic but I think some &lt;br/&gt;
test cases will take care of that.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12379370" author="olegk" created="Sat, 31 Jan 2004 03:55:04 +0000"  >Created an attachment (id=10165)&lt;br/&gt;
Patch (take 3)&lt;br/&gt;
</comment>
                    <comment id="12379371" author="olegk" created="Sat, 31 Jan 2004 04:03:04 +0000"  >Oopsie. The patch is in fact the &amp;#39;take 4&amp;#39;. &lt;br/&gt;
&lt;br/&gt;
Mike, I agree with all your points. However, I feel that &lt;br/&gt;
CredentialsCallback#getCredentials() taking AuthScheme as a parameter buys us a &lt;br/&gt;
little more flexibility. For some authentication schemes parameters other than &lt;br/&gt;
host, port, realm and auth type _may_ be of some use (like domain for NTLM &lt;br/&gt;
scheme).&lt;br/&gt;
&lt;br/&gt;
Oleg </comment>
                    <comment id="12379372" author="becke@u.washington.edu" created="Sat, 31 Jan 2004 05:09:07 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Good point.  Code-wise everything looks good to me now.  With a little CredentialsProvider &lt;br/&gt;
Javadocs it is good to commit.&lt;br/&gt;
&lt;br/&gt;
Mike </comment>
                    <comment id="12379373" author="olegk" created="Thu, 5 Feb 2004 04:55:36 +0000"  >CredentialsProvider javadocs added. Patch committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12333865">HTTPCLIENT-306</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12326628" name="ASF.LICENSE.NOT.GRANTED--auth.patch" size="45009" author="olegk" created="Sat, 31 Jan 2004 03:55:04 +0000" />
                    <attachment id="12326627" name="ASF.LICENSE.NOT.GRANTED--auth.patch" size="42046" author="olegk" created="Fri, 30 Jan 2004 23:55:30 +0000" />
                    <attachment id="12326625" name="ASF.LICENSE.NOT.GRANTED--auth.patch" size="21454" author="olegk" created="Thu, 22 Jan 2004 21:46:37 +0000" />
                    <attachment id="12326626" name="ASF.LICENSE.NOT.GRANTED--authpatch.txt" size="18175" author="oglueck" created="Thu, 29 Jan 2004 18:25:35 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10794</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 1 Oct 2003 15:12:57 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133104</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189308</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>