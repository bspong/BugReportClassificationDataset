<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:16:39 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-358/HTTPCLIENT-358.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-358] Auto method retrial broken</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-358</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Folks,&lt;br/&gt;
While working on the exception handling guide for the 3.0-alpha2 release I&lt;br/&gt;
stumbled upon a problem with HttpTimeoutException and its subclasses. In 3.0a1&lt;br/&gt;
HttpTimeoutException subclasses HttpRecoverableException which causes HTTP&lt;br/&gt;
methods failed due to a connect or socket timeout to be automatically retried. &lt;br/&gt;
&lt;br/&gt;
[INFO] HttpMethodDirector - -Recoverable exception caught when processing request&lt;br/&gt;
[INFO] HttpMethodDirector - -Recoverable exception caught when processing request&lt;br/&gt;
[INFO] HttpMethodDirector - -Recoverable exception caught when processing request&lt;br/&gt;
[INFO] HttpMethodDirector - -Recoverable exception caught when processing request&lt;br/&gt;
[WARN] HttpMethodDirector - -Recoverable exception caught but&lt;br/&gt;
MethodRetryHandler.retryMethod() returned false, rethrowing exception&lt;br/&gt;
org.apache.commons.httpclient.IOTimeoutException: Read timed out&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection$WrappedInputStream.handleException(HttpConnection.java:1350)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection$WrappedInputStream.read(HttpConnection.java:1360)&lt;br/&gt;
	at java.io.FilterInputStream.read(FilterInputStream.java:66)&lt;br/&gt;
	at java.io.PushbackInputStream.read(PushbackInputStream.java:120)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:76)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:104)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:1054)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1785)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1546)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:977)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:383)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:164)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:437)&lt;br/&gt;
	at org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:324)&lt;br/&gt;
	at Test.main(Test.java:13)&lt;br/&gt;
Caused by: java.net.SocketTimeoutException: Read timed out&lt;br/&gt;
	at java.net.SocketInputStream.socketRead0(Native Method)&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:129)&lt;br/&gt;
	at java.net.SocketInputStream.read(SocketInputStream.java:182)&lt;br/&gt;
	at&lt;br/&gt;
org.apache.commons.httpclient.HttpConnection$WrappedInputStream.read(HttpConnection.java:1358)&lt;br/&gt;
	... 13 more&lt;br/&gt;
Exception in thread &amp;quot;main&amp;quot; &lt;br/&gt;
&lt;br/&gt;
This probably is not what we want. Besides, for non-idempotent methods this may&lt;br/&gt;
simply be fatal and result in all sorts of unpleasant side-effects.&lt;br/&gt;
&lt;br/&gt;
One possibilty that I personally favour is to make HttpTimeoutException class&lt;br/&gt;
extend IOException instead of HttpRecoverableException. There are others. The&lt;br/&gt;
question is whether timeout exceptions should be considered recoverable from the&lt;br/&gt;
conseptual standpoint. What do you think?&lt;br/&gt;
&lt;br/&gt;
Oleg</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: Other</environment>
            <key id="12333917">HTTPCLIENT-358</key>
            <summary>Auto method retrial broken</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="olegk">Oleg Kalnichevski</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Jul 2004 22:32:29 +0100</created>
                <updated>Wed, 16 Feb 2011 20:45:01 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:48 +0100</resolved>
                            <version>3.0 Alpha 1</version>
                                <fixVersion>3.0 Alpha 2</fixVersion>
                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381796" author="olegk" created="Sat, 3 Jul 2004 00:13:21 +0100"  >Created an attachment (id=12015)&lt;br/&gt;
Patch (take 1)&lt;br/&gt;
</comment>
                    <comment id="12381797" author="olegk" created="Sat, 3 Jul 2004 00:32:20 +0100"  >Changelog:&lt;br/&gt;
&lt;br/&gt;
* fixes broken &amp;#39;request sent&amp;#39; code, albeit at the expense of adding (yet&lt;br/&gt;
another) method to the HttpMethod interface&lt;br/&gt;
* removes requestSent argument from the MethodRetryHandler#retryMethod method&lt;br/&gt;
which is now available as a method of the HttpMethod interface&lt;br/&gt;
* eliminates superfluous HttpTimeoutException &amp;amp; IOTimeoutException classes.&lt;br/&gt;
Rethrowing  InterruptedIOException as IOTimeoutException made sense under&lt;br/&gt;
assumption that timeout exceptions represented a subclass of recoverable&lt;br/&gt;
exceptions, which turned out to be wrong&lt;br/&gt;
* ConnectTimeoutException now subclasses the standard InterruptedIOException,&lt;br/&gt;
which is more consistent with the overall Java exception handling framework&lt;br/&gt;
* HttpConnectionManager classes now throw a more specific&lt;br/&gt;
ConnectionPoolTimeoutException derived from ConnectTimeoutException. There can&lt;br/&gt;
be cases when socket connect timeout needs to be differentiated from that of the&lt;br/&gt;
connection pool&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381798" author="becke@u.washington.edu" created="Sun, 4 Jul 2004 02:17:34 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
In regard to making timeout exceptions non-recoverable,  I&amp;#39;m not sure this is right for all cases.  In the &lt;br/&gt;
example you site I agree that the read timeout should not have caused a retry.  The problem here was &lt;br/&gt;
not that the Exception was recoverable, but that the requestSent variable was not being set correctly.  If &lt;br/&gt;
requestSent had been true (which it should have and is now with your patch) the method would not &lt;br/&gt;
have been retried using the DefaultMethodRetryHandler.  Also, in cases where there is connect timeout &lt;br/&gt;
it might be nice to have the method retried (configurable).&lt;br/&gt;
&lt;br/&gt;
I would suggest keeping the timeout exceptions recoverable and then adding method params to &lt;br/&gt;
configure how the DefaultMethodRetryHandler determines what exceptions to retry on.&lt;br/&gt;
&lt;br/&gt;
Also, in regard to the MethodRetryHandler,  I&amp;#39;m not sure it&amp;#39;s worthwhile deprecating retryMethod().  &lt;br/&gt;
Adding a new method already breaks the API.  We might as well just change the original method.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381799" author="olegk" created="Sun, 4 Jul 2004 05:28:41 +0100"  >Mike,&lt;br/&gt;
What irks me a little is that socket read timeouts on non-idempotent methods&lt;br/&gt;
must be considered fatal, as an attempt to automatically retry an non-idempotent&lt;br/&gt;
method may leave the application in an inconsistent state. As HttpClient can&amp;#39;t&lt;br/&gt;
know whether a method or a sequence of methods are idempotent, it should&lt;br/&gt;
probably assume they are not. In this case rethrowing socket timeout as a&lt;br/&gt;
recoverable exception sounds wrong, at least from the conceptual standpoint.&lt;br/&gt;
&lt;br/&gt;
I do agree that it might make sense to have connect timeouts treated as&lt;br/&gt;
recoverable exceptions. The trouble is that currently only method execution can&lt;br/&gt;
be retried automatically, and connection cannot.&lt;br/&gt;
&lt;br/&gt;
Mucking around with MethodRetryHandler was a mistake. Its argument sequence is&lt;br/&gt;
ugly, but not uglier than many other things. It makes sense to defer any changes&lt;br/&gt;
to it until 4.0&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381800" author="becke@u.washington.edu" created="Sun, 4 Jul 2004 05:57:01 +0100"  >&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;What irks me a little is that socket read timeouts on non-idempotent methods&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;must be considered fatal, as an attempt to automatically retry an non-idempotent&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;method may leave the application in an inconsistent state. As HttpClient can&amp;#39;t&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;know whether a method or a sequence of methods are idempotent, it should&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;probably assume they are not. &lt;br/&gt;
&lt;br/&gt;
True.  Technically we can probably retry all methods except POST and PUT, but I think in practice this &lt;br/&gt;
would be dangerous.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In this case rethrowing socket timeout as a recoverable exception sounds wrong, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at least from the conceptual standpoint.&lt;br/&gt;
&lt;br/&gt;
I agree.  I think the problem lies in the whole concept of recoverable exceptions.  We are attempting to &lt;br/&gt;
determine recoverability at the point the exception is thrown, but this decision should really be made &lt;br/&gt;
by the code that catches the exception.  Perhaps we should ditch the whole concept of recoverable &lt;br/&gt;
exceptions and just base it on other factors.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;I do agree that it might make sense to have connect timeouts treated as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;recoverable exceptions. The trouble is that currently only method execution can&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;be retried automatically, and connection cannot.&lt;br/&gt;
&lt;br/&gt;
Yes, this would be an enhancement.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381801" author="olegk" created="Sun, 4 Jul 2004 06:08:45 +0100"  >I tend to agree that the whole auto-recovery mechanism the way it is&lt;br/&gt;
implementent now is flawed. Simply put, any IOException can potentially be&lt;br/&gt;
treated as recoverable provided the application layer ensures methods&amp;#39;&lt;br/&gt;
idempotentcy. &lt;br/&gt;
&lt;br/&gt;
All it basically takes is this&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;boolean retryMethod(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpMethod method, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;IOException exception,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int executionCount);&lt;br/&gt;
&lt;br/&gt;
The question is do we want to fix it now or do we want to fix it later?&lt;br/&gt;
&lt;br/&gt;
This is what I can live with for now (the patch coming shortly). Let me know&lt;br/&gt;
what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381802" author="olegk" created="Sun, 4 Jul 2004 06:09:56 +0100"  >Created an attachment (id=12021)&lt;br/&gt;
Patch (take 2)&lt;br/&gt;
</comment>
                    <comment id="12381803" author="becke@u.washington.edu" created="Sun, 4 Jul 2004 06:34:30 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s pretty good.  I think we should also consider making the change to the MethodRetryHandler and &lt;br/&gt;
deprecating the recoverable exception.  The question I guess is how many people have implemented a &lt;br/&gt;
custom MethodRetryHandler.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381804" author="olegk" created="Mon, 5 Jul 2004 02:11:28 +0100"  >Created an attachment (id=12025)&lt;br/&gt;
Patch (take 3)&lt;br/&gt;
</comment>
                    <comment id="12381805" author="olegk" created="Mon, 5 Jul 2004 02:17:39 +0100"  >Here&amp;#39;s my previous patch + pesky HttpRecoverableException no more. The patch&lt;br/&gt;
retains full API compatibility with the 2.0-style method retry handlers. The old&lt;br/&gt;
handlers should remain fully functional. &lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381806" author="becke@u.washington.edu" created="Tue, 6 Jul 2004 05:30:19 +0100"  >Looks good.  +1 for me.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381807" author="olegk" created="Tue, 6 Jul 2004 06:51:16 +0100"  >Patch committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327127" name="ASF.LICENSE.NOT.GRANTED--retry-refactor.patch" size="52384" author="olegk" created="Mon, 5 Jul 2004 02:11:28 +0100" />
                    <attachment id="12327126" name="ASF.LICENSE.NOT.GRANTED--retry-refactor.patch" size="32690" author="olegk" created="Sun, 4 Jul 2004 06:09:56 +0100" />
                    <attachment id="12327125" name="ASF.LICENSE.NOT.GRANTED--retry-refactor.patch" size="30371" author="olegk" created="Sat, 3 Jul 2004 00:13:21 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>29874</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 4 Jul 2004 01:17:34 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>18589</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47089</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>