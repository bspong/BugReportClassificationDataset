<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:16:20 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-332/HTTPCLIENT-332.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-332] Connection timeout logic redesign</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-332</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Changelog:&lt;br/&gt;
&lt;br/&gt;
* CreateSocket method with timeout parameter added to the ProtocolSocketFactory&lt;br/&gt;
interface&lt;br/&gt;
&lt;br/&gt;
* TimeoutController related code factored out of HttpConnection class and moved&lt;br/&gt;
into ControllerThreadSocketFactory helper class&lt;br/&gt;
&lt;br/&gt;
* ReflectionSocketFactory helper class added. This factory encapsulates&lt;br/&gt;
reflection code to call JDK 1.4 Socket#connect method if supported&lt;br/&gt;
&lt;br/&gt;
* All protocol socket factories now attempt to initially use&lt;br/&gt;
ReflectionSocketFactory if required to create a socket within a given limit of&lt;br/&gt;
time. If reflection fails protocol socket factories fall back onto the good ol&amp;#39;&lt;br/&gt;
ControllerThreadSocketFactory&lt;br/&gt;
&lt;br/&gt;
Benefits:&lt;br/&gt;
&lt;br/&gt;
* HttpConnection code got a lot cleaner&lt;br/&gt;
* When running in modern JREs expensive timeout controller thread per connection&lt;br/&gt;
attempt is no longer needed&lt;br/&gt;
* Ugly code intended to work around limitations of the older JREs is now&lt;br/&gt;
confined to a few helper classes that can be easily thrown away once we move&lt;br/&gt;
onto Java 1.4&lt;br/&gt;
&lt;br/&gt;
Let me know what you think&lt;br/&gt;
&lt;br/&gt;
Oleg</description>
                <environment>Operating System: other&lt;br/&gt;
Platform: Other</environment>
            <key id="12333891">HTTPCLIENT-332</key>
            <summary>Connection timeout logic redesign</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="olegk">Oleg Kalnichevski</reporter>
                        <labels>
                    </labels>
                <created>Sat, 10 Apr 2004 07:06:21 +0100</created>
                <updated>Wed, 16 Feb 2011 20:44:14 +0000</updated>
                    <resolved>Sun, 22 Apr 2007 08:10:42 +0100</resolved>
                            <version>2.0 Final</version>
                                                <component>HttpClient</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381594" author="olegk" created="Sat, 10 Apr 2004 07:08:15 +0100"  >Created an attachment (id=11204)&lt;br/&gt;
Patch (take 1)&lt;br/&gt;
</comment>
                    <comment id="12381595" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 06:35:18 +0100"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I like the changes. This is definitely the way to go.  I have a couple of suggestions.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I think we should change ControllerThreadSocketFactory.createSocket() to accept a SocketFactory and &lt;br/&gt;
all the other params necessary to create the socket.  This way we can hide the SocketTask from external &lt;br/&gt;
classes.  Though we would end up passing in more params I think it would make for a cleaner interface.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- We should consider changing ProtocolSocketFactory.createSocket(host, port ... timeout) to accept a &lt;br/&gt;
HttpConnectionParams instead of a timeout.  This will allow for other config params in the future &lt;br/&gt;
without requiring API changes.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I think ReflectionSocketFactory.createSocket() should be changed to take a SocketFactory instance &lt;br/&gt;
instead of a socketFactoryName.  This is not a major change, but it seems a little cleaner to me.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- I suggest we move the bulk of the reflection work from ReflectionSocketFactory.createSocket() to a &lt;br/&gt;
static initializer.  This way we can determine statically whether or not the JVM supports Socket.connect() &lt;br/&gt;
without testing each time.  This may be premature optimization, but my feeling is that it may be worth &lt;br/&gt;
it.&lt;br/&gt;
&lt;br/&gt;
Mike&lt;br/&gt;
</comment>
                    <comment id="12381596" author="olegk" created="Mon, 12 Apr 2004 20:27:25 +0100"  >&amp;gt; I think we should change ControllerThreadSocketFactory.createSocket() &lt;br/&gt;
&amp;gt; to accept a SocketFactory and all the other params necessary to create &lt;br/&gt;
&amp;gt; the socket.  This way we can hide the SocketTask from external &lt;br/&gt;
&amp;gt; classes.  Though we would end up passing in more params I think it would&lt;br/&gt;
&amp;gt; make for a cleaner interface.&lt;br/&gt;
&lt;br/&gt;
Completely agree. The trouble is that javax.net.SocketFactory is available as of&lt;br/&gt;
Java 1.4 only. I was thinking about using ProtocolSocketFactory instead but&lt;br/&gt;
initially decided against it, as it results in a sort of logical recursion: a&lt;br/&gt;
helper class takes a class as a parameter for which it acts as a helper class.&lt;br/&gt;
Thinking about it causes stack overflow in my brain requiring a hard reboot with&lt;br/&gt;
a glass of malt whisky. But I&amp;#39;ll give it another shot, as it can potentially a&lt;br/&gt;
lot of ugly code in the protocol socket factories&lt;br/&gt;
&lt;br/&gt;
&amp;gt; We should consider changing ProtocolSocketFactory.createSocket(host, &lt;br/&gt;
&amp;gt; port ... timeout) to accept a HttpConnectionParams instead of a timeout.  &lt;br/&gt;
&amp;gt; This will allow for other config params in the future without requiring&lt;br/&gt;
&amp;gt; API changes.&lt;br/&gt;
&lt;br/&gt;
Great idea&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I think ReflectionSocketFactory.createSocket() should be changed to take a&lt;br/&gt;
&amp;gt; SocketFactory instance instead of a socketFactoryName.  This is not a major&lt;br/&gt;
&amp;gt; change, but it seems a little cleaner to me.&lt;br/&gt;
&lt;br/&gt;
Same problem as in point 1&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I suggest we move the bulk of the reflection work from &lt;br/&gt;
&amp;gt; ReflectionSocketFactory.createSocket() to a static initializer.  &lt;br/&gt;
&amp;gt; This way we can determine statically whether or not the JVM supports&lt;br/&gt;
&amp;gt; Socket.connect() without testing each time.  This may be premature&lt;br/&gt;
&amp;gt; optimization, but my feeling is that it may be worth it.&lt;br/&gt;
&lt;br/&gt;
I seriously do not know what code may be moved to a static initializer unless we&lt;br/&gt;
create a dummy socket and try calling connect on it. But to which port? Am I&lt;br/&gt;
missing something? What if we just set a static flag: refection failed, do not&lt;br/&gt;
try it again? &lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381597" author="becke@u.washington.edu" created="Mon, 12 Apr 2004 20:46:46 +0100"  >&amp;gt; Completely agree. The trouble is that javax.net.SocketFactory is available as of&lt;br/&gt;
&amp;gt; Java 1.4 only. I was thinking about using ProtocolSocketFactory instead but&lt;br/&gt;
&amp;gt; initially decided against it, as it results in a sort of logical recursion: a&lt;br/&gt;
&amp;gt; helper class takes a class as a parameter for which it acts as a helper class.&lt;br/&gt;
&amp;gt; Thinking about it causes stack overflow in my brain requiring a hard reboot with&lt;br/&gt;
&amp;gt; a glass of malt whisky. But I&amp;#39;ll give it another shot, as it can potentially a&lt;br/&gt;
&amp;gt; lot of ugly code in the protocol socket factories&lt;br/&gt;
&lt;br/&gt;
Good point. SocketFactory is a part of JSSE, but it may be annoying for users to include JSSE if they&amp;#39;re &lt;br/&gt;
not using it.  This may be a lost cause.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I seriously do not know what code may be moved to a static initializer unless we&lt;br/&gt;
&amp;gt; create a dummy socket and try calling connect on it. But to which port? Am I&lt;br/&gt;
&amp;gt; missing something? What if we just set a static flag: refection failed, do not&lt;br/&gt;
&amp;gt; try it again? &lt;br/&gt;
&lt;br/&gt;
This is what I was thinking:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static boolean connectSupported;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static Constructor insetSocketAddressConstructor;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private static Method connectMethod;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Class addressClass = Class.forName(&amp;quot;java.net.InetSocketAddress&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;insetSocketAddressConstructor = addressClass.getConstructor(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Class[] { String.class, Integer.TYPE });&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectMethod = Socket.class.getMethod(&amp;quot;connect&amp;quot;, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new Class[] {Class.forName(&amp;quot;java.net.SocketAddress&amp;quot;), Integer.TYPE});&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectSupported = true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// 1.4 socket connect method not supported&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connectSupported = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Inside createSocket() we could just test &amp;#39;connectSupported&amp;#39; instead of trying the reflection.  We can also &lt;br/&gt;
reuse the Constructor and Method to avoid looking them up again.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381598" author="olegk" created="Mon, 12 Apr 2004 21:47:03 +0100"  >Created an attachment (id=11217)&lt;br/&gt;
Patch (take 2)&lt;br/&gt;
</comment>
                    <comment id="12381599" author="olegk" created="Mon, 12 Apr 2004 21:47:40 +0100"  >How about this? Let me know what you think.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381600" author="mohammad.rezaei@gs.com" created="Mon, 12 Apr 2004 22:28:12 +0100"  >I would suggest caching the references to the method and constructor objects. In&lt;br/&gt;
1.3 VM&amp;#39;s, that&amp;#39;s a 3:1 performance difference. In 1.4 it&amp;#39;s still a 2:1&lt;br/&gt;
performance improvement. &lt;br/&gt;
&lt;a href=&quot;http://jguru.com/faq/view.jsp?EID=246569&quot;&gt;http://jguru.com/faq/view.jsp?EID=246569&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
\jdk1.3.1_06\bin\java -cp . PerformanceTest&lt;br/&gt;
100000 regular method calls:219 milliseconds.&lt;br/&gt;
100000 reflective method calls without lookup:281 milliseconds.&lt;br/&gt;
100000 reflective method calls with lookup:954 milliseconds.&lt;br/&gt;
&lt;br/&gt;
\jdk1.4.2\bin\java -cp . PerformanceTest&lt;br/&gt;
100000 regular method calls:282 milliseconds.&lt;br/&gt;
100000 reflective method calls without lookup:328 milliseconds.&lt;br/&gt;
100000 reflective method calls with lookup:625 milliseconds.&lt;br/&gt;
&lt;br/&gt;
Moh</comment>
                    <comment id="12381601" author="olegk" created="Tue, 13 Apr 2004 01:48:00 +0100"  >Created an attachment (id=11218)&lt;br/&gt;
Patch (take 3)&lt;br/&gt;
</comment>
                    <comment id="12381602" author="olegk" created="Tue, 13 Apr 2004 01:49:43 +0100"  >Fair enough. So, how about this?&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381603" author="sberlin@limepeer.com" created="Tue, 13 Apr 2004 02:03:11 +0100"  >A tiny detail, but a possibly confusing one for people reading the code -- the&lt;br/&gt;
comments in ReflectionSocketFactory that explain what the reflection code is&lt;br/&gt;
doing don&amp;#39;t include the step that uses &amp;quot;SocketFactory.getDefault()&amp;quot;.  This&lt;br/&gt;
confused me mostly because getDefault was static, and I didn&amp;#39;t realize that it&lt;br/&gt;
was expected that each subclassed SocketFactory would implement it&amp;#39;s own&lt;br/&gt;
getDefault behaviour.&lt;br/&gt;
&lt;br/&gt;
It also seems a bit odd to use the String equality to test for an exception of&lt;br/&gt;
SocketTimeoutException.  Perhaps now that the classes are being statically&lt;br/&gt;
cached, a SocketTimeoutException.class could be created and the catch clause&lt;br/&gt;
could use SOCKETTIMEOUTEXCEPTION_CLASS.isInstance(cause).</comment>
                    <comment id="12381604" author="olegk" created="Tue, 13 Apr 2004 05:33:59 +0100"  >Hi Sam,&lt;br/&gt;
First of all, thanks for inspiring me to fix this problem (and donating initial&lt;br/&gt;
reflection code)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; doing don&amp;#39;t include the step that uses &amp;quot;SocketFactory.getDefault()&amp;quot;.  This&lt;br/&gt;
&amp;gt; confused me mostly because getDefault was static, and I didn&amp;#39;t realize that it&lt;br/&gt;
&amp;gt; was expected that each subclassed SocketFactory would implement it&amp;#39;s own&lt;br/&gt;
&amp;gt; getDefault behaviour.&lt;br/&gt;
&lt;br/&gt;
AFAIK SocketFactory#getDefaut is the only (standard) way to instantiate a socket&lt;br/&gt;
factory. Therefore I thought this step required no explanation. Fixed now&lt;br/&gt;
&lt;br/&gt;
&amp;gt; It also seems a bit odd to use the String equality to test for an exception &lt;br/&gt;
of SocketTimeoutException. &lt;br/&gt;
&lt;br/&gt;
Fair enough. Fixed. Patch coming.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12381605" author="olegk" created="Tue, 13 Apr 2004 05:41:42 +0100"  >Created an attachment (id=11219)&lt;br/&gt;
Patch (take 4)&lt;br/&gt;
</comment>
                    <comment id="12381606" author="becke@u.washington.edu" created="Tue, 13 Apr 2004 10:48:31 +0100"  >Looks good to me, except for some JavaDocs problems.  The docs for &lt;br/&gt;
ReflectionSocketFactory.createSocket() and the ProtocolSocketFactory.createSocket() are out of date.&lt;br/&gt;
&lt;br/&gt;
Mike</comment>
                    <comment id="12381607" author="olegk" created="Wed, 14 Apr 2004 01:10:45 +0100"  >Folks,&lt;br/&gt;
Any further remarks? If nobody objects loudly, I&amp;#39;ll fix javadocs and commit the&lt;br/&gt;
patch within next 4-5 hours. If any problem pops up later, it can always be&lt;br/&gt;
addressed with a corrective patch&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12381608" author="olegk" created="Wed, 14 Apr 2004 05:49:17 +0100"  >Patch committed.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                    <attachment id="12327091" name="ASF.LICENSE.NOT.GRANTED--conntimeout.patch" size="41584" author="olegk" created="Tue, 13 Apr 2004 05:41:42 +0100" />
                    <attachment id="12327090" name="ASF.LICENSE.NOT.GRANTED--conntimeout.patch" size="41001" author="olegk" created="Tue, 13 Apr 2004 01:48:00 +0100" />
                    <attachment id="12327089" name="ASF.LICENSE.NOT.GRANTED--conntimeout.patch" size="40668" author="olegk" created="Mon, 12 Apr 2004 21:47:03 +0100" />
                    <attachment id="12327088" name="ASF.LICENSE.NOT.GRANTED--conntimeout.patch" size="38134" author="olegk" created="Sat, 10 Apr 2004 07:08:15 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>28322</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 12 Apr 2004 05:35:18 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133381</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47187</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>