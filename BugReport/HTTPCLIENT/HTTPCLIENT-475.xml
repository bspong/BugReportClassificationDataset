<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:17:52 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-475/HTTPCLIENT-475.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-475] Provide support for unconnected sockets</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-475</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>Overview description:&lt;br/&gt;
If Proxy settings are incorrect or host does not reply, the&lt;br/&gt;
HttpClient.executeMethod() hangs, and HttpMethod.abort() does not stop it. Thus,&lt;br/&gt;
you cannot assert that the entire application will stop immediately on demand.&lt;br/&gt;
&lt;br/&gt;
Expected Results:&lt;br/&gt;
During a HttpMethod.executeMethod(), HttpMethod.abort() should cancel&lt;br/&gt;
immediately the executeMethod().&lt;br/&gt;
&lt;br/&gt;
Actual Results:&lt;br/&gt;
If HttpMethod.executeMethod() freezes because of Proxy bad settings or not&lt;br/&gt;
responding hostname (in fact impossible to open the socket), the abort() method&lt;br/&gt;
does not do anything.&lt;br/&gt;
&lt;br/&gt;
Platform:&lt;br/&gt;
I tested it on Windows XP and Linux Debian with HttpClient 3.0 RC2 (but if you&lt;br/&gt;
look further I point the problem and the source code of the nightly build is&lt;br/&gt;
identical).&lt;br/&gt;
&lt;br/&gt;
See comments for the dialogue about the problem, and 2 Test cases. The solution&lt;br/&gt;
is described at the end, but it may implies a change in the API and works only&lt;br/&gt;
since Java 1.4.</description>
                <environment>Operating System: All&lt;br/&gt;
Platform: PC</environment>
            <key id="12334034">HTTPCLIENT-475</key>
            <summary>Provide support for unconnected sockets</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rolandw">Roland Weber</assignee>
                                <reporter username="bchevill.ml@gmail.com">Benjamin Chevillon</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Jun 2005 19:18:20 +0100</created>
                <updated>Mon, 5 Feb 2007 19:52:13 +0000</updated>
                    <resolved>Thu, 28 Dec 2006 10:08:42 +0000</resolved>
                            <version>Snapshot</version>
                                <fixVersion>4.0 Alpha 1</fixVersion>
                                <component>HttpConn</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12382446" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:20:37 +0100"  >First mail to httpclient-user list&lt;br/&gt;
Date: 15 juin 2005 12:08&lt;br/&gt;
Objet: Abort HttpMethod hangs due to bad proxy config&lt;br/&gt;
Related to File MethodAbortTest.java and MethodAbortTest.log&lt;br/&gt;
--------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
Hello,&lt;br/&gt;
&lt;br/&gt;
I use HttpClient in my application to download description file. I&lt;br/&gt;
work on ensuring that if the application gets closed, everything stop&lt;br/&gt;
as fast as possible.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m getting problem with this: as many companies network, http request&lt;br/&gt;
get out through an http proxy. If I configure correctly the proxy&lt;br/&gt;
settings, and if I try to abort a GetMethod, the connection is&lt;br/&gt;
immediately stopped, no problem.&lt;br/&gt;
Now if I don&amp;#39;t configure the proxy settings, the abort method does not&lt;br/&gt;
work, and my application hangs until timeout.&lt;br/&gt;
As my application will be deployed on many networks on which I cannot&lt;br/&gt;
be sure of the correct settings, I cannot accept that the application&lt;br/&gt;
hangs until timeout.&lt;br/&gt;
&lt;br/&gt;
For better understanding, here is the unit case I&amp;#39;m using to test it&lt;br/&gt;
(source code at the end of this email):&lt;br/&gt;
There is two thread:&lt;br/&gt;
- The main thread that starts the second one, sleeps for 3 seconds&lt;br/&gt;
then aborts the second one.&lt;br/&gt;
- The GetMethod thread that execute the GetMethod on a dummy site&lt;br/&gt;
(&lt;a href=&quot;http://test.dyndns.org&quot;&gt;http://test.dyndns.org&lt;/a&gt; does not work for me) that do not reply and&lt;br/&gt;
timeouts in 10 seconds.&lt;br/&gt;
&lt;br/&gt;
Preliminary for testing:&lt;br/&gt;
You must be on a network with a proxy. Configure the proxy settings at&lt;br/&gt;
the beginning of the class.&lt;br/&gt;
&lt;br/&gt;
What do the test:&lt;br/&gt;
It just gets &lt;a href=&quot;http://test.dyndns.org&quot;&gt;http://test.dyndns.org&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Expected result:&lt;br/&gt;
- &lt;a href=&quot;http://test.dyndns.org&quot;&gt;http://test.dyndns.org&lt;/a&gt; does not reply correctly&lt;br/&gt;
- so the execute wait for 10 seconds,&lt;br/&gt;
- and the main method abort the GetMethod after only 3 seconds&lt;br/&gt;
- So the application stops just after the abort and don&amp;#39;t wait for 10 seconds.&lt;br/&gt;
&lt;br/&gt;
1st test : with proxy settings.&lt;br/&gt;
- uncomment the line &amp;quot;&lt;br/&gt;
client.getHostConfiguration().setProxy(PROXY_HOST, PROXY_PORT);&amp;quot;&lt;br/&gt;
- Compile and start the class&lt;br/&gt;
&lt;br/&gt;
Result:&lt;br/&gt;
- The application stops correctly in 3 seconds (just after the abort).&lt;br/&gt;
&lt;br/&gt;
2nd test : without proxy settings.&lt;br/&gt;
- comment the line &amp;quot;&lt;br/&gt;
client.getHostConfiguration().setProxy(PROXY_HOST, PROXY_PORT);&amp;quot;&lt;br/&gt;
- Compile and start the class&lt;br/&gt;
&lt;br/&gt;
Result:&lt;br/&gt;
- the abort method is executed in 3 seconds&lt;br/&gt;
- BUT the execute method still hangs until the end of the 10 seconds timeout.&lt;br/&gt;
&lt;br/&gt;
Do anybody can produce the same type of acting?&lt;br/&gt;
See below my test class and logs.&lt;br/&gt;
&lt;br/&gt;
Thanks in advance&lt;br/&gt;
&lt;br/&gt;
Benjamin Chevillon&lt;br/&gt;
France T&amp;#xE9;l&amp;#xE9;com R&amp;amp;D</comment>
                    <comment id="12382447" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:29:52 +0100"  >Created an attachment (id=15430)&lt;br/&gt;
First test case: test if HttpMethod thread is aborted immediately or not&lt;br/&gt;
&lt;br/&gt;
See HttpMethod logs for results</comment>
                    <comment id="12382448" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:31:41 +0100"  >Created an attachment (id=15431)&lt;br/&gt;
First test case result: HttpMethod thread with correct proxy settings aborts&lt;br/&gt;
immediately&lt;br/&gt;
</comment>
                    <comment id="12382449" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:35:16 +0100"  >Created an attachment (id=15432)&lt;br/&gt;
First test case result: HttpMethod thread without correct proxy settings aborts&lt;br/&gt;
does not do anything and thread die at timeout&lt;br/&gt;
</comment>
                    <comment id="12382450" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:36:46 +0100"  >Second mail reply from Oleg&lt;br/&gt;
Oleg Kalnichevski 	&lt;br/&gt;
De: Oleg Kalnichevski &amp;lt;&lt;a href=&apos;mailto:olegk@apache.org&apos;&gt;olegk@apache.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date: 15 juin 2005 15:06&lt;br/&gt;
Objet: Re: Abort HttpMethod hangs due to bad proxy config&lt;br/&gt;
-----------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
Benjamin,&lt;br/&gt;
&lt;br/&gt;
Java (version 1.2 and below) does not seem to offer any other means to&lt;br/&gt;
interrupt a blocking I/O operation except for Socket#close. All&lt;br/&gt;
HttpMethod#abort can do is calling Connection#close, which in its turn&lt;br/&gt;
simply closes in sequence the output stream, the input stream and the&lt;br/&gt;
socket itself&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/httpclient/3.0/xref/org/apache/commons/httpclient/HttpMethodBase.html#1007&quot;&gt;http://jakarta.apache.org/commons/httpclient/3.0/xref/org/apache/commons/httpclient/HttpMethodBase.html#1007&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/httpclient/3.0/xref/org/apache/commons/httpclient/HttpConnection.html#1141&quot;&gt;http://jakarta.apache.org/commons/httpclient/3.0/xref/org/apache/commons/httpclient/HttpConnection.html#1141&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Apparently the socket was blocked in the connect method while trying to&lt;br/&gt;
establish the connection with the target host (which in your case was&lt;br/&gt;
the proxy):&lt;br/&gt;
&lt;br/&gt;
&amp;gt; org.apache.commons.httpclient.ConnectTimeoutException: The host did&lt;br/&gt;
&amp;gt; not accept the connection within timeout of 10000 ms&lt;br/&gt;
&amp;gt;        at&lt;br/&gt;
&amp;gt;&lt;br/&gt;
org.apache.commons.httpclient.protocol.ReflectionSocketFactory.createSocket(ReflectionSocketFactory.java:154)&lt;br/&gt;
&amp;gt;        at&lt;br/&gt;
&amp;gt;&lt;br/&gt;
org.apache.commons.httpclient.protocol.DefaultProtocolSocketFactory.createSocket(DefaultProtocolSocketFactory.java:124)&lt;br/&gt;
&lt;br/&gt;
So, technically speaking from the JRE perspective the socket was still&lt;br/&gt;
closed when HttpMethod#abort was attempted, hence Socket#close appears&lt;br/&gt;
to have made no effect on the blocked socket.&lt;br/&gt;
&lt;br/&gt;
I am afraid there&amp;#39;s not really much we can do here. The only resort&lt;br/&gt;
could possibly try would be calling Socket#shutdownInput through&lt;br/&gt;
reflection, but I suspect it will have no effect on sockets blocked&lt;br/&gt;
in the connect method either:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/net/Socket.html#shutdownInput()&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/net/Socket.html#shutdownInput()&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382451" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:37:37 +0100"  >Third mail reply from Benjamin&lt;br/&gt;
Date: 15 juin 2005 18:01&lt;br/&gt;
Objet: Re: Abort HttpMethod hangs due to bad proxy config&lt;br/&gt;
-----------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
Thank you for your precise and quick reply.&lt;br/&gt;
Encourage by this precision, I downloaded the source code and traced it.&lt;br/&gt;
Maybe this email should be posted to dev mailing list, except if this&lt;br/&gt;
question has already been fixed.&lt;br/&gt;
&lt;br/&gt;
Indeed, the client.executeMethod hangs in&lt;br/&gt;
org.apache.commons.httpclient.protocol.ReflectionSocketFactory where&lt;br/&gt;
the socket is opened. It hangs on the line 139 in the trunk CVS&lt;br/&gt;
138 SOCKETBIND_METHOD.invoke(socket, new Object[] { localaddr});&lt;br/&gt;
139 SOCKETCONNECT_METHOD.invoke(socket, new Object[] { remoteaddr, new&lt;br/&gt;
Integer(timeout)});&lt;br/&gt;
These 2 lines are similar to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  socket.bind(localaddr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  socket.connect(remoteaddr, timeout);&lt;br/&gt;
&lt;br/&gt;
But I was puzzled when you say that we cannot do much against it,&lt;br/&gt;
because, we can cancel some similar problem on web browser and it&lt;br/&gt;
takes effect immediately.&lt;br/&gt;
&lt;br/&gt;
Actually, the socket.connect() method can be canceled with&lt;br/&gt;
socket.close(): see the class attached: a socket is opened with a 10&lt;br/&gt;
seconds timeout and a second thread close it only 5 seconds later. It&lt;br/&gt;
works. (sorry for the quick &amp;amp; dirty style of the class)&lt;br/&gt;
&lt;br/&gt;
It does not work on HttpClient, because the abort() method close only&lt;br/&gt;
the InputStream which is not already created at this moment (since the&lt;br/&gt;
socket hangs on opening).&lt;br/&gt;
There are 2 problems:&lt;br/&gt;
- the socket is open within the same call of its creation (so we don&amp;#39;t&lt;br/&gt;
have a pointer to it, to close it).&lt;br/&gt;
- the abort() method has no way to call the close() method deeply.&lt;br/&gt;
&lt;br/&gt;
The chain of call is here:&lt;br/&gt;
HttpClient.executeMethod() -&amp;gt;...-&amp;gt; HttpConnection.open() -&amp;gt;&lt;br/&gt;
DefaultSocketFactory.createSocket() -&amp;gt;&lt;br/&gt;
ReflectionSocketFactory.createSocket()&lt;br/&gt;
&lt;br/&gt;
The public class closest to Socket is HttpConnection. A socket is&lt;br/&gt;
created with the open() method. It calls&lt;br/&gt;
ReflectionSocketFactory.createSocket() but inside this method the&lt;br/&gt;
socket.bind(..) and socket.connect(..) methods are not separated and&lt;br/&gt;
hangs. Thus, the HttpConnection.open() method never returns and the&lt;br/&gt;
HttpConnection cannot close() the socket (since it socket variable is&lt;br/&gt;
null).&lt;br/&gt;
&lt;br/&gt;
To resolve it, there should be 2 calls to ReflectionSocketFactory in&lt;br/&gt;
HttpConnection:&lt;br/&gt;
- One to create the socket (until bind). This method always return&lt;br/&gt;
immediately and this way, we could have a variable that points to the&lt;br/&gt;
Socket instance.&lt;br/&gt;
- A second call to connect the socket.&lt;br/&gt;
If the second call hangs, then we could call HttpConnection.close()&lt;br/&gt;
since the socket variable is not null.&lt;br/&gt;
&lt;br/&gt;
Finally, there should be a way to for the HttpClient to close the&lt;br/&gt;
HttpConnection which concerns it.&lt;br/&gt;
&lt;br/&gt;
What do you think about this? Tell me if I am wrong.&lt;br/&gt;
&lt;br/&gt;
Thanks&lt;br/&gt;
&lt;br/&gt;
Benjamin&lt;br/&gt;
</comment>
                    <comment id="12382452" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:39:42 +0100"  >Created an attachment (id=15433)&lt;br/&gt;
Second test case: It is possible to cancel immediately even if the socket&lt;br/&gt;
cannot be connected&lt;br/&gt;
</comment>
                    <comment id="12382453" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:40:12 +0100"  >Created an attachment (id=15434)&lt;br/&gt;
Second test case results: socket.close() stops immediately&lt;br/&gt;
</comment>
                    <comment id="12382454" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:41:23 +0100"  >Fourth Mail reply from Oleg : decision to file a bug&lt;br/&gt;
Date: 15 juin 2005 18:41&lt;br/&gt;
Objet: Re: Abort HttpMethod hangs due to bad proxy config&lt;br/&gt;
-----------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
Benjamin,&lt;br/&gt;
&lt;br/&gt;
Your analysis is correct. Sockets blocked waiting in the connect()&lt;br/&gt;
method can indeed be interrupted by calling close() on them. My&lt;br/&gt;
assumption was wrong. The trouble is that the changes you are suggesting&lt;br/&gt;
cannot be implemented without breaking the existing API. We cannot&lt;br/&gt;
change ProtocolSocketFactory interface so late in the release process.&lt;br/&gt;
Besides, ability to create unconnected sockets has been introduced in&lt;br/&gt;
Java 1.4 and cannot be easily simulated in older versions, whereas&lt;br/&gt;
HttpClient must stay Java 1.2 compatible until next major release (4.0&lt;br/&gt;
that is). Please file a bug / feature request in Bugzilla and we&amp;#39;ll get&lt;br/&gt;
this feature incorporated in the next major release of HttpClient. As of&lt;br/&gt;
version 4.0 HttpClient will require Java 1.4 or above.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12382455" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:44:20 +0100"  >Resume of action to take and what&amp;#39;s wrong:&lt;br/&gt;
&lt;br/&gt;
Pb reason:&lt;br/&gt;
It does not work on HttpClient, because the abort() method close only&lt;br/&gt;
the InputStream which is not already created at this moment (since the&lt;br/&gt;
socket hangs on opening).&lt;br/&gt;
Actually, the socket.connect() method can be canceled with&lt;br/&gt;
socket.close(): see the class attached&lt;br/&gt;
&lt;br/&gt;
There are 2 problems:&lt;br/&gt;
- the socket is open within the same call of its creation (so we don&amp;#39;t&lt;br/&gt;
have a pointer to it, to close it).&lt;br/&gt;
- the abort() method has no way to call the close() method deeply.&lt;br/&gt;
&lt;br/&gt;
Solution:&lt;br/&gt;
To resolve it, there should be 2 calls to ReflectionSocketFactory in&lt;br/&gt;
HttpConnection:&lt;br/&gt;
- One to create the socket (until bind). This method always return&lt;br/&gt;
immediately and this way, we could have a variable that points to the&lt;br/&gt;
Socket instance.&lt;br/&gt;
- A second call to connect the socket.&lt;br/&gt;
If the second call hangs, then we could call HttpConnection.close()&lt;br/&gt;
since the socket variable is not null.&lt;br/&gt;
&lt;br/&gt;
Finally, there should be a way to for the HttpClient to close the&lt;br/&gt;
HttpConnection which concerns it.&lt;br/&gt;
&lt;br/&gt;
Troubles:&lt;br/&gt;
The trouble is that the changes you are suggesting cannot be implemented without&lt;br/&gt;
breaking the existing API.&lt;br/&gt;
Besides, ability to create unconnected sockets has been introduced in&lt;br/&gt;
Java 1.4 and cannot be easily simulated in older versions, whereas&lt;br/&gt;
HttpClient must stay Java 1.2 compatible until next major release (4.0&lt;br/&gt;
that is).</comment>
                    <comment id="12382456" author="oglueck" created="Fri, 17 Jun 2005 20:20:59 +0100"  >What happens if you just call Thread.interrupt()? A blocking call should&lt;br/&gt;
immediately return with an InterruptedException IMHO.</comment>
                    <comment id="12382457" author="olegk" created="Fri, 17 Jun 2005 21:25:24 +0100"  >Right. But it depends on what you want to achieve. There may be cases where one&lt;br/&gt;
may want to unblock the socket but not necessarily kill the running thread&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12382458" author="bchevill.ml@gmail.com" created="Sat, 18 Jun 2005 01:19:15 +0100"  >Anyway, I tried Thread.interrupt() and it does not interrupt:&lt;br/&gt;
&lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html#interrupt()&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Thread.html#interrupt()&lt;/a&gt;&lt;br/&gt;
I don&amp;#39;t think the thread is on any of the states listed:&lt;br/&gt;
no wait or sleep&lt;br/&gt;
I don&amp;#39;t think Socket creation is an InterruptibleChannel (since it is not&lt;br/&gt;
already connected) nor Selector (I don&amp;#39;t understand quite well, but...). These&lt;br/&gt;
states seems to be linked to java.nio package which is not the case of&lt;br/&gt;
java.net.Socket.</comment>
                    <comment id="12382459" author="manningr@spamcop.net" created="Sun, 19 Jun 2005 11:08:38 +0100"  >If memory serves me correctly, you must close the socket that a thread is&lt;br/&gt;
blocked reading on in order to get that thread to continue processing beyond the&lt;br/&gt;
call to read.</comment>
                    <comment id="12382460" author="bchevill.ml@gmail.com" created="Mon, 20 Jun 2005 18:23:37 +0100"  >That&amp;#39;s correct, but as I said it on comment #10, you cannot close the socket&lt;br/&gt;
since there is no variable pointing to it. There is no variable because the&lt;br/&gt;
creation and the connection of the socket are in the same function.&lt;br/&gt;
The workaround is to split the creation and the connection (ie split bind() and&lt;br/&gt;
connect()) of the Socket. This way, a pointer to the Socket is returned and you&lt;br/&gt;
can call close() on this socket if the thread is blocked, as you said it. As&lt;br/&gt;
Oleg said, these changes involve modifying the API, so it marked for release 4.0.&lt;br/&gt;
&lt;br/&gt;
By the way. I don&amp;#39;t know how important this bug has been marked (I see P2, but I&lt;br/&gt;
don&amp;#39;t know what it means), but I think it is very important because this bug&lt;br/&gt;
means that you cannot control the behaviour of the client in a real time&lt;br/&gt;
environnement (for example you cannot be sure that the client will be closed&lt;br/&gt;
immediately).&lt;br/&gt;
&lt;br/&gt;
Benjamin</comment>
                    <comment id="12461044" author="rolandw" created="Wed, 27 Dec 2006 17:25:32 +0000"  >Here is a take on a new socket factory interface for HttpClient 4.x that supports unconnected sockets. It has a new method for returning an unconnected socket, and the old method gets an (optional) unconnected socket as an additional argument. That way, the timeout and local address binding stuff remains encapsulated in the factory.&lt;br/&gt;
This patch addresses mainly the new interface. Implementations are modified, but not necessarily pretty and definitely not tested. Since this issue is likely to affect &lt;a href=&quot;https://issues.apache.org/jira/browse/HTTPCLIENT-602&quot; title=&quot;refactor HttpClientConnection and HttpProxyConnection&quot;&gt;&lt;strike&gt;HTTPCLIENT-602&lt;/strike&gt;&lt;/a&gt;, I&amp;#39;ll commit the patch next week unless somebody complains. We can straighten out the details later.&lt;br/&gt;
Considering the original problem report, this patch will not solve the issue completely. We can support unconnected sockets all right, but where does the abort() method go now that HttpMethod is gone? ;-)&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12461095" author="olegk" created="Wed, 27 Dec 2006 20:09:37 +0000"  >Patch look good. It, however, breaks some test cases. TestSSLSocketFactory no longer compiles for me.&lt;br/&gt;
&lt;br/&gt;
Can this method be given a better name? connectSocket maybe?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Socket createSocket(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Socket sock,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String host, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int port, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;InetAddress localAddress, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int localPort,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpParams params&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;) throws IOException, UnknownHostException, ConnectTimeoutException;&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Considering the original problem report, this patch will not solve the issue completely. We can support &lt;br/&gt;
&amp;gt; unconnected sockets all right, but where does the abort() method go now that HttpMethod is gone? ;-) &lt;br/&gt;
&lt;br/&gt;
Implementing abort() method should be double. Connection release may prove a much more serious problem in my opinion. I was thinking about something along these lines:&lt;br/&gt;
&lt;br/&gt;
interface Request extends HttpRequest {&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;void setConnection(HttpConnection conn);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;void abort() throws IOException;&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
interface Response extends HttpResponse {&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;void setConnection(HttpConnection conn);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;void abort() throws IOException;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;void releaseConnection();&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
Better interface names are welcome.&lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12461102" author="rolandw" created="Wed, 27 Dec 2006 20:59:36 +0000"  >Hi Oleg,&lt;br/&gt;
&lt;br/&gt;
I had forgotten that there are test cases ;-( Will fix them before checking in.&lt;br/&gt;
I had the method called connectSocket, then realized that all other methods in the socket factory were called createSocket. I&amp;#39;ll change it back (tomorrow).&lt;br/&gt;
&lt;br/&gt;
My thoughts for abort() were with the HttpClient:&lt;br/&gt;
&lt;br/&gt;
interface HttpClient {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void abort(HttpRequest request)&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
and internally, the HttpClient keeps a map from requests to allocated connections (and other resources).&lt;br/&gt;
Should work for connection release as well, and avoids setting the connection on request and response.&lt;br/&gt;
The response might need a link back to the client if we want to have a release method there.&lt;br/&gt;
&lt;br/&gt;
cheers,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Roland&lt;br/&gt;
</comment>
                    <comment id="12461169" author="rolandw" created="Thu, 28 Dec 2006 10:08:42 +0000"  >patch committed with modifications:&lt;br/&gt;
- createSocket renamed to connectSocket&lt;br/&gt;
- test case fixed&lt;br/&gt;
&lt;br/&gt;
Marking this issue as resolved. Additional work to make use of the unconnected sockets will be performed has part of other issues.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12348654">HTTPCLIENT-602</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12347946" name="2k6-12-27-socketfactory-1.txt" size="14047" author="rolandw" created="Wed, 27 Dec 2006 17:25:32 +0000" />
                    <attachment id="12327256" name="ASF.LICENSE.NOT.GRANTED--ConnectTest.java" size="1134" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:39:42 +0100" />
                    <attachment id="12327257" name="ASF.LICENSE.NOT.GRANTED--ConnectTest.log" size="596" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:40:12 +0100" />
                    <attachment id="12327253" name="ASF.LICENSE.NOT.GRANTED--MethodAbortTest.java" size="2747" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:29:52 +0100" />
                    <attachment id="12327255" name="ASF.LICENSE.NOT.GRANTED--MethodAbortTestWithoutProxy.log" size="5422" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:35:16 +0100" />
                    <attachment id="12327254" name="ASF.LICENSE.NOT.GRANTED--MethodAbortTestWithProxy.log" size="5686" author="bchevill.ml@gmail.com" created="Thu, 16 Jun 2005 19:31:41 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>35383</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 17 Jun 2005 19:20:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133522</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47947</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>