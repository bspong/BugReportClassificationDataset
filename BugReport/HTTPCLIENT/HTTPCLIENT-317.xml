<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Mon Jul 08 06:16:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HTTPCLIENT-317/HTTPCLIENT-317.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[HTTPCLIENT-317] HTTP Client doesn&apos;t support multipart/related content-type</title>
                <link>https://issues.apache.org/jira/browse/HTTPCLIENT-317</link>
                <project id="12310360" key="HTTPCLIENT">HttpComponents HttpClient</project>
                        <description>It is not possible to sent data easely as a multipart/related content-type (as &lt;br/&gt;
discribed in rfc 2387) using Http Client.</description>
                <environment>Operating System: Windows XP&lt;br/&gt;
Platform: PC</environment>
            <key id="12333876">HTTPCLIENT-317</key>
            <summary>HTTP Client doesn&apos;t support multipart/related content-type</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="peter.tolmachov@agfa.com">peter</reporter>
                        <labels>
                    </labels>
                <created>Fri, 20 Feb 2004 21:32:51 +0000</created>
                <updated>Tue, 25 Jan 2011 10:58:33 +0000</updated>
                    <resolved>Wed, 26 Nov 2008 12:56:02 +0000</resolved>
                            <version>2.0 Final</version>
                                <fixVersion>4.0 Beta 2</fixVersion>
                                <component>HttpMime</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12381481" author="olegk" created="Fri, 20 Feb 2004 21:39:25 +0000"  >Just wondering if you have taken a look at the MultipartPostMethod? Currently it&lt;br/&gt;
only implements RFC1867, but in most cases that should be sufficient, I believe.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://jakarta.apache.org/commons/httpclient/apidocs/org/apache/commons/httpclient/methods/MultipartPostMethod.html&quot;&gt;http://jakarta.apache.org/commons/httpclient/apidocs/org/apache/commons/httpclient/methods/MultipartPostMethod.html&lt;/a&gt;</comment>
                    <comment id="12381482" author="peter.tolmachov@agfa.com" created="Sat, 21 Feb 2004 00:44:48 +0000"  >Yes of course I had a look to MultipartPostMethod.&lt;br/&gt;
I agree that in most cases it is enough to use just MultipartPostMethod class.&lt;br/&gt;
That&amp;#39;s probably because multipart/related encoding in some way is an extention &lt;br/&gt;
of multipart/form data.&lt;br/&gt;
But it is not possible to send data easely that uses features introduced in &lt;br/&gt;
Multipart/Related data&lt;br/&gt;
&lt;br/&gt;
Here are the main problems why it is not possible:&lt;br/&gt;
&lt;br/&gt;
(problem1)- &amp;#39;multipart related part&amp;#39; in comparison with &amp;#39;multipart form data &lt;br/&gt;
related part&amp;#39; has additional Content-ID header that &lt;br/&gt;
&lt;br/&gt;
can be used as the reference from other multipart related parts;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;send(OutputStream out) method of Part class doesn&amp;#39;t send Content-ID header;&lt;br/&gt;
&lt;br/&gt;
so HTTP Client will send something like &lt;br/&gt;
&lt;br/&gt;
--example-2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Content-Type: Text/x-Okie; charset=iso-8859-1;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{doc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This picture was taken by an automatic camera mounted ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{image file=cid:ID-2}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{para}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Now this is an enlargement of the area ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{image file=cid:ID-3}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{/doc}&lt;br/&gt;
&lt;br/&gt;
instead of&lt;br/&gt;
&lt;br/&gt;
--example-2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Content-Type: Text/x-Okie; charset=iso-8859-1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Content-ID: ID-1&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{doc}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;This picture was taken by an automatic camera mounted ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{image file=cid:ID-2}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{para}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Now this is an enlargement of the area ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{image file=cid:ID-3}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{/doc}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
(problem2)- addRequestHeaders(HttpState state, HttpConnection conn)  method of &lt;br/&gt;
MultipartPostMethod class&lt;br/&gt;
&amp;nbsp;writes to a &amp;quot;Content-Type&amp;quot; something like : &lt;br/&gt;
&amp;quot;multipart/form-data, boundary=AaB03x&amp;quot; &lt;br/&gt;
and thit is correct for multipart form data(rfc 1867), but for multipart &lt;br/&gt;
related data(according to rfc 2387) this &lt;br/&gt;
&lt;br/&gt;
method should generate something like:&lt;br/&gt;
&amp;quot;multipart/related; boundary=AaB03x; start=&amp;quot;ID-1&amp;quot; type=&amp;quot;Text/x-Okie&amp;quot;&lt;br/&gt;
where  &amp;#39;start&amp;#39; ant &amp;#39;type&amp;#39; parameters are the content-ID and type of the &lt;br/&gt;
compound object&amp;#39;s root body part;&lt;br/&gt;
&lt;br/&gt;
There are another small diferences as well(see rfc 2387).&lt;br/&gt;
&lt;br/&gt;
It looks like the easiest way to make Http Client support multipart/related &lt;br/&gt;
data is to add two classes : e.g. &lt;br/&gt;
&lt;br/&gt;
MultipartRelatedMethod that extends MultipartPostMethod and implements &lt;br/&gt;
addRequestHeaders(HttpState state, &lt;br/&gt;
&lt;br/&gt;
HttpConnection conn) method according to rfc 2387 and MultipartRelatedPart &lt;br/&gt;
class that extends Part class and &lt;br/&gt;
implements send(OutputStream out) method according to rfc 2387. Of course &lt;br/&gt;
classes(for all multipart related parts)&lt;br/&gt;
should have MultipartRelatedPart as super class.&lt;br/&gt;
&lt;br/&gt;
Could you please comment on this. If you know another way how to overcome this &lt;br/&gt;
problem please tell me. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12381483" author="olegk" created="Sat, 21 Feb 2004 01:15:41 +0000"  >Peter,&lt;br/&gt;
I see the point. Unfortunately there&amp;#39;s not much we can help you with at the&lt;br/&gt;
moment. I personally see implementation of the &amp;#39;multipart/related&amp;#39; content&lt;br/&gt;
handling as being out of scope for HttpClient, as least for a few major releases&lt;br/&gt;
to come. Currently there are efforts underway to develop a generic Multipart&lt;br/&gt;
Mime library within the Jakarta Commons Codec project:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://cvs.apache.org/viewcvs.cgi/jakarta-commons-sandbox/codec-multipart/&quot;&gt;http://cvs.apache.org/viewcvs.cgi/jakarta-commons-sandbox/codec-multipart/&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
We certainly plan to integrate the Multipart Mime functionality once it becomes&lt;br/&gt;
available as a part of stable commons-codec release. That may take a while,&lt;br/&gt;
though. For the time being I am afraid you&amp;#39;ll have to handle multipart/related&lt;br/&gt;
content encoding manually. &lt;br/&gt;
&lt;br/&gt;
Oleg&lt;br/&gt;
</comment>
                    <comment id="12381484" author="peter.tolmachov@agfa.com" created="Tue, 24 Feb 2004 16:21:27 +0000"  >Oleg,&lt;br/&gt;
&lt;br/&gt;
Thank you for response.&lt;br/&gt;
Ok, I&amp;#39;ll implement it myself.&lt;br/&gt;
It&amp;#39;s not that much work.&lt;br/&gt;
&lt;br/&gt;
Peter.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12540630" author="vorburger" created="Wed, 7 Nov 2007 00:03:05 +0000"  >This followowing two classes I just wrote do the trick for me reg. the 2 problems above... not sure this is fully sufficient? Might help somebody else. Regards, Michael Vorburger.&lt;br/&gt;
&lt;br/&gt;
class MultipartRelatedRequestEntity extends MultipartRequestEntity {&lt;br/&gt;
&lt;br/&gt;
		public MultipartRelatedRequestEntity(Part[] parts, HttpMethodParams params) {&lt;br/&gt;
			super(parts, params);&lt;br/&gt;
		}&lt;br/&gt;
&lt;br/&gt;
		public String getContentType()&lt;br/&gt;
		{&lt;br/&gt;
			String header = super.getContentType();&lt;br/&gt;
			int ix = header.indexOf( &amp;quot;boundary&amp;quot; );&lt;br/&gt;
			String mimeType = &amp;quot;application/soap+xml&amp;quot;; // or &amp;quot;text/xml\&amp;quot;, or doesn&amp;#39;t actually matter? &lt;br/&gt;
			return &amp;quot;multipart/related; type=\&amp;quot;&amp;quot; + mimeType + &amp;quot;\&amp;quot;; start=\&amp;quot;&amp;quot; + ROOTPART_NAME + &amp;quot;\&amp;quot;; &amp;quot;  + header.substring( ix );&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
&lt;br/&gt;
	private static class MultipartRelatedStringPart extends StringPart {&lt;br/&gt;
&lt;br/&gt;
	    protected static final String CONTENT_ID = &amp;quot;Content-ID: &amp;lt;&amp;quot;;&lt;br/&gt;
	    protected static final byte[] CONTENT_ID_BYTES = EncodingUtil.getAsciiBytes(CONTENT_ID);&lt;br/&gt;
&lt;br/&gt;
	    protected static final String GT = &amp;quot;&amp;gt;&amp;quot;;&lt;br/&gt;
	    protected static final byte[] GT_BYTES = EncodingUtil.getAsciiBytes(GT);&lt;br/&gt;
&lt;br/&gt;
		public MultipartRelatedStringPart(String name, String value) {&lt;br/&gt;
			super(name, value);&lt;br/&gt;
		}&lt;br/&gt;
&lt;br/&gt;
		public MultipartRelatedStringPart(String name, String value, String charset) {&lt;br/&gt;
			super(name, value, charset);&lt;br/&gt;
		}&lt;br/&gt;
&lt;br/&gt;
	    protected void sendDispositionHeader(OutputStream out) throws IOException {&lt;br/&gt;
	        out.write(CONTENT_ID_BYTES);&lt;br/&gt;
	        out.write(EncodingUtil.getAsciiBytes(getName()));&lt;br/&gt;
	        out.write(GT_BYTES);&lt;br/&gt;
	    }&lt;br/&gt;
	}&lt;br/&gt;
</comment>
                    <comment id="12540696" author="oglueck" created="Wed, 7 Nov 2007 08:21:03 +0000"  >Michael,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; String mimeType = &amp;quot;application/soap+xml&amp;quot;; // or &amp;quot;text/xml\&amp;quot;, or doesn&amp;#39;t actually matter?&lt;br/&gt;
&amp;gt; return &amp;quot;multipart/related; type=\&amp;quot;&amp;quot; + mimeType + &amp;quot;\&amp;quot;; start=\&amp;quot;&amp;quot; + ROOTPART_NAME + &amp;quot;\&amp;quot;; &amp;quot; + header.substring( ix );&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
AFAIK it makes no sense to specify a type attribute. The MIME type of this part is multipart/related, period. It is a container whose body (beofre the boundary) is usually just empty (or contains a dummy string), and there is no need to specify the type of this emtpyness. &lt;br/&gt;
&lt;br/&gt;
It is also incorrect to reuse the MIME boundary of the parent. It is a new container and must therefore start with a new boundary string (and close the boundary after the container ends).&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12650983" author="olegk" created="Wed, 26 Nov 2008 12:56:02 +0000"  >Fixed. See HttpMime&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                    <comment id="12829662" author="pak" created="Thu, 4 Feb 2010 17:34:34 +0000"  >It would be fixed in HttpMime, could you please explain how?&lt;br/&gt;
&lt;br/&gt;
Because if I even look into HttpMime 4.1 alpha2 in trunk&lt;br/&gt;
there is nothing that generates the Content-ID header in the parts with HttpMultipartMode.STRICT only Content-Type, Content-Disposition and Content-Transfer-Encoding. But Content-ID is NEEDED e.g. in Servicemix as target.&lt;br/&gt;
so the above mentioned problem is still open in the latest version but the workaround only would work in 3.1 (legacy)&lt;br/&gt;
</comment>
                    <comment id="12829675" author="pak" created="Thu, 4 Feb 2010 18:09:30 +0000"  >OK, I fixed the problem with a new sub-class for FormBodyPart that adds the Content-ID header called SOAPBodyPart&lt;br/&gt;
I only would need someone to commit this, as one cannot use MinimalField outside the httpcomponent package, for whatever reason.&lt;br/&gt;
&lt;br/&gt;
---&lt;br/&gt;
package org.apache.http.entity.mime;&lt;br/&gt;
&lt;br/&gt;
import org.apache.http.annotation.NotThreadSafe;&lt;br/&gt;
&lt;br/&gt;
import org.apache.http.entity.mime.content.ContentBody;&lt;br/&gt;
import org.apache.james.mime4j.descriptor.ContentDescriptor;&lt;br/&gt;
&lt;br/&gt;
/**&lt;br/&gt;
&amp;nbsp;* An extension of the mime4j standard {@link BodyPart} class that &lt;br/&gt;
&amp;nbsp;* automatically populates the header with standard fields based &lt;br/&gt;
&amp;nbsp;* on the content description of the enclosed body.&lt;br/&gt;
&amp;nbsp;* &lt;br/&gt;
&amp;nbsp;*&lt;br/&gt;
&amp;nbsp;* @since 4.0&lt;br/&gt;
&amp;nbsp;*/&lt;br/&gt;
@NotThreadSafe // Entity is @NotThreadSafe&lt;br/&gt;
public class SOAPBodyPart extends FormBodyPart {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public SOAPBodyPart(final String name, final ContentBody body) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super(name, body);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generateContentID(body);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;protected void generateContentID(final ContentDescriptor desc) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringBuilder buf = new StringBuilder();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;buf.append(&amp;quot;&amp;lt;&amp;quot;).append(getName()).append(&amp;quot;&amp;gt;&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;getHeader().addField(new MinimalField(&amp;quot;Content-ID&amp;quot;, buf.toString()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
</comment>
                    <comment id="12830192" author="olegk" created="Fri, 5 Feb 2010 17:42:51 +0000"  >MinimalField is a public class. I do not see why this code should be added to HttpMime.&lt;br/&gt;
&lt;br/&gt;
Oleg</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27109</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 20 Feb 2004 21:39:25 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>133366</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>47479</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>