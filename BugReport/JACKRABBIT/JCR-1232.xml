<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:50:38 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1232/JCR-1232.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1232] Merge UUID to NodeId</title>
                <link>https://issues.apache.org/jira/browse/JCR-1232</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The current NodeId class is mostly just a wrapper around UUID, which causes two objects to be instantiated for each node identifier that the system uses. The memory and processing overhead is quite small, but given that there are tons of NodeId instances it would be good to eliminate that overhead.&lt;br/&gt;
&lt;br/&gt;
There is also lots of code that just converts UUIDs to NodeIds and vice versa. We could simplify such code if we just used NodeId everywhere.&lt;br/&gt;
&lt;br/&gt;
Also, we might want to open up the possibility of using non-UUID node identifiers at some point in future, so it would make a lot of sense to remove the NodeId.getUUID method and rely directly on NodeId and it&amp;#39;s equals(), hashCode(), and toString() methods in many places where we currently use UUIDs.</description>
                <environment></environment>
            <key id="12383093">JCR-1232</key>
            <summary>Merge UUID to NodeId</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Nov 2007 02:04:09 +0000</created>
                <updated>Sun, 12 Jul 2009 00:43:53 +0100</updated>
                    <resolved>Sat, 11 Jul 2009 09:59:53 +0100</resolved>
                                            <fixVersion>2.0-alpha4</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12544909" author="jukkaz" created="Fri, 23 Nov 2007 02:26:36 +0000"  >Attached a patch that merges NodeId and UUID. The patch is pretty straightforward and should cause no functional changes, but given the size of the patch and the central role of NodeId I wanted to put the patch up for review before committing it.&lt;br/&gt;
&lt;br/&gt;
The main potential concerns that I could think of are the changed serialization format of NodeId and the removed SessionImpl.getNodeByUUID(UUID) method.&lt;br/&gt;
&lt;br/&gt;
All of our persistence managers use a custom serialization mechanisms, so the change in the Java serialization format of NodeId should not cause problems.&lt;br/&gt;
&lt;br/&gt;
I removed the SessionImpl.getNodeByUUID(UUID) method since we already have the standard Session.getNodeByUUID(String) and the internal SessionImpl.getNodeById(NodeId) methods that should cover all use cases. If someone wants, I can restore the method signature with a deprecation mark.</comment>
                    <comment id="12544975" author="mreutegg" created="Fri, 23 Nov 2007 10:43:21 +0000"  >+1</comment>
                    <comment id="12544980" author="tmueller" created="Fri, 23 Nov 2007 11:01:59 +0000"  >The name &amp;#39;UUID&amp;#39; is currently used by some central components (for example persistence managers). To simplify migration, what about:&lt;br/&gt;
&lt;br/&gt;
- Create a interface UUID a interface&lt;br/&gt;
- Let NodeId implement UUID (the interface)&lt;br/&gt;
- Merge NodeId and UUID (the class) like you did &lt;br/&gt;
- UUID NodeId.getUUID() { return this; }&lt;br/&gt;
&lt;br/&gt;
What do you think?&lt;br/&gt;
Thomas</comment>
                    <comment id="12544984" author="jukkaz" created="Fri, 23 Nov 2007 11:17:06 +0000"  >Thomas:&lt;br/&gt;
&amp;gt; Create a interface UUID a interface &lt;br/&gt;
&lt;br/&gt;
I like the idea, but it would change also jackrabbit-jcr-commons instead of just jackrabbit-core.&lt;br/&gt;
&lt;br/&gt;
Also, I really prefer to get rid of the NodeId.getUUID() method, so we&amp;#39;ll have easier time refactoring NodeIds in the future if we need to.</comment>
                    <comment id="12544985" author="jukkaz" created="Fri, 23 Nov 2007 11:22:00 +0000"  >If needed, we could keep the getUUID() method around as a deprecated one for 1.4 (assuming we want to apply this change for 1.4). Something like this should do the trick:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* @deprecated&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public UUID getUUID() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new UUID(msb, lsb);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
</comment>
                    <comment id="12544988" author="stefan@jira" created="Fri, 23 Nov 2007 11:31:27 +0000"  >nice! +1 for jukka&amp;#39;s patch</comment>
                    <comment id="12544990" author="tmueller" created="Fri, 23 Nov 2007 11:38:37 +0000"  >&amp;gt; public UUID getUUID() { return new UUID(msb, lsb); } &lt;br/&gt;
&lt;br/&gt;
That would be a solution (however &amp;#39;return this&amp;#39; would mean no overhead).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; change also jackrabbit-jcr-commons instead of just jackrabbit-core. &lt;br/&gt;
&lt;br/&gt;
The title suggest you want to merge the classes UUID and NodeId, and I fully agree that would be great. But now I understand you want to copy &amp;amp; paste the source code? Sorry, I really prefer having only one copy of the UUID code. It doesn&amp;#39;t matter to me in what class that is, but copying the source code is not an option for me; that would be -1.&lt;br/&gt;
</comment>
                    <comment id="12544996" author="jukkaz" created="Fri, 23 Nov 2007 11:54:39 +0000"  >&amp;gt; Sorry, I really prefer having only one copy of the UUID code. It doesn&amp;#39;t matter to me in what class that is,&lt;br/&gt;
&amp;gt; but copying the source code is not an option for me; that would be -1. &lt;br/&gt;
&lt;br/&gt;
I was contemplating removing or deprecating the UUID class, but it being a jackrabbit-jcr-commons class I&amp;#39;m not sure how widely it is used outside jackrabbit-core.&lt;br/&gt;
&lt;br/&gt;
In any case I think the duplication of code in this case is really trivial (the most complex parts I&amp;#39;m duplicating are two if statements and a number of trivial bit shifts), so I think the benefits should outweight concerns over duplication.</comment>
                    <comment id="12545009" author="jukkaz" created="Fri, 23 Nov 2007 12:28:12 +0000"  >Hmm, a nice alternative:&lt;br/&gt;
&lt;br/&gt;
We should in fact be making NodeId an interface and have an implementing class that extends UUID:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class UUIDNodeId extends UUID implements NodeId { ... }&lt;br/&gt;
&lt;br/&gt;
That should also nicely open the door for potential future non-UUID node identifiers.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll come up with a patch for this.</comment>
                    <comment id="12545015" author="tmueller" created="Fri, 23 Nov 2007 12:54:47 +0000"  >&amp;gt; public class UUIDNodeId extends UUID implements NodeId { ... }&lt;br/&gt;
&lt;br/&gt;
Cool!  (Or just &amp;#39;NodeId extends UUID&amp;#39;, but having a NodeId interface is probably even better).&lt;br/&gt;
+1 for this</comment>
                    <comment id="12545020" author="mreutegg" created="Fri, 23 Nov 2007 13:14:02 +0000"  >&amp;gt; public class UUIDNodeId extends UUID implements NodeId { ... } &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t like this approach. Today we don&amp;#39;t have a reason to introduce an interface for NodeId and I would rather stay away from it as long as possible. Otherwise we&amp;#39;ll probably run into issues when it comes to equals methods:&lt;br/&gt;
&lt;br/&gt;
- Is a UUIDNodeId equal to a UUID instance which contains the same value? What about the other way around?&lt;br/&gt;
- What about other implementations of NodeId.&lt;br/&gt;
&lt;br/&gt;
Well, basically the issues described by Joshua Bloch in Effective Java (Item 7: Obey the general contract when overriding equals).</comment>
                    <comment id="12545031" author="tmueller" created="Fri, 23 Nov 2007 13:58:43 +0000"  >In my view duplicating source code is worse than adding an interface, but NodeId extends UUID would be a solution as well.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Is a UUIDNodeId equal to a UUID instance which contains the same value? What about the other way around? &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think the current situation is much different. NodeId equals should return false when comparing with any other class. Similar to Short.equals: One could argue the equals should return true when comparing with Short(1) with Integer(1), but it does not:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public boolean equals(Object obj) {&lt;br/&gt;
	if (obj instanceof Short) {&lt;br/&gt;
	    return value == ((Short)obj).shortValue();&lt;br/&gt;
	}&lt;br/&gt;
	return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12545041" author="efranqueiro" created="Fri, 23 Nov 2007 14:55:08 +0000"  >If getUUID() is used by applications, then I would say a behavior like the following is necessary, at least for the near future in order not to break them.&lt;br/&gt;
&lt;br/&gt;
&amp;gt;    /**&lt;br/&gt;
&amp;gt;     * @deprecated&lt;br/&gt;
&amp;gt;     */&lt;br/&gt;
&amp;gt;    public UUID getUUID() {&lt;br/&gt;
&amp;gt;        return new UUID(msb, lsb);&lt;br/&gt;
&amp;gt;    }&lt;br/&gt;
&lt;br/&gt;
If not, the docs should say how to replace its functionality.</comment>
                    <comment id="12545042" author="stefan@jira" created="Fri, 23 Nov 2007 14:56:44 +0000"  >while i do share tom&amp;#39;s concerns regarding code duplication in general i don&amp;#39;t care about code duplication in this particular case as it&amp;#39;s only minimal and the benefits are obvious (at least for me).&lt;br/&gt;
&lt;br/&gt;
therefore, in the light of the previous comments, still +1 for jukka&amp;#39;s original patch.</comment>
                    <comment id="12545066" author="tmueller" created="Fri, 23 Nov 2007 15:59:43 +0000"  >What about this:&lt;br/&gt;
&lt;br/&gt;
public interface ItemId {    &lt;br/&gt;
&amp;nbsp;&amp;nbsp;boolean denotesNode();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
public class PropertyId implements ItemId...&lt;br/&gt;
&lt;br/&gt;
public class NodeId extends UUID implements ItemId...&lt;br/&gt;
&lt;br/&gt;
Here is the patch</comment>
                    <comment id="12545067" author="tmueller" created="Fri, 23 Nov 2007 16:00:36 +0000"  >sorry I named my patch the same as you did. Mine is the shorter one.</comment>
                    <comment id="12545070" author="efranqueiro" created="Fri, 23 Nov 2007 16:06:43 +0000"  >To cope with the existing code, shouldn&amp;#39;t be public interface ItemId extends Serializable?</comment>
                    <comment id="12545081" author="tmueller" created="Fri, 23 Nov 2007 16:40:51 +0000"  >&amp;gt; ItemId extends Serializable&lt;br/&gt;
&lt;br/&gt;
Yes, sorry, I forgot that. Also I didn&amp;#39;t test the patch yet.&lt;br/&gt;
My patch can be combined with Jukkas patch of course - the advantage is the improved backward compatibility.</comment>
                    <comment id="12545383" author="tmueller" created="Mon, 26 Nov 2007 10:16:14 +0000"  >Both patches have their own disadvantages: &lt;br/&gt;
&lt;br/&gt;
- Jukka&amp;#39;s patch is slower (more temporary objects), and copies source code. &lt;br/&gt;
&lt;br/&gt;
- My patch is faster and avoids copying source code, but it may not be as architecturally sound. &lt;br/&gt;
&lt;br/&gt;
I can live with Jukkas patch as long as there it is fully backward compatible (as long as the UUID class is still available, and as long as NodeId.getUUID() is still supported).&lt;br/&gt;
&lt;br/&gt;
So I take back my &amp;#39;-1&amp;#39;, and vote &amp;#39;0&amp;#39; ;-)&lt;br/&gt;
&lt;br/&gt;
Thomas</comment>
                    <comment id="12729962" author="jukkaz" created="Sat, 11 Jul 2009 09:59:53 +0100"  >I have now merged all UUID functionality to the NodeId class.</comment>
                </comments>
                    <attachments>
                    <attachment id="12370100" name="nodeid.patch" size="142143" author="jukkaz" created="Fri, 23 Nov 2007 02:26:35 +0000" />
                    <attachment id="12370129" name="nodeId.patch" size="4468" author="tmueller" created="Fri, 23 Nov 2007 15:59:43 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 23 Nov 2007 10:43:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142590</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279803</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>