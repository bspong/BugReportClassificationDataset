<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:49:34 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2688/JCR-2688.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2688] Provide utility for handling large number of child nodes/properties</title>
                <link>https://issues.apache.org/jira/browse/JCR-2688</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Jackrabbit does not cope well with &amp;#39;flat&amp;#39; hierarchies. That is with hierarchies where a node has many child nodes and/or properties. The current recommendation for such situations is to manually add intermediate nodes. &lt;br/&gt;
&lt;br/&gt;
It would be nice to have an utility which adds/removes intermediate nodes as needed and expose a &amp;#39;flat&amp;#39; view to users. Such an utility should:&lt;br/&gt;
&lt;br/&gt;
- expose a large number of nodes/properties as sequence&lt;br/&gt;
- parametrize the order of how nodes/properties appear in the sequence&lt;br/&gt;
- provide methods to lookup/add/remove nodes/properties by key &lt;br/&gt;
- organize the node/properties in the underlying JCR hierarchy in a way which is both efficient for above operations and easily understandable to users looking at the hierarchy. </description>
                <environment></environment>
            <key id="12470326">JCR-2688</key>
            <summary>Provide utility for handling large number of child nodes/properties</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mduerig">Michael D&#252;rig</assignee>
                                <reporter username="mduerig">Michael D&#252;rig</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Jul 2010 11:10:19 +0100</created>
                <updated>Tue, 8 Nov 2011 15:52:12 +0000</updated>
                    <resolved>Thu, 5 Aug 2010 18:04:21 +0100</resolved>
                            <version>2.2</version>
                                <fixVersion>2.2</fixVersion>
                                <component>jackrabbit-jcr-commons</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12893128" author="mduerig" created="Wed, 28 Jul 2010 11:12:03 +0100"  >Proposed patch&lt;br/&gt;
&lt;br/&gt;
Example usage:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Create a new TreeManager instance rooted at node. Splitting of nodes takes place&lt;br/&gt;
&amp;nbsp;// when the number of children of a node exceeds 40 and is done such that each new&lt;br/&gt;
&amp;nbsp;// node has at least 40 child nodes. The keys are ordered according to the natural&lt;br/&gt;
&amp;nbsp;// order of java.lang.String.&lt;br/&gt;
&amp;nbsp;TreeManager treeManager = new BTreeManager(node, 20, 40, Rank.&amp;lt;String&amp;gt;comparableComparator(), true);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Create a new NodeSequence with that tree manager&lt;br/&gt;
&amp;nbsp;NodeSequence nodes = ItemSequence.createNodeSequence(treeManager);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Add nodes with key &amp;quot;jcr&amp;quot; and &amp;quot;day&amp;quot;&lt;br/&gt;
&amp;nbsp;nodes.addNode(&amp;quot;jcr&amp;quot;, NodeType.NT_UNSTRUCTURED);&lt;br/&gt;
&amp;nbsp;nodes.addNode(&amp;quot;day&amp;quot;, NodeType.NT_UNSTRUCTURED);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Iterate over the node in the sequence.&lt;br/&gt;
&amp;nbsp;// Prints &amp;quot;day jcr &amp;quot;&lt;br/&gt;
&amp;nbsp;for (Node n : nodes) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.print(n.getName() + &amp;quot; &amp;quot;);&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Retrieve node with key &amp;quot;jcr&amp;quot;&lt;br/&gt;
&amp;nbsp;Node n = nodes.getItem(&amp;quot;jcr&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;// Remove node with key &amp;quot;day&amp;quot;&lt;br/&gt;
&amp;nbsp;nodes.removeNode(&amp;quot;day&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
The nodes in the JCR sub tree are arranged such that any node named x only contains child nodes with names greater or equal to x. The implementation keeps the child nodes in the sub tree ordered if the respective node type supports ordering of child nodes. Ordering is always wrt. to a Comparator on the respective keys. For lexical order this arrangement corresponds to how words are arranged in a multi volume encyclopedia.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12893129" author="mduerig" created="Wed, 28 Jul 2010 11:16:02 +0100"  >Open questions:&lt;br/&gt;
&lt;br/&gt;
- Currently these utility classes live in a new package o.a.j.flat. There might be better names...&lt;br/&gt;
- I would like to add unit tests. However jcr-commons currently does not have dependencies to the core (and other modules) which would be needed for the tests. Should we add the required deps with scope test or should we place the unit test somewhere else? where?</comment>
                    <comment id="12893130" author="tmueller" created="Wed, 28 Jul 2010 11:26:23 +0100"  >I would use a test dependency. Placing the tests somewhere else is weird.</comment>
                    <comment id="12893171" author="justinedelson" created="Wed, 28 Jul 2010 14:16:36 +0100"  >&amp;gt; I would use a test dependency. Placing the tests somewhere else is weird.&lt;br/&gt;
You can&amp;#39;t do this; it will create a circular dependency between core and jcr-commons.</comment>
                    <comment id="12893177" author="mduerig" created="Wed, 28 Jul 2010 14:37:50 +0100"  >Maven seems to fine with jackrabbit-core as test dependency. Eclipse doesn&amp;#39;t like it however since it results in a circular classpath. &lt;br/&gt;
&lt;br/&gt;
So the questions remains: where should units tests for classes in jcr-commons go which need a repository?</comment>
                    <comment id="12893181" author="justinedelson" created="Wed, 28 Jul 2010 14:48:19 +0100"  >&amp;gt; Maven seems to fine with jackrabbit-core as test dependency.&lt;br/&gt;
&lt;br/&gt;
This may be true if you run a single project build, but it fails when running a reactor build:&lt;br/&gt;
&lt;br/&gt;
[INFO] The projects in the reactor contain a cyclic reference: Edge between &amp;#39;Vertex{label=&amp;#39;org.apache.jackrabbit:jackrabbit-core&amp;#39;}&amp;#39; and &amp;#39;Vertex{label=&amp;#39;org.apache.jackrabbit:jackrabbit-jcr-commons&amp;#39;}&amp;#39; introduces to cycle in the graph org.apache.jackrabbit:jackrabbit-jcr-commons --&amp;gt; org.apache.jackrabbit:jackrabbit-core --&amp;gt; org.apache.jackrabbit:jackrabbit-jcr-commons&lt;br/&gt;
</comment>
                    <comment id="12893193" author="mduerig" created="Wed, 28 Jul 2010 15:49:40 +0100"  >So I see four option for the unit tests:&lt;br/&gt;
&lt;br/&gt;
1. Move above utility classes along with the unit test into their own module&lt;br/&gt;
2. Add the unit tests to jackrabbit-core&lt;br/&gt;
3. Add the unit tests to jcr-commons but run them during the core build. Needs a jcr-commons test artifact&lt;br/&gt;
4. Do away with the unit tests all together&lt;br/&gt;
&lt;br/&gt;
Although 1. is the cleanest way I don&amp;#39;t like it since we have enough modules already. &lt;br/&gt;
4. is bad&lt;br/&gt;
For 2. I think jackrabbit-core is the wrong place. Unit tests always have a documentation aspect. People just wont look for them in core.&lt;br/&gt;
So I think we are left with 3. Which is not a bright solution neither.</comment>
                    <comment id="12893204" author="alexander.klimetschek" created="Wed, 28 Jul 2010 16:17:46 +0100"  >1. is the &amp;quot;right&amp;quot; way: if jackrabbit&amp;#39;s JCR API implementation (core) depends on jcr-commons functionality, jcr-commons itself can&amp;#39;t really offer functionality that depends on the JCR API (and on an API implementation to run/test it). But that extends to existing utilities in jcr-commons, I guess.</comment>
                    <comment id="12893208" author="mduerig" created="Wed, 28 Jul 2010 16:26:31 +0100"  >Yes technically 1. is the right way... However I fear its not a realistic option. &lt;br/&gt;
As it seems 2. is the way taken by others (i.e. for o.a.j.c.query.GQL). So I guess I&amp;#39;ll also take this approach. </comment>
                    <comment id="12893209" author="justinedelson" created="Wed, 28 Jul 2010 16:26:59 +0100"  >5. Leave the unit tests in jcr-commons and use mocks&lt;br/&gt;
&lt;br/&gt;
or&lt;br/&gt;
&lt;br/&gt;
6. Break jcr-commons into two:&lt;br/&gt;
* jcr-impl-commons - utility classes/interfaces for help *implementing* JCR&lt;br/&gt;
* jcr-api-commons - utility classes/interfaces for help *using* JCR&lt;br/&gt;
&lt;br/&gt;
And then combine those into jcr-commons (for backwards compatibility)</comment>
                    <comment id="12893212" author="mduerig" created="Wed, 28 Jul 2010 16:31:37 +0100"  >5. means basically reimplementing JCR... &lt;br/&gt;
6. is more or less the same as 1.</comment>
                    <comment id="12894027" author="mreutegg" created="Fri, 30 Jul 2010 13:23:33 +0100"  >I suggest you go with 3)&lt;br/&gt;
&lt;br/&gt;
We already did this with test cases for the spi and it worked quite well.</comment>
                    <comment id="12894054" author="fmeschbe" created="Fri, 30 Jul 2010 15:23:05 +0100"  >(6) would probably be best and also solve the mistakes others have done by going (3), (1) the second best and everything else is just not a good idea ;-)&lt;br/&gt;
&lt;br/&gt;
BTW IMHO the &amp;quot;excuse&amp;quot; &amp;#39;I don&amp;#39;t like it since we have enough modules already&amp;#39; is just FUD. The problem is not the number of modules. The problem really is the unclear separation between modules. What you do with (2) or (3) is add to this incertainty.&lt;br/&gt;
&lt;br/&gt;
So please, don&amp;#39;t go the (2) or (3) route (what others have done already IMHO is equally wrong and should probably be fixed).</comment>
                    <comment id="12894599" author="mduerig" created="Mon, 2 Aug 2010 17:58:32 +0100"  >I committed the patch with minor modifications along with test cases in revision 981597</comment>
                    <comment id="12894603" author="mduerig" created="Mon, 2 Aug 2010 18:06:56 +0100"  >I created &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2692&quot; title=&quot;Split jcr-commons in two &quot;&gt;JCR-2692&lt;/a&gt; to track the issue of splitting jcr-commons into tow separate modules. </comment>
                    <comment id="12894855" author="jukkaz" created="Tue, 3 Aug 2010 10:38:37 +0100"  >There&amp;#39;s no need for the tests in jcr-commons to depend on the latest snapshot version of jackrabbit-core. Using the following should avoid the circular dependency:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;dependency&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;groupId&amp;gt;org.apache.jackrabbit&amp;lt;/groupId&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;artifactId&amp;gt;jackrabbit-core&amp;lt;/artifactId&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;version&amp;gt;2.0.0&amp;lt;/version&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/dependency&amp;gt;&lt;br/&gt;
</comment>
                    <comment id="12895195" author="jukkaz" created="Wed, 4 Aug 2010 10:54:17 +0100"  >Could we move the org.apache.jackrabbit.flat package to org.apache.jackrabbit.commons.flat? I&amp;#39;d like to keep as much of jcr-commons inside o.a.j.commons as possible.&lt;br/&gt;
&lt;br/&gt;
The RankTest class should also go from flat to o.a.j.commons.flat.</comment>
                    <comment id="12895226" author="mduerig" created="Wed, 4 Aug 2010 12:46:21 +0100"  >Sorry for the miss placed packages. Flat package representation in Eclipse got me. &lt;br/&gt;
I fixed this in revision 982221.</comment>
                    <comment id="12895260" author="jukkaz" created="Wed, 4 Aug 2010 14:49:35 +0100"  >BTW, I&amp;#39;m not too excited about the new commons-collections dependency in jcr-commons. So far we&amp;#39;ve tried to minimize the number of dependencies in jcr-commons.&lt;br/&gt;
&lt;br/&gt;
The attached patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2688&quot; title=&quot;Provide utility for handling large number of child nodes/properties&quot;&gt;&lt;strike&gt;JCR-2688&lt;/strike&gt;&lt;/a&gt;-no-cc.patch) replaces the commons-collections dependencies in o.a.j.commons.flat with roughly equivalent constructs from the standard Java libraries.&lt;br/&gt;
&lt;br/&gt;
There are still a few related iterator classes based on commons-collections after &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2698&quot; title=&quot;Consolidate type safe wrappers for commons-collection classes&quot;&gt;&lt;strike&gt;JCR-2698&lt;/strike&gt;&lt;/a&gt;. I&amp;#39;ll reopen that issue to figure out what to do with them.</comment>
                    <comment id="12895277" author="mduerig" created="Wed, 4 Aug 2010 15:49:21 +0100"  >I&amp;#39;m basically fine with the patch. However I would refactor it a bit to regain readability of the code. </comment>
                    <comment id="12895732" author="mduerig" created="Thu, 5 Aug 2010 17:56:27 +0100"  >Reopening to address Jukka&amp;#39;s comment regarding the commons-collection dependency </comment>
                    <comment id="12895735" author="mduerig" created="Thu, 5 Aug 2010 18:04:20 +0100"  >Fixed at revision 982695</comment>
                </comments>
                    <attachments>
                    <attachment id="12451223" name="JCR-2688-no-cc.patch" size="8390" author="jukkaz" created="Wed, 4 Aug 2010 14:49:35 +0100" />
                    <attachment id="12450681" name="JCR-2688.patch" size="82335" author="mduerig" created="Wed, 28 Jul 2010 11:12:03 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 28 Jul 2010 10:26:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>97878</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280255</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>