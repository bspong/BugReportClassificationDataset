<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:31:32 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-245/JCR-245.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-245] Automatic repository shutdown</title>
                <link>https://issues.apache.org/jira/browse/JCR-245</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Currently Jackrabbit relies on two mechanisms for safely shutting down a repository:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1) client application invoking RepositoryImpl.shutdown(), or&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2) the shutdown hook installed by RepositoryImpl being run&lt;br/&gt;
&lt;br/&gt;
Both of these mechanisms have problems:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1) The shutdown() method is not a part of the JCR API, thus making the client application depend on a Jackrabbit-specific feature&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2) In some cases the shutdown hook is not properly run (see issues &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-120&quot; title=&quot;Jackrabbit fails to shutdown properly when tomcat is shutting down&quot;&gt;&lt;strike&gt;JCR-120&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-233&quot; title=&quot;repository lock file not removed without a clean shutdown&quot;&gt;&lt;strike&gt;JCR-233&lt;/strike&gt;&lt;/a&gt;)&lt;br/&gt;
&lt;br/&gt;
I think the JCR spec thinks of the Repository and Session interfaces as being somewhat similar to the JDBC DataSource and Connection interfaces. The Repository instances have no real lifecycle methods while the Session instances have clearly specified login and logout steps. (DataSource.getConnection() = Repository.login(), Session.logout() = Connection.close()) However the Jackrabbit implementation defines an explicit lifecycle for the RepositoryImpl instances.&lt;br/&gt;
&lt;br/&gt;
This causes problems especially for container environments (JNDI, Spring) where it is hard or even impossible to specify a shutdown mechanism for resource factories like the Repository instances. The current solution for such environments is to use a shutdown hook, but as reported this solution does not work perfectly in all cases.&lt;br/&gt;
&lt;br/&gt;
How about if we bound the RepositoryImpl lifecycle to the lifecycles of the instantiated Sessions. A RepositoryImpl instance could initialize (and lock) the repository when the first session is opened and automatically shut down when the last session has logged out. As long as the sessions are properly logged out (or finalized by the garbage collector) there would be no need for an explicitly RepositoryImpl.shutdown() call. The current behaviour of pre-initializing the repository and shutting down during a shutdown hook could be enabled with a configuration option for environments (like global JNDI resources) in which the shutdown hooks work well.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12317665">JCR-245</key>
            <summary>Automatic repository shutdown</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 6 Oct 2005 21:05:26 +0100</created>
                <updated>Wed, 8 Mar 2006 01:24:07 +0000</updated>
                    <resolved>Fri, 9 Dec 2005 18:53:31 +0000</resolved>
                                            <fixVersion>1.0</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12359400" author="humergu" created="Tue, 6 Dec 2005 19:16:14 +0000"  >What about sth. like implementing the Repository as a Singleton? &lt;br/&gt;
But not in the common term of singleton, more like one instance for each Repository-Home directory. &lt;br/&gt;
&lt;br/&gt;
RepositoryImpl.getRepository(homeDir1) provides the same instance as. &lt;br/&gt;
RepositoryImpl.getRepository(homeDir1)&lt;br/&gt;
&lt;br/&gt;
But &lt;br/&gt;
RepositoryImpl.getRepository(homeDir2) provides a new instance. &lt;br/&gt;
&lt;br/&gt;
The repository is still shutdown, with the shutdown hook and initialized, when the user creates a Session or gets the Repository. </comment>
                    <comment id="12359405" author="alexandrupopescu" created="Tue, 6 Dec 2005 19:40:13 +0000"  >The solution with singletons is still problematic considering the classloaders.&lt;br/&gt;
&lt;br/&gt;
./alex&lt;br/&gt;
--&lt;br/&gt;
.w( the_mindstorm )p.&lt;br/&gt;
</comment>
                    <comment id="12359497" author="jukkaz" created="Wed, 7 Dec 2005 08:38:58 +0000"  >The attached patch contains org.apache.jackrabbit.core.TransientRepository, a proxy repository class that automatically initializes and shuts down the underlying RepositoryImpl instance when sessions are opened or closed. I implemented this as a separate class to avoid overloading the already heavy RepositoryImpl class. The implementation is quite clean except for two things: 1) it loads the default repository descriptors directly from repository.properties, and 2) it messes with RepositoryImpl.loggedOut(SessionImpl) to avoid a nasty infinite loop in RepositoryImpl.shutdown().&lt;br/&gt;
&lt;br/&gt;
The class is quite easy to use and works very well with component containers like Spring where setting up an explicit shutdown call is difficult and cumbersome. If it weren&amp;#39;t for the repository initialization and shutdown overhead, it would also make a fine candidate for solving the deployment model 2 shutdown issues discussed lately on the mailing list. The implementation also relies on all clients properly closing all the sessions they&amp;#39;ve opened. If needed, the implementation could be modified to use a WeakHashMap to cope with lost sessions.&lt;br/&gt;
&lt;br/&gt;
Example code:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RepositoryConfig config = RepositoryConfig.create(&amp;quot;...&amp;quot;, &amp;quot;...&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repository = new TransientRepository(config);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session session = repository.login();  // Repository gets initialized&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Use the session&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.logout(); // Repository gets shut down&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Any problems with this approach that I haven&amp;#39;t noticed? I&amp;#39;ve been quite happy using a class like this in my Spring-based projects, so unless anyone objects I&amp;#39;ll go ahead and commit it so others can use it too.&lt;br/&gt;
</comment>
                    <comment id="12359500" author="jukkaz" created="Wed, 7 Dec 2005 08:53:34 +0000"  >G&amp;#xFC;nther Humer asked:&lt;br/&gt;
&amp;gt; What about sth. like implementing the Repository as a Singleton?&lt;br/&gt;
&lt;br/&gt;
I think that&amp;#39;s a solution looking for a problem. It&amp;#39;s a different issue than the one raised here, and besides I think that guarding against duplicate repository configuration is better done at the application or container level. See also &lt;a href=&quot;http://c2.com/cgi/wiki?SingletonGlobalProblems&quot;&gt;http://c2.com/cgi/wiki?SingletonGlobalProblems&lt;/a&gt;</comment>
                    <comment id="12359563" author="stefan@jira" created="Wed, 7 Dec 2005 18:33:20 +0000"  >jukka&amp;#39;s patch:&lt;br/&gt;
&amp;gt; Any problems with this approach that I haven&amp;#39;t noticed? I&amp;#39;ve been quite happy using a class &lt;br/&gt;
&amp;gt; like this in my Spring-based projects, so unless anyone objects I&amp;#39;ll go ahead and commit it &lt;br/&gt;
&amp;gt; so others can use it too. &lt;br/&gt;
&lt;br/&gt;
+1 &lt;br/&gt;
&lt;br/&gt;
i think that TransientRepository is a very useful alternative for certain use-cases.</comment>
                    <comment id="12359868" author="jukkaz" created="Fri, 9 Dec 2005 18:53:31 +0000"  >Committed the proposed TransientRepository class in revision 355430 with the following changes:&lt;br/&gt;
* Added a simple TransientRepository.RepositoryFactory interface to allow greater control over the repository initialization process&lt;br/&gt;
* Added a two utility constructors&lt;br/&gt;
* Added an initial test case for the TransientRepository class (more complete unit testing would require a separate test repository or setting up mock RepositoryImpl instances)&lt;br/&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="32425">JCR-120</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12317518">JCR-233</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12317650">JCR-243</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12321191" name="TransientRepository.patch" size="8794" author="jukkaz" created="Wed, 7 Dec 2005 08:38:57 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 6 Dec 2005 19:16:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142050</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191080</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>