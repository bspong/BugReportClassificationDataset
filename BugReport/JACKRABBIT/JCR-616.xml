<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 06:00:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-616/JCR-616.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-616] Completeness/Freshness of NamespaceRegistry and NodeTypeRegistry</title>
                <link>https://issues.apache.org/jira/browse/JCR-616</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>We need to define the requirements on completeness and freshness of RepositoryService.getRegisteredNamespaces().&lt;br/&gt;
&lt;br/&gt;
Right now the optimistic assumption seems to be that an SPI provider is able to report all namespaces that can occur in a repository beforehand. Even if it can do that (and I know of potential targets for SPI that simply can&amp;#39;t), this seems to be quite a waste of time if these namespace prefixes aren&amp;#39;t actually used later on.&lt;br/&gt;
&lt;br/&gt;
Furthermore, in SPI namespace prefixes aren&amp;#39;t really relevant, except to enable the transient layer to return &amp;quot;meaningful&amp;quot; prefixes instead of automatically generated ones.&lt;br/&gt;
&lt;br/&gt;
Therefore my propoal would be to:&lt;br/&gt;
&lt;br/&gt;
1) Clarify that the Map returned from getRegisteredNamespaces() isn&amp;#39;t required to be complete,&lt;br/&gt;
&lt;br/&gt;
2) Enhance JCR2SPI to auto-generate prefixes when it encounters namespaces not in the registry.&lt;br/&gt;
&lt;br/&gt;
I expect this to also affect RepositoryService.(un)registerNamespace(...), but let&amp;#39;s discuss the underlying issue first...&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12354659">JCR-616</key>
            <summary>Completeness/Freshness of NamespaceRegistry and NodeTypeRegistry</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="anchela">angela</assignee>
                                <reporter username="reschke">Julian Reschke</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Nov 2006 09:19:04 +0000</created>
                <updated>Wed, 5 Mar 2008 14:35:22 +0000</updated>
                    <resolved>Wed, 11 Jul 2007 09:48:53 +0100</resolved>
                                                            <component>jackrabbit-spi</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12446876" author="reschke" created="Fri, 3 Nov 2006 09:20:41 +0000"  >#&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-482&quot; title=&quot;DocViewSaxEventGenerator may generate non-NS-wellformed XML&quot;&gt;&lt;strike&gt;JCR-482&lt;/strike&gt;&lt;/a&gt; is about the XML export assuming that the set of namespace prefixes is known when starting an XML export; in fact it can change while the export is executed.&lt;br/&gt;
</comment>
                    <comment id="12446882" author="anchela" created="Fri, 3 Nov 2006 09:32:08 +0000"  >RepositoryConfig.getRegisteredNamespaces()?  there is not RepositoryConfig in the SPI and the one contained in&lt;br/&gt;
jcr2spi doesn&amp;#39;t have the mentioned method.&lt;br/&gt;
&lt;br/&gt;
you probably mean RepositoryService, don&amp;#39;  you?</comment>
                    <comment id="12446885" author="reschke" created="Fri, 3 Nov 2006 09:36:38 +0000"  >fix typo (RepositoryService vs RepositoryConfig)</comment>
                    <comment id="12446896" author="mreutegg" created="Fri, 3 Nov 2006 10:17:05 +0000"  >Namespace prefixes cannot be just generated, because there is a notion of a repository wide namespace registry with a somewhat stable mapping between namespace URI and prefix. Initially a JCR session has to use that mapping unless the client decides to re-map the namespace locally in its session.</comment>
                    <comment id="12446913" author="jukkaz" created="Fri, 3 Nov 2006 11:07:28 +0000"  >I think that instead of (or before) auto-generating a prefix for an unknown namespace the jcr2spi should ask the backend for a prefix update.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a few different ways I can imagine we could achieve this, arranged by network-efficiency:&lt;br/&gt;
&lt;br/&gt;
1) Allow the SPI to return the prefix as an optional part of a QName when using a namespace that the client has not yet seen&lt;br/&gt;
2) Make the client call RepositoryService.getRegisteredNamespaces(SessionInfo) with an added namespace argument so the backend can decide whether to return the entire registry or just a subset update containing the requested prefix&lt;br/&gt;
3) Add a RepositoryService.getNamespacePrefix(SessionInto, String) method for the client to explicitly request the missing prefix&lt;br/&gt;
4) Make the client call RepositoryService.getRegisteredNamespaces(SessionInfo) to refresh the local copy of the registry&lt;br/&gt;
</comment>
                    <comment id="12446916" author="reschke" created="Fri, 3 Nov 2006 11:32:57 +0000"  >I like 1) alot (in fact I was going to suggest something like this myself...), but 2 and 3 would work well for me as well.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d really like to avoid 4).&lt;br/&gt;
</comment>
                    <comment id="12446926" author="mreutegg" created="Fri, 3 Nov 2006 12:17:02 +0000"  >1) Allow the SPI to return the prefix as an optional part of a QName when using a namespace that the client has not yet seen&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not sure I understand this correctly, does that mean the QName class should provide a getPrefix() which may or may not returns a prefix?&lt;br/&gt;
&lt;br/&gt;
I would rather prefer 4) and say that this method must return at least the mapping of namespace uri to prefix mapping for QNames that have been used through this instance of RepositoryService since it was created. The jcr2spi would then just refresh it&amp;#39;s namespace registry when it encounters an unknown namespace uri.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to avoid adding methods to the RepositoryService which overlap functionality that is already there ;)</comment>
                    <comment id="12446931" author="reschke" created="Fri, 3 Nov 2006 12:33:53 +0000"  >One problem with approach 4) is that in some backend systems, users can set arbitrary custom properties. That is, there is no namespace registry at all, and the set of namespaces used by properties can be really large. I think an SPI design that requires the remote server to return all of these mappings -- even if they may be not be used -- would be a bad idea. &lt;br/&gt;
</comment>
                    <comment id="12446945" author="mreutegg" created="Fri, 3 Nov 2006 13:07:06 +0000"  >I would require that only those mappings must be available, that went through the RepositoryService. Not all, just the ones that are required to resolve QName and Path instances that were retrieved through the RepositoryService. The remote server could still have thousands of namespaces that are not known to the SPI because the SPI client never read QNames with such a namespace.&lt;br/&gt;
&lt;br/&gt;
me:&lt;br/&gt;
&amp;gt; must return *at least* the mapping of namespace uri to prefix mapping for QNames that have been&lt;br/&gt;
&amp;gt; used through this instance of RepositoryService since it was created.</comment>
                    <comment id="12446946" author="anchela" created="Fri, 3 Nov 2006 13:07:07 +0000"  >&amp;gt; 1) Clarify that the Map returned from getRegisteredNamespaces() isn&amp;#39;t required to &lt;br/&gt;
&amp;gt; be complete, &lt;br/&gt;
&lt;br/&gt;
i&amp;#39;m not totally happy with this. getRegisteredNamespaces should return the complete list&lt;br/&gt;
available at the time.&lt;br/&gt;
&lt;br/&gt;
but: as listed in TODO.txt issue 11), we didn&amp;#39;t define up to now, how a client gets informed or informes itself about namespace modifications.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; 2) Enhance JCR2SPI to auto-generate prefixes when it encounters namespaces &lt;br/&gt;
&amp;gt; not in the registry. &lt;br/&gt;
&lt;br/&gt;
hm... why shoud the jcr2spi autogenerate prefixes? it must assert, that a given namespace is part of the namespace registry and throw if it isn&amp;#39;t. so, we get back to the basic issue, how we define the update of the NamespaceRegistry (defined by jsr170) over the SPI.&lt;br/&gt;
&lt;br/&gt;
btw: the same applies for the nodetypes.&lt;br/&gt;
&lt;br/&gt;
regards&lt;br/&gt;
angela</comment>
                    <comment id="12449676" author="reschke" created="Tue, 14 Nov 2006 14:31:38 +0000"  >OK.&lt;br/&gt;
&lt;br/&gt;
I have a prototype running which at least fixes the problem for me.&lt;br/&gt;
&lt;br/&gt;
Changes: &lt;br/&gt;
&lt;br/&gt;
1) NamespaceStorage: add method &amp;quot;getRegisteredNamespaces()&amp;quot;,&lt;br/&gt;
&lt;br/&gt;
2) add that to WorkspaceManager,&lt;br/&gt;
&lt;br/&gt;
3) use it in NamespaceRegistryImpl to get a new map when the local one is incomplete.&lt;br/&gt;
&lt;br/&gt;
(What&amp;#39;s currently missing in NamespaceRegistryImpl is a way to add the newly retrieved mapping to the local map, so the refresh logic only needs to be applied once per new entry).&lt;br/&gt;
&lt;br/&gt;
If people think I&amp;#39;m on the right track with this, I will complete the fix and submit a patch.&lt;br/&gt;
&lt;br/&gt;
The optimizations we discussed can then be discussed separately.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12449689" author="reschke" created="Tue, 14 Nov 2006 15:33:25 +0000"  >Proposed patch as discussed in previous comment.&lt;br/&gt;
</comment>
                    <comment id="12451306" author="anchela" created="Mon, 20 Nov 2006 13:53:59 +0000"  >i committed the patch with some modifications as a short term solution.&lt;br/&gt;
&lt;br/&gt;
form my point of view, the patch addresses the problem only partially:&lt;br/&gt;
before throwing NamespaceException upon getPrefix and getURI the current solution checks if the &lt;br/&gt;
NamespaceRegistry is really up to date.&lt;br/&gt;
&lt;br/&gt;
however:&lt;br/&gt;
&lt;br/&gt;
- NamespaceRegistry.getURIs and NamespaceRegistry.getPrefixes will not return all prefixes/uris&lt;br/&gt;
&amp;nbsp;&amp;nbsp;registered on the server, unless getPrefix or getURI has been called.&lt;br/&gt;
- reregistering of a existing URI with a new prefix might not be detected&lt;br/&gt;
- unregistering of an existing namespace will never result in an update of other NamespacRegistries&lt;br/&gt;
&amp;nbsp;&amp;nbsp;but cause failures later on, when the API user relies on the NamespaceRegistry, which is outdated.&lt;br/&gt;
&lt;br/&gt;
i&amp;#39;d say, that we need to come up with some notification approach (maybe related to the CacheBehaviour&lt;br/&gt;
recently introduced) that  addresses the problem. for the time being, reloading the mappings defined on the server might be an acceptable workaround.</comment>
                    <comment id="12451307" author="anchela" created="Mon, 20 Nov 2006 13:55:47 +0000"  >adjusting subject. The same applies for the NodeTypeRegistry.</comment>
                    <comment id="12509516" author="jukkaz" created="Mon, 2 Jul 2007 09:41:52 +0100"  >JCR 2.0 will most likely declare the prefix mappings of a session stable (i.e. changes in a session will not invalidate the prefix mappings in another session), so the cache invalidation issue for namespaces may become a non-issue.</comment>
                    <comment id="12511694" author="anchela" created="Wed, 11 Jul 2007 09:48:53 +0100"  >based on jukkas comment i resolve this issue fixed. i will add a note to the Limitations.txt explaining the&lt;br/&gt;
known issue.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12346168">JCR-482</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12344972" name="diffs.txt" size="5588" author="reschke" created="Tue, 14 Nov 2006 15:33:25 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 3 Nov 2006 09:32:08 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142278</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192407</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>