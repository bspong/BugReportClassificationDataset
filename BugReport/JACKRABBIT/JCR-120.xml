<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:35:13 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-120/JCR-120.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-120] Jackrabbit fails to shutdown properly when tomcat is shutting down</title>
                <link>https://issues.apache.org/jira/browse/JCR-120</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>This is the same issue already discudded in &lt;a href=&quot;http://issues.apache.org/jira/browse/JCR-57&quot;&gt;http://issues.apache.org/jira/browse/JCR-57&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The problem only occurs when Jackrabbit is deployed in the WEB-INF/lib directory of a web application in Tomcat.&lt;br/&gt;
During dispose() jackrabbit tries to instantiate a few objects from classes which were not previously loaded by the webapp classloader, but tomcat doesn&amp;#39;t allow to load new classes while shutting down.&lt;br/&gt;
This causes the repository not to be closed properly, and an annoying set of stack traces are written to the log.&lt;br/&gt;
&lt;br/&gt;
It seems that there are only two classes which are loaded in this situation: org.apache.jackrabbit.core.observation.EventListenerIteratorImpl and org.apache.jackrabbit.core.fs.FileSystemPathUtil. This is the log from the server standard output:&lt;br/&gt;
&lt;br/&gt;
org.apache.catalina.loader.WebappClassLoader loadClass&lt;br/&gt;
INFO: Illegal access: this web application instance has been stopped already.  Could not load org.apache.jackrabbit.core.observation.EventListenerIteratorImpl.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.&lt;br/&gt;
[repeaded more times at each shutdown]&lt;br/&gt;
&lt;br/&gt;
org.apache.catalina.loader.WebappClassLoader loadClass&lt;br/&gt;
INFO: Illegal access: this web application instance has been stopped already.  Could not load org.apache.jackrabbit.core.fs.FileSystemPathUtil.  The eventual following stack trace is caused by an error thrown for debugging purposes as well as to attempt to terminate the thread which caused the illegal access, and has no functional impact.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
A quick fix is to force preloading of classes normally needed only during shutdown, simply adding a static block to caller classes. The following patch makes tomcat happy, causing classes to be loaded by the webapp classloaded when still allowed  (probably not really elegant, but perfectly working...)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Index: org/apache/jackrabbit/core/fs/FileSystemResource.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- src\java\org\apache\jackrabbit\core\fs\FileSystemResource.java	(revision 169503)&lt;br/&gt;
+++ src\java\org\apache\jackrabbit\core\fs\FileSystemResource.java	(working copy)&lt;br/&gt;
@@ -30,6 +30,11 @@&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;protected final String path;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+    static {&lt;br/&gt;
+        // preload FileSystemPathUtil to prevent classloader issues during shutdown&lt;br/&gt;
+        FileSystemPathUtil.class.hashCode();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Creates a new &amp;lt;code&amp;gt;FileSystemResource&amp;lt;/code&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
Index: org/apache/jackrabbit/core/observation/ObservationManagerImpl.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- src\java\org\apache\jackrabbit\core\observation\ObservationManagerImpl.java	(revision 169503)&lt;br/&gt;
+++ src\java\org\apache\jackrabbit\core\observation\ObservationManagerImpl.java	(working copy)&lt;br/&gt;
@@ -54,6 +54,11 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final ObservationManagerFactory obsMgrFactory;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+    static {&lt;br/&gt;
+        // preload EventListenerIteratorImpl to prevent classloader issues during shutdown&lt;br/&gt;
+        EventListenerIteratorImpl.class.hashCode();&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Creates an &amp;lt;code&amp;gt;ObservationManager&amp;lt;/code&amp;gt; instance.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="32425">JCR-120</key>
            <summary>Jackrabbit fails to shutdown properly when tomcat is shutting down</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="fgiust">fabrizio giustina</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 May 2005 05:59:48 +0100</created>
                <updated>Wed, 8 Mar 2006 01:20:25 +0000</updated>
                    <resolved>Sat, 8 Oct 2005 00:10:54 +0100</resolved>
                                            <fixVersion>1.0</fixVersion>
                                <component>jackrabbit-core</component>
                <component>observation</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="64907" author="fgiust" created="Wed, 11 May 2005 06:01:10 +0100"  >stack from error (1)</comment>
                    <comment id="64908" author="fgiust" created="Wed, 11 May 2005 06:01:35 +0100"  >stack from error (2)</comment>
                    <comment id="64909" author="fgiust" created="Wed, 11 May 2005 06:02:00 +0100"  >svn diff</comment>
                    <comment id="65916" author="jukkaz" created="Sat, 21 May 2005 18:01:28 +0100"  >As discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-57&quot; title=&quot;WorkspaceImpl.dispose() might cause ClassNotFoundException&quot;&gt;&lt;strike&gt;JCR-57&lt;/strike&gt;&lt;/a&gt;, this is a rather tricky question where the correct solution is not obvious. I&amp;#39;m a bit worried about the proposed solution as it will break as soon as the dispose() code gets refactored to use different classes.&lt;br/&gt;
&lt;br/&gt;
What would be the best solution to this problem? I tried looking for a more generic solution, but couldn&amp;#39;t find any.</comment>
                    <comment id="66761" author="jukkaz" created="Thu, 2 Jun 2005 04:24:30 +0100"  >Fixed as suggested in revision 179394.&lt;br/&gt;
&lt;br/&gt;
Please reopen this issue if a better workaround is found.</comment>
                    <comment id="12331086" author="jukkaz" created="Mon, 3 Oct 2005 02:43:27 +0100"  >Reopening this issue as it seems that the fix did get broken. :-( See &lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.jackrabbit.devel/3745&quot;&gt;http://article.gmane.org/gmane.comp.apache.jackrabbit.devel/3745&lt;/a&gt; for Fabrizio&amp;#39;s message that details the breakage.&lt;br/&gt;
&lt;br/&gt;
I propose to remove the entire addShutdownHook() call from the RepositoryImpl class. The shutdown hook could possibly be set up by the BindableRepositoryFactory class and other similar container tools, but normal client code that instantiates a RepositoryImpl object should be required to also explicitly call RepositoryImpl.shutdown() to properly close the repository.</comment>
                    <comment id="12331087" author="jukkaz" created="Mon, 3 Oct 2005 02:45:28 +0100"  >Scheduled for 1.0 and changed from an observation improvement request to a core bug report.</comment>
                    <comment id="12331149" author="stefan@jira" created="Mon, 3 Oct 2005 20:15:28 +0100"  >&amp;gt; I propose to remove the entire addShutdownHook() call from the RepositoryImpl class&lt;br/&gt;
&lt;br/&gt;
+1</comment>
                    <comment id="12331152" author="fmeschbe" created="Mon, 3 Oct 2005 20:33:51 +0100"  >&amp;nbsp;&amp;gt; I propose to remove the entire addShutdownHook() call from the RepositoryImpl class&lt;br/&gt;
&lt;br/&gt;
+1</comment>
                    <comment id="12331431" author="edgarpoce" created="Thu, 6 Oct 2005 05:22:41 +0100"  >&amp;nbsp;&amp;nbsp;&amp;gt; I propose to remove the entire addShutdownHook() call from the RepositoryImpl class &lt;br/&gt;
&lt;br/&gt;
+1. </comment>
                    <comment id="12331596" author="jukkaz" created="Sat, 8 Oct 2005 00:10:53 +0100"  >Removed the shutdown hook in revision 307128. This change makes it the responsibility of the client application that instantiates the RepositoryImpl object to also invoke the shutdown method. However I did place a similar shutdown hook into the BindableRepository class in order to minimize the effect on JNDI environments where there is no easy way to explicitly invoke the shutdown method.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m closing this issue with this change. See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-245&quot; title=&quot;Automatic repository shutdown&quot;&gt;&lt;strike&gt;JCR-245&lt;/strike&gt;&lt;/a&gt; and the related issues for further discussion on how to best manage repository shutdown.&lt;br/&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12317665">JCR-245</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="19999" name="JCR-120.diff" size="1281" author="fgiust" created="Wed, 11 May 2005 06:02:00 +0100" />
                    <attachment id="19997" name="shutdown1.png" size="11945" author="fgiust" created="Wed, 11 May 2005 06:01:09 +0100" />
                    <attachment id="19998" name="shutdown2.png" size="13907" author="fgiust" created="Wed, 11 May 2005 06:01:35 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 21 May 2005 17:01:28 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>141937</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191062</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>