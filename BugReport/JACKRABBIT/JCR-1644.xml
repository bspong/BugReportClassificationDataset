<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:59:55 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1644/JCR-1644.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1644] make NamespaceContext#getPrefix(java.lang.String) iterative instead of recursive</title>
                <link>https://issues.apache.org/jira/browse/JCR-1644</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Currently the method org.apache.jackrabbit.core.xml.NamespaceContext#getPrefix(java.lang.String) uses recursion. For very large XML files (50 MB Magnolia website exports) this causes a stack overflow. The method can easily be rewritten using iteration.</description>
                <environment></environment>
            <key id="12397757">JCR-1644</key>
            <summary>make NamespaceContext#getPrefix(java.lang.String) iterative instead of recursive</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="marschall">Philippe Marschall</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Jun 2008 12:08:46 +0100</created>
                <updated>Tue, 6 Jan 2009 15:57:19 +0000</updated>
                    <resolved>Sun, 27 Jul 2008 17:04:25 +0100</resolved>
                            <version>core 1.4.5</version>
                                <fixVersion>core 1.4.6</fixVersion>
                                <component>jackrabbit-core</component>
                <component>xml</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12603364" author="marschall" created="Sun, 8 Jun 2008 12:09:43 +0100"  >patch to rewrite method</comment>
                    <comment id="12603365" author="marschall" created="Sun, 8 Jun 2008 12:10:40 +0100"  >patched class</comment>
                    <comment id="12603366" author="marschall" created="Sun, 8 Jun 2008 12:11:24 +0100"  >A patch and the new class are attached.</comment>
                    <comment id="12605163" author="fgiust" created="Sun, 15 Jun 2008 21:24:23 +0100"  >I got the StackOverflowError too while trying to import large xml files with jackrabbit 1.4.5:&lt;br/&gt;
&lt;br/&gt;
java.lang.StackOverflowError&lt;br/&gt;
	at java.util.HashMap.get(HashMap.java:305)&lt;br/&gt;
	at org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:93)&lt;br/&gt;
	at org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:97)&lt;br/&gt;
	at org.apache.jackrabbit.core.xml.NamespaceContext.getURI(NamespaceContext.java:97)&lt;br/&gt;
	[...]&lt;br/&gt;
&lt;br/&gt;
looks pretty much a bug than an improvement...</comment>
                    <comment id="12617250" author="fgiust" created="Sun, 27 Jul 2008 08:47:21 +0100"  >In order to successfully import s large xml file I had to patch bot getPrefix() and getURI() using iteration as suggested by Philippe, no other way to make jackrabbit handle it...&lt;br/&gt;
&lt;br/&gt;
Can I suggest to change this improvement to a bug &amp;quot;Unable to import large xml files&amp;quot;?</comment>
                    <comment id="12617292" author="fgiust" created="Sun, 27 Jul 2008 14:52:34 +0100"  >new patch, covering both getUri() and getPrefix().&lt;br/&gt;
&lt;br/&gt;
Note: I tried creating a testcase to reproduce the issue, but looks like there that the number of recursions allowed can be very different due to the environment or other factor. On a testcase I had to create an xml system with with about 5000 nested nodes, while on a real case I saw it crashing after few hundreds of nested nodes.&lt;br/&gt;
</comment>
                    <comment id="12617300" author="jukkaz" created="Sun, 27 Jul 2008 16:06:52 +0100"  >What on earth are you doing with 5000 levels of nested elements? Even a few hundred nestings with two elements per every ten or so levels creates a document that won&amp;#39;t fit any normal hard drives!&lt;br/&gt;
&lt;br/&gt;
Since there&amp;#39;s already a patch and apparently an existing use case I guess I should apply the fix, but I would certainly not recommend dealing with so deep document structures. I just don&amp;#39;t see how or where such a structure would make sense.</comment>
                    <comment id="12617304" author="jukkaz" created="Sun, 27 Jul 2008 17:04:25 +0100"  >Patch applied in revision 680135.</comment>
                    <comment id="12617715" author="fgiust" created="Tue, 29 Jul 2008 07:05:36 +0100"  >thanks Jukka&lt;br/&gt;
&lt;br/&gt;
&amp;gt; What on earth are you doing with 5000 levels of nested elements?&lt;br/&gt;
&lt;br/&gt;
well, as said that is what I got when trying to create a simple testcase in order to reproduce the problem, but in a real case I can successfully reproduce it with a 100MB system view file with only (just checked) approximatively 30-40 levels of nesting... probably the problem is triggered by some other factors I couldn&amp;#39;t reproduce in a test&lt;br/&gt;
</comment>
                    <comment id="12617742" author="jukkaz" created="Tue, 29 Jul 2008 09:45:07 +0100"  >Are you sure the problem you were seeing was a stack overflow and not an out of memory condition? Currently Jackrabbit keeps the entire import in memory (in a format that&amp;#39;s even more memory-intensive than DOM) before persisting the changes.</comment>
                    <comment id="12617871" author="marschall" created="Tue, 29 Jul 2008 18:37:02 +0100"  >I am absolutely positive that it was a stack overflow:&lt;br/&gt;
- the exception was java.lang.StackOverflowError&lt;br/&gt;
- there was a stack trace in the log that was more than a dozen screens recursively in org.apache.jackrabbit.core.xml.NamespaceContext.getURI</comment>
                    <comment id="12618259" author="fgiust" created="Wed, 30 Jul 2008 09:56:39 +0100"  >I also can confirm it definitively was a StackOverflow, and that with the patch (without changing any other setting) I am able to successfully import the file.&lt;br/&gt;
</comment>
                    <comment id="12618366" author="jukkaz" created="Wed, 30 Jul 2008 15:43:39 +0100"  >The stack overflows on NamespaceContext should really only be caused by excessively nested XML elements (at least hundredths, probably thousands, of levels of nesting). If this happens on documents with less than 100 levels of nesting, then I suspect that there&amp;#39;s something else wrong with the code; like the NamespaceContext stack not being correctly rewound.&lt;br/&gt;
&lt;br/&gt;
I tried reviewing the related code, but couldn&amp;#39;t find any obvious errors. Could you perhaps send me a troublesome XML document or come up with a cleaned up example that illustrates the problem? It&amp;#39;s not high priority as it seems like the issue is already solved by the patch, but I&amp;#39;d rather verify that we actually fixed the root cause instead of just working around it.</comment>
                    <comment id="12618916" author="gjoseph" created="Fri, 1 Aug 2008 02:41:42 +0100"  >Any chance we could get the patch in the 1.4 branch ?</comment>
                    <comment id="12619282" author="marschall" created="Sat, 2 Aug 2008 22:11:07 +0100"  >I attached a file that should produce a large stack in NamespaceContext.getUR. It might or might not cause a stack overflow on your system.</comment>
                    <comment id="12619465" author="jukkaz" created="Mon, 4 Aug 2008 11:24:40 +0100"  >Based on demand I merged this to the 1.4 branch in revision 682313. The fix will be included in jackrabbit-core 1.4.6.&lt;br/&gt;
&lt;br/&gt;
Thanks for the example XML file! I tried importing it (with jackrabbit-core 1.4.1), but the tallest NamespaceContext stack I saw was just 13 levels deep, i.e. nowhere near to cause a stack overflow unless your application already is way too close to the stack limit.</comment>
                    <comment id="12619473" author="gjoseph" created="Mon, 4 Aug 2008 11:46:09 +0100"  >Thanks for the merge ! :)</comment>
                </comments>
                    <attachments>
                    <attachment id="12386977" name="JCR-1644-patch.diff" size="1955" author="fgiust" created="Sun, 27 Jul 2008 14:52:34 +0100" />
                    <attachment id="12383638" name="NamespaceContext.java" size="4055" author="marschall" created="Sun, 8 Jun 2008 12:10:40 +0100" />
                    <attachment id="12383636" name="NamespaceContext.java.patch" size="1061" author="marschall" created="Sun, 8 Jun 2008 12:09:43 +0100" />
                    <attachment id="12387408" name="website.untitled4.xml.tar.bz2" size="9244568" author="marschall" created="Sat, 2 Aug 2008 22:11:07 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 15 Jun 2008 20:24:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78474</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>252641</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>