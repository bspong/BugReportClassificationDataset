<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:42:55 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3005/JCR-3005.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3005] Make it possible to get multiple nodes in one call via davex</title>
                <link>https://issues.apache.org/jira/browse/JCR-3005</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>I&amp;#39;m working on this currently</description>
                <environment></environment>
            <key id="12511599">JCR-3005</key>
            <summary>Make it possible to get multiple nodes in one call via davex</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="chregu">Christian Stocker</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Jun 2011 06:08:20 +0100</created>
                <updated>Thu, 19 Jan 2012 13:47:12 +0000</updated>
                    <resolved>Tue, 20 Dec 2011 16:54:51 +0000</resolved>
                                            <fixVersion>2.3.6</fixVersion>
                                <component>jackrabbit-jcr-server</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13055336" author="chregu" created="Mon, 27 Jun 2011 06:40:28 +0100"  >Attached is a patch, which basically implements this. It&amp;#39;s a Proof of Concept and far from perfect. But I wanted to get some feedback before I invest more time&lt;br/&gt;
&lt;br/&gt;
It is modelled the same way as COPY, CLONE and DIFF in JcrRemotingServlet.java&lt;br/&gt;
&lt;br/&gt;
The basic idea is taken from &lt;a href=&quot;http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API&quot;&gt;http://wiki.apache.org/couchdb/HTTP_Bulk_Document_API&lt;/a&gt; but I choose not to use JSON for submitting the data for consistency and code reuseability&lt;br/&gt;
&lt;br/&gt;
You can call it with&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;curl -X POST -d &amp;#39;:get=/node1&amp;amp;:get=/node2&amp;#39; &lt;a href=&quot;http://localhost:8080/server/workspace/jcr:root/node2.0.json&quot;&gt;http://localhost:8080/server/workspace/jcr:root/node2.0.json&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
and it returns an array of all the found nodes as a JSON array&lt;br/&gt;
&lt;br/&gt;
Questions:&lt;br/&gt;
&lt;br/&gt;
* Should we return the amount of found nodes as well. Something like {&amp;quot;total_nodes&amp;quot;: 3, &amp;quot;nodes&amp;quot;: [node1,node2,node3]}?&lt;br/&gt;
* Now, if the node in the URL matches on of the nodes in the body, it is only returned once, if the same node is mentioned more than once in the body it is returned more than once. What should be the approach here? Should we avoid duplicate nodes or just live with it?&lt;br/&gt;
* What should happen, if there&amp;#39;s a node not found. I prefer the &amp;quot;just ignore it&amp;quot; way&lt;br/&gt;
* What should happen, if there&amp;#39;s any other error? Report that or just return what can be returend?&lt;br/&gt;
* I added the path of the node as &amp;quot;jcr:path&amp;quot; to the data. Is this the right approach or does anyone have a better idea?</comment>
                    <comment id="13055424" author="lsmith77" created="Mon, 27 Jun 2011 10:35:59 +0100"  >* I think it would be a nice touch and probably fairly cheap to add some metadata to the result, &amp;quot;total_nodes&amp;quot; would be one obvious one. not sure if it makes sense to add other metadata like duplicates, missing or stuff like that, at any rate it would be good to prepare the structure returned for this so that we can add anything else that makes sense later without BC breaks&lt;br/&gt;
* I think it should only be once, actually I think the nodes should be a hash map with path: node pairs&lt;br/&gt;
* Missing nodes should just be ignored (see also &lt;a href=&quot;http://java.net/jira/browse/JSR_333-38)&quot;&gt;http://java.net/jira/browse/JSR_333-38)&lt;/a&gt;&lt;br/&gt;
* If any nodes can be found, imho they should be returned, errors should if at all be returned as part of the metadata (see above)&lt;br/&gt;
* Like I said, I would prefer a hash map including the path to identify the node in the nodes list</comment>
                    <comment id="13055661" author="chregu" created="Mon, 27 Jun 2011 18:01:05 +0100"  >I agree with Lukas, something like&lt;br/&gt;
{&amp;quot;nodes&amp;quot;:{&amp;quot;/node1&amp;quot;:{&amp;quot;value1&amp;quot;:&amp;quot;data1&amp;quot;},&amp;quot;/node2&amp;quot;:{&amp;quot;value1&amp;quot;:&amp;quot;data2&amp;quot;}}}&lt;br/&gt;
&lt;br/&gt;
shout allow for forward compatibility and make it easy for clients to parse, we could leave out the jcr:path value then.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll try to adjust to patch soon&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13056396" author="chregu" created="Tue, 28 Jun 2011 09:51:53 +0100"  >Here&amp;#39;s the new patch, which returns the data as discussed in the comments&lt;br/&gt;
Something like: {&amp;quot;nodes&amp;quot;:{&amp;quot;/article&amp;quot;:{data}, &amp;quot;/article2&amp;quot;:{data}}}</comment>
                    <comment id="13121792" author="jukkaz" created="Thu, 6 Oct 2011 09:21:22 +0100"  >Looks good, thanks! I committed the patch as-is in revision 1179531 and changed it slightly in revision 1179532 to allow exceptions from the getMultiple method instead of just logging them (BTW, we use SLF4J for logging).&lt;br/&gt;
&lt;br/&gt;
Some comments on the implementation:&lt;br/&gt;
&lt;br/&gt;
* Wouldn&amp;#39;t it make more sense for this to be a GET request rather than a POST? Something like: curl &amp;#39;&lt;a href=&quot;http://localhost:8080/server/workspace/jcr:root/node2.0.json?:get=/node1&amp;:get=/node2&amp;#39;&quot;&gt;http://localhost:8080/server/workspace/jcr:root/node2.0.json?:get=/node1&amp;amp;:get=/node2&amp;amp;#39;&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
* Instead of implementing parts of the JSON serialization in the getSimple() method, it would be cleaner to add a method like JsonWriter.write(Node[] nodes, int depth)&lt;br/&gt;
&lt;br/&gt;
* The return statement inside the conditional in doPost() increases the complexity of the already tricky flow of that method. Can we refactor the code slightly to make the flow more obvious?&lt;br/&gt;
</comment>
                    <comment id="13121793" author="chregu" created="Thu, 6 Oct 2011 09:26:06 +0100"  >- GET instead of POST. I decided against that, since the URL can grow very large if you ask for many nodes&lt;br/&gt;
&lt;br/&gt;
The other parts I can look into, but I&amp;#39;m not the java expert, so if anyone else feels inclined to do that, feel free. I&amp;#39;m fine with everything.</comment>
                    <comment id="13121795" author="anchela" created="Thu, 6 Oct 2011 09:37:41 +0100"  >to me the patch looks awkward.&lt;br/&gt;
the response should somehow be in relation to the requested resource... to return the json representation of other possible unrelated resources looks odd to me.&lt;br/&gt;
&lt;br/&gt;
why don&amp;#39;t you handle that with a specific REPORT request to the workspace resource?&lt;br/&gt;
that&amp;#39; would make more sense to me.&lt;br/&gt;
&lt;br/&gt;
angela</comment>
                    <comment id="13121797" author="anchela" created="Thu, 6 Oct 2011 09:40:43 +0100"  >jukka, i am a little bit surprised that you commit a patch before having your comments/questions sorted out.&lt;br/&gt;
i would opt for reverting that until we reach some sort of consensus about this issue.</comment>
                    <comment id="13121804" author="jukkaz" created="Thu, 6 Oct 2011 09:55:17 +0100"  >&amp;gt; commit a patch before having your comments/questions sorted out&lt;br/&gt;
&lt;br/&gt;
It&amp;#39;s easier to work on incrementally improving this when the code is already in svn. This way we can better isolate individual improvements to separate patches/commits instead of working just on a one big patch.</comment>
                    <comment id="13121805" author="jukkaz" created="Thu, 6 Oct 2011 10:02:35 +0100"  >&amp;gt; Instead of implementing parts of the JSON serialization in the getSimple() method, it would be cleaner to add a method like JsonWriter.write(Node[] nodes, int depth) &lt;br/&gt;
&lt;br/&gt;
Done in revision 1179541.</comment>
                    <comment id="13121806" author="anchela" created="Thu, 6 Oct 2011 10:07:37 +0100"  >&amp;gt; It&amp;#39;s easier to work on incrementally improving this when the code is already in svn.&lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s true... but on the other hand i wouldn&amp;#39;t want to have strange features to be released&lt;br/&gt;
which we then have to stick with for compatibility reasons.&lt;br/&gt;
&lt;br/&gt;
can you please make sure that this feature is not released next week unless we found a consensus?&lt;br/&gt;
thanks.</comment>
                    <comment id="13121832" author="jukkaz" created="Thu, 6 Oct 2011 11:55:42 +0100"  >As a general rule I wouldn&amp;#39;t consider us committed to providing backwards compatibility on any feature that we haven&amp;#39;t documented (I&amp;#39;d count a relevant Jira issue marked as resolved in a specific release as the minimal level of documentation about a new feature). Anyway, I see your point and will make sure that this is either resolved in time for 2.3.1 or that the feature is disabled in the release until we have consensus about the exact implementation.&lt;br/&gt;
&lt;br/&gt;
In revision 1179564 I changed this feature to respond only to GET requests on a workspace resource. If such a request contains one or more :path parameters, then the JSON response containing information about all the identified nodes/subtrees is returned. For example:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$ curl &lt;a href=&quot;http://localhost:8080/server/default?:path=/node1&amp;:path=/node2&quot;&gt;http://localhost:8080/server/default?:path=/node1&amp;amp;:path=/node2&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&amp;quot;nodes&amp;quot;:{&amp;quot;/node1&amp;quot;:{...},&amp;quot;/node2&amp;quot;:{...}}}&lt;br/&gt;
&lt;br/&gt;
An optional :depth parameter can be used to override the configured default subtree depth to include. Note that the current code doesn&amp;#39;t support the configuration of default depth per node type, only the overall default depth is used.&lt;br/&gt;
&lt;br/&gt;
Notes:&lt;br/&gt;
&lt;br/&gt;
* I prefer GET over REPORT for this since GET requests are generally easier to handle by many clients and they are better understood by various intermediaries like web proxies or firewalls&lt;br/&gt;
&lt;br/&gt;
* I see the point of using POST instead of GET for a large request, but I&amp;#39;d rather handle that using a generic POST-to-GET conversion so we can support both GET and POST requests for this information.</comment>
                    <comment id="13121912" author="jukkaz" created="Thu, 6 Oct 2011 14:12:19 +0100"  >In revision 1179606 I restored support for POST requests accessing this same functionality. I looked at implementing a more generic POST-to-GET conversion, but that probably needs a bit more thought.&lt;br/&gt;
&lt;br/&gt;
I also added some javadoc documentation about this multi-read feature.&lt;br/&gt;
&lt;br/&gt;
I guess the only thing still needed is a test case. Anything else we should still change?</comment>
                    <comment id="13121953" author="anchela" created="Thu, 6 Oct 2011 14:44:05 +0100"  >what i meant was: the request target should be the workspace resource. simply retrieving the workspace name from the locator wasn&amp;#39;t my intention.&lt;br/&gt;
it still looks wrong to me that you request ANY dav resource and get back the json-serialization of some other resources.</comment>
                    <comment id="13121982" author="jukkaz" created="Thu, 6 Oct 2011 15:46:17 +0100"  >&amp;gt; simply retrieving the workspace name from the locator wasn&amp;#39;t my intention.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m just using the locator to check whether the request is targeting a workspace resource or not. Is there a better way to do that? The other alternative I considered was using instanceof WorkspaceResource, but that didn&amp;#39;t seem any cleaner. Ideally I think we should allow the resource itself to process the HTTP request, but that would require quite a bit of refactoring of the current codebase.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; request ANY dav resource and get back the json-serialization of some other resources.&lt;br/&gt;
&lt;br/&gt;
In the HTTP sense the resource is the one identified by the full URI (e.g. .../default?:path=/node1&amp;amp;path=/node2) instead of just the path part (.../default), so I don&amp;#39;t see a fundamental disconnect here. From the perspective of a clean URI space though it would of course be nicer if the multi-read case was better rooted to a single root resource.&lt;br/&gt;
&lt;br/&gt;
One way we could achieve that would be to introduce extra &amp;quot;:include&amp;quot; and &amp;quot;:exclude&amp;quot; patterns for the normal batch-read functionality. Such patterns direct which parts of the subtree rooted at the identified resources should be included in or excluded from the JSON response. For example:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$ curl &lt;a href=&quot;http://localhost:8080/server/default/jcr:root/path.json?:include=node1&amp;:include=node2&quot;&gt;http://localhost:8080/server/default/jcr:root/path.json?:include=node1&amp;amp;:include=node2&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{...,&amp;quot;node1&amp;quot;:{...},&amp;quot;node2&amp;quot;:{...}}&lt;br/&gt;
&lt;br/&gt;
or&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;$ curl &lt;a href=&quot;http://localhost:8080/server/default/jcr:root/.json?:include=path&amp;:exclude=path/node2&quot;&gt;http://localhost:8080/server/default/jcr:root/.json?:include=path&amp;amp;:exclude=path/node2&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{...,&amp;quot;path&amp;quot;:{&amp;quot;node1&amp;quot;:{...},&amp;quot;node3&amp;quot;:{...}}}</comment>
                    <comment id="13121991" author="anchela" created="Thu, 6 Oct 2011 16:03:54 +0100"  >&amp;gt; One way we could achieve that would be to introduce extra &amp;quot;:include&amp;quot; and &amp;quot;:exclude&amp;quot; patterns for the normal batch-read functionality. &lt;br/&gt;
&amp;gt; Such patterns direct which parts of the subtree rooted at the identified resources should be included in or excluded from the JSON response.&lt;br/&gt;
&lt;br/&gt;
that would make much more sense to me.</comment>
                    <comment id="13122671" author="jukkaz" created="Fri, 7 Oct 2011 10:52:50 +0100"  >OK, I&amp;#39;m working on a solution based on the proposed include/exclude patterns.</comment>
                    <comment id="13124972" author="jukkaz" created="Tue, 11 Oct 2011 13:24:58 +0100"  >In revision 1181746 I implemented initial support for such :include parameters, interpreted relative to the addressed node resource. The JSON output format is still the same as proposed above and the depth of included subtrees is set based on the addressed resource instead of the included nodes themselves. No :exclude support is included. A better alternative could be to treat the :include rules more like extensions to the specified depth and have the results be embedded inside the normal JSON tree, but that still requires extra work.&lt;br/&gt;
&lt;br/&gt;
Unscheduling from 2.3.1 to give us more time to come up with a solution that works for everyone. To reflect this unfinished state I added a -DJCR-3305=true feature flag that needs to be used to enable the current multi-read code. I also commented out the Javadoc documentation for now.</comment>
                    <comment id="13150855" author="lsmith77" created="Tue, 15 Nov 2011 22:44:28 +0000"  >how are things looking with this ticket? I tried briefly with a 2.3.2 dev build using &amp;quot;-DJCR-3305=true&amp;quot; and couldn&amp;#39;t get it to work. Should I try again?&lt;br/&gt;
This patch is the last one required to get PHPCR working with Jackrabbit.</comment>
                    <comment id="13155151" author="chregu" created="Tue, 22 Nov 2011 14:07:21 +0000"  >so, some testing:&lt;br/&gt;
&lt;br/&gt;
{code}&lt;br/&gt;
curl &lt;a href=&quot;http://localhost:8080/server/default/jcr:root/foo.0.json?:include=bar&quot;&gt;http://localhost:8080/server/default/jcr:root/foo.0.json?:include=bar&lt;/a&gt;&lt;br/&gt;
{code}&lt;br/&gt;
&lt;br/&gt;
works (but doesn&amp;#39;t return the /foo node),&lt;br/&gt;
&lt;br/&gt;
{code}&lt;br/&gt;
curl &lt;a href=&quot;http://localhost:8080/server/default/jcr:root/.0.json?:include=/foo/bar&quot;&gt;http://localhost:8080/server/default/jcr:root/.0.json?:include=/foo/bar&lt;/a&gt;&lt;br/&gt;
{code}&lt;br/&gt;
as well&lt;br/&gt;
&lt;br/&gt;
But I can&amp;#39;t get it to work with POST&lt;br/&gt;
{code}&lt;br/&gt;
curl -d :include=bar &lt;a href=&quot;http://localhost:8081/server/default/jcr:root/foo.0.json&quot;&gt;http://localhost:8081/server/default/jcr:root/foo.0.json&lt;/a&gt;&lt;br/&gt;
{code}&lt;br/&gt;
returns a&lt;br/&gt;
&lt;br/&gt;
{code}&lt;br/&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;&lt;br/&gt;
&amp;lt;D:error xmlns:D=&amp;quot;DAV:&amp;quot;&amp;gt;&lt;br/&gt;
&amp;lt;dcr:exception xmlns:dcr=&amp;quot;&lt;a href=&quot;http://www.day.com/jcr/webdav/1.0&quot;&gt;http://www.day.com/jcr/webdav/1.0&lt;/a&gt;&amp;quot;&amp;gt;&lt;br/&gt;
&amp;lt;dcr:class&amp;gt;org.apache.jackrabbit.spi.commons.conversion.IllegalNameException&amp;lt;/dcr:class&amp;gt;&lt;br/&gt;
&amp;lt;dcr:message&amp;gt;Prefix must not be empty&amp;lt;/dcr:message&amp;gt;&lt;br/&gt;
&amp;lt;/dcr:exception&amp;gt;&lt;br/&gt;
&amp;lt;/D:error&amp;gt;&lt;br/&gt;
{code}&lt;br/&gt;
&lt;br/&gt;
How is a POST request supposed to work?</comment>
                    <comment id="13163644" author="jukkaz" created="Tue, 6 Dec 2011 15:26:11 +0000"  >Sorry for the delay. I&amp;#39;ll try to look more into this over the next few days. Marking for 2.3.6 so we keep this on radar for the upcoming 2.4 release.</comment>
                    <comment id="13173292" author="jukkaz" created="Tue, 20 Dec 2011 16:39:45 +0000"  >Attached a patch for enabling POST access for this feature. The patch also drops the conditional feature flag as I think this is now good enough for use as a stable API.&lt;br/&gt;
&lt;br/&gt;
Note that only the paths explicitly mentioned in the :include parameters (relative to the target resource of the URL) are included in the response, the target resource itself is by default *not* included.&lt;br/&gt;
&lt;br/&gt;
Currently only normal paths are supported as :include parameters. In a future version, depending on applicable use cases, we can extend this with support for path wildcards and accompanying :exclude patterns.</comment>
                    <comment id="13173299" author="anchela" created="Tue, 20 Dec 2011 16:50:10 +0000"  >looks fine. thanks</comment>
                    <comment id="13173302" author="jukkaz" created="Tue, 20 Dec 2011 16:54:52 +0000"  >Thanks! Committed in revision 1221335.</comment>
                </comments>
                    <attachments>
                    <attachment id="12508097" name="0001-JCR-3005-Make-it-possible-to-get-multiple-nodes-in-o.patch" size="8449" author="jukkaz" created="Tue, 20 Dec 2011 16:39:45 +0000" />
                    <attachment id="12484411" name="getSessions.patch" size="4905" author="chregu" created="Tue, 28 Jun 2011 09:51:53 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 27 Jun 2011 09:35:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>36262</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280325</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>