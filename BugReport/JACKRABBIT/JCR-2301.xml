<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:37:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2301/JCR-2301.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2301] CND support in jackrabbit-jcr-commons</title>
                <link>https://issues.apache.org/jira/browse/JCR-2301</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>It would be nice if the CND parsing functionality in spi-commons could be made available in jcr-commons for use by JCR clients that shouldn&amp;#39;t have to know anything about the SPI.</description>
                <environment></environment>
            <key id="12435203">JCR-2301</key>
            <summary>CND support in jackrabbit-jcr-commons</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mduerig">Michael D&#252;rig</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 Sep 2009 13:07:17 +0100</created>
                <updated>Mon, 11 Jan 2010 14:18:29 +0000</updated>
                    <resolved>Mon, 14 Sep 2009 13:32:28 +0100</resolved>
                                            <fixVersion>2.0-alpha11</fixVersion>
                                <component>jackrabbit-jcr-commons</component>
                <component>jackrabbit-spi-commons</component>
                <component>nodetype</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12753059" author="mduerig" created="Wed, 9 Sep 2009 13:27:02 +0100"  >Initially the CND parser moved from core to spi-commons. See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1516&quot; title=&quot;Add Compact Namespace and Node Type Definition support to spi-commons&quot;&gt;&lt;strike&gt;JCR-1516&lt;/strike&gt;&lt;/a&gt;. &lt;br/&gt;
&lt;br/&gt;
The parser is useful for both JCR and SPI. So there will always be an additional dependency. Since SPI implementations almost always depend on jcr-commons anyway, moving the parser might be a good idea. &lt;br/&gt;
&lt;br/&gt;
However, the different representations of Names, Types etc would have to be factored out. Currently the parser uses builders for constructing the types (QNodeDefinitionBuilder, QNodeTypeDefinitionBuilder, QPropertyDefinitionBuilder). These would need to be generalized. Both jcr-commons and spi-commons need to provide their specific versions for these builders. </comment>
                    <comment id="12753068" author="alexander.klimetschek" created="Wed, 9 Sep 2009 13:57:14 +0100"  >I can imagine a (copied/new) cnd parser that does not use the QNodeType/Node/PropertyDefinition classes at all. It would directly implement the JCR 2.0 NodeTypeDefinition + NodeTypeTemplate et al. classes and instantiate them. For parsing valid names, it could directly use the session&amp;#39;s getNamespaceUri and getNamespacePrefix methods, without using spi&amp;#39;s flexible NameResolver mechanism.&lt;br/&gt;
&lt;br/&gt;
Any problem that I missed?</comment>
                    <comment id="12753071" author="jukkaz" created="Wed, 9 Sep 2009 14:01:51 +0100"  >IMHO a version in jcr-commons should *not* implement the Definition and Template classes. Instead it should use the standard JCR factory methods to build the type templates based on the parsed CND files.</comment>
                    <comment id="12753073" author="mduerig" created="Wed, 9 Sep 2009 14:11:49 +0100"  >&amp;gt; Any problem that I missed? &lt;br/&gt;
Yes, SPI implementations need to read cnd files and create QNode... representations from them. </comment>
                    <comment id="12753077" author="mduerig" created="Wed, 9 Sep 2009 14:18:15 +0100"  >The process needs to be a bit more general. We need the parser to be able to generate QNodeTypeDefinitions (SPI usage) and NodeTypeDefinitions (JCR usage). So I suggest to split the parser into a front end for lexical/syntactical analysis and a back end for generating the specific representation. AFAIR the split is more or less there already (see usage of QNodeDefinitionBuilder, QNodeTypeDefinitionBuilder, QPropertyDefinitionBuilder). Only the back ends would have to be factored out. </comment>
                    <comment id="12753081" author="alexander.klimetschek" created="Wed, 9 Sep 2009 14:23:02 +0100"  >&amp;gt; Instead it should use the standard JCR factory methods to build the type templates&lt;br/&gt;
&lt;br/&gt;
Ah, you are right, I missed them. Well, that makes it even simpler.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The process needs to be a bit more general.&lt;br/&gt;
&lt;br/&gt;
I think it would be ok to duplicate the parser code here, since it&amp;#39;s stable and for the sake of library minification. That way the parser in spi-commons can be optimized for the spi use case, and the one in jcr-commons is as simple as possible.</comment>
                    <comment id="12753090" author="mduerig" created="Wed, 9 Sep 2009 14:49:32 +0100"  >14 commits to jackrabbit-spi-commons\src\main\java\org\apache\jackrabbit\spi\commons\nodetype\compact in 2009 only doesn&amp;#39;t seem too stable to me ;-)&lt;br/&gt;
&lt;br/&gt;
I dont like the idea of duplicate code here. I&amp;#39;d still go with factoring out the differences. </comment>
                    <comment id="12753096" author="alexander.klimetschek" created="Wed, 9 Sep 2009 15:01:32 +0100"  >&amp;gt; 14 commits ... in 2009 only doesn&amp;#39;t seem too stable to me&lt;br/&gt;
&lt;br/&gt;
All those commits were related to JCR 2.0 changes or general clean up, not fixing actual parsing bugs. I think moving all those QNode* classes over to jcr-commons is really a bit of overkill, if you can get them simply via NodeTypeManager.createNodeTypeTemplate() et al.&lt;br/&gt;
&lt;br/&gt;
Otherwise I think one could share the lexer and an abstract base class for CND reading that operates on JCR 2.0 NodeTypeTemplate interfaces (and gets them from an abstract method createNodeTypeTemplate(), same for node defs and property defs). If this will be used by spi-commons as well, it would be forced to have QNode* to extend from the new JCR 2.0 templates. Or one would provide yet another wrapper that implements both *Template and QNode* interfaces, internal to the spi cnd parser.</comment>
                    <comment id="12753106" author="mduerig" created="Wed, 9 Sep 2009 15:26:01 +0100"  >Instead of using inheritance for parametrization of the parser I&amp;#39;d use composition as explained above:&lt;br/&gt;
&lt;br/&gt;
The parser already uses a builder (QNodeTypeDefinitionsBuilder) to build the final representation. That is, the parser itself is rather independent of the spi classes. The builder is not. I suggest to change things along the line of&lt;br/&gt;
&lt;br/&gt;
class CompactNodeTypeDefReader {...} &lt;br/&gt;
to &lt;br/&gt;
class CompactNodeTypeDefReader&amp;lt;T&amp;gt; {...}&lt;br/&gt;
&lt;br/&gt;
The constructor which now takes a QNodeTypeDefinitionsBuilder would then take a NodeTypeDefinitionsBuilder&amp;lt;T&amp;gt; and getNodeTypeDefinitions() would return List&amp;lt;T&amp;gt;. &lt;br/&gt;
&lt;br/&gt;
Like this jcr-commons and spi-commons both need to provide a builder which can be used with the parser. The parser itself can be reused amongst both modules. &lt;br/&gt;
</comment>
                    <comment id="12753534" author="mduerig" created="Thu, 10 Sep 2009 10:55:05 +0100"  >Proof of concept patch. &lt;br/&gt;
&lt;br/&gt;
Class CompactNodeTypeDefReader is parametrized now: &lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;class CompactNodeTypeDefReader&amp;lt;T, N&amp;gt; &lt;br/&gt;
&lt;br/&gt;
where T is the types to build, and N the namespace mapping to use. CompactNodeTypeDefReader constructor takes a builder for these types. Builders must derived from AbstractItemTypeDefinitionsBuilder&amp;lt;T, N&amp;gt;. &lt;br/&gt;
&lt;br/&gt;
CompactNodeTypeDefReader, AbstractItemTypeDefinitionsBuilder and related classes do not have any SPI dependencies anymore&lt;br/&gt;
&lt;br/&gt;
Missing yet:&lt;br/&gt;
- JavaDoc is hopefully out dated&lt;br/&gt;
- everything still in spi-commons&lt;br/&gt;
- CompactNodeTypeDefReader.read needs to move to utility class since it ties in spi dependencies. &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12753535" author="jukkaz" created="Thu, 10 Sep 2009 11:02:58 +0100"  >Just thinking, why does the CND reader even need to be able to directly create the Q objects?</comment>
                    <comment id="12753539" author="mduerig" created="Thu, 10 Sep 2009 11:07:00 +0100"  >With my patch it isn&amp;#39;t anymore. Creating the type representations is delegated to a builder. </comment>
                    <comment id="12753543" author="jukkaz" created="Thu, 10 Sep 2009 11:10:38 +0100"  >Sure, but why do we need the builder layer instead of directly using the JCR 2.0 API?</comment>
                    <comment id="12753546" author="tripod" created="Thu, 10 Sep 2009 11:17:36 +0100"  >..because you would loose the namespaces if pure NodeTypeDefinitions would be builded. but if the provided namespaces are exposed from the reader, thats probably ok.</comment>
                    <comment id="12753584" author="alexander.klimetschek" created="Thu, 10 Sep 2009 12:58:27 +0100"  >I would also prefer usage of the JCR 2.0 API *Template interfaces. SPI could be rewritten to have the Q* interfaces extend from them. A subclass of the cnd parser in jcr-commons in spi-commons could then set the parsed variants of names and namespace mappings on the Q* objects.</comment>
                    <comment id="12753592" author="mduerig" created="Thu, 10 Sep 2009 13:23:25 +0100"  >I still prefer to keep the parser independent. Although it adds some complexity (in particular AbstractItemTypeDefinitionsBuilder and its implementations), it adds a great deal of flexibility. Also that way, changes to client code is minimal. &lt;br/&gt;
&lt;br/&gt;
With the proposed patch it is quite easy to parametrize the parser such that it generates a JCR 2.0 API *Template bases representation of the CND. Just implement an AbstractItemTypeDefinitionsBuilder&amp;lt;NodeTypeTemplate, N...&amp;gt; and pass it to CompactNodeTypeDefReader&amp;#39;s constructor. &lt;br/&gt;
&lt;br/&gt;
Also note that the parser is currently used to create two different representations of the CND (one in core, another in spi). AFAIU you want to use it to create yet another representation (JCR API node types/templates). Therefore I think it doesn&amp;#39;t make sense to move the parser close to one specific representation. BTW it was moved from core to spi already (&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1516&quot; title=&quot;Add Compact Namespace and Node Type Definition support to spi-commons&quot;&gt;&lt;strike&gt;JCR-1516&lt;/strike&gt;&lt;/a&gt;) because we then thought the spi representation would be the more general one. </comment>
                    <comment id="12753721" author="mduerig" created="Thu, 10 Sep 2009 18:38:46 +0100"  >&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2301&quot; title=&quot;CND support in jackrabbit-jcr-commons&quot;&gt;&lt;strike&gt;JCR-2301&lt;/strike&gt;&lt;/a&gt;.patch contains the same changes like the previous patch and in addition moves the parser to jcr-commons. In addition it adds ItemTemplatesBuilder which can be used with CompactNodeTypeDefReader to build NodeTypeTemplate instances from a CND. &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12754039" author="mreutegg" created="Fri, 11 Sep 2009 09:13:51 +0100"  >I like this approach.</comment>
                    <comment id="12754049" author="alexander.klimetschek" created="Fri, 11 Sep 2009 09:41:54 +0100"  >I would not object against this approach - the only thing I&amp;#39;d like to see is a simple CND reader (subclass) that works out of the box for JCR 2.0 *Templates without having to worry about any Builder classes. The reason is that we need a plain simple replacement for the deprecated register node types via InputStream of the Jackrabbit API.</comment>
                    <comment id="12754075" author="mduerig" created="Fri, 11 Sep 2009 11:20:23 +0100"  >Ok, I&amp;#39;ll add such an utility class then and commit the patch (next week). &lt;br/&gt;
&lt;br/&gt;
Note however that you will still have to either pass a Session or a Worspace or a NodeTypeManager, a ValueFactory, and possibly a NamespaceRegistry to such a utility class. </comment>
                    <comment id="12754077" author="mreutegg" created="Fri, 11 Sep 2009 11:28:36 +0100"  >Feedback on &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2301&quot; title=&quot;CND support in jackrabbit-jcr-commons&quot;&gt;&lt;strike&gt;JCR-2301&lt;/strike&gt;&lt;/a&gt;.patch:&lt;br/&gt;
&lt;br/&gt;
- can we move the Q*DefinitionsBuilder one package up? I think those are not only useful in context of CND reading but in general to build a Q*Definition instances.</comment>
                    <comment id="12754079" author="mduerig" created="Fri, 11 Sep 2009 11:35:30 +0100"  >&amp;gt; - can we move the Q*DefinitionsBuilder one package up?&lt;br/&gt;
Ok ack. I&amp;#39;ll do so.</comment>
                    <comment id="12754083" author="alexander.klimetschek" created="Fri, 11 Sep 2009 11:51:11 +0100"  >&amp;gt; Note however that you will still have to either pass a Session or a Worspace or a NodeTypeManager, a ValueFactory, and possibly a NamespaceRegistry to such a utility class.&lt;br/&gt;
&lt;br/&gt;
Session should be fine.</comment>
                    <comment id="12754955" author="mduerig" created="Mon, 14 Sep 2009 13:32:28 +0100"  >Fixed in revision: 814610  &lt;br/&gt;
&lt;br/&gt;
In addition to the changes in the patch, I added the CndImporter utility class which can be used for importing CNDs. </comment>
                </comments>
                    <attachments>
                    <attachment id="12419198" name="JCR-2301.patch" size="193624" author="mduerig" created="Thu, 10 Sep 2009 18:38:46 +0100" />
                    <attachment id="12419158" name="JCR-2301-poc.patch" size="102162" author="mduerig" created="Thu, 10 Sep 2009 10:55:04 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 9 Sep 2009 12:27:02 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>143097</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192146</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>