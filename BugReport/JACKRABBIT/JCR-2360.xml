<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:42:43 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2360/JCR-2360.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2360] JcrUtils.getRepository(...) for simple repository access</title>
                <link>https://issues.apache.org/jira/browse/JCR-2360</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>As discussed on the mailing list, it would be nice to have a trivially simple way (one line of code) to connect to a repository. The RepositoryFactory interface in JCR 2.0 defines a way for clients to get a repository reference without a direct implementation dependency, but a client still needs extra code to handle the Service Provider lookup and the iteration through all the available repository factories.&lt;br/&gt;
&lt;br/&gt;
To simplify client code I&amp;#39;d like to introduce a JcrUtils.getRepository(Map&amp;lt;String, String&amp;gt;) method that takes care of the tasks mentioned above:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;String, String&amp;gt; parameters = ...; // repository settings&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repository = JcrUtils.getRepository(parameters);&lt;br/&gt;
&lt;br/&gt;
As a further simplification, I&amp;#39;d also like to introduce a JcrUtils.getRepository(String) method that builds the parameter map based on a given &amp;quot;repository URI&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repository = JcrUtils.getRepository(&amp;quot;&lt;a href=&quot;file:///path/to/repository&quot;&gt;file:///path/to/repository&lt;/a&gt;&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repository = JcrUtils.getRepository(&amp;quot;&lt;a href=&quot;http://localhost:8080/server&quot;&gt;http://localhost:8080/server&lt;/a&gt;&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
The set of supported URI types is still to be defined.</description>
                <environment></environment>
            <key id="12438808">JCR-2360</key>
            <summary>JcrUtils.getRepository(...) for simple repository access</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Oct 2009 15:12:08 +0100</created>
                <updated>Fri, 16 Apr 2010 18:28:20 +0100</updated>
                    <resolved>Fri, 23 Oct 2009 11:44:30 +0100</resolved>
                                            <fixVersion>2.0-beta1</fixVersion>
                                <component>jackrabbit-jcr-commons</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12768697" author="jukkaz" created="Thu, 22 Oct 2009 15:46:25 +0100"  >Proposed patch with the following supported URI types:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jndi:... for o.a.j.core.jndi.RepositoryFactoryImpl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file://... for o.a.j.core.RepositoryFactoryImpl&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;http(s)://... for o.a.j.jcr2spi.Jcr2spiRepositoryFactory with o.a.j.spi2davex.Spi2davexRepositoryServiceFactory&lt;br/&gt;
&lt;br/&gt;
More elaborate support (URI parameter support, autodetection of file:// or http:// repository types, etc.) can be added as needed.</comment>
                    <comment id="12769169" author="jukkaz" created="Fri, 23 Oct 2009 11:44:30 +0100"  >I committed the patch and a followup change that introduced an o.a.j.commons.GenericRepositoryFactory class that implements the repository URI functionality (and JNDI lookups) as a standard RepositoryFactory.</comment>
                    <comment id="12769952" author="tmueller" created="Mon, 26 Oct 2009 09:15:31 +0000"  >Instead of hard-coding the prefix-to-factory mapping, we could add a way for factories to &amp;#39;register&amp;#39; one more multiple URL prefixes. Similar to JDBC, &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#registerDriver(java.sql.Driver)&quot;&gt;http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#registerDriver(java.sql.Driver)&lt;/a&gt; - instead of an explicit &amp;quot;register&amp;quot; method, the factory could return the list of prefixes it supports.</comment>
                    <comment id="12769958" author="fmeschbe" created="Mon, 26 Oct 2009 09:34:27 +0000"  >How come I think of the OSGi ServiceRegistry would be faboulous helper for this kind of extensibility ... ;-)</comment>
                    <comment id="12769959" author="tmueller" created="Mon, 26 Oct 2009 09:38:47 +0000"  >&amp;gt; OSGi ServiceRegistry&lt;br/&gt;
&lt;br/&gt;
See the title &amp;quot;simple repository access&amp;quot;. If I want a simple solution, I _definitely_ don&amp;#39;t want to use OSGi.</comment>
                    <comment id="12769962" author="jukkaz" created="Mon, 26 Oct 2009 09:44:58 +0000"  >Instead of a new registry, we could actually just let each specific repository factory to interpret the org.apache.jackrabbit.repository.uri parameter in addition to any custom parameters they may support.&lt;br/&gt;
&lt;br/&gt;
For example, the jackrabbit-core repository factory could look up a file:// URI and only return an instantiated repository if the given path points to a Jackrabbit repository directory. Another repository factory could then also support file:// URIs that point to other types of files or directories.&lt;br/&gt;
&lt;br/&gt;
The nice thing about this approach is that we wouldn&amp;#39;t need another registry mechanism, as the normal service provider system already used by repository factories would be good enough.</comment>
                    <comment id="12769987" author="mreutegg" created="Mon, 26 Oct 2009 10:57:16 +0000"  >&amp;gt; Instead of a new registry, we could actually just let each specific repository factory to interpret the org.apache.jackrabbit.repository.uri [...]&lt;br/&gt;
&lt;br/&gt;
+1</comment>
                    <comment id="12769988" author="tmueller" created="Mon, 26 Oct 2009 11:11:06 +0000"  >&amp;gt; let each factory interpret org.apache.jackrabbit.repository.uri&lt;br/&gt;
&lt;br/&gt;
+1</comment>
                    <comment id="12798641" author="jukkaz" created="Mon, 11 Jan 2010 11:16:58 +0000"  >&amp;gt; let each factory interpret org.apache.jackrabbit.repository.uri &lt;br/&gt;
&lt;br/&gt;
This is now implemented with the new jcr2dav component and the jackrabbit-core changes in revision 897836.&lt;br/&gt;
&lt;br/&gt;
Any new RepositoryFactory implementations that want to work with JcrUtils.getRepository(String uri) should implement similar processing for the org.apache.jackrabbit.repository.uri configuration parameter.</comment>
                    <comment id="12857900" author="dlouzado" created="Fri, 16 Apr 2010 18:28:20 +0100"  >Currently, using version 2.0.0, how can I connect to a remote Jackrabbit WebDav repository?&lt;br/&gt;
</comment>
                </comments>
                    <attachments>
                    <attachment id="12422902" name="JCR-2360.patch" size="6685" author="jukkaz" created="Thu, 22 Oct 2009 15:46:25 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 26 Oct 2009 09:15:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>143122</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280143</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>