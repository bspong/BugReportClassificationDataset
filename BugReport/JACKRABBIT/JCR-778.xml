<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:46:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-778/JCR-778.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-778] Error on query initialization - intermittent</title>
                <link>https://issues.apache.org/jira/browse/JCR-778</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>About 1 in ten times, I get the error as shown in the stack trace below. This happens when I run test, or when I start the app. The only way to resolve (when testing) seems to be to blow away the repository. &lt;br/&gt;
&lt;br/&gt;
It always happens at the point the query manager is accessed (triggering the query subsystem to start up). It DOES NOT cause an exception to be thrown back to the caller, I just noticed it in the logs. Basically the queries return NO data at all (and show up as test failures of course). &lt;br/&gt;
&lt;br/&gt;
In each case when I startup the system/test, if the repository exists I use it, and (for tests) clean it by deleting the root node of the user content, and then starting again, otherwise there is nothing that exciting.&lt;br/&gt;
&lt;br/&gt;
Please let me know if more info is needed.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ERROR 05-03 15:54:39,386 (LazyQueryResultImpl.java:getResults:266)  -Exception while executing query:&lt;br/&gt;
java.io.IOException : No such file or directory&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.io.UnixFileSystem.createFileExclusively(Native Method)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.io.File.createNewFile(File.java:850)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.FSDirectory$1.obtain( FSDirectory.java:119)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.lucene.store.Lock.obtain(Lock.java:51)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.lucene.store.Lock$With.run(Lock.java:98)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.lucene.index.IndexReader.open(IndexReader.java:141)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.lucene.index.IndexReader.open(IndexReader.java:136)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:191)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader (MultiIndex.java:616)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.SearchIndex.executeQuery(SearchIndex.java:384)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.executeQuery(LazyQueryResultImpl.java :204)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.getResults(LazyQueryResultImpl.java:244)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.&amp;lt;init&amp;gt;(LazyQueryResultImpl.java :161)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:164)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:142)</description>
                <environment>Linux Fedora Core 5, ext2 filesystem, Java 1.5 (Sun)</environment>
            <key id="12364424">JCR-778</key>
            <summary>Error on query initialization - intermittent</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="michaelneale">Michael Neale</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Mar 2007 05:44:44 +0000</created>
                <updated>Tue, 14 Aug 2007 16:01:56 +0100</updated>
                    <resolved>Fri, 27 Apr 2007 13:40:40 +0100</resolved>
                            <version>1.1</version>
                <version>1.1.1</version>
                <version>1.2.1</version>
                <version>1.2.2</version>
                <version>1.2.3</version>
                <version>1.3</version>
                                <fixVersion>1.3.1</fixVersion>
                                <component>indexing</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12479591" author="mreutegg" created="Fri, 9 Mar 2007 13:48:52 +0000"  >When you say it happens when you run a test, does that mean you have a test case that allows you to reliable (even if it is just 1 out of 10 runs) reproduce this error? Can you please attach the test class? Thank you.</comment>
                    <comment id="12490717" author="michaelneale" created="Sun, 22 Apr 2007 12:59:54 +0100"  >OK looking a little deeper, the problem stems from:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Lock makeLock(final String name) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final File lockFile = new File(directory, name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new Lock() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public boolean obtain() throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (DISABLE_LOCKS) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return lockFile.createNewFile();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
In FSDirectory in jackrabbit core. IT seems that it is using an empty file as a lock, yet when you look at JRE source for createNewFile, it EXPLICITLY says not to use this for file locking: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* Note: this method should &amp;lt;i&amp;gt;not&amp;lt;/i&amp;gt; be used for file-locking, as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* the resulting protocol cannot be made to work reliably. The &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* {@link java.nio.channels.FileLock FileLock}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* facility should be used instead. &lt;br/&gt;
&lt;br/&gt;
So this is a problem I believe. &lt;br/&gt;
</comment>
                    <comment id="12490722" author="michaelneale" created="Sun, 22 Apr 2007 13:44:13 +0100"  >started reworking the locking to use NIO, but there is a problem:&lt;br/&gt;
&lt;br/&gt;
repository/repository/index/_27/write.lock (No such file or directory)&lt;br/&gt;
stuff like that occurs when a lock is requested for a directory that does not exist.</comment>
                    <comment id="12490762" author="michaelneale" created="Mon, 23 Apr 2007 01:39:13 +0100"  >ok the problem isn&amp;#39;t just with locking Per-se - thats only part. &lt;br/&gt;
&lt;br/&gt;
Even when locking is disabled, the index reader tries to access stuff that just isn&amp;#39;t there: &lt;br/&gt;
&lt;br/&gt;
java.io.FileNotFoundException: /home/michael/projects/jboss-rules/drools-repository/repository/repository/index/_42/segments (No such file or directory)&lt;br/&gt;
	at java.io.RandomAccessFile.open(Native Method)&lt;br/&gt;
	at java.io.RandomAccessFile.&amp;lt;init&amp;gt;(RandomAccessFile.java:212)&lt;br/&gt;
	at org.apache.lucene.store.FSIndexInput$Descriptor.&amp;lt;init&amp;gt;(FSDirectory.java:430)&lt;br/&gt;
	at org.apache.lucene.store.FSIndexInput.&amp;lt;init&amp;gt;(FSDirectory.java:439)&lt;br/&gt;
	at org.apache.lucene.store.FSDirectory.openInput(FSDirectory.java:329)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.FSDirectory.openInput(FSDirectory.java:209)&lt;br/&gt;
	at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:45)&lt;br/&gt;
	at org.apache.lucene.index.IndexReader$1.doBody(IndexReader.java:146)&lt;br/&gt;
	at org.apache.lucene.store.Lock$With.run(Lock.java:99)&lt;br/&gt;
	at org.apache.lucene.index.IndexReader.open(IndexReader.java:141)&lt;br/&gt;
	at org.apache.lucene.index.IndexReader.open(IndexReader.java:136)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.AbstractIndex.getReadOnlyIndexReader(AbstractIndex.java:191)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.MultiIndex.getIndexReader(MultiIndex.java:616)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.SearchIndex.executeQuery(SearchIndex.java:384)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.executeQuery(LazyQueryResultImpl.java:204)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.getResults(LazyQueryResultImpl.java:244)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.LazyQueryResultImpl.&amp;lt;init&amp;gt;(LazyQueryResultImpl.java:161)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:164)&lt;br/&gt;
	at org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:142)&lt;br/&gt;
	at org.drools.repository.RulesRepository.findAssetsByName(RulesRepository.java:968)&lt;br/&gt;
	at org.drools.repository.RulesRepository.findAssetsByName(RulesRepository.java:980)&lt;br/&gt;
	at org.drools.repository.RulesRepositoryTest.testFindRulesByName(RulesRepositoryTest.java:87)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:585)&lt;br/&gt;
	at junit.framework.TestCase.runTest(TestCase.java:154)&lt;br/&gt;
	at junit.framework.TestCase.runBare(TestCase.java:127)&lt;br/&gt;
	at junit.framework.TestResult$1.protect(TestResult.java:106)&lt;br/&gt;
	at junit.framework.TestResult.runProtected(TestResult.java:124)&lt;br/&gt;
	at junit.framework.TestResult.run(TestResult.java:109)&lt;br/&gt;
	at junit.framework.TestCase.run(TestCase.java:118)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)&lt;br/&gt;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)</comment>
                    <comment id="12490868" author="michaelneale" created="Mon, 23 Apr 2007 10:27:32 +0100"  >OK here is a project to reproduce - probably more longer winded then it strictly needs to be, but its hard to know what it causing it.&lt;br/&gt;
&lt;br/&gt;
How to reproduce (any platform, and it included JR 1.2.2 and a version of LazyQueryResultImpl to print out a stack trace):&lt;br/&gt;
&lt;br/&gt;
Unzip, import into eclipse (has project files), open RulesRepositoryTest.java, run test. Repeat up to 10 or 20 times, and you should see a failre every now and then.&lt;br/&gt;
&lt;br/&gt;
It seems to be looking for an index directory that does NOT exist - if you remove indexing, it will still fail as it looks for a content item that does not exist.&lt;br/&gt;
&lt;br/&gt;
Note, this creates the database each time (and the first time sets up node type definitions) - by wiping it clean, thats the only thing slightly unusual about this.</comment>
                    <comment id="12491103" author="michaelneale" created="Tue, 24 Apr 2007 01:16:00 +0100"  >OK, another thing to try: download &lt;a href=&quot;http://www.users.on.net/~michaelneale/work/jackrabbit-JCR-778.-corrupt-index-or-data.zip&quot;&gt;http://www.users.on.net/~michaelneale/work/jackrabbit-JCR-778.-corrupt-index-or-data.zip&lt;/a&gt;&lt;br/&gt;
and import into eclipse etc.. .run - it will fail immediately. It is a repository in the busted state *after* the index error occurs (you can see its the index subsystem failing every time).&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12491140" author="michaelneale" created="Tue, 24 Apr 2007 06:38:41 +0100"  >ok this also happens with 1.3 - only in 1.3 its not logging an exception (even worse)  - just not returning results on a query.</comment>
                    <comment id="12491216" author="michaelneale" created="Tue, 24 Apr 2007 11:07:46 +0100"  >A simpler way to reproduce: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void testIt() throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repo = new TransientRepository();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session sess = repo.login(new SimpleCredentials(&amp;quot;foo&amp;quot;, &amp;quot;password&amp;quot;.toCharArray()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node root = sess.getRootNode();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; 10; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;root.addNode( &amp;quot;&amp;quot; + i + System.currentTimeMillis(), &amp;quot;nt:unstructured&amp;quot; );&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sess.save();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Query q = sess.getWorkspace().getQueryManager().createQuery( &amp;quot;select * from nt:unstructured&amp;quot;, Query.SQL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QueryResult qr = q.execute();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NodeIterator ni = qr.getNodes();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertTrue(ni.hasNext());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertNotNull(ni.next());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertNotNull(ni.next());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertNotNull(ni.next());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
//        sess.logout();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I am just trying out to see if not closing the session can cause this. Take a lot of iterations to reproduce it.</comment>
                    <comment id="12491554" author="mreutegg" created="Wed, 25 Apr 2007 09:16:00 +0100"  >Does it also happen when you close the session? If not then this supports my assumption that the error is caused by a combination of repeated cycles of not shutting down jackrabbit and a bug in the index recovery code which is executed when jackrabbit is started up again.</comment>
                    <comment id="12492280" author="mreutegg" created="Fri, 27 Apr 2007 13:40:40 +0100"  >The problem was caused by index replace actions in the redo log created by the index merger. This also explains why it does not happen after every test restart, but only after a number of index segments have been created that trigger the index merger. With the default values this happens after 10 segments exist. Hence, the error occurs when the test case is restarted the 11th time.&lt;br/&gt;
&lt;br/&gt;
The index recovery also replayed the index replacement, which finally resulted in a corrupt index.&lt;br/&gt;
&lt;br/&gt;
Fixed in revision: 533080</comment>
                    <comment id="12492424" author="michaelneale" created="Sat, 28 Apr 2007 01:24:22 +0100"  >awesome work, nicely done. </comment>
                    <comment id="12501347" author="jukkaz" created="Mon, 4 Jun 2007 21:24:54 +0100"  >Merged to the 1.3 branch in revision 544247.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                                <inwardlinks description="is duplicated by">
                            <issuelink>
            <issuekey id="12375953">JCR-1058</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12356032" name="jackrabbit-JCR-778.zip" size="10408711" author="michaelneale" created="Mon, 23 Apr 2007 10:27:32 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 9 Mar 2007 13:48:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>80470</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189986</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>