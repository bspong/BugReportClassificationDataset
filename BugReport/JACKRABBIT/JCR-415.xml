<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:34:55 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-415/JCR-415.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-415] Enhance indexing of binary content</title>
                <link>https://issues.apache.org/jira/browse/JCR-415</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Indexing of binary content should be enhanced in order to allow either configuration what fields are indexed or provide better support for custom NodeIndexer implementations.&lt;br/&gt;
&lt;br/&gt;
The current design has a couple of flaws that should be addressed at the same time:&lt;br/&gt;
- Reader instances are requested from the text filters even though the reader might never be used&lt;br/&gt;
- only jcr:data properties of nt:resource nodes are fulltext indexed&lt;br/&gt;
- It is up to the text filter implementation to decide the lucene field name for the text representation, responsibility should be moved to the NodeIndexer. A text filter should only provide a Reader instance.&lt;br/&gt;
&lt;br/&gt;
With those changes a custom NodeIndexer can then decide if a binary property has one or more representations in the index.</description>
                <environment></environment>
            <key id="12332776">JCR-415</key>
            <summary>Enhance indexing of binary content</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mreutegg">Marcel Reutegger</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Apr 2006 17:14:06 +0100</created>
                <updated>Wed, 25 Apr 2007 09:45:23 +0100</updated>
                    <resolved>Wed, 20 Dec 2006 15:28:52 +0000</resolved>
                            <version>0.9</version>
                <version>1.0</version>
                <version>1.0.1</version>
                                <fixVersion>1.3</fixVersion>
                                <component>indexing</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12418774" author="jukkaz" created="Sat, 1 Jul 2006 15:37:21 +0100"  >See a related email thread at &lt;a href=&quot;http://article.gmane.org/gmane.comp.apache.jackrabbit.devel/7609&quot;&gt;http://article.gmane.org/gmane.comp.apache.jackrabbit.devel/7609&lt;/a&gt;</comment>
                    <comment id="12420038" author="jukkaz" created="Mon, 10 Jul 2006 19:50:52 +0100"  >Attached a proposal patch containing a mostly complete implementation of the TextExtractor idea I discussed briefly on the mailing list. This covers just a part of this issue, but should simplify further work considerably.&lt;br/&gt;
&lt;br/&gt;
The attached patch (jackrabbit-extractor-r420472.patch) contains just the TextExtractor interface and related classes placed in org.apache.jackrabbit.extractor. I chose to place them outside of o.a.j.core as they have no Jackrabbit dependencies, and would probably make a good contribution to Apache Lucene once battle-tested.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll continue with a separate patch that backwards-compatibly replaces the current TextFilter usage in o.a.j.core.query[.lucene], and with some class diagrams that give a quick overview before diving into the javadocs.</comment>
                    <comment id="12420043" author="jukkaz" created="Mon, 10 Jul 2006 19:55:27 +0100"  >Attached patch (jackrabbit-query-r420472.patch) to integrate the TextExtractor proposal with Jackrabbit core.</comment>
                    <comment id="12420240" author="mreutegg" created="Tue, 11 Jul 2006 16:18:36 +0100"  >Looks very good.&lt;br/&gt;
&lt;br/&gt;
Some minor suggestions:&lt;br/&gt;
&lt;br/&gt;
- NodeIndexer.addBinaryValue() is protected to allow subclasses to override it but it uses the private method getValue(). Thus getValue() should be protected final in order to be usable for a subclass.&lt;br/&gt;
&lt;br/&gt;
- Extracting text should be deferred to the time when the lucene Document acutally requests character from Reader that is assigned to a Field. See &lt;a href=&quot;http://issues.apache.org/jira/browse/JCR-264&quot;&gt;http://issues.apache.org/jira/browse/JCR-264&lt;/a&gt;.</comment>
                    <comment id="12420256" author="jukkaz" created="Tue, 11 Jul 2006 17:23:37 +0100"  >Marcel:&lt;br/&gt;
&amp;gt; NodeIndexer.addBinaryValue() is protected to allow subclasses to override it but it uses the private&lt;br/&gt;
&amp;gt; method getValue(). Thus getValue() should be protected final in order to be usable for a subclass. &lt;br/&gt;
&lt;br/&gt;
OK.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Extracting text should be deferred to the time when the lucene Document acutally requests character&lt;br/&gt;
&amp;gt; from Reader that is assigned to a Field. See &lt;a href=&quot;http://issues.apache.org/jira/browse/JCR-264&quot;&gt;http://issues.apache.org/jira/browse/JCR-264&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
I think it would make more design sense to try to postpone the creation of the Document instances instead of delaying text extraction. But I&amp;#39;m not too familiar with the details, so I&amp;#39;m OK with adding lazy reading to the mix. In any case I think it&amp;#39;s best to layer the lazy reading on top of the TextExtractor interface instead of below it. A utility class like the following could achieve this as long as the given InputStream remains valid until the document has been read.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;class TextExtractorReader extends Reader {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final TextExtractor extractor;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final InputStream stream;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final String type;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final String encoding;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Reader reader;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public TextExtractorReader(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TextExtractor extractor, InputStream stream,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String type, String encoding) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.extractor = extractor;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.stream = stream;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.type = type;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.encoding = encoding;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.reader = null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public int read(char[] buffer, int offset, int length) throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (reader == null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reader = extractor.extractText(stream, type, encoding);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return reader.read(buffer, offset, length);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void close() throws IOException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (reader != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reader.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;stream.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I can update the query patch accordingly.&lt;br/&gt;
</comment>
                    <comment id="12420293" author="mreutegg" created="Tue, 11 Jul 2006 20:24:16 +0100"  >Jukka wrote:&lt;br/&gt;
&amp;gt; I think it would make more design sense to try to postpone the creation of the Document instances&lt;br/&gt;
&amp;gt; instead of delaying text extraction. But I&amp;#39;m not too familiar with the details, so I&amp;#39;m OK with adding lazy&lt;br/&gt;
&amp;gt; reading to the mix. In any case I think it&amp;#39;s best to layer the lazy reading on top of the TextExtractor interface&lt;br/&gt;
&amp;gt; instead of below it. A utility class like the following could achieve this as long as the given InputStream&lt;br/&gt;
&amp;gt; remains valid until the document has been read.&lt;br/&gt;
&lt;br/&gt;
Yes, you are right. I thought I could get away with the dirty solution ;)&lt;br/&gt;
While going through your patch I was actually also thinking about a design that should create the document&lt;br/&gt;
only when it is really added to the index.&lt;br/&gt;
For now we can maybe use the TextExtractorReader you proposed and then in a next step change the design&lt;br/&gt;
to create the Document in a later stage of the indexing process.</comment>
                    <comment id="12420948" author="jukkaz" created="Fri, 14 Jul 2006 06:02:20 +0100"  >&amp;gt; Yes, you are right. I thought I could get away with the dirty solution ;)&lt;br/&gt;
&lt;br/&gt;
Well, as they say, do the simplest thing that could possibly work!&lt;br/&gt;
&lt;br/&gt;
&amp;gt; For now we can maybe use the TextExtractorReader you proposed and then in a next step&lt;br/&gt;
&amp;gt; change the design to create the Document in a later stage of the indexing process.&lt;br/&gt;
&lt;br/&gt;
Sounds good. Attached a revised patch (jackrabbit-query-r421461.patch) that uses the TextExtractorReader solution.</comment>
                    <comment id="12459384" author="mreutegg" created="Mon, 18 Dec 2006 15:43:48 +0000"  >I would like to get this change into the next major release (1.3) and propose the following changes:&lt;br/&gt;
&lt;br/&gt;
- Create a new module jackrabbit-text-extractors which will initially contain the jackrabbit-extractor patch provided by Jukka&lt;br/&gt;
- Migrate the jackrabbit-text-filters into the new extractors module&lt;br/&gt;
- Add jackrabbit-text-filters as dependency to jackrabbit-core&lt;br/&gt;
- Remove the jackrabbit-text-filters module and do not create releases anymore for this module. Jackrabbit would still support existing releases of jackrabbit-text-filters but the interface TextFilter will be deprecated (see Jukkas&amp;#39; patch) and developers are encouraged to use the new TextExtractor interface.&lt;br/&gt;
&lt;br/&gt;
Does this make sense?</comment>
                    <comment id="12459968" author="mreutegg" created="Wed, 20 Dec 2006 15:28:52 +0000"  >In addition to the previously mentioned steps I also implemented the deferred text extraction as discussed with Jukka in this jira issue. The helper class TextExtractorReader has been removed again.&lt;br/&gt;
&lt;br/&gt;
Fixed in revision: 489112&lt;br/&gt;
&lt;br/&gt;
If noone objects within a week I will remove the now obsolete module jackrabbit-index-filters.</comment>
                </comments>
                    <attachments>
                    <attachment id="12336575" name="jackrabbit-extractor-r420472.patch" size="47474" author="jukkaz" created="Mon, 10 Jul 2006 19:50:52 +0100" />
                    <attachment id="12336576" name="jackrabbit-query-r420472.patch" size="36866" author="jukkaz" created="Mon, 10 Jul 2006 19:55:27 +0100" />
                    <attachment id="12336828" name="jackrabbit-query-r421461.patch" size="40835" author="jukkaz" created="Fri, 14 Jul 2006 06:02:20 +0100" />
                    <attachment id="12336578" name="org.apache.jackrabbit.core.query-extractor.jpg" size="23615" author="jukkaz" created="Mon, 10 Jul 2006 19:59:59 +0100" />
                    <attachment id="12336579" name="org.apache.jackrabbit.core.query.lucene-extractor.jpg" size="65198" author="jukkaz" created="Mon, 10 Jul 2006 20:02:25 +0100" />
                    <attachment id="12336577" name="org.apache.jackrabbit.extractor.jpg" size="47260" author="jukkaz" created="Mon, 10 Jul 2006 19:58:24 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 1 Jul 2006 14:37:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142164</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279397</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>