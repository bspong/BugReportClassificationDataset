<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 06:02:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1456/JCR-1456.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1456] Database connection pooling</title>
                <link>https://issues.apache.org/jira/browse/JCR-1456</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Jackrabbit should use database connection pools instead of a single connection per persistence manager, cluster journal, or database data store.</description>
                <environment></environment>
            <key id="12390266">JCR-1456</key>
            <summary>Database connection pooling</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Mar 2008 16:09:48 +0000</created>
                <updated>Mon, 11 Jan 2010 14:18:26 +0000</updated>
                    <resolved>Fri, 4 Dec 2009 10:41:04 +0000</resolved>
                                            <fixVersion>2.0-beta4</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>21</votes>
                        <watches>14</watches>
                                                    <comments>
                    <comment id="12575451" author="efranqueiro" created="Wed, 5 Mar 2008 18:38:51 +0000"  >Is it possible to have, in those areas, the same problem reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1388&quot; title=&quot;Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false&quot;&gt;&lt;strike&gt;JCR-1388&lt;/strike&gt;&lt;/a&gt;?&lt;br/&gt;
The idea is to use a pool package or to build our own?</comment>
                    <comment id="12575617" author="jukkaz" created="Thu, 6 Mar 2008 08:47:35 +0000"  >&amp;gt; Is it possible to have, in those areas, the same problem reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1388&quot; title=&quot;Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false&quot;&gt;&lt;strike&gt;JCR-1388&lt;/strike&gt;&lt;/a&gt;?&lt;br/&gt;
&lt;br/&gt;
Connection pools would nicely solve most of our concurrent access issues, as we wouldn&amp;#39;t be constrained to a single connection by default and wouldn&amp;#39;t need workarounds like the one in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1388&quot; title=&quot;Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false&quot;&gt;&lt;strike&gt;JCR-1388&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The idea is to use a pool package or to build our own?&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d leverage a pooling DataSource whenever available (JNDI configuration), and use commons-dbcp to pool explicitly configured connections (JDBC Driver configuration).</comment>
                    <comment id="12613468" author="knopp" created="Mon, 14 Jul 2008 23:03:23 +0100"  >Any update on this? Is there any estimation or is there a patch expected? :)</comment>
                    <comment id="12615466" author="knopp" created="Tue, 22 Jul 2008 00:19:58 +0100"  >Proof of concept patch. &lt;br/&gt;
&lt;br/&gt;
* Abstracts database connection creation to allow pluggable pooling implementation. &lt;br/&gt;
* Not thoroughly tested and also not checked against checkstyle.&lt;br/&gt;
* So far it only covers BundleDbPersistenceManager and it&amp;#39;s subclasses. All other components (db journal, db filesystem still use ConnectionRecoveryManager).</comment>
                    <comment id="12615997" author="stefan@jira" created="Wed, 23 Jul 2008 13:43:13 +0100"  >thanks for the patch, matej. that&amp;#39;s very much appreciated.&lt;br/&gt;
&lt;br/&gt;
i quickly browsed through the diff and noticed the following issue:&lt;br/&gt;
&lt;br/&gt;
it seems like a connection is retrieved from the pool in every &lt;br/&gt;
PersistenceManager method. that&amp;#39;s probably fine for &lt;br/&gt;
reading methods but that&amp;#39;s not gonna work for writing methods&lt;br/&gt;
since they need to use the same connection (i.e. transaction).&lt;br/&gt;
all method calls within the store(ChangeLog) scope need&lt;br/&gt;
to use the same connection (with autoCommit set to false),&lt;br/&gt;
otherwise you&amp;#39;ll end up with inconsistent/brokem repositories.&lt;br/&gt;
&lt;br/&gt;
i am also a bit concerned about the impact of the proposed change&lt;br/&gt;
since it touches a lot of current code. the patch would have to be&lt;br/&gt;
thoroughly tested with all currently supported backends...&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12616064" author="knopp" created="Wed, 23 Jul 2008 15:36:44 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
Thanks a lot for the comment. You&amp;#39;re right, there might be a problem with different connections obtained. This could be handled by attaching active connection to current thread, so that the nested calls would always obtain the active connection. Anyway, I will look into it and post a new patch.&lt;br/&gt;
&lt;br/&gt;
I agree that this is a substantial change and will require lot of testing. But i think at some point it will be necessary to bite the bullet and implement connection pooling, whether it will be based on my patch or not. The current situation is rather problematic, keeping opened connection per workspace doesn&amp;#39;t scale well at all.</comment>
                    <comment id="12621282" author="knopp" created="Sun, 10 Aug 2008 17:56:25 +0100"  >Added ConnectionPooling for DatabaseFileSystem and DbDataStore. &lt;br/&gt;
Database connections are thread bound if necessary.&lt;br/&gt;
Checked again checkstyle.&lt;br/&gt;
Not thoroughly tested.</comment>
                    <comment id="12623419" author="tmueller" created="Mon, 18 Aug 2008 18:57:24 +0100"  >What about doing that for DbDataStore first? The patch would be much smaller.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; attaching active connection to current thread, so that the nested calls would always obtain the active connection&lt;br/&gt;
&lt;br/&gt;
That sounds too complicated, too tricky, and too slow for me. For store(ChangeLog), why not simply pass the connection object to the nested calls?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; require lot of testing&lt;br/&gt;
&lt;br/&gt;
Just to make sure: You mean automated tests, right? Manual tests is a maintenance problem.&lt;br/&gt;
</comment>
                    <comment id="12623452" author="knopp" created="Mon, 18 Aug 2008 21:33:07 +0100"  >&amp;gt; What about doing that for DbDataStore first? The patch would be much smaller. &lt;br/&gt;
&lt;br/&gt;
Well, the file system is also instantiated per workspace so I believe connection pooling makes sense there. But it can be excluded from the patch, that shouldn&amp;#39;t be a big issue.&lt;br/&gt;
Same goes for DataStore. But while you can live without Db file system, DbDateStore is more or less necessary for clustered environments and the lack of connection pooling can be a serious issue there.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; That sounds too complicated, too tricky, and too slow for me. For store(ChangeLog), why not simply pass the connection object to the nested calls? &lt;br/&gt;
&lt;br/&gt;
Because the nested calls are invoked from BundleDbPersistenceManager which doesn&amp;#39;t know about database connection. &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
It&amp;#39;s really not complicated at all. There is one class (ThreadLocalConnectionProviderAdapter) that makes sure that getConnection() returns same connection for &amp;quot;nested&amp;quot; calls. &lt;br/&gt;
Also, could you please be more specific about what exactly sounds too slow about this?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Just to make sure: You mean automated tests, right? Manual tests is a maintenance problem. &lt;br/&gt;
Well, all unit tests that work with &amp;quot;vanilla&amp;quot; jackrabbit also work after the patch is applied. However the patch hasn&amp;#39;t been heavily tested in &amp;quot;real world&amp;quot; environment or with different database backends.</comment>
                    <comment id="12625832" author="knopp" created="Tue, 26 Aug 2008 20:28:24 +0100"  >Patch for current trunk (rev 672286)</comment>
                    <comment id="12626376" author="tmueller" created="Thu, 28 Aug 2008 01:08:56 +0100"  >Thanks for the patch!&lt;br/&gt;
&lt;br/&gt;
&amp;gt; It&amp;#39;s really not complicated at all. There is one class (ThreadLocalConnectionProviderAdapter...&lt;br/&gt;
&lt;br/&gt;
This class does look complicated to me. To avoid ThreadLocal, what about:&lt;br/&gt;
&lt;br/&gt;
BundleDbPersistenceManager {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Connection currentConnection&lt;br/&gt;
&amp;nbsp;&amp;nbsp;synchronized store(..) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentConnection = ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;super.store(..)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;currentConnection = null&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;gt; the patch hasn&amp;#39;t been heavily tested in &amp;quot;real world&amp;quot; &lt;br/&gt;
&lt;br/&gt;
I have already said, manual tests and real world tests are a maintenance problem. If there is no automated test, each change is big risk. Maintaining and improving the code is very hard in this case.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12627752" author="dbrosius" created="Tue, 2 Sep 2008 18:19:09 +0100"  >I like the idea of this patch, but i think the ConnectionProperties is too specific. It should just be&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
private String url;&lt;br/&gt;
private String driver;&lt;br/&gt;
private Properties connectionProperties.&lt;br/&gt;
&lt;br/&gt;
for instance, i would like to add&lt;br/&gt;
&lt;br/&gt;
properties.put(&amp;quot;oracle.net.ssl_cipher_suites&amp;quot;, &amp;quot;(SSL_DH_anon_WITH_3DES_EDE_CBC_SHA, SSL_DH_anon_WITH_RC4_128_MD5, SSL_DH_anon_WITH_DES_CBC_SHA)&amp;quot;;&lt;br/&gt;
&lt;br/&gt;
so that i can connect to the jackrabbit database over SSL.&lt;br/&gt;
&lt;br/&gt;
And of course a similar implication for the repository.xml, to include arbitrary connection properties.</comment>
                    <comment id="12629423" author="tmueller" created="Tue, 9 Sep 2008 09:55:02 +0100"  >Hi Dave,&lt;br/&gt;
&lt;br/&gt;
The connection properties you described are unrelated to &amp;quot;Database connection pooling&amp;quot;, right?&lt;br/&gt;
If yes then I suggest to open another issue.&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas</comment>
                    <comment id="12638915" author="jukkaz" created="Sun, 12 Oct 2008 22:58:46 +0100"  >Let&amp;#39;s postpone this to 1.6.</comment>
                    <comment id="12678595" author="unsorted" created="Wed, 4 Mar 2009 05:46:58 +0000"  >Just wanted to ask what the status of this ticket is. I see it&amp;#39;s unassigned and there&amp;#39;s no fix version right now; is it still planned for 1.6?</comment>
                    <comment id="12679129" author="jukkaz" created="Thu, 5 Mar 2009 09:12:13 +0000"  >As far as I know, nobody is actively working on this. We&amp;#39;ll include this in 1.6 if someone comes up with a patch that everyone agrees on by that time.</comment>
                    <comment id="12699301" author="topping" created="Wed, 15 Apr 2009 19:14:42 +0100"  >There&amp;#39;s been two separate revisions of the original patch and it was never applied.  What guarantee does the community or a contributor have that this patch would be applied if it were reworked to be current?</comment>
                    <comment id="12709500" author="knopp" created="Thu, 14 May 2009 19:03:56 +0100"  >What are the requirements for the patch? I&amp;#39;m willing to provide one against current trunk but I have to know upfront what&amp;#39;s expected of it so that it doesn&amp;#39;t end like the previous attempt.</comment>
                    <comment id="12709516" author="jukkaz" created="Thu, 14 May 2009 19:34:21 +0100"  >I think the main concerns raised above are:&lt;br/&gt;
&lt;br/&gt;
* The entire store(ChangeLog) operation needs to happen atomically&lt;br/&gt;
&lt;br/&gt;
* Using ThreadLocal for the connection seems unnecessarily complex (from the perspective of someone new trying to understand the code), it&amp;#39;s better to pass the connection around as a method argument or encapsulate it as a member variable of an object that performs the database operations&lt;br/&gt;
&lt;br/&gt;
I also have some extra concerns:&lt;br/&gt;
&lt;br/&gt;
* Could you implement this without introducing new configuration entries? We may consider adding that later, but it would be clearer if we first implemented connection pooling with the access configuration that we currently have.&lt;br/&gt;
&lt;br/&gt;
* We should leverage something like Commons DBCP instead of implementing our own connection pooling logic. Commons DBCP is much better than anything that we could come up with.&lt;br/&gt;
&lt;br/&gt;
* Related to the above, we should use the standard DataSource interface interface instead of a custom ConnectionManager class. This would nicely abstract away all the pooling logic and make the code much more familiar to people who already know JDBC. All top-level methods would look like something like this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void doSomething() throws SQLException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Connection connection = dataSource.getConnection();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// do something with the connection&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;connection.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
The above are of course just individual opinions. Feel free to argue otherwise if you have a better solution.&lt;br/&gt;
&lt;br/&gt;
PS. The Jackrabbit sandbox is nowadays open to all Apache committers, so if you may want to create a development branch of Jackrabbit trunk (or the 1.x branch) in the sandbox for this work. The changes here are so extensive that it may be easier for us to work incrementally through svn.&lt;br/&gt;
&lt;br/&gt;
PPS. Alternatively, if you know Git, you may want to clone &lt;a href=&quot;git://git.apache.org/jackrabbit.git&quot;&gt;git://git.apache.org/jackrabbit.git&lt;/a&gt; and publish your changes for example on Github.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12709547" author="knopp" created="Thu, 14 May 2009 20:29:40 +0100"  >&amp;gt;Using ThreadLocal for the connection seems unnecessarily complex (from the perspective of someone new trying to understand the code), it&amp;#39;s better to pass the connection around as a method argument or encapsulate it as a member variable of an object that performs the database operations &lt;br/&gt;
&lt;br/&gt;
The problem here is that BundleDbPersistenceManager superclass is connection agnostic so passing the database connection as argument doesn&amp;#39;t seem to be an option. Storing that as member variable is, but it requires additional locking. To reduce unnecessary locking I decided to use thread locals. Since it&amp;#39;s perceived to be too complicated there won&amp;#39;t be any in next patch.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Could you implement this without introducing new configuration entries? We may consider adding that later, but it would be clearer if we first implemented connection pooling with the access configuration that we currently have. &lt;br/&gt;
&lt;br/&gt;
As far as I can remember all introduced configuration entities were completely optional with sane default making the change pretty much transparent for user.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; We should leverage something like Commons DBCP instead of implementing our own connection pooling logic. Commons DBCP is much better than anything that we could come up with. &lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s the point of hardwiring concrete connection pool? In my previous patch I didn&amp;#39;t attempt to do any connection pooling. I just had a connection source which could be easily implemented to get the connection from *any* connection pool or JNDI. If you insist though on using commons dbcp I can live with that though.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Related to the above, we should use the standard DataSource interface interface instead of a custom ConnectionManager class. This would nicely abstract away all the pooling logic and make the code much more familiar to people who already know JDBC. All top-level methods would look like something like this&lt;br/&gt;
&lt;br/&gt;
The connection manager in patch didn&amp;#39;t create database connections. It delegated that to a connection provider. The purpose of ConnectionManager were some convenience methods and prepared statements caching. The connection provider was simple DataSource like interface. The reason why I chose not to use DataSource is because DataSource has no means to pass connection properties (url, driver, etc). That normally isn&amp;#39;t a problem, in jackrabbit however it is, because the database properties are specified on components level (persistence manager, file system, journal, etc). &lt;br/&gt;
&lt;br/&gt;
If PersistenceManager is supposed to have connection properties (which you seem to insist on in order not to change configuration) then it needs a way to pass these information to code that manages database connections. And DataSource doesn&amp;#39;t provide any means for it.&lt;br/&gt;
&lt;br/&gt;
The custom sandbox could work for me. &lt;br/&gt;
&lt;br/&gt;
Thanks for your input, it&amp;#39;s very appreciated.</comment>
                    <comment id="12709572" author="jukkaz" created="Thu, 14 May 2009 21:36:34 +0100"  >&amp;gt; The problem here is that BundleDbPersistenceManager superclass is connection&lt;br/&gt;
&amp;gt; agnostic so passing the database connection as argument doesn&amp;#39;t seem to be an option.&lt;br/&gt;
&lt;br/&gt;
We can always change the superclass.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Storing that as member variable is, but it requires additional locking.&lt;br/&gt;
&lt;br/&gt;
Not if it&amp;#39;s a member of an extra object that&amp;#39;s instantiated per each top level method call.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; As far as I can remember all introduced configuration entities were completely optional&lt;br/&gt;
&amp;gt; with sane default making the change pretty much transparent for user. &lt;br/&gt;
&lt;br/&gt;
For now I&amp;#39;m mostly worried about  the patch being more complex than it needs to be. We can add config entries once the basic functionality is in place.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; What&amp;#39;s the point of hardwiring concrete connection pool?&lt;br/&gt;
&lt;br/&gt;
So we don&amp;#39;t need to implement one. Note that the solution should work with existing Jackrabbit configurations that do not specify a connection pool. There&amp;#39;s no need for DBCP when a JNDI DataSource is configured, but it makes things a lot easier for non-JNDI configurations.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; In my previous patch I didn&amp;#39;t attempt to do any connection pooling.&lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s SimplePoolingConnectionProvider for then?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The reason why I chose not to use DataSource is because DataSource has no means to&lt;br/&gt;
&amp;gt; pass connection properties (url, driver, etc).&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s what we&amp;#39;d use Commons DBCP for (in cases when a JNDI DataSource has not already been configured).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The custom sandbox could work for me.&lt;br/&gt;
&lt;br/&gt;
OK, good. I created such a development branch in &lt;a href=&quot;https://svn.apache.org/repos/asf/jackrabbit/sandbox/JCR-1456&quot;&gt;https://svn.apache.org/repos/asf/jackrabbit/sandbox/JCR-1456&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12709596" author="knopp" created="Thu, 14 May 2009 22:23:44 +0100"  >&amp;gt; We can always change the superclass.&lt;br/&gt;
&lt;br/&gt;
Well, the superclass methods could pass a context object around that the subclass could use to store connection.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Not if it&amp;#39;s a member of an extra object that&amp;#39;s instantiated per each top level method call.&lt;br/&gt;
&lt;br/&gt;
Yes, but then the superclass needs to pass this object as method argument. Which is probably okay.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; For now I&amp;#39;m mostly worried about the patch being more complex than it needs to be. We can add config entries once the basic functionality is in place.&lt;br/&gt;
&lt;br/&gt;
The problem here is that right now every component (persistence manager, fs, journal, ...) in jackrabbit is responsible for creating the database connection thus the connection properties are specified as configuration option for the component. But connection pooling essentially takes this responsibility from component. So how should the database properties be handled? Where should the connection pool be configured?&lt;br/&gt;
&lt;br/&gt;
My previous patch solved this in way that allowed propagation of connection properties from components to connection pool and didn&amp;#39;t require any changes to configuration files but that came at cost of readability and complexity.  Current way of configuring database connections in jackrabbit assumes the connection is created by the component but this is really not compatible with connection pools.&lt;br/&gt;
&lt;br/&gt;
The cleanest solution would be to add section in configuration to define data sources and then way to assign a data source to each component that needs database connection.  This obviously requires changing the configuration scheme though.&lt;br/&gt;
&lt;br/&gt;
If you have an idea how to configure connection pools and configure the components to use those pools while preserving current configuration scheme I&amp;#39;d love to know about it. The approach I tried worked but it resulted in code apparently too complicated to be committed.&lt;br/&gt;
&lt;br/&gt;
There is one way I can imagine connection pooling working without change to configuration syntax. While parsing the configuration jackrabbit would create datasource (with default connection pool i.e. dbcp) for each distinct connection properties and then pass this datasource to the component to which the connection properties belong.&lt;br/&gt;
&lt;br/&gt;
This would make the configuration parsing code bit more complicated but wouldn&amp;#39;t require any change to configuration files.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; So we don&amp;#39;t need to implement one. Note that the solution should work with existing Jackrabbit configurations that do not specify a connection pool. There&amp;#39;s no need for DBCP when a JNDI DataSource is configured, but it makes things a lot easier for non-JNDI configurations.&lt;br/&gt;
&lt;br/&gt;
I agree that jackrabbit should have connection pooling configured by default but that should be overridable in configuration file. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; What&amp;#39;s SimplePoolingConnectionProvider for then?&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s just a simple connection pool i used for development. It was meant to be kind of &amp;quot;Default&amp;quot; connection provider and the connection pooling logic should be replaced with DBCP should people have agried with the approach i taked with the patch.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12709804" author="jukkaz" created="Fri, 15 May 2009 12:15:42 +0100"  >&amp;gt; The problem here is that right now every component (persistence manager, fs,&lt;br/&gt;
&amp;gt; journal, ...) in jackrabbit is responsible for creating the database connection&lt;br/&gt;
&amp;gt; thus the connection properties are specified as configuration option for the&lt;br/&gt;
&amp;gt; component. But connection pooling essentially takes this responsibility from&lt;br/&gt;
&amp;gt; component. So how should the database properties be handled? Where&lt;br/&gt;
&amp;gt; should the connection pool be configured?&lt;br/&gt;
&lt;br/&gt;
Right where we currently configure the single database connection per component.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; If you have an idea how to configure connection pools and configure the&lt;br/&gt;
&amp;gt; components to use those pools while preserving current configuration&lt;br/&gt;
&amp;gt; scheme I&amp;#39;d love to know about it.&lt;br/&gt;
&lt;br/&gt;
See the attached patch (dbcp.patch) for a simple change that makes all the connections we currently create to come from connection pools. This change obviously doesn&amp;#39;t solve the main issue, but should illustrate how I envision us to handle existing database configurations.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; There is one way I can imagine connection pooling working without change&lt;br/&gt;
&amp;gt; to configuration syntax. While parsing the configuration jackrabbit would create&lt;br/&gt;
&amp;gt; datasource (with default connection pool i.e. dbcp) for each distinct connection&lt;br/&gt;
&amp;gt; properties and then pass this datasource to the component to which the&lt;br/&gt;
&amp;gt; connection properties belong.&lt;br/&gt;
&lt;br/&gt;
Exactly!&lt;br/&gt;
</comment>
                    <comment id="12709805" author="jukkaz" created="Fri, 15 May 2009 12:19:09 +0100"  >Minor update (protect against a null driver class) to dbcp.patch.</comment>
                    <comment id="12712054" author="jukkaz" created="Fri, 22 May 2009 13:10:46 +0100"  >What do you think about my dbcp.patch? Should I commit it to the feature branch as a starting point?</comment>
                    <comment id="12712071" author="knopp" created="Fri, 22 May 2009 13:54:37 +0100"  >I like it. I think it&amp;#39;s a good way to start. </comment>
                    <comment id="12713051" author="jukkaz" created="Tue, 26 May 2009 16:18:37 +0100"  >OK, thanks. I applied the patch in revision 778741. As a next step I think we should change the ConnectionFactory to return the configured DataSource instead of a Connection object. This way we can push the DataSource reference all the way up to the PersistenceManager implementations and use it to get Connections only on demand.</comment>
                    <comment id="12713099" author="knopp" created="Tue, 26 May 2009 17:44:18 +0100"  >There is one problem with your patch that I overlooked. You create new BasicDataSource every time getDriverDataSource() is called. I think there should only be one datasource instance per driverclass/url combo. Otherwise it just keeps creating pools.&lt;br/&gt;
&lt;br/&gt;
I can fix this easily but it will take some time. Right now I&amp;#39;m in process of getting BundleDbPersistenceManager and subclasses used to borrowing connections instead of relying on one shared always being available.</comment>
                    <comment id="12713171" author="jukkaz" created="Tue, 26 May 2009 19:10:21 +0100"  >&amp;gt; You create new BasicDataSource every time getDriverDataSource() is called.&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s by design. As noted in my previous comment, I think we should replace ConnectionFactory.getConnection() with ConnectionFactory.getDataSource() and store a reference to the returned DataSource in the persistence manager.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I think there should only be one datasource instance per driverclass/url combo. &lt;br/&gt;
&lt;br/&gt;
Eventually yes. There the extra configuration parts that you proposed earlier will come in handy. However I think it&amp;#39;s more straightforward if we start with one DataSource per persistence manager for now. Doing it this way we can keep the changes nicely localized within a single persistence manager. We can change the configuration mechanism or introduce some repository-local DataSource registry later on once the basic pooling functionality is there.</comment>
                    <comment id="12714128" author="knopp" created="Thu, 28 May 2009 20:42:22 +0100"  >Initial version of new patch. Probably lacks lot of polish. Would be nice if someone reviewed the patch and provided feedback.</comment>
                    <comment id="12714429" author="jukkaz" created="Fri, 29 May 2009 13:22:32 +0100"  >Reviewing a 2000+ line patch isn&amp;#39;t too easy. Could you split it to smaller pieces? Also, feel free to commit the incremental changes directly to the branch in the sandbox. That way we can better label, comment and discuss each step separately instead of syncing up only on aggregate patches.&lt;br/&gt;
&lt;br/&gt;
On the proposed changes: Good stuff, thanks! We&amp;#39;re definitely seeing good progress here.&lt;br/&gt;
&lt;br/&gt;
The main concern I have is about the Context concept you&amp;#39;re introducing. I see where you&amp;#39;re coming, but I think there&amp;#39;s a better way to do this. The &amp;quot;context&amp;quot; of a method call is the object on which the method is called. How about, instead of passing the Context objects around, we actually moved the recipient methods *into* the Context class?&lt;br/&gt;
&lt;br/&gt;
The Context class would then become something like a generic DatabaseOperation base class that encapsulates the database Connection being used for that operation. Subclasses like LoadBundleOperation, SaveChangesOperation or CheckSchemaOperation could extend this base class with specific functionality that we currently have inside the PersistenceManager (and other) classes. Database-specific extensions can be handled as yet another subclasses like OracleCheckSchemaOperation and the PersistenceManager classes would simply act as factories of these Operation instances instead of actually implementing the database functionality.&lt;br/&gt;
&lt;br/&gt;
WDYT?</comment>
                    <comment id="12714472" author="knopp" created="Fri, 29 May 2009 15:47:58 +0100"  >Thanks for the feedback.&lt;br/&gt;
&lt;br/&gt;
Unfortunately most of the patch is one big change - it modifies AbstractBundlePersistenceManager so it requires all it&amp;#39;s subclasses to be adapted. &lt;br/&gt;
&lt;br/&gt;
The context class was IMHO probably the easiest way to introduce connection pooling without requiring complete refactor/rewrite of persistence managers. Yet the patch is quite big. &lt;br/&gt;
&lt;br/&gt;
I like the idea of operations. This would however be far bigger change that what I did. I thought the idea was to introduce connection pooling with minimal fuzz. Looks like I was wrong. I will look into this. I agree that if done properly this would be much cleaner solution than passing context object around.</comment>
                    <comment id="12714680" author="jukkaz" created="Sat, 30 May 2009 08:56:42 +0100"  >My concerns about too many changes were mostly about having the modifications go too much beyond the o.a.j.core.persistence package (and other database-related packages). What we do inside those packages is open for discussion, and I&amp;#39;d personally prefer to reach a clean design that&amp;#39;s built with connection pooling in mind than to patch the current design to work with pooled connections.&lt;br/&gt;
&lt;br/&gt;
Anyway, I think the Context class is a good starting point, and we can continue by refactoring until the design is better.&lt;br/&gt;
&lt;br/&gt;
Fair point about the one big change. If you like you can commit the full patch as-is and we can work from there in svn.</comment>
                    <comment id="12714682" author="tmueller" created="Sat, 30 May 2009 09:31:29 +0100"  >To reduce the risk of problems, what about creating new classes instead of patching the existing classes? Like that you could concentrate on one database type first. It&amp;#39;s just an idea... </comment>
                    <comment id="12714683" author="jukkaz" created="Sat, 30 May 2009 10:12:25 +0100"  >We&amp;#39;re already working on a branch, so I&amp;#39;m not that worried about changing things. Let&amp;#39;s see what we come up with and then consider whether the result should be merged back as-is or perhaps copied into a new package in trunk.  We should probably also set up some extra integration tests that exercise all the database types that we can easily set up.</comment>
                    <comment id="12728725" author="jukkaz" created="Wed, 8 Jul 2009 15:40:58 +0100"  >I updated the sandbox branch to match the trunk and applied the latest patch.&lt;br/&gt;
&lt;br/&gt;
BTW, the branch now only compiles on Java 5 as the DataSource wrapper class doesn&amp;#39;t work with Java 6.</comment>
                    <comment id="12728760" author="knopp" created="Wed, 8 Jul 2009 17:14:59 +0100"  >I&amp;#39;m not sure what to do about the missing methods from DataSource. We can add dummy implementation to make it compile but that doesn&amp;#39;t really solve the problem (if the real datasource implements methods from Wrapper interface). </comment>
                    <comment id="12737100" author="martijnh" created="Thu, 30 Jul 2009 14:29:24 +0100"  >In order to make testing on other databases than Derby easier, I&amp;#39;ve created a new profile in jackrabbit-core and new configuration files in src/test/repository-filtered.&lt;br/&gt;
The profile copies the test configuration files from src/test/repository-filtered and filters them against properties specified in the pom. The core tests can then be run, e.g., against a configuration which puts all data in a MySQL database.&lt;br/&gt;
&lt;br/&gt;
I think that this makes testing the core against other than the Derby backend easier. Shall I commit this to the sandbox branch which has been created for this issue?</comment>
                    <comment id="12737506" author="stefan@jira" created="Fri, 31 Jul 2009 13:16:51 +0100"  >&amp;gt; Shall I commit this to the sandbox branch which has been created for this issue?&lt;br/&gt;
&lt;br/&gt;
+1 &lt;br/&gt;
&lt;br/&gt;
great, thanks!</comment>
                    <comment id="12738108" author="martijnh" created="Sun, 2 Aug 2009 19:18:12 +0100"  >Committed in revision 800118. Using a different DB backend for testing can be done as follows:&lt;br/&gt;
* Edit the relevant properties in the pom of the jackrabbit-core&amp;#39;s use-descriptor-overlay profile.&lt;br/&gt;
* Make sure you have the appropriate DB driver on the classpath (a MySQL driver is already there)&lt;br/&gt;
* Run mvn clean integration-test -Puse-descriptor-overlay&lt;br/&gt;
&lt;br/&gt;
Note that the profile drops and recreates the test database in the clean phase.&lt;br/&gt;
&lt;br/&gt;
I recently have been looking at refactoring the database classes a bit to remove duplication in e.g., all these bean properties (username, password, schema object prefix, etc) and, more importantly, methods like checkSchema. The idea was to have a base class, say DbSupport, with all these common properties and methods and and with a method to get a sort of JDBC helper class which encapsulates the Connection and operations on it (something like the ConnectionRecoveryManager). I had various subclasses of the JDBC helper in mind for the various DB types (Oracle9, Derby). This works quite nicely for the core.fs.db package and connection pooling can then be located inside that JDBC helper class. I was wondering if that could help us here. What if the Operations that are mentioned above use such as JDBC helper class?</comment>
                    <comment id="12740083" author="martijnh" created="Thu, 6 Aug 2009 15:29:42 +0100"  >I&amp;#39;ve taken the liberty to take the next step: see revision 801659. I&amp;#39;ve replaced the DataSource field with a ConnectionHelper field, removed the Context from the method signatures and basically put the Context&amp;#39;s state in the ConnectionHelper. I&amp;#39;ve also moved checkSchema and prepareSchemaObjectPrefix to the ConnectionHelper class. Database specific code is now contained in the ConnectionHelper class hierarchy and this hierarchy can be reused in other database dependent packages. The BundleDbPM&amp;#39;s init method now calls a &amp;quot;createConnectionHelper&amp;quot; method which subclasses can override to use a specialized ConnectionHelper.&lt;br/&gt;
&lt;br/&gt;
At least the following builds succeed:&lt;br/&gt;
* mvn clean integration-test  (Derby and local FS backend)&lt;br/&gt;
* mvn clean test -Puse-descriptor-overlay,mysql  (MySQL backend, ignoring GCTest failure)&lt;br/&gt;
* mvn clean test -Puse-descriptor-overlay,mssql  (MSSQL backend, ignoring GCTest failure)&lt;br/&gt;
&lt;br/&gt;
Known open issues:&lt;br/&gt;
* The H2, Oracle and Postgres PMs are broken (I&amp;#39;ve made it compile by commenting code out)&lt;br/&gt;
* Make the pooling smarter (ConnectionFactory)&lt;br/&gt;
* Add pooling to other DB based packages: db fs, db journal, db datastore, regular db pms.&lt;br/&gt;
* blockOnConnectionLoss feature and retrying on failure strategy must be checked.</comment>
                    <comment id="12750375" author="martijnh" created="Wed, 2 Sep 2009 11:31:19 +0100"  >I think that it is a good point to ask some feedback about the direction that the work on the sandbox branch is taking.&lt;br/&gt;
&lt;br/&gt;
What has been done:&lt;br/&gt;
* A getDataSource method has been added to the ConnectionFactory which creates and returns a pooled datasource (commons-dbcp).&lt;br/&gt;
* Maven profiles and some infrastructure have been added which make running the automated tests against different DB backends easier.&lt;br/&gt;
* A DB uitility packages has been added: o.a.j.c.util.db. Classes from o.a.j.c.persistence.bundle.util have been moved there, and most importantly, it contains the ConnectionHelper class hierarchy. This hierarchy uses a DataSource provided by the Connectionfactory and provides a means to execute SQL and has specializations for several DB types. Most notably, the Oracle10R1ConnectionHelper implements special blob handling. It also contains a CheckSchemaOperation class which encapsulates the logic to check and create DB schemas (using a ConnectionHelper).&lt;br/&gt;
* The bundle PMs and the DB Filesystem classes have been refactored to use the ConnectionHelper and CheckSchemaOperation classes. The PM and FS classes serve as factories for ConnectionHelper and CheckSchemaOperation instances.&lt;br/&gt;
&lt;br/&gt;
What must still be done:&lt;br/&gt;
* Refactor remaining db based packages to use the ConnectionHelper and CheckSchemaOperation. (journal, datastore, and maybe the non-bundle pms).&lt;br/&gt;
* Improve the implementation of Connectionfactory.getDataSource (now it creates a new DataSource for each invocation with default properties....)&lt;br/&gt;
* ....&lt;br/&gt;
* A lot of integration testing&lt;br/&gt;
&lt;br/&gt;
So what do you think about the current direction?</comment>
                    <comment id="12750937" author="martijnh" created="Thu, 3 Sep 2009 10:35:47 +0100"  >I think this should be fixed in 2.0.0.</comment>
                    <comment id="12768133" author="jukkaz" created="Wed, 21 Oct 2009 09:42:48 +0100"  >I gave a quick look at the current state in the sandbox branch, and I&amp;#39;m pretty happy with how this has turned out!&lt;br/&gt;
&lt;br/&gt;
Agreed about targeting this for Jackrabbit 2.0. We should start looking at merging the changes back to trunk so they&amp;#39;ll go out in the 2.0 betas for more testing before the final 2.0 release.</comment>
                    <comment id="12768192" author="jukkaz" created="Wed, 21 Oct 2009 13:17:07 +0100"  >Attached a patch showing the full set of changes between the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt; sandbox branch and the latest trunk.&lt;br/&gt;
&lt;br/&gt;
Anyone opposed to merging these changes to trunk? There&amp;#39;s obviously still some work to be done, but I think the current state is already good enough to be included in the 2.0 beta releases.</comment>
                    <comment id="12768210" author="tmueller" created="Wed, 21 Oct 2009 13:52:31 +0100"  >Is the 20% slowdown problem solved? I think that should be solved before merging to trunk (disabling validation or doing validation on idle).&lt;br/&gt;
&lt;br/&gt;
P.S. &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt;.patch looks like a &amp;#39;reverse patch&amp;#39;.</comment>
                    <comment id="12768219" author="stefan@jira" created="Wed, 21 Oct 2009 14:01:49 +0100"  >&amp;gt; Is the 20% slowdown problem solved? I think that should be solved before merging to trunk (disabling validation or doing validation on idle). &lt;br/&gt;
&lt;br/&gt;
i agree with thomas. i&amp;#39;d be okay to merging these changes to trunk if the performance issue has been resolved.</comment>
                    <comment id="12768226" author="martijnh" created="Wed, 21 Oct 2009 14:15:39 +0100"  >I think that the &amp;quot;testWhileIdle&amp;quot; approach for the DataSources managed by Jackrabbit resolves the performance issue (this is already present in the sandbox branch). I will try to get some more test results tomorrow. What I intend to do is measure the time that it takes to build the jackrabbit-core up to the integration-test phase on MySQL, MSSQL, H2 and Oracle backends. I compare the sandbox branch with a close revision in the trunk. I hope that these build-times are approximately the same. Is that enough, or should we do some more measurements?&lt;br/&gt;
</comment>
                    <comment id="12768238" author="stefan@jira" created="Wed, 21 Oct 2009 14:47:34 +0100"  >&amp;gt; [...] Is that enough, or should we do some more measurements? &lt;br/&gt;
&lt;br/&gt;
that would be fine with me, thanks.&lt;br/&gt;
</comment>
                    <comment id="12768244" author="tmueller" created="Wed, 21 Oct 2009 14:56:24 +0100"  >&amp;gt; Is that enough&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s enough, thanks.&lt;br/&gt;
&lt;br/&gt;
Could you post the test code / setup or describe what you tested? So that we can reproduce the results if needed. Just to protect from those who say &amp;quot;The new version *feels* slower...&amp;quot;</comment>
                    <comment id="12768247" author="martijnh" created="Wed, 21 Oct 2009 15:04:17 +0100"  >Sure, I&amp;#39;ll describe what I did as precisely as possible. All thanks for your feedback.</comment>
                    <comment id="12769108" author="martijnh" created="Fri, 23 Oct 2009 07:45:27 +0100"  >I attached the results of the performance test and also a patch against the trunk which I applied to setup the tests. There seems to be some overhead as a result of the patch. One case, however, shows quite dramatic performance loss (50%). I want to find out what causes this.</comment>
                    <comment id="12769144" author="stefan@jira" created="Fri, 23 Oct 2009 10:21:49 +0100"  >thanks for sharing the results. they do look very promising.&lt;br/&gt;
i am pretty sure thomas has an idea how to explain/address&lt;br/&gt;
to +50% on h2.</comment>
                    <comment id="12770033" author="tmueller" created="Mon, 26 Oct 2009 14:15:32 +0000"  >Strange is that Connection.getAutoCommit() is called so much (maybe 50% of all JDBC method calls). Sometimes it is called 4 times in a row, without any other JDBC calls in between. It&amp;#39;s not a problem for most databases (specially embedded), but I wonder why it is called so much and if this could be avoided. &lt;br/&gt;
&lt;br/&gt;
I just tested H2 embedded. I don&amp;#39;t know why H2 got slower in your case, maybe because you set the trace level to the maximum, or because you have used the server mode (I used embedded and disabled the trace output).&lt;br/&gt;
&lt;br/&gt;
127 seconds with trunk &lt;br/&gt;
131 seconds with &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
Maven 2.0.9, 1.5.0_20, Mac OS 10.5.8&lt;br/&gt;
&lt;br/&gt;
Unrelated to &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt;: I had to disable the H2 shutdown hook because one of tests doesn&amp;#39;t seem to close the repository correctly, so that Jackrabbit executes database statements in a shutdown hook. This only happens in the trunk, not in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt;.</comment>
                    <comment id="12770041" author="jukkaz" created="Mon, 26 Oct 2009 14:31:18 +0000"  >The AutoCommit stuff shouldn&amp;#39;t be needed with connection pooling anymore, the AutoCommit mode should simply always be off.&lt;br/&gt;
&lt;br/&gt;
We use the AutoCommit mode to avoid having to add explicit commit() calls even after read-only operations. It&amp;#39;s being switched on an off depending whether the repository is performing a read or a write operation. Now with the connection pool a connection is simply closed (or reclaimed to the pool) after a read operation ends, so no pending transaction state starts to accumulate on the database side.</comment>
                    <comment id="12776975" author="martijnh" created="Thu, 12 Nov 2009 12:39:57 +0000"  >(Sorry for the late reply...)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Strange is that Connection.getAutoCommit() is called so much (maybe 50% of all JDBC method calls). Sometimes it is called 4 times in a row&lt;br/&gt;
&lt;br/&gt;
The commons-dbcp pool calls getAutoCommit on each borrow and on each return and ConnectionHelper.getConnection also calls it. That&amp;#39;s three. I agree that the number of calls to getAutoCommit is very large: 28756 vs 759 on the trunk for the tests.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I just tested H2 embedded. I don&amp;#39;t know why H2 got slower in your case&lt;br/&gt;
&lt;br/&gt;
I see the same: H2 embedded is just a couple of seconds slower. Using H2 in server mode over TCP (localhost), however, (using tracing or not) is significantly slower. This might have something to do with the large number of getAutoCommit calls....?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The AutoCommit stuff shouldn&amp;#39;t be needed with connection pooling anymore, the AutoCommit mode should simply always be off. &lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think that changing the default for autoCommit changes the number of calls to getAutoCommit. Can we just keep this default or is there another reason to make the default &amp;quot;false&amp;quot;?&lt;br/&gt;
</comment>
                    <comment id="12783071" author="jukkaz" created="Fri, 27 Nov 2009 09:32:47 +0000"  >Any objections to merging this work to Jackrabbit trunk? The branch looks pretty good to me now, and I think any remaining issues are best solved in trunk where it&amp;#39;s easier for more people to try out and look at the code.&lt;br/&gt;
</comment>
                    <comment id="12783074" author="tmueller" created="Fri, 27 Nov 2009 09:38:40 +0000"  >+1 merge</comment>
                    <comment id="12783075" author="stefan@jira" created="Fri, 27 Nov 2009 09:42:10 +0000"  >&amp;gt; Any objections to merging this work to Jackrabbit trunk? The branch looks pretty good to me now, and I think any remaining issues are best solved in trunk where it&amp;#39;s easier for more people to try out and look at the code. &lt;br/&gt;
&lt;br/&gt;
are there any known issues?&lt;br/&gt;
&lt;br/&gt;
would merging to trunk mean changing the current pm implementions or would the connection pooling be an optional feature?</comment>
                    <comment id="12783077" author="tmueller" created="Fri, 27 Nov 2009 09:47:08 +0000"  >It would mean changing the current pm implementations. So pooling wouldn&amp;#39;t be optional.</comment>
                    <comment id="12783083" author="stefan@jira" created="Fri, 27 Nov 2009 10:11:31 +0000"  >&amp;gt; It would mean changing the current pm implementations. So pooling wouldn&amp;#39;t be optional.&lt;br/&gt;
&lt;br/&gt;
ok, assuming that there are no known issues at this time:&lt;br/&gt;
&lt;br/&gt;
-0 for merging it to trunk &lt;br/&gt;
&lt;br/&gt;
+1 for merging it to trunk if pooling would be an optional feature &lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12783090" author="jukkaz" created="Fri, 27 Nov 2009 10:46:31 +0000"  >&amp;gt; +1 for merging it to trunk if pooling would be an optional feature&lt;br/&gt;
&lt;br/&gt;
Would you be fine with an option that made the connection pool contain just a single persistent connection (which would essentially match current functionality), or would you rather keep the current code as is and introduce the pool-enabled code in separate packages (see my earlier comment from 30/May/09)?&lt;br/&gt;
</comment>
                    <comment id="12783135" author="stefan@jira" created="Fri, 27 Nov 2009 17:17:23 +0000"  >&amp;gt; Would you be fine with an option that made the connection pool contain just a single persistent connection (which would essentially match current functionality), or would you rather keep the current code as is and introduce the pool-enabled code in separate packages (see my earlier comment from 30/May/09)? &lt;br/&gt;
&lt;br/&gt;
personally i&amp;#39;d prefer the latter.</comment>
                    <comment id="12783628" author="martijnh" created="Mon, 30 Nov 2009 11:58:59 +0000"  >&amp;gt; are there any known issues? &lt;br/&gt;
&lt;br/&gt;
Besides the minor performance degradation there are none.&lt;br/&gt;
</comment>
                    <comment id="12783675" author="jukkaz" created="Mon, 30 Nov 2009 14:45:29 +0000"  >OK, let&amp;#39;s go with the separate package. Should we do this just for the persistence managers, or all of the affected pieces (fs, data store, journal)? I&amp;#39;d keep the non-pooled stuff around just for persistence managers since they&amp;#39;re the most critical part of the system.</comment>
                    <comment id="12783677" author="stefan@jira" created="Mon, 30 Nov 2009 14:54:02 +0000"  >&amp;gt;  I&amp;#39;d keep the non-pooled stuff around just for persistence managers since they&amp;#39;re the most critical part of the system.&lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s ok with me.</comment>
                    <comment id="12784889" author="jukkaz" created="Wed, 2 Dec 2009 16:33:59 +0000"  >The pooled bundle persistence managers are now in o.a.j.core.persistence.pool and the original bundle PMs in o.a.j.core.persistence.bundle as before.&lt;br/&gt;
&lt;br/&gt;
With that change in place I&amp;#39;ve now merged all the changes from the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1456&quot; title=&quot;Database connection pooling&quot;&gt;&lt;strike&gt;JCR-1456&lt;/strike&gt;&lt;/a&gt; sandbox branch back to trunk. Further work on this issue should happen in trunk.</comment>
                    <comment id="12785859" author="jukkaz" created="Fri, 4 Dec 2009 10:41:04 +0000"  >Resolving this as Fixed for 2.0-beta4 since all the basic work is now in trunk and we should record this changes as having occurred in time for 2.0-beta4. Let&amp;#39;s use separate issues for any remaining issues or improvements related to database connection pooling.</comment>
                </comments>
                    <attachments>
                    <attachment id="12409296" name="777490.patch" size="87534" author="knopp" created="Thu, 28 May 2009 20:43:22 +0100" />
                    <attachment id="12408243" name="dbcp.patch" size="7996" author="jukkaz" created="Fri, 15 May 2009 12:19:09 +0100" />
                    <attachment id="12408242" name="dbcp.patch" size="7956" author="jukkaz" created="Fri, 15 May 2009 12:15:42 +0100" />
                    <attachment id="12422801" name="JCR-1456.patch" size="274590" author="jukkaz" created="Wed, 21 Oct 2009 13:17:07 +0100" />
                    <attachment id="12422995" name="JCR-1456-performance-trunk-test-setup.patch" size="45138" author="martijnh" created="Fri, 23 Oct 2009 07:45:27 +0100" />
                    <attachment id="12422994" name="JCR-1456-performance.txt" size="6119" author="martijnh" created="Fri, 23 Oct 2009 07:45:27 +0100" />
                    <attachment id="12386588" name="patch-1456-1.txt" size="96362" author="knopp" created="Tue, 22 Jul 2008 00:19:58 +0100" />
                    <attachment id="12387902" name="patch-1456-2.txt" size="242863" author="knopp" created="Sun, 10 Aug 2008 17:56:25 +0100" />
                    <attachment id="12388940" name="patch-1456-3.txt" size="247434" author="knopp" created="Tue, 26 Aug 2008 20:28:24 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>9.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Mar 2008 18:38:51 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>42979</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190155</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>