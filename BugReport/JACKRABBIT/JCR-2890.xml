<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:35:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2890/JCR-2890.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2890] Deadlock in acl.EntryCollector / ItemManager</title>
                <link>https://issues.apache.org/jira/browse/JCR-2890</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Here&amp;#39;s another three-way deadlock that we&amp;#39;ve encountered:&lt;br/&gt;
&lt;br/&gt;
* Thread A holds a downgraded SISM write lock and is about to start delivering observation events to synchronous listeners&lt;br/&gt;
* Thread B wants to write something and blocks waiting for the SISM write lock (since A holds the lock)&lt;br/&gt;
* Thread C wants to read something and blocks waiting for the SISM read lock (since B waits for the lock)&lt;br/&gt;
&lt;br/&gt;
Normally such a scenario is handled without any problems, but there&amp;#39;s a problem if the session used by thread C has a synchronous observation listener that attempts to read something from the repository during event delivery. In this case the following can happen:&lt;br/&gt;
&lt;br/&gt;
* Thread C holds the ItemManager synchronization lock higher up in the call chain&lt;br/&gt;
* Observation listener code called by thread A attempts to read something from the repository, and blocks trying to acquire the ItemManager synchronization lock (since C holds it)&lt;br/&gt;
&lt;br/&gt;
In principle such a scenario should never happen as an observation listener (much less a synchronous one) should never try to use the session that might already be in use by another thread.&lt;br/&gt;
&lt;br/&gt;
Unfortunately the EntryCollector class in o.a.j.core.security.authorization.acl does not follow this guideline, which leads to the deadlock as shown below:&lt;br/&gt;
&lt;br/&gt;
Thread A:&lt;br/&gt;
&amp;quot;127.0.0.1 [1297191119365] POST /bin/wcmcommand HTTP/1.0&amp;quot; nid=1179 state=BLOCKED&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- waiting on &amp;lt;0x11c329fd&amp;gt; (a org.apache.jackrabbit.core.ItemManager)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- locked &amp;lt;0x11c329fd&amp;gt; (a org.apache.jackrabbit.core.ItemManager)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;owned by 127.0.0.1 [1297191138443] POST /bin/wcmcommand HTTP/1.0 id=67&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemManager.getNode(ItemManager.java:653)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemManager.getNode(ItemManager.java:605)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.SessionImpl.getNode(SessionImpl.java:1406)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.security.authorization.acl.EntryCollector.onEvent(EntryCollector.java:253)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.observation.EventConsumer.consumeEvents(EventConsumer.java:246)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.observation.ObservationDispatcher.dispatchEvents(ObservationDispatcher.java:214)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.observation.EventStateCollection.dispatch(EventStateCollection.java:475)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:786)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1488)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:349)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:324)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:328)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1141)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:920)&lt;br/&gt;
&lt;br/&gt;
Thread B:&lt;br/&gt;
&amp;quot;Thread-2438&amp;quot; nid=2582 state=WAITING&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- waiting on &amp;lt;0x166e790e&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- locked &amp;lt;0x166e790e&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.lang.Object.wait(Native Method)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.lang.Object.wait(Object.java:485)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock.acquire(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking$WriteLockImpl.&amp;lt;init&amp;gt;(DefaultISMLocking.java:76)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking$WriteLockImpl.&amp;lt;init&amp;gt;(DefaultISMLocking.java:70)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking.acquireWriteLock(DefaultISMLocking.java:64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireWriteLock(SharedItemStateManager.java:1808)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.access$200(SharedItemStateManager.java:112)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.begin(SharedItemStateManager.java:565)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate(SharedItemStateManager.java:1458)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1488)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:349)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:324)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:328)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1141)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:920)&lt;br/&gt;
&lt;br/&gt;
Thread C:&lt;br/&gt;
&amp;quot;127.0.0.1 [1297191138443] POST /bin/wcmcommand HTTP/1.0&amp;quot; nid=67 state=WAITING&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- waiting on &amp;lt;0xf820edb&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- locked &amp;lt;0xf820edb&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.lang.Object.wait(Native Method)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.lang.Object.wait(Object.java:485)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock.acquire(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking$ReadLockImpl.&amp;lt;init&amp;gt;(DefaultISMLocking.java:102)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking$ReadLockImpl.&amp;lt;init&amp;gt;(DefaultISMLocking.java:96)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.DefaultISMLocking.acquireReadLock(DefaultISMLocking.java:53)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireReadLock(SharedItemStateManager.java:1794)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:257)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:107)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:171)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:200)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemManager.getItemData(ItemManager.java:391)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:337)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:638)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.security.authorization.acl.ACLProvider$AclPermissions.canRead(ACLProvider.java:507)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- locked &lt;a href=&apos;mailto:java.lang.Object@6ad9b475&apos;&gt;java.lang.Object@6ad9b475&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.security.DefaultAccessManager.canRead(DefaultAccessManager.java:251)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.QueryResultImpl.isAccessGranted(QueryResultImpl.java:374)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.QueryResultImpl.collectScoreNodes(QueryResultImpl.java:353)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.QueryResultImpl.getResults(QueryResultImpl.java:310)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.SingleColumnQueryResult.&amp;lt;init&amp;gt;(SingleColumnQueryResult.java:70)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.QueryImpl.execute(QueryImpl.java:133)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.QueryImpl.execute(QueryImpl.java:127)&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12498405">JCR-2890</key>
            <summary>Deadlock in acl.EntryCollector / ItemManager</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Feb 2011 18:09:20 +0000</created>
                <updated>Thu, 21 Apr 2011 11:37:47 +0100</updated>
                    <resolved>Wed, 6 Apr 2011 14:00:50 +0100</resolved>
                            <version>2.2.4</version>
                                <fixVersion>2.0.5</fixVersion>
                <fixVersion>2.1.5</fixVersion>
                <fixVersion>2.2.7</fixVersion>
                <fixVersion>2.3</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12994359" author="jukkaz" created="Mon, 14 Feb 2011 16:42:12 +0000"  >Note that at least this specific deadlock scenario can not occur with the FineGrainedISMLocking strategy, since it never blocks incoming readers when there are writers waiting for the lock.</comment>
                    <comment id="13013985" author="jukkaz" created="Thu, 31 Mar 2011 15:09:04 +0100"  >In revision 1087304 I added a configuration option by which the DefaultISMLocking strategy can be switched from the default writer preference to reader preference, which at least works around this issue also for the DefaultISMLocking case.</comment>
                    <comment id="13016358" author="jukkaz" created="Wed, 6 Apr 2011 13:20:22 +0100"  >The attached patch solves this deadlock by using a fresh new session for processing ACL observation events.</comment>
                    <comment id="13016363" author="anchela" created="Wed, 6 Apr 2011 13:45:50 +0100"  >looks good. however, i would prefer keeping the event handling inside the EntryCollector class as there is not other usage of this.</comment>
                    <comment id="13016365" author="jukkaz" created="Wed, 6 Apr 2011 13:49:20 +0100"  >OK, thanks! I&amp;#39;ll put the code into an inner class in EntryCollector. I took it out mostly to make sure there are no accidental references to the systemSession variable.</comment>
                    <comment id="13016367" author="jukkaz" created="Wed, 6 Apr 2011 14:00:50 +0100"  >Committed with above-mentioned modifications in revision 1089436.</comment>
                    <comment id="13016391" author="jukkaz" created="Wed, 6 Apr 2011 15:22:47 +0100"  >Merged to the 2.2 branch in revision 1089453, to the 2.1 branch in revision 1089463 and to the 2.0 branch in revision 1089468.</comment>
                </comments>
                    <attachments>
                    <attachment id="12475582" name="0001-JCR-2890-Deadlock-in-acl.EntryCollector-ItemManager.patch" size="19032" author="jukkaz" created="Wed, 6 Apr 2011 13:20:22 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 6 Apr 2011 12:45:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78135</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190779</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>