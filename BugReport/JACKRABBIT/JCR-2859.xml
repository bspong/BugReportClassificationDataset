<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:57:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2859/JCR-2859.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2859] Make open scoped locks recoverable</title>
                <link>https://issues.apache.org/jira/browse/JCR-2859</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The lock tokens for open scoped locks are currently tied to the session which created the lock. If the session dies (for whatever reason) there is no way to recover the lock and unlock the node.&lt;br/&gt;
There is a theoretical way of adding the lock token to another session, but in most cases the lock token is not available.&lt;br/&gt;
&lt;br/&gt;
Fortunately, the spec allows to relax this behaviour and I think it would make sense to allow all sessions from the same user to unlock the node - this is still in compliance with the spec but would make unlocked locked nodes possible in a programmatic way.</description>
                <environment></environment>
            <key id="12494697">JCR-2859</key>
            <summary>Make open scoped locks recoverable</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="reschke">Julian Reschke</assignee>
                                <reporter username="cziegeler">Carsten Ziegeler</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jan 2011 09:23:04 +0000</created>
                <updated>Wed, 25 Jan 2012 13:06:24 +0000</updated>
                    <resolved>Thu, 12 Jan 2012 18:17:05 +0000</resolved>
                                            <fixVersion>2.3.7</fixVersion>
                                <component>locks</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12977706" author="cedric" created="Wed, 5 Jan 2011 09:57:23 +0000"  >It could also be possible to store the lock tocken somewhere (on the locked node ?, on the node state ?), so that it may be retrieved on demand and set on the current session.&lt;br/&gt;
&lt;br/&gt;
From my POV, it may be too &amp;quot;dangerous&amp;quot; to allow any session from the same user to unlock the node.&lt;br/&gt;
What if the session which initially locked the node is still alive ?</comment>
                    <comment id="12977716" author="cziegeler" created="Wed, 5 Jan 2011 10:30:05 +0000"  >There is no API in JCR to get the lock token and I think storing it somewhere accessible makes the token available to everyone not just the user who created the lock.&lt;br/&gt;
&lt;br/&gt;
Now I don&amp;#39;t consider this a great danger - having a locked node which can never be unlocked again, sounds more problematic too me.&lt;br/&gt;
&lt;br/&gt;
But I guess this should be made configurable - default being the old behaviour</comment>
                    <comment id="12977797" author="stefan@jira" created="Wed, 5 Jan 2011 15:52:17 +0000"  >&amp;gt; There is a theoretical way of adding the lock token to another session, but in most cases the lock token is not available. &lt;br/&gt;
&lt;br/&gt;
why? if a client does create an open-scoped lock (he has to do so explicitly) he&amp;#39;s responsible for persisting the lock token&lt;br/&gt;
for future use. if the client doesn&amp;#39;t want to do that he should use session-scoped locks instead.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; There is no API in JCR to get the lock token &lt;br/&gt;
&lt;br/&gt;
LockManager.lock(...) returns a Lock instance =&amp;gt; Lock.getLockToken()&lt;br/&gt;
&lt;br/&gt;
&amp;gt;  I think it would make sense to allow all sessions from the same user to unlock the node&lt;br/&gt;
&lt;br/&gt;
-1, i&amp;#39;d consider this rather a hack; the current behavior is IMO correct. </comment>
                    <comment id="12977804" author="cziegeler" created="Wed, 5 Jan 2011 16:00:51 +0000"  >Session scoped locks do not work in a clustered env - so either this has to be fixed or that; otherwise locks in a clustered env are a pain to use</comment>
                    <comment id="12977805" author="cziegeler" created="Wed, 5 Jan 2011 16:01:38 +0000"  >&amp;gt; LockManager.lock(...) returns a Lock instance =&amp;gt; Lock.getLockToken() &lt;br/&gt;
Yes I know, what I meant above is: there is no way to get a lock token if you did not lock the node yourself</comment>
                    <comment id="12977821" author="jukkaz" created="Wed, 5 Jan 2011 16:23:26 +0000"  >I would treat this as an administration operation that normal client sessions should not be able to do. We could for example allow admin sessions (or sessions with some special privilege) to unlock any locks in the repository.</comment>
                    <comment id="12977838" author="cedric" created="Wed, 5 Jan 2011 16:53:21 +0000"  >I tend to agree with Stefan that it&amp;#39;s the client responsibility to store lock tockens.&lt;br/&gt;
It&amp;#39;s the way I&amp;#39;m managing locks in my applications.&lt;br/&gt;
&lt;br/&gt;
But it may happen some failures (either in the client code or in JR code) that make the tocken unrecoverable.&lt;br/&gt;
&lt;br/&gt;
Giving the possibility to have some admin feature to cover such cases in IMHO a very good thing.&lt;br/&gt;
Right now, I have to stop the application (which may be very annoying in production) and modify the locks file by hand.&lt;br/&gt;
&lt;br/&gt;
So a big +1 to Jukka&amp;#39;s proposal, if client code is able to have access to such special sessions.&lt;br/&gt;
</comment>
                    <comment id="12977861" author="cziegeler" created="Wed, 5 Jan 2011 17:24:54 +0000"  >I&amp;#39;m fine with Jukka&amp;#39;s proposal as well - my idea was based on another repository implementation I&amp;#39;ve seen - in the end I don&amp;#39;t care what the exact way is, as long as it is possible</comment>
                    <comment id="12985303" author="janandith" created="Sun, 23 Jan 2011 12:18:44 +0000"  >Attached a test case for the scenario described in this JIRA,&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m working on  a patch. &lt;br/&gt;
&lt;br/&gt;
The solution I&amp;#39;m working on is as follows,&lt;br/&gt;
&lt;br/&gt;
1. Store lock tokens when a node is locked using LockManager.&lt;br/&gt;
2. Add the locked tokens from the stored location to the session when session is created if principal is AdminPrincipal.&lt;br/&gt;
3. Remove the lock token from the store when the node is unlocked using admin session.&lt;br/&gt;
&lt;br/&gt;
I would like to know the following,&lt;br/&gt;
&lt;br/&gt;
1. Will there be any consequences in above solution ?.&lt;br/&gt;
2. What is the best place to store the lock tokens ? . Is it in a node like ex: /locktokens or a file)&lt;br/&gt;
3. Any improvements, suggestions ?.</comment>
                    <comment id="12985680" author="jukkaz" created="Mon, 24 Jan 2011 13:37:15 +0000"  >I would rather not add extra lock tokens to an admin session, since that would muddy the waters on who is actually owning or holding a lock at a time. Instead I&amp;#39;d simply give an admin session the right to unlock any open-scoped lock, regardless of whether it holds the lock token or not.&lt;br/&gt;
&lt;br/&gt;
Note also that the tokens of all open scoped locks are already stored by the repository in a &amp;quot;locks&amp;quot; file so that they will survive over repository restarts. But as mentioned above, you probably don&amp;#39;t need to worry about the tokens when implementing this.</comment>
                    <comment id="12996856" author="janandith" created="Sat, 19 Feb 2011 20:39:42 +0000"  >Attached a patch. If the session is an admin session and lock is open scoped the session will be&lt;br/&gt;
the lock holder so it can be unlocked.&lt;br/&gt;
&lt;br/&gt;
Modified AbstractLockTest and OpenScopedLockTest to work with&lt;br/&gt;
new feature.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13169516" author="reschke" created="Wed, 14 Dec 2011 17:29:56 +0000"  >&amp;gt; Attached a patch. If the session is an admin session and lock is open scoped the session will be&lt;br/&gt;
the lock holder so it can be unlocked. &lt;br/&gt;
&lt;br/&gt;
I think this is problematic. Consider processes running in admin sessions trying to synchronize/reserve using locks. If all admin locks are essentially shared by all admin sessions, this will break big time.&lt;br/&gt;
</comment>
                    <comment id="13174880" author="reschke" created="Thu, 22 Dec 2011 16:22:20 +0000"  >I believe there&amp;#39;s a better way to do this; which happens to be what&amp;#39;s used in WebDAV as well (yeah for consistency):&lt;br/&gt;
&lt;br/&gt;
a) define a class of users that are &amp;quot;lock breakers&amp;quot;, for now, the admin&lt;br/&gt;
b) to these users, provide the lock token (instead of returning null); this is allowed per JSR-283, &lt;a href=&quot;http://www.day.com/specs/jcr/2.0/17_Locking.html#17.12.4%20Getting%20a%20Lock%20Token&quot;&gt;http://www.day.com/specs/jcr/2.0/17_Locking.html#17.12.4%20Getting%20a%20Lock%20Token&lt;/a&gt;&lt;br/&gt;
c) then, the lock breaker can add the lock token to the Session and perform the unlock()</comment>
                    <comment id="13176213" author="reschke" created="Tue, 27 Dec 2011 16:04:31 +0000"  >Proposed patch, adding a test case.&lt;br/&gt;
&lt;br/&gt;
Note this also changes quite a few existing tests that assume that getLockToken has to return null, when it doesn&amp;#39;t need to according to the spec. I just made those pass for now, but they need an additional look.</comment>
                    <comment id="13176630" author="fmeschbe" created="Wed, 28 Dec 2011 12:48:27 +0000"  >I like the lock breaker idea.&lt;br/&gt;
&lt;br/&gt;
Shouldn&amp;#39;t we push this a step forward and rename the isAdmin method to isLockbreaker and introduce a &amp;quot;lockbreaker&amp;quot; group and require the session to be a member of that group ? Kind of like a well known group name like administrators and everyone ?</comment>
                    <comment id="13176634" author="reschke" created="Wed, 28 Dec 2011 12:54:33 +0000"  >&lt;br/&gt;
&amp;gt; Shouldn&amp;#39;t we push this a step forward and rename the isAdmin method to isLockbreaker and introduce a &amp;quot;lockbreaker&amp;quot; group and require the session to be a member of that group ? Kind of like a well known group name like administrators and everyone ? &lt;br/&gt;
&lt;br/&gt;
Yes, something like that. And make admin automatically a lockbreaker, I assume.&lt;br/&gt;
&lt;br/&gt;
Do we have other code that works in a similar way where I could steal code?&lt;br/&gt;
&lt;br/&gt;
(in the meantime I&amp;#39;ll fix &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3195&quot; title=&quot;wrong assumptions in test cases about lock tokens&quot;&gt;&lt;strike&gt;JCR-3195&lt;/strike&gt;&lt;/a&gt; which will make this change smaller)</comment>
                    <comment id="13176650" author="reschke" created="Wed, 28 Dec 2011 13:54:21 +0000"  >Updated proposed patch, incl. a test case.&lt;br/&gt;
&lt;br/&gt;
Note this also changes quite a few existing tests that assume that getLockToken has to return null, when it doesn&amp;#39;t need to according to the spec.&lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s left to do is to incorporate Felix&amp;#39; proposal to allow this based on the membership in a &amp;quot;lock breaker&amp;quot; group.</comment>
                    <comment id="13178768" author="anchela" created="Tue, 3 Jan 2012 15:14:01 +0000"  >imo loosing a lock token should be considered a mistake with the API consumer rather than something that&lt;br/&gt;
occurs on a regular basis. while i am fine with providing a fallback in case the token is indeed lost, i am&lt;br/&gt;
therefore not convinced that having a group that is allowed to see all lock tokens in the repository would be&lt;br/&gt;
a wise move. apart from the fact that i consider this an edge case that should not be used on a regular&lt;br/&gt;
basis, being member of a given group will not guarantee that a given user is allowed to lock/unlock a&lt;br/&gt;
given node but only expose the lock token (in contrast to the admin).&lt;br/&gt;
&lt;br/&gt;
thus, i&amp;#39;m in favor of the latest patch by julian. however, -1 for allow breaking locks based on group membership.&lt;br/&gt;
</comment>
                    <comment id="13178789" author="reschke" created="Tue, 3 Jan 2012 15:46:40 +0000"  >+1 for starting with a small change (thus leaving it to admins).&lt;br/&gt;
&lt;br/&gt;
That being said, maybe we should also try to mitigate the effects of lost lock tokens? For instance, by changing the default timeout from &amp;quot;Infinity&amp;quot; to something reasonable? </comment>
                    <comment id="13178798" author="anchela" created="Tue, 3 Jan 2012 16:12:08 +0000"  >&amp;gt; by changing the default timeout from &amp;quot;Infinity&amp;quot; to something reasonable&lt;br/&gt;
&lt;br/&gt;
yes. that definitely makes sense... maybe we could even make the default timeout part of the workspace &lt;br/&gt;
configuration as the preferred timeout may vary between different types of applications.&lt;br/&gt;
in any case we should clarify that as a general rule it is preferable to specify a reasonable timeout&lt;br/&gt;
suited for the situation when creating a new lock... LockManager#lock always takes a timeout hint, while &lt;br/&gt;
Node.lock (which doesn&amp;#39;t support it) has been deprecated as of JSR 283.</comment>
                    <comment id="13179527" author="reschke" created="Wed, 4 Jan 2012 14:46:10 +0000"  >So I have left the patch as proposed, allowing admin users to get the lock token, enabling them to unlock the node.&lt;br/&gt;
&lt;br/&gt;
Added &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3199&quot; title=&quot;workspace-wide default for lock timeout&quot;&gt;&lt;strike&gt;JCR-3199&lt;/strike&gt;&lt;/a&gt; as a change request (make the default lock time out configurable).</comment>
                    <comment id="13181219" author="reschke" created="Fri, 6 Jan 2012 10:08:11 +0000"  >causes breakage in jcr2dav tests</comment>
                    <comment id="13184995" author="reschke" created="Thu, 12 Jan 2012 14:45:00 +0000"  >The problem is caused by LockInfoImpl in SPI assuming that seeing the lock token implies owning the Lock.</comment>
                    <comment id="13185096" author="reschke" created="Thu, 12 Jan 2012 17:45:30 +0000"  >proposed patch</comment>
                    <comment id="13187840" author="jukkaz" created="Tue, 17 Jan 2012 18:04:37 +0000"  >Merged to the 2.4 branch in revision 1232513.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12536491">JCR-3195</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12537186">JCR-3199</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12510394" name="JCR-2859.diff" size="14584" author="reschke" created="Thu, 12 Jan 2012 17:45:29 +0000" />
                    <attachment id="12508756" name="JCR-2859.diff" size="8668" author="reschke" created="Wed, 28 Dec 2011 13:54:21 +0000" />
                    <attachment id="12471487" name="JCR-2859.patch" size="5336" author="janandith" created="Sat, 19 Feb 2011 20:40:35 +0000" />
                    <attachment id="12469073" name="OpenScopeLockTest.java" size="2565" author="janandith" created="Sun, 23 Jan 2011 12:18:44 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Jan 2011 09:57:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>36298</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>241733</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>