<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:31:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-672/JCR-672.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-672] Deadlock on concurrent save/checkin operations possible</title>
                <link>https://issues.apache.org/jira/browse/JCR-672</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Save and checkin operations are trying to acquire 2 locks in different order, what leads to deadlock.&lt;br/&gt;
&lt;br/&gt;
-&amp;gt;save&lt;br/&gt;
1.SharedItemStateManager.acquireWriteLock&lt;br/&gt;
2.AbstractVersionManager.acquireWriteLock	-&amp;gt;	locked&lt;br/&gt;
&lt;br/&gt;
-&amp;gt;checkin&lt;br/&gt;
1.AbstractVersionManager.acquireWriteLock&lt;br/&gt;
2.SharedItemStateManager.acquireReadLock	-&amp;gt;	locked&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Thread-4&amp;quot; prio=6 tid=0x0312d840 nid=0x824 in Object.wait() [0x03cef000..0x03cefa68]&lt;br/&gt;
	at java.lang.Object.wait(Native Method)&lt;br/&gt;
	- waiting on &amp;lt;0x23210968&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock)&lt;br/&gt;
	at java.lang.Object.wait(Unknown Source)&lt;br/&gt;
	at EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock.acquire(Unknown Source)&lt;br/&gt;
	- locked &amp;lt;0x23210968&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$WriterLock)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.AbstractVersionManager.acquireWriteLock(AbstractVersionManager.java:124)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.VersionManagerImpl.setNodeReferences(VersionManagerImpl.java:413)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.VersionItemStateProvider.setNodeReferences(VersionItemStateProvider.java:125)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:699)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:810)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:313)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:302)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:295)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1204)&lt;br/&gt;
	- locked &amp;lt;0x2332eaa0&amp;gt; (a org.apache.jackrabbit.core.XASessionImpl)&lt;br/&gt;
	at JrTestDeadlock.run(JrTestDeadlock.java:87)&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Thread-3&amp;quot; prio=6 tid=0x0312db18 nid=0xa04 in Object.wait() [0x03caf000..0x03cafae8]&lt;br/&gt;
	at java.lang.Object.wait(Native Method)&lt;br/&gt;
	- waiting on &amp;lt;0x232d1360&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)&lt;br/&gt;
	at java.lang.Object.wait(Unknown Source)&lt;br/&gt;
	at EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock.acquire(Unknown Source)&lt;br/&gt;
	- locked &amp;lt;0x232d1360&amp;gt; (a EDU.oswego.cs.dl.util.concurrent.WriterPreferenceReadWriteLock$ReaderLock)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireReadLock(SharedItemStateManager.java:1361)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.hasItemState(SharedItemStateManager.java:270)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.hasItemState(LocalItemStateManager.java:180)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.hasItemState(XAItemStateManager.java:252)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.hasItemState(SessionItemStateManager.java:188)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemManager.itemExists(ItemManager.java:256)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.hasProperty(NodeImpl.java:1509)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.InternalFrozenNodeImpl.checkin(InternalFrozenNodeImpl.java:276)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.InternalFrozenNodeImpl.checkin(InternalFrozenNodeImpl.java:248)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.InternalVersionHistoryImpl.checkin(InternalVersionHistoryImpl.java:440)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.AbstractVersionManager.checkin(AbstractVersionManager.java:397)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.VersionManagerImpl$2.run(VersionManagerImpl.java:289)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.VersionManagerImpl$DynamicESCFactory.doSourced(VersionManagerImpl.java:611)&lt;br/&gt;
	- locked &amp;lt;0x2320c5d8&amp;gt; (a org.apache.jackrabbit.core.version.VersionManagerImpl$DynamicESCFactory)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.VersionManagerImpl.checkin(VersionManagerImpl.java:285)&lt;br/&gt;
	at org.apache.jackrabbit.core.version.XAVersionManager.checkin(XAVersionManager.java:161)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.checkin(NodeImpl.java:2944)&lt;br/&gt;
	at JrTestDeadlock.run(JrTestDeadlock.java:103)&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12358396">JCR-672</key>
            <summary>Deadlock on concurrent save/checkin operations possible</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ppakulski">Przemo Pakulski</reporter>
                        <labels>
                    </labels>
                <created>Tue, 12 Dec 2006 11:00:34 +0000</created>
                <updated>Mon, 6 Aug 2007 07:45:54 +0100</updated>
                    <resolved>Fri, 27 Apr 2007 17:01:51 +0100</resolved>
                            <version>0.9</version>
                <version>1.0</version>
                <version>1.0.1</version>
                <version>1.1</version>
                <version>1.1.1</version>
                <version>1.2.1</version>
                <version>1.2.2</version>
                <version>1.2.3</version>
                <version>1.3</version>
                                <fixVersion>1.3.1</fixVersion>
                                <component>versioning</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12457666" author="tripod" created="Tue, 12 Dec 2006 11:14:47 +0000"  >could have been introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;. </comment>
                    <comment id="12457693" author="jukkaz" created="Tue, 12 Dec 2006 12:53:17 +0000"  >You marked this as occurring in 1.1? If correct, then it shouldn&amp;#39;t be caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;, since it&amp;#39;s not included in either 1.1 or 1.1.1.</comment>
                    <comment id="12457695" author="jukkaz" created="Tue, 12 Dec 2006 13:00:49 +0000"  >The proper solution to this issue would probably be to acquire the SharedItemStateManager read lock for the entire checkin operation.</comment>
                    <comment id="12457707" author="ppakulski" created="Tue, 12 Dec 2006 13:26:49 +0000"  >It is occuring in trunk.&lt;br/&gt;
&lt;br/&gt;
I have checked 1.1 by accident then I couldn&amp;#39;t change this ...</comment>
                    <comment id="12458117" author="jukkaz" created="Wed, 13 Dec 2006 13:49:10 +0000"  >Cleared the 1.1 tag.&lt;br/&gt;
&lt;br/&gt;
However, I still don&amp;#39;t think this is caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;, as the deadlock occurs on line 397 of the AbstractVersionManager.checkin() method. That line was covered by the AbstractVersionManager write lock already before &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt; extended the scope of that lock.&lt;br/&gt;
&lt;br/&gt;
Can you reproduce this issue on Jackrabbit 1.1.1?&lt;br/&gt;
</comment>
                    <comment id="12458141" author="ppakulski" created="Wed, 13 Dec 2006 14:33:38 +0000"  >You&amp;#39;re right deadlock has not been introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;, but it seems that currently is easier to reproduce it.&lt;br/&gt;
&lt;br/&gt;
Inconsistent order of acquiring locks was already there. SharedItemStateManager  read lock should be acquired first, or if both components (SharedItemStateManager, AbstractVersionManager) ae really coupled together, maybe solution is to get rid of one and use single lock instead.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12458147" author="jukkaz" created="Wed, 13 Dec 2006 14:41:52 +0000"  >&amp;gt; You&amp;#39;re right deadlock has not been introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;, but it seems that&lt;br/&gt;
&amp;gt; currently is easier to reproduce it.&lt;br/&gt;
&lt;br/&gt;
This sounds reasonable, since the write lock in AbstractVersionManager covers and extra getProperty(JCR_PREDECESSORS) call now after &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-546&quot; title=&quot;Deadlock during checkin&quot;&gt;&lt;strike&gt;JCR-546&lt;/strike&gt;&lt;/a&gt;. This increases the time the write lock is acquired, thus increasing the window when the deadlock can occur.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; SharedItemStateManager read lock should be acquired first, or if both components&lt;br/&gt;
&amp;gt; (SharedItemStateManager, AbstractVersionManager) ae really coupled together,&lt;br/&gt;
&amp;gt; maybe solution is to get rid of one and use single lock instead.&lt;br/&gt;
&lt;br/&gt;
Having two locks makes sense, since a versioning operation in one workspace shouldn&amp;#39;t affect normal operations in another workspace. Thus I think the proper solution is indeed to extend the scope of the SharedItemStateManager read lock.</comment>
                    <comment id="12481867" author="cornedbee" created="Sat, 17 Mar 2007 15:53:52 +0000"  >Is there anything a non-Jackrabbit-developer can do to help? This bug is regularly locking up one of my projects (and in consequence the entire Tomcat process) and I need it fixed ASAP, but I don&amp;#39;t know my way around the codebase enough to fix it myself.</comment>
                    <comment id="12481921" author="jukkaz" created="Sun, 18 Mar 2007 09:12:01 +0000"  >&amp;gt; Is there anything a non-Jackrabbit-developer can do to help?&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m afraid there&amp;#39;s relatively little to do. Reporting all known deadlock occurrences with as much detail as possible would help, but in the end someone needs to bite the bullet and start rethinking the locking behaviour within jackrabbit-core.&lt;br/&gt;
&lt;br/&gt;
Some people have workarounds that explicitly synchronize all the versioning operations of concurrent sessions. Documenting such a workaround with example code on the Jackrabbit wiki would be appreciated, but of course it&amp;#39;s still just a workaround.</comment>
                    <comment id="12481956" author="cornedbee" created="Sun, 18 Mar 2007 16:25:34 +0000"  >&amp;gt; Reporting all known deadlock occurrences with as much detail as possible would help&lt;br/&gt;
&lt;br/&gt;
Well, there&amp;#39;s not much to report. My stack traces are pretty much identical to the ones in the report. The program uses versioning, but no transactions.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Some people have workarounds that explicitly synchronize all the versioning operations of concurrent sessions.&lt;br/&gt;
&lt;br/&gt;
Yes, looks like I&amp;#39;ll have to take the performance hit and do that. (The extremely coarse-grained locking of this does not make me happy ...)</comment>
                    <comment id="12492328" author="mreutegg" created="Fri, 27 Apr 2007 17:01:51 +0100"  >The calls to VirtualItemStateProvider.setNodeReferences() do not have to be within the scope of the write lock. All virtual item state providers are repository wide anyway and must implement their own locking. Locking the workspace where the call originated is unnecessary and does not help here.&lt;br/&gt;
&lt;br/&gt;
Moved the code further down where the write lock had been downgraded to a read-lock.&lt;br/&gt;
&lt;br/&gt;
Also added test cases: ConcurrentVersioningTest&lt;br/&gt;
&lt;br/&gt;
The tests cover the following cases:&lt;br/&gt;
- concurrently create version histories&lt;br/&gt;
- concurrently do checkin/checkouts&lt;br/&gt;
- concurrently create version histories and do checkin/checkouts&lt;br/&gt;
&lt;br/&gt;
Fixed in revision: 533152</comment>
                    <comment id="12492329" author="mreutegg" created="Fri, 27 Apr 2007 17:02:26 +0100"  >Probably occurs in all released versions.</comment>
                    <comment id="12501346" author="jukkaz" created="Mon, 4 Jun 2007 21:22:06 +0100"  >Merged to the 1.3 branch in revision 544244.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                                <inwardlinks description="is duplicated by">
                            <issuelink>
            <issuekey id="12364901">JCR-790</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 12 Dec 2006 11:14:47 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>80342</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191166</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>