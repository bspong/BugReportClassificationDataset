<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:42:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1633/JCR-1633.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1633] When node is created and locked in same transaction, exception is thrown</title>
                <link>https://issues.apache.org/jira/browse/JCR-1633</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Following code fails when executed inside an XA transaction:&lt;br/&gt;
&lt;br/&gt;
Node n = session.getRootNode().addNode(&amp;quot;n&amp;quot;);&lt;br/&gt;
n.addMixin(&amp;quot;mix:lockable&amp;quot;);&lt;br/&gt;
session.save();&lt;br/&gt;
Lock lock = n.lock(false, false);&lt;br/&gt;
&lt;br/&gt;
Stacktrace is&lt;br/&gt;
&lt;br/&gt;
Caused by: javax.transaction.xa.XAException&lt;br/&gt;
	at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:155)&lt;br/&gt;
	at org.apache.jackrabbit.core.XASessionImpl.commit(XASessionImpl.java:337)&lt;br/&gt;
	at org.apache.jackrabbit.jca.TransactionBoundXAResource.commit(TransactionBoundXAResource.java:39)&lt;br/&gt;
	at org.apache.geronimo.transaction.manager.WrapperNamedXAResource.commit(WrapperNamedXAResource.java:47)&lt;br/&gt;
	at org.apache.geronimo.transaction.manager.TransactionImpl.commit(TransactionImpl.java:301)&lt;br/&gt;
	... 32 more&lt;br/&gt;
Caused by: org.apache.jackrabbit.core.TransactionException: Unable to update.&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:275)&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.XALockManager.prepare(XALockManager.java:245)&lt;br/&gt;
	at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:138)&lt;br/&gt;
	... 36 more&lt;br/&gt;
Caused by: javax.jcr.ItemNotFoundException: failed to build path of 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5&lt;br/&gt;
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:407)&lt;br/&gt;
	at org.apache.jackrabbit.core.CachingHierarchyManager.getPath(CachingHierarchyManager.java:272)&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.LockManagerImpl.getPath(LockManagerImpl.java:651)&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.LockManagerImpl.internalLock(LockManagerImpl.java:276)&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.XAEnvironment$LockInfo.update(XAEnvironment.java:409)&lt;br/&gt;
	at org.apache.jackrabbit.core.lock.XAEnvironment.prepare(XAEnvironment.java:273)&lt;br/&gt;
	... 38 more&lt;br/&gt;
Caused by: org.apache.jackrabbit.core.state.NoSuchItemStateException: 48fb59d8-ac77-4b9f-8b53-9f2492dca5e5&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:189)&lt;br/&gt;
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getItemState(HierarchyManagerImpl.java:188)&lt;br/&gt;
	at org.apache.jackrabbit.core.HierarchyManagerImpl.getPath(HierarchyManagerImpl.java:402)&lt;br/&gt;
	... 43 more&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment>Jackrabbit Core 1.4.4, Jencks 2.0, Springmodules 0.8a, Jackrabbit JCA 1.4</environment>
            <key id="12397184">JCR-1633</key>
            <summary>When node is created and locked in same transaction, exception is thrown</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="c_koell">Claus K&#246;ll</assignee>
                                <reporter username="rpuch">Roman Puchkovskiy</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 May 2008 16:36:37 +0100</created>
                <updated>Tue, 9 Jun 2009 16:22:30 +0100</updated>
                    <resolved>Mon, 11 May 2009 08:06:28 +0100</resolved>
                            <version>core 1.4.3</version>
                                <fixVersion>1.5.6</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12601172" author="rpuch" created="Fri, 30 May 2008 16:38:13 +0100"  >Attaching a full test case. It&amp;#39;s a Maven project with one test method.</comment>
                    <comment id="12601239" author="rpuch" created="Fri, 30 May 2008 21:08:52 +0100"  >Attaching a simplified test case.</comment>
                    <comment id="12601277" author="alexander.klimetschek" created="Fri, 30 May 2008 23:30:09 +0100"  >Although the exception might not be specific hinting on the error, IMHO this is correct behaviour. A node can only be locked once it is saved: see JCR 1.0 spec (or javadocs), 8.4.11 Node.lock: &amp;quot;An InvalidItemStateException  is thrown if this node has pending unsaved changes.&amp;quot; In the context of transactions, validity checks and persistence moves from the save() method to the commit of the transaction.</comment>
                    <comment id="12601341" author="rpuch" created="Sat, 31 May 2008 05:47:53 +0100"  >Node is actually saved (session.save() in one test, testRootNode.save() in the another). Yes, it&amp;#39;s not _persisted_ immediately, but for the caller who is in this transaction this should look like as there&amp;#39;s no any transaction. So I don&amp;#39;t see what is incorrect here.&lt;br/&gt;
For instance, for versioning and checkin() there&amp;#39;s same situation: you cannot checkin a node with unsaved changes, but node which was just created and saved still may be checked in in a transaction. Following test passes, while its only difference is that it uses checkin() instead of lock():&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void testCheckinInTx() throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UserTransaction tx = new UserTransactionImpl(superuser);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tx.begin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node n = testRootNode.addNode(nodeName1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n.addMixin(mixVersionable);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;testRootNode.save();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n.checkin();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tx.commit();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</comment>
                    <comment id="12631750" author="jukkaz" created="Wed, 17 Sep 2008 13:00:02 +0100"  >See also the duplicate &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1702&quot; title=&quot;Unable to create/lock Node in one Transaction&quot;&gt;&lt;strike&gt;JCR-1702&lt;/strike&gt;&lt;/a&gt; that has an alternative patch and related commentary by Claus K&amp;#xF6;ll.</comment>
                    <comment id="12678337" author="c_koell" created="Tue, 3 Mar 2009 15:00:07 +0000"  >As Alexander wrote i give him partly right.  I understand the specification in that way that you can not lock a node till it has pending changes.&lt;br/&gt;
In the context of a transaction it is a little bit difference. I see the Transaction as a atomic operation so you should be able to lock a node after create and save in one transaction&lt;br/&gt;
although the persistence moves to the commit of the transaction.&lt;br/&gt;
&lt;br/&gt;
I will provide a patch that handles this behaviour with some more tescases so we can see if it works as described in the specification.</comment>
                    <comment id="12706787" author="c_koell" created="Thu, 7 May 2009 11:14:33 +0100"  >Testcase testLockNewNode() now enabled and working ...</comment>
                    <comment id="12707916" author="c_koell" created="Mon, 11 May 2009 08:06:27 +0100"  >resolved in 773483</comment>
                    <comment id="12711221" author="jukkaz" created="Wed, 20 May 2009 17:49:24 +0100"  >Merged to the 1.x branch in revision 776761.</comment>
                    <comment id="12713065" author="jukkaz" created="Tue, 26 May 2009 16:54:17 +0100"  >Merged the fix further down to the 1.5 branch in revision 778775. This fix will be going out in Jackrabbit 1.5.6.</comment>
                </comments>
                    <attachments>
                    <attachment id="12407447" name="patch.txt" size="8230" author="c_koell" created="Thu, 7 May 2009 11:14:33 +0100" />
                    <attachment id="12383120" name="test-create-and-lock-in-same-tx.zip" size="5971" author="rpuch" created="Fri, 30 May 2008 16:38:13 +0100" />
                    <attachment id="12383138" name="XALockTest.java" size="693" author="rpuch" created="Fri, 30 May 2008 21:08:52 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 30 May 2008 22:30:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78479</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190198</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>