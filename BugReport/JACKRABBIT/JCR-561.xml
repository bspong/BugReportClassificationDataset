<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:47:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-561/JCR-561.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-561] Add support to provide custom classloader for class instantiation from configuration</title>
                <link>https://issues.apache.org/jira/browse/JCR-561</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The configuration framework is based around a BaseConfig class, which provides functionality to instantiate a class whose name is configured in the repository configuration file. Examples of such classes are the FileSystem or the PersistenceManager elements.&lt;br/&gt;
&lt;br/&gt;
The current implementation of the BeanConfig.newInstance() method is to use the &amp;quot;default classloader&amp;quot; to load configured classes. That is, the class loader of the BeanConfig class is actually used. This is - generally - the class loader which loads the repository. In certain environments, classes may be provided from outside the core repository class loader. An example fo such an environment is an OSGi setup where each bundle gets its own class laoder, which is separate from all other class loaders except declared by configuration.&lt;br/&gt;
&lt;br/&gt;
I propose to enhance the BeanConfig class as follows:&lt;br/&gt;
&lt;br/&gt;
public class BeanConfig {&lt;br/&gt;
&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;// Current default class loader, default is BeanConfig&amp;#39;s class loader&lt;br/&gt;
&amp;nbsp;private static ClassLoader defaultClassLoader =&lt;br/&gt;
BeanConfig.class.getClassLoader();&lt;br/&gt;
&amp;nbsp;// Current instance class loader&lt;br/&gt;
&amp;nbsp;private ClassLoader classLoader;&lt;br/&gt;
&amp;nbsp;...&lt;br/&gt;
&amp;nbsp;// Sets the default class loader for new BeanConfig instances&lt;br/&gt;
&amp;nbsp;public static void setDefaultClassLoader(ClassLoader loader);&lt;br/&gt;
&amp;nbsp;// Returns the default class loader for new BeanConfig instances&lt;br/&gt;
&amp;nbsp;public static ClassLoader getClassLoader();&lt;br/&gt;
&amp;nbsp;// Sets the class loader of this BeanConfig instance&lt;br/&gt;
&amp;nbsp;public void setClassLoader(ClassLoader loader);&lt;br/&gt;
&amp;nbsp;// Returns the class loader of this BeanConfig instance&lt;br/&gt;
&amp;nbsp;public ClassLoader getClassLoader();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
The BeanConfig.newInstance method would then use the following to use the class:&lt;br/&gt;
&lt;br/&gt;
public Object newInstance() throws ConfigurationException {&lt;br/&gt;
&amp;nbsp;Class clazz = Class.forName(getClassName(), true, getClassLoader());&lt;br/&gt;
&amp;nbsp;...&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
This has also been discussed on the dev list: &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/jackrabbit-dev/200607.mbox/%3cae03024e0607272341l52aff9b2h3957131411790bc9@mail.gmail.com%3e&quot;&gt;http://mail-archives.apache.org/mod_mbox/jackrabbit-dev/200607.mbox/%3cae03024e0607272341l52aff9b2h3957131411790bc9@mail.gmail.com%3e&lt;/a&gt;</description>
                <environment></environment>
            <key id="12349177">JCR-561</key>
            <summary>Add support to provide custom classloader for class instantiation from configuration</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="fmeschbe">Felix Meschberger</assignee>
                                <reporter username="fmeschbe">Felix Meschberger</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Sep 2006 11:40:09 +0100</created>
                <updated>Wed, 6 Sep 2006 09:15:55 +0100</updated>
                    <resolved>Mon, 4 Sep 2006 12:03:29 +0100</resolved>
                            <version>0.9</version>
                <version>1.0</version>
                <version>1.0.1</version>
                                <fixVersion>1.1</fixVersion>
                                <component>config</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12432487" author="fmeschbe" created="Mon, 4 Sep 2006 12:02:56 +0100"  >Added said extension in Rev. 440026.&lt;br/&gt;
&lt;br/&gt;
Use of this functionality is very crude as the default class loader has to be set before loading the configuration:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BeanConfig.setDefaultClassLoader(someNewClassLoader)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RepositoryConfig crc = RepositoryConfig.create(ins, home);&lt;br/&gt;
&lt;br/&gt;
This way, all BeanConfig instances (actually all configurtion objects extending BeanConfig) are set with the given someNewClassLoader. Of course, for this to work, the class loader set must also see the Jackrabbit classes.&lt;br/&gt;
&lt;br/&gt;
The default class loader used, if the setDefaultClassLoader is not called, is the class loader of the BeanConfig class. As such, this enhancement is fully backwards compatible.</comment>
                    <comment id="12432488" author="fmeschbe" created="Mon, 4 Sep 2006 12:03:29 +0100"  >As committed in Rev. 440026.</comment>
                    <comment id="12432782" author="fmeschbe" created="Wed, 6 Sep 2006 09:15:55 +0100"  >I think this can be closed now.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142250</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191543</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>