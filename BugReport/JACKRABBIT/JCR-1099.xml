<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:44:28 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1099/JCR-1099.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1099] jcr2spi NodeEntryImpl.getPath() blows stack due to getIndex() calling itself</title>
                <link>https://issues.apache.org/jira/browse/JCR-1099</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The jcr2spi NodeEntryImpl class contains logic that causes getIndex() to call itself.&lt;br/&gt;
&lt;br/&gt;
Calling code:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session sess = repo.login(creds);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node inboxNode = sess.getRootNode().getNode(&amp;quot;Inbox&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inboxNode.getPath(); &amp;lt;== blows stack&lt;br/&gt;
&lt;br/&gt;
Tracing reveals:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. NodeEntryImpl.getPath() ultimately calls getIndex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. getIndex() calls NodeState.getDefinition()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. which calls ItemDefinitionProviderImpl.getQNodeDefinition(...)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. which catches a RepositoryException then calls NodeEntryImpl.getWorkspaceId()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5. which calls NodeEntryImpl.getWorkspaceIndex()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6. which calls getIndex() (back to step 2, ad infinitum)&lt;br/&gt;
&lt;br/&gt;
Configuration:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;1. A configuration is loaded specifying in-memory persist manager&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;2. Config is wrapped in TransientRepository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;3. that&amp;#39;s wrapped in spi2jcr&amp;#39;s RepositoryService using default BatchReadConfig&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;4. a jcr2spi provider is instantiated that directly couples to spi2jcr&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;5. Node in question is created as follows:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session sess = repo.login(creds);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sess.getRootNode().addNode(&amp;quot;Inbox&amp;quot;, &amp;quot;nt:folder&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sess.save();&lt;br/&gt;
&lt;br/&gt;
I guess that&amp;#39;s about it.&lt;br/&gt;
David</description>
                <environment></environment>
            <key id="12377122">JCR-1099</key>
            <summary>jcr2spi NodeEntryImpl.getPath() blows stack due to getIndex() calling itself</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="drauschenbach">David Rauschenbach</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Aug 2007 22:12:17 +0100</created>
                <updated>Wed, 5 Mar 2008 15:40:11 +0000</updated>
                    <resolved>Mon, 22 Oct 2007 07:52:55 +0100</resolved>
                                                            <component>jackrabbit-spi</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12523824" author="reschke" created="Thu, 30 Aug 2007 12:19:15 +0100"  >Could you try changing ItemDefinitionProviderImpl.getQNodeDefinition() to catch a ConstraintViolationException instead of RepositoryException? &lt;br/&gt;
</comment>
                    <comment id="12523884" author="drauschenbach" created="Thu, 30 Aug 2007 18:05:04 +0100"  >That wouldn&amp;#39;t change the flow. I&amp;#39;m having a ConstraintViolationException thrown, so it&amp;#39;d get caught the same way. The exception message is &amp;quot;no matching child node definition found for {}Inbox&amp;quot;. I guess that&amp;#39;s my ultimate problem, that my effective node type object has empty named and unnamed node definition arrays. But those values are coming straight from the in-memory transient repository, through my SPI bridge, so I don&amp;#39;t see where the values could get dropped.&lt;br/&gt;
&lt;br/&gt;
Nevertheless, if those arrays are empty (maybe due to a counterpart flaw in spi2jcr?), this flow still seems to be invalid, since an SPI can return anything, and it should not trigger a crash.</comment>
                    <comment id="12523904" author="reschke" created="Thu, 30 Aug 2007 19:09:28 +0100"  >Understood and agreed. I just wanted to make sure it&amp;#39;s not a non-ConstraintViolationException that shouldn&amp;#39;t have been called in the first place.&lt;br/&gt;
</comment>
                    <comment id="12523905" author="drauschenbach" created="Thu, 30 Aug 2007 19:10:45 +0100"  >The bottom line, I think, is that in my case the jcr2spi bridge is unable to get around to making the getNodeDefinition SPI invocation, because the call to NodeEntry.getWorkspaceId()  at ItemDefinitionProviderImpl.java:90, which would provide the NodeId to use as the second argument, causes the recursion.</comment>
                    <comment id="12524023" author="anchela" created="Fri, 31 Aug 2007 08:34:01 +0100"  >i will take a look at it.&lt;br/&gt;
btw: jcr2spi is not released yet -&amp;gt; remove &amp;#39;affected version&amp;#39;&lt;br/&gt;
</comment>
                    <comment id="12524042" author="anchela" created="Fri, 31 Aug 2007 09:57:28 +0100"  >hi david&lt;br/&gt;
&lt;br/&gt;
i tried to reproduce the problem with the instructions you provided: &lt;br/&gt;
therefore i created a tests that creates and accesses a node as you did. running that test with my default setup (jcr2spi-spi2jcr-on-jackrabbit). that worked for me.&lt;br/&gt;
&lt;br/&gt;
second, i re-read your description regarding configuration setup. unfortunately i don&amp;#39;t get it.&lt;br/&gt;
what do you mean by:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;3. that&amp;#39;s wrapped in spi2jcr&amp;#39;s RepositoryService using default BatchReadConfig&amp;quot; ?&lt;br/&gt;
and&lt;br/&gt;
&amp;quot;4. a jcr2spi provider is instantiated that directly couples to spi2jcr&amp;quot; ?&lt;br/&gt;
&lt;br/&gt;
please provide additional information that allows me to understand your setup and reproduce the problem.&lt;br/&gt;
thanks&lt;br/&gt;
&lt;br/&gt;
angela</comment>
                    <comment id="12524114" author="drauschenbach" created="Fri, 31 Aug 2007 16:19:39 +0100"  >Thanks Angela,&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s what I mean by my spi2jcr setup (repository.xml already attached):&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Bring up the in-mem repository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final URL REPOSITORY_URL = getClass().getClassLoader().getResource(&amp;quot;/repository.xml&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;storageDir = new File(System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RepositoryConfig config = RepositoryConfig.create(REPOSITORY_URL.toURI(), storageDir.getAbsolutePath());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;repository = new TransientRepository(config);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Bring up the spi2jcr bridge in front of in-memory repository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BatchReadConfig batchReadConfig = new BatchReadConfig();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;RepositoryService spi2jcrRepositoryService = new RepositoryServiceImpl(repository, batchReadConfig);&lt;br/&gt;
&lt;br/&gt;
Next, I wrote an SPI that is coupled to that spi2jcrRepositoryService. I wrap my SPI in jcr2spi, so that&amp;#39;s what I meant by the direct coupling of a JCR front-end being invoked by unit tests, a jcr back-end that&amp;#39;s the in-mem store, and an SPI coupling inbetween.</comment>
                    <comment id="12524147" author="drauschenbach" created="Fri, 31 Aug 2007 18:52:05 +0100"  >Angela, in your test, make sure you don&amp;#39;t perform getPath() in the same session that created the test node. Your test would be invalid because of the cache being primed.</comment>
                    <comment id="12526003" author="reschke" created="Sun, 9 Sep 2007 17:18:43 +0100"  >I haven&amp;#39;t been able to reproduce this either.&lt;br/&gt;
&lt;br/&gt;
However, what&amp;#39;s clear is that a recursion can occur, because:&lt;br/&gt;
&lt;br/&gt;
- to build the path, we want to know whether the parent allows same-name siblings, so we need that node definition,&lt;br/&gt;
&lt;br/&gt;
- calculation the node definition inside JCR2SPI *can* lead to an exception, and&lt;br/&gt;
&lt;br/&gt;
- re-fetching the QNodeDef through SPI requires knowledge of the node id, whose construction may need the index.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12526126" author="reschke" created="Mon, 10 Sep 2007 12:19:21 +0100"  >OK, the problem can be relatively easily reproduced by changing ItemDefinitionProviderImpl.getQNodeDefinition() to&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public QNodeDefinition getQNodeDefinition(NodeState nodeState) throws RepositoryException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (nodeState.getHierarchyEntry().getParent() == null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return getRootNodeDefinition();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QNodeDefinition definition;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// TEST&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new ConstraintViolationException();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (RepositoryException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;definition = service.getNodeDefinition(sessionInfo, nodeState.getNodeEntry().getWorkspaceId());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (NodeTypeConflictException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;definition = service.getNodeDefinition(sessionInfo, nodeState.getNodeEntry().getWorkspaceId());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return definition;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I think we need to fix this, but I&amp;#39;m not sure where in the recursion the fix needs to take place.&lt;br/&gt;
</comment>
                    <comment id="12526314" author="drauschenbach" created="Tue, 11 Sep 2007 01:13:34 +0100"  >I have identified and resolved the trigger of this problem. In my SPI, my NodeTypeDefinition &amp;quot;propertyDefs&amp;quot; were not being populated.&lt;br/&gt;
&lt;br/&gt;
Fixing this bug is not a pressing issue for me now, and could probably be a low priority, since it is now only a matter of defensive programming, and preventing bad data from crashing the JVM, and also an issue of the stack overflow obscuring and complicating the problem solving process.&lt;br/&gt;
&lt;br/&gt;
Thx again, Angela and Julian.</comment>
                    <comment id="12531823" author="anchela" created="Tue, 2 Oct 2007 16:07:51 +0100"  >&amp;gt; I think we need to fix this, but I&amp;#39;m not sure where in the recursion the fix needs to take place. &lt;br/&gt;
&lt;br/&gt;
without having a close look at it, i would guess the best place would be the NodeEntry.getIndex.</comment>
                    <comment id="12533166" author="anchela" created="Mon, 8 Oct 2007 18:19:22 +0100"  >i see 2 possibilities to solve this (apart from the obvious one &amp;quot;get rid of SNSs&amp;quot; ;-)):&lt;br/&gt;
&lt;br/&gt;
1) only check for NodeDefinition.allowsSNS if the definition has been retrieved before.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if the definition is not yet present (which is the default for existing nodes), the index is calculated from the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parents child entries.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;potential drawback: more traffic to the server since the entries list probably more often get invalidated compared &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;to the chance, that no matching definition is found in the ItemDefinitionProvider (which would result in the &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;described problem).&lt;br/&gt;
&lt;br/&gt;
2) omit the fallback in ItemDefinitionProvider, that tries to retrieve the definition from the server&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if no matching definition can be found.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;drawback: if the definition is not available on the client, the retrieval of the definition fails with exception. i couldn&amp;#39;t&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;produce that since in my test case all definitions are available, but i&amp;#39;m quite sure that this would cause problems.&lt;br/&gt;
&lt;br/&gt;
so... basically i would prefer 2) but i think 1) is the proper solution to go for just for the sake of stability and that&lt;br/&gt;
special (unlikely?) case that no matching definition can be found....  &lt;br/&gt;
comments?&lt;br/&gt;
&lt;br/&gt;
angela</comment>
                    <comment id="12536582" author="anchela" created="Mon, 22 Oct 2007 07:52:55 +0100"  >resolved as described in variant 1).</comment>
                </comments>
                    <attachments>
                    <attachment id="12364789" name="repository.xml" size="1751" author="drauschenbach" created="Wed, 29 Aug 2007 22:15:10 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 30 Aug 2007 11:19:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78664</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192455</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>