<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:54:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-309/JCR-309.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-309] Extract the public API interfaces from o.a.j.core to o.a.j.api</title>
                <link>https://issues.apache.org/jira/browse/JCR-309</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>To better document and track the public JCR extensions and component API provided by Jackrabbit and to allow more room for refactoring within the Jackrabbit core, we shoud move (or create) the supported API interfaces to a new org.apache.jackrabbit.api package.&lt;br/&gt;
&lt;br/&gt;
At least the following interfaces should be moved along with any supporting implementation-independent classes:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* PersistenceManager&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* FileSystem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* AccessManager&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* QueryHandler&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* TextFilter&lt;br/&gt;
&lt;br/&gt;
Possible dependencies to implementation-specific classes should preferably be abstracted using extra interfaces.&lt;br/&gt;
&lt;br/&gt;
Also the workspace and node type administration methods should be published as Jackrabbit-specific extensions to the JCR API interfaces.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12328132">JCR-309</key>
            <summary>Extract the public API interfaces from o.a.j.core to o.a.j.api</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Thu, 26 Jan 2006 20:54:13 +0000</created>
                <updated>Fri, 13 Oct 2006 17:07:27 +0100</updated>
                    <resolved>Thu, 16 Feb 2006 19:06:24 +0000</resolved>
                                            <fixVersion>1.0</fixVersion>
                                <component>JCR API</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12364096" author="tripod" created="Fri, 27 Jan 2006 01:39:39 +0000"  >well, some of those groups are rather interfaces that provide a backend service, and are not usefull for the &amp;#39;client&amp;#39;. so i would devide:&lt;br/&gt;
&lt;br/&gt;
Client Interface:&lt;br/&gt;
- NodeType stuff&lt;br/&gt;
&lt;br/&gt;
Service Provider Interface&lt;br/&gt;
- PersistenceManager &lt;br/&gt;
- FileSystem &lt;br/&gt;
- AccessManager &lt;br/&gt;
- QueryHandler &lt;br/&gt;
- TextFilter &lt;br/&gt;
</comment>
                    <comment id="12364102" author="jukkaz" created="Fri, 27 Jan 2006 01:57:15 +0000"  >&amp;gt; well, some of those groups are rather interfaces that provide a backend service, and are not usefull for the &amp;#39;client&amp;#39;&lt;br/&gt;
&lt;br/&gt;
Agreed, that&amp;#39;s what I was trying to convey with &amp;quot;component API&amp;quot;. You are right that SPI is a better term for those interfaces.&lt;br/&gt;
&lt;br/&gt;
Perhaps we should create o.a.j.api for the JCR API extensions and o.a.j.spi for the component interfaces.</comment>
                    <comment id="12364541" author="jukkaz" created="Tue, 31 Jan 2006 17:57:49 +0000"  >Attached a patch for creating public interfaces for RepositoryImpl.shutdown() and WorkspaceImpl.createWorkspace(String). Does this look OK? If so, I&amp;#39;ll go ahead and commit it.&lt;br/&gt;
&lt;br/&gt;
I also investigated the options for doing the same to node type registration. Exposing the current NodeTypeManagerImpl.getNodeTypeRegistry().registerNodeTypes(Collection) method will require also the *Def interfaces (optionally also the *DefImpl classes) to be exposed. This will also bring a dependency to the QName class. Is it OK to expose so much (essentially promising that they will not change much before Jackrabbit 2.0) or should we create an alternative like NodeTypeManagerImpl.registerNodeTypes(InputStream)?</comment>
                    <comment id="12364543" author="stefan@jira" created="Tue, 31 Jan 2006 18:11:06 +0000"  >&amp;gt; Attached a patch for creating public interfaces for RepositoryImpl.shutdown() &lt;br/&gt;
&amp;gt; and WorkspaceImpl.createWorkspace(String). Does this look OK? If so, I&amp;#39;ll go &lt;br/&gt;
&amp;gt; ahead and commit it. &lt;br/&gt;
&lt;br/&gt;
+1&lt;br/&gt;
&lt;br/&gt;
maybe we should add an optional Properties argument to the createWorkspace signatur.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; ... or should we create an alternative like NodeTypeManagerImpl.registerNodeTypes(InputStream)?&lt;br/&gt;
&lt;br/&gt;
i prefer NodeTypeManagerImpl.registerNodeTypes(InputStream)</comment>
                    <comment id="12364545" author="tripod" created="Tue, 31 Jan 2006 18:28:09 +0000"  >if find NodeTypeManagerImpl.registerNodeTypes(InputStream) very useless. since clients would need to fake XML in order to create the node types.&lt;br/&gt;
i suggest to elaborate NodeType stuff for 2.0 and then expose this api.</comment>
                    <comment id="12364547" author="fmeschbe" created="Tue, 31 Jan 2006 18:46:34 +0000"  >While I tend to agree with Tobias that it would probably be better to have the item definition classes available for the casual use, it would probably also be usefull to be able to just register node types from pre-canned xml files.&lt;br/&gt;
&lt;br/&gt;
Imagine a repository application which requires a set of node types. The definitions would be distributed in the form of XML - or better yet the new CND - format and could just be registered by handing a stream to the respective file.&lt;br/&gt;
&lt;br/&gt;
IMHO, the InputStream solution is not the best of all solutions, but it is still far better than nothing.</comment>
                    <comment id="12364555" author="jukkaz" created="Tue, 31 Jan 2006 19:52:40 +0000"  >Stefan:&lt;br/&gt;
&amp;gt; maybe we should add an optional Properties argument to the createWorkspace signatur. &lt;br/&gt;
&lt;br/&gt;
What should it do? The current WorkspaceImpl.createWorkspace signature doesn&amp;#39;t have it so we&amp;#39;d need to specify how the given properties will be interpreted and implement that interpretation.&lt;br/&gt;
&lt;br/&gt;
We can add JackrabbitWorkspace.createWorkspace(String,Properties) without breaking backwards compatibility also later during the 1.x cycle. I suggest that we do so only when the given properties are actually used.&lt;br/&gt;
&lt;br/&gt;
Felix:&lt;br/&gt;
&amp;gt; IMHO, the InputStream solution is not the best of all solutions, but it is still far better than nothing.&lt;br/&gt;
&lt;br/&gt;
Agreed. We must have at least one officially supported node type registration mechanism in 1.0. The InputStream solution covers at least the basic use case without exposing too much of the Jackrabbit internals.&lt;br/&gt;
&lt;br/&gt;
A more integrated tool can always use the internal Jackrabbit interfaces directly to get more control over the registration process, but there would be no guarantees of backwards compatibility for such clients.</comment>
                    <comment id="12364607" author="tripod" created="Tue, 31 Jan 2006 21:25:52 +0000"  >ok. lets add the register nodetype. but i would prefer an &amp;#39;org.xml.sax.InputSource&amp;#39; instead of the input stream. and maybe an additional content type:&lt;br/&gt;
&lt;br/&gt;
public NodeType[] NodeTypeManagerImpl.registerNodeTypes(InputSource in, String contentType);&lt;br/&gt;
&lt;br/&gt;
contentType is either: text/xml or text/cnd&lt;br/&gt;
&lt;br/&gt;
the advantage of the inputsource is: it has a systemId that can be used to resolve entities (eg: relatvie DVDs), and also for better error reporting.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12364609" author="jukkaz" created="Tue, 31 Jan 2006 21:44:48 +0000"  >InputSource makes little sense to non-XML data like the CND. How about the following?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Registers node types from the given node type XML stream. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NodeType[] registerNodeTypes(InputSource in) throws ...;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/** Registers node types from the given input stream of the given type. */&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NodeType[] registerNodeTypes(InputStream in, String contentType) throws ...;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Constants for the supported content types&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String XML = &amp;quot;text/xml&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String CND = &amp;quot;text/x-jcr-cnd&amp;quot;;&lt;br/&gt;
&lt;br/&gt;
(The implementation should also support application/xml as the XML content type.)</comment>
                    <comment id="12366612" author="jukkaz" created="Thu, 16 Feb 2006 19:06:24 +0000"  >Added the o.a.j.api.JackrabbitNodeTypeManager extension interface in revision 378211. The new API methods are implemented quite simplistically using the existing NodeTypeReader and NodeTypeRegistry methods. Currently only text/xml (and application/xml) are supported, we can add support for CND when the CND parser is promoted from contrib.&lt;br/&gt;
&lt;br/&gt;
Together with previous commits this should cover the major JCR extensions in Jackrabbit, so I&amp;#39;m resolving this issue as Fixed. Please file a new issue if other public extensions are needed.</comment>
                </comments>
                    <attachments>
                    <attachment id="12322493" name="jackrabbit-api.patch" size="7029" author="jukkaz" created="Tue, 31 Jan 2006 17:57:49 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 27 Jan 2006 01:39:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142100</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191306</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>