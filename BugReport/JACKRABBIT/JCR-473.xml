<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:52:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-473/JCR-473.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-473] Some enhancements to jackrabbit commons</title>
                <link>https://issues.apache.org/jira/browse/JCR-473</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>I would like to suggest a couple of  enhancements to the commons module. &lt;br/&gt;
&lt;br/&gt;
The patch was created against rev. 417443 and the tests did not reveal any &lt;br/&gt;
problems.&lt;br/&gt;
&lt;br/&gt;
Summary of suggestion modifications:&lt;br/&gt;
&lt;br/&gt;
QName&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- reduce QName to its core functionality and put conversion from and to JCR name to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;a separate class &amp;#39;NameFormat&amp;#39;&lt;br/&gt;
- in order not to break existing code, all methods that deal with the conversion in QName&lt;br/&gt;
&amp;nbsp;&amp;nbsp;are marked deprecated.&lt;br/&gt;
- add constant for the name of the root node.&lt;br/&gt;
&lt;br/&gt;
Path&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- reduce Path to its core functionality and put conversion from and to JCR path to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;a separate class &amp;#39;PathFormat&amp;#39;&lt;br/&gt;
- in order not to break existing code, all methods that deal with the conversion in Path&lt;br/&gt;
&amp;nbsp;&amp;nbsp;are marked deprecated.&lt;br/&gt;
- introduce new constants for UNDEFINED_INDEX (0) and DEFAULT_INDEX (1), that&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;are currently hardcoded throughout  the jackrabbit project.&lt;br/&gt;
- new method Path.getElement(int) [PathElement]&lt;br/&gt;
- make PathElement constants public (used by PathFormat)&lt;br/&gt;
&lt;br/&gt;
Path.PathBuilder&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- additional constructor  PathBuilder(Path)&lt;br/&gt;
&lt;br/&gt;
Path.PathElement&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- add PathElement.getNormalizedIndex() that always asserts a 1-based index.&lt;br/&gt;
- change subclasses to be private (no usage within the jackrabbit, except inside Path).&lt;br/&gt;
&lt;br/&gt;
PathMap&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- move o.a.j.core.PathMap  to o.a.j.util.PathMap in order to make it available in the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;commons module.&lt;br/&gt;
&lt;br/&gt;
NamespaceResolver&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- add methods for resolution of paths:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; getQPath(String jcrPath) [Path]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; getJCRPath(Path qPath) [String]&lt;br/&gt;
&lt;br/&gt;
NamespaceListener&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- add method &amp;#39;namespaceRemove(String)&amp;#39;&lt;br/&gt;
&lt;br/&gt;
ValueHelper&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
currently  JCR value objects are &amp;#39;manually&amp;#39; created in the ValueHelper despite the&lt;br/&gt;
fact, that JSR170 defines a ValueFactory interface. Consequently the ValueHelper&lt;br/&gt;
present in the commons module can only be used by implementations that use&lt;br/&gt;
the same value implementations.&lt;br/&gt;
&lt;br/&gt;
- add new helper methods that take a ValueFactory as argument.&lt;br/&gt;
- in order not to break existing code the original methods are marked deprecated and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;may be removed at a later time.&lt;br/&gt;
&lt;br/&gt;
consequently:&lt;br/&gt;
- modify signature of  InternalValue.create that include a value conversion to take a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;ValueFactory param and adjust all usages inside the core package.&lt;br/&gt;
&lt;br/&gt;
ValueFactoryImpl&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- createValue(String, int ): used to call the conversion on ValueHelper. with the &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;changes suggested to ValueHelper, the code must be changed in order to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;created instances of the Value implementations within the factory.&lt;br/&gt;
- together with the modification to ValueHelper, stefan suggested to replace the public &lt;br/&gt;
&amp;nbsp;&amp;nbsp;constructor with a static &amp;#39;getInstance&amp;#39; method. All usages within jackrabbit.core, were&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;modified accordingly.&lt;br/&gt;
&lt;br/&gt;
Text&lt;br/&gt;
-------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- add getName(String, boolean) where the boolean flag indicates whether  a trailing slash &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;should be ignored.&lt;br/&gt;
- add getRelativeParent(String, int, boolean) where the boolean flag indicates whether  a &lt;br/&gt;
&amp;nbsp;&amp;nbsp;trailing slash should be ignored.</description>
                <environment></environment>
            <key id="12345320">JCR-473</key>
            <summary>Some enhancements to jackrabbit commons</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="tripod">Tobias Bocanegra</assignee>
                                <reporter username="anchela">angela</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Jul 2006 17:17:26 +0100</created>
                <updated>Wed, 12 Jul 2006 18:13:55 +0100</updated>
                    <resolved>Wed, 12 Jul 2006 18:13:55 +0100</resolved>
                            <version>1.0</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12419056" author="jukkaz" created="Tue, 4 Jul 2006 15:17:19 +0100"  >+1, I especially like the approach of separating responsibilities from QName and Path.&lt;br/&gt;
&lt;br/&gt;
Would it make sense to go even further along this way, like this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class QName implements ... {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getNamespaceURI();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getLocalName();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// and the Object and Comparable overrides&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class Path implements ... { ... }&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public interface NamespaceResolver {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getURI(String prefix) throws NamespaceException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getPrefix(String uri) throws NamespaceException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public interface QNameResolver {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;QName getQName(String jcrName) throws NameException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getJCRName(String qName) throws NameException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public interface PathResolver {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Path getPath(String jcrPath) throws PathException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String getJCRPath(Path path) throws PathException;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}1&lt;br/&gt;
&lt;br/&gt;
This separation of concerns would for example make it possible to implement QName or Path caches as independent and easily composable classes.&lt;br/&gt;
</comment>
                    <comment id="12419217" author="anchela" created="Wed, 5 Jul 2006 14:53:03 +0100"  >regarding interfaces for Path, QName:&lt;br/&gt;
i used to have interfaces for them and keep the implementation in commons. but i felt that the impact on the existing jackrabbit code would be too big. in addition i did not see enough benefit of this approach for the jackrabbit project. but i might be wrong....&lt;br/&gt;
&lt;br/&gt;
regarding split of NamespaceResolver:&lt;br/&gt;
perhaps it&amp;#39;s worth taking a closer look at this. at first glance it looks a little exaggerated to me. &lt;br/&gt;
&lt;br/&gt;
in any case (and as long as nobody objects) i would prefer applying the patch as is and discuss additional enhancements in a separate thread. having a patch that shows the impact of a modification makes it easier to decide about the benefits (or drawbacks).&lt;br/&gt;
&lt;br/&gt;
kind regards angela</comment>
                    <comment id="12419218" author="jukkaz" created="Wed, 5 Jul 2006 15:04:02 +0100"  >Angela:&lt;br/&gt;
&amp;gt; regarding interfaces for Path, QName:&lt;br/&gt;
&lt;br/&gt;
Ah, sorry for being a bit unclear. I&amp;#39;d still keep them as concrete classes, preferably final.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; regarding split of NamespaceResolver:&lt;br/&gt;
&amp;gt; perhaps it&amp;#39;s worth taking a closer look at this. at first glance it looks a little exaggerated to me.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; in any case (and as long as nobody objects) i would prefer applying the patch as is and discuss additional enhancements in a separate thread.&lt;br/&gt;
&amp;gt; having a patch that shows the impact of a modification makes it easier to decide about the benefits (or drawbacks).&lt;br/&gt;
&lt;br/&gt;
Agreed, sorry for muddying the water. +1 to this patch.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll see if I can come up with compelling enough rationale for the extended proposal, and follow up on the mailing list later on.&lt;br/&gt;
</comment>
                    <comment id="12419300" author="stefan@jira" created="Wed, 5 Jul 2006 23:57:16 +0100"  >+1 for applying the patch&lt;br/&gt;
&lt;br/&gt;
cheers&lt;br/&gt;
stefan</comment>
                    <comment id="12419318" author="tripod" created="Thu, 6 Jul 2006 01:50:20 +0100"  >&amp;gt; consequently:&lt;br/&gt;
&amp;gt; - modify signature of InternalValue.create that include a value conversion to take a&lt;br/&gt;
&amp;gt;  ValueFactory param and adjust all usages inside the core package. &lt;br/&gt;
&lt;br/&gt;
i don&amp;#39;t like the ValueFactory passed all over the classes. this is only because InternalValue now needs it. either we pass the namespace resolver, or the value factory, but not both. especially, since the internal value is an &amp;#39;internal&amp;#39; representation of the value, and should actually have nothing to do with the string-&amp;gt;name/path conversion.&lt;br/&gt;
&lt;br/&gt;
we should find something nicer. for example, drop the to methods that take the nsresolver:&lt;br/&gt;
&lt;br/&gt;
create(Value value, NamespaceResolver nsResolver) is only used 6 times,&lt;br/&gt;
create(Value value, int targetType, NamespaceResolver nsResolver) is used 11 times.&lt;br/&gt;
create(String value, int targetType, NamespaceResolver nsResolver) is used 8 times.&lt;br/&gt;
&lt;br/&gt;
and put them to the valuehelper. in this case, the caler has to deal with it, and not the InternalValue.&lt;br/&gt;
&lt;br/&gt;
-1 for applying this patch</comment>
                    <comment id="12419419" author="anchela" created="Thu, 6 Jul 2006 14:47:19 +0100"  >InternalValue: &lt;br/&gt;
&amp;gt; we should find something nicer. for example, drop the to methods &lt;br/&gt;
&amp;gt; that take the nsresolver: &lt;br/&gt;
&lt;br/&gt;
maybe i&amp;#39;m missing your point. from my point of view, the NamespaceResolver is a different story than Value-conversion. While the NamespaceResolver is always used to build a qualified value from a JCR Value (for Name and Path values), the value conversion takes place if the create methods specifies a targetType which may differ from the type of the passed String or Value.&lt;br/&gt;
&lt;br/&gt;
the conversion helper methods are offered by the ValueHelper, but currently the ValueHelper itself knows about which value objects to create and i would argue, that this should be done by the ValueFactory only. i guess, this was the point of the ValueFactory in jsr170, which was introduced quite a while after the initial version of the spec.&lt;br/&gt;
&lt;br/&gt;
moving the InternalValue.create to the ValueHelper looks strange to me:&lt;br/&gt;
- the InternalValue is a core functionality (and named &amp;#39;internal&amp;#39;)&lt;br/&gt;
- the ValueHelper is a utility class only and in the commons module.&lt;br/&gt;
- moving the IV-create methods to ValueHelper would require the InternalValue to become a common one.&lt;br/&gt;
- and last it would not solve my point, that the ValueHelper should not know about the Value implementations. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
So, not passing the ValueFactory throughout the code, could be solved by:&lt;br/&gt;
&lt;br/&gt;
- don&amp;#39;t deprecate InternalValue.create(Value/String, int, NamespaceResolver)&lt;br/&gt;
- remove the new methods in InternalValue that take the ValueFactory&lt;br/&gt;
- in any case: directly use ValueFactoryImpl within InternalValue (such as in the patch) in order to retrieved a converted jcr value from the ValueHelper. Since currently ValueHelper creates Value objects itself (in addition to the ValueFactoryImpl and from the same value implementations, see above), this would not change the resulting InternalValue... i simply didn&amp;#39;t like, that the InternalValue knows which ValueFactory to use. but maybe i&amp;#39;m wrong...&lt;br/&gt;
&lt;br/&gt;
would that be acceptable for you?&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12419425" author="anchela" created="Thu, 6 Jul 2006 14:59:31 +0100"  >2. So, not passing the ValueFactory throughout the code, could be solved by: &lt;br/&gt;
&lt;br/&gt;
- leave InternalValue as proposed in the patch&lt;br/&gt;
- remove usage of InternalValue.create(String, int, ValueFactory) and InternalValue.create(Value, int, ValueFactory) and replace it by the original call, whereever the ValueFactory was not accessible before.... means: everywhere except in PropertyImpl and NodeImpl.&lt;br/&gt;
&lt;br/&gt;
i had this during an intermediate stage, since i didn&amp;#39;t want to touch too much core classes.&lt;br/&gt;
&lt;br/&gt;
whatever you like ;)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12419439" author="tripod" created="Thu, 6 Jul 2006 16:31:14 +0100"  >jukka, you&amp;#39;re right. ValueFactory has nothing to do with resolving names.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; moving the InternalValue.create to the ValueHelper looks strange to me:&lt;br/&gt;
this was just a first ides but you&amp;#39;re right. i didn&amp;#39;t thought of moving the create methods to the value helper in commons, but to somewhere in code.&lt;br/&gt;
&lt;br/&gt;
the InternalValue is a internal abstraction of values, and has nothing to do with jcr Values. Maybe if we look at it as an InternalValueFactory. so we can leave them there. If it&amp;#39;s just for the sake for not having duplicate conversion code, we can also use static methods in the ValueFactoryImpl. &lt;br/&gt;
&lt;br/&gt;
i would put all convertion code into ValueHelper, and ValueFactoryImpl and InternalValue can then make use of it.&lt;br/&gt;
</comment>
                    <comment id="12419443" author="tripod" created="Thu, 6 Jul 2006 16:49:05 +0100"  >sorry. i&amp;#39;m a bit dizzy today:&lt;br/&gt;
&lt;br/&gt;
- this was just a first ides but you&amp;#39;re right.&lt;br/&gt;
+ this was just a first idea but you&amp;#39;re right.&lt;br/&gt;
&lt;br/&gt;
- somewhere in code.&lt;br/&gt;
+ somewhere else in core.&lt;br/&gt;
</comment>
                    <comment id="12419445" author="jukkaz" created="Thu, 6 Jul 2006 17:00:02 +0100"  >Tobias:&lt;br/&gt;
&amp;gt; jukka, you&amp;#39;re right&lt;br/&gt;
&lt;br/&gt;
It was Angela, credit where credit is due. :-)&lt;br/&gt;
&lt;br/&gt;
I think you&amp;#39;re right about questioning the excessive passing of parameters around. We should encapsulate the functionality somehow, but I don&amp;#39;t think that any of the quick solutions are very clean design-wise. Unfortunately I don&amp;#39;t have any better ideas at the top of my head. :-/&lt;br/&gt;
</comment>
                    <comment id="12419446" author="anchela" created="Thu, 6 Jul 2006 17:04:42 +0100"  >a bit? i&amp;#39;m angela not jukka... unfortunately ;)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; i would put all convertion code into ValueHelper, and &lt;br/&gt;
&amp;gt; ValueFactoryImpl and InternalValue can then make use of it. &lt;br/&gt;
&lt;br/&gt;
the conversion is in fact done by the ValueHelper. this did not changed by the patch.&lt;br/&gt;
&lt;br/&gt;
what changes with the patch is:&lt;br/&gt;
&lt;br/&gt;
- ValueHelper does not create the various JCR value object instead it delegates this to the ValueFactory.&lt;br/&gt;
- ValueFactoryImpl: ValueFactory.createValue(String value, int type) does&lt;br/&gt;
&amp;nbsp;&amp;nbsp;not call the ValueHelper any more. Instead it creates the value objects on its own.&lt;br/&gt;
&lt;br/&gt;
-&amp;gt; the reason this is again, that i think that ValueHelper should not know which JCR values to create. this is what the ValueFactory has been designed for.&lt;br/&gt;
&lt;br/&gt;
you are right, that currently the InternalValue is both an internal abstraction and factory. however, i tried to fix the problem i considered to be present with the ValueHelper without changing the basic design of core functionality. This would definitely be a different issue.&lt;br/&gt;
&lt;br/&gt;
maybe you can take a look at my suggestions regarding your original commont tomorrow? or next week? whenever you feel fine again.&lt;br/&gt;
&lt;br/&gt;
if you generally disagree regarding the issue with the ValueHelper, i&amp;#39;d say this a different story, than if you feeling uneasy with the modifications in core classes.&lt;br/&gt;
</comment>
                    <comment id="12419447" author="anchela" created="Thu, 6 Jul 2006 17:07:55 +0100"  >and for the latter (modifications within core classes) i suggested 2 solutions from the top of my head (because i was thinking about this before). if you want me too, i can take a look at the code again. there will be many others....</comment>
                    <comment id="12419453" author="tripod" created="Thu, 6 Jul 2006 17:18:58 +0100"  >&amp;gt; Tobias:&lt;br/&gt;
&amp;gt; &amp;gt; jukka, you&amp;#39;re right&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; It was Angela, credit where credit is due. :-) &lt;br/&gt;
but i ment &amp;#39;jukka&amp;#39;. it was a response to your post :-)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - ValueFactoryImpl: ValueFactory.createValue(String value, int type) does&lt;br/&gt;
&amp;gt;   not call the ValueHelper any more. Instead it creates the value objects on its own.&lt;br/&gt;
but it must possible to have both. imo there is a convertion from:&lt;br/&gt;
string,type -&amp;gt; Value&lt;br/&gt;
string,type -&amp;gt; Internal-Value-Object&lt;br/&gt;
&lt;br/&gt;
where the first needs a value factory and the second the namespace resolver.&lt;br/&gt;
internal value only uses the second. IMO, this can be all solved in the ValueHelper.&lt;br/&gt;
&lt;br/&gt;
btw: can we do 2 patches, one with the valuestuff and one with the QName/Path stuff ?&lt;br/&gt;
i think we all agree on the later.</comment>
                    <comment id="12419456" author="jukkaz" created="Thu, 6 Jul 2006 17:30:25 +0100"  >Tobias:&lt;br/&gt;
&amp;gt; but i ment &amp;#39;jukka&amp;#39;. it was a response to your post :-) &lt;br/&gt;
&lt;br/&gt;
Ah, OK. Just got confused as I didn&amp;#39;t mention anything about ValueFactories before my previous comment.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; btw: can we do 2 patches, one with the valuestuff and one with the QName/Path stuff ?&lt;br/&gt;
&lt;br/&gt;
+1&lt;br/&gt;
</comment>
                    <comment id="12419458" author="reschke" created="Thu, 6 Jul 2006 17:45:58 +0100"  >Regarding QName...:&lt;br/&gt;
&lt;br/&gt;
Did anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12419460" author="mreutegg" created="Thu, 6 Jul 2006 17:58:55 +0100"  >Yes, I did, but the JCR QName are different from an XML QName. E.g. in JCR you may start a name with a digit, which is not possible in an XML name.</comment>
                    <comment id="12419461" author="anchela" created="Thu, 6 Jul 2006 17:59:55 +0100"  >Tobi:&lt;br/&gt;
&amp;gt; but i ment &amp;#39;jukka&amp;#39;. it was a response to your post :-) &lt;br/&gt;
&lt;br/&gt;
i guess you responded to a post, which gmail considered to be written by jukka...  heh....they start getting subversive... it was me.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; btw: can we do 2 patches, one with the valuestuff and one with &lt;br/&gt;
&amp;gt; the QName/Path stuff ? &lt;br/&gt;
&lt;br/&gt;
we? do you mean jukka again? or angela?&lt;br/&gt;
before i spent a lot of time creating and testing 2 patches, i&amp;#39;d like to get an answer to my questions. are you concerned about the changes in the core (a) or do you disagree regarding the issue i keep pointing out with the ValueHelper (b)?&lt;br/&gt;
&lt;br/&gt;
(a) -&amp;gt; i&amp;#39;d rather find a solution for this than creating 2 patches. 2 proposals are already available. and &amp;#39;we&amp;#39; may find some more.&lt;br/&gt;
(b) -&amp;gt; tjo...</comment>
                    <comment id="12419462" author="jukkaz" created="Thu, 6 Jul 2006 18:02:16 +0100"  >Julian:&lt;br/&gt;
&amp;gt; Did anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?&lt;br/&gt;
&lt;br/&gt;
The XML QName is slightly different from the JCR QName. Unlike in XML, the JCR prefix is not an inherent part of the QName, and the set of allowed local names is different. Of course these differences are nothing major, but add to the cost of requiring another external dependency. So I prefer to keep the Jackrabbit-specific QName.&lt;br/&gt;
</comment>
                    <comment id="12419464" author="stefan@jira" created="Thu, 6 Jul 2006 18:16:03 +0100"  >&amp;gt; Julian Reschke commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-473&quot; title=&quot;Some enhancements to jackrabbit commons&quot;&gt;&lt;strike&gt;JCR-473&lt;/strike&gt;&lt;/a&gt;:&lt;br/&gt;
&amp;gt; ------------------------------------&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Regarding QName...:&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; Did anybody consider to require JAXP 1.3 (available as seperate download for JDK 1.4), and just to use javax.xml.namespace.QName?&lt;br/&gt;
&lt;br/&gt;
of course i looked at the various QName classes but none of them filled the bill. the XML QName is very &lt;br/&gt;
similar to jackrabbit&amp;#39;s QName but there are significant differences. jr&amp;#39;s QName is e.g. not interested &lt;br/&gt;
in the prefix, it only stores the ns uri. a JCR localname has a different syntax than an XML NCName.&lt;br/&gt;
&lt;br/&gt;
btw: the license of the JAXP 1.3 RI (sun&amp;#39;s CDDL) is AFAIK not compatible with the apache license.</comment>
                    <comment id="12419466" author="tripod" created="Thu, 6 Jul 2006 18:20:41 +0100"  >&amp;gt; i guess you responded to a post, which gmail considered to be written by jukka... &lt;br/&gt;
&amp;gt; heh....they start getting subversive... it was me.&lt;br/&gt;
hmmm....now when i look at the posts again...sorry for this confusion :-) jukkangela :-)&lt;br/&gt;
&lt;br/&gt;
&amp;gt;&amp;gt; btw: can we do 2 patches, one with the valuestuff and one with&lt;br/&gt;
&amp;gt;&amp;gt; the QName/Path stuff ?&lt;br/&gt;
&amp;gt; we? do you mean jukka again? or angela?&lt;br/&gt;
the patchmaster, i.e. you, angela :-)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; before i spent a lot of time creating and testing 2 patches, i&amp;#39;d like to get an answer to &lt;br/&gt;
&amp;gt; my questions. are you concerned about the changes in the core (a) or do you disagree&lt;br/&gt;
&amp;gt; regarding the issue i keep pointing out with the ValueHelper (b)?&lt;br/&gt;
as i said:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;i don&amp;#39;t like the valuefactory in the internalvalue. there is not need for it there. thats all of my concern. i agree with all the rest, that ValueHelper should be in commons, and that it should use ValueFactory.</comment>
                    <comment id="12419673" author="anchela" created="Fri, 7 Jul 2006 17:46:17 +0100"  >attached a new patch that reverts the modifications made to InternalValue (and the modifications within the core/nodetype and core/xml packages that resulted from them).&lt;br/&gt;
&lt;br/&gt;
I.e. revert&lt;br/&gt;
InternalValue.create(Value, int, NamespaceResolver) and&lt;br/&gt;
InternalValue.create(String, int, NamespaceResolver) &lt;br/&gt;
which both need a value conversion to its original form and remove the additional methods taking ValueFactory as additional param.&lt;br/&gt;
&lt;br/&gt;
You (tobi, stefan) may still discuss together whether the InternalValue should implicitely perform any value conversion or not and whether there exists a smarter solution for this. I would avoid fundamental reworking in the core with this patch.&lt;br/&gt;
&lt;br/&gt;
If we reached consensus about the enhancements i proposed for the commons module, i would apply the patch.&lt;br/&gt;
&lt;br/&gt;
regards&lt;br/&gt;
angela (aka jukka)&lt;br/&gt;
&lt;br/&gt;
note: i let the tests run again having the new patch applied (same rev. as before) and no failures occured, that were not present in the untouched checkout (being testRemoveVersion and testMultiValue. according to stefan these are known issues).&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12419685" author="tripod" created="Fri, 7 Jul 2006 18:49:11 +0100"  >besides some javadoc errors, the patch looks ok.&lt;br/&gt;
&lt;br/&gt;
+1 for patch V2</comment>
                    <comment id="12419739" author="stefan@jira" created="Sat, 8 Jul 2006 00:12:41 +0100"  >+1 for 2nd patch from me as well</comment>
                    <comment id="12419984" author="anchela" created="Mon, 10 Jul 2006 15:08:44 +0100"  >merged patch into the latest revision.&lt;br/&gt;
completed at revision: 420449  &lt;br/&gt;
</comment>
                    <comment id="12420306" author="tripod" created="Tue, 11 Jul 2006 21:03:35 +0100"  >i will adjust all deprecated calls....</comment>
                    <comment id="12420309" author="anchela" created="Tue, 11 Jul 2006 21:36:30 +0100"  >oh. i can help you if you want me to.&lt;br/&gt;
&lt;br/&gt;
apart from the deprecated calls, it would be nice to have all the hardcoded index (0, 1), the depth and the name of the root-node replaced by the corresponding constants.&lt;br/&gt;
&lt;br/&gt;
i didn&amp;#39;t do that in order to keep the patch as small as possible. &lt;br/&gt;
&lt;br/&gt;
regarding deprecation:&lt;br/&gt;
maybe QName.toJCRName (and fromJCRName) can be replaced by the corresponding namespace resolver calls. this might be better than the NameFormat calls, since the resolvers may have caches. similar for paths.</comment>
                    <comment id="12420579" author="tripod" created="Wed, 12 Jul 2006 18:13:55 +0100"  >&amp;gt; QName.toJCRName (and fromJCRName) can be replaced by the corresponding namespace&lt;br/&gt;
&amp;gt; resolver calls. &lt;br/&gt;
currently i avoided this, since IMO the namespace resolver has nothing to do with parsing/formatting QNames and Paths. this should be hidden transparently in the NameFormat.&lt;br/&gt;
&lt;br/&gt;
i resolved the deprecations as follows:&lt;br/&gt;
&lt;br/&gt;
QName.create() -&amp;gt; NameFormat.parse()&lt;br/&gt;
QName.toJCRName() -&amp;gt; NameFormat.format()&lt;br/&gt;
QName.checkFormat() -&amp;gt; NameFormat.checkFormat()&lt;br/&gt;
&lt;br/&gt;
Path.create(path, ns, false) -&amp;gt; PathFormat.parse(path,ns)&lt;br/&gt;
Path.create(path, ns, true) -&amp;gt; PathFormat.parse(path, ns).getNormalizedPath()&lt;br/&gt;
Path.create(parent, path, ns, false) -&amp;gt; PathFormat.parse(parent, path, ns)&lt;br/&gt;
Path.create(parent, path, ns, true) -&amp;gt; PathFormat.parse(parent, path, ns).getCanonicalPath()&lt;br/&gt;
Path.toJCRPath() -&amp;gt; PathFormat.fomat()&lt;br/&gt;
Path.checkFormat() -&amp;gt; PathFormat.checkFormat()&lt;br/&gt;
&lt;br/&gt;
ValueHelper.convert(value, type) &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; ValueHelper.convert(value, type, ValueFactoryImpl.getInstance())&lt;br/&gt;
&lt;br/&gt;
</comment>
                </comments>
                    <attachments>
                    <attachment id="12336491" name="JCR-473_rev_417443_2.patch" size="122796" author="anchela" created="Fri, 7 Jul 2006 17:46:17 +0100" />
                    <attachment id="12336270" name="JCR-473_rev_417443.patch" size="159778" author="anchela" created="Mon, 3 Jul 2006 17:20:00 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 4 Jul 2006 14:17:19 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142188</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191968</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>