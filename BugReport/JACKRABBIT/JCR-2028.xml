<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:51:40 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2028/JCR-2028.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2028] JSR 283: JCR Path</title>
                <link>https://issues.apache.org/jira/browse/JCR-2028</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>with jsr 283 the jcr path is defined to consist of a combination of the following segments&lt;br/&gt;
&lt;br/&gt;
&#8226;	a name segment, (J, I), where J is a JCR name and I is an integer index (I &#8805; 1).&lt;br/&gt;
&#8226;	an identifier segment, U, where U is a JCR identifier.&lt;br/&gt;
&#8226;	the root segment.&lt;br/&gt;
&#8226;	the self segment.&lt;br/&gt;
&#8226;	the parent segment.&lt;br/&gt;
&lt;br/&gt;
-&amp;gt; the name segment can be in extended or qualified form -&amp;gt; see issue &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1712&quot; title=&quot;JSR 283: JCR Names&quot;&gt;&lt;strike&gt;JCR-1712&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
-&amp;gt; the identifier segment is new for jsr283 and always identifies a node (-&amp;gt; see new method Node.getIdentifier())&lt;br/&gt;
&lt;br/&gt;
Non-standard parts always need to be standardized. Any of the following makes a path non-standard:&lt;br/&gt;
- expanded name segments&lt;br/&gt;
- trailing /&lt;br/&gt;
- index [1]&lt;br/&gt;
&lt;br/&gt;
Identifier-segments&lt;br/&gt;
- get resolved upon being passed to any API calls that take path to an existing Node&lt;br/&gt;
- don&amp;#39;t get resolved when being used to create a PATH value object.&lt;br/&gt;
&lt;br/&gt;
Except for PATH values, all jcr paths returned by the API are normalized and standard, thus never identifier-based.&lt;br/&gt;
&lt;br/&gt;
PATH values in contrast:&lt;br/&gt;
- must be converted to standard form&lt;br/&gt;
- must NOT be normalized. i.e. redundant segments and identifiers must be preserved.&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12417042">JCR-2028</key>
            <summary>JSR 283: JCR Path</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                    <parent id="12377246">JCR-1104</parent>
                        <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="anchela">angela</assignee>
                                <reporter username="anchela">angela</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 Mar 2009 09:20:53 +0000</created>
                <updated>Wed, 8 Jul 2009 12:35:51 +0100</updated>
                    <resolved>Tue, 9 Jun 2009 11:08:19 +0100</resolved>
                                            <fixVersion>2.0-alpha3</fixVersion>
                                <component>JCR 2.0</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12695508" author="anchela" created="Fri, 3 Apr 2009 18:20:06 +0100"  >Initial proposal for the identifier-based path attempting to incorporate that extension into the general path handling used with both jackrabbit-core and jsr2spi. Main goal was to avoid spreading identifier-path handling through the core/jcr2spi code but instead having it localized in a single place.&lt;br/&gt;
&lt;br/&gt;
This implies from my point of view the following if we want to stick with the current path handling:&lt;br/&gt;
&lt;br/&gt;
- Normalization of identifier-based paths is defined to be its replacement by a root-based&lt;br/&gt;
&amp;nbsp;&amp;nbsp;absolute path, which depends on an Session that is able to resolve id to path.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Since the Path object we are having is uncoupled from any Session, normalization of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;identifier-based paths must occur before the Path object is created.&lt;br/&gt;
&lt;br/&gt;
- PATH values on the other hand need to preserve there standard from as entered.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Immediate normalization to the an absolute path consisting of qualified name segments is &lt;br/&gt;
&amp;nbsp;&amp;nbsp;not desired (not allowed). Which means that the internal representation of the jcr path &lt;br/&gt;
&amp;nbsp;&amp;nbsp;must be able to deal with identifier-segments.&lt;br/&gt;
&lt;br/&gt;
This lead to the following changes:&lt;br/&gt;
&lt;br/&gt;
- Path may consist of a single IdentifierElement&lt;br/&gt;
- Path has additional method &amp;#39;denotesIdentifier&amp;#39;&lt;br/&gt;
- Path.Element can be created from an identifier (which currently is String) and gets a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;method to determine if a given element is an identifier-element.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;The validation of the id (same as with jcr name) is left to the parser.&lt;br/&gt;
&lt;br/&gt;
- PathParser is extended to handle identifier-based paths upon demand:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;gt; validation of the format without requirement that the normalization would succeed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;gt; normalization that requires that a Node exists with that identifier.&lt;br/&gt;
- Introduction of a IdentifierResolver: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;Used to convert identifier-based paths to a normalized path and validate the validity &lt;br/&gt;
&amp;nbsp;&amp;nbsp;of an identifier during parsing.&lt;br/&gt;
- PathResolver: additional method getQPath(String jcrPath, boolean normalizeIdentifier)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;that allows to trigger normalization of identifiers before creating the path objects.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;the existing method without the flag by default resolves identifier-based path or throws if&lt;br/&gt;
&amp;nbsp;&amp;nbsp;no IdentifierResolver present (i.e. identifier-based not supported -&amp;gt; path syntax invalid)&lt;br/&gt;
&lt;br/&gt;
- The changes required to make core/jcr2spi properly deal with identifier-based paths&lt;br/&gt;
&amp;nbsp;&amp;nbsp;where ever normalization is required (API calls except for values generation) seemed &lt;br/&gt;
&amp;nbsp;&amp;nbsp;to be straight forward (and very limited)... (not included in the patches).&lt;br/&gt;
&lt;br/&gt;
Still I came accross of the following issues, which I didn&amp;#39;t address yet, since i wanted&lt;br/&gt;
to get some input regarding the overall approach before digging into the details here.&lt;br/&gt;
&lt;br/&gt;
Issues:&lt;br/&gt;
&lt;br/&gt;
- In order to properly validate the format of PATH values the ValueFactory will have a&lt;br/&gt;
&amp;nbsp;&amp;nbsp;dependency to the implementation that defines the format of the identifiers.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;This was straight forward with the ValueFactory present in spi-commons and thus with&lt;br/&gt;
&amp;nbsp;&amp;nbsp;jcr2spi that consistently uses the ValueFactory defined on the Session object.&lt;br/&gt;
&lt;br/&gt;
- In jackrabbit-core the session&amp;#39;s valuefactory is rarely used. Instead instance&lt;br/&gt;
&amp;nbsp;&amp;nbsp;of the jcr-commons ValueFactory are used, which is neither enabled to standardize&lt;br/&gt;
&amp;nbsp;&amp;nbsp;expanded name-segments nor able to deal with identifiers.&lt;br/&gt;
&lt;br/&gt;
- In the InternalValue the Value objects are even created directly without make use of &lt;br/&gt;
&amp;nbsp;&amp;nbsp;any ValueFactory... this seems to cause troubles in contrast to jcr2spi where all&lt;br/&gt;
&amp;nbsp;&amp;nbsp;jcr and internal values are handled/created by the factories exposed by the Session.&lt;br/&gt;
&lt;br/&gt;
Notes about the identifier path elements:&lt;br/&gt;
&lt;br/&gt;
- I first thought about forcing the identifier-element be constructed from an ItemID &lt;br/&gt;
&amp;nbsp;&amp;nbsp;instead of a simple String, but dropped that again... for simplicity of the initial proposal...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;and because I wasn&amp;#39;t totally convinced if it would be any beneficial.&lt;br/&gt;
&lt;br/&gt;
The tests included in the 3rd attachement are just for completeness (TCK) and to have them saved away. Failing at the moment due to missing functionality in core/jcr2spi.&lt;br/&gt;
&lt;br/&gt;
angela&lt;br/&gt;
</comment>
                    <comment id="12700255" author="anchela" created="Fri, 17 Apr 2009 18:37:01 +0100"  >Value handling in jackrabbit-core:&lt;br/&gt;
&lt;br/&gt;
I spent some time with the issues listed above and came to the conclusion that we should take a similar approach&lt;br/&gt;
as in jcr2spi: Instead of using the commons ValueFactory and creating the Value objects manually in the InternalValue,&lt;br/&gt;
the jackrabbit-core should have it&amp;#39;s own ValueFactory implementation that creates value objects directly based on the InternalValue. With some minor effort this could be based on code already present in spi-commons (ValueFactoryQImpl, QValueValue created by Julian some time ago), which would be beneficial for the conversion from JCR-value to InternalValue and vice versa... those are already used within jackrabbit-core query-row somewhere.&lt;br/&gt;
&lt;br/&gt;
I will prepare a patch and upload it here as soon as possible.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12706737" author="anchela" created="Thu, 7 May 2009 07:50:37 +0100"  >Patch for jackrabbit-core containing the following modifications:&lt;br/&gt;
&lt;br/&gt;
- Session implements the IdentifierResolver interface in order to be able to deal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;with identifier based paths properly.&lt;br/&gt;
&lt;br/&gt;
- ValueFactory implementation (new) that always creates jcr-values wrapping an InternalValue&lt;br/&gt;
- consistently use this factory instead of jcr-commons valuefactory (except for those classes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;that do not have any relation to a Session).&lt;br/&gt;
- InternalValue implements QValue&lt;br/&gt;
- InternalValueFactory (new) is the QValueFactory used within the jcr ValueFactory&lt;br/&gt;
- InternalValue.getJCRValue which used to create the JCR value instances directly has been &lt;br/&gt;
&amp;nbsp;&amp;nbsp;deprecated and refactored to use the valuefactory.&lt;br/&gt;
&lt;br/&gt;
- the ValueFactoryQImpl and QValueFactory used within RowIteratorImpl are replaced&lt;br/&gt;
&amp;nbsp;&amp;nbsp;by the ValueFactory exposed by the Session. The former code is only used as fallback.&lt;br/&gt;
&lt;br/&gt;
- changes to the Path interface lead to a couple of changes in catch statements.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12706738" author="anchela" created="Thu, 7 May 2009 07:51:33 +0100"  >changes to jcr2spi and the spi implementations</comment>
                    <comment id="12706739" author="anchela" created="Thu, 7 May 2009 07:52:50 +0100"  >patch for SPI, SPI-commons and JCR-commons replacing the previous patches for SPI and SPI-commons.</comment>
                    <comment id="12706750" author="tmueller" created="Thu, 7 May 2009 08:50:40 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
A few remarks about &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2028&quot; title=&quot;JSR 283: JCR Path&quot;&gt;&lt;strike&gt;JCR-2028&lt;/strike&gt;&lt;/a&gt;_core.patch&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addPathValue(doc, fieldName, value.getPath());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} catch (RepositoryException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// will never occur&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
This is very dangerous. Maybe the implementation of addPathValue change, and the method sometimes does throw an exception. What about converting the RepositoryException to a RuntimeException instead?&lt;br/&gt;
&lt;br/&gt;
+        if (value == null) {&lt;br/&gt;
+            throw new IllegalArgumentException(&amp;quot;null value&amp;quot;);&lt;br/&gt;
+        }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (USE_DATA_STORE) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return new InternalValue(BLOBInResource.getInstance(value));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I would prefer a NullPointerException in that case. Could this be simplified, for example using a method &amp;#39;checkNull&amp;#39;? Or moved the check to the constructor to avoid copy&amp;amp;paste?&lt;br/&gt;
&lt;br/&gt;
-        val = new Long(value);&lt;br/&gt;
-        type = PropertyType.LONG;&lt;br/&gt;
+        super(new Long(value));&lt;br/&gt;
&lt;br/&gt;
Now that we can use Java 1.5, we should use Long.valueOf(...) because it has a cache.&lt;br/&gt;
&lt;br/&gt;
Did you overload equals without overloading hashCode? That&amp;#39;s dangerous, it might break hash tables.&lt;br/&gt;
</comment>
                    <comment id="12706770" author="anchela" created="Thu, 7 May 2009 09:56:47 +0100"  >hi tom, thanks for the quick feedback. i&amp;#39;ll address the issues you listed above as discussed and check whether the datastore tests that are not executed by default are passing... i will keep you informed.</comment>
                    <comment id="12706929" author="anchela" created="Thu, 7 May 2009 16:00:55 +0100"  >I committed the changes including the those addressing thomas&amp;#39; feedback at rev. r772659.&lt;br/&gt;
&lt;br/&gt;
Modifications:&lt;br/&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
- Implementation for the identifier-based JCR Path (see above)&lt;br/&gt;
- Adjusting the value handling in jackrabbit-core in order to allow for expanded names in Name and Path values as&lt;br/&gt;
&amp;nbsp;&amp;nbsp;well as for Identifier-based path values (see above for a short discussion of the problem)&lt;br/&gt;
- some trivial javadoc fixes (not related to the changes made)&lt;br/&gt;
&lt;br/&gt;
regarding thomas&amp;#39; remarks:&lt;br/&gt;
&lt;br/&gt;
a) catching RepositoryException in the BundleBinding: rethrown as IOException as some of the other prop type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;already did instead of ignoring&lt;br/&gt;
b) handling attempt to create InternalValue from null: check moved to the various constructors as discussed&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and adjusted the QValue tests accordingly... not yet changed to NullPointerException.&lt;br/&gt;
c) usage of Long.valueOf done in InternalValue and where ever I happen to see it while looking at the diffs and the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;other QValues. similarly treated the doubles.&lt;br/&gt;
d) equals/hashCode: fixed&lt;br/&gt;
&lt;br/&gt;
Testing&lt;br/&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
jackrabbit-jcr-test&lt;br/&gt;
- added 2 test classes NameTest and PathTest that cover the basics of the various variants of jcr names and jcr paths&lt;br/&gt;
- TODO: add more (sophisticated) tests&lt;br/&gt;
&lt;br/&gt;
jackrabbit-core&lt;br/&gt;
- jackrabbit-core tests including api test pass with datastore enabled and disabled&lt;br/&gt;
- i added some initial tests for InternalValue and the corresponding factory&lt;br/&gt;
&lt;br/&gt;
jackrabbit-spi2jcr&lt;br/&gt;
- the api test for path handling still fail for Node.getIdentifier() is not yet implemented.&lt;br/&gt;
&lt;br/&gt;
jackrabbit-spi&lt;br/&gt;
- added QValueTest&lt;br/&gt;
&lt;br/&gt;
jackrabbit-spi-commons&lt;br/&gt;
- added test for ValueFormat. currently only a single test regarding the changes made. this was: path values&lt;br/&gt;
&amp;nbsp;&amp;nbsp;are never meant to be normalized before being stored in the content.&lt;br/&gt;
- added various tests for the changes made to Path, PathFactory, PathParser and PathResolver for the handling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;of identifier based path&lt;br/&gt;
&lt;br/&gt;
TODO:&lt;br/&gt;
-----------------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
- PathParser stills needs some trivial adjustments as the list of illegal characters in JCR names changed (marked with&lt;br/&gt;
&amp;nbsp;&amp;nbsp;TODO in the code)&lt;br/&gt;
- added a couple of TODOs where I saw room for improvement or wasn&amp;#39;t sure.&lt;br/&gt;
&lt;br/&gt;
Up to now InternalValue&amp;#39;s behaviour was not covered by test cases. Therefore the changes made may introduce bugs that were not detected by the existing tests... (though i obviously tried to avoid that ;-).&lt;br/&gt;
&lt;br/&gt;
For this reason and due the remaining TODOs, I will keep this issue open...</comment>
                    <comment id="12714005" author="anchela" created="Thu, 28 May 2009 16:22:47 +0100"  >rev. 779624 resolved TODO regarding illegal character handling</comment>
                </comments>
                    <attachments>
                    <attachment id="12407431" name="JCR-2028_commons.patch" size="94217" author="anchela" created="Thu, 7 May 2009 07:52:50 +0100" />
                    <attachment id="12407429" name="JCR-2028_core.patch" size="75578" author="anchela" created="Thu, 7 May 2009 07:50:37 +0100" />
                    <attachment id="12407430" name="JCR-2028_jcr2spi_spiimpls.patch" size="19775" author="anchela" created="Thu, 7 May 2009 07:51:33 +0100" />
                    <attachment id="12404569" name="JCR-2028_spicommons.diff" size="61696" author="anchela" created="Fri, 3 Apr 2009 18:20:06 +0100" />
                    <attachment id="12404568" name="JCR-2028_spi.diff" size="3563" author="anchela" created="Fri, 3 Apr 2009 18:20:06 +0100" />
                    <attachment id="12404570" name="JCR-2028_tests.diff" size="10554" author="anchela" created="Fri, 3 Apr 2009 18:20:06 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 7 May 2009 07:50:40 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142967</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191179</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>