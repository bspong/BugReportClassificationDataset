<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:43:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3194/JCR-3194.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3194] ConcurrentModificationException in CacheManager.</title>
                <link>https://issues.apache.org/jira/browse/JCR-3194</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Using the test code below, I was able to produce this stack:&lt;br/&gt;
&lt;br/&gt;
java.util.ConcurrentModificationException&lt;br/&gt;
	at java.util.WeakHashMap$HashIterator.nextEntry(WeakHashMap.java:762)&lt;br/&gt;
	at java.util.WeakHashMap$KeyIterator.next(WeakHashMap.java:795)&lt;br/&gt;
	at org.apache.jackrabbit.core.cache.CacheManager.logCacheStats(CacheManager.java:164)&lt;br/&gt;
	at org.apache.jackrabbit.core.cache.CacheManager.cacheAccessed(CacheManager.java:137)&lt;br/&gt;
	at org.apache.jackrabbit.core.cache.AbstractCache.recordCacheAccess(AbstractCache.java:122)&lt;br/&gt;
	at org.apache.jackrabbit.core.cache.ConcurrentCache.get(ConcurrentCache.java:122)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.MLRUItemStateCache.retrieve(MLRUItemStateCache.java:71)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.ItemStateReferenceCache.retrieve(ItemStateReferenceCache.java:139)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.getNonVirtualItemState(SharedItemStateManager.java:1716)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:268)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:110)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:175)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:260)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:161)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemManager.getItemData(ItemManager.java:382)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:328)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:622)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemManager.getRootNode(ItemManager.java:531)&lt;br/&gt;
	at org.apache.jackrabbit.core.SessionImpl.getRootNode(SessionImpl.java:760)&lt;br/&gt;
	at test.JackrabbitTest$1.run(JackrabbitTest.java:37)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:662)&lt;br/&gt;
&lt;br/&gt;
-------------------------&lt;br/&gt;
&lt;br/&gt;
package test;&lt;br/&gt;
&lt;br/&gt;
import java.io.File;&lt;br/&gt;
import java.util.concurrent.ExecutorService;&lt;br/&gt;
import java.util.concurrent.Executors;&lt;br/&gt;
import java.util.concurrent.TimeUnit;&lt;br/&gt;
import java.util.concurrent.atomic.AtomicBoolean;&lt;br/&gt;
import java.util.concurrent.atomic.AtomicInteger;&lt;br/&gt;
&lt;br/&gt;
import javax.jcr.Repository;&lt;br/&gt;
import javax.jcr.RepositoryException;&lt;br/&gt;
import javax.jcr.Session;&lt;br/&gt;
import javax.jcr.SimpleCredentials;&lt;br/&gt;
&lt;br/&gt;
import org.apache.jackrabbit.core.TransientRepository;&lt;br/&gt;
&lt;br/&gt;
public class JackrabbitTest {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;public static void main(final String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;File dir = File.createTempFile(&amp;quot;jackrabbit-test&amp;quot;, &amp;quot;&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;dir.delete();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;dir.mkdir();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;created temporary directory: &amp;quot; +&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dir.getAbsolutePath());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;dir.deleteOnExit();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;final Repository jcrRepo = new TransientRepository(dir);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;final AtomicBoolean passed = new AtomicBoolean(true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;final AtomicInteger counter = new AtomicInteger(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;ExecutorService executor = Executors.newFixedThreadPool(50);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;Runnable runnable = new Runnable() {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session session = jcrRepo.login(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new SimpleCredentials(&amp;quot;admin&amp;quot;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;admin&amp;quot;.toCharArray()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.getRootNode().addNode(&amp;quot;n&amp;quot; +&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;counter.getAndIncrement()); //unique name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.save();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;session.logout();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (RepositoryException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;passed.set(false);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;};&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Running threads&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i&amp;lt;  500; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.execute(runnable);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;executor.shutdown(); //Disable new tasks from being submitted&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!executor.awaitTermination(120, TimeUnit.SECONDS)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println(&amp;quot;timeout&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!passed.get()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println(&amp;quot;one or more threads got an exception&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;all threads ran with no exceptions&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.exit(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12536320">JCR-3194</key>
            <summary>ConcurrentModificationException in CacheManager.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="lowerymb77">Mat Lowery</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Dec 2011 21:24:58 +0000</created>
                <updated>Wed, 25 Jan 2012 13:06:25 +0000</updated>
                    <resolved>Tue, 3 Jan 2012 16:58:12 +0000</resolved>
                            <version>2.3.4</version>
                                <fixVersion>2.3.7</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13178810" author="stefan@jira" created="Tue, 3 Jan 2012 16:48:05 +0000"  >only happens with log level set to DEBUG.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13178811" author="stefan@jira" created="Tue, 3 Jan 2012 16:48:45 +0000"  >this is a regression of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3098&quot; title=&quot;Add hit miss statistics and logging to caches&quot;&gt;&lt;strike&gt;JCR-3098&lt;/strike&gt;&lt;/a&gt;</comment>
                    <comment id="13178817" author="stefan@jira" created="Tue, 3 Jan 2012 16:58:12 +0000"  >fixed in svn r1226863.</comment>
                    <comment id="13187797" author="jukkaz" created="Tue, 17 Jan 2012 16:52:41 +0000"  >Merged to the 2.4 branch in revision 1232474.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 3 Jan 2012 16:48:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>222004</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>231738</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>