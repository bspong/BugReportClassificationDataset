<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:39:06 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2498/JCR-2498.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2498] Implement caching mechanism for ItemInfo batches</title>
                <link>https://issues.apache.org/jira/browse/JCR-2498</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Currently all ItemInfos returned by RepositoryService#getItemInfos are placed into the hierarchy right away. For big batch sizes this is prohibitively expensive. The overhead is so great (*), that it quickly outweighs the overhead of network round trips. Moreover, SPI implementations usually choose the batch in a way determined by the backing persistence store and not by the requirements of the consuming application on the JCR side. That is, many of the items in the batch might never be actually needed. &lt;br/&gt;
&lt;br/&gt;
I suggest to implement a cache for ItemInfo batches. Conceptually such a cache would live inside jcr2spi right above the SPI API. The actual implementation would be provided by SPI implementations. This approach allows for fine tuning cache/batch sizes to a given persistence store and network environment. This would also better separate different concerns: the purpose of the existing item cache is to optimize for the requirement of the consumer of the JCR API (&amp;#39;the application&amp;#39;). The new ItemInfo cache is to optimize for the specific network environment and backing persistence store. &lt;br/&gt;
&lt;br/&gt;
(*) Numbers follow </description>
                <environment></environment>
            <key id="12456427">JCR-2498</key>
            <summary>Implement caching mechanism for ItemInfo batches</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mduerig">Michael D&#252;rig</assignee>
                                <reporter username="mduerig">Michael D&#252;rig</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Feb 2010 13:16:02 +0000</created>
                <updated>Thu, 2 May 2013 03:29:28 +0100</updated>
                    <resolved>Wed, 24 Feb 2010 14:49:28 +0000</resolved>
                                            <fixVersion>2.1</fixVersion>
                                <component>jackrabbit-jcr2spi</component>
                <component>jackrabbit-spi</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12834250" author="mduerig" created="Tue, 16 Feb 2010 15:28:14 +0000"  >As promised some numbers. All measurements are done using ReadPerformanceTest.java [1]. &lt;br/&gt;
&lt;br/&gt;
Batch size: 24340, 12170, 6085, 3043, 1521, 761, 380, 190, 95, 48, 24, 12, 6, 3, 1&lt;br/&gt;
ms per request: 20.2, 24.2, 17.4, 16.3, 7.3, 3.0, 2.5, 2.1, 2.0, 1.3, 1.3, 1.1, 1.0, 1.0, 1.1&lt;br/&gt;
&lt;br/&gt;
The performance impact of large batches is clearly visible here. Without refresh operations [2] the picture remains similar but less pronounced:&lt;br/&gt;
&lt;br/&gt;
Batch size: 24340, 12170, 6085, 3043, 1521, 761, 380, 190, 95, 48, 24, 12, 6, 3, 1&lt;br/&gt;
ms per request: 5.1, 17.1, 16.3, 12.0, 6.0, 2.6, 2.7, 2.0, 2.0, 1.4, 1.4, 1.2, 1.0, 1.1, 1.3&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;http://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/benchmark/ReadPerformanceTest.java?revision=910523&amp;view=markup&amp;pathrev=910523&quot;&gt;http://svn.apache.org/viewvc/jackrabbit/trunk/jackrabbit-jcr2spi/src/test/java/org/apache/jackrabbit/jcr2spi/benchmark/ReadPerformanceTest.java?revision=910523&amp;amp;view=markup&amp;amp;pathrev=910523&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
[2] See upcoming patch&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12834251" author="mduerig" created="Tue, 16 Feb 2010 15:29:30 +0000"  >Here&amp;#39;s the patch mentioned in [2] above. &lt;br/&gt;
&lt;br/&gt;
Index: src/test/java/org/apache/jackrabbit/jcr2spi/benchmark/ReadPerformanceTest.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- src/test/java/org/apache/jackrabbit/jcr2spi/benchmark/ReadPerformanceTest.java&lt;br/&gt;
+++ src/test/java/org/apache/jackrabbit/jcr2spi/benchmark/ReadPerformanceTest.java&lt;br/&gt;
@@ -136,7 +136,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final List&amp;lt;Item&amp;gt; items = new ArrayList&amp;lt;Item&amp;gt;();&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int k = 0; k &amp;lt; count; k ++) {&lt;br/&gt;
-            switch (rnd.nextInt(4)) {&lt;br/&gt;
+            switch (rnd.nextInt(3)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;case 0: { // getItem&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;callables.add(new Callable&amp;lt;Long&amp;gt;() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Long call() throws Exception {&lt;br/&gt;
</comment>
                    <comment id="12834257" author="mduerig" created="Tue, 16 Feb 2010 15:35:12 +0000"  >POC of the cache implementation as described above. &lt;br/&gt;
&lt;br/&gt;
The patch is functionally complete. The implementation is hard coded however and not yet exposed to the respective APIs. See fixme tags in the code. </comment>
                    <comment id="12834272" author="mduerig" created="Tue, 16 Feb 2010 15:53:57 +0000"  >Some more numbers demonstrating the effect with &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2498&quot; title=&quot;Implement caching mechanism for ItemInfo batches&quot;&gt;&lt;strike&gt;JCR-2498&lt;/strike&gt;&lt;/a&gt;-poc.patch applied. The &amp;#39;new/old time&amp;#39; row gives the quotients of the request times with the patch applied vs. without the patch applied. The &amp;#39;new/old rts&amp;#39; row gives the quotients of the network round trips with the patch applied vs. without the patch applied. &lt;br/&gt;
&lt;br/&gt;
The first measurement includes all operations (getItem, getNode, getProperty and refresh) as above. &lt;br/&gt;
&lt;br/&gt;
Batch size: 24340, 12170, 6085, 3043, 1521, 761, 380, 190, 95, 48, 24, 12, 6, 3, 1&lt;br/&gt;
new/old time: 0.1, 0.1, 0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.5, 0.7, 0.6, 1, 1, 1.1, 0.8&lt;br/&gt;
new/old rts: 2.1, 2.8, 1.8, 2.4, 1.8, 1.4, 1.3, 1.2, 1, 1.1, 1, 1, 0.9, 1, 0.9&lt;br/&gt;
&lt;br/&gt;
Most obvious is the vast performance increase (up to factor 10) for reading items. However this comes along with an increase of the number of network round trips. Three things should be noted here: 1. For realistic batch sizes the increase of the number of network round trips is not so significant. 2. The increase of the number of network round trips are caused by the refresh operations. In the test scenario the number of refresh operations is unrealistically high (every fourth operation is a refresh). 3. The items in the batches of the test case are not realistically distributed across the items of the repository. That is, the items are randomly chosen from the repository. In practice however, the items in a batch would be related to each other by some locality criteria. I assume that this would further mitigate the observed effect. &lt;br/&gt;
&lt;br/&gt;
For completeness sake here the same measurement as above but without refresh operations: &lt;br/&gt;
&lt;br/&gt;
Batch size: 24340, 12170, 6085, 3043, 1521, 761, 380, 190, 95, 48, 24, 12, 6, 3, 1&lt;br/&gt;
new/old time: 0.2, 0, 0, 0.1, 0.1, 0.2, 0.4, 0.4, 0.6, 0.6, 0.7, 1, 1, 1, 1.1&lt;br/&gt;
new/old rts: 1, 1, 0.9, 0.9, 0.8, 0.9, 0.9, 0.9, 0.9, 1, 1, 1, 1, 1, 1&lt;br/&gt;
</comment>
                    <comment id="12834324" author="anchela" created="Tue, 16 Feb 2010 17:32:03 +0000"  >although i didn&amp;#39;t look at the poc-patch in detail....based on our f2f discussion: looks reasonable to me :)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12837812" author="mduerig" created="Wed, 24 Feb 2010 14:49:28 +0000"  >Applied a cleaned up/improved version of the patch in revision 915810  &lt;br/&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12456423">JCR-2497</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12435981" name="JCR-2498-poc.patch" size="63507" author="mduerig" created="Tue, 16 Feb 2010 15:35:12 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 16 Feb 2010 17:32:03 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>143169</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190427</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>