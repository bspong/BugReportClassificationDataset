<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:42:22 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-791/JCR-791.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-791] Improve performance of MatchAllScorer</title>
                <link>https://issues.apache.org/jira/browse/JCR-791</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The BitSets created in MatchAllScorer should be cached per IndexReader. This enhancement should also take care that the supplied IndexReader may in fact be a CombinedIndexReader or a CachingMultiReader with multiple contained IndexReaders. To achieve a good cache efficiency the BitSets must be cached per contained IndexReader and combined later.&lt;br/&gt;
&lt;br/&gt;
See also thread on dev list: &lt;a href=&quot;http://thread.gmane.org/gmane.comp.apache.jackrabbit.devel/10976&quot;&gt;http://thread.gmane.org/gmane.comp.apache.jackrabbit.devel/10976&lt;/a&gt;</description>
                <environment></environment>
            <key id="12364907">JCR-791</key>
            <summary>Improve performance of MatchAllScorer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mreutegg">Marcel Reutegger</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Mar 2007 13:06:56 +0000</created>
                <updated>Wed, 25 Apr 2007 09:45:31 +0100</updated>
                    <resolved>Fri, 16 Mar 2007 14:10:26 +0000</resolved>
                                            <fixVersion>1.3</fixVersion>
                                <component>query</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12481569" author="mreutegg" created="Fri, 16 Mar 2007 11:12:52 +0000"  >Here&amp;#39;s what I&amp;#39;ve done so far:&lt;br/&gt;
&lt;br/&gt;
- Introduced a MultiIndexReader interface that allows to access the sub index readers.&lt;br/&gt;
- CachingMultiReader and SearchIndex.CombinedIndexReader now implement MultiIndexReader&lt;br/&gt;
- Created a MultiScorer which spans multiple sub scorers and combines. The MultiScorer exposes the sub scorers as if there is just a single scorer.&lt;br/&gt;
- Changed MatchAllWeight to create individual scorers for each sub IndexReader contained in a MultiIndexReader and finally combines them into a MultiScorer.&lt;br/&gt;
- Introduced a BitSet cache in MatchAllScorer&lt;br/&gt;
&lt;br/&gt;
I then conducted the following tests:&lt;br/&gt;
&lt;br/&gt;
Setup:&lt;br/&gt;
&lt;br/&gt;
- 50&amp;#39;000 nodes&lt;br/&gt;
- resultFetchSize: 50&lt;br/&gt;
- respectDocumentOrder: false&lt;br/&gt;
&lt;br/&gt;
100 queries: //element(*, nt:unstructured)[@foo]&lt;br/&gt;
&amp;nbsp;(only size of NodeIterator is read, no node access)&lt;br/&gt;
&lt;br/&gt;
Results:&lt;br/&gt;
&lt;br/&gt;
1) with jackrabbit 1.2.3:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;82078 ms&lt;br/&gt;
&lt;br/&gt;
2) with MatchAllScorer per index segment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;combined with MultiScorer without caching:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;10297 ms&lt;br/&gt;
&lt;br/&gt;
3) with MatchAllScorer per index segment&lt;br/&gt;
&amp;nbsp;&amp;nbsp;combined with MultiScorer with caching:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;6156 ms&lt;br/&gt;
&lt;br/&gt;
My conclusion is that the the lucene MultiTermDocs implementation adds significant cost when a single MatchAllScorer is used in test scenario 1). And it actually makes sense. If a single MatchAllScorer is used, lucene has to merge sort the @foo terms of several index segments, while in the test scenarios 2) and 3) no merge sort is needed for the @foo terms.&lt;br/&gt;
&lt;br/&gt;
With the changes the query performance even seems good enough even without caching. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m tempted to only check the changes without caching because the additional performance improvement with caching does not seem to warrant the memory consumption of the cache: 2) decreases the query time compared to the current implementation by 87% while 3) decreases query time by 92%.</comment>
                    <comment id="12481616" author="mreutegg" created="Fri, 16 Mar 2007 13:52:11 +0000"  >Changed summary to describe what should be improved and not how.</comment>
                    <comment id="12481620" author="mreutegg" created="Fri, 16 Mar 2007 14:10:26 +0000"  >Committed the enhancement without the cache in MatchAllScorer. The performance improvement is IMO sufficient enough with just the MultiScorer.&lt;br/&gt;
&lt;br/&gt;
At revision: 518979</comment>
                    <comment id="12482031" author="mreutegg" created="Mon, 19 Mar 2007 09:05:28 +0000"  >MatchAllScorer diff, which introduces a BitSet cache.</comment>
                    <comment id="12482033" author="mreutegg" created="Mon, 19 Mar 2007 09:06:34 +0000"  >Performance test case for queries with &amp;#39;not null&amp;#39; condition.</comment>
                </comments>
                    <attachments>
                    <attachment id="12353631" name="MatchAllScorer.java.diff" size="1788" author="mreutegg" created="Mon, 19 Mar 2007 09:05:28 +0000" />
                    <attachment id="12353632" name="PerformanceTest.java" size="2568" author="mreutegg" created="Mon, 19 Mar 2007 09:06:34 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142367</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279588</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>