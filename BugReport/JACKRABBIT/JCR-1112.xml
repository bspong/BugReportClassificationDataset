<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 06:00:23 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1112/JCR-1112.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1112] CacheManager interval between recalculation of cache sizes should be configurable</title>
                <link>https://issues.apache.org/jira/browse/JCR-1112</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Currently interval between recaluclation of cahce size is hard coded to 1000 ms. Resizing/recalculation of cache size is quite expensive method (especially getMemoryUsed on MLRUItemStateCache is time consuming)&lt;br/&gt;
&lt;br/&gt;
Depending on the configuration, we realized that under some load up to 10-15% percent of CPU time (profiler metrics) could be spend doing such recalculations. It does not seem to be needed to resize cache every second. Best this interval should be configurable in external config. file with other cache settings (like memory sizes).</description>
                <environment></environment>
            <key id="12377469">JCR-1112</key>
            <summary>CacheManager interval between recalculation of cache sizes should be configurable</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="tmueller">Thomas Mueller</assignee>
                                <reporter username="ppakulski">Przemo Pakulski</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Sep 2007 17:31:12 +0100</created>
                <updated>Fri, 29 Feb 2008 14:17:31 +0000</updated>
                    <resolved>Thu, 22 Nov 2007 00:47:29 +0000</resolved>
                                            <fixVersion>1.3.4</fixVersion>
                <fixVersion>1.4</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12524786" author="ppakulski" created="Tue, 4 Sep 2007 17:37:04 +0100"  >Attached simple patch which allows to set the interval programmatically, and change the default interval to 10 seconds.</comment>
                    <comment id="12524810" author="jukkaz" created="Tue, 4 Sep 2007 19:19:21 +0100"  >+1 I&amp;#39;d wouldn&amp;#39;t mind pushing the default interval up to a minute or even higher. I don&amp;#39;t think there&amp;#39;s much benefit in too aggressive cache balancing.</comment>
                    <comment id="12524813" author="jukkaz" created="Tue, 4 Sep 2007 19:21:47 +0100"  >BTW, please use spaces instead of tabs for indentation.</comment>
                    <comment id="12525013" author="tmueller" created="Wed, 5 Sep 2007 09:20:34 +0100"  >For certain use cases, 10 seconds delay may result in OutOfMemoryException. I&amp;#39;m not against applying this patch, but we need to be sure it doesn&amp;#39;t render the CacheManager ineffective.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; under some load &lt;br/&gt;
&lt;br/&gt;
Is there a way to reproduce this problem using a simple test application? If not, I like to write one. To do that, I need some more information: How many sessions, how much memory is available / used (java -Xmx...), what is the algorithm, is XA used, versioning, how do the nodes look like, how does the data look like, virtual machine, operating system? &lt;br/&gt;
&lt;br/&gt;
&amp;gt; up to 10-15% percent of CPU time (profiler metrics) &lt;br/&gt;
&lt;br/&gt;
How was this measured?&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
Thomas&lt;br/&gt;
</comment>
                    <comment id="12525529" author="raff" created="Thu, 6 Sep 2007 22:02:43 +0100"  >I can reproduce this problem or something related to this by simply importing an XML file with a few thousand nodes. The more nodes I have in the repository and the more time the system spend in rebalancing the cache, pretty much at every access to the repository.&lt;br/&gt;
&lt;br/&gt;
I was experimenting with a system with a simple hierarchical structure like:&lt;br/&gt;
&lt;br/&gt;
/users&lt;br/&gt;
&amp;nbsp;&amp;nbsp;user1&lt;br/&gt;
&amp;nbsp;&amp;nbsp;user2&lt;br/&gt;
&amp;nbsp;&amp;nbsp;user3&lt;br/&gt;
&lt;br/&gt;
for each user I had a large data structure stored as XML (like an imported XML file)&lt;br/&gt;
&lt;br/&gt;
with such a system, even with only a few users, accessing to the node /users/&amp;lt;userX&amp;gt; takes seconds (and the more users or complex structure I have the longer it takes) and all I see in the logs is resizeAll() messages&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12525588" author="tmueller" created="Fri, 7 Sep 2007 05:13:50 +0100"  >&amp;gt; and all I see in the logs is resizeAll() messages&lt;br/&gt;
&lt;br/&gt;
Don&amp;#39;t blame the messenger. Seeing the messages doesn&amp;#39;t mean this is the problem. The messages are disabled in the trunk.&lt;br/&gt;
&lt;br/&gt;
Do you have some profiling data?</comment>
                    <comment id="12528280" author="tmueller" created="Tue, 18 Sep 2007 08:40:38 +0100"  >In my view, the root cause (why does recalculation take so long, are there hundreds of caches?) should be understood and fixed. Just changing the interval would hide another problem, and may cause out of memory error.&lt;br/&gt;
&lt;br/&gt;
To solve this problem the root cause of the problem needs to be reproducible (but maybe the solution will be different then).</comment>
                    <comment id="12528718" author="martijnh" created="Wed, 19 Sep 2007 10:55:55 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
I think that there are some issues with the current CacheManager that could be improved:&lt;br/&gt;
&lt;br/&gt;
- The MLRUItemStateCache.touch method triggers the CacheManager.cacheAccessed method, which may call resizeAll. When the system is heavily loaded, many threads may unnecessarily be blocked by the synchronized block in CacheManager.cacheAccessed. The chances for this increase as SLEEP decreases and the time needed for resizeAll increases. This could easily be improved .&lt;br/&gt;
&lt;br/&gt;
- The resizeAll method is expensive (for MLRUItemStateCaches, which are used everywhere) because it calls MLRUItemStateCache.getMemoryUsed, which recalculates the size of each entry in the cache (linear complexity in the size of the cache...). Since the NodeState/PropertyState.calculateMemoryFootprint seem to give approximate values anyway, wouldn&amp;#39;t it be an idea to keep track of the approximate cache size in the MLRUItemStateCache itself? Furthermore, getMemoryUsed even blocks read-access to the cache. A large shared cache such as the one of the SharedItemStateManager suffers significantly from this, I think.&lt;br/&gt;
&lt;br/&gt;
The minimum time between rebalancing seems small but, as Thomas noted, there are certain use-cases where this is needed. Isn&amp;#39;t there a way to detect such extreme cache blowups in another way? When, for instance, a MLRUItemStateCache keeps track of its own approximate size, the time derivative of this size could be used to prevent blowups.&lt;br/&gt;
&lt;br/&gt;
Best wishes,&lt;br/&gt;
&lt;br/&gt;
Martijn</comment>
                    <comment id="12530078" author="tmueller" created="Tue, 25 Sep 2007 10:55:37 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
The method getMemoryUsed could be improved by keeping the current value and only add / subtract when there are changes. Still from time to time a full recalculation (like now) is required because the size of the objects in the cache could change. If only one in 20 calls trigger a full recalculation, it would result in a speed up of about 10 times.&lt;br/&gt;
&lt;br/&gt;
For me, the CacheManager is a workaround; if possible the number of caches should be reduced to one.&lt;br/&gt;
&lt;br/&gt;
Thomas</comment>
                    <comment id="12530079" author="jukkaz" created="Tue, 25 Sep 2007 11:00:49 +0100"  >&amp;gt; For me, the CacheManager is a workaround; if possible the number of caches should be reduced to one.&lt;br/&gt;
&lt;br/&gt;
+1!</comment>
                    <comment id="12544661" author="jukkaz" created="Thu, 22 Nov 2007 00:47:29 +0000"  >Resolving as fixed for 1.4 based Przemo&amp;#39;s changes in revision 592950.</comment>
                    <comment id="12573758" author="jukkaz" created="Fri, 29 Feb 2008 14:17:31 +0000"  >Merged to the 1.3 branch in revision 631606.</comment>
                </comments>
                    <attachments>
                    <attachment id="12365093" name="JCR-1112.txt" size="2269" author="ppakulski" created="Tue, 4 Sep 2007 17:37:04 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 4 Sep 2007 18:19:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142524</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279718</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>