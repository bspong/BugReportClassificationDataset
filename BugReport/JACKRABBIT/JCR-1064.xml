<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:43:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1064/JCR-1064.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1064] Optimize queries that check for the existence of a property</title>
                <link>https://issues.apache.org/jira/browse/JCR-1064</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>//*[@mytext] is transformed into the org.apache.jackrabbit.core.query.lucene.MatchAllQuery, that through the MatchAllWeight uses the MatchAllScorer.  The calculateDocFilter() in MatchAllScorer  does not scale and becomes slow for growing number of nodes. &lt;br/&gt;
&lt;br/&gt;
Solution: lucene documents will get a new Field:&lt;br/&gt;
&lt;br/&gt;
public static final String PROPERTIES_SET = &amp;quot;_:PROPERTIES_SET&amp;quot;.intern();&lt;br/&gt;
&lt;br/&gt;
that holds the available properties of this document. &lt;br/&gt;
&lt;br/&gt;
NOTE: Lucene indices build without this performance improvement should still work and fall back to the original implementation</description>
                <environment></environment>
            <key id="12376055">JCR-1064</key>
            <summary>Optimize queries that check for the existence of a property</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="aschrijvers">Ard Schrijvers</reporter>
                        <labels>
                    </labels>
                <created>Wed, 15 Aug 2007 14:48:42 +0100</created>
                <updated>Tue, 15 Jan 2008 23:26:51 +0000</updated>
                    <resolved>Mon, 24 Sep 2007 09:47:42 +0100</resolved>
                                            <fixVersion>1.4</fixVersion>
                                <component>indexing</component>
                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12519970" author="aschrijvers" created="Wed, 15 Aug 2007 14:51:54 +0100"  >Reminder: I did not check it yet, but I should look at the Index Aggregates described in [1] as well, that not child nodes which are defined in an aggregate rule add there &amp;quot;available properties&amp;quot; to the indexed node in PROPERTIES_SET&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;http://wiki.apache.org/jackrabbit/IndexingConfiguration&quot;&gt;http://wiki.apache.org/jackrabbit/IndexingConfiguration&lt;/a&gt;</comment>
                    <comment id="12519975" author="mreutegg" created="Wed, 15 Aug 2007 15:16:09 +0100"  >You should be just fine. Only the field FieldNames.FULLTEXT is packaged into an aggregate document.</comment>
                    <comment id="12522092" author="aschrijvers" created="Thu, 23 Aug 2007 11:41:14 +0100"  >According the thread in [1], we have chosen to implement the backwards compatibility by a check at startup wether the index is in old or new format:&lt;br/&gt;
&lt;br/&gt;
Christoph: boolean propertySetSupported = index.getIndexReader().getFieldNames(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;FieldOption.ALL).contains(FieldNames.PROPERTIES_SET)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|| index.getIndexReader().numDocs() == 0;&lt;br/&gt;
&lt;br/&gt;
Since I need this boolean value in the nodeIndexer I need this property to be available through the IndexingConfiguration, since I do not have access to the SearchIndex in the NodeIndexer.  This means adding a &lt;br/&gt;
&lt;br/&gt;
void setNewIndexFormat(boolean newIndexFormat); and&lt;br/&gt;
boolean getNewIndexFormat(); &lt;br/&gt;
&lt;br/&gt;
in the lucene/QueryImpl, I need in &lt;br/&gt;
&lt;br/&gt;
Query query = LuceneQueryBuilder.createQuery(root, session,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;index.getContext().getItemStateManager(), index.getNamespaceMappings(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;index.getTextAnalyzer(), propReg, index.getSynonymProvider());&lt;br/&gt;
&lt;br/&gt;
to also put in an argument for the indexFormat, to have this format available in LuceneQueryBuilder. WDOT? &lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;http://www.mail-archive.com/dev@jackrabbit.apache.org/msg06907.html&quot;&gt;http://www.mail-archive.com/dev@jackrabbit.apache.org/msg06907.html&lt;/a&gt;</comment>
                    <comment id="12522113" author="aschrijvers" created="Thu, 23 Aug 2007 13:02:07 +0100"  >IndexingConfiguration might be null when not configured, so the above suggestion does not work. I&amp;#39;ll go for instance variable in SearchIndex class</comment>
                    <comment id="12522132" author="aschrijvers" created="Thu, 23 Aug 2007 14:15:42 +0100"  >AFAICS, the matchAllScorer won&amp;#39;t be needed anymore with the new index format. Therefor, I won&amp;#39;t add the changes to matchAllScorer that I had, because it implies that it scorer needs to know the format. For those interested, the improvement was like:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(newFormat){&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	TermDocs docs = reader.termDocs(new Term(FieldNames.PROPERTIES_SET,field));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	while (docs.next()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;docFilter.set(docs.doc());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	docs.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
	        String namedValue = FieldNames.createNamedValue(field, &amp;quot;&amp;quot;);&lt;br/&gt;
	        TermEnum terms = reader.terms(new Term(FieldNames.PROPERTIES, namedValue));&lt;br/&gt;
	        try {&lt;br/&gt;
	            TermDocs docs = reader.termDocs();&lt;br/&gt;
	            try {&lt;br/&gt;
	                while (terms.term() != null&lt;br/&gt;
	                        &amp;amp;&amp;amp; terms.term().field() == FieldNames.PROPERTIES&lt;br/&gt;
	                        &amp;amp;&amp;amp; terms.term().text().startsWith(namedValue)) {&lt;br/&gt;
	                    docs.seek(terms);&lt;br/&gt;
	                    while (docs.next()) {&lt;br/&gt;
	                        docFilter.set(docs.doc());&lt;br/&gt;
	                    }&lt;br/&gt;
	                    terms.next();&lt;br/&gt;
	                }&lt;br/&gt;
	            } finally {&lt;br/&gt;
	                docs.close();&lt;br/&gt;
	            }&lt;br/&gt;
	        } finally {&lt;br/&gt;
	            terms.close();&lt;br/&gt;
	        }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}</comment>
                    <comment id="12522143" author="aschrijvers" created="Thu, 23 Aug 2007 14:57:10 +0100"  >Patch that implements &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1064&quot; title=&quot;Optimize queries that check for the existence of a property&quot;&gt;&lt;strike&gt;JCR-1064&lt;/strike&gt;&lt;/a&gt;. &lt;br/&gt;
&lt;br/&gt;
Changes: &lt;br/&gt;
&lt;br/&gt;
FieldNames.java&lt;br/&gt;
LuceneQueryBuilder.java&lt;br/&gt;
NodeIndexer.java&lt;br/&gt;
QueryImpl.java&lt;br/&gt;
SearchIndex.java</comment>
                    <comment id="12522147" author="aschrijvers" created="Thu, 23 Aug 2007 15:00:57 +0100"  >1 note:&lt;br/&gt;
&lt;br/&gt;
In LuceneQueryBuilder.createQuery:&lt;br/&gt;
&lt;br/&gt;
public static Query createQuery(QueryRootNode root,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SessionImpl session,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ItemStateManager sharedItemMgr,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NamespaceMappings nsMappings,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Analyzer analyzer,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;PropertyTypeRegistry propReg)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throws RepositoryException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return createQuery(root, session, sharedItemMgr, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nsMappings, analyzer, propReg, null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
I added  return &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;createQuery(root, session, sharedItemMgr, &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;nsMappings, analyzer, propReg, null,true);&lt;br/&gt;
&lt;br/&gt;
so, default index format true for this static call, because this static call does not seem to be used. Or could we better add it to the call of this static method? Or can we remove this method?&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12522442" author="ckiehl" created="Fri, 24 Aug 2007 09:59:17 +0100"  >I like the patch so far. Just a few comments:&lt;br/&gt;
&lt;br/&gt;
LuceneQueryBuilder: &lt;br/&gt;
- I would rename getMatchAllQuery() to createMatchAllQuery() to make clear that a new instance is created&lt;br/&gt;
- I think it&amp;#39;s not a valid option to imply the new index format in the old createQuery() variant. I would rather imply the old index format since this will works with the new index as well (until now). But the optimal solution would be to remove this methods. Let&amp;#39;s wait what Marcel says.&lt;br/&gt;
&lt;br/&gt;
SearchIndex:&lt;br/&gt;
- You seem to have called &amp;quot;Organize Imports&amp;quot;. If you could adjust the import order to Jackrabbits order this would make the diff smaller&lt;br/&gt;
- I would rewrite the format check to:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// The index is in the new format if either the index already contains&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// the field FieldNames.PROPERTIES_SET in any document or if the index&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// is empty&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collection allFieldNames = index.getIndexReader().getFieldNames(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	             FieldOption.ALL);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newIndexFormat = allFieldNames.contains(FieldNames.PROPERTIES_SET)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	                 || index.getIndexReader().numDocs() == 0;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!newIndexFormat) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.warn(&amp;quot;Index is in old format. This might imply slower queries.&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ &amp;quot;Re-index if possible&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
My line was actually just a quick example. I think it&amp;#39;s more readable if it is split into two lines at least. The other point is that I prefer to always enclose if-blocks with curly braces. This is less error prone when adding new statements to the block.&lt;br/&gt;
&lt;br/&gt;
Overall you should take care of using spaces instead of tabs everywhere. In case you use eclipse just edit your formatter preferences for that particular project and do &amp;lt;Ctrl&amp;gt;+I on the sections in question. This will re-indent those sections.&lt;br/&gt;
&lt;br/&gt;
Sounds like a lot of critics but I really like and appreciate your work!</comment>
                    <comment id="12522443" author="aschrijvers" created="Fri, 24 Aug 2007 10:11:56 +0100"  >Don&amp;#39;t think it is much critics :-)  &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll try to do your suggested changes and formatting, and do the old createQuery() in the old style. This was indeed my point of doubt as indicated already. &lt;br/&gt;
&lt;br/&gt;
Try to have the new patch in short notice. </comment>
                    <comment id="12522461" author="mreutegg" created="Fri, 24 Aug 2007 11:27:53 +0100"  >Ard, thanks a lot for the patch, good work.&lt;br/&gt;
&lt;br/&gt;
Here are some more comments:&lt;br/&gt;
&lt;br/&gt;
- Instead of the boolean value newIndexFormat I would rather prefer version constants. something like:&lt;br/&gt;
&lt;br/&gt;
public final class IndexVersion {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final IndexVersion V1 = new IndexVersion(&amp;quot;1&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static final IndexVersion V2 = new IndexVersion(&amp;quot;2&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final String info;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private IndexVersion(String info) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.info = info;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public String getInfo() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return info;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
- SearchIndex.getIndexReader() always returns a new reader instance. That means you have to close the returned reader when you are done checking the index version.&lt;br/&gt;
</comment>
                    <comment id="12522466" author="aschrijvers" created="Fri, 24 Aug 2007 11:43:24 +0100"  >Not closing SearchIndex.getIndexReader(), that is an ugly mistake. Correct it.&lt;br/&gt;
&lt;br/&gt;
About the IndexVersion class. You want this to be a SearchIndex innerclass or a seperate one? &lt;br/&gt;
&lt;br/&gt;
And then, instead of &lt;br/&gt;
&lt;br/&gt;
if(newIndexFormat)&lt;br/&gt;
&lt;br/&gt;
something like &lt;br/&gt;
&lt;br/&gt;
if(indexVersion.getInfo.equals(&amp;quot;1&amp;quot;) )  &lt;br/&gt;
&lt;br/&gt;
The reasoning is that it is more flexible if we might face another indexing format, we can add &amp;quot;3&amp;quot; &lt;br/&gt;
&lt;br/&gt;
I you let me know, I will upload the patch (which I was doing by the way with Christoph&amp;#39;s changes and almost hit post, when I saw your suggestions :-) )</comment>
                    <comment id="12522467" author="aschrijvers" created="Fri, 24 Aug 2007 11:44:24 +0100"  >ps : is it possible to mark the current patch as deprecated or something? </comment>
                    <comment id="12522481" author="aschrijvers" created="Fri, 24 Aug 2007 12:42:54 +0100"  >I am now creating a new IndexFormatVersion class (think IndexFormatVersion is more explanative then IndexVersion, right? If you like IndexVersion better, i can change it)&lt;br/&gt;
&lt;br/&gt;
The remark above about how to compare [if(indexVersion.getInfo.equals(&amp;quot;1&amp;quot;) ) ] can be ignored. Understand how Marcel wants it.</comment>
                    <comment id="12522508" author="aschrijvers" created="Fri, 24 Aug 2007 14:07:42 +0100"  >Hmmm, having a problem. &lt;br/&gt;
&lt;br/&gt;
When the index is empty at startup, the multiIndex seems to index some documents &lt;br/&gt;
&lt;br/&gt;
if (indexNames.size() == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;reindexing = true;&lt;br/&gt;
&lt;br/&gt;
This means, that &lt;br/&gt;
&lt;br/&gt;
index.getIndexReader().numDocs() == 0; is always false in SearchIndex doInit(). &lt;br/&gt;
&lt;br/&gt;
I can try to add in MultiIndex when reindexing = true to add default fieldNames.PROPERTY_SET, but I am afraid, if somebody makes a change, it might break again. It is kind of a problem of the &lt;br/&gt;
&lt;br/&gt;
allFieldNames.contains(FieldNames.PROPERTIES_SET) || numDocs == 0&lt;br/&gt;
&lt;br/&gt;
test, which assumes some parts, and can be easy to break. &lt;br/&gt;
&lt;br/&gt;
WDOT? Shall I add it to MultiIndex, when reindexnig is true that  PROPERTY_SET FieldName is added? I do not really like it though.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12522526" author="mreutegg" created="Fri, 24 Aug 2007 14:42:17 +0100"  >&amp;gt; ps : is it possible to mark the current patch as deprecated or something?&lt;br/&gt;
&lt;br/&gt;
I prefer to just keep the attached patches to have a history on what was discussed.&lt;br/&gt;
&lt;br/&gt;
And right now, I actually wanted to review the patch again to see where exactly you are checking for the PROPERTIES_SET. But the patch is gone :-/</comment>
                    <comment id="12522527" author="aschrijvers" created="Fri, 24 Aug 2007 14:45:41 +0100"  >Added the deprecated patch for review</comment>
                    <comment id="12522529" author="aschrijvers" created="Fri, 24 Aug 2007 14:52:07 +0100"  >Added patch again.&lt;br/&gt;
&lt;br/&gt;
The problem is that in de SearchIndex in the doInti() the index.getIndexReader().numDocs() is always larger then 0 (this was not true untill recently, because it worked for me before)&lt;br/&gt;
&lt;br/&gt;
The problem is, that in MultiIndex, when if (indexNames.size() == 0) { , a persistent index is created. The lucene Docs that are added then do not use the nodeIndexer, and thus, the FieldNames.PROPERTIES_SET does not occur, and numDocs &amp;gt; 0, so always old index format style.&lt;br/&gt;
&lt;br/&gt;
I can add in MultiIndex a instance variable and a getter, that is&lt;br/&gt;
&lt;br/&gt;
boolean created; &lt;br/&gt;
&lt;br/&gt;
that I can call from IndexSearcher&lt;br/&gt;
&lt;br/&gt;
In doInit(), I get&lt;br/&gt;
&lt;br/&gt;
1) FieldNames.PROPERTIES_SET  exists, or&lt;br/&gt;
2) numDocs() == 0 or,&lt;br/&gt;
3) index.getNewlyCreated() &lt;br/&gt;
&lt;br/&gt;
I do not see how it can be done otherwise, because I need to know wether for the particular workspace, a persistent index is created for the first time....I do not really like the dependencies on other code for the backwards compatibility though. WDOT?&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12522535" author="mreutegg" created="Fri, 24 Aug 2007 15:03:16 +0100"  >We should probably extract the initial index logic from the MultiIndex. It doesn&amp;#39;t feel right there anyway.&lt;br/&gt;
&lt;br/&gt;
In SearchIndex.doInit() we&amp;#39;d have then:&lt;br/&gt;
&lt;br/&gt;
1) do all the init stuff (extractor, indexing config, synonyms)&lt;br/&gt;
2) create MultiIndex (without creating initial index)&lt;br/&gt;
3) do the version check&lt;br/&gt;
4) if index size == 0 create an initial index&lt;br/&gt;
</comment>
                    <comment id="12522536" author="mreutegg" created="Fri, 24 Aug 2007 15:06:09 +0100"  >One more thing, please include a check in SearchIndex.doInit(), which compares the IndexFormatVersion of &amp;#39;this&amp;#39; with the parent query handler (if there is one). They have to be the same, otherwise queries might return wrong results.</comment>
                    <comment id="12522537" author="aschrijvers" created="Fri, 24 Aug 2007 15:06:25 +0100"  >Just had my patch ready (again :-) )&lt;br/&gt;
&lt;br/&gt;
Is it an idea to add the patch, and file a jira issue to refactor the initial creation logic into doInit()&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t mind trying to do that one, but would like to first patch this one, and then solve the init logic, WDYT?&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12522540" author="aschrijvers" created="Fri, 24 Aug 2007 15:21:45 +0100"  >I am now testing for the parent query handler  indexFormatVersion. If they are different, I am falling back to old style index format, because this one will always work. Ok with you?</comment>
                    <comment id="12522547" author="aschrijvers" created="Fri, 24 Aug 2007 15:44:17 +0100"  >By the way: Are you really sure that it matters wether the parent query handler is in the new format? AFAICS, it doesn&amp;#39;t matter wether one index, even the parent one, is in format old or new. &lt;br/&gt;
&lt;br/&gt;
All tests run also without problems.  When in doInit() I add the test&lt;br/&gt;
&lt;br/&gt;
if (context.getParentHandler() instanceof SearchIndex){&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SearchIndex parentQueryHandler = (SearchIndex)(context.getParentHandler());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if(parentQueryHandler.getIndexFormatVersion() != this.getIndexFormatVersion()){&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* parentHandler is not allowed to be in different format. Fallback to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;* old style&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;*/ &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.warn(&amp;quot;parentQueryHandler is in different format. Fallback to old format style&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;setIndexFormatVersion(IndexFormatVersion.V1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
and I delete the parent index (repository/index/*) and I delete the workspace index,. everything run in the new index format. Though, the parent index is created differently then the workspace indices, so in the NodeIndexer, &lt;br/&gt;
&lt;br/&gt;
if(indexFormatVersion == IndexFormatVersion.V2) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	addPropertyName(doc,propState.getName());&lt;br/&gt;
{&lt;br/&gt;
&lt;br/&gt;
does not work because it is null for the parent query handler. Hence, after restart, the system will fallback into old format style, because the parent index format style is old!&lt;br/&gt;
&lt;br/&gt;
So, I can add to the NodeIndexer something like:&lt;br/&gt;
&lt;br/&gt;
if(indexFormatVersion == null || indexFormatVersion == IndexFormatVersion.V2) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	addPropertyName(doc,propState.getName());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
this forces that the parent query handler indexes according new style. But, I just think the backwards compatible becomes a little hacky. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll add a patch, in without the parent query handler check. If is turns out that it is needed, we can add it. WDYT?&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12522551" author="aschrijvers" created="Fri, 24 Aug 2007 15:53:14 +0100"  >Patch without the query parent handler check for the same format index style. Old tests run, and I do not think there will be problems.  2 workspaces can use different indexing format, and both work.</comment>
                    <comment id="12522724" author="bdelacretaz" created="Sat, 25 Aug 2007 08:07:22 +0100"  >&amp;gt;&amp;gt; ...ps : is it possible to mark the current patch as deprecated or something?&lt;br/&gt;
&amp;gt; I prefer to just keep the attached patches to have a history on what was discussed...&lt;br/&gt;
&lt;br/&gt;
Just upload the patch again with the same filename - JIRA then greys out older versions but keeps them available, and shows their time and date when hovering the mouse over the names. See &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-69&quot; title=&quot;PATCH:MoreLikeThis support&quot;&gt;&lt;strike&gt;SOLR-69&lt;/strike&gt;&lt;/a&gt; for example.</comment>
                    <comment id="12522962" author="aschrijvers" created="Mon, 27 Aug 2007 10:20:27 +0100"  >Other patch had changes in unit tests. Removed them</comment>
                    <comment id="12522978" author="aschrijvers" created="Mon, 27 Aug 2007 11:59:52 +0100"  >Marcel Reutegger wrote:&lt;br/&gt;
&amp;quot;One more thing, please&amp;quot;include a check in SearchIndex.doInit(), which compares the IndexFormatVersion of &amp;#39;this&amp;#39; with the parent query handler (if there is one). They have to be the same, otherwise queries might return wrong results. &amp;quot;&lt;br/&gt;
&lt;br/&gt;
The current patch is without this test in the parent query handler, because AFAICS everything works without this test (the parent handler does not need to have the PROPERTY_SET fieldname AFAIU ). &lt;br/&gt;
&lt;br/&gt;
Futhermore, I added a boolean &amp;#39;newWorkSpaceIndex&amp;#39; to the MultiIndex.java, since the initial index creation when none exists is done there. As Marcel suggested, SearchIndex.doInit() might be a better place for this index creation. &lt;br/&gt;
&lt;br/&gt;
Do you think the current patch can be applied to the trunk? </comment>
                    <comment id="12523020" author="mreutegg" created="Mon, 27 Aug 2007 15:42:51 +0100"  >Just a couple of minor issues that need to be resolved first:&lt;br/&gt;
&lt;br/&gt;
- Please consistently use spaces and not tabs in the patch&lt;br/&gt;
- There&amp;#39;s a System.out in SearchIndex.doInit()&lt;br/&gt;
- Please wrap the block with the version check into a try/finally and close the index reader in the finally block&lt;br/&gt;
- Please change !(indexFormatVersion == IndexFormatVersion.V2) to indexFormatVersion != IndexFormatVersion.V2&lt;br/&gt;
&lt;br/&gt;
There actually is an issue when the parent handler uses a different index format version. If the parent handler (system index) uses the V1 and this handler (workspace index) uses V2 the query will use the PROPERTIES_SET field, which is not available in the system index.&lt;br/&gt;
&lt;br/&gt;
A user may do the following:&lt;br/&gt;
- Upgrate a pre 1.4 repository (-&amp;gt; all indexes are V1)&lt;br/&gt;
- Re-index a workspace (-&amp;gt; workspace index will be V2)&lt;br/&gt;
- Execute a query on the workspace (-&amp;gt; will use V2 for queries)&lt;br/&gt;
&lt;br/&gt;
This means if a query handler has a parent handler it must not use a more recent version than the one its parent is using!</comment>
                    <comment id="12523033" author="aschrijvers" created="Mon, 27 Aug 2007 16:47:33 +0100"  >Aaah I am sorry for the system.out. I replaced a patch and did put a sysout.out. Stupid, I&amp;#39;ll remove it! I&amp;#39;ll do the other 4 (-) as well.&lt;br/&gt;
&lt;br/&gt;
About the parent handler I knew that the system index can be in the old format, but AFAICS, this is never an issue. When I am searching an index for workspace X, it does not matter wether the parent index is in the old format I think (I am doing the tests, with the parent index in old format, and the workspace index in new format, and this is no problem)&lt;br/&gt;
&lt;br/&gt;
As I see your example:&lt;br/&gt;
&lt;br/&gt;
A user may do the following:&lt;br/&gt;
- Upgrate a pre 1.4 repository (-&amp;gt; all indexes are V1)&lt;br/&gt;
- Re-index a workspace (-&amp;gt; workspace index will be V2)&lt;br/&gt;
- Execute a query on the workspace (-&amp;gt; will use V2 for queries) &lt;br/&gt;
&lt;br/&gt;
this will just run fine, as I tested it this way. You can have workspaces with old index style along with new index style, as with a system index in new or old format. &lt;br/&gt;
&lt;br/&gt;
It is hard to get it nice backwards compatible, due to the index creation in the MultiIndex when there is no index.&lt;br/&gt;
&lt;br/&gt;
For example, when in SearchIndex.doInit() the following line is executed&lt;br/&gt;
&lt;br/&gt;
index = new MultiIndex(indexDir, this, context.getItemStateManager(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context.getRootId(), excludedIDs, nsMappings);&lt;br/&gt;
&lt;br/&gt;
the system index is created. Because this is *before* the setIndexFormatVersion part in doInit(), in NodeIndexer this part&lt;br/&gt;
&lt;br/&gt;
if(indexFormatVersion == IndexFormatVersion.V2) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addPropertyName(doc,propState.getName());&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
will never be called since indexFormatVersion  == null. This means, the system index is always indexed without the PROPERTIES_SET, and therefor always in the old format. &lt;br/&gt;
&lt;br/&gt;
Now, I did just test to first set the default indexformat before the new MultiIndex, like:&lt;br/&gt;
&lt;br/&gt;
setIndexFormatVersion(IndexFormatVersion.V2);&lt;br/&gt;
index = new MultiIndex(indexDir, this, context.getItemStateManager(),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;context.getRootId(), excludedIDs, nsMappings);&lt;br/&gt;
&lt;br/&gt;
which later in doInit might be set to V1&lt;br/&gt;
&lt;br/&gt;
so when a new index is created here, I get an index with the PROPERTIES_SET. But...I do not know wether the new MultiIndex(...) creation also indexes after it already exists, so that it might index  PROPERTIES_SET, while it should be in old format. Hope I am a little clear on the problems? :-)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll re-add the patch with your first 4 (-)  solved and wait if you can comment on my thing about the parent handler,&lt;br/&gt;
&lt;br/&gt;
thanks for reviewing :-) &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12523038" author="aschrijvers" created="Mon, 27 Aug 2007 17:11:16 +0100"  >New patch with Marcel&amp;#39;s remarks, except for the parent query handler, because I had some remarks and questions on that matter</comment>
                    <comment id="12523173" author="mreutegg" created="Tue, 28 Aug 2007 08:09:38 +0100"  >&amp;gt; I am doing the tests, with the parent index in old format, and the workspace index in new format,&lt;br/&gt;
&amp;gt; and this is no problem&lt;br/&gt;
&lt;br/&gt;
well, that just means that there is no appropriate test&lt;br/&gt;
&lt;br/&gt;
WRT the bootstrapping issue with the index and its format, I will create a separate issue and extract the initial index creation from the MultiIndex constructor.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1093&quot; title=&quot;Separate initial index creation from MultiIndex construction&quot;&gt;&lt;strike&gt;JCR-1093&lt;/strike&gt;&lt;/a&gt;. Once this is solved, you can set the index format version before indexing the workspace.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; will never be called since indexFormatVersion == null. &lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s actually another point that should be changed. There should be a default value. I suggest we set it to V1.</comment>
                    <comment id="12523176" author="aschrijvers" created="Tue, 28 Aug 2007 08:25:28 +0100"  >&amp;gt; well, that just means that there is no appropriate test  &lt;br/&gt;
&lt;br/&gt;
You mean that the tests just happen to work with new and old format by coincidence?  I just really am in the assumption, that a query is done on one index at the time, and wether this index is in the old or new format does not matter. Wether the system index is in old format, and the query runs on a workspace index in new format shouldn&amp;#39;t give problems AFAICS. IMO, it is possible to port the jr impl to the new version while keeping all the indices, and when adding a new workspace, only this workspace will run in the new format.  But I do not have the overview like you do, so I probably just miss something :-). I&amp;#39;ll stop worrying about it and go for your solution.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; WRT the bootstrapping issue with the index and its format, I will create a separate issue and extract the initial index creation from the &amp;gt;MultiIndex constructor. See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1093&quot; title=&quot;Separate initial index creation from MultiIndex construction&quot;&gt;&lt;strike&gt;JCR-1093&lt;/strike&gt;&lt;/a&gt;. Once this is solved, you can set the index format version before indexing the workspace. &lt;br/&gt;
&lt;br/&gt;
That would be very nice. When you have finished, I&amp;#39;ll create a new patch&lt;br/&gt;
&lt;br/&gt;
&amp;gt; that&amp;#39;s actually another point that should be changed. There should be a default value. I suggest we set it to V1.&lt;br/&gt;
&lt;br/&gt;
Agreed. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll wait for &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1093&quot; title=&quot;Separate initial index creation from MultiIndex construction&quot;&gt;&lt;strike&gt;JCR-1093&lt;/strike&gt;&lt;/a&gt; and then create a new patch. </comment>
                    <comment id="12523178" author="aschrijvers" created="Tue, 28 Aug 2007 08:28:07 +0100"  >After this issue is implemented, this issue can be solved</comment>
                    <comment id="12523202" author="mreutegg" created="Tue, 28 Aug 2007 10:25:50 +0100"  >&amp;gt; You mean that the tests just happen to work with new and old format by coincidence?&lt;br/&gt;
&lt;br/&gt;
yes, that&amp;#39;s what I mean.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I just really am in the assumption, that a query is done on one index at the time&lt;br/&gt;
&lt;br/&gt;
Ah, I see. That&amp;#39;s where the misunderstanding is. Unless otherwise indicated (by static analysis of the query tree, see &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1066&quot; title=&quot;Exclude system index for queries that restrict the result set to nodetypes not availble in the &amp;quot;jcr:system&amp;quot; subtree&quot;&gt;&lt;strike&gt;JCR-1066&lt;/strike&gt;&lt;/a&gt;) a query is executed on both indexes using a MultiReader. This means the query is only executed once and across both indexes.&lt;br/&gt;
&lt;br/&gt;
Btw. &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1093&quot; title=&quot;Separate initial index creation from MultiIndex construction&quot;&gt;&lt;strike&gt;JCR-1093&lt;/strike&gt;&lt;/a&gt; is now fixed.</comment>
                    <comment id="12523205" author="aschrijvers" created="Tue, 28 Aug 2007 10:41:32 +0100"  >&amp;gt; Ah, I see. That&amp;#39;s where the misunderstanding is. Unless otherwise indicated (by static analysis of the query tree, see &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1066&quot; title=&quot;Exclude system index for queries that restrict the result set to nodetypes not availble in the &amp;quot;jcr:system&amp;quot; subtree&quot;&gt;&lt;strike&gt;JCR-1066&lt;/strike&gt;&lt;/a&gt;) a query is &lt;br/&gt;
&amp;gt; executed on both indexes using a MultiReader. This means the query is only executed once and across both indexes. &lt;br/&gt;
&lt;br/&gt;
Now I am convinced and understand your concerns! :-)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll create a new patch with &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1093&quot; title=&quot;Separate initial index creation from MultiIndex construction&quot;&gt;&lt;strike&gt;JCR-1093&lt;/strike&gt;&lt;/a&gt; taken into account, and a default value for indexFormatVersion &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12523228" author="aschrijvers" created="Tue, 28 Aug 2007 14:04:17 +0100"  >Implemented the new indexing format again. There is a subtle difficulty though:&lt;br/&gt;
&lt;br/&gt;
When I have one sysIndex and 2 workspace indices in format style like:&lt;br/&gt;
&lt;br/&gt;
sysIndex = old&lt;br/&gt;
ws1Index = old&lt;br/&gt;
ws2Index = old&lt;br/&gt;
&lt;br/&gt;
now, only deleting the sysIndex, will generate a sysIndex in new format style in index.createInitialIndex(). &lt;br/&gt;
&lt;br/&gt;
Since ws1Index and ws2Index  are old, the parentQueryHandler should be set to old index style again. This is implemented. &lt;br/&gt;
&lt;br/&gt;
Now, when you would have again &lt;br/&gt;
&lt;br/&gt;
sysIndex = old&lt;br/&gt;
ws1Index = old&lt;br/&gt;
ws2Index = old&lt;br/&gt;
&lt;br/&gt;
and remove sysIndex  *and*  ws1Index, then  at doInit() we would get &lt;br/&gt;
&lt;br/&gt;
sysIndex = new --&amp;gt; old  (but changed to old when ws2Index is initialised)&lt;br/&gt;
ws1Index = new&lt;br/&gt;
ws2Index = old&lt;br/&gt;
&lt;br/&gt;
but, when querying ws1Index, this might give problems, because sysIndex is reverted to &amp;quot;old&amp;quot; when ws2Index was initialized. To solve this, at getIndexFormatVersion() always a check is done wether parent handler and current index format are the same. If not, default back to old style.&lt;br/&gt;
&lt;br/&gt;
This implies, that when updating jackrabbit version, you will *only* get the new indexing format style if and only if you re-index all the existing indices you have so far. &lt;br/&gt;
&lt;br/&gt;
Hope my explanation is clear! I&amp;#39;ll prepare the patch&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12523235" author="aschrijvers" created="Tue, 28 Aug 2007 14:24:21 +0100"  >Patch that should implement all previous comments. &lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12524078" author="mreutegg" created="Fri, 31 Aug 2007 14:07:19 +0100"  >I just found another issue with the MultiIndex. The recovery code also runs inside the constructor and the redo log is applied it may happen that a node is indexed, which in turn needs to know the IndexFormatVersion.</comment>
                    <comment id="12524081" author="aschrijvers" created="Fri, 31 Aug 2007 14:23:24 +0100"  >&lt;br/&gt;
We could move the code for the index format check to the multiIndex constructor, isn&amp;#39;t?  If we do the check before the Recovery.run(this, redoLog); we can use handler.setIndexFormatVersion(IndexFormatVersion indexFormatVersion)  from the multiIndex constructor.&lt;br/&gt;
&lt;br/&gt;
OTOH, perhaps putting the code in the multiIndex is not the best place. WDYT? </comment>
                    <comment id="12524655" author="aschrijvers" created="Tue, 4 Sep 2007 10:55:38 +0100"  >&amp;gt; I just found another issue with the MultiIndex. The recovery code also runs inside the constructor and the redo log is applied it may &lt;br/&gt;
&amp;gt; happen that a node is indexed, which in turn needs to know the IndexFormatVersion.&lt;br/&gt;
&lt;br/&gt;
Do you have some preferred place to fix the problem with the redo log? Suppose you don&amp;#39;t want the check for index format style in the Recovery.run() right? &lt;br/&gt;
&lt;br/&gt;
If you can give me your preference, I might be able to complete the patch/issue/improvement....\o/\o/</comment>
                    <comment id="12528684" author="aschrijvers" created="Wed, 19 Sep 2007 08:47:51 +0100"  >Have been thinking this issue over, since I think it is quite important performance improvement to get it right. I want to remove the part from the MultiIndex constructor below resetVolatileIndex();  (thus the Recovery.run(this, redoLog); and the rest) and move this in  a seperate method, which I call from the SearchIndex after the MultiIndex constructor and the test for the index format.  &lt;br/&gt;
&lt;br/&gt;
WDOT? </comment>
                    <comment id="12529452" author="mreutegg" created="Fri, 21 Sep 2007 16:01:57 +0100"  >Sorry for not getting back to you sooner. I was distracted with other work lately.&lt;br/&gt;
&lt;br/&gt;
Based on your work I&amp;#39;ve created a slightly different patch, which separates the physical index format version from the index format version that is used for a query. This means a MultiIndex has an index format version (decides how nodes are indexed, independent of a parent query handler) and also the SearchIndex has an index format version (decides how a query is executed, also takes a parent query handler into account).&lt;br/&gt;
&lt;br/&gt;
With this approach the above mentioned issues are nicely avoided.&lt;br/&gt;
&lt;br/&gt;
Ard, does that work for you?</comment>
                    <comment id="12529463" author="aschrijvers" created="Fri, 21 Sep 2007 16:14:53 +0100"  >&amp;gt; Sorry for not getting back to you sooner. I was distracted with other work lately. &lt;br/&gt;
&lt;br/&gt;
np, I was pretty occupied as well, but regarding the release plans for 1.4 i thought it might be worthy to solve it. &lt;br/&gt;
&lt;br/&gt;
&amp;gt; Based on your work I&amp;#39;ve created a slightly different patch, which separates the physical index format version from the index format version that is used &amp;gt; for a query. This means a MultiIndex has an index format version (decides how nodes are indexed, independent of a parent query handler) and also &amp;gt; the SearchIndex has an index format version (decides how a query is executed, also takes a parent query handler into account). &lt;br/&gt;
&lt;br/&gt;
I think I do understand what you mean, but do you happen to have the patch available (or do you commit it directly)? I can do some testing if you want to see if it works out in all possible situations (index from scratch / existing indexes / existing indexes and remove a workspace index without parent, etc etc)? &lt;br/&gt;
&lt;br/&gt;
Regards Ard</comment>
                    <comment id="12529468" author="mreutegg" created="Fri, 21 Sep 2007 16:28:13 +0100"  >I attached the patch with the previous comment ;)&lt;br/&gt;
&lt;br/&gt;
I already did some tests, basically the ones you mentioned. But its always good to have someone else take another look at changes. So, if you have time, that&amp;#39;d be great.</comment>
                    <comment id="12529473" author="aschrijvers" created="Fri, 21 Sep 2007 16:35:09 +0100"  >I didn&amp;#39;t look well enough (only checked &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1064&quot; title=&quot;Optimize queries that check for the existence of a property&quot;&gt;&lt;strike&gt;JCR-1064&lt;/strike&gt;&lt;/a&gt;-2.patch  and not the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1064&quot; title=&quot;Optimize queries that check for the existence of a property&quot;&gt;&lt;strike&gt;JCR-1064&lt;/strike&gt;&lt;/a&gt;-3.patch )&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll do the tests this weekend,  because I am just about to grab a  nice cold beer (and can&amp;#39;t think straight anymore this late ) :-)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll let you know how the tests went,&lt;br/&gt;
&lt;br/&gt;
Cheers</comment>
                    <comment id="12529475" author="ckiehl" created="Fri, 21 Sep 2007 16:49:32 +0100"  >I like Marcels solution to distinguish between physical index version and query index version. I just changed a few lines of Marcels patch:&lt;br/&gt;
&lt;br/&gt;
- IndexFormatVersion now contains the logic to decide which format version an index uses (MultiIndex shouldn&amp;#39;t know which FieldNames are used)&lt;br/&gt;
- No logging in createMatchAllQuery()&lt;br/&gt;
- Some javadoc edits/typo corrections&lt;br/&gt;
&lt;br/&gt;
WDYT?&lt;br/&gt;
&lt;br/&gt;
And sorry Ard for the late response. I was quite busy the last weeks as well. Thanks a lot for you work!&lt;br/&gt;
</comment>
                    <comment id="12529478" author="mreutegg" created="Fri, 21 Sep 2007 17:09:42 +0100"  >&amp;gt; IndexFormatVersion now contains the logic to decide which format version an index uses &lt;br/&gt;
&amp;gt; (MultiIndex shouldn&amp;#39;t know which FieldNames are used).&lt;br/&gt;
&lt;br/&gt;
good point...</comment>
                    <comment id="12529762" author="aschrijvers" created="Sun, 23 Sep 2007 21:31:57 +0100"  >I have done the tests with old style indices and remove the parent handler index or the workspace index, tried with new style indices, all work as they should.&lt;br/&gt;
&lt;br/&gt;
Also like the replacement of the IndexFormatVersion.version from String to int, to make future versions number possible. So, AFAICS, everything seems to work how it should. &lt;br/&gt;
&lt;br/&gt;
Thanks both for all the help regarding this issue.&lt;br/&gt;
</comment>
                    <comment id="12529802" author="mreutegg" created="Mon, 24 Sep 2007 09:47:42 +0100"  >Thanks all for your help. I&amp;#39;ve committed Christoph&amp;#39;s version of the patch.&lt;br/&gt;
&lt;br/&gt;
svn revision: 578711</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12376974">JCR-1093</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12376694">JCR-1080</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12364685" name="JCR-1064-2.patch" size="20326" author="aschrijvers" created="Tue, 28 Aug 2007 14:24:20 +0100" />
                    <attachment id="12364619" name="JCR-1064-2.patch" size="20125" author="aschrijvers" created="Mon, 27 Aug 2007 17:11:15 +0100" />
                    <attachment id="12364594" name="JCR-1064-2.patch" size="20125" author="aschrijvers" created="Mon, 27 Aug 2007 10:20:27 +0100" />
                    <attachment id="12364524" name="JCR-1064-2.patch" size="65621" author="aschrijvers" created="Fri, 24 Aug 2007 15:53:14 +0100" />
                    <attachment id="12366367" name="JCR-1064-3.patch" size="23904" author="mreutegg" created="Fri, 21 Sep 2007 16:01:57 +0100" />
                    <attachment id="12366372" name="JCR-1064-4.patch" size="23899" author="ckiehl" created="Fri, 21 Sep 2007 16:49:32 +0100" />
                    <attachment id="12364519" name="JCR-1064-DEPR.patch" size="16216" author="aschrijvers" created="Fri, 24 Aug 2007 14:45:41 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 15 Aug 2007 14:16:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>89032</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279602</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>