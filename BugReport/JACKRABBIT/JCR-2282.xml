<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:51:31 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2282/JCR-2282.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2282] SQL2 parser may infer type for UncastLiteral from static analysis</title>
                <link>https://issues.apache.org/jira/browse/JCR-2282</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The spec says:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;An UncastLiteral is always interpreted as a Value of property type STRING. A CastLiteral, on the other hand, is interpreted as the string form of a Value of the PropertyType indicated.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
There are also two test cases in NodeNameTest that need to be fixed accordingly: testLongLiteral and testBooleanLiteral&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12434133">JCR-2282</key>
            <summary>SQL2 parser may infer type for UncastLiteral from static analysis</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mreutegg">Marcel Reutegger</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Aug 2009 09:19:03 +0100</created>
                <updated>Mon, 11 Jan 2010 14:18:29 +0000</updated>
                    <resolved>Mon, 31 Aug 2009 10:40:19 +0100</resolved>
                                            <fixVersion>2.0-alpha11</fixVersion>
                                <component>jackrabbit-jcr-tests</component>
                <component>jackrabbit-spi-commons</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12748325" author="tmueller" created="Thu, 27 Aug 2009 11:31:09 +0100"  >The specification I have (jcr-spec.pdf from content_repository-2_0-pfd-spec.zip) says:&lt;br/&gt;
UnquotedLiteral ::= /* String form of a JCR Value, as defined in &amp;#xA7;3.5.4 Conversion of Values */&lt;br/&gt;
However there is no section 3.5.4. I guess it should be &amp;quot;3.6.4 Property Type Conversion&amp;quot; instead.&lt;br/&gt;
</comment>
                    <comment id="12748354" author="mreutegg" created="Thu, 27 Aug 2009 13:34:34 +0100"  >Right, and right after that is the section I was referring to.</comment>
                    <comment id="12748380" author="tmueller" created="Thu, 27 Aug 2009 15:07:52 +0100"  >Index: src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java	(revision 808318)&lt;br/&gt;
+++ src/main/java/org/apache/jackrabbit/test/api/query/qom/NodeNameTest.java	(working copy)&lt;br/&gt;
@@ -144,7 +144,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String stmt = &amp;quot;SELECT * FROM [&amp;quot; + testNodeType + &amp;quot;] AS s &amp;quot; +&lt;br/&gt;
-                    &amp;quot;WHERE NAME(s) = &amp;quot; + literal.getString();&lt;br/&gt;
+                    &amp;quot;WHERE NAME(s) = CAST(&amp;quot; + literal.getString() + &amp;quot; AS LONG)&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;qm.createQuery(stmt, Query.JCR_SQL2).execute();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fail(&amp;quot;NAME() comparison with LONG must fail with InvalidQueryException&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (InvalidQueryException e) {&lt;br/&gt;
@@ -162,10 +162,11 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String stmt = &amp;quot;SELECT * FROM [&amp;quot; + testNodeType + &amp;quot;] AS s &amp;quot; +&lt;br/&gt;
-                    &amp;quot;WHERE NAME(s) = &amp;quot; + literal.getString();&lt;br/&gt;
+                    &amp;quot;WHERE NAME(s) = CAST(&amp;quot; + literal.getString() + &amp;quot; AS BOOLEAN)&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;qm.createQuery(stmt, Query.JCR_SQL2).execute();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fail(&amp;quot;NAME() comparison with BOOLEAN must fail with InvalidQueryException&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (InvalidQueryException e) {&lt;br/&gt;
+            e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// expected&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Index: src/main/java/org/apache/jackrabbit/spi/commons/query/sql2/Parser.java&lt;br/&gt;
===================================================================&lt;br/&gt;
--- src/main/java/org/apache/jackrabbit/spi/commons/query/sql2/Parser.java	(revision 808318)&lt;br/&gt;
+++ src/main/java/org/apache/jackrabbit/spi/commons/query/sql2/Parser.java	(working copy)&lt;br/&gt;
@@ -19,7 +19,6 @@&lt;br/&gt;
&amp;nbsp;import java.math.BigDecimal;&lt;br/&gt;
&amp;nbsp;import java.util.ArrayList;&lt;br/&gt;
&amp;nbsp;import java.util.HashMap;&lt;br/&gt;
-&lt;br/&gt;
&amp;nbsp;import javax.jcr.PropertyType;&lt;br/&gt;
&amp;nbsp;import javax.jcr.RepositoryException;&lt;br/&gt;
&amp;nbsp;import javax.jcr.Value;&lt;br/&gt;
@@ -39,7 +38,6 @@&lt;br/&gt;
&amp;nbsp;import javax.jcr.query.qom.Selector;&lt;br/&gt;
&amp;nbsp;import javax.jcr.query.qom.Source;&lt;br/&gt;
&amp;nbsp;import javax.jcr.query.qom.StaticOperand;&lt;br/&gt;
-&lt;br/&gt;
&amp;nbsp;import org.apache.jackrabbit.spi.commons.query.qom.JoinType;&lt;br/&gt;
&amp;nbsp;import org.apache.jackrabbit.spi.commons.query.qom.Operator;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
@@ -455,7 +453,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (currentTokenType == VALUE) {&lt;br/&gt;
-            Literal literal = factory.literal(currentValue);&lt;br/&gt;
+            Literal literal = getUncastLiteral(currentValue);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;read();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return literal;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (currentTokenType == PARAMETER) {&lt;br/&gt;
@@ -471,10 +469,10 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return var;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (readIf(&amp;quot;TRUE&amp;quot;)) {&lt;br/&gt;
-            Literal literal = factory.literal(valueFactory.createValue(true));&lt;br/&gt;
+            Literal literal = getUncastLiteral(valueFactory.createValue(true));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return literal;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (readIf(&amp;quot;FALSE&amp;quot;)) {&lt;br/&gt;
-            Literal literal = factory.literal(valueFactory.createValue(false));&lt;br/&gt;
+            Literal literal = getUncastLiteral(valueFactory.createValue(false));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return literal;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (readIf(&amp;quot;CAST&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;read(&amp;quot;(&amp;quot;);&lt;br/&gt;
@@ -487,6 +485,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;read(&amp;quot;AS&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value = parseCastAs(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;read(&amp;quot;)&amp;quot;);&lt;br/&gt;
+            // CastLiteral&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;literal = factory.literal(value);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return literal;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
@@ -494,6 +493,19 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
+    /**&lt;br/&gt;
+     * Create uncast literal from a value. According to the JCR specification,&lt;br/&gt;
+     * &amp;quot;an UncastLiteral is always interpreted as a Value of property type STRING&amp;quot;&lt;br/&gt;
+     * (JCR 2.0 Core Specification, 6.7.34 Literal, page 124).&lt;br/&gt;
+     * That means the value is converted to a String first.&lt;br/&gt;
+     *&lt;br/&gt;
+     * @param value the original value&lt;br/&gt;
+     * @return the literal&lt;br/&gt;
+     */&lt;br/&gt;
+    private Literal getUncastLiteral(Value value) throws RepositoryException {&lt;br/&gt;
+        return factory.literal(valueFactory.createValue(value.getString()));&lt;br/&gt;
+    }&lt;br/&gt;
+&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private Value parseCastAs(Value value) throws RepositoryException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (readIf(&amp;quot;STRING&amp;quot;)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return valueFactory.createValue(value.getString());&lt;br/&gt;
</comment>
                    <comment id="12748383" author="tmueller" created="Thu, 27 Aug 2009 15:11:03 +0100"  >- e.printStackTrace(); </comment>
                    <comment id="12748385" author="mreutegg" created="Thu, 27 Aug 2009 15:23:41 +0100"  >+1, looks good.</comment>
                    <comment id="12748709" author="tmueller" created="Fri, 28 Aug 2009 08:34:59 +0100"  >Because of this change the build now fails with&lt;br/&gt;
&lt;br/&gt;
javax.jcr.query.InvalidQueryException: Static value 3.0 cannot be converted to a Long&lt;br/&gt;
for the query:&lt;br/&gt;
SELECT * FROM [nt:unstructured] AS s WHERE ISCHILDNODE(s, [/testroot]) AND LENGTH(s.prop1) = 3.0&lt;br/&gt;
&lt;br/&gt;
3.0 used to be parsed as a BigDecimal, and could be converted to a Long.&lt;br/&gt;
Now 3.0 is parsed as a String (actually first parsed as a BigDecimal and then converted to a String by the parser).&lt;br/&gt;
Long.parseLong(&amp;quot;3.0&amp;quot;) fails.&lt;br/&gt;
&lt;br/&gt;
If you want the query to work, you could write:&lt;br/&gt;
... AND LENGTH(s.prop1) = CAST(3.0 AS DOUBLE).&lt;br/&gt;
&lt;br/&gt;
I think we should rather change the spec than trying to build a workaround.&lt;br/&gt;
It&amp;#39;s weird that the parser should read 3.0 to a String, and only as a double if you write CAST(3.0 AS DOUBLE).&lt;br/&gt;
&lt;br/&gt;
I filed a bug yesterday: &lt;a href=&quot;https://jsr-283.dev.java.net/issues/show_bug.cgi?id=806&quot;&gt;https://jsr-283.dev.java.net/issues/show_bug.cgi?id=806&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
So I suggest to undo my commit, and change the spec instead.</comment>
                    <comment id="12749441" author="mreutegg" created="Mon, 31 Aug 2009 10:40:19 +0100"  >The JSR 283 EG decided to relax the relevant spec section. That is, an implementation is not forced to interpret the literal as a string in this context.&lt;br/&gt;
&lt;br/&gt;
Removed unused method Parser.getUncastLiteralSpecCompliant() in spi-commons in revision: 809524</comment>
                    <comment id="12749442" author="mreutegg" created="Mon, 31 Aug 2009 10:40:52 +0100"  >Changed summary to better match the issue.</comment>
                    <comment id="12749452" author="mreutegg" created="Mon, 31 Aug 2009 11:06:38 +0100"  >Merged revision 808430 (change of test case) into jsr283 branch.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 27 Aug 2009 10:31:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78276</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>252564</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>