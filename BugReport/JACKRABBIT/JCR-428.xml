<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:36:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-428/JCR-428.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-428] BLOBFileValue() might be discarded to early</title>
                <link>https://issues.apache.org/jira/browse/JCR-428</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Situation:&lt;br/&gt;
&lt;br/&gt;
if the internal value of a property of type binary is created by the constructor BLOBFileValue(InputStream in) and the content is not stored in an temp-file, then calling the methods &lt;br/&gt;
&lt;br/&gt;
a) #setProperty(InputStream in) on this node and then&lt;br/&gt;
b) #refresh(false) on the node of this property &lt;br/&gt;
&lt;br/&gt;
on the node of this property leads to an internal value of this property with an erased byte[].&lt;br/&gt;
&lt;br/&gt;
Solution:&lt;br/&gt;
&lt;br/&gt;
Only if the spoolFile is created the field &amp;#39;temp&amp;#39; should be set to true.&lt;br/&gt;
If the InputStream is stored in the byte[] the field &amp;#39;temp&amp;#39; should be set to false.&lt;br/&gt;
&lt;br/&gt;
Patch:&lt;br/&gt;
&lt;br/&gt;
Index: BLOBFileValue.java&lt;br/&gt;
===================================================================&lt;br/&gt;
retrieving revision 1.1&lt;br/&gt;
diff -u -r1.1 BLOBFileValue.java&lt;br/&gt;
--- BLOBFileValue.java	8 May 2006 13:57:49 -0000	1.1&lt;br/&gt;
+++ BLOBFileValue.java	8 May 2006 15:19:54 -0000&lt;br/&gt;
@@ -142,6 +142,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len += read;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
+            in.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (out != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.close();&lt;br/&gt;
@@ -151,8 +152,15 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// init vars&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file = spoolFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fsResource = null;&lt;br/&gt;
-        // this instance is backed by a temporarily allocated resource/buffer&lt;br/&gt;
-        temp = true;&lt;br/&gt;
+        if (file != null)&lt;br/&gt;
+        {&lt;br/&gt;
+            // this instance is backed by a temporarily allocated resource&lt;br/&gt;
+            temp = true;&lt;br/&gt;
+        }&lt;br/&gt;
+        else&lt;br/&gt;
+        {&lt;br/&gt;
+            temp = true;&lt;br/&gt;
+        }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12333348">JCR-428</key>
            <summary>BLOBFileValue() might be discarded to early</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stefan@jira">Stefan Guggisberg</assignee>
                                <reporter username="frericksm">Michael Frericks</reporter>
                        <labels>
                    </labels>
                <created>Mon, 8 May 2006 23:22:30 +0100</created>
                <updated>Fri, 26 May 2006 09:27:47 +0100</updated>
                    <resolved>Fri, 19 May 2006 12:54:28 +0100</resolved>
                            <version>1.0</version>
                                <fixVersion>1.0.1</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12378453" author="frericksm" created="Tue, 9 May 2006 00:03:05 +0100"  >Sorry, patch should be:&lt;br/&gt;
&lt;br/&gt;
Index: BLOBFileValue.java&lt;br/&gt;
===================================================================&lt;br/&gt;
retrieving revision 1.1&lt;br/&gt;
diff -u -r1.1 BLOBFileValue.java&lt;br/&gt;
--- BLOBFileValue.java 8 May 2006 13:57:49 -0000 1.1&lt;br/&gt;
+++ BLOBFileValue.java 8 May 2006 15:19:54 -0000&lt;br/&gt;
@@ -142,6 +142,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;len += read;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
+ in.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (out != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;out.close();&lt;br/&gt;
@@ -151,8 +152,15 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// init vars&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;file = spoolFile;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fsResource = null;&lt;br/&gt;
- // this instance is backed by a temporarily allocated resource/buffer&lt;br/&gt;
- temp = true;&lt;br/&gt;
+ if (file != null)&lt;br/&gt;
+ {&lt;br/&gt;
+ // this instance is backed by a temporarily allocated resource&lt;br/&gt;
+ temp = true;&lt;br/&gt;
+ }&lt;br/&gt;
+ else&lt;br/&gt;
+ {&lt;br/&gt;
+ temp = false;&lt;br/&gt;
+ }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/**&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12378454" author="stefan@jira" created="Tue, 9 May 2006 00:05:32 +0100"  >the current implementation is IMO correct. &lt;br/&gt;
&lt;br/&gt;
the &amp;#39;temp&amp;#39; flag is set to true because either a temp file has been created *or* a &lt;br/&gt;
buffer has been dynamically allocated, which the in-line comment correclty states:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// this instance is backed by a temporarily allocated resource/buffer&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;temp = true;&lt;br/&gt;
&lt;br/&gt;
on #discard the buffer is correctly disposed.&lt;br/&gt;
&lt;br/&gt;
please note that BLOBFileValue is for Jackrabbit-internal use only:&lt;br/&gt;
&lt;a href=&quot;http://jackrabbit.apache.org/api-1/org/apache/jackrabbit/core/value/BLOBFileValue.html&quot;&gt;http://jackrabbit.apache.org/api-1/org/apache/jackrabbit/core/value/BLOBFileValue.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12378854" author="frericksm" created="Wed, 10 May 2006 16:25:13 +0100"  >I think the bug ist that BLOBFileValue is reused after discard ist called. Discard erases the field buffer or the file. At the point of resue this leads to a empty property not matching the correct value of the property.&lt;br/&gt;
&lt;br/&gt;
And this is what i observed using the org.apache.jackrabbit.core.state.orm.ojb.OJBPersistenceManager.&lt;br/&gt;
&lt;br/&gt;
Inside its method #load(PropertyId propId) this class calls  &lt;br/&gt;
&lt;br/&gt;
InternalValue create(InputStream value)-&amp;gt; public BLOBFileValue(InputStream in)&lt;br/&gt;
&lt;br/&gt;
which is the only constructor of BLOBFileValue that sets &amp;quot;temp = true&amp;quot;.</comment>
                    <comment id="12378926" author="stefan@jira" created="Wed, 10 May 2006 22:11:11 +0100"  >&amp;gt; I think the bug ist that BLOBFileValue is reused after discard ist called. &lt;br/&gt;
&amp;gt; Discard erases the field buffer or the file. At the point of resue this leads &lt;br/&gt;
&amp;gt; to a empty property not matching the correct value of the property. &lt;br/&gt;
&lt;br/&gt;
where in jackrabbit&amp;#39;s code are BLOBFileValue instances reused after they &lt;br/&gt;
have been discarded? &lt;br/&gt;
&lt;br/&gt;
what&amp;#39;s the exact issue here? are there any jcr api calls that fail?&lt;br/&gt;
&lt;br/&gt;
please provide a simple test case that, using the default configuration,&lt;br/&gt;
i.e. DerbyPersistenceManager, demonstrates  the issue.</comment>
                    <comment id="12412008" author="ppakulski" created="Wed, 17 May 2006 00:41:56 +0100"  >I think this can be related also of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-262&quot; title=&quot;In AbstractImportXmlTest, a bug in getUnusedUri() causes URI length to grow too quickly, causing test to fail when using ORM-PM&quot;&gt;&lt;strike&gt;JCR-262&lt;/strike&gt;&lt;/a&gt; (restore sometime throws error about missing tmp files).&lt;br/&gt;
&lt;br/&gt;
We are getting following exceptions often:&lt;br/&gt;
&lt;br/&gt;
javax.jcr.RepositoryException: file backing binary value not found: C:\tomcat\temp\bin63780.tmp (The system cannot find the file specified): C:\tomcat\temp\bin63780.tmp (The system cannot find the file specified)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at com.day.crx.core.value.BLOBFileValue.getStream(BLOBFileValue.java:457) &lt;br/&gt;
&lt;br/&gt;
I can&amp;#39;t reproduce this yet and I don&amp;#39;t  know where BLOBFileValue instances reused after discard but it looks it is (maybe cache?).</comment>
                    <comment id="12412439" author="tripod" created="Fri, 19 May 2006 07:03:41 +0100"  >the problem is, that in the first place, BLOBFileValues were not thought of beeing produced by the backend, but rather via the client, from the transient side. the late introduction of db-stored blobs just reused them without checking all invariants. &lt;br/&gt;
&lt;br/&gt;
the following example shows this error (when having db-blobs):&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node rootNode = session.getRootNode();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node blobNode = rootNode.addNode(&amp;quot;blobNode&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rootNode.save();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blobNode.setProperty(&amp;quot;data&amp;quot;, BlobTest3.createStream(70000));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blobNode.save();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blobNode.setProperty(&amp;quot;data&amp;quot;, BlobTest3.createStream(70000));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blobNode.refresh(false);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;blobNode.getProperty(&amp;quot;data&amp;quot;).getString();&lt;br/&gt;
&lt;br/&gt;
and throws an exception on the last .getString() since the BLOBFileValue gets discarded in the 2nd setProperty() call.&lt;br/&gt;
&lt;br/&gt;
i think in the long run, we need a proper Blob/BlobFactory/reference counting framework in place, in order to properly support both client and backend usage of those blob file values. that&amp;#39;s why i also opt for having a new value type: Binary in the jcr283 spec.&lt;br/&gt;
&lt;br/&gt;
in the meantime, i think it helps to make the blobvalues of the transient items non-temporary, so that they don&amp;#39;t get discarded.</comment>
                    <comment id="12412485" author="tripod" created="Fri, 19 May 2006 12:54:28 +0100"  >fixed. &lt;br/&gt;
&lt;br/&gt;
Committed revision 407709.&lt;br/&gt;
</comment>
                    <comment id="12412763" author="stefan@jira" created="Mon, 22 May 2006 20:57:21 +0100"  >ok, michael was right. in certain scenarios a BLOBFileValue instance could indeed &lt;br/&gt;
get accidentaly discarded because of jackrabbit&amp;#39;s copy-on-write implementation&lt;br/&gt;
which does a shallow copy of the value(s) for efficiency and performance reasons.&lt;br/&gt;
&lt;br/&gt;
a blob read from the db was wrongly considered being &amp;#39;transient&amp;#39; because it was &lt;br/&gt;
internally created from a stream. if a copy thereof would be lateron discarded the &lt;br/&gt;
underlying value would be discarded as well (because of the shallow copy-on-write).&lt;br/&gt;
&lt;br/&gt;
i added a specialized constructor for creating BLOBFileValue instances from a stream&lt;br/&gt;
which won&amp;#39;t get discarded:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public BLOBFileValue(InputStream in, boolean temp) throws IOException&lt;br/&gt;
&lt;br/&gt;
fixed in svn r408647</comment>
                    <comment id="12413329" author="jukkaz" created="Fri, 26 May 2006 09:27:47 +0100"  >Merged for 1.0.1 in revision 409535.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 8 May 2006 23:05:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>80434</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192059</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>