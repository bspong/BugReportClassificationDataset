<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:54:50 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2159/JCR-2159.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2159] Several test cases fail when declaring nt:base / nt:hierarchy node types as &apos;abstract&apos; </title>
                <link>https://issues.apache.org/jira/browse/JCR-2159</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>JSR283 introduces a new node type attribute &amp;#39;abstract&amp;#39; and defines nt:base and nt:hierarchyNode as such.&lt;br/&gt;
when changing those nodetypes, the following test cases fail:&lt;br/&gt;
&lt;br/&gt;
Failed tests: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;testDefinedAndLegalType(org.apache.jackrabbit.test.api.nodetype.CanAddChildNodeCallWithNodeTypeTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testResidualAndLegalType(org.apache.jackrabbit.test.api.nodetype.CanAddChildNodeCallWithNodeTypeTest)&lt;br/&gt;
&lt;br/&gt;
Tests in error: &lt;br/&gt;
&amp;nbsp;&amp;nbsp;testAddNodeConstraintViolationExceptionUndefinedNodeType(org.apache.jackrabbit.test.api.NodeTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testRemoveMandatoryNode(org.apache.jackrabbit.test.api.NodeTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testCloneNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCloneTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testCopyNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCopyBetweenWorkspacesTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testCopyNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceCopyTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testMoveNodesConstraintViolationException(org.apache.jackrabbit.test.api.WorkspaceMoveTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeTypeConstraintViolationWorkspaceWithHandler(org.apache.jackrabbit.test.api.SerializationTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeTypeConstraintViolationSessionWithHandler(org.apache.jackrabbit.test.api.SerializationTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeTypeConstraintViolationWorkspace(org.apache.jackrabbit.test.api.SerializationTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeTypeConstraintViolationSession(org.apache.jackrabbit.test.api.SerializationTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testJoinFilterPrimaryType(org.apache.jackrabbit.test.api.query.SQLJoinTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTest(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestAnyNode(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestAnyNodeNtBase(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestAnyNodeSomeNT(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestNameTest(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestNameTestNtBase(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestNameTestSomeNT(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testElementTestNameTestSomeNTWithSNS(org.apache.jackrabbit.test.api.query.ElementTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeType(org.apache.jackrabbit.test.api.observation.AddEventListenerTest)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
here&amp;#39;s a stacktrace of a failing test:&lt;br/&gt;
&lt;br/&gt;
javax.jcr.nodetype.ConstraintViolationException: nt:hierarchyNode: is an abstract node type.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.NodeImpl.internalAddChildNode(NodeImpl.java:768)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:737)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:691)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.NodeImpl.addNode(NodeImpl.java:2147)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.test.api.SessionTest.testMoveItemExistsException(SessionTest.java:69)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
the failing tests are actually a backwards compatibility issue. nt:base and nt:hierarchyNode were&lt;br/&gt;
non-abstract in JCR 1.0, i.e. &lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;node.addNode(&amp;quot;foo&amp;quot;, &amp;quot;nt:base&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
was perfectly legal.&lt;br/&gt;
&lt;br/&gt;
however, as of JCR 2.0, above statement fails. all above mentioned tests fail because they &lt;br/&gt;
create nodes of type nt:base or nt:hierarchyNode.</description>
                <environment></environment>
            <key id="12428193">JCR-2159</key>
            <summary>Several test cases fail when declaring nt:base / nt:hierarchy node types as &apos;abstract&apos; </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="tripod">Tobias Bocanegra</assignee>
                                <reporter username="tripod">Tobias Bocanegra</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Jun 2009 00:13:51 +0100</created>
                <updated>Thu, 13 Aug 2009 16:01:32 +0100</updated>
                    <resolved>Wed, 22 Jul 2009 21:56:14 +0100</resolved>
                            <version>2.0</version>
                                <fixVersion>2.0-alpha7</fixVersion>
                                <component>jackrabbit-jcr-tests</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12721678" author="mreutegg" created="Fri, 19 Jun 2009 08:11:58 +0100"  >One possible solution is to ask the JSR 283 EG to declare those abstract flags as implementation variants. And mark those node types as non-abstract in jackrabbit.&lt;br/&gt;
&lt;br/&gt;
But in any case we&amp;#39;ll have to fix the test cases.</comment>
                    <comment id="12721694" author="tripod" created="Fri, 19 Jun 2009 09:37:19 +0100"  >the only usecase i can imagine of creating nt:base nodes is, when you only work with mixin types. so you can alter the &amp;quot;nodetype&amp;quot; as you wish. but since jcr2.0 now supports Node.setPrimaryType(), this usecase is obsolete.</comment>
                    <comment id="12721726" author="stefan@jira" created="Fri, 19 Jun 2009 11:26:21 +0100"  >the only other use case is when you write a TCK test and you need to create a node using a mandatory built-in node type that does not allow child nodes... ;)&lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s why all those test cases fail now</comment>
                    <comment id="12733531" author="tripod" created="Tue, 21 Jul 2009 09:14:57 +0100"  >suggested to JSR283 to keep the abstract attribute on nt:base and nt:hierarchy node and i will adjust the tests, if no one objects.&lt;br/&gt;
</comment>
                    <comment id="12734309" author="tripod" created="Wed, 22 Jul 2009 21:56:14 +0100"  >fixed by using nt:address as nt:base replacement, since it does not allow childnodes and has no mandatory or autocreated properties.&lt;br/&gt;
&lt;br/&gt;
Committed revision 796876.&lt;br/&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12425474">JCR-2116</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 19 Jun 2009 07:11:58 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78319</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189702</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>