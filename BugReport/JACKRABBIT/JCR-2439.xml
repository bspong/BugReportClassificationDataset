<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:52:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2439/JCR-2439.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2439] More utility methods in JcrUtils</title>
                <link>https://issues.apache.org/jira/browse/JCR-2439</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>I&amp;#39;d like to add at least the following utility methods to JcrUtils:&lt;br/&gt;
&lt;br/&gt;
For logging:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Utility method to simplify log messages and debug prints:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Node -&amp;gt; &amp;quot;name [type]&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Property -&amp;gt; &amp;quot;@name = value(s)&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String toString(Item item)&lt;br/&gt;
&lt;br/&gt;
For making sure that a node exists:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Returns the identified child node. If the child does not already exist,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// it is added using the default node type from the parent.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node setNode(Node parent, String name)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Same as above, but ensures that isNodeType(type) is true for the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// returned node, using addNode(name, type) or setPrimaryType(type)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// if needed.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node setNode(Node parent, String name, String type)&lt;br/&gt;
&lt;br/&gt;
For adding (or setting, see above) nt:folder nodes:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Adds a new nt:folder node with the given name&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node addFolder(Node parent, String name)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Ensures that an nt:folder node with the given name exists&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node setFolder(Node parent, String name)&lt;br/&gt;
&lt;br/&gt;
For adding (or setting) nt:file nodes:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Adds a new nt:file/nt:resource structure&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// If the mime type contains a charset parameter, then the jcr:encoding property is also set&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node addFile(Node parent, String name, String mime, InputStream data)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node addFile(Node parent, String name, String mime, Calendar date, InputStream data)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Ensures that an nt:file/nt:resource structure exists with the given data.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Note that the type of a potential existing jcr:content node is not modified&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node setFile(Node parent, String name, String mime, InputStream data)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node setFile(Node parent, String name, String mime, Calendar date, InputStream data)&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12443364">JCR-2439</key>
            <summary>More utility methods in JcrUtils</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Dec 2009 11:03:05 +0000</created>
                <updated>Mon, 11 Jan 2010 14:09:53 +0000</updated>
                    <resolved>Wed, 6 Jan 2010 16:34:43 +0000</resolved>
                                            <fixVersion>2.0-beta5</fixVersion>
                                <component>jackrabbit-jcr-commons</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12790702" author="fmeschbe" created="Tue, 15 Dec 2009 11:46:02 +0000"  >&amp;gt;  String toString(Item item)&lt;br/&gt;
&lt;br/&gt;
Couldn&amp;#39;t we just implement NodeImpl.toString and PropertyImpl.toString ?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; addXXX&lt;br/&gt;
&lt;br/&gt;
looks reasonable&lt;br/&gt;
&lt;br/&gt;
&amp;gt; setXXX&lt;br/&gt;
&lt;br/&gt;
sounds useful, but I the &amp;quot;set&amp;quot; prefix sounds a bit strange&lt;br/&gt;
&lt;br/&gt;
yet my alternative -- getOrAddXXX -- is probably not better ...</comment>
                    <comment id="12790716" author="alexander.klimetschek" created="Tue, 15 Dec 2009 12:19:08 +0000"  >&amp;gt; Couldn&amp;#39;t we just implement NodeImpl.toString and PropertyImpl.toString ?&lt;br/&gt;
&lt;br/&gt;
They are implemented in JR 2.0. But they print &amp;quot;node&amp;quot;/&amp;quot;property&amp;quot; + the path only, not the node type.</comment>
                    <comment id="12790736" author="tmueller" created="Tue, 15 Dec 2009 13:24:46 +0000"  >&amp;gt; Node setNode(Node parent, String name, String type) &lt;br/&gt;
&amp;gt; using addNode(name, type) or setPrimaryType(type) if needed.&lt;br/&gt;
&lt;br/&gt;
That means, if a node exists with this name, the type of the node would be changed. Could you tell me the use case (when do you want to change the node type of an existing node)?&lt;br/&gt;
&lt;br/&gt;
I probably would throw an exception if a node with this name already exists, but with a different primary type. Then I would then prefer the method name getOrAddXXX.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12790761" author="jukkaz" created="Tue, 15 Dec 2009 14:39:45 +0000"  >&amp;gt; Item.toString() vs JcrUtils.toString(Item)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to have something that works with any JCR backend, including all the remoting and decoration layers we have.&lt;br/&gt;
&lt;br/&gt;
It may also be a bit troublesome to make the Item.toString() methods do more complex operations like retrieving the node type name or property values, since that may throw tools like debuggers off balance. It&amp;#39;s best if that method is as &amp;quot;safe&amp;quot; as possible.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; setXxx()&lt;br/&gt;
&lt;br/&gt;
I considered using getOrAddXxx() as the name, but that pattern doesn&amp;#39;t work that well for the setFile() case where I&amp;#39;d like a method that will not just make sure that the file node exists, but also updates the content of the file.&lt;br/&gt;
&lt;br/&gt;
If &amp;quot;set&amp;quot; sounds strange, how about &amp;quot;put&amp;quot; as in putNode(), putFolder(), putFile()?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; setPrimaryType()&lt;br/&gt;
&lt;br/&gt;
Good point, throwing an exception instead of trying to coerce the node type seems like a better alternative.</comment>
                    <comment id="12790773" author="tmueller" created="Tue, 15 Dec 2009 15:18:30 +0000"  >+1 for JcrUtils.toString(Item) - same reason as Jukka&lt;br/&gt;
&lt;br/&gt;
+1 for putNode(), putFolder(), putFile() - like Map.put&lt;br/&gt;
</comment>
                    <comment id="12790776" author="yabon" created="Tue, 15 Dec 2009 15:38:34 +0000"  >For toString() methods I found the path very useful especially for nodes.&lt;br/&gt;
&lt;br/&gt;
I also prefers getOrAdd* instead of put* or set* because put and set are semantically speaking writable methods.&lt;br/&gt;
In some framework like Avalon [1] (RIP :)) they use an additional createNew boolean parameter to create an object if necessary and I think that the two use cases of createNew are interesting.&lt;br/&gt;
&lt;br/&gt;
What is done for files can also be done for resources like:&lt;br/&gt;
- Node setResource(Node parent, String mime, InputStream data)&lt;br/&gt;
- Node setResource(Node parent, String mime, Calendar date, InputStream data)&lt;br/&gt;
&lt;br/&gt;
Here use of set fits naturally as the method always modifies the node and/or parent node.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;http://excalibur.apache.org/apidocs/org/apache/avalon/framework/configuration/Configuration.html#getChild(java.lang.String,%20boolean)&quot;&gt;http://excalibur.apache.org/apidocs/org/apache/avalon/framework/configuration/Configuration.html#getChild(java.lang.String,%20boolean)&lt;/a&gt;</comment>
                    <comment id="12790805" author="jukkaz" created="Tue, 15 Dec 2009 16:33:42 +0000"  >I&amp;#39;ve now added the following methods:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String toString(Item item) &lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node getOrAddNode(Node parent, String name)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node getOrAddNode(Node parent, String name, String type)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node getOrAddFolder(Node parent, String name)&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, InputStream data)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, Calendar date, InputStream data)&lt;br/&gt;
&lt;br/&gt;
The naming isn&amp;#39;t as consistent as originally proposed, but I think it now better matches the conceptual difference between the putFile() operation that always writes and the getOrAdd methods that write only if the child node does not already exist.</comment>
                    <comment id="12791357" author="jukkaz" created="Wed, 16 Dec 2009 13:07:28 +0000"  >Resolving as fixed. The methods I implemented work pretty well and the chosen method names should be a reasonable compromise that addresses all the points raised above.</comment>
                    <comment id="12792234" author="tripod" created="Thu, 17 Dec 2009 23:42:38 +0000"  >sorry, but i saw this issue too late, i would not mix the sequence of arguments in the signatures like in:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, InputStream data)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, Calendar date, InputStream data) &lt;br/&gt;
&lt;br/&gt;
but rather have:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, InputStream data)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node putFile(Node parent, String name, String mime, InputStream data, Calendar date) &lt;br/&gt;
&lt;br/&gt;
so that &amp;quot;optional&amp;quot; arguments always come at the end.</comment>
                    <comment id="12797167" author="jukkaz" created="Wed, 6 Jan 2010 16:34:43 +0000"  >Excellent point. I changed the order of arguments in revision 896513.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 15 Dec 2009 11:46:02 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>143149</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280197</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>