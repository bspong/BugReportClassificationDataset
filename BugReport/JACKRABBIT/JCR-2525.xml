<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:43:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2525/JCR-2525.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2525] NodeState and NodeStateListener deadlock</title>
                <link>https://issues.apache.org/jira/browse/JCR-2525</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>&lt;br/&gt;
&lt;br/&gt;
Java stack information for the threads listed above:&lt;br/&gt;
===================================================&lt;br/&gt;
&amp;quot;jmssecondaryApplnJobExecutor-8&amp;quot;:&lt;br/&gt;
	at org.apache.jackrabbit.core.state.NodeState.getChildNodeEntry(NodeState.java:300)&lt;br/&gt;
	- waiting to lock &amp;lt;0x9e6c6d08&amp;gt; (a org.apache.jackrabbit.core.state.NodeState)&lt;br/&gt;
	at org.apache.jackrabbit.core.CachingHierarchyManager.nodeModified(CachingHierarchyManager.java:316)&lt;br/&gt;
	- locked &amp;lt;0xa09882a8&amp;gt; (a java.lang.Object)&lt;br/&gt;
	at org.apache.jackrabbit.core.CachingHierarchyManager.stateModified(CachingHierarchyManager.java:293)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.stateModified(SessionItemStateManager.java:889)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.stateModified(LocalItemStateManager.java:452)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.stateModified(XAItemStateManager.java:602)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyStateModified(StateChangeDispatcher.java:111)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.stateModified(SharedItemStateManager.java:400)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.ItemState.notifyStateUpdated(ItemState.java:244)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.ChangeLog.persisted(ChangeLog.java:297)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.end(SharedItemStateManager.java:749)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1115)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:351)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:325)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:1111)&lt;br/&gt;
	- locked &amp;lt;0x9b1b0be0&amp;gt; (a org.apache.jackrabbit.core.XASessionImpl)&lt;br/&gt;
	at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:915)&lt;br/&gt;
	at org.apache.jackrabbit.jca.JCASessionHandle.save(JCASessionHandle.java:180)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor1067.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:36)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:243)&lt;br/&gt;
	at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074)&lt;br/&gt;
	at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955)&lt;br/&gt;
	at org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:88)&lt;br/&gt;
	at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)&lt;br/&gt;
	at org.jboss.mx.modelmbean.RequiredModelMBeanInvoker.invoke(RequiredModelMBeanInvoker.java:127)&lt;br/&gt;
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)&lt;br/&gt;
	at org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:291)&lt;br/&gt;
	at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)&lt;br/&gt;
	at $Proxy692.doDiscoveryNow(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)&lt;br/&gt;
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)&lt;br/&gt;
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;br/&gt;
&amp;quot;jmssecondaryApplnJobExecutor-7&amp;quot;:&lt;br/&gt;
	at org.apache.jackrabbit.core.CachingHierarchyManager.nodeAdded(CachingHierarchyManager.java:362)&lt;br/&gt;
	- waiting to lock &amp;lt;0xa09882a8&amp;gt; (a java.lang.Object)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.StateChangeDispatcher.notifyNodeAdded(StateChangeDispatcher.java:159)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.nodeAdded(SessionItemStateManager.java:947)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.NodeState.notifyNodeAdded(NodeState.java:882)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.NodeState.addChildNodeEntry(NodeState.java:351)&lt;br/&gt;
	- locked &amp;lt;0x9e6c6d08&amp;gt; (a org.apache.jackrabbit.core.state.NodeState)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.createChildNode(NodeImpl.java:541)&lt;br/&gt;
	- locked &amp;lt;0xa00619a8&amp;gt; (a org.apache.jackrabbit.core.NodeImpl)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.internalAddChildNode(NodeImpl.java:802)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.internalAddNode(NodeImpl.java:735)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.addNodeWithUuid(NodeImpl.java:2200)&lt;br/&gt;
	- locked &amp;lt;0xa00619f8&amp;gt; (a org.apache.jackrabbit.core.NodeImpl)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImpl.addNode(NodeImpl.java:2133)&lt;br/&gt;
	- locked &amp;lt;0xa00619f8&amp;gt; (a org.apache.jackrabbit.core.NodeImpl)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor1067.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:36)&lt;br/&gt;
	at sun.reflect.GeneratedMethodAccessor110.invoke(Unknown Source)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:243)&lt;br/&gt;
	at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1074)&lt;br/&gt;
	at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:955)&lt;br/&gt;
	at org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:88)&lt;br/&gt;
	at org.jboss.mx.server.RawDynamicInvoker.invoke(RawDynamicInvoker.java:164)&lt;br/&gt;
	at org.jboss.mx.modelmbean.RequiredModelMBeanInvoker.invoke(RequiredModelMBeanInvoker.java:127)&lt;br/&gt;
	at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:659)&lt;br/&gt;
	at org.jboss.system.server.jmx.LazyMBeanServer.invoke(LazyMBeanServer.java:291)&lt;br/&gt;
	at javax.management.MBeanServerInvocationHandler.invoke(MBeanServerInvocationHandler.java:288)&lt;br/&gt;
	at $Proxy692.doDiscoveryNow(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:531)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:466)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:435)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:322)&lt;br/&gt;
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:260)&lt;br/&gt;
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:944)&lt;br/&gt;
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:868)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:619)&lt;br/&gt;
&lt;br/&gt;
Found 1 deadlock.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12457800">JCR-2525</key>
            <summary>NodeState and NodeStateListener deadlock</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="fguilbea">Frederic Guilbeault</reporter>
                        <labels>
                    </labels>
                <created>Mon, 1 Mar 2010 23:18:43 +0000</created>
                <updated>Tue, 27 Apr 2010 09:23:26 +0100</updated>
                    <resolved>Tue, 13 Apr 2010 16:02:16 +0100</resolved>
                            <version>1.6</version>
                <version>1.6.1</version>
                                <fixVersion>1.6.2</fixVersion>
                <fixVersion>2.1</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>5</watches>
                                                    <comments>
                    <comment id="12839913" author="fguilbea" created="Mon, 1 Mar 2010 23:21:31 +0000"  >Proposed solution would be to introduce a method with NodeStateListener to return a monitor object or null, if not required.&lt;br/&gt;
&lt;br/&gt;
Then NodeState would always lock the NodeStateListener monitor first, and itself second.&lt;br/&gt;
&lt;br/&gt;
This way the lock order would always be: First NodeStateListener, Second NodeState.</comment>
                    <comment id="12840685" author="fguilbea" created="Wed, 3 Mar 2010 15:00:55 +0000"  >attaching proposed code changes&lt;br/&gt;
these were tested also and proven to resolve the deadlock&lt;br/&gt;
credit goes to The Dong Pham Thanh for coding and testing</comment>
                    <comment id="12841646" author="antoniomartinez" created="Fri, 5 Mar 2010 01:34:38 +0000"  >The previous patch still caused deadlock. After applying JCR_Deadlock_additionalChanges.txt things are OK (credit again to The)</comment>
                    <comment id="12841769" author="stefan@jira" created="Fri, 5 Mar 2010 09:14:34 +0000"  >could you please provide a simple test case which is able to reproduce the dead lock?&lt;br/&gt;
&lt;br/&gt;
see o.a.jackrabbit.core.Concurrent*Test.java in jackrabbit-core for some examples.&lt;br/&gt;
&lt;br/&gt;
thanks</comment>
                    <comment id="12843264" author="antoniomartinez" created="Tue, 9 Mar 2010 19:49:35 +0000"  >With last changes, after some more test get into scenario where all jackrabbit threads are waiting on object monitor. After taking several thread dumps threads are always stuck in same place.&lt;br/&gt;
--&lt;br/&gt;
So for now we are not taking the proposed modifications in our product.&lt;br/&gt;
--&lt;br/&gt;
What we do for now is to avoid creating/deleting nodes under the same parent in different threads. That for sure prevents the deadlock, but the bug still exists</comment>
                    <comment id="12843417" author="dptthe" created="Wed, 10 Mar 2010 03:13:28 +0000"  >I attached the eclipse project which contains my test code to reproduce this issue. You need to modify URLs linking to DB server in repository.xml and re-configure the class path of the Jackrabbit components. &lt;br/&gt;
After doing the changes, you should can run the test. Note that the issue does not always happen, so you would need to run the test a couple of times.</comment>
                    <comment id="12852743" author="stephanh" created="Fri, 2 Apr 2010 08:35:37 +0100"  >Concerning your patches. The JCR_Deadlock_changes.diff introduces a cacheMonitor lock for all methods related to the childNodeEntries object. Then JCR_Deadlock_additionalChanges.txt uses the NodeState monitor lock for get methods. This creates 2 different locks for the invariant on childNodeEntries and this is incorrect. I took the liberty to rewrite the test class to a junit test (see ItemStateHierarchyManagerDeadlockTest.java).&lt;br/&gt;
&lt;br/&gt;
I have a different proposed solution. A concurrency design rule is to never give control to a client within a synchronized block. This means that you must not call methods of which the class has no knowledge of what the method does and has no control over it (alien methods). In this case calling the listener is such a situation in NodeState. A solution is to remove the listener &lt;br/&gt;
&lt;br/&gt;
notification calls from the synchronized block and to limit the synchronized block to the operations on the childNodeEntries object. &lt;br/&gt;
&lt;br/&gt;
Outside the lock a ChildNodeEntry is passed to the listener, but ChildNodeEntry is immutable and therefore thread-safe. Also the NodeState is passed to the listener. If the listener calls a method on the NodeState the monitor lock is aquired again if needed. See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2525&quot; title=&quot;NodeState and NodeStateListener deadlock&quot;&gt;&lt;strike&gt;JCR-2525&lt;/strike&gt;&lt;/a&gt;-listener-outside-lock.patch (based on the 1.6 branch).</comment>
                    <comment id="12856441" author="jukkaz" created="Tue, 13 Apr 2010 16:02:16 +0100"  >Thanks for the excellent work on this! I&amp;#39;ve committed the latest patch and the test case to Jackrabbit trunk in revision 933646 and merged the changes to the 2.1 branch in revision 933662. Is there demand for also a 1.6.2 release with this fix?</comment>
                    <comment id="12856445" author="c_koell" created="Tue, 13 Apr 2010 16:12:52 +0100"  >Hi Jukka,&lt;br/&gt;
&lt;br/&gt;
That would be fine if this fix will go into 1.6.2 too.&lt;br/&gt;
&lt;br/&gt;
greets</comment>
                    <comment id="12856448" author="stephanh" created="Tue, 13 Apr 2010 16:17:38 +0100"  >I would also very much appreciate this fix in 1.6.2</comment>
                    <comment id="12856465" author="jukkaz" created="Tue, 13 Apr 2010 17:14:32 +0100"  >OK, I merged the change to the 1.6 branch in revision 933699. See &lt;a href=&apos;mailto:dev@jackrabbit&apos;&gt;dev@jackrabbit&lt;/a&gt; for the 1.6.2 release schedule.</comment>
                    <comment id="12858517" author="rsauer" created="Mon, 19 Apr 2010 15:45:45 +0100"  >&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;[[ Old comment, sent by email on Tue, 13 Apr 2010 16:49:28 +0100 ]]&lt;br/&gt;
&lt;br/&gt;
+1 from me on incluson with 1.6.2, too. &lt;br/&gt;
&lt;br/&gt;
ian.jira.plugin.system.issuetabpanels:comment-&amp;gt; tabpanel&amp;amp;focusedCommentId=12856448#action_12856448 ] &lt;br/&gt;
.end(SharedItemStateManager.java:749)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                </comments>
                    <attachments>
                    <attachment id="12440597" name="ItemStateHierarchyManagerDeadlockTest.java" size="9024" author="stephanh" created="Fri, 2 Apr 2010 08:34:51 +0100" />
                    <attachment id="12440598" name="JCR-2525-listener-outside-lock.patch" size="4680" author="stephanh" created="Fri, 2 Apr 2010 08:35:59 +0100" />
                    <attachment id="12437953" name="JCR_Deadlock_additionalChanges.txt" size="2039" author="antoniomartinez" created="Fri, 5 Mar 2010 01:34:38 +0000" />
                    <attachment id="12437742" name="JCR_Deadlock_changes.diff" size="10702" author="fguilbea" created="Wed, 3 Mar 2010 15:00:55 +0000" />
                    <attachment id="12438364" name="JCRDeadlockTest.zip" size="6848" author="dptthe" created="Wed, 10 Mar 2010 03:13:28 +0000" />
                    <attachment id="12438319" name="threads_stuck.txt" size="40438" author="antoniomartinez" created="Tue, 9 Mar 2010 19:49:35 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 5 Mar 2010 01:34:38 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78192</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189820</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>