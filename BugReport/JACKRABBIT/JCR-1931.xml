<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:58:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1931/JCR-1931.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1931] SharedFieldCache$StringIndex memory leak causing OOM&apos;s </title>
                <link>https://issues.apache.org/jira/browse/JCR-1931</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>SharedFieldCache$StringIndex is not working properly. It is meant to cache the docnumbers in lucene along with the term to sort on. The issue is twofold. I have a solution for the second one, the first one is not really solvable from jr pov, because lucene index readers are already heavily caching Terms. &lt;br/&gt;
&lt;br/&gt;
Explanation of the problem:&lt;br/&gt;
&lt;br/&gt;
For *each* unique property where is sorted on, a new lucene ScoreDocComparator is created (see SharedFieldComparator newComparator). This new comparator creates *per* lucene indexreader  SharedFieldCache.StringIndex which is stored in a WeakHashMap with as key, the indexreader . As this indexreader  almost *never* can be garbage collected (only if it is merged and thus unused after), the SharedFieldCache.StringIndex are there to be the rest of the jvm life (which is sometime short, as can be seen from the simple unittest attached).  Obviously, this results pretty fast in OOM.&lt;br/&gt;
&lt;br/&gt;
1) issue one:  The cached terms[] in SharedFieldCache.StringIndex can become huge when you sort on a common property (date) which is present in a lot of nodes. It you sort on large properties, like &amp;#39;title&amp;#39; this SharedFieldCache.StringIndex  will quickly use hundreds of Mb for a couple of hundred of thousand of nodes with a title. This issue is already a lucene issue, as lucene already caches the terms. OTOH, I really doubt whether we should index long string values as UNTOKENIZED in lucene at all. A half working solution might be a two-step solution, where the first sort is on the first 10 chars, and only if the comparator returns 0, take the entire string to sort on&lt;br/&gt;
&lt;br/&gt;
2) issue two:  The cached terms[] in SharedFieldCache.StringIndex is frequently sparse, consuming an incredible amount of memory for string arrays containing mainly null values. For example (see attached unit test):&lt;br/&gt;
&lt;br/&gt;
- add 1.000.000 nodes&lt;br/&gt;
- do a query and sort on a non existing property&lt;br/&gt;
- you&amp;#39;ll loose 1.000.000 * 4 bytes ~ 4 Mb of memory&lt;br/&gt;
- sort on another non existing prop : another 4 Mb is lost&lt;br/&gt;
- do it 100 times --&amp;gt; 400 Mb is lost, and can&amp;#39;t be reclaimed&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll attach a solution which works really fine for me, still having the almost unavoidable memory absorption, but makes it much smaller. The solution is, that if &amp;lt; 10% of the String array is filled, i consider the array already sparse, and move to a HashMap solution. Performance does not decrease much (and in case of large sparsity increases because less memory consumption --&amp;gt; less gc, etc). &lt;br/&gt;
&lt;br/&gt;
Perhaps it does not seem to be a common issue (certainly the unit test) but our production environments memory snapshots indicate most memory being held by the SharedFieldCache$StringIndex (and the lucene Terms, which is harder to avoid)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d like to see this in the 1.5.1 if others are ok with it&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12411964">JCR-1931</key>
            <summary>SharedFieldCache$StringIndex memory leak causing OOM&apos;s </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="aschrijvers">Ard Schrijvers</assignee>
                                <reporter username="aschrijvers">Ard Schrijvers</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Jan 2009 17:35:12 +0000</created>
                <updated>Tue, 20 Jan 2009 15:02:44 +0000</updated>
                    <resolved>Tue, 13 Jan 2009 17:15:07 +0000</resolved>
                            <version>1.5</version>
                                <fixVersion>1.5.2</fixVersion>
                                <component>jackrabbit-core</component>
                <component>query</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12662122" author="jukkaz" created="Thu, 8 Jan 2009 21:14:46 +0000"  >Your solution sounds reasonable, do you already have a patch for it?&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m planning to cut the 1.5.1 release early next week. Can we have this in trunk and tested before that?</comment>
                    <comment id="12662277" author="aschrijvers" created="Fri, 9 Jan 2009 08:31:06 +0000"  >Yes, i&amp;#39;ll add the patch today. Rethinking the sparsity factor i think it is better to have it &amp;#39;sparse&amp;#39; is &amp;lt; 1% instead of 10% is filled, though, it is still pretty heuristic.Trying to patch against the trunk, will add the patch which can be tested (with the unit test included, where with the patch no memory is lost, and without in 500 searches about 250 Mb is lost (for 100.000 nodes test))</comment>
                    <comment id="12662284" author="aschrijvers" created="Fri, 9 Jan 2009 09:06:33 +0000"  >suggested fix for memory usage reduction. When sorting on sparse properties, memory reduction is large. When sorting on non existing properties, memory usage almost drops to a few bytes per unique sort property, where it used to be 4* maxdoc bytes (maxdoc is lucene multireader maxdoc, so in case of 1.000.000 nodes, about 1.000.000)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12662960" author="mreutegg" created="Mon, 12 Jan 2009 13:53:32 +0000"  >Comments:&lt;br/&gt;
&lt;br/&gt;
- can you please create a patch that only includes relevant changes? it seems there are several changes in the patch that are just line breaks at different positions.&lt;br/&gt;
- StringIndex#sparse should be final, it is only set in the constructor&lt;br/&gt;
- comment in StringIndex#isSparse still mentions 10%&lt;br/&gt;
&lt;br/&gt;
Other than that, the patch looks OK.</comment>
                    <comment id="12663010" author="jukkaz" created="Mon, 12 Jan 2009 17:13:33 +0000"  >Seems OK to me too. Ard, can you commit this with Marcel&amp;#39;s suggetions? I&amp;#39;ll then merge it to 1.5 for inclusion in 1.5.1.</comment>
                    <comment id="12663297" author="aschrijvers" created="Tue, 13 Jan 2009 10:31:52 +0000"  >committed in 734092</comment>
                    <comment id="12663377" author="jukkaz" created="Tue, 13 Jan 2009 17:15:07 +0000"  >Thanks! Merged to the 1.5 branch in revision 734187.</comment>
                </comments>
                    <attachments>
                    <attachment id="12397493" name="JCR-1931.patch" size="8714" author="aschrijvers" created="Fri, 9 Jan 2009 09:06:33 +0000" />
                    <attachment id="12397439" name="OrderByOOMTest.java" size="4679" author="aschrijvers" created="Thu, 8 Jan 2009 17:37:20 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 8 Jan 2009 21:14:46 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78381</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189907</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>