<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:29:17 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-619/JCR-619.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-619] CacheManager (Memory Management in Jackrabbit)</title>
                <link>https://issues.apache.org/jira/browse/JCR-619</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Jackrabbit can run out of memory because the the combined size of the various caches is not managed. The biggest problem (for me) is the combined size of the o.a.j.core.state.MLRUItemStateCache caches. Each session seems to create a few (?) of those caches, and each one is limited to 4 MB by default.&lt;br/&gt;
&lt;br/&gt;
I have implemented a dynamic (cache-) memory management service that distributes a fixed amount of memory dynamically to all those caches.&lt;br/&gt;
&lt;br/&gt;
Here is the patch</description>
                <environment></environment>
            <key id="12354673">JCR-619</key>
            <summary>CacheManager (Memory Management in Jackrabbit)</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stefan@jira">Stefan Guggisberg</assignee>
                                <reporter username="tmueller">Thomas Mueller</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Nov 2006 11:04:50 +0000</created>
                <updated>Fri, 9 May 2008 08:23:30 +0100</updated>
                    <resolved>Mon, 4 Dec 2006 13:04:29 +0000</resolved>
                                            <fixVersion>1.2.1</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12446912" author="tmueller" created="Fri, 3 Nov 2006 11:05:40 +0000"  >CacheManager</comment>
                    <comment id="12446928" author="tmueller" created="Fri, 3 Nov 2006 12:23:40 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
I just made some more (long running) tests, and found some problems in the patch I submitted. The mechanism is working, but it shrinks the caches too quickly, and it prints too much log output (log.info instead of log.debug). I will fix those problems and submit a new patch. Sorry.&lt;br/&gt;
&lt;br/&gt;
Thomas</comment>
                    <comment id="12446965" author="tmueller" created="Fri, 3 Nov 2006 14:23:19 +0000"  >New version (log.debug instead of log.info, slower cache shrinking).</comment>
                    <comment id="12447482" author="tripod" created="Mon, 6 Nov 2006 17:44:10 +0000"  >Committed revision 471800.&lt;br/&gt;
</comment>
                    <comment id="12449315" author="stefan@jira" created="Mon, 13 Nov 2006 11:08:47 +0000"  >the patch caused a serious performance degradation.&lt;br/&gt;
&lt;br/&gt;
see &lt;a href=&quot;http://www.nabble.com/Performance-degradation-in-current--trunk-t2608647.html&quot;&gt;http://www.nabble.com/Performance-degradation-in-current--trunk-t2608647.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
i therefore temporarily reverted the changes from svn r471800.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12449387" author="tmueller" created="Mon, 13 Nov 2006 14:50:32 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
This is the latest version of the CacheManager. &lt;br/&gt;
&lt;br/&gt;
As the CacheManager is not a singleton any more, the problem &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-625&quot; title=&quot;Memory is not freed up when jackrabbit-server war is redeployed in tomcat&quot;&gt;&lt;strike&gt;JCR-625&lt;/strike&gt;&lt;/a&gt; (Memory is not freed up when redeployed) should not appear with this patch. &lt;br/&gt;
&lt;br/&gt;
Also, the performance degradation found with the earlier versions of the CacheManager should be solved (now the caches are removed from the CacheManager when the session is closed). This has been tested with the unit tests so far on two machines.&lt;br/&gt;
&lt;br/&gt;
Thomas</comment>
                    <comment id="12450011" author="stefan@jira" created="Wed, 15 Nov 2006 13:16:45 +0000"  >patch (cacheManager5.txt) committed, thanks for this contribution!</comment>
                    <comment id="12450318" author="tmueller" created="Thu, 16 Nov 2006 09:10:50 +0000"  >A Java level deadlock could occur with the current CacheManager, if:&lt;br/&gt;
&lt;br/&gt;
Thread 1: CacheManager.resizeAll(holding a lock on the CacheManager) calls Cache.setMaxMemorySize (which tries to lock MLRUItemStateCache.cache)&lt;br/&gt;
&lt;br/&gt;
Thread 2: From the same object, MLRUItemStateCache.dispose (holding a lock on MLRUItemStateCache.cache) calls CacheManager.disposeCache (which tries to lock CacheManager)&lt;br/&gt;
&lt;br/&gt;
I made a patch, where CacheManager.disposeCache is not synchronized on the CacheManager. Instead, it synchronizes on the caches HashMap, where it removes the object (so that modifications to the caches map are synchronized, as this is needed). CacheManager.add now also synchronizes on the caches map.&lt;br/&gt;
&lt;br/&gt;
This should solve the problem.</comment>
                    <comment id="12450394" author="stefan@jira" created="Thu, 16 Nov 2006 13:45:20 +0000"  >reopening since the current implementation may lead to Java level deadlocks, as thomas pointed out. &lt;br/&gt;
&lt;br/&gt;
such dead locks occasionally occur when running the maven tests.</comment>
                    <comment id="12450398" author="stefan@jira" created="Thu, 16 Nov 2006 13:49:40 +0000"  >applied patch cacheManager6.txt (svn r475735)</comment>
                    <comment id="12454348" author="xilu1999" created="Wed, 29 Nov 2006 16:10:20 +0000"  >I have been running a concurrent test on Nov. 28th code base. A deadlock has been encouterred. The setup of the test is :&lt;br/&gt;
1. 6000 file nodes flat under root node&lt;br/&gt;
2. 900 category nodes, three level deep under root node&lt;br/&gt;
3. 50 concurrent thread, each one perform one of the four queries : &lt;br/&gt;
&amp;nbsp;&amp;nbsp;3.1 select all file nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3.2 select all category nodes &lt;br/&gt;
&amp;nbsp;&amp;nbsp;3.3 select file nodes by file property&lt;br/&gt;
&amp;nbsp;&amp;nbsp;3.4 select category nodes by category property&lt;br/&gt;
&lt;br/&gt;
The tests only involved query, no add/delete/update are included. From the jstack.txt attached, you can see a few threads are blocking each other, it looks similar to what Tom reported a few weeks ago.  </comment>
                    <comment id="12454354" author="stefan@jira" created="Wed, 29 Nov 2006 16:21:30 +0000"  >reopening based on xiaohua&amp;#39;s feed back (potential dead lock)</comment>
                    <comment id="12454399" author="xilu1999" created="Wed, 29 Nov 2006 18:17:39 +0000"  >I managed to reproduce the deadlock with 2 concurrent query. both query are select all category nodes.  &lt;br/&gt;
&lt;br/&gt;
the test data is the same as before. The definition of data as as following :&lt;br/&gt;
&lt;br/&gt;
&amp;lt;nt = &amp;#39;&lt;a href=&quot;http://www.jcp.org/jcr/nt/1.0&amp;#39;&quot;&gt;http://www.jcp.org/jcr/nt/1.0&amp;amp;#39;&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;lt;mix = &amp;#39;&lt;a href=&quot;http://www.jcp.org/jcr/mix/1.0&amp;#39;&quot;&gt;http://www.jcp.org/jcr/mix/1.0&amp;amp;#39;&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;lt;mvn = &amp;#39;&lt;a href=&quot;http://maven.net/jcr/mock&amp;#39;&quot;&gt;http://maven.net/jcr/mock&amp;amp;#39;&lt;/a&gt;&amp;gt;&lt;br/&gt;
&amp;lt;mvnnt = &amp;#39;&lt;a href=&quot;http://maven.net/jcr/nt/mock&amp;#39;&quot;&gt;http://maven.net/jcr/nt/mock&amp;amp;#39;&lt;/a&gt;&amp;gt;&lt;br/&gt;
&lt;br/&gt;
[mvnnt:categoryHierarchyNode] &amp;gt; nt:base&lt;br/&gt;
&lt;br/&gt;
[mvnnt:category] &amp;gt; mvnnt:categoryHierarchyNode, mix:referenceable&lt;br/&gt;
- mvn:description (string)&lt;br/&gt;
- mvn:content (reference) multiple&lt;br/&gt;
+ * (mvnnt:categoryHierarchyNode)&lt;br/&gt;
&lt;br/&gt;
--- note : the content field will point to file node and it is not used in this test. &lt;br/&gt;
&lt;br/&gt;
the query both threads are trying to perform is &lt;br/&gt;
&lt;br/&gt;
//element (*, mvnnt:category)&lt;br/&gt;
&lt;br/&gt;
-- note : The query returned very quickly and the deadlock happened when both threads tried to iterate through the NoteIterator to make sure the returned result are of type mvnnt:category.&lt;br/&gt;
&lt;br/&gt;
The jstack output is as followings :&lt;br/&gt;
&lt;br/&gt;
Thread &lt;a href=&apos;mailto:t@3847&apos;&gt;t@3847&lt;/a&gt;: (state = BLOCKED)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.CacheManager.cacheAccessed() @bci=18, line=77 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.MLRUItemStateCache.touch() @bci=34, line=222 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.MLRUItemStateCache.retrieve(org.apache.jackrabbit.core.ItemId) @bci=8, line=97 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.ItemStateReferenceCache.retrieve(org.apache.jackrabbit.core.ItemId) @bci=5, line=99 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(org.apache.jackrabbit.core.ItemId) @bci=54, line=233 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(org.apache.jackrabbit.core.ItemId) @bci=56, line=165 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.ItemManager.createItemInstance(org.apache.jackrabbit.core.ItemId) @bci=5, line=462 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.ItemManager.getItem(org.apache.jackrabbit.core.ItemId) @bci=63, line=320 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.query.lucene.NodeIteratorImpl.fetchNext() @bci=46, line=194 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.query.lucene.NodeIteratorImpl.nextNodeImpl() @bci=21, line=103 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest$ListCategoriesQueryTestContext.verify(javax.jcr.NodeIterator) @bci=25 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest.timingQuery(net.maven.cr.test.PerformanceQueryTest$QueryTestContext) @bci=34 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest.access$100(net.maven.cr.test.PerformanceQueryTest, net.maven.cr.test.PerformanceQueryTest$QueryTestContext) @bci=2 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest$TimedQueryTest.run() @bci=32 (Interpreted frame)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Thread &lt;a href=&apos;mailto:t@4099&apos;&gt;t@4099&lt;/a&gt;: (state = BLOCKED)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.MLRUItemStateCache.getMemoryUsed() @bci=6, line=245 (Compiled frame; information may be imprecise)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.CacheManager$CacheInfo.&amp;lt;init&amp;gt;(org.apache.jackrabbit.core.state.Cache) @bci=21, line=212 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.CacheManager.resizeAll() @bci=136, line=107 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.CacheManager.cacheAccessed() @bci=40, line=81 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.MLRUItemStateCache.touch() @bci=34, line=222 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.MLRUItemStateCache.cache(org.apache.jackrabbit.core.state.ItemState) @bci=8, line=129 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.ItemStateReferenceCache.cache(org.apache.jackrabbit.core.state.ItemState) @bci=48, line=114 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(org.apache.jackrabbit.core.NodeId) @bci=31, line=99 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(org.apache.jackrabbit.core.ItemId) @bci=47, line=150 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(org.apache.jackrabbit.core.ItemId) @bci=54, line=233 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(org.apache.jackrabbit.core.ItemId) @bci=56, line=165 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.ItemManager.createItemInstance(org.apache.jackrabbit.core.ItemId) @bci=5, line=462 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.ItemManager.getItem(org.apache.jackrabbit.core.ItemId) @bci=63, line=320 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.query.lucene.NodeIteratorImpl.fetchNext() @bci=46, line=194 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- org.apache.jackrabbit.core.query.lucene.NodeIteratorImpl.nextNodeImpl() @bci=21, line=103 (Compiled frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest$ListCategoriesQueryTestContext.verify(javax.jcr.NodeIterator) @bci=25 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest.timingQuery(net.maven.cr.test.PerformanceQueryTest$QueryTestContext) @bci=34 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest.access$100(net.maven.cr.test.PerformanceQueryTest, net.maven.cr.test.PerformanceQueryTest$QueryTestContext) @bci=2 (Interpreted frame)&lt;br/&gt;
&amp;nbsp;- net.maven.cr.test.PerformanceQueryTest$TimedQueryTest.run() @bci=32 (Interpreted frame)&lt;br/&gt;
</comment>
                    <comment id="12454703" author="tmueller" created="Thu, 30 Nov 2006 17:14:18 +0000"  >I have a patch for the Java level deadlock problem. Now the method touch() is no longer synchronized on the cache. However, inside touch() the cache could shrink, and this is still synchronized. Also fixed is a problem in shrinkIfRequired: this method called touch() which could theoretically cause another shrinkIfRequired call.</comment>
                    <comment id="12455303" author="stefan@jira" created="Mon, 4 Dec 2006 13:04:29 +0000"  >applied patch cacheManager7.txt (svn r481196).&lt;br/&gt;
&lt;br/&gt;
xiaohua confirmed that it solved the latest deadlock issue.</comment>
                    <comment id="12465457" author="jjaksic" created="Wed, 17 Jan 2007 17:27:34 +0000"  >&amp;gt; private static final long MAX_MEMORY = 16 * 1024 * 1024;&lt;br/&gt;
&lt;br/&gt;
If I understand the CacheManager source correctly, the maximum size for all caches is hardcoded to 16 megabytes and there&amp;#39;s no way to change that other than by changing the source. Now, while this is still a lot better than having no upper limit at all and risk running out of memory if you have many workspaces, it would be nice if this as well as other CacheManager parameters were configurable. It&amp;#39;s just a waste running Jackrabbit on a server with gigabytes of memory and only using 16 megs for cache...</comment>
                    <comment id="12466330" author="jjaksic" created="Sun, 21 Jan 2007 16:41:50 +0000"  >I have created a really simple and straightforward patch (jackrabbit-cachemanager-config.patch) which enables reaching the CacheManager instance through RepositoryImpl object and setting all three of its memory parameters. The memory parameters are no longer static constants, but instance fields getting initial values from constants (so the default behavior doesn&amp;#39;t change).&lt;br/&gt;
&lt;br/&gt;
Could this patch or something alike be included in a future release?&lt;br/&gt;
&lt;br/&gt;
(It would also be nice to be able to set these parameters via configuration files, but that should probably be implemented by someone close to the project.)</comment>
                    <comment id="12593980" author="saasira" created="Sat, 3 May 2008 09:49:01 +0100"  >Is there a way to use Apache Java Caching System or some other caching library like ehCache or JBoss cache with Jackrabit?  If not, Can we expect this possibility in the near future ?&lt;br/&gt;
&lt;br/&gt;
Rather an abstraction over the JCache(JSR-107)  allowing to plug in any cache manager that implements the specification would be very good step  ahead.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12594158" author="tmueller" created="Mon, 5 May 2008 08:11:49 +0100"  >&amp;gt; use Apache Java Caching System or some other caching library like ehCache or JBoss cache &lt;br/&gt;
Why do you like to have this feature?</comment>
                    <comment id="12594524" author="saasira" created="Tue, 6 May 2008 09:56:38 +0100"  >I would like to use  the distributed Caching capabilities of the above mentioned Caching softwares which are proven and can handle hundreds of GB of in-memory or disk cache distributed over the network across dozens of computers. &lt;br/&gt;
Actually I want to use the Content repository in a distributed environment with some master servers (load balanced to cater the  failover scenario) mapping the content workspace locations across the network depending on some  rules defined during the repository configuration. The The mapping information is replicated across the master servers and the content is spread across several clients(content on each client node is further replicated to siblings  to address failover).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;In such a complex scenario, I would prefer to use a well known and proven Caching software to handle the job. And if the Jackrabbit cache is aimed at doing that my question is would it not be a duplicate effort when there are some very efficient caching libraries available and are standards compliant? Or Is it not possible to have a pluggable Cache implementations for use with Jackrabbit?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;Or may be I might have misunderstood  some thing ---- Is it possible to use the Caching softwares on top of Jackrabbit, with out bothering about the jackrabbit&amp;#39;s internal cache implementation?&lt;br/&gt;
&lt;br/&gt;
I just found out that a similar work is going on in Jackrabbit  and a discussion may be related to JCR-872</comment>
                    <comment id="12595488" author="tmueller" created="Fri, 9 May 2008 08:23:29 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Is it possible to use the Caching softwares on top of Jackrabbit &lt;br/&gt;
&lt;br/&gt;
Yes, sure. Maybe you want to cache on the application side.&lt;br/&gt;
&lt;br/&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12354913">JCR-625</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12344288" name="cacheManager2.txt" size="15744" author="tmueller" created="Fri, 3 Nov 2006 14:23:19 +0000" />
                    <attachment id="12344891" name="cacheManager5.txt" size="41887" author="tmueller" created="Mon, 13 Nov 2006 14:50:32 +0000" />
                    <attachment id="12345100" name="cacheManager6.txt" size="1840" author="tmueller" created="Thu, 16 Nov 2006 09:10:50 +0000" />
                    <attachment id="12346144" name="cacheManager7.txt" size="2330" author="tmueller" created="Thu, 30 Nov 2006 17:14:18 +0000" />
                    <attachment id="12344281" name="cacheManager.txt" size="15280" author="tmueller" created="Fri, 3 Nov 2006 11:05:40 +0000" />
                    <attachment id="12349334" name="jackrabbit-cachemanager-config.patch" size="5283" author="jjaksic" created="Sun, 21 Jan 2007 16:28:52 +0000" />
                    <attachment id="12346039" name="stack.txt" size="42420" author="xilu1999" created="Wed, 29 Nov 2006 16:10:20 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 6 Nov 2006 17:44:10 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>42977</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191160</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>