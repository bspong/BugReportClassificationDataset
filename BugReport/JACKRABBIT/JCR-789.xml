<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:46:50 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-789/JCR-789.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-789] PathElement.equals doesn&apos;t handle INDEX_UNDEFINED</title>
                <link>https://issues.apache.org/jira/browse/JCR-789</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>PathElement (and therefore Path) comparisons fail when INDEX_UNDEFINED is used (it&amp;#39;s treated differently from INDEX_DEFAULT).&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12364833">JCR-789</key>
            <summary>PathElement.equals doesn&apos;t handle INDEX_UNDEFINED</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="reschke">Julian Reschke</assignee>
                                <reporter username="reschke">Julian Reschke</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Mar 2007 17:20:29 +0000</created>
                <updated>Wed, 8 Aug 2007 07:48:57 +0100</updated>
                    <resolved>Mon, 9 Jul 2007 14:08:25 +0100</resolved>
                                            <fixVersion>1.3</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12480490" author="reschke" created="Tue, 13 Mar 2007 17:24:16 +0000"  >Proposed patch.</comment>
                    <comment id="12485209" author="anchela" created="Thu, 29 Mar 2007 16:14:23 +0100"  >i just happen to read that jsr170 makes an explicit statement regarding this:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;However, as opposed to the semantics of XPath, a name in a content repository path that does not explicitly specify an index implies an index of 1. For example, /a/b/c is equivalent to /a[1]/b[1]/c[1].&amp;quot;&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12485340" author="jukkaz" created="Thu, 29 Mar 2007 21:32:55 +0100"  >Sounds like a correct change to me.&lt;br/&gt;
&lt;br/&gt;
BTW, is there even a need for the INDEX_UNDEFINED case? In other words, could we always normalize path components to internally always have an index that is &amp;gt;= 1? If the index is 1, then the &amp;quot;[n]&amp;quot; part would be skipped during string serialization.&lt;br/&gt;
&lt;br/&gt;
Another note about this issue, does the comparison failure cause a regression against documented behaviour? If not, then I&amp;#39;d categorize this as an improvement rather than a bug.</comment>
                    <comment id="12485342" author="reschke" created="Thu, 29 Mar 2007 21:39:08 +0100"  >&amp;gt; BTW, is there even a need for the INDEX_UNDEFINED case? In other words, could we always normalize path components to internally always have an index that is &amp;gt;= 1? If the index is 1, then the &amp;quot;[n]&amp;quot; part would be skipped during string serialization. &lt;br/&gt;
&lt;br/&gt;
Unless it&amp;#39;s used somewhere where relative paths are matched (such as in Node.getnNodes(relpath)).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Another note about this issue, does the comparison failure cause a regression against documented behaviour? If not, then I&amp;#39;d categorize this as an improvement rather than a bug.&lt;br/&gt;
&lt;br/&gt;
I think it *did* cause a failure for me in JCR2SPI, until I adjusted my SPI implementation so that Path objects were built exactly the way expected by JCR2SPI (because that one is using Path.equals to compare paths).&lt;br/&gt;
&lt;br/&gt;
To summarize: we either should change .equals(), or, if we can&amp;#39;t, provide an additional, weaker comparison method.</comment>
                    <comment id="12485435" author="tripod" created="Fri, 30 Mar 2007 08:30:34 +0100"  >i&amp;#39;m in favor of normalizing the index and also make it 0-based throughout the code. there are several places where confusion exists about if the index is 0- or 1-based, with statements like this: if (index == 0) { index = 1}&lt;br/&gt;
&lt;br/&gt;
suggest to:&lt;br/&gt;
- use a 0-based index (when storing as int) throughout the code (also in NodeState)&lt;br/&gt;
- drop INDEX_UNDEFINED in PathElement&lt;br/&gt;
- during serialization, index == 0 will not be translated into ...[1].&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12485440" author="stefan@jira" created="Fri, 30 Mar 2007 08:40:06 +0100"  >&amp;gt; - use a 0-based index (when storing as int) throughout the code (also in NodeState)&lt;br/&gt;
&lt;br/&gt;
-1,  the scope of the required code change is IMO too big (with the risk of causing new issues)&lt;br/&gt;
whereas the benefit is IMO relatively small.</comment>
                    <comment id="12485448" author="mreutegg" created="Fri, 30 Mar 2007 10:14:38 +0100"  >Julian Reschke (JIRA) wrote:&lt;br/&gt;
&amp;gt; Unless it&amp;#39;s used somewhere where relative paths are matched (such as in&lt;br/&gt;
&amp;gt; Node.getnNodes(relpath)).&lt;br/&gt;
&lt;br/&gt;
relative paths have the same restrictions and rules like absolute paths. The method you mention does not take a relative path argument but a name pattern and those never have an index.&lt;br/&gt;
&lt;br/&gt;
Tobias wrote:&lt;br/&gt;
&amp;gt; - use a 0-based index (when storing as int) throughout the code (also in NodeState)&lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s the benefit of using a 0-based index when the spec says they are 1-based? Wouldn&amp;#39;t that make the implementation more complicated to understand?&lt;br/&gt;
&lt;br/&gt;
IMO the INDEX_UNDEFINED only makes sense in context of an XPath query. If a path element does not have an index in XPath then all same named nodes are selected regardless of what index they have. Whereas in the JCR API Node.getNode(&amp;quot;foo&amp;quot;) and Node.getNode(&amp;quot;foo[1]&amp;quot;) is the same.&lt;br/&gt;
&lt;br/&gt;
I think the crucial question is: does the spec says anywhere an 1-index needs to preserved in a path?</comment>
                    <comment id="12485449" author="tripod" created="Fri, 30 Mar 2007 10:22:23 +0100"  >&amp;gt; What&amp;#39;s the benefit of using a 0-based index when the spec says they are 1-based? &lt;br/&gt;
&amp;gt; Wouldn&amp;#39;t that make the implementation more complicated to understand? &lt;br/&gt;
first, computer science is 0-based :-)&lt;br/&gt;
i remember a lot of bugs that were caused because the code was not very clear about if the index is 0 or 1 based and what happens if the index is 0 (eg. the node state throws an exception if access with a index &amp;lt; 0).&lt;br/&gt;
&lt;br/&gt;
however, &amp;quot;/a&amp;quot;.equals(&amp;quot;/a[1]&amp;quot;) should return true (and compute the same hashcode).&lt;br/&gt;
</comment>
                    <comment id="12485453" author="stefan@jira" created="Fri, 30 Mar 2007 10:31:19 +0100"  >Marcel wrote:&lt;br/&gt;
&amp;gt; IMO the INDEX_UNDEFINED only makes sense in context of an XPath query. If a path element does not have an index in XPath then all same named nodes are selected regardless of what index they have. Whereas in the JCR API Node.getNode(&amp;quot;foo&amp;quot;) and Node.getNode(&amp;quot;foo[1]&amp;quot;) is the same.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I think the crucial question is: does the spec says anywhere an 1-index needs to preserved in a path?&lt;br/&gt;
&lt;br/&gt;
you&amp;#39;re right, it doesn&amp;#39;t. &lt;br/&gt;
&lt;br/&gt;
the original idea behind INDEX_UNDEFINED was to distinguish an implicit &amp;quot;[1]&amp;quot; subscript from an explicit &amp;quot;[1]&amp;quot;.&lt;br/&gt;
i.e.  to preserve e.g. the following string representation: &amp;quot;/foo[1]/bar&amp;quot;. it&amp;#39;s not required by the spec and whether &lt;br/&gt;
that&amp;#39;s useful feature or not is another question. &lt;br/&gt;
&lt;br/&gt;
personally i am not particularly attached to INDEX_UNDEFINED, i wouldn&amp;#39;t be opposed to removing it.</comment>
                    <comment id="12489173" author="reschke" created="Mon, 16 Apr 2007 18:10:33 +0100"  >OK, I just realized that I&amp;#39;ve been using the updated version of Path.java in my SPI implementation without noticing. Reverting back to the trunk version triggers the problem again.&lt;br/&gt;
&lt;br/&gt;
Thus, I&amp;#39;ll commit my minor change (treating 0 and 1 in equals and hashCode as the same). We can then still discuss whether a bigger change makes more sense.&lt;br/&gt;
</comment>
                    <comment id="12489175" author="reschke" created="Mon, 16 Apr 2007 18:20:30 +0100"  >Revision 529332.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12511107" author="reschke" created="Mon, 9 Jul 2007 13:52:51 +0100"  >...as we are planning to refactor the (Q)Name/Path implementations anyway, should this issue be closed now?&lt;br/&gt;
</comment>
                    <comment id="12511110" author="jukkaz" created="Mon, 9 Jul 2007 14:08:24 +0100"  >Agreed. I&amp;#39;m resolving this as fixed already for 1.3. Let&amp;#39;s use separate issues for any followup.</comment>
                </comments>
                    <attachments>
                    <attachment id="12353210" name="jcr789.diff.txt" size="1512" author="reschke" created="Tue, 13 Mar 2007 17:24:16 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 29 Mar 2007 15:14:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142365</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>252808</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>