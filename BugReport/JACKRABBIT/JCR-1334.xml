<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:59:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1334/JCR-1334.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1334] Deadlock due different Thread access while prepare and commit in same Transaction</title>
                <link>https://issues.apache.org/jira/browse/JCR-1334</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Since we have configured a j2c resource adapter any modification to the repository ends&lt;br/&gt;
with a deadlock.</description>
                <environment>WebSphere Application Server 5.1</environment>
            <key id="12386776">JCR-1334</key>
            <summary>Deadlock due different Thread access while prepare and commit in same Transaction</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="c_koell">Claus K&#246;ll</assignee>
                                <reporter username="c_koell">Claus K&#246;ll</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Jan 2008 13:32:10 +0000</created>
                <updated>Mon, 2 Mar 2009 11:59:59 +0000</updated>
                    <resolved>Wed, 14 Jan 2009 14:12:37 +0000</resolved>
                            <version>1.4</version>
                                <fixVersion>1.5.3</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12561007" author="c_koell" created="Mon, 21 Jan 2008 13:35:09 +0000"  >lock_output.txt-&amp;gt;&lt;br/&gt;
I have added in the Methods of the DefaultISMLocking Class&lt;br/&gt;
the calling Threadname&lt;br/&gt;
javacorexxx -&amp;gt;&lt;br/&gt;
the javacore file of the deadlock situation</comment>
                    <comment id="12561278" author="mreutegg" created="Tue, 22 Jan 2008 09:48:22 +0000"  >Prepare and commit is indeed called using different threads. </comment>
                    <comment id="12561599" author="c_koell" created="Wed, 23 Jan 2008 07:07:06 +0000"  >do you have any ideas to solve that problem ?</comment>
                    <comment id="12561631" author="mreutegg" created="Wed, 23 Jan 2008 10:58:56 +0000"  >I&amp;#39;m not an expert on JTS and JTA, but can you somehow change the transaction service to not use CORBA calls to coordinate the transaction?</comment>
                    <comment id="12561668" author="c_koell" created="Wed, 23 Jan 2008 13:24:29 +0000"  >hi marcel,&lt;br/&gt;
i have a sessionbean with a containermanaged transaction so i think &lt;br/&gt;
i can&amp;#39;t configure anything.&lt;br/&gt;
BR,&lt;br/&gt;
claus</comment>
                    <comment id="12561973" author="c_koell" created="Thu, 24 Jan 2008 08:41:34 +0000"  >what do you think about&lt;br/&gt;
to bind the locks not to a thread but rather to the transactioncontext if we run in a xa environment,&lt;br/&gt;
because you can not guarantee that the prepare and commit comes from the same thread in a container managed transaction&lt;br/&gt;
&lt;br/&gt;
BR,&lt;br/&gt;
claus</comment>
                    <comment id="12566524" author="c_koell" created="Thu, 7 Feb 2008 09:46:06 +0000"  >hi guys,&lt;br/&gt;
what do others think ?&lt;br/&gt;
i think we can not per default bind a lock to a thread. this will work good for a standalone server&lt;br/&gt;
but not in a xa environment with container transactions on a j2ee server&lt;br/&gt;
we run now for about a half year with jackrabbit in production but without &lt;br/&gt;
xa transactions and this is no good solution&lt;br/&gt;
hope somebody will help to solve that problem&lt;br/&gt;
br&lt;br/&gt;
claus&lt;br/&gt;
</comment>
                    <comment id="12566604" author="mreutegg" created="Thu, 7 Feb 2008 14:02:29 +0000"  >Patched version of DefaultISMLocking</comment>
                    <comment id="12566605" author="mreutegg" created="Thu, 7 Feb 2008 14:05:07 +0000"  >Claus, can you please compile and deploy the attached PatchedDefaultISMLocking class into your jackrabbit-jca and add the following element to your workspace.xml (as the following sibling of SearchIndex):&lt;br/&gt;
&lt;br/&gt;
&amp;lt;ISMLocking class=&amp;quot;org.apache.jackrabbit.core.state.PatchedDefaultISMLocking&amp;quot;/&amp;gt;&lt;br/&gt;
&lt;br/&gt;
If that works for you I will commit the changes.&lt;br/&gt;
&lt;br/&gt;
Thank you.</comment>
                    <comment id="12567594" author="c_koell" created="Mon, 11 Feb 2008 11:57:33 +0000"  >hi marcel,&lt;br/&gt;
thanks for your patch. it works fine on the downgrade method&lt;br/&gt;
but i have found that i get the same deadlock on acquireReadLock.&lt;br/&gt;
i have attached the stacktrace and a new PatchedDefaultISMLocking.java&lt;br/&gt;
with this Locking Class it works fine&lt;br/&gt;
what do you think about ?&lt;br/&gt;
BR,&lt;br/&gt;
claus</comment>
                    <comment id="12568497" author="mreutegg" created="Wed, 13 Feb 2008 10:24:51 +0000"  >The stacktrace you attached still shows the DefaultISMLocking class in use. Can you please run your test with the PatchedDefaultISMLocking?</comment>
                    <comment id="12568501" author="c_koell" created="Wed, 13 Feb 2008 10:36:57 +0000"  >hi marcel,&lt;br/&gt;
it has only that name but this is the patched one ...&lt;br/&gt;
</comment>
                    <comment id="12568504" author="mreutegg" created="Wed, 13 Feb 2008 10:54:23 +0000"  >Hmm, that looks strange, because the thread in the stacktrace should have set the thread that owns the write lock to the current thread, thus allowing subsequent read locks by the same thread.&lt;br/&gt;
&lt;br/&gt;
btw. your version of PatchedDefaultISMLocking won&amp;#39;t work, because it allows any thread to read, even if another thread is currently writing.</comment>
                    <comment id="12568506" author="c_koell" created="Wed, 13 Feb 2008 11:07:18 +0000"  >ok i see. that was not clear to me but now i understand.&lt;br/&gt;
hmm so websphere ignores the threads from which they get the readlock.&lt;br/&gt;
i think they work in xa environemt not with threads ?&lt;br/&gt;
when will the downgrade be called ? because the deadlock comes from the searchmanager.&lt;br/&gt;
he calls DefaultISMLocking.acquireReadLock and this call comes from a different thread than from downgrade.&lt;br/&gt;
</comment>
                    <comment id="12568575" author="mreutegg" created="Wed, 13 Feb 2008 15:12:37 +0000"  >&amp;gt; when will the downgrade be called ?&lt;br/&gt;
&lt;br/&gt;
downgrade is called in SharedItemStateManager.Update.end()&lt;br/&gt;
&lt;br/&gt;
&amp;gt; because the deadlock comes from the searchmanager. he calls DefaultISMLocking.acquireReadLock and this&lt;br/&gt;
&amp;gt; call comes from a different thread than from downgrade.&lt;br/&gt;
&lt;br/&gt;
no, I don&amp;#39;t think so. the stacktrace includes the Update.end() call and at the time EventStateCollection.dispatch() is called the lock is downgraded and associated with the current thread that later calls acquireReadLock().</comment>
                    <comment id="12568582" author="c_koell" created="Wed, 13 Feb 2008 15:23:52 +0000"  >first thanks for your help !&lt;br/&gt;
ok i will add more log output to get more informations ..&lt;br/&gt;
</comment>
                    <comment id="12568648" author="c_koell" created="Wed, 13 Feb 2008 17:48:20 +0000"  >hi marcel,&lt;br/&gt;
is it possible that the are running two instances of the DefaultISMLocking Object ?&lt;br/&gt;
As i can see there will be generated a instance in the WorkspaceInfo.doInitalize() Method&lt;br/&gt;
and one in the RepositoryImpl.createVersionManager() Method.&lt;br/&gt;
I think on the downgrade Method the active Thread will be set coming from the SharedItemStateManager hold by the Workspace&lt;br/&gt;
and the deadlock call comes from the VersionItemStateProvider.hasItemState and this call goes to the DefaultISMLocking Object that holds&lt;br/&gt;
the wrong active Thread.&lt;br/&gt;
i hope i have explained it that you can follow me ;-)&lt;br/&gt;
</comment>
                    <comment id="12569813" author="c_koell" created="Mon, 18 Feb 2008 09:11:45 +0000"  >as i mentioned before with the two instances, i think this is the problem&lt;br/&gt;
this is the call stack:&lt;br/&gt;
&lt;br/&gt;
DefaultISMLocking.acquireWriteLock(), CurrentThreadName: ORB.thread.pool : 2&lt;br/&gt;
DefaultISMLocking.acquireWriteLock().downgrade(), CurrentThreadName: ORB.thread.pool : 0&lt;br/&gt;
DefaultISMLocking.RWLock().setActiveWriter(ORB.thread.pool : 0), Instance: org.apache.jackrabbit.core.state.DefaultISMLocking$&lt;a href=&apos;mailto:RWLock@765fa6a6&apos;&gt;RWLock@765fa6a6&lt;/a&gt;, CurrentThreadName: ORB.thread.pool : 0&lt;br/&gt;
***** Different Thread access&lt;br/&gt;
***** Hold Thread in RWLock: ORB.thread.pool : 2&lt;br/&gt;
***** givenThread :ORB.thread.pool : 0&lt;br/&gt;
&lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
DefaultISMLocking.RWLock().allowReader() activeWriter: ORB.thread.pool : 2, Instance: org.apache.jackrabbit.core.state.DefaultISMLocking$&lt;a href=&apos;mailto:RWLock@10b626ba&apos;&gt;RWLock@10b626ba&lt;/a&gt;, CurrentThreadName: ORB.thread.pool : 0&lt;br/&gt;
&lt;br/&gt;
the downgrade is called on a other instance of the RWLock, &lt;br/&gt;
then the allowReader comes from a other thread an the hold activeWriter Thread in the RWLock is a different one.&lt;br/&gt;
i don&amp;#39;t know why there are two instances of the DefaultISMLocking Object.</comment>
                    <comment id="12572020" author="c_koell" created="Mon, 25 Feb 2008 07:25:06 +0000"  >can anyone tell me why there are two instances of the DefaultISMLocking Objects ?&lt;br/&gt;
This is the reason for my problem.&lt;br/&gt;
BR,&lt;br/&gt;
claus</comment>
                    <comment id="12572081" author="mreutegg" created="Mon, 25 Feb 2008 13:40:37 +0000"  >The second RWLock probably belongs to the DefaultISMLocking of the version storage.&lt;br/&gt;
&lt;br/&gt;
Do you perform versioning operations at the same time?</comment>
                    <comment id="12572096" author="c_koell" created="Mon, 25 Feb 2008 15:04:11 +0000"  >hi marcel,&lt;br/&gt;
no i don&amp;#39;t perform versioning operations.&lt;br/&gt;
i only try to add a node. and this is the only operation where the deadlock occurs.&lt;br/&gt;
please read my comment from 13/Feb/08 09:48 AM,&lt;br/&gt;
there i have hopefully eyplained the deadlock, hope you can follow me :-)&lt;br/&gt;
&lt;br/&gt;
The active writer will be changed in the DefaultISMLocking-Instance of the SharedItemStateManager.&lt;br/&gt;
The allowReader comes from the DefaultISMLocking-Instance hold by the VersionItemStateProvider and&lt;br/&gt;
in this Instance is the wrong Thread set.&lt;br/&gt;
&lt;br/&gt;
thanks lot&lt;br/&gt;
claus&lt;br/&gt;
</comment>
                    <comment id="12576899" author="c_koell" created="Mon, 10 Mar 2008 08:52:35 +0000"  >is there anybody out who can tell me why there are 2 instances of DefaultISMLocking Objects ?&lt;br/&gt;
we need xa in our environment and so this is a realy important issue for us.&lt;br/&gt;
thanks&lt;br/&gt;
claus</comment>
                    <comment id="12576914" author="mreutegg" created="Mon, 10 Mar 2008 09:30:55 +0000"  >The second locking object belongs to the version storage. If that lock has a active writer then your code uses versioning. Is one of your nodes mix:versionable?&lt;br/&gt;
&lt;br/&gt;
Did you also configure the ISMLocking in the repository.xml for version storage as well? </comment>
                    <comment id="12576929" author="c_koell" created="Mon, 10 Mar 2008 10:17:23 +0000"  >hi marcel,&lt;br/&gt;
i do not have configured a extra ISMLocking in my repository.xml file because&lt;br/&gt;
i have applied the patched code directly on the DefaultISMLocking Class&lt;br/&gt;
My node have only the mix:referenceable and mix:lockable types.&lt;br/&gt;
If i look into the last stacktrace i have added i see that the deadlock comes from the SharedItemStateManager.getItemState&lt;br/&gt;
This calls VersionItemStateProvider.hasItemState. &lt;br/&gt;
I do not know why this will be called on my node that has no mix:versionable as mixintype ?&lt;br/&gt;
&lt;br/&gt;
Anyway .. it tries to acquire a ReadLock with the DefaultISMLocking hold by versionstorage.&lt;br/&gt;
On the rwLock Object of that instance there was never called downgrade so the rwLock has a other Thread than&lt;br/&gt;
the rwLock Object of the DefaultISMLocking hold by the SharedItemStateManager.&lt;br/&gt;
&lt;br/&gt;
If we call rwLock.setActiveWriter(Thread.currentThread()) in the DefaultISMLocking we must call it on every instance of the&lt;br/&gt;
DefaultISMLocking with maybe a observation pattern ?&lt;br/&gt;
What do you think ?&lt;br/&gt;
&lt;br/&gt;
BR&lt;br/&gt;
claus</comment>
                    <comment id="12589412" author="c_koell" created="Wed, 16 Apr 2008 06:09:54 +0100"  >hi marcel,&lt;br/&gt;
yesterday i have tested again to find a solution for that issue and i have taken the newest&lt;br/&gt;
packages (core, common and rmi) and i don&amp;#39;t know why but your pactch works now fine.&lt;br/&gt;
the VersionItemStateprovider.hasItemState will not be called anymore so no deadlock occurs.&lt;br/&gt;
from my side it would be great if you can apply your patch to the trunk.&lt;br/&gt;
it will work till we dont use versionable nodes but this is no requirement for us ..&lt;br/&gt;
&lt;br/&gt;
thanks &lt;br/&gt;
claus&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12590423" author="mreutegg" created="Fri, 18 Apr 2008 13:38:13 +0100"  >Hi Claus,&lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s good news. however be warned, that there still might be an issue. I ran our daily integration test with the patched DefaultISMLocking class and some tests failed with an exception.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll have to further investigate what causes those errors, but once those are resolved I&amp;#39;ll commit the changes.&lt;br/&gt;
</comment>
                    <comment id="12592397" author="disown" created="Fri, 25 Apr 2008 15:52:52 +0100"  >Confirmed on jboss 4.2.2.GA using jdk6 and solaris10. The deadlock occurs directly during deploy, but was not present using jdk5. </comment>
                    <comment id="12594578" author="c_koell" created="Tue, 6 May 2008 14:18:26 +0100"  >hi marcel,&lt;br/&gt;
&lt;br/&gt;
do you have any news about the errors ?&lt;br/&gt;
&lt;br/&gt;
thanks&lt;br/&gt;
claus</comment>
                    <comment id="12594890" author="mreutegg" created="Wed, 7 May 2008 13:25:06 +0100"  >Not yet. I was on vacation and did not have time to work on this issue.</comment>
                    <comment id="12608345" author="c_koell" created="Thu, 26 Jun 2008 09:56:14 +0100"  >hi marcel,&lt;br/&gt;
&lt;br/&gt;
as written before your patch works fine but i found that in some really rarely situations (that i can not reproduce) a deadlock has still occured.&lt;br/&gt;
I have modified your patch as follows to find out when a readlock will be aquired with a wrong active_writer&lt;br/&gt;
&lt;br/&gt;
public Sync readLock() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (activeWriter_ != null &amp;amp;&amp;amp; activeWriter_ != Thread.currentThread()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Jackrabbit - PatchedDefaultISMLocking: ActiveWriter Thread not the same for readLock() ! ActiveWriter is &amp;quot; + activeWriter_.getName() &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ &amp;quot;CurrentThread is &amp;quot; + Thread.currentThread().getName());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Throwable throwable = new Throwable();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throwable.fillInStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throwable.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;activeWriter_ = Thread.currentThread();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return super.readLock();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
i know to set the activewriter to the current Thread is no good idea but i want to know where the issues comes from and my application should not&lt;br/&gt;
run into a deadlock.&lt;br/&gt;
&lt;br/&gt;
And here is the stacktrace&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R java.lang.Throwable&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.PatchedDefaultISMLocking$RWLock.readLock(PatchedDefaultISMLocking.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.PatchedDefaultISMLocking.acquireReadLock(PatchedDefaultISMLocking.java(Inlined Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireReadLock(SharedItemStateManager.java(Inlined Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.ChangeLog.undo(ChangeLog.java:330)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.state.XAItemStateManager.rollback(XAItemStateManager.java:182)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.TransactionContext.rollback(TransactionContext.java:224)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.core.XASessionImpl.rollback(XASessionImpl.java:352)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at org.apache.jackrabbit.jca.TransactionBoundXAResource.rollback(TransactionBoundXAResource.java:76)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ejs.j2c.XATransactionWrapper.rollback(XATransactionWrapper.java:1148)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTA.JTAXAResourceImpl.rollback(JTAXAResourceImpl.java:347)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTA.RegisteredResources.distributeOutcome(RegisteredResources.java:1085)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTA.RegisteredResources.distributeRollback(RegisteredResources.java:1908)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTA.TransactionImpl.internalRollback(TransactionImpl.java:1511)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTS.TransactionWrapper.rollback(TransactionWrapper.java:591)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTS.WSCoordinatorImpl.rollback(WSCoordinatorImpl.java:163)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.Transaction.JTS._WSCoordinatorImplBase._invoke(Unknown Source)&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.CORBA.iiop.ServerDelegate.dispatchInvokeHandler(ServerDelegate.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.CORBA.iiop.ServerDelegate.dispatch(ServerDelegate.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.rmi.iiop.ORB.process(ORB.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.CORBA.iiop.ORB.process(ORB.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.rmi.iiop.Connection.doWork(Connection.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.rmi.iiop.WorkUnitImpl.doWork(WorkUnitImpl.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ejs.oa.pool.PooledThread.run(ThreadPool.java(Compiled Code))&lt;br/&gt;
[25.06.08 18:13:36:019 CEST] 1ea9f0d9 SystemErr     R 	at com.ibm.ws.util.ThreadPool$Worker.run(ThreadPool.java:937)&lt;br/&gt;
&lt;br/&gt;
As i can see Websphere has a ThreadPool for the XA Communication and so it is not guaranteed that the same thread that holds the writelock comes to get a redlock.&lt;br/&gt;
I don&amp;#39;t know how to solve that problem&lt;br/&gt;
&lt;br/&gt;
BR,&lt;br/&gt;
claus</comment>
                    <comment id="12630980" author="rsauer" created="Mon, 15 Sep 2008 11:33:17 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
I got the same issue on Tomcat with Jencks when using ...rmi.ClientXASession. The prepare and commit requests seem to arrive sometimes at different threads, causing a deadlock.&lt;br/&gt;
&lt;br/&gt;
I understand that RMI gives no guarantee on which thread requests are served, so I fully agree that locking should not be thread based.&lt;br/&gt;
&lt;br/&gt;
Btw., I tested with the attached PatchedDefaultISMLocking class and I still get errors, although no deadlocks. I get a stale item state exception on commit after deleting a node having versions. So this does not seem to be a solution currently.&lt;br/&gt;
&lt;br/&gt;
Robert</comment>
                    <comment id="12631036" author="c_koell" created="Mon, 15 Sep 2008 15:33:05 +0100"  >hi robert,&lt;br/&gt;
&lt;br/&gt;
i think the patched ISM Locking Class has nothing to do with the stale item exception you get now.&lt;br/&gt;
I have also found a bug in the LockManager with Transactions see &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1702&quot; title=&quot;Unable to create/lock Node in one Transaction&quot;&gt;&lt;strike&gt;JCR-1702&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
Maybe you test the attached patch and share your experiences ...&lt;br/&gt;
&lt;br/&gt;
thanks&lt;br/&gt;
claus</comment>
                    <comment id="12633166" author="c_koell" created="Mon, 22 Sep 2008 09:12:51 +0100"  >I have implemented a extension to the current Locking Strategy that binds the lock to thread. &lt;br/&gt;
Now the lock will not only be bound to the thread but also bound with the Xid to a ThreadLocal Object for the current transaction&lt;br/&gt;
This patch implements also the code for &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1702&quot; title=&quot;Unable to create/lock Node in one Transaction&quot;&gt;&lt;strike&gt;JCR-1702&lt;/strike&gt;&lt;/a&gt; patch&lt;br/&gt;
</comment>
                    <comment id="12633167" author="c_koell" created="Mon, 22 Sep 2008 09:19:15 +0100"  >aahh sorry  with this patch the timeout of a xasession will be set to 1200 instead of 5.&lt;br/&gt;
i had problems that my container (websphere) does&amp;#39;nt set the configured timeout through the jca interfaces</comment>
                    <comment id="12640968" author="c_koell" created="Mon, 20 Oct 2008 11:01:15 +0100"  >Valid patch against current trunk</comment>
                    <comment id="12663747" author="c_koell" created="Wed, 14 Jan 2009 14:12:37 +0000"  >Committed in revision 734400 (trunk).</comment>
                    <comment id="12672620" author="jukkaz" created="Wed, 11 Feb 2009 13:12:12 +0000"  >Good stuff! Merged to the 1.5 branch in revision 743318.</comment>
                </comments>
                    <attachments>
                    <attachment id="12373677" name="javacore.20080121.132210.2524.txt" size="895731" author="c_koell" created="Mon, 21 Jan 2008 13:35:09 +0000" />
                    <attachment id="12373676" name="lock_output.txt" size="35264" author="c_koell" created="Mon, 21 Jan 2008 13:35:09 +0000" />
                    <attachment id="12375217" name="PatchedDefaultISMLocking_2.java" size="3793" author="c_koell" created="Mon, 11 Feb 2008 11:57:33 +0000" />
                    <attachment id="12374969" name="PatchedDefaultISMLocking.java" size="3736" author="mreutegg" created="Thu, 7 Feb 2008 14:02:15 +0000" />
                    <attachment id="12375216" name="Stacktrace.txt" size="4792" author="c_koell" created="Mon, 11 Feb 2008 11:57:32 +0000" />
                    <attachment id="12392465" name="xa_patch.txt" size="11411" author="c_koell" created="Mon, 20 Oct 2008 11:01:15 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 22 Jan 2008 09:48:22 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78594</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189796</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>