<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:46:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2542/JCR-2542.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2542] spi2dav: EventFilters not respected</title>
                <link>https://issues.apache.org/jira/browse/JCR-2542</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>i have the impression that the event filter passed to the event subscription in spi2dav is not (or not properly) respected.&lt;br/&gt;
&lt;br/&gt;
marcel, is there a specific reason that you always pass the static SubscriptionInfo constant (no node type filter, noLocal false) to the SubscribeMethod&lt;br/&gt;
in spi2dav/RepositoryServiceImpl#createSubscription ?&lt;br/&gt;
&lt;br/&gt;
i guess this is the reason for the failure of&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNodeType(org.apache.jackrabbit.test.api.observation.AddEventListenerTest)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;testNoLocalTrue(org.apache.jackrabbit.test.api.observation.AddEventListenerTest)&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12458109">JCR-2542</key>
            <summary>spi2dav: EventFilters not respected</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="reschke">Julian Reschke</assignee>
                                <reporter username="anchela">angela</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Mar 2010 11:04:29 +0000</created>
                <updated>Tue, 6 Dec 2011 14:47:11 +0000</updated>
                    <resolved>Mon, 21 Nov 2011 15:04:10 +0000</resolved>
                                            <fixVersion>2.3.4</fixVersion>
                                <component>jackrabbit-spi2dav</component>
                <component>JCR 2.0</component>
                <component>observation</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13146371" author="reschke" created="Tue, 8 Nov 2011 15:59:33 +0000"  >Q: is it even *possible* to get the noLocal filter working over remoting? Doesn&amp;#39;t every HTTP request, including the POLL request, obtain a new server session?</comment>
                    <comment id="13147727" author="reschke" created="Thu, 10 Nov 2011 14:53:44 +0000"  >OK, the main issue here seems to be that our event serialization doesn&amp;#39;t carry the information from Event.getPrimaryNodeTypeName() and Event.getMixinTypeNames(). Fixing this first...</comment>
                    <comment id="13147734" author="reschke" created="Thu, 10 Nov 2011 14:59:06 +0000"  >&amp;gt; OK, the main issue here seems to be that our event serialization doesn&amp;#39;t carry the information from Event.getPrimaryNodeTypeName() and Event.getMixinTypeNames(). Fixing this first... &lt;br/&gt;
&lt;br/&gt;
But then, there are on SPI&amp;#39;s Event, not JCR&amp;#39;s Event.</comment>
                    <comment id="13147823" author="reschke" created="Thu, 10 Nov 2011 17:06:34 +0000"  >Summary, after reading lots of code, scratching my head, and conferencing with&lt;br/&gt;
Angela:&lt;br/&gt;
&lt;br/&gt;
JCR2SPI tries to minimize the amount of concurrent subscriptions on the SPI&lt;br/&gt;
level (which translate to HTTP SUBSCRIBE/POLL/UNSUBSCRIBE operations over&lt;br/&gt;
SPI2DAV).&lt;br/&gt;
&lt;br/&gt;
It does this by creating a single subscription, and potentially changing the&lt;br/&gt;
subscription information when needed. The incoming events are then distributed&lt;br/&gt;
among the local event listeners according to their filters.&lt;br/&gt;
&lt;br/&gt;
This does work for filters that depend on UUIDs or paths, because this is&lt;br/&gt;
information that is part of the JCR events being generated, and consequently&lt;br/&gt;
can be filtered when received.&lt;br/&gt;
&lt;br/&gt;
It does not work for things missing from the JCR event API, such as nodetype&lt;br/&gt;
information or the isLocal flag.&lt;br/&gt;
&lt;br/&gt;
Or rephrasing this in terms of interfaces: the SPI Event interface provides&lt;br/&gt;
more information than we can trivially extract from a (serialized) JCR&lt;br/&gt;
event.&lt;br/&gt;
&lt;br/&gt;
Approaches to fix this:&lt;br/&gt;
&lt;br/&gt;
1) Do not rely on this SPI feature in JCR2SPI. Downside: observation gets&lt;br/&gt;
more expensive than needed for SPI implementations that do support the&lt;br/&gt;
feature.&lt;br/&gt;
&lt;br/&gt;
1b) Make the fact that the SPI Events do not have the required functionality&lt;br/&gt;
discoverable and have two different code paths then.&lt;br/&gt;
&lt;br/&gt;
2) Fix the SPI implementation, here: SPI2DAV and the Jackrabbit server. If we&lt;br/&gt;
could generate the required information on the server, extending SPI2DAV would&lt;br/&gt;
be trivial. However, this is hard because over in JCR land, the information we&lt;br/&gt;
need is not associated with the event, but the listener.&lt;br/&gt;
&lt;br/&gt;
Thought experiment: we could have two listeners on the server, one for noLocal&lt;br/&gt;
= true, one for noLocal = false. Inspecting the events reported to both&lt;br/&gt;
listeners in theory would allow us to decide the type of the event (although&lt;br/&gt;
it will be tricky to match events from both listeners as we don&amp;#39;t have a unique&lt;br/&gt;
event id).&lt;br/&gt;
&lt;br/&gt;
The same could be done for listening for specific node types, but of course&lt;br/&gt;
it would even be harder.&lt;br/&gt;
&lt;br/&gt;
2b) Alternatively, on the server, we could try to extract more information from&lt;br/&gt;
events when we know the specific implementation class (or actually define&lt;br/&gt;
an extension interface that provides us with what we want).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13148534" author="reschke" created="Fri, 11 Nov 2011 15:28:21 +0000"  >Update:&lt;br/&gt;
&lt;br/&gt;
I tried to implement the isLocal flag as extension in the events returned by the POLL method by comparing the session ID with the session associated with the event (as e&amp;#xB4;found in the EventImpl&amp;#39;s EvenState).&lt;br/&gt;
&lt;br/&gt;
This doesn&amp;#39;t help, as we&amp;#39;re comparing server sessions, which have a different lifetime from those on the client. This could be made working by implementing complete session affinity (one to one mapping between SPI session and server session), or by pickybacking SPI session information to the JCR sessions so that it can be rediscovered in the event state.&lt;br/&gt;
&lt;br/&gt;
The former sounds like a really bad idea just to make filtering on onLocal work.&lt;br/&gt;
&lt;br/&gt;
The latter could be done in a similar way to JCR user data (extra request header, with the data attached to the session object maybe as attribute), or even by piggybacking the information to the user data.&lt;br/&gt;
</comment>
                    <comment id="13148617" author="reschke" created="Fri, 11 Nov 2011 17:52:59 +0000"  >Update:&lt;br/&gt;
&lt;br/&gt;
added getPrimaryNodeTypeName to JackrabbitEvent, added it to the POLL result, added support in spi2dav; node type based filters seem to be happy now. &lt;br/&gt;
&lt;br/&gt;
TODO: add mixin types; error handling, decide where to put the extension interface (Angela: jcr-server currently *does* have a dependency on -core)</comment>
                    <comment id="13148638" author="reschke" created="Fri, 11 Nov 2011 18:18:49 +0000"  >Rough patch for discussion (this fixes the node type filtering)</comment>
                    <comment id="13149579" author="reschke" created="Mon, 14 Nov 2011 11:29:22 +0000"  >See also: &lt;a href=&quot;http://java.net/jira/browse/JSR_333-43&quot;&gt;http://java.net/jira/browse/JSR_333-43&lt;/a&gt;</comment>
                    <comment id="13149606" author="reschke" created="Mon, 14 Nov 2011 12:38:28 +0000"  >Updated draft patch (pom fixed, license and javadoc added)</comment>
                    <comment id="13149607" author="reschke" created="Mon, 14 Nov 2011 12:41:59 +0000"  >The proposed patch fixes the problem for filtering by node type.&lt;br/&gt;
&lt;br/&gt;
Issues:&lt;br/&gt;
&lt;br/&gt;
- are we ok with using an extension interface?&lt;br/&gt;
- if the server does not support the extension we really should fail early (yet another extension interface)&lt;br/&gt;
&lt;br/&gt;
Unsolved:&lt;br/&gt;
&lt;br/&gt;
. filtering by &amp;quot;noLocal&amp;quot;, which probably requires a different type of solution</comment>
                    <comment id="13149779" author="reschke" created="Mon, 14 Nov 2011 17:46:39 +0000"  >Variant that uses getInfo() as discussed with Marcel.&lt;br/&gt;
&lt;br/&gt;
Now the bad news: this fails JCR API tests that insist on getInfo not returning additional information (rightfully, I believe).</comment>
                    <comment id="13150513" author="reschke" created="Tue, 15 Nov 2011 14:18:37 +0000"  >r1202201: Added the previously discussed extension interface (in spi-commons) and use it to get the node types over the wire.</comment>
                    <comment id="13150564" author="reschke" created="Tue, 15 Nov 2011 15:48:35 +0000"  >Update on remaining issues:&lt;br/&gt;
&lt;br/&gt;
(1) When creating the subscription, it would be good if we could check that the remote server supports the extension added in r1202201. Custom repository descriptor?&lt;br/&gt;
&lt;br/&gt;
(2) Filtering by noNocal&lt;br/&gt;
&lt;br/&gt;
This is hard, as there&amp;#39;s no one-to-one mapping between SPI Session(Info) and the JCR Sessions.&lt;br/&gt;
&lt;br/&gt;
Proposal (I):&lt;br/&gt;
&lt;br/&gt;
a) Extend the JCR Event with a method that answers the question: &amp;quot;is this an event for Session x&amp;quot;? Technically this is simple as the EventState carries that information, we just need to discuss the best way to expose this.&lt;br/&gt;
&lt;br/&gt;
b) Let every SessionInfo create a unique identifier and send that one along with each request; if we don&amp;#39;t want to mint extension headers or re-use extension headers that we have we could use the Link header again (as done for UserData)&lt;br/&gt;
&lt;br/&gt;
c) Let the JCR server collect a mapping from SPI session identifiers to JCR sessions, so that it can the calculate and return a isLocal flag in the POLL response&lt;br/&gt;
&lt;br/&gt;
What&amp;#39;s ugly is that this prevents us from re-using the same JCR session for different SPI sessions (is this a problem?), and that it&amp;#39;s not clear how long the mapping described in c) needs to be maintained.&lt;br/&gt;
&lt;br/&gt;
An alternate proposal (II)  would be to piggyback the information to the UserData, which of course is ugly in that information will show up as user data which is not. A variant of this (III) would be to extend ObservationManager and Events with a mechanism similar to UserData, but not interfering with it.&lt;br/&gt;
&lt;br/&gt;
Feedback appreciated...</comment>
                    <comment id="13150595" author="reschke" created="Tue, 15 Nov 2011 16:42:42 +0000"  >Proposed patch for feature discovery through repository descriptor.</comment>
                    <comment id="13151116" author="reschke" created="Wed, 16 Nov 2011 10:05:39 +0000"  >Chatted with Jukka. Summary:&lt;br/&gt;
&lt;br/&gt;
- new interfaces, not extending but adding to JCR, for these kinds of extensions ok&lt;br/&gt;
- implement noLocal by attaching the client session identifier (a unique string) to the JCR session on the server (Session attributes, needs extension to set)&lt;br/&gt;
- try to do feature discovery for remoting in the SUBSCRIBE response&lt;br/&gt;
</comment>
                    <comment id="13151418" author="reschke" created="Wed, 16 Nov 2011 18:51:17 +0000"  >Patch including:&lt;br/&gt;
&lt;br/&gt;
- spi.commons extension interface for Session extension&lt;br/&gt;
- noLocal flag support&lt;br/&gt;
- client sends session identifier so that POLL can compute the flag&lt;br/&gt;
- SUBSCRIBE returns flags indicating extension features&lt;br/&gt;
&lt;br/&gt;
The one thing I&amp;#39;m unhappy with is the JCR-server-side discovery of event extensions; this needs to happen before events are observed, for now I&amp;#39;m using  a custom repository descriptor</comment>
                    <comment id="13152031" author="reschke" created="Thu, 17 Nov 2011 12:50:42 +0000"  >Latest patch applied with r1203175; leavibg bug open for final tuning.</comment>
                </comments>
                    <attachments>
                    <attachment id="12503922" name="JCR-2542.diff" size="39145" author="reschke" created="Wed, 16 Nov 2011 18:51:17 +0000" />
                    <attachment id="12503606" name="JCR-2542.diff" size="13709" author="reschke" created="Mon, 14 Nov 2011 12:38:27 +0000" />
                    <attachment id="12503394" name="JCR-2542.diff" size="12897" author="reschke" created="Fri, 11 Nov 2011 18:18:49 +0000" />
                    <attachment id="12503765" name="JCR-2542-discovery.patch" size="3271" author="reschke" created="Tue, 15 Nov 2011 16:42:42 +0000" />
                    <attachment id="12503643" name="JCR-2542-getInfo.diff" size="12707" author="reschke" created="Mon, 14 Nov 2011 17:46:39 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Nov 2011 15:59:33 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>36375</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191584</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>