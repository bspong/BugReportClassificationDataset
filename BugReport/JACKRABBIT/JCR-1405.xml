<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:58:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1405/JCR-1405.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1405] SPI: Introduce NodeInfo.getChildInfos()</title>
                <link>https://issues.apache.org/jira/browse/JCR-1405</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Improvement suggested by Marcel:&lt;br/&gt;
&lt;br/&gt;
ChildInfo is basically a stripped down NodeInfo. With little effort it would even be possible to have NodeInfo extends ChildInfo. Not sure how useful that is, but since we don&amp;#39;t have that inheritance in code and at the same time nearly a 100% overlap it makes me suspicious.&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s another idea:&lt;br/&gt;
&lt;br/&gt;
introduce a method ChildInfo[] NodeInfo.getChildInfos(). The method either returns:&lt;br/&gt;
&lt;br/&gt;
- all child infos, which also gives the correct number of child nodes. this may also mean that an empty array is returned to indicate there are no child nodes.&lt;br/&gt;
- null, to indicate that there are *lots* of child nodes and the method RepositoryService.getChildInfos() with the iterator should be used. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12389209">JCR-1405</key>
            <summary>SPI: Introduce NodeInfo.getChildInfos()</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="anchela">angela</assignee>
                                <reporter username="anchela">angela</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 Feb 2008 13:10:42 +0000</created>
                <updated>Mon, 8 Dec 2008 11:08:00 +0000</updated>
                    <resolved>Fri, 9 May 2008 15:43:52 +0100</resolved>
                                            <fixVersion>1.5</fixVersion>
                                <component>jackrabbit-spi</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12571041" author="mduerig" created="Thu, 21 Feb 2008 13:43:06 +0000"  >I&amp;#39;m in favor of Angela&amp;#39;s suggestion. I would generalize the meaning of null returned by ChildInfo[] NodeInfo.getChildInfos() to &amp;#39;ask me later&amp;#39;. That is, whenever ChildInfo[] NodeInfo.getChildInfos() returns null, the spi implementation cannot or for some reason deliberately does not want to return the ChildInfos. The client would then have to collect the ChildInfos later by a call to RepositoryService.getChildInfos. &lt;br/&gt;
&lt;br/&gt;
Also I think the client should use the ChildInfos returned by NodeInfo.getChildInfos() whenever possible. It should only call RepositoryService.getChildInfos when absolutely necessary.&lt;br/&gt;
</comment>
                    <comment id="12571048" author="anchela" created="Thu, 21 Feb 2008 14:08:42 +0000"  >&amp;gt; I&amp;#39;m in favor of Angela&amp;#39;s suggestion&lt;br/&gt;
&lt;br/&gt;
credit is due to marcel.&lt;br/&gt;
and i would support the more general interpretation of the null return value suggested by michael.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12571356" author="anchela" created="Fri, 22 Feb 2008 11:00:27 +0000"  >initial draft for NodeInfo.getChildInfos().&lt;br/&gt;
&lt;br/&gt;
differences compared to the initial suggestion&lt;br/&gt;
&lt;br/&gt;
1) Don&amp;#39;t let NodeInfo extend ChildInfo&lt;br/&gt;
&lt;br/&gt;
I looked at this as well. But the only &amp;#39;overlapping&amp;#39; method that could be&lt;br/&gt;
removed from NodeInfo would be &amp;#39;getIndex()&amp;#39;.&lt;br/&gt;
After thinking about it again, i came to the conclusion that &amp;#39;ChildInfo&amp;#39; actually&lt;br/&gt;
has a different meaning that ItemInfo... and eventually it&amp;#39;s name is wrong or there would have been much better ways to solve the issue, that led to ChildInfo. Still what it actually is from my point of view is: A relative of the NodeId. The problem with NodeId: it may not reveal the name and the index of a Node and can therefore not be used for hierarchical purposes.&lt;br/&gt;
&lt;br/&gt;
2) Return-Value: Iterator.&lt;br/&gt;
&lt;br/&gt;
For consistency reasons i changed the return value from array to iterator.&lt;br/&gt;
All of the following methods (that could be compared to the new one)&lt;br/&gt;
- NodeInfo.getPropertyIds&lt;br/&gt;
- RepositoryService.getChildInfos&lt;br/&gt;
- RepositoryService.getItemInfos&lt;br/&gt;
return an Iterator.&lt;br/&gt;
While thinking about it, i remembered that we once decided that we&amp;#39;d rather user iterators for anything that most certainly will contain more than just a couple (more or less limited amount) of entries.&lt;br/&gt;
&lt;br/&gt;
I adjusted spi-commons, spi2jcr and jcr2spi. It compiles, tests passed but i didn&amp;#39;t have time to really test it or write a reasonable test-case.&lt;br/&gt;
&lt;br/&gt;
(i quickly had a look at the sandbox/spi as well... there it only affected spi2dav and the modifications were really trivial).&lt;br/&gt;
&lt;br/&gt;
please comment&lt;br/&gt;
angela&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="12571388" author="mduerig" created="Fri, 22 Feb 2008 12:52:17 +0000"  >+1 for using an iterator&lt;br/&gt;
+1 for the patch.&lt;br/&gt;
&lt;br/&gt;
There is a typo in the comment: &amp;quot;Return the all &amp;lt;code&amp;gt;ChildInfo&amp;lt;/code&amp;gt;&amp;quot;. </comment>
                    <comment id="12571428" author="reschke" created="Fri, 22 Feb 2008 14:52:11 +0000"  >Hm, no exceptions allowed?&lt;br/&gt;
</comment>
                    <comment id="12571430" author="anchela" created="Fri, 22 Feb 2008 14:57:08 +0000"  >none of the other methods allows exceptions...</comment>
                    <comment id="12571431" author="reschke" created="Fri, 22 Feb 2008 14:59:50 +0000"  >...which I think is a problem as well.&lt;br/&gt;
&lt;br/&gt;
In this case, the related method on RepositoryService *does* declare RepositoryException.&lt;br/&gt;
&lt;br/&gt;
So what am I supposed to do when internally an error occurs?&lt;br/&gt;
</comment>
                    <comment id="12571544" author="mreutegg" created="Fri, 22 Feb 2008 19:24:51 +0000"  >Julian wrote:&lt;br/&gt;
&amp;gt; So what am I supposed to do when internally an error occurs? &lt;br/&gt;
&lt;br/&gt;
I think you should not even create a NodeInfo in that case. IMO a NodeInfo should be self contained and shouldn&amp;#39;t hold resources tied to the underlying repository. &lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s actually also a reason why I don&amp;#39;t like changing the return values to an Iterator ;)&lt;br/&gt;
Whenever Iterators are returned it implies that an implementation is allowed (or even encouraged) to lazily retrieve the items. This lazy approach however has some issues. See also JSR 283 mailing list thread &amp;#39;I whish there was ....&amp;#39;.&lt;br/&gt;
&lt;br/&gt;
This new method is not intended to return large amounts of ChildInfos that are lazily instanciated and should therefore use an array.</comment>
                    <comment id="12571581" author="reschke" created="Fri, 22 Feb 2008 20:27:39 +0000"  >&amp;gt; I think you should not even create a NodeInfo in that case. IMO a NodeInfo should be self contained and shouldn&amp;#39;t hold resources tied to the underlying repository.&lt;br/&gt;
&lt;br/&gt;
I disagree with that. &lt;br/&gt;
&lt;br/&gt;
But anyway, even if it did not an error could occur while building the list of children. I&amp;#39;m really not sure why we&amp;#39;re pretending that things always will work when they may not.&lt;br/&gt;
&lt;br/&gt;
There may be other problems like these (where I currently have to throw unchecked exceptions), will have to check for that.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; That&amp;#39;s actually also a reason why I don&amp;#39;t like changing the return values to an Iterator ;)&lt;br/&gt;
&amp;gt; Whenever Iterators are returned it implies that an implementation is allowed (or even encouraged) to lazily retrieve the items. This lazy approach however has some issues. See also JSR 283 mailing list thread &amp;#39;I whish there was ....&amp;#39;.&lt;br/&gt;
&lt;br/&gt;
I think it&amp;#39;s a feature (to allow lazy construction); we just need to make sure we handle all cases well.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;gt; This new method is not intended to return large amounts of ChildInfos that are lazily instanciated and should therefore use an array.&lt;br/&gt;
&lt;br/&gt;
Sounds kind of arbitrary to me. What is &amp;quot;large&amp;quot;? And, if my store doesn&amp;#39;t know beforehand (which one does?), do we really want the SPI impl to return null, just for JCR2PI to asking for the same information again through a different method call?&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12571713" author="anchela" created="Sat, 23 Feb 2008 09:49:16 +0000"  >julian:&lt;br/&gt;
&lt;br/&gt;
if you cant determine the childinfos upon creating the nodeinfo you should (as stated by the javadoc) simply return null,&lt;br/&gt;
if you cant build the nodeinfo due to some exceptional situation you should throw upon getNodeInfo or getItemInfos&lt;br/&gt;
respectively.&lt;br/&gt;
&lt;br/&gt;
the exception with repositoryservice getChildInfo means the same as the one defined with getNodeInfo or getItemInfos:&lt;br/&gt;
- the target node does not exist (any more) in the persistent state&lt;br/&gt;
- the persistent layer cant be accessed or something similar.&lt;br/&gt;
&lt;br/&gt;
therefore i am with marcels explanation how nodeinfo should be created and work.&lt;br/&gt;
&lt;br/&gt;
in addition, if you decide to do some lazy loading of the childinfos upon NodeInfo.getChildInfos (or upon RepositoryService.getChildInfos) the exception from my point of view is not raised upon building the iterator but upon retrieving the next element.... and there you wont be able to throw repository exception either.&lt;br/&gt;
&lt;br/&gt;
regarding &amp;quot;large&amp;quot;:&lt;br/&gt;
this is just one obvious example what could be a reason for the implementation NOT to reveal&lt;br/&gt;
the child infos upon NodeInfo.getChildInfos. and the description mentions this as example.&lt;br/&gt;
that it states: if the impl is not willing.&lt;br/&gt;
&lt;br/&gt;
Not willing means that the SPI implementations decides upon internal rules whether the&lt;br/&gt;
childinfos are included or not. examples: the impl. decides&lt;br/&gt;
&lt;br/&gt;
- based on the internal structure of the persistent layer in general&lt;br/&gt;
- based the cost of retrieving childinfos (given the potential chance of never being asked for)&lt;br/&gt;
- based on the known characteristics of the target node: e.g. we have folder and files and other nodes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;and we assume that folders will be used for displaying the children so send it. for any other nodes we dont&lt;br/&gt;
- based on the simple amount of child nodes if we know that (dont calc if more than 14)&lt;br/&gt;
- based on a implementation specific configuration&lt;br/&gt;
&amp;nbsp;&amp;nbsp;that could include nodetypes, number of child nodes, day time, session.userId, random... whatever&lt;br/&gt;
&amp;nbsp;&amp;nbsp;you feel would be appropriate, reasonable or simply a good thing for your specific store.&lt;br/&gt;
&lt;br/&gt;
the last is pretty much what we discussed for the getItemInfos method for the batch read. we said&lt;br/&gt;
that we cant add a config to the spi interfaces and want to leave that to the impl because we would&lt;br/&gt;
not be able to find something that fits the needs for all potential implementations.&lt;br/&gt;
&lt;br/&gt;
if your store cant retrieve the child info you may&lt;br/&gt;
- create your reposervice with a config and leave the decision to someone else&lt;br/&gt;
- always calculate the child infos&lt;br/&gt;
- never calculate the child infos&lt;br/&gt;
- decide based on the characteristics of the requested node &lt;br/&gt;
-...&lt;br/&gt;
(see above)&lt;br/&gt;
&lt;br/&gt;
so. i am not in favor of adding exceptions to the new method... at least not for the reasons presented so far.&lt;br/&gt;
angela&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12590337" author="anchela" created="Fri, 18 Apr 2008 09:43:00 +0100"  >what&amp;#39;s the status here? can/should we extend the NodeInfo interface as suggested?</comment>
                    <comment id="12591972" author="mduerig" created="Thu, 24 Apr 2008 11:15:53 +0100"  >I&amp;#39;m in favour of the patch as it is. That is, add getChildInfos() to NodeInfo with the following semantics: If NodeInfo.getChildInfos() returns null, jcr2spi must call RepositoryService.getChildInfos() to determine the children of the current node. Otherwise jcr2spi must not (I can also live with &amp;#39;should not&amp;#39;) call RepositoryService.getChildInfos(). &lt;br/&gt;
&lt;br/&gt;
Separate calls to RepositoryService.getChildInfos() result in additional round-trips in cases where the persistence layer returns the children (infos) along with a node. </comment>
                    <comment id="12594981" author="mduerig" created="Wed, 7 May 2008 18:58:52 +0100"  >Patch updated to latest revision</comment>
                    <comment id="12594985" author="mduerig" created="Wed, 7 May 2008 19:09:46 +0100"  >I tested Angela&amp;#39;s initial patch and updated it to the latest revision.&lt;br/&gt;
&lt;br/&gt;
The patch works well. In may case it helps to cut down the number of round-trips to the back-end store significantly:&lt;br/&gt;
&lt;br/&gt;
In my test case including the ChildInfos within NodeInfo results in 4 calls to RepositoryService.getItemInfos() and in no calls to RepositoryService.getChildInfos() at all. Not including them results in the same 4 calls to RepositoryService.getItemInfos() and additionally in 15 calls to RepositoryService.getChildInfos().&lt;br/&gt;
&lt;br/&gt;
Since the patch does not change existing semantics (just return null for NodeInfo.getChildInfos) but on the other hand has the potential to vastly increase performance in some common case I&amp;#39;d very much like to see this patch applied.</comment>
                    <comment id="12595181" author="anchela" created="Thu, 8 May 2008 11:04:27 +0100"  >ok.... if nobody objects within the next couple of days i will apply michaels patch.&lt;br/&gt;
angela</comment>
                    <comment id="12595201" author="reschke" created="Thu, 8 May 2008 13:16:06 +0100"  >If we have evidence that it actually helps in some cases, +.5.&lt;br/&gt;
&lt;br/&gt;
That being said, I think it would be great if we would base these things on reliable test data; that&amp;#39;s why I started the jcr-benchmark project after all.&lt;br/&gt;
</comment>
                </comments>
                    <attachments>
                    <attachment id="12381610" name="JCR-1405b.patch" size="17240" author="mduerig" created="Wed, 7 May 2008 18:58:52 +0100" />
                    <attachment id="12376222" name="JCR-1405.patch" size="17177" author="anchela" created="Fri, 22 Feb 2008 11:00:27 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 21 Feb 2008 13:43:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142679</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192368</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>