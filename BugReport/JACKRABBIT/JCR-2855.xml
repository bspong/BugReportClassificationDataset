<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 06:00:59 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2855/JCR-2855.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2855] Writers blocked forever when waiting on update operations  </title>
                <link>https://issues.apache.org/jira/browse/JCR-2855</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Thread 1 calls Session.save() and has a write lock.&lt;br/&gt;
&lt;br/&gt;
Thread 2 is in XA prepare() and is waiting on thread 1 in FineGrainedISMLocking.acquireWriteLock().&lt;br/&gt;
&lt;br/&gt;
Thread 1&amp;#39;s save calls SharedItemStateManager.Update#end() and performs a write-lock downgrade to a read-lock, then (at the end of Update#end()) it calls readLock.release(). FineGrainedISMLocking.ReadLockImpl#release thinks activeWriterId is of the current transation and does not notify any writers (activeWriterId is not being reset on downgrade in what seems to be a related to &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2753&quot; title=&quot;Deadlock in DefaultISMLocking&quot;&gt;&lt;strike&gt;JCR-2753&lt;/strike&gt;&lt;/a&gt;).&lt;br/&gt;
Thread 1 waits forever.</description>
                <environment></environment>
            <key id="12494124">JCR-2855</key>
            <summary>Writers blocked forever when waiting on update operations  </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="yoav">Yoav Landman</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Dec 2010 15:19:08 +0000</created>
                <updated>Thu, 17 Feb 2011 15:49:54 +0000</updated>
                    <resolved>Tue, 1 Feb 2011 15:20:34 +0000</resolved>
                            <version>2.1.3</version>
                <version>2.2.1</version>
                                <fixVersion>2.2.4</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12977877" author="jukkaz" created="Wed, 5 Jan 2011 17:52:59 +0000"  >You tested this with 2.1.3, right? This seems related to &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2820&quot; title=&quot;FineGrainedISMLocking problems&quot;&gt;&lt;strike&gt;JCR-2820&lt;/strike&gt;&lt;/a&gt;, but is probably a slightly different problem since &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2820&quot; title=&quot;FineGrainedISMLocking problems&quot;&gt;&lt;strike&gt;JCR-2820&lt;/strike&gt;&lt;/a&gt; is already fixed in 2.1.3.&lt;br/&gt;
&lt;br/&gt;
Can you still reproduce the problem with 2.2.x? If you can, please post a thread dump to make it easier to analyze the problem.</comment>
                    <comment id="12987845" author="yoav" created="Fri, 28 Jan 2011 00:11:15 +0000"  >I am seeing a similar behavior with 2.2.1 (took me a while to get to upgrading for testing this again).&lt;br/&gt;
A thread (thread 1 from my other comment) is blocked in org.apache.jackrabbit.core.state.FineGrainedISMLocking.acquireWriteLock (FineGrainedISMLocking.java:143). Debugging shows that the activeWriterId in this frame is actually of a (pooled) thread that is idle and no longer doing any jcr activity .&lt;br/&gt;
I am not closely familiar with the design, so perhaps I&amp;#39;m completely off, but it is unclear to me why writers that are downgraded to readers do not clean up the activeWriterId (in addition to nullifying the activeWriter - FineGrainedISMLocking.java:191). This seems to cause waiting writers not to get notified upon release of the read lock. Adding activeWriterId=null to WriteLockImpl.downgrade() seems to fix the problem for me while passing all the jackrabbit-core tests.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&apos;mailto:pool-2-thread-27@8112&apos;&gt;pool-2-thread-27@8112&lt;/a&gt;, prio=5, in group &amp;#39;main&amp;#39;, status: &amp;#39;waiting&amp;#39;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java.lang.Thread.State: WAITING&lt;br/&gt;
	  at java.lang.Object.wait(Object.java:-1)&lt;br/&gt;
	  at java.lang.Object.wait(Object.java:485)&lt;br/&gt;
	  at EDU.oswego.cs.dl.util.concurrent.Latch.acquire(Unknown Source:-1)&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.FineGrainedISMLocking.acquireWriteLock(FineGrainedISMLocking.java:143) &amp;lt;-- activeWriterId is of a thread that is no longer active&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireWriteLock(SharedItemStateManager.java:1850)&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.SharedItemStateManager.access$200(SharedItemStateManager.java:115)&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.begin(SharedItemStateManager.java:565)&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate(SharedItemStateManager.java:1459)&lt;br/&gt;
	  at org.apache.jackrabbit.core.state.XAItemStateManager.prepare(XAItemStateManager.java:163)&lt;br/&gt;
	  at org.apache.jackrabbit.core.TransactionContext.prepare(TransactionContext.java:157)&lt;br/&gt;
	  - locked &amp;lt;0x2041&amp;gt; (a org.apache.jackrabbit.core.TransactionContext)&lt;br/&gt;
	  at org.apache.jackrabbit.core.XASessionImpl.prepare(XASessionImpl.java:312)&lt;br/&gt;
	  at org.springframework.extensions.jcr.jackrabbit.support.JackRabbitUserTransaction.commit(JackRabbitUserTransaction.java:91)&lt;br/&gt;
	  at org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager.doCommit(LocalTransactionManager.java:189)&lt;br/&gt;
	  at org.artifactory.jcr.JcrTransactionManager.doCommit(JcrTransactionManager.java:75)&lt;br/&gt;
	  at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:754)&lt;br/&gt;
	  at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:723)&lt;br/&gt;
	  at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:393)&lt;br/&gt;
	  at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:120)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...</comment>
                    <comment id="12989238" author="jukkaz" created="Tue, 1 Feb 2011 15:20:34 +0000"  >Fixed in revision 1066059 by keeping count of active readers, and clearing the activeWriterId when all reader and writer locks have been released. Merged to the 2.2 branch in revision 1066061.&lt;br/&gt;
&lt;br/&gt;
The activeWriterId needs to be left non-null for a downgraded write lock so that a concurrent reader in the same transaction can re-enter the lock even if there is another writer waiting. See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2753&quot; title=&quot;Deadlock in DefaultISMLocking&quot;&gt;&lt;strike&gt;JCR-2753&lt;/strike&gt;&lt;/a&gt; for more background.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Jan 2011 17:52:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78149</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>231794</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>