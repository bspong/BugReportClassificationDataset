<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:58:44 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1259/JCR-1259.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1259] Utility code for filtering and packaging trees</title>
                <link>https://issues.apache.org/jira/browse/JCR-1259</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The attached zip contains new utility code for filtering and packaging trees in the repository.&lt;br/&gt;
&lt;br/&gt;
A tree can be traversed by the provided tree walker. During the traversal configurable filters can be applied. The filters have influence on the traversal, like skipping nodes or properties.&lt;br/&gt;
Included filters test the node name, node type etc. Custom filters are possible as well.&lt;br/&gt;
A tree walker notifies a tree walker listener (interface) whenever it traverses an item.&lt;br/&gt;
&lt;br/&gt;
The second utility code is able to package a whole tree (through a description) and export this in some way - the exporter is an interface and could e.g. be an exporter serializing the tree into a zip archiv etc.</description>
                <environment></environment>
            <key id="12384089">JCR-1259</key>
            <summary>Utility code for filtering and packaging trees</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="cziegeler">Carsten Ziegeler</reporter>
                        <labels>
                    </labels>
                <created>Thu, 6 Dec 2007 16:17:26 +0000</created>
                <updated>Wed, 9 Jan 2008 09:27:17 +0000</updated>
                    <resolved>Tue, 8 Jan 2008 20:47:59 +0000</resolved>
                                            <fixVersion>1.4</fixVersion>
                                <component>jackrabbit-jcr-commons</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12555356" author="jukkaz" created="Wed, 2 Jan 2008 18:17:10 +0000"  >Looks good, though I have some design comments:&lt;br/&gt;
&lt;br/&gt;
1) ItemFilter vs. Predicate&lt;br/&gt;
&lt;br/&gt;
How about using the Predicate interface from commons-collections instead of the custom ItemFilter interface? Using Predicate would give us things like ItemFilterList, MatchAllFilter, MatchNoneFilter, and much more for free as well as working nicely together with our existing Iterator adapters in o.a.j.commons.iterator.&lt;br/&gt;
&lt;br/&gt;
For example, with Predicate filters you could do something like this to select all child nodes with the given node type:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;NodeIterator iterator = new NodeIteratorAdapter(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new FilterIterator(node.getNodes(), new NodeTypePredicate(&amp;quot;my:type&amp;quot;)));&lt;br/&gt;
&lt;br/&gt;
Of course you&amp;#39;d need to use instanceof and type casts, but you&amp;#39;d need them in any case with ItemFilter as the interface takes Items, not Nodes or Properties. Also, you wouldn&amp;#39;t have the &amp;quot;depth&amp;quot; parameter, but I&amp;#39;m not sure it&amp;#39;s really needed (i.e. all the use cases I can think of could be solved with Item.getDepth()).&lt;br/&gt;
&lt;br/&gt;
2) TreeWalkerListener vs. ItemVisitor&lt;br/&gt;
&lt;br/&gt;
The JCR API already provides a nice implementation of the Visitor pattern in the ItemVisitor interface and the Item.accept(ItemVisitor) method. Instead of coming up with an alternative implementation in TreeWalker and TreeWalkerListener, I&amp;#39;d rather see a set of generic ItemVisitor classes like DepthFirstItemVisitor, DepthLimitedItemVisitor, BreadthFirstItemVisitor, FilterItemVisitor, etc. that could be combined together with each other and the above Predicate filters to implement functionality like in the proposed TreeWalker and in many other tree traversal cases.&lt;br/&gt;
</comment>
                    <comment id="12555530" author="cziegeler" created="Thu, 3 Jan 2008 10:48:23 +0000"  >Updated patch</comment>
                    <comment id="12555532" author="cziegeler" created="Thu, 3 Jan 2008 10:50:20 +0000"  >Hi, I&amp;#39;ve attached a new patch containing most of your changes:&lt;br/&gt;
&lt;br/&gt;
1) ItemFilter vs. Predicate&lt;br/&gt;
I replaced the ItemFilter with predicate&lt;br/&gt;
&lt;br/&gt;
2) TreeWalkerListener vs. ItemVisitor&lt;br/&gt;
I removed the tree walker stuff and added a new abstract item visitor implementation (like the TraversingItemVisitor) which does the same as the former tree walker. I think we can improve this implementation over time (like adding the visitors you&amp;#39;re suggestion).&lt;br/&gt;
&lt;br/&gt;
WDYT?</comment>
                    <comment id="12556524" author="cziegeler" created="Mon, 7 Jan 2008 09:28:40 +0000"  >Patch against jackrabbit trunk</comment>
                    <comment id="12557030" author="jukkaz" created="Tue, 8 Jan 2008 20:47:59 +0000"  >Committed the patch as-is in revision 610137. Merged to the 1.4 branch in revision 610140.</comment>
                    <comment id="12557193" author="cziegeler" created="Wed, 9 Jan 2008 09:27:17 +0000"  >Looks good - thanks!</comment>
                </comments>
                    <attachments>
                    <attachment id="12372446" name="jcr-commons-filtering2.zip" size="27166" author="cziegeler" created="Thu, 3 Jan 2008 10:48:23 +0000" />
                    <attachment id="12371148" name="jcr-commons-filtering.zip" size="32646" author="cziegeler" created="Thu, 6 Dec 2007 16:17:57 +0000" />
                    <attachment id="12372608" name="patch.txt" size="53228" author="cziegeler" created="Mon, 7 Jan 2008 09:28:40 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 2 Jan 2008 18:17:10 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142604</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192425</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>