<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:52:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-334/JCR-334.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-334] loadURI compile error with Maven 1.0.2</title>
                <link>https://issues.apache.org/jira/browse/JCR-334</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>As reported on the mailing list by Ashley Martens:&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
C:\apache\jackrabbit-contrib\nt-ns-util&amp;gt;maven&lt;br/&gt;
&amp;nbsp;__  __&lt;br/&gt;
|  \/  |__ _Apache__ ___&lt;br/&gt;
| |\/| / _` \ V / -_) &amp;#39; \  ~ intelligent projects ~&lt;br/&gt;
|_|  |_\__,_|\_/\___|_||_|  v. 1.0.2&lt;br/&gt;
&lt;br/&gt;
Attempting to download jackrabbit-1.0-SNAPSHOT.jar.&lt;br/&gt;
Artifact /org.apache.jackrabbit/jars/jackrabbit-1.0-SNAPSHOT.jar doesn&amp;#39;t exists in remote repository, but it exists locally&lt;br/&gt;
Attempting to download jackrabbit-commons-1.0-SNAPSHOT.jar.&lt;br/&gt;
Artifact /org.apache.jackrabbit/jars/jackrabbit-commons-1.0-SNAPSHOT.jar doesn&amp;#39;t exists in remote repository, but it exists locally&lt;br/&gt;
build:start:&lt;br/&gt;
&lt;br/&gt;
java:prepare-filesystem:&lt;br/&gt;
&lt;br/&gt;
java:compile:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;[echo] Compiling to C:\apache\jackrabbit-contrib\nt-ns-util/target/classes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;[javac] Compiling 1 source file to C:\apache\jackrabbit-contrib\nt-ns-util\target\classes&lt;br/&gt;
C:\apache\jackrabbit-contrib\nt-ns-util\src\main\java\org\apache\jackrabbit\util\nodetype\SchemaConverter.java:71: cannot resolve symbol&lt;br/&gt;
symbol  : method loadURI (java.lang.String)&lt;br/&gt;
location: class org.apache.xerces.impl.xs.XMLSchemaLoader&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;XSModel xsModel = loader.loadURI(uri);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;^&lt;br/&gt;
1 error&lt;br/&gt;
&lt;br/&gt;
BUILD FAILED&lt;br/&gt;
File...... C:\Documents and Settings\ashleym\.maven\cache\maven-java-plugin-1.5\plugin.jelly&lt;br/&gt;
Element... ant:javac&lt;br/&gt;
Line...... 63&lt;br/&gt;
Column.... 48&lt;br/&gt;
Compile failed; see the compiler error output for details.&lt;br/&gt;
Total time: 8 seconds&lt;br/&gt;
Finished at: Mon Jan 02 10:40:47 EST 2006&lt;br/&gt;
----&lt;br/&gt;
&lt;br/&gt;
Peeter Piegaze found out the problem:&lt;br/&gt;
&lt;br/&gt;
----&lt;br/&gt;
I was able to build it without a problem using maven-1.1-beta-2 and JDK 1.4.2.&lt;br/&gt;
&lt;br/&gt;
However, it sounds to me like in your case maven has set up its&lt;br/&gt;
on-build classpath so that it sees the older xerces-2.4.0.jar before&lt;br/&gt;
the new xerxesImpl.-2.6.2.jar. Maven seems to download the old&lt;br/&gt;
xerces-2.4.0 into its repository for internal use, while my code uses&lt;br/&gt;
the newer xerxesImpl-2.6.2.jar. The old jar overlaps class-wise with&lt;br/&gt;
the new one, but the new one implements the additional loadURI method&lt;br/&gt;
(among others).&lt;br/&gt;
&lt;br/&gt;
I am not sure exactly why your maven build process is looking in the&lt;br/&gt;
wrong jar. But that is what is doing, almost certainly.&lt;br/&gt;
----&lt;br/&gt;
</description>
                <environment>Maven 1.0.2</environment>
            <key id="12329892">JCR-334</key>
            <summary>loadURI compile error with Maven 1.0.2</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Mar 2006 13:59:52 +0000</created>
                <updated>Fri, 13 Oct 2006 17:07:31 +0100</updated>
                    <resolved>Tue, 7 Mar 2006 14:09:08 +0000</resolved>
                                            <fixVersion>1.0</fixVersion>
                                <component>maven</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12369165" author="jukkaz" created="Tue, 7 Mar 2006 14:09:08 +0000"  >Committed a workaround fix in revision 383794.&lt;br/&gt;
&lt;br/&gt;
The problem was, as pointed out by Peeter, that Maven 1.0.2 placed an older version (2.4.0) of the Xerces library in the class path before the version (2.6..2) used by Jackrabbit. The Xerces 2.4.0 version of the XMLSchemaLoader class does not have the loadURI() method available in the newer version.&lt;br/&gt;
&lt;br/&gt;
The committed fix works around this problem by using the DOM3 implementation registry mechanism to get a reference to a correct XMLSchemaLoader instance. A nice feature of this fix is that it also removes the direct dependency to the org.apache.xerces.impl package.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                                                                                <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142118</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191185</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>