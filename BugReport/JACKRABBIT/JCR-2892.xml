<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:58:53 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2892/JCR-2892.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2892] Large fetch sizes have potentially deleterious effects on VM memory requirements when using Oracle</title>
                <link>https://issues.apache.org/jira/browse/JCR-2892</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Since Release 10g, Oracle JDBC drivers use the fetch size to allocate buffers for caching row data.&lt;br/&gt;
cf. &lt;a href=&quot;http://www.oracle.com/technetwork/database/enterprise-edition/memory.pdf&quot;&gt;http://www.oracle.com/technetwork/database/enterprise-edition/memory.pdf&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
r1060431 hard-codes the fetch size for all ResultSet-returning statements to 10,000. This value has significant, potentially deleterious, effects on the heap space required for even moderately-sized repositories. For example, the BUNDLE table (from &amp;#39;oracle.ddl&amp;#39;) has two columns -- NODE_ID raw(16) and BUNDLE_DATA blob -- which require 16 b and 4 kb of buffer space, respectively. This requires a buffer of more than 40 mb [(16+4096) * 10000 = 41120000].&lt;br/&gt;
&lt;br/&gt;
If the issue described in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2832&quot; title=&quot;Crash when adding node to cluster with big journal on PSQL DB&quot;&gt;&lt;strike&gt;JCR-2832&lt;/strike&gt;&lt;/a&gt; is truly specific to PostgreSQL, I think its resolution should be moved to a PostgreSQL-specific ConnectionHelper subclass. Failing that, there should be a way to override this hard-coded value in OracleConnectionHelper.</description>
                <environment>Oracle 10g+</environment>
            <key id="12498698">JCR-2892</key>
            <summary>Large fetch sizes have potentially deleterious effects on VM memory requirements when using Oracle</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="c_koell">Claus K&#246;ll</assignee>
                                <reporter username="celkins">Christopher Elkins</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Feb 2011 23:04:11 +0000</created>
                <updated>Tue, 15 Nov 2011 13:50:31 +0000</updated>
                    <resolved>Thu, 13 Oct 2011 06:59:13 +0100</resolved>
                            <version>2.2.2</version>
                                <fixVersion>2.2.10</fixVersion>
                <fixVersion>2.3.2</fixVersion>
                                <component>jackrabbit-core</component>
                <component>sql</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12995209" author="tmueller" created="Wed, 16 Feb 2011 07:46:42 +0000"  >Do you have a reproducible test case where it uses a lot of memory or even runs out of memory?&lt;br/&gt;
&lt;br/&gt;
As far as I see, the persistence manager only ever selects one row at a time (using a where condition), except for the consistency check, where only the node id is selected. Therefore, I don&amp;#39;t see where it could use a lot of memory.&lt;br/&gt;
&lt;br/&gt;
Please re-open if you have a test case where it&amp;#39;s actually a problem, or if you can point to the code where many complete rows are selected.</comment>
                    <comment id="12995391" author="celkins" created="Wed, 16 Feb 2011 17:14:56 +0000"  >I do have a reproducible case in my application, but it is not something I can easily reduce to a test case suitable for attachment here.&lt;br/&gt;
&lt;br/&gt;
The actual number of rows returned is irrelevant. From the aforelinked PDF,&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Since the buffers are allocated when the SQL is parsed, the size of the buffers depends not on the actual size of the row data returned by the query, but on the maximum size possible for the row data. After the SQL is parsed, the type of every column is known and from that information the driver can compute the maximum amount of memory required to store each column. The driver also has the fetchSize, the number of rows to retrieve on each fetch. With the size of each column and the number of rows, the driver can compute the absolute maximum size of the data returned in a single fetch. That is the size of the buffers.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
The specific context is the same as that of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2832&quot; title=&quot;Crash when adding node to cluster with big journal on PSQL DB&quot;&gt;&lt;strike&gt;JCR-2832&lt;/strike&gt;&lt;/a&gt;, adding a new node to a cluster. However, any statement that returns a BLOB column given the current fetch size of 10,000 is going to create large buffers.</comment>
                    <comment id="12995726" author="tmueller" created="Thu, 17 Feb 2011 08:45:53 +0000"  >Wow, I would never have thought the Oracle driver actually allocates the memory... sounds like a really bad idea to do nowadays, but well this is Oracle. Anyway, if you do have a failing test case, then of course the fetch size needs to be changed.</comment>
                    <comment id="13095306" author="dfghi" created="Thu, 1 Sep 2011 15:12:16 +0100"  >I have the same problem, 10000 in fetch size is causing out of memory, even jackrabbit version 2.2.8.&lt;br/&gt;
In my case it seems to be triggered by clustering configuration, because probably that will return more than a single row, and in this case oracle will allocate all the necessary ram for about 10000 rows.&lt;br/&gt;
&lt;br/&gt;
You can try with Oracle 10 (XE edition also causes the problem), driver 10.2.0.4 (or 10.2.0.5), default java xms size (32 bit version, not 64, on Windows platform) and clustering configured. The simple existence of clustering causes the crash in my case, you may want to save a few nodes to force something in the clustering tables.&lt;br/&gt;
&lt;br/&gt;
Anyway, that size of fetch size is dangerous. If it was set only to limit postgresql allocation and you are sure that the average query will return a single record, you should hardcode it to 10... I tried that the application will start correctly with a value of 10 and 100 but not with 1000 or above.</comment>
                    <comment id="13095675" author="chesterm8" created="Fri, 2 Sep 2011 00:35:01 +0100"  >I am also experiencing this issue, and am working on a patch that will add the ability to specify the fetch size to the configuration options of the relevant classes, with the default being 10,000.</comment>
                    <comment id="13097151" author="manuel.molaschi" created="Mon, 5 Sep 2011 15:07:39 +0100"  >We have a different problem with the same cause... We experience a big performance loss on an app built on Magnolia CMS and starting on Tomcat (configured with xmx at 1024m)&lt;br/&gt;
After a long investigation we assumed that this behaviour was caused by jvm spending a lot of time in GC (cpu usage was always very high)&lt;br/&gt;
&lt;br/&gt;
These are the startup time on different jr versions / fetch size&lt;br/&gt;
&lt;br/&gt;
with jr 2.2.1: 129 sec&lt;br/&gt;
with jr 2.2.8 (fetch size 10000): &amp;gt; 1h&lt;br/&gt;
with jr 2.2.8 (patch applied on ConnectionHelper to comment out stmt.setFetchSize): 135 sec</comment>
                    <comment id="13100218" author="dfghi" created="Thu, 8 Sep 2011 11:56:38 +0100"  >I attached a very minimalistic patch that will set the fetchSize to 10 in the OracleConnectionHelper, that is used for all oracle connections (bundles, journal and datastore).&lt;br/&gt;
&lt;br/&gt;
But still there are a few points that may be considered:&lt;br/&gt;
- as stated by the original poster, if the fetchSize problem was Postgresql specific, it would be better to create a PostgresConnectionHelper and isolate the different fetchSize there.&lt;br/&gt;
- generally speaking, if you are sure that the ResultSet is not going to be very big, you should really trim down that fetchSize (or don&amp;#39;t set it so jdbc drivers would use their defaults), otherwise a simple change in some other driver behaviour might cause out of memory or slowness.&lt;br/&gt;
- this issue is currently unassigned, so nobody would apply any patch... :-)&lt;br/&gt;
</comment>
                    <comment id="13105128" author="c_koell" created="Thu, 15 Sep 2011 06:37:07 +0100"  >Soon I&amp;#39;ll take a look at this issue</comment>
                    <comment id="13119959" author="dfghi" created="Tue, 4 Oct 2011 09:30:06 +0100"  >The linked issue &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3090&quot; title=&quot;setFetchSize() fails in getAllNodeIds()&quot;&gt;&lt;strike&gt;JCR-3090&lt;/strike&gt;&lt;/a&gt; addressed the same issue in a different way: every call to the &amp;quot;reallyExec&amp;quot; method (where the setFetchSize is set) has the maxRows value set to 0, so the patch for that issue is simply indirectly disabling the fetch size hint. This would probably solve the problem of this issue but will probably re-open the problem stated in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2832&quot; title=&quot;Crash when adding node to cluster with big journal on PSQL DB&quot;&gt;&lt;strike&gt;JCR-2832&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
By the way, just like Manuel, I also used Magnolia CMS (with clustering) on Tomcat to reproduce the problem.</comment>
                    <comment id="13124930" author="c_koell" created="Tue, 11 Oct 2011 12:09:01 +0100"  >Created a patch that creates for a PostgreSQLDB a own ConnectionHelper that sets the fetchSize to 10000 to not break any code. On other DB&amp;#39;s the fetchSize will be 100.</comment>
                    <comment id="13124950" author="dfghi" created="Tue, 11 Oct 2011 12:53:00 +0100"  >I&amp;#39;m sorry if I wasn&amp;#39;t clear, but the value of 100 just worked for my application (clustered Magnolia CMS), and it was the maximum fetchSize value that allowed the application to start. Anyway, at 100 the memory occupation was quite high, so maybe that value was good in my case but may crash in other cases. Would it be possible to avoid setting a fetchSize at all (except for postgresql)? Performance were always good and there was no problem until it was set for the first time in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2832&quot; title=&quot;Crash when adding node to cluster with big journal on PSQL DB&quot;&gt;&lt;strike&gt;JCR-2832&lt;/strike&gt;&lt;/a&gt;...</comment>
                    <comment id="13124981" author="c_koell" created="Tue, 11 Oct 2011 13:41:04 +0100"  >Hi Danilo,&lt;br/&gt;
&lt;br/&gt;
Ok i see. I think we can change the fetchSize to 0 per default. This should work as it means the hint should be ignored.&lt;br/&gt;
</comment>
                    <comment id="13126362" author="c_koell" created="Thu, 13 Oct 2011 06:59:02 +0100"  >Modified (fetch Size 0 per default) patch applied in rev 1182667.&lt;br/&gt;
PostreSQL has a fetchSize of 10000 as before. If it makes no problems we can leave it so high.</comment>
                    <comment id="13150490" author="jukkaz" created="Tue, 15 Nov 2011 13:50:31 +0000"  >Merged to the 2.2 branch in revision 1202191.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12525496">JCR-3090</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12498575" name="JCR-2892.patch" size="5918" author="c_koell" created="Tue, 11 Oct 2011 12:09:00 +0100" />
                    <attachment id="12493573" name="oracleFetchSize.patch" size="2282" author="dfghi" created="Thu, 8 Sep 2011 11:46:11 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 16 Feb 2011 07:46:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>36294</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>250301</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>