<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:44:53 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-235/JCR-235.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-235] Cache jcr name to QName mappings</title>
                <link>https://issues.apache.org/jira/browse/JCR-235</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Currently jcr names are always parsed and resolved into QName instances. Introducing a cache would increase performance and also save memory because well known and often used jcr names would always return the same QName instance from cache.&lt;br/&gt;
&lt;br/&gt;
Testing with common read operations shows a performance improvement of about 25%.&lt;br/&gt;
The test involved the following methods on Node interface:&lt;br/&gt;
&lt;br/&gt;
- getProperty()&lt;br/&gt;
- getProperties()&lt;br/&gt;
- getName()&lt;br/&gt;
- getPath()&lt;br/&gt;
- isLocked()&lt;br/&gt;
- isNodeType()&lt;br/&gt;
- getPrimaryNodeType()&lt;br/&gt;
- hasNodes()&lt;br/&gt;
- getNodes()&lt;br/&gt;
&lt;br/&gt;
Attached proposed implementation of a QNameResolver.&lt;br/&gt;
&lt;br/&gt;
Please comment.</description>
                <environment></environment>
            <key id="12317527">JCR-235</key>
            <summary>Cache jcr name to QName mappings</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stefan@jira">Stefan Guggisberg</assignee>
                                <reporter username="mreutegg">Marcel Reutegger</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Oct 2005 19:50:28 +0100</created>
                <updated>Wed, 12 Oct 2005 19:06:15 +0100</updated>
                    <resolved>Wed, 12 Oct 2005 19:06:15 +0100</resolved>
                                            <fixVersion>1.0</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12331150" author="tripod" created="Mon, 3 Oct 2005 20:27:59 +0100"  >suggest to extends the NamespaceResolver interface by the respective QName translation methods. This would enable a broader usage of an eventual cache. fruthermore could the session local namespace/qname resolvers be sensitive to local namespace mappings.</comment>
                    <comment id="12331151" author="fmeschbe" created="Mon, 3 Oct 2005 20:31:51 +0100"  >Shouldn&amp;#39;t the QNameResolver interface be placed in the name package just like the QName class itself ?</comment>
                    <comment id="12331171" author="jukkaz" created="Tue, 4 Oct 2005 00:49:17 +0100"  >Sounds great! +1 from me, especially the LRUMap is a nice touch, no need to worry about DoS threats due to this.&lt;br/&gt;
&lt;br/&gt;
Design comment: The NamespaceRegistryImpl dependency seems out of place. How about the following structure?&lt;br/&gt;
&lt;br/&gt;
org.apache.jackrabbit.name:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public interface NamespaceListener&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public interface QNameResolver&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class StandardQNameResolver implements QNameResolver&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public class CachingQNameResolver implements QNameResolver, NamespaceListener&lt;br/&gt;
&lt;br/&gt;
The static QName.toJCRName and QName.fromJCRName methods could be moved to StandardQNameResolver to simplify the QName class.&lt;br/&gt;
The CachingQNameResolver could  be implemented as a decorator on top of another QNameResolver implementation (StandardQNameResolver by default).&lt;br/&gt;
Client code should register and deregister the CachingQNameResolver as a namespace change listener.&lt;br/&gt;
&lt;br/&gt;
This structure would add a tiny amount of overhead (a virtual vs. a static method call + some extra object instances), but would IMHO add much flexibility to the resolution process while keeping the package boundaries nice and solid.</comment>
                    <comment id="12331487" author="mreutegg" created="Thu, 6 Oct 2005 20:22:39 +0100"  >Thank you all for your suggestions I&amp;#39;ll post a new patch soon that incorporates your thoughts.</comment>
                    <comment id="12331697" author="mreutegg" created="Mon, 10 Oct 2005 19:11:15 +0100"  >Ok, here is a second version of the QName caching patch.&lt;br/&gt;
&lt;br/&gt;
- moved name related classes and interface into package o.a.j.name&lt;br/&gt;
- getQName() and getJCRName() added to NamespaceResolver interface&lt;br/&gt;
- AbstractNamespaceResolver provides optional support for NamespaceListener&lt;br/&gt;
- CachingNamespaceResolver implemented as decoration on AbstractNamespaceResolver&lt;br/&gt;
- NamespaceRegistryImpl used caching per aggregation (not inheritance)&lt;br/&gt;
&lt;br/&gt;
Currently also LocalNamespaceMappings caches QName resolution, but I think we should only cache mappings on the global NamespaceRegistryImpl. So I&amp;#39;m tempted to remove the caching again from LocalNamespaceMappings. Thoughts on that?&lt;br/&gt;
&lt;br/&gt;
I kept the static methods in QName because I think that&amp;#39;s the place they belong to. The class implements the JCR specification of a QName and should therefore also provide a parse facility that is according to the spec.&lt;br/&gt;
&lt;br/&gt;
The patch only include changes on NodeImpl and PropertyImpl to use the new methods in NamespaceResolver, even though there are now many more places in the code that can benefit from the added getQName() and getJCRName() methods in NamespaceResolver. I suggest to change the rest of the code later, after this patch is accepted and committed.</comment>
                    <comment id="12331703" author="tripod" created="Mon, 10 Oct 2005 22:53:16 +0100"  >+1 looks good</comment>
                    <comment id="12331774" author="jukkaz" created="Tue, 11 Oct 2005 16:35:43 +0100"  >+1</comment>
                    <comment id="12331871" author="stefan@jira" created="Wed, 12 Oct 2005 19:04:19 +0100"  >+1 &lt;br/&gt;
&lt;br/&gt;
i am gonna commit the patch, thanks!</comment>
                    <comment id="12331872" author="stefan@jira" created="Wed, 12 Oct 2005 19:06:15 +0100"  >applied the patch (r314827)</comment>
                </comments>
                    <attachments>
                    <attachment id="12314790" name="QNameCaching.patch" size="32517" author="mreutegg" created="Mon, 10 Oct 2005 19:11:56 +0100" />
                    <attachment id="12314683" name="QNameResolver.patch" size="17629" author="mreutegg" created="Mon, 3 Oct 2005 19:51:06 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 3 Oct 2005 19:27:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142042</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279358</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>