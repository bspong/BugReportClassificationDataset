<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:57:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3013/JCR-3013.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3013] ArrayIndexOutOfBoundsException: ConcurrentCache</title>
                <link>https://issues.apache.org/jira/browse/JCR-3013</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>ArrayIndexOutOfBoundsException after several days of uptime.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m experiencing some strange ArrayIndexOutOfBoundsExceptions on&lt;br/&gt;
&amp;nbsp;accessing the jackrabbit ConcurrentCache in 2.2.5. in Line 241 during&lt;br/&gt;
&amp;nbsp;shrinkIfNeeded check.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;Caused by: java.lang.ArrayIndexOutOfBoundsException: -14&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.cache.ConcurrentCache.shrinkIfNeeded(ConcurrentCache.java:241)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
I reviewed jackrabbit-code and I&amp;#39;m sure it&amp;#39;s caused by that&lt;br/&gt;
&amp;nbsp;AtomicInteger for realizing accessCounter in AbstractCache, which will&lt;br/&gt;
&amp;nbsp;have become negative during increasing over the Integer.MAX_VALUE constant.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Semi-random start index to prevent bias against the first&lt;br/&gt;
&amp;nbsp;segments&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int start = (int) getAccessCount() % segments.length;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = start; isTooBig(); i = (i + 1) % segments.length) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;synchronized (segments[i]) {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;___________________________&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;Uncaught Throwable java.lang.ArrayIndexOutOfBoundsException: -7&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.cache.ConcurrentCache.shrinkIfNeeded(ConcurrentCache.java:241)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.cache.ConcurrentCache.put(ConcurrentCache.java:176)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.getBundle(AbstractBundlePersistenceManager.java:657)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.persistence.bundle.AbstractBundlePersistenceManager.load(AbstractBundlePersistenceManager.java:400)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.SharedItemStateManager.loadItemState(SharedItemStateManager.java:1819)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.SharedItemStateManager.getNonVirtualItemState(SharedItemStateManager.java:1739)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:261)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.LocalItemStateManager.getNodeState(LocalItemStateManager.java:107)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.LocalItemStateManager.getItemState(LocalItemStateManager.java:172)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.XAItemStateManager.getItemState(XAItemStateManager.java:260)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.state.SessionItemStateManager.getItemState(SessionItemStateManager.java:161)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.ItemManager.getItemData(ItemManager.java:370)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:316)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.ItemManager.getItem(ItemManager.java:610)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.SessionImpl.getNodeById(SessionImpl.java:493)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.jackrabbit.core.SessionImpl.getNodeByIdentifier(SessionImpl.java:1045)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at sun.reflect.GeneratedMethodAccessor31.invoke(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.jcr.base.SessionProxyHandler$SessionProxyInvocationHandler.invoke(SessionProxyHandler.java:109)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at $Proxy2.getNodeByIdentifier(Unknown Source)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.frontend.servlet.helper.ResourceUtil.findResourceById(ResourceUtil.java:44)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.frontend.servlet.CMSContentEnrichServletFilter.doFilter(CMSContentEnrichServletFilter.java:194)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.frontend.servlet.CacheControlFilter.doFilter(CacheControlFilter.java:120)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.cache.impl.WallCacheServletFilter.processCacheableRequest(WallCacheServletFilter.java:244)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.cache.impl.WallCacheServletFilter.processCacheableRequestWithLatch(WallCacheServletFilter.java:185)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.cache.impl.WallCacheServletFilter.doFilter(WallCacheServletFilter.java:154)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;de.dig.cms.frontend.servletapi.CMSSlingHttpServletRequestFilter.doFilter(CMSSlingHttpServletRequestFilter.java:52)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.filter.AbstractSlingFilterChain.doFilter(AbstractSlingFilterChain.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.SlingMainServlet.service(SlingMainServlet.java:313)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.apache.sling.engine.impl.SlingMainServlet.service(SlingMainServlet.java:207)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:502)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:389)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.ops4j.pax.web.service.internal.HttpServiceServletHandler.handle(HttpServiceServletHandler.java:64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.ops4j.pax.web.service.internal.HttpServiceContext.handle(HttpServiceContext.java:111)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.ops4j.pax.web.service.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:64)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.mortbay.jetty.Server.handle(Server.java:324)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:535)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:865)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:539)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.io.nio.SelectChannelEndPoint.run(SelectChannelEndPoint.java:409)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at&lt;br/&gt;
&amp;nbsp;org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:520)</description>
                <environment>My Platform:&lt;br/&gt;
- Linux Debian (64)&lt;br/&gt;
- sun&lt;br/&gt;
&amp;nbsp;&amp;nbsp;java version &amp;quot;1.6.0_22&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Java(TM) SE Runtime Environment (build 1.6.0_22-b04)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;Java HotSpot(TM) 64-Bit Server VM (build 17.1-b03, mixed mode)&lt;br/&gt;
&lt;br/&gt;
- MemTotal:     49563216 kB     &lt;br/&gt;
- Intel(R) Xeon(R) CPU           E5530  @ 2.40GHz&lt;br/&gt;
- apache sling / JCR Cluster&lt;br/&gt;
</environment>
            <key id="12512975">JCR-3013</key>
            <summary>ArrayIndexOutOfBoundsException: ConcurrentCache</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mklenk">Michael Klenk</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jul 2011 13:26:49 +0100</created>
                <updated>Wed, 21 Dec 2011 11:04:01 +0000</updated>
                    <resolved>Wed, 6 Jul 2011 14:18:04 +0100</resolved>
                            <version>2.2.5</version>
                <version>2.2.7</version>
                                <fixVersion>2.2.8</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13060532" author="mklenk" created="Wed, 6 Jul 2011 13:28:02 +0100"  >possible fix</comment>
                    <comment id="13060533" author="mklenk" created="Wed, 6 Jul 2011 13:30:40 +0100"  >possible patch for review.</comment>
                    <comment id="13060563" author="stefan@jira" created="Wed, 6 Jul 2011 14:18:04 +0100"  >fixed in svn revision 1143396.&lt;br/&gt;
&lt;br/&gt;
thanks for reporting this issue and providing a patch!&lt;br/&gt;
&lt;br/&gt;
i&amp;#39;ve chosen to normalize the return value of AbstractCache#getAccessCount() instead of the suggested fix.</comment>
                    <comment id="13064440" author="mreutegg" created="Wed, 13 Jul 2011 10:04:16 +0100"  >Would it be more appropriate to change the accessCount in AbstractCache to an AtomicLong? This would be more in line with the signature of getAccessCount() which returns a long.</comment>
                    <comment id="13064462" author="stefan@jira" created="Wed, 13 Jul 2011 11:00:27 +0100"  >&amp;gt; Would it be more appropriate to change the accessCount in AbstractCache to an AtomicLong? This would be more in line with the signature of getAccessCount() which returns a long.&lt;br/&gt;
&lt;br/&gt;
while using AtomicLong would certainly reduce the probability that this problem occurs&lt;br/&gt;
guarding against numeric overflow would IMO still be required. &lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;</comment>
                    <comment id="13081580" author="jeroenreijn" created="Tue, 9 Aug 2011 12:51:48 +0100"  >How much work would it be to backport this to the 2.2 branch? Seems like an easy fix to me. We&amp;#39;re having this exact same thing in our production.</comment>
                    <comment id="13081765" author="jukkaz" created="Tue, 9 Aug 2011 18:05:43 +0100"  >There was still a slight chance of this problem occurring in the case that one thread was accessing an overflown access count with getAccessCount() right before the recordCacheAccess() method would have reset the counter. I fixed that in revision 1155431 by using Math.abs() in ConcurrentCache.shrinkIfNeeded(). I also switched the counter to an AtomicLong just to reduce the chance of other overflow issues popping up in the CacheManager class that also uses access counts. The long value would take about 300 years to overflow even if the cache was accessed once every nanosecond...&lt;br/&gt;
&lt;br/&gt;
I merged this and the earlier change to the 2.2 branch in revision 1155435 for inclusion in Jackrabbit 2.2.8.</comment>
                    <comment id="13174006" author="jeroenreijn" created="Wed, 21 Dec 2011 11:04:01 +0000"  >Thanks Jukka!</comment>
                </comments>
                    <attachments>
                    <attachment id="12485416" name="ConcurrentCache.patch" size="873" author="mklenk" created="Wed, 6 Jul 2011 13:28:02 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 6 Jul 2011 13:18:04 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>59631</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190859</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>