<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:58:33 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2170/JCR-2170.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2170] Remove PropDefId and NodeDefId</title>
                <link>https://issues.apache.org/jira/browse/JCR-2170</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>the PropDefIds and NodeDefIds are used to quickly lookup a childnode- or property definition in the nodetype registry (or effective nodetype).&lt;br/&gt;
this is heavily used during reading, when calling Property.getDefinition() usually when checking the isMultiple() flag. and of course while writing when getting the definition for the property or childnode. &lt;br/&gt;
&lt;br/&gt;
however, this poses problems when a nodetype is changed that is still used in the content. if a property definition is changed due to an altered nodetype, subsequent accesses to that property result in a &amp;quot;invalid propdefid&amp;quot; warning in the log - but the id is recomputed. this is especially a problem when upgrade jackrabbit from 1.x to 2.0, where some of the builtin nodetypes are defined differently.&lt;br/&gt;
&lt;br/&gt;
i think that it should be feasible to remove the propdefids and nodedefids and compute the definition on demand. i think this can be implemented without performance loss, when some sort of &amp;#39;signatures&amp;#39; of the items are computed to quickly find the definitions in the effective node type. furthermore, the most common usecase for using the property definition is probably the isMultiple() check - which is now on the Property interface itself - which does not need a definition lookup at all.&lt;br/&gt;
&lt;br/&gt;
and last but not least, it saves 8 bytes per item in the persistence layer.</description>
                <environment></environment>
            <key id="12428774">JCR-2170</key>
            <summary>Remove PropDefId and NodeDefId</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="tripod">Tobias Bocanegra</reporter>
                        <labels>
                    </labels>
                <created>Wed, 24 Jun 2009 14:02:23 +0100</created>
                <updated>Wed, 9 Jun 2010 14:08:12 +0100</updated>
                    <resolved>Thu, 17 Sep 2009 21:02:21 +0100</resolved>
                            <version>2.0</version>
                                <fixVersion>1.6.2</fixVersion>
                <fixVersion>2.0-beta1</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12723740" author="stefan@jira" created="Wed, 24 Jun 2009 22:09:53 +0100"  >frankly i don&amp;#39;t understand the problem to be solved. If it&amp;#39;s just about the warnings in the logs, i&amp;#39;d be against such a major change since the warnings are IMO correct (they indicate a potential repository corruption.  &lt;br/&gt;
&lt;br/&gt;
please provide a patch of the suggested change for review and further discussion and please also provide representative profiling figures showing the neutral effect on performance.  </comment>
                    <comment id="12744549" author="jukkaz" created="Tue, 18 Aug 2009 16:26:11 +0100"  >+1 to getting rid of the DefIds. IMHO they unnecessarily bind the persisted items to specific node type settings. Resolving the item definitions on demand makes the typing system more flexible.&lt;br/&gt;
&lt;br/&gt;
Also, I&amp;#39;m somewhat scared about the DefIds being essentially just hash codes of the item definitions. What happens when we have a hash collision?</comment>
                    <comment id="12744984" author="stefan@jira" created="Wed, 19 Aug 2009 11:28:13 +0100"  >i&amp;#39;d be +1 for getting rid of the DefIds if the proposed change is more or less performance neutral, otherwise i am -0.5.</comment>
                    <comment id="12745006" author="mreutegg" created="Wed, 19 Aug 2009 12:37:51 +0100"  >I don&amp;#39;t think there is an alternative, I&amp;#39;d even go as far as saying this is not an enhancement but a bug. We have internal code that relies on the fact that those def ids are present in the node type registry. E.g. running the compatibility tests in the sandbox will currently result in NullPointerExceptions when upgrading from a 1.x repository, caused by def ids that have changed (most prominently jcr:isCheckedOut).</comment>
                    <comment id="12751042" author="mreutegg" created="Thu, 3 Sep 2009 15:33:29 +0100"  >IMO this is a bug and needs to be fixed for 2.0, otherwise an upgrade is not possible.</comment>
                    <comment id="12751046" author="mreutegg" created="Thu, 3 Sep 2009 15:56:27 +0100"  >As a first step I will replace all Property.getDefinition().isMultiple() with Property.isMultiple(). This will somewhat remove the requirement for Item.getDefinition() to be super fast.&lt;br/&gt;
</comment>
                    <comment id="12751063" author="mreutegg" created="Thu, 3 Sep 2009 16:48:44 +0100"  >Replaced in revision: 811001</comment>
                    <comment id="12752411" author="mreutegg" created="Tue, 8 Sep 2009 10:41:57 +0100"  >Created a development branch in sandbox named &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2170&quot; title=&quot;Remove PropDefId and NodeDefId&quot;&gt;&lt;strike&gt;JCR-2170&lt;/strike&gt;&lt;/a&gt;.</comment>
                    <comment id="12754078" author="mreutegg" created="Fri, 11 Sep 2009 11:29:09 +0100"  >On sandbox branch:&lt;br/&gt;
&lt;br/&gt;
- removed usage of NodeDefId and PropDefId from ItemStates in revision: 813753 and 813757&lt;br/&gt;
- the definition ids are now only used to diff node types&lt;br/&gt;
- NodeDef replaced with QNodeDefinition&lt;br/&gt;
- PropDef replaced with QPropertyDefinition&lt;br/&gt;
&lt;br/&gt;
Direct instantiation of Q*DefinitionImpl should be replaced with Q*DefinitionBuilder, but those are currently located in a CND package, which makes it a bit awkward to use. The restructuring proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2301&quot; title=&quot;CND support in jackrabbit-jcr-commons&quot;&gt;&lt;strike&gt;JCR-2301&lt;/strike&gt;&lt;/a&gt; will help here as well.</comment>
                    <comment id="12754103" author="mreutegg" created="Fri, 11 Sep 2009 13:06:47 +0100"  >On sandbox branch:&lt;br/&gt;
&lt;br/&gt;
- replaced usage of Node/PropertyDefinitionImpl (jackrabbit-core) with classes from spi-commons&lt;br/&gt;
- removed the ones in jackrabbit-core&lt;br/&gt;
&lt;br/&gt;
svn revision: 813788</comment>
                    <comment id="12754119" author="mreutegg" created="Fri, 11 Sep 2009 14:18:02 +0100"  >Current state of sandbox branch:&lt;br/&gt;
&lt;br/&gt;
- All tests pass&lt;br/&gt;
- Compatibility tests in sandbox/jackrabbit-test-harness now also succeed when upgrading/starting pre 2.0 repositories with jackrabbit-core 2.0&lt;br/&gt;
- Performance impact seems to be negligible. see attached comparison of execution time of unit and integration tests for jackrabbit-core.&lt;br/&gt;
&lt;br/&gt;
Pending:&lt;br/&gt;
&lt;br/&gt;
- The persistence manager now simply ignore the definition id read from storage. For simplicity an empty string is currently written as the definition id when an item is stored. This should be changed by bumping the serialization version and not storing the definition id at all.&lt;br/&gt;
&lt;br/&gt;
The changes can be reviewed with:&lt;br/&gt;
svn diff &lt;a href=&quot;http://svn.apache.org/repos/asf/jackrabbit/trunk&quot;&gt;http://svn.apache.org/repos/asf/jackrabbit/trunk&lt;/a&gt; &lt;a href=&quot;http://svn.apache.org/repos/asf/jackrabbit/sandbox/JCR-2170&quot;&gt;http://svn.apache.org/repos/asf/jackrabbit/sandbox/JCR-2170&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Feedback welcome. </comment>
                    <comment id="12754122" author="jukkaz" created="Fri, 11 Sep 2009 14:25:05 +0100"  >+1 Seems pretty good to me!</comment>
                    <comment id="12754538" author="stefan@jira" created="Sat, 12 Sep 2009 15:47:38 +0100"  >+1 for the proposed changes&lt;br/&gt;
&lt;br/&gt;
thanks, marcel!</comment>
                    <comment id="12754941" author="mreutegg" created="Mon, 14 Sep 2009 12:51:39 +0100"  >There is an issue with the definition of nt:resource that we have in 2.0. JSR 283 now defines nt:resource as a node type definition that does not inherit from mix:referenceable anymore. in case of an upgrade to jackrabbit 2.0 we still have a jcr:uuid property for each nt:resource node in content. but there&amp;#39;s no definition anymore for those properties.&lt;br/&gt;
&lt;br/&gt;
I think we should change the definition of nt:resource and let it extend from mix:referenceable. See also JCR-2303.&lt;br/&gt;
&lt;br/&gt;
WDYT?</comment>
                    <comment id="12754954" author="stefan@jira" created="Mon, 14 Sep 2009 13:32:09 +0100"  >&amp;gt; I think we should change the definition of nt:resource and let it extend from mix:referenceable.&lt;br/&gt;
&lt;br/&gt;
+1 </comment>
                    <comment id="12756718" author="mreutegg" created="Thu, 17 Sep 2009 20:23:42 +0100"  >Merged sandbox branch into trunk in revision: 816343</comment>
                    <comment id="12756740" author="mreutegg" created="Thu, 17 Sep 2009 20:58:18 +0100"  >nt:resource now extends from mix:referenceable again. Because of JCR-2303 I had to mark org.apache.jackrabbit.test.api.nodetype.PredefinedNodeTypeTest#testResource as a known issue for jackrabbit-core and jackrabbit-spi2jcr.&lt;br/&gt;
&lt;br/&gt;
svn revision: 816360</comment>
                    <comment id="12757849" author="mreutegg" created="Mon, 21 Sep 2009 09:31:38 +0100"  >There&amp;#39;s a regression caused by this change. A NullPointerException is thrown when a node is removed and its parent node had been replaced by a new node with the same UUID in the same save call.&lt;br/&gt;
&lt;br/&gt;
Fixed in revision: 817192</comment>
                    <comment id="12866350" author="jukkaz" created="Tue, 11 May 2010 22:33:34 +0100"  >In revision 943301 I backported/reimplemented most of these changes in the 1.6 branch to fix the problems reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2433&quot; title=&quot;NPE when copying nodes with Workspace.copy()&quot;&gt;&lt;strike&gt;JCR-2433&lt;/strike&gt;&lt;/a&gt;.</comment>
                    <comment id="12877067" author="vramdal" created="Wed, 9 Jun 2010 14:08:12 +0100"  >Possible regression: &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2652&quot; title=&quot;Can no longer set a Date property using a Long value&quot;&gt;&lt;strike&gt;JCR-2652&lt;/strike&gt;&lt;/a&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12434990">JCR-2296</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12435584">JCRTCK-5</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12419301" name="image001.png" size="107713" author="mreutegg" created="Fri, 11 Sep 2009 14:18:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 24 Jun 2009 21:09:53 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78313</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191861</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>