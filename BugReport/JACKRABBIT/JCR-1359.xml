<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:34:48 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1359/JCR-1359.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1359] Adding nodes from concurrently running sessions cause exceptions</title>
                <link>https://issues.apache.org/jira/browse/JCR-1359</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Exceptions are thrown when trying to add child nodes to one parent node from different sessions running concurrently. One of the following exceptions is always thrown:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;* Exception in thread &amp;quot;Thread-8&amp;quot; java.lang.RuntimeException: javax.jcr.nodetype.ConstraintViolationException: /A/7 needs to be saved as well.&lt;br/&gt;
&amp;nbsp;* Exception in thread &amp;quot;Thread-8&amp;quot; java.lang.RuntimeException: javax.jcr.RepositoryException: /A: unable to update item.: Unable to&lt;br/&gt;
resolve path for item: 016b885a-64aa-45b9-a990-05cbabb4586f/{&lt;a href=&quot;http://www.jcp.org/jcr/1.0&quot;&gt;http://www.jcp.org/jcr/1.0&lt;/a&gt;}primaryType: Unable to resolve path for item: 016b885a-64aa-45b9-a990-05cbabb4586f/{&lt;a href=&quot;http://www.jcp.org/jcr/1.0&quot;&gt;http://www.jcp.org/jcr/1.0&lt;/a&gt;}primaryType&lt;br/&gt;
&lt;br/&gt;
According to &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-584&quot; title=&quot;Improve handling of concurrent node modifications&quot;&gt;&lt;strike&gt;JCR-584&lt;/strike&gt;&lt;/a&gt; &amp;quot;Improve handling of concurrent node modifications&amp;quot; the following scenario &amp;quot;session 1 adds or removes child node &amp;#39;x&amp;#39;, session 2 adds or removes child node &amp;#39;y&amp;#39;&amp;quot; should run gracefully, but the following test constantly fails:&lt;br/&gt;
&lt;br/&gt;
public void testSync() throws Exception&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node rootNode = getSession ().getRootNode ();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rootNode.addNode (&amp;quot;A&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rootNode.save();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final Session session1 = getRepository().login (new SimpleCredentials (&amp;quot;userName&amp;quot;, &amp;quot;password&amp;quot;.toCharArray()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final Session session2 = getRepository().login (new SimpleCredentials (&amp;quot;userName&amp;quot;, &amp;quot;password&amp;quot;.toCharArray()));&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread thread1 = new Thread (new Runnable()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addNodes (&amp;quot;A&amp;quot;, session1, 0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (RepositoryException ex)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new RuntimeException (ex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread thread2 = new Thread (new Runnable()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;addNodes (&amp;quot;A&amp;quot;, session2, 1001);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;catch (RepositoryException ex)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new RuntimeException (ex);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread1.start();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread2.start();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread1.join();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;thread2.join();&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
private void addNodes (String parentName, Session session, int startIndex)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throws RepositoryException&lt;br/&gt;
{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Node parentNode = session.getRootNode().getNode (parentName);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = startIndex; i &amp;lt; startIndex + 100; i++)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;{&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String name = Integer.toString (i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parentNode.addNode (name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parentNode.save();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
BTW: exceptions were also thrown when I tried to add nodes from one thread and remove some of them from another one. Each thread used it&amp;#39;s own session, each node had unique name.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12387648">JCR-1359</key>
            <summary>Adding nodes from concurrently running sessions cause exceptions</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="stefan@jira">Stefan Guggisberg</assignee>
                                <reporter username="alexander.nesterov">Alexander Nesterov</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 Feb 2008 16:18:19 +0000</created>
                <updated>Fri, 28 Mar 2008 09:15:12 +0000</updated>
                    <resolved>Fri, 7 Mar 2008 14:35:30 +0000</resolved>
                            <version>1.3.3</version>
                <version>1.4</version>
                <version>core 1.4.1</version>
                                <fixVersion>core 1.4.2</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12566079" author="jukkaz" created="Wed, 6 Feb 2008 11:06:06 +0000"  >I looked at this and it seems like the issue is not with the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-584&quot; title=&quot;Improve handling of concurrent node modifications&quot;&gt;&lt;strike&gt;JCR-584&lt;/strike&gt;&lt;/a&gt; implementation, but rather a synchronization error between the active session and the observation thread pushing changes to it. I&amp;#39;ll dig deeper...</comment>
                    <comment id="12569579" author="jukkaz" created="Sat, 16 Feb 2008 15:36:05 +0000"  >Unfortunately I don&amp;#39;t have a fix for this for jackrabbit-core 1.4.1. As a workaround until we have a proper fix I would recommend using some external synchronization mechanism in cases where you have heavy concurrent writes like this.</comment>
                    <comment id="12569803" author="cziegeler" created="Mon, 18 Feb 2008 08:36:47 +0000"  >Just as additional info: I have the same issue from time to time, but I&amp;#39;m not having such heavy concurrent writes. Usually it occures in my scenario with 5 to 10 nodes being written by one thread, while another thread changes or removes other nodes.</comment>
                    <comment id="12571122" author="jukkaz" created="Thu, 21 Feb 2008 17:59:55 +0000"  >Scheduling for jackrabbit-core 1.4.2</comment>
                    <comment id="12573797" author="stefan@jira" created="Fri, 29 Feb 2008 15:50:51 +0000"  >it took me a while to figure it out but i guess i finally found the root causes of the 2 aforementioned exceptions, i.e.&lt;br/&gt;
&lt;br/&gt;
a) javax.jcr.nodetype.ConstraintViolationException: /A/7 needs to be saved as well. &lt;br/&gt;
b) javax.jcr.RepositoryException: /A: unable to update item.: Unable to resolve path for item: 016b885a-64aa-45b9-a990-05cbabb4586f/{&lt;a href=&quot;http://www.jcp.org/jcr/1.0&quot;&gt;http://www.jcp.org/jcr/1.0&lt;/a&gt;}primaryType&lt;br/&gt;
&lt;br/&gt;
here&amp;#39;s my analysis (based on r632346):&lt;br/&gt;
&lt;br/&gt;
a) happens when &lt;br/&gt;
&amp;nbsp;- thread 1 is in ItemImpl.save(), somewhere around line 1153, just about calling&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;nodeState.getRemovedChildNodeEntries() &lt;br/&gt;
-  thread 2 then calls LocalItemStateManager.stateModified() and updates the underlying &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;local state&lt;br/&gt;
-  thread 1 continues and calls nodeState.getRemovedChildNodeEntries(), reporting&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;the id of the child node added by thread 2 (transient and local state are not in sync &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;at this moment, i.e. the transient state is temporarily stale)&lt;br/&gt;
-  thread 2 then calls SessionItemStateManager.stateModified() and merges the transient&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;state with the underlying local state; transient and local state are in sync again&lt;br/&gt;
- the result is an exception incorrectly complaining about an unsatisfied dependency &lt;br/&gt;
&amp;nbsp;&amp;nbsp;(id needs to be saved as well)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
b) is more severe, it happens when &lt;br/&gt;
-  thread 1 is in NodeImpl.makePersistent(), somewhere within the synchronized block&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;starting at line 933, holding the monitor on the NodeState instance &amp;#39;persistentState&amp;#39;&lt;br/&gt;
-  thread 2 then calls ItemState.pull() (via LocalItemStateManager.stateModified()) and&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;waits for the monitor  the NodeState instance before entering NodeState.copy())...&lt;br/&gt;
-  thread 1 leaves the synchronized block&lt;br/&gt;
-  thread 2 now calls NodeState.copy(), effectively overwriting thread 1&amp;#39;s changes in &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;the change log...&lt;br/&gt;
-  the result is an exception (unable to resolve path) because the child node entry &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;created by thread 1 was lost&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12573830" author="stefan@jira" created="Fri, 29 Feb 2008 16:47:55 +0000"  >fixed in r 632376</comment>
                    <comment id="12575345" author="jukkaz" created="Wed, 5 Mar 2008 13:53:31 +0000"  >Cool stuff, thanks! Merged to the 1.4 branch in revision 633847.</comment>
                    <comment id="12576197" author="stefan@jira" created="Fri, 7 Mar 2008 13:53:49 +0000"  >reopening because o.a.j.core.ConcurrentNodeModificationTest still occasionally fails with the same symptoms as described in this issue </comment>
                    <comment id="12576211" author="stefan@jira" created="Fri, 7 Mar 2008 14:35:30 +0000"  >fixed in r634681</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 6 Feb 2008 11:06:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>78585</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189800</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>