<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:46:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3040/JCR-3040.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3040] JMX Stats for the Session</title>
                <link>https://issues.apache.org/jira/browse/JCR-3040</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>I&amp;#39;ve named them Core stats. This will include:&lt;br/&gt;
&amp;nbsp;- number of sessions currently opened&lt;br/&gt;
&amp;nbsp;- session read / write operations per second&lt;br/&gt;
&lt;br/&gt;
The stats refresh once a minute.&lt;br/&gt;
This is disabled by default, so it will not affect performance.</description>
                <environment></environment>
            <key id="12517921">JCR-3040</key>
            <summary>JMX Stats for the Session</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                    <parent id="12503117">JCR-2936</parent>
                        <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="alex.parvulescu">Alex Parvulescu</assignee>
                                <reporter username="alex.parvulescu">Alex Parvulescu</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Aug 2011 13:40:54 +0100</created>
                <updated>Tue, 6 Dec 2011 14:47:13 +0000</updated>
                    <resolved>Tue, 22 Nov 2011 22:35:49 +0000</resolved>
                                            <fixVersion>2.3.4</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13079388" author="stefan@jira" created="Thu, 4 Aug 2011 15:22:36 +0100"  >the description of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2936&quot; title=&quot;JMX Bindings for Jackrabbit&quot;&gt;&lt;strike&gt;JCR-2936&lt;/strike&gt;&lt;/a&gt; states that &lt;br/&gt;
&amp;quot;There has been a slight interest in the past for adding JMX support.&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3040&quot; title=&quot;JMX Stats for the Session&quot;&gt;&lt;strike&gt;JCR-3040&lt;/strike&gt;&lt;/a&gt; however does come with a huge commit, affecting critical parts&lt;br/&gt;
of jackrabbit-core, with (IMO) considerable risk of causing regressions. &lt;br/&gt;
&lt;br/&gt;
i would have appreciated if a patch had been provided for discussion rather &lt;br/&gt;
than committing the changes within 1 minute after creating the issue.&lt;br/&gt;
&lt;br/&gt;
if there&amp;#39;s only &amp;#39;slight interest&amp;#39; i am rather conservative WRT performing&lt;br/&gt;
major changes in jackrabbit-core. &lt;br/&gt;
</comment>
                    <comment id="13081002" author="alex.parvulescu" created="Mon, 8 Aug 2011 16:32:27 +0100"  >point taken on the patch.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve rolled-back everything, and I&amp;#39;m not re-submitting the JMX Session stats as a patch.&lt;br/&gt;
I&amp;#39;ve also ran the performance tests (ConcurrentReadTest and ConcurrentReadWriteTest) and attached the results, to analyze the performance impact.&lt;br/&gt;
&lt;br/&gt;
The problem with these tests is that I ran them on my machine, which I think is error-prone as it is also dependent on the background noise. I&amp;#39;ve tried to not stress it much (no eclipse running, etc), but I guess it is not 100% bullet proof.&lt;br/&gt;
It would be interesting to run the tests on a continuous integration machine, if there is any available.&lt;br/&gt;
&lt;br/&gt;
In jr-test.log, you&amp;#39;ll find the test results. I ran them 5 times, each time running the 2 versions of the code (with and without my changes to the session state object).&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m really interested in your opinion about the test results.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13085105" author="tmueller" created="Mon, 15 Aug 2011 15:39:00 +0100"  >A few remarks:&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t really understand the statistics, but it looks like the patch made things 10% slower? Is that so? If yes, I don&amp;#39;t understand why. Or did I missinterpret the statistics?&lt;br/&gt;
&lt;br/&gt;
As far as I understand the code, &amp;quot;opsPerSecond&amp;quot; is the number of operations per second that were called between the first operation and the last operation. Right? For me, that was a bit confusing. I would expect it to mean number of operations divided by the number of seconds the operations took. Otherwise the number of &amp;quot;operations per second&amp;quot; doesn&amp;#39;t actually depend on the performance of the write operations, but on how often the _application_ wrote. At least it should be documented:&lt;br/&gt;
&lt;br/&gt;
CoreStatManagerMBean doesn&amp;#39;t contain any Javadocs.&lt;br/&gt;
&lt;br/&gt;
I would also return the total number of read and the total number of write operations.&lt;br/&gt;
&lt;br/&gt;
Do you really need to use read and write locks? It seems using volatile fields should be enough, as statistics are not supposed to be completely accurate anyway, but gathering statistics is supposed to be low-overhead (read write locks are not).&lt;br/&gt;
&lt;br/&gt;
&amp;gt; System.currentTimeMillis() - timeNs / 1000&lt;br/&gt;
&lt;br/&gt;
I would try to avoid divisions when _gathering_ data, as divisions are slow. Why not use System.nanoTime()? System.currentTimeMillis() is anyway problematic: it can go backwards, as uses the system time and not the elapsed time. Statistics will be completely wrong on summertime change, right?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; BigDecimal&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t really understand why &amp;#39;double&amp;#39; isn&amp;#39;t enough.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; (non-Javadoc) ...&lt;br/&gt;
&lt;br/&gt;
What is the reason for adding such comments?&lt;br/&gt;
&lt;br/&gt;
+        if (durationMs == 0) {&lt;br/&gt;
+            durationMs = 1000;&lt;br/&gt;
+        }&lt;br/&gt;
&lt;br/&gt;
I know you want to avoid &amp;#39;divide by zero&amp;#39; but it might be easier to set the _results_ to 0 instead of changing the duration.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13086381" author="stefan@jira" created="Wed, 17 Aug 2011 16:23:13 +0100"  >thanks for the patch and sharing some test results!&lt;br/&gt;
&lt;br/&gt;
WRT the results:&lt;br/&gt;
the spread of the test results is huge, i don&amp;#39;t think that they allow any conclusion WRT to the potential performance impact.&lt;br/&gt;
&lt;br/&gt;
WRT the patch:&lt;br/&gt;
i agree with thomas&amp;#39;s comments. apart from those i&amp;#39;ve got a few remarks &lt;br/&gt;
regarding the RepositoryImpl changes: &lt;br/&gt;
&lt;br/&gt;
- i&amp;#39;d prefer to move the sessionCreated() and sessionLoggedOut() calls outside&lt;br/&gt;
&amp;nbsp;&amp;nbsp;of the &amp;#39;synchronized (activeSessions) {}&amp;#39; block. &lt;br/&gt;
&lt;br/&gt;
- MBeanServer.registerMBean() is called  on every startup, whether the stats are enabled or not.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;i&amp;#39;d prefer if that call would only be made depending on e.g. a system property.&lt;br/&gt;
&lt;br/&gt;
WRT to adding JMX support to jackrabbit core:&lt;br/&gt;
&lt;br/&gt;
just based on &amp;#39;slight interest&amp;#39; i&amp;#39;m rather reluctant adding major features to jackrabbit core&lt;br/&gt;
with considerable risk of causing regressions.</comment>
                    <comment id="13086905" author="jukkaz" created="Thu, 18 Aug 2011 10:06:44 +0100"  >I&amp;#39;m working on tools for better managing and monitoring the repository, and increased JMX support seems like the best way to do this, so I&amp;#39;m in favor of going into this direction.&lt;br/&gt;
&lt;br/&gt;
However, I agree with the concerns raised here. There&amp;#39;s no reason why collecting statistics or exposing them through JMX should have *any* noticeable impact on performance. If there is a measurable performance impact, then we&amp;#39;re doing something wrong.</comment>
                    <comment id="13086913" author="alex.parvulescu" created="Thu, 18 Aug 2011 10:34:26 +0100"  >thanks for all the comments!&lt;br/&gt;
&lt;br/&gt;
the biggest problem with the initial commit (now patch) was that the impact of the jmx support was unknown in a default scenario where everything is disabled but there still is an impact on the core operations.&lt;br/&gt;
that is what I&amp;#39;m trying to figure out now, as the results of the tests were not clear.&lt;br/&gt;
&lt;br/&gt;
to me performance with the stats enabled is not an issue in the first iteration, getting a good starting point is. I also needed to start pushing out code to be reviewed, as it piled up on my machine which in the end resulted in a huge commit, and then a huge headache :)&lt;br/&gt;
&lt;br/&gt;
@thomas: &lt;br/&gt;
&amp;nbsp;- 10% slower? where did you get the number from? the tests that I ran were inconclusive, see @stefan&amp;#39;s comment&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;I agree with your observations, but it feels a bit like premature optimization until we actually get the code into JR core (currentTimeMillis vs nanoTime, BigDecimal vs double, locks vs volatile).&lt;br/&gt;
&lt;br/&gt;
@stefan&lt;br/&gt;
Yes, I&amp;#39;m refactoring to have just one bean (like a dynamic registry) enabled from the start, which would ideally be able to enable other jmx beans on demand.&lt;br/&gt;
I don&amp;#39;t like the system property idea, as it kinda defeats the purpose of having jmx support ootb without a restart.&lt;br/&gt;
&lt;br/&gt;
&amp;#39;slight interest&amp;#39; I should change the description at one point, the priorities constantly change, so should the issue description. &lt;br/&gt;
I also don&amp;#39;t see the regression risk, we test constantly for performance degradation on the core parts, plus we&amp;#39;ll disable everything ootb. the jmx support has a lot of benefits too, I&amp;#39;m sure in the end it will be worth it.&lt;br/&gt;
&lt;br/&gt;
@jukka&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- I completely agree on the performance, I still need to run some tests, once we all agree on what the basis of the jmx support will look like (and where it will reside).&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll concentrate on building a really low impact ootb jmx support (disabled and with a minimal footprint), then we can measure each component and optimize as needed.&lt;br/&gt;
&lt;br/&gt;
As we appear to be having a vote for or against jmx support in general, I&amp;#39;ll also send an email to the list, to gather some more info on this topic.</comment>
                    <comment id="13086919" author="jukkaz" created="Thu, 18 Aug 2011 10:50:31 +0100"  >How about using a temporary branch for this to sync up on the code? Once the solution is stable enough we can merge it back to trunk. I&amp;#39;ll probably need to work on JMX support (not on stats but more on general JMX bindings as discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2936&quot; title=&quot;JMX Bindings for Jackrabbit&quot;&gt;&lt;strike&gt;JCR-2936&lt;/strike&gt;&lt;/a&gt;), so it would be good if we could both work on the same baseline code.</comment>
                    <comment id="13086929" author="tmueller" created="Thu, 18 Aug 2011 11:12:12 +0100"  >&amp;gt; - 10% slower?&lt;br/&gt;
&lt;br/&gt;
I compared the 50% times. Example: test 4 no changes, ConcurrentReadWriteTest: 1902; with changes: 2317. Well, I don&amp;#39;t even know if the numbers are &amp;quot;ms&amp;quot; or &amp;quot;op/s&amp;quot; - you tell me :-)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; premature optimization&lt;br/&gt;
&lt;br/&gt;
My comments are about simplicity and not that much about performance. Simplifying the code almost always makes sense. Simplifying early makes a lot of sense, because people tend to be afraid to simplify &amp;#39;working&amp;#39; code later on. &lt;br/&gt;
&lt;br/&gt;
Using double instead of BigDecimal just simpler. Avoiding divisions in methods that are called very often also seems logical, specially if the resulting code is actually simpler and better (that is: always correct, which it&amp;#39;s not currently). Using volatile versus locks is also about simplicity, plus it avoids nasty deadlocks.&lt;br/&gt;
&lt;br/&gt;
The rest of my comments are also not really about performance.&lt;br/&gt;
</comment>
                    <comment id="13086931" author="stefan@jira" created="Thu, 18 Aug 2011 11:15:01 +0100"  >&amp;gt; I also don&amp;#39;t see the regression risk, [...]&lt;br/&gt;
&lt;br/&gt;
how about this one for example? ;)&lt;br/&gt;
&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://builds.apache.org/job/Jackrabbit-trunk/ws/trunk/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/jmx/query/QueryStatManager.java&amp;gt;:&quot;&gt;https://builds.apache.org/job/Jackrabbit-trunk/ws/trunk/jackrabbit-core/src/main/java/org/apache/jackrabbit/core/jmx/query/QueryStatManager.java&amp;amp;gt;:&lt;/a&gt;[107,37] type javax.management.openmbean.OpenType does not take parameters&lt;br/&gt;
&lt;br/&gt;
i am not a jmx expert but my gut feeling tells me that there could be potential issues with different deployments/environments/etc...&lt;br/&gt;
&lt;br/&gt;
that&amp;#39;s why i don&amp;#39;t like ootb jmx support. in your patch you&amp;#39;re calling javax.management.* code unconditionally from the RepositoryImpl constructor. &lt;br/&gt;
IMO that should at least be made dependent on configuration. </comment>
                    <comment id="13086942" author="jukkaz" created="Thu, 18 Aug 2011 11:42:15 +0100"  >&amp;gt; i am not a jmx expert but my gut feeling tells me that there could be potential issues with different&lt;br/&gt;
&amp;gt; deployments/environments/etc...&lt;br/&gt;
&lt;br/&gt;
JMX is included as a standard part of Java 5 and higher. The OpenType issue from above is simply a case of using Java 6 features when we should still be sticking with what&amp;#39;s included in Java 5.</comment>
                    <comment id="13086955" author="schans" created="Thu, 18 Aug 2011 12:29:05 +0100"  >I would love to have more stats available from jackrabbit and jmx is a good way to expose them imo. I do agree with Stefan that we should have at least a global config option to turn all the stats gathering and/or jmx stuff off. &lt;br/&gt;
&lt;br/&gt;
Another idea I&amp;#39;ve been playing with is to expose those stats (and config) also over jcr in the same manner that you have a &amp;quot;/proc&amp;quot; filesystem on linux systems. Once we actually gather the statistic it probably wouldn&amp;#39;t be too hard to do that and it could make it really easy to fetch those stats for applications that are already connecting to the repository. </comment>
                    <comment id="13086979" author="stefan@jira" created="Thu, 18 Aug 2011 13:19:06 +0100"  >&amp;nbsp;&amp;gt; JMX is included as a standard part of Java 5 and higher. The OpenType issue from above is simply a case of using Java 6 features when we should still be sticking with what&amp;#39;s included in Java 5.&lt;br/&gt;
&lt;br/&gt;
sure, however that issue showed up as the first regression right after the commit (QED ;).&lt;br/&gt;
&lt;br/&gt;
while jmx is a standard part of java &amp;gt;=5, i guess we&amp;#39;ll have to deal with custom MBeanServer implementations depending on the deployment/environment. </comment>
                    <comment id="13087706" author="alex.parvulescu" created="Fri, 19 Aug 2011 14:40:10 +0100"  >hi all, &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m attaching a reworked version of the JMX support.&lt;br/&gt;
I&amp;#39;ll attach it here, I see you like this task better, instead of the parent issue :)&lt;br/&gt;
&lt;br/&gt;
The changes:&lt;br/&gt;
&amp;nbsp;- renamed to StatManager, as the core service will provide pure stats, and extra if needed also expose them via jmx. Pure stats should give anybody the freedom they need to build tools the way they need to.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- there will be a system property &amp;#39;enableJmxSupport&amp;#39; which will determine if the StatManager should start the jmx Server not&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- the default JMX support will include just one bean called &amp;#39;DynamicRegistry&amp;#39; (see JmxRegistry for details), this allows anybody to enable jmx support for other Stats.&lt;br/&gt;
So you&amp;#39;ll see (for now) 2 methods on the DynamicRegistry: enableCoreStatJmx and enableQueryStatJmx.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- stats are disabled by default, this has nothing to do with JMX. If you want stats, you&amp;#39;ll have to enable them, if you want stats via jmx, enable the jmx support for that Stat object.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- unit tests to provide a clearer example based on some code.&lt;br/&gt;
&lt;br/&gt;
Again, I&amp;#39;m not looking for feedback on performance of the code (yet!). The point of this patch was to build with the community&amp;#39;s support a good starting point for stats/jmx, and to make sure that collecting stats does not interfere with the raw performance.&lt;br/&gt;
As Stefan suggested, OOTB stats should be disabled, and without any impact on the core. To me this is step one. Step 2 is what happens when you enable the stats :)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; sure, however that issue showed up as the first regression right after the commit (QED ;). &lt;br/&gt;
Stefan, I have to say I&amp;#39;m sad that you would take a Java6 vs Java5 issue and turn it into an argument against jmx support. It is as simple as that, it was (my) tiny mistake, which I fixed after 5 mins of seeing it on the CI server.&lt;br/&gt;
But you have a good point, and now the Jmx is out of the default init of the repository.&lt;br/&gt;
&lt;br/&gt;
Jukka, a dedicated branch for this effort sound great! How should be proceed?&lt;br/&gt;
</comment>
                    <comment id="13087708" author="alex.parvulescu" created="Fri, 19 Aug 2011 14:40:41 +0100"  >second iteration of jmx support</comment>
                    <comment id="13088586" author="jukkaz" created="Mon, 22 Aug 2011 10:36:30 +0100"  >Let&amp;#39;s use the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2936&quot; title=&quot;JMX Bindings for Jackrabbit&quot;&gt;&lt;strike&gt;JCR-2936&lt;/strike&gt;&lt;/a&gt; branch I created for this and other JMX work.</comment>
                    <comment id="13101150" author="stefan@jira" created="Fri, 9 Sep 2011 13:21:40 +0100"  >@alex&lt;br/&gt;
thanks for the reworked patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3040&quot; title=&quot;JMX Stats for the Session&quot;&gt;&lt;strike&gt;JCR-3040&lt;/strike&gt;&lt;/a&gt;-v2.patch). &lt;br/&gt;
looks good so far.</comment>
                    <comment id="13123713" author="jukkaz" created="Sun, 9 Oct 2011 16:56:26 +0100"  >The &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2936&quot; title=&quot;JMX Bindings for Jackrabbit&quot;&gt;&lt;strike&gt;JCR-2936&lt;/strike&gt;&lt;/a&gt; branch is getting out of date, so I think we should start merging this to trunk. In revision 1180633 I committed the new o.a.j.core.jmx classes from the latest patch. I didn&amp;#39;t yet commit the integration bits since I think we still have some work to do there. Most notably I&amp;#39;d rather have the JMX classes depending on other parts of Jackrabbit instead of the other way around.&lt;br/&gt;
&lt;br/&gt;
Also, to make it easier to collect and expose statistics over a longer period, in revision 1180634 I introduced a simple mechanism for recording a time series using nothing but an AtomicLong instance as the event counter.</comment>
                    <comment id="13124279" author="jukkaz" created="Mon, 10 Oct 2011 17:36:53 +0100"  >I merged more of the &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2936&quot; title=&quot;JMX Bindings for Jackrabbit&quot;&gt;&lt;strike&gt;JCR-2936&lt;/strike&gt;&lt;/a&gt; branch to trunk in revision 1181060.</comment>
                    <comment id="13124526" author="schans" created="Mon, 10 Oct 2011 23:14:33 +0100"  >Hi,&lt;br/&gt;
&lt;br/&gt;
About the &amp;quot;integration bits&amp;quot;: I spent some time looking at how other (apache) projects like tomcat, camel, cxf, servicemix, etc) try to solve this, but every project seems to have chosen a different solution. Is there some consensus on how we want to go about this? Is there some project that has done this already really well that we can take as example? It make sense to me to spend some time to get this right so we can easily gradually expose more and more over jmx without having to change the &amp;quot;core&amp;quot; code too much.&lt;br/&gt;
&lt;br/&gt;
Bart</comment>
                    <comment id="13124899" author="jukkaz" created="Tue, 11 Oct 2011 11:02:07 +0100"  >I&amp;#39;m not aware of any best practices beyond the basic JMX documentation, so for now I&amp;#39;d prefer to avoid having too many JMX dependencies inside Jackrabbit core. Ideally the repository itself would just collect all the interesting information and a deployment could then decide whether to make that information available through JMX.&lt;br/&gt;
&lt;br/&gt;
The ways of making such information available should be flexible enough to allow for new bits to be exposed even without changing the APIs.</comment>
                    <comment id="13155510" author="alex.parvulescu" created="Tue, 22 Nov 2011 22:35:49 +0000"  >I&amp;#39;ll mark this one as fixed since the code is already in and everybody is happy</comment>
                </comments>
                    <attachments>
                    <attachment id="12489698" name="JCR-3040.patch" size="38045" author="alex.parvulescu" created="Mon, 8 Aug 2011 16:32:27 +0100" />
                    <attachment id="12490954" name="JCR-3040-v2.patch" size="76006" author="alex.parvulescu" created="Fri, 19 Aug 2011 14:40:41 +0100" />
                    <attachment id="12489699" name="jr-test.log" size="3309" author="alex.parvulescu" created="Mon, 8 Aug 2011 16:32:27 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 4 Aug 2011 14:22:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>36251</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191021</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>