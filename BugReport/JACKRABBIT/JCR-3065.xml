<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:50:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3065/JCR-3065.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3065] ConcurrentModificationException in FineGrainedISMLocking</title>
                <link>https://issues.apache.org/jira/browse/JCR-3065</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>We have a report where the FineGrainedISMLocking throws a ConcurrentModificationException (stacktrace&lt;br/&gt;
from a Jackrabbit 2.2.x):&lt;br/&gt;
&lt;br/&gt;
java.util.ConcurrentModificationException&lt;br/&gt;
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)&lt;br/&gt;
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.FineGrainedISMLocking$LockMap.hasDependency(FineGrainedISMLocking.java:388)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.FineGrainedISMLocking.acquireWriteLock(FineGrainedISMLocking.java:138)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.acquireWriteLock(SharedItemStateManager.java:1848)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.access$200(SharedItemStateManager.java:113)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager$Update.begin(SharedItemStateManager.java:563)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.beginUpdate(SharedItemStateManager.java:1457)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SharedItemStateManager.update(SharedItemStateManager.java:1487)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:351)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.XAItemStateManager.update(XAItemStateManager.java:354)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.LocalItemStateManager.update(LocalItemStateManager.java:326)&lt;br/&gt;
	at org.apache.jackrabbit.core.state.SessionItemStateManager.update(SessionItemStateManager.java:289)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemSaveOperation.perform(ItemSaveOperation.java:258)&lt;br/&gt;
	at org.apache.jackrabbit.core.session.SessionState.perform(SessionState.java:200)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.perform(ItemImpl.java:91)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.save(ItemImpl.java:329)&lt;br/&gt;
	at org.apache.jackrabbit.core.session.SessionSaveOperation.perform(SessionSaveOperation.java:42)&lt;br/&gt;
	at org.apache.jackrabbit.core.session.SessionState.perform(SessionState.java:200)&lt;br/&gt;
	at org.apache.jackrabbit.core.SessionImpl.perform(SessionImpl.java:355)&lt;br/&gt;
	at org.apache.jackrabbit.core.SessionImpl.save(SessionImpl.java:758)</description>
                <environment></environment>
            <key id="12521424">JCR-3065</key>
            <summary>ConcurrentModificationException in FineGrainedISMLocking</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mreutegg">Marcel Reutegger</assignee>
                                <reporter username="mreutegg">Marcel Reutegger</reporter>
                        <labels>
                    </labels>
                <created>Tue, 6 Sep 2011 09:31:22 +0100</created>
                <updated>Tue, 8 Nov 2011 15:47:02 +0000</updated>
                    <resolved>Tue, 6 Sep 2011 12:27:00 +0100</resolved>
                            <version>2.2</version>
                                <fixVersion>1.6.5</fixVersion>
                <fixVersion>2.0.5</fixVersion>
                <fixVersion>2.1.6</fixVersion>
                <fixVersion>2.2.9</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13097811" author="mreutegg" created="Tue, 6 Sep 2011 09:53:33 +0100"  >This is a bit unexpected and I don&amp;#39;t have a test case to reproduce it. AFAICS the usage of the maps in the slots array of the&lt;br/&gt;
LockMap are properly protected by the writerStateRWLock.&lt;br/&gt;
&lt;br/&gt;
I will additionally protect the maps with a synchronized block while looping over the key set.</comment>
                    <comment id="13097818" author="mreutegg" created="Tue, 6 Sep 2011 10:00:57 +0100"  >Proposed patch.</comment>
                    <comment id="13097841" author="jukkaz" created="Tue, 6 Sep 2011 10:30:26 +0100"  >+1 Looks good.&lt;br/&gt;
&lt;br/&gt;
One possible explanation for this is if we have multiple threads running inside the same transaction. Then the acquireReadLock() method could call the LockMap.addLock() method without acquiring the writeStateRWLock.&lt;br/&gt;
&lt;br/&gt;
The logic behind the relevant TransactionContext code is that in some cases different parts of a transaction are performed by different threads, so locks acquired by one part should apply also to the other parts of the transaction. The assumption here is that even if something like that happens, the transaction manager should still ensure that only one thread at a time is executing within the scope of the transaction. Perhaps we should explicitly enforce that?</comment>
                    <comment id="13097853" author="mreutegg" created="Tue, 6 Sep 2011 10:46:30 +0100"  >&amp;gt; [...] multiple threads running inside the same transaction.&lt;br/&gt;
&lt;br/&gt;
I also noticed that this could be a potential problem, but in this case there is no transaction wrapped around the save call.</comment>
                    <comment id="13097905" author="mreutegg" created="Tue, 6 Sep 2011 12:27:00 +0100"  >Committed patch in revision: 1165609</comment>
                    <comment id="13113332" author="jukkaz" created="Fri, 23 Sep 2011 12:13:02 +0100"  >Merged to the 2.2 branch in revision 1174654, to 2.1 in 1174656, to 2.0 in 1174657, and to 1.6 in 1174659.</comment>
                </comments>
                    <attachments>
                    <attachment id="12493129" name="JCR-3065.patch" size="960" author="mreutegg" created="Tue, 6 Sep 2011 10:00:57 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 6 Sep 2011 09:30:26 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>59615</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>250246</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>