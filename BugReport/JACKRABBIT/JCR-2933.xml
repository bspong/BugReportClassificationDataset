<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:43:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2933/JCR-2933.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2933] SQL2 Left Outer Join</title>
                <link>https://issues.apache.org/jira/browse/JCR-2933</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Create this nodes.&lt;br/&gt;
def n1 = root.addNode(&amp;quot;node1&amp;quot;, &amp;quot;sling:SamplePage&amp;quot;);&lt;br/&gt;
n1.setProperty(&amp;quot;n1prop1&amp;quot;, &amp;quot;page1&amp;quot;);&lt;br/&gt;
def n2 = n1.addNode(&amp;quot;node2&amp;quot;, &amp;quot;sling:SampleContent&amp;quot;);&lt;br/&gt;
n2.setProperty(&amp;quot;n2prop1&amp;quot;, &amp;quot;content1&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
Execute this Query:&lt;br/&gt;
Select * from [sling:SamplePage] as page left outer join [sling:SampleContent] as content on ISDESCENDANTNODE(content,page) where page.n1prop1 = &amp;#39;page1&amp;#39; and content.n2prop1 = &amp;#39;content1&amp;#39;;&lt;br/&gt;
The resultset have 1 row with 2 Nodes. This OK.&lt;br/&gt;
&lt;br/&gt;
Then execute this:&lt;br/&gt;
Select * from [sling:SamplePage] as page left outer join [sling:SampleContent] as content on ISDESCENDANTNODE(content,page) where page.n1prop1 = &amp;#39;page1&amp;#39; and content.n2prop1 = &amp;#39;XXXXX&amp;#39;;&lt;br/&gt;
&lt;br/&gt;
The resultset has 1 row with 1 node.&lt;br/&gt;
This wrong. The result should be 0 rows.&lt;br/&gt;
&lt;br/&gt;
Old Versions, prior 2.2.2 have also 0 rows as result.&lt;br/&gt;
&lt;br/&gt;
Also, if nodes &amp;quot;n2&amp;quot; not exists, jackrabbit reports 1 row as result.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
            <key id="12502689">JCR-2933</key>
            <summary>SQL2 Left Outer Join</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="my1234">Manfred Sattler</reporter>
                        <labels>
                    </labels>
                <created>Tue, 29 Mar 2011 10:31:30 +0100</created>
                <updated>Fri, 23 Sep 2011 15:26:32 +0100</updated>
                    <resolved>Fri, 15 Apr 2011 13:34:06 +0100</resolved>
                            <version>2.2.4</version>
                                <fixVersion>2.2.7</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13012478" author="jukkaz" created="Tue, 29 Mar 2011 14:40:42 +0100"  >This is the correct behaviour for a left outer join. The previously incorrect behaviour was fixed in Jackrabbit 2.1.2 as a part of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2718&quot; title=&quot;Incorrect results from joins on multivalued properties&quot;&gt;&lt;strike&gt;JCR-2718&lt;/strike&gt;&lt;/a&gt;.</comment>
                    <comment id="13012497" author="jukkaz" created="Tue, 29 Mar 2011 15:14:55 +0100"  >As discussed on users@, this actually is a problem. The join should only look at the join condition, not the where clauses.</comment>
                    <comment id="13013916" author="alex.parvulescu" created="Thu, 31 Mar 2011 11:54:54 +0100"  >Attached patch + test that replicates the indicated (and hopefully fixed ;) problem.&lt;br/&gt;
&lt;br/&gt;
The solution consists of:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- in the case where there is an Outer Join with a &amp;#39;WHERE&amp;#39; condition, we&amp;#39;ll run 2 queries in lucene, one that has only the &amp;#39;ON&amp;#39; condition from the join, and the other one that has &amp;#39;ON&amp;#39; and &amp;#39;WHERE&amp;#39;.&lt;br/&gt;
This way it is easy to distinguish between a &amp;#39;null&amp;#39; row and a row that must not be included in the result set.&lt;br/&gt;
&lt;br/&gt;
I haven&amp;#39;t tested in other scenarios than a 2 way Outer Join, this is also indicated by the test.&lt;br/&gt;
&lt;br/&gt;
If you feel that there are corner cases that are not covered, please let me now, or even better submit a patch to the test, this way we can keep track of these things.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13014397" author="my1234" created="Fri, 1 Apr 2011 06:14:48 +0100"  >Can you check this testcase. It gives me 1 row. This is not correct.&lt;br/&gt;
The property &amp;quot;prop1&amp;quot; from the first two nodes have the same value.&lt;br/&gt;
def n1 = root.addNode(&amp;quot;node1&amp;quot;, &amp;quot;test:SamplePage&amp;quot;);&lt;br/&gt;
n1.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;page1&amp;quot;);&lt;br/&gt;
def n2 = root.addNode(&amp;quot;node2&amp;quot;, &amp;quot;test:SamplePage&amp;quot;);&lt;br/&gt;
n2.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;page1&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
def n3 = n1.addNode(&amp;quot;node3&amp;quot;, &amp;quot;test:SampleContent&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Select * from [test:SamplePage] as page left outer join [test:SampleContent] as content on ISDESCENDANTNODE(content,page) where page.prop1 = &amp;#39;page1&amp;#39; and content.prop1 = &amp;#39;XXX&amp;#39;   </comment>
                    <comment id="13014470" author="alex.parvulescu" created="Fri, 1 Apr 2011 09:43:15 +0100"  >yes Manfred, you are right :)&lt;br/&gt;
&lt;br/&gt;
I fixed it and added the new testcase.&lt;br/&gt;
&lt;br/&gt;
Attaching the new version of the patch.</comment>
                    <comment id="13014479" author="alex.parvulescu" created="Fri, 1 Apr 2011 09:58:12 +0100"  >oups, I seriously forgot some System.out(s) in there :)&lt;br/&gt;
&lt;br/&gt;
here&amp;#39;s the proper version of the fix.</comment>
                    <comment id="13014481" author="tmueller" created="Fri, 1 Apr 2011 10:02:22 +0100"  >I&amp;#39;m not sure if the proposed solution always works, specially for 3+ way joins. I think there should be a randomized test case that compares the result with a relational database. I wrote such a test case, it could be adapted to SQL2: &lt;a href=&quot;http://code.google.com/p/h2database/source/browse/trunk/h2/src/test/org/h2/test/synth/TestNestedJoins.java&quot;&gt;http://code.google.com/p/h2database/source/browse/trunk/h2/src/test/org/h2/test/synth/TestNestedJoins.java&lt;/a&gt; - this test case found quite a lot of problems, including problems in Apache Derby: &lt;a href=&quot;https://issues.apache.org/jira/browse/DERBY-4712&quot; title=&quot;Complex nested joins problems&quot;&gt;&lt;strike&gt;DERBY-4712&lt;/strike&gt;&lt;/a&gt; - therefore it probably makes sense to run the test against other databases as well. I think the most stable database is PostgreSQL, but we can&amp;#39;t include it in our unit tests. Therefore, I would pick H2 and Apache Derby (meaning run the test against Jackrabbit, H2, Derby, and compare the results).</comment>
                    <comment id="13014487" author="alex.parvulescu" created="Fri, 1 Apr 2011 10:25:42 +0100"  >wow&lt;br/&gt;
&lt;br/&gt;
as impressive as that is, I&amp;#39;m not even sure that is within JR&amp;#39;s capabilities.&lt;br/&gt;
&lt;br/&gt;
Can you please submit a test that does a proper 3 way join, to have something to look at? I&amp;#39;d like to see a simple test case working (or breaking) before we start doing something like&lt;br/&gt;
...&lt;br/&gt;
select t0.x , t1.x , t2.x , t3.x , t4.x , t5.x , t6.x , t7.x , t8.x from (((t0 inner join ((t1 right outer join (t2 inner join t3 on t2.x = t3.x ) on t1.x = t2.x ) left outer join (t4 inner join t5 on t4.x = t5.x ) on t1.x = t4.x ) on t0.x = t2.x ) left outer join (t6 inner join t7 on t6.x = t7.x ) on t1.x = t6.x ) inner join t8 on t5.x = t8.x ); &lt;br/&gt;
...&lt;br/&gt;
&lt;br/&gt;
As I see it, join are something new in JR, so I wouldn&amp;#39;t go breaking everything just yet. There are also very few test cases that cover them.&lt;br/&gt;
&lt;br/&gt;
I find it worrying that the simple outer join (2 way if you will) does not work properly. Also, I&amp;#39;d have that working and mark the +3 way up as experimental, than having something that does not work at all.</comment>
                    <comment id="13014491" author="tmueller" created="Fri, 1 Apr 2011 10:42:46 +0100"  >&amp;gt; mark the +3 way up as experimental, than having something that does not work at all. &lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s an option, but then it should be documented.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; There are also very few test cases&lt;br/&gt;
&amp;gt; I find it worrying that the simple outer join (2 way if you will) does not work properly.&lt;br/&gt;
&lt;br/&gt;
Yes, that&amp;#39;s why I think we should add more test cases :-)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I&amp;#39;m not even sure that is within JR&amp;#39;s capabilities. &lt;br/&gt;
&lt;br/&gt;
I know Jackrabbit doesn&amp;#39;t support explicitly nested joins (using &amp;quot;()&amp;quot;), but nesting can be influences with placing the join condition:&lt;br/&gt;
&lt;br/&gt;
SELECT * FROM c LEFT OUTER JOIN a LEFT OUTER JOIN b ON ISCHILDNODE(a, b) ON ISCHILDNODE(a, c)&lt;br/&gt;
==&amp;gt;&lt;br/&gt;
SELECT * FROM c LEFT OUTER JOIN (a LEFT OUTER JOIN b ON ISCHILDNODE(a, b)) ON ISCHILDNODE(a, c)&lt;br/&gt;
&lt;br/&gt;
and&lt;br/&gt;
SELECT * FROM a LEFT OUTER JOIN b ON ISCHILDNODE(a, b) LEFT OUTER JOIN c ON ISCHILDNODE(a, c)&lt;br/&gt;
==&amp;gt;&lt;br/&gt;
SELECT * FROM (a LEFT OUTER JOIN b ON ISCHILDNODE(a, b)) LEFT OUTER JOIN c ON ISCHILDNODE(a, c)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13014535" author="my1234" created="Fri, 1 Apr 2011 13:17:56 +0100"  >The next errorcase.:)&lt;br/&gt;
The result from this query is 0. should be 2.&lt;br/&gt;
&lt;br/&gt;
def n1 = root.addNode(&amp;quot;node1&amp;quot;, &amp;quot;test:SamplePage&amp;quot;);&lt;br/&gt;
n1.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;page1&amp;quot;);&lt;br/&gt;
def n2 = root.addNode(&amp;quot;node2&amp;quot;, &amp;quot;test:SamplePage&amp;quot;);&lt;br/&gt;
n2.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;page2&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
def n3 = n1.addNode(&amp;quot;node3&amp;quot;, &amp;quot;test:SampleContent&amp;quot;);&lt;br/&gt;
n3.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;content3&amp;quot;);&lt;br/&gt;
def n4 = n2.addNode(&amp;quot;node4&amp;quot;, &amp;quot;test:SampleContent&amp;quot;);&lt;br/&gt;
n4.setProperty(&amp;quot;prop1&amp;quot;, &amp;quot;content3&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
sql = &amp;quot;Select * from [test:SamplePage] as page left outer join [test:SampleContent] as content on ISDESCENDANTNODE(content,page) where (page.prop1 = &amp;#39;page1&amp;#39; and content.prop1 = &amp;#39;content3&amp;#39;) or (page.prop1=&amp;#39;page2&amp;#39; and content.prop1=&amp;#39;content3&amp;#39;) &amp;quot;&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Have you ever tested with more as 3 nodes?&lt;br/&gt;
if the left side have many rows, the performance is very poor.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="13014727" author="alex.parvulescu" created="Fri, 1 Apr 2011 17:40:18 +0100"  >Hi Manfred, &lt;br/&gt;
you are really devoted to this issue, thank you for putting in the time.&lt;br/&gt;
&lt;br/&gt;
Here, I think you might have hit a nice usecase for &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2852&quot; title=&quot;Support multi-selector OR constraints in join queries&quot;&gt;&lt;strike&gt;JCR-2852&lt;/strike&gt;&lt;/a&gt;. A join with an OR condition didn&amp;#39;t use to work 3 weeks ago, I guess you could say is it still undergoing bugfixes and tests ;)&lt;br/&gt;
I&amp;#39;ll look at this some more, see what I can come up with.&lt;br/&gt;
&lt;br/&gt;
In the mean time, I think you&amp;#39;ll find that this query works:&lt;br/&gt;
select * from [test:SamplePage] as page left outer join [test:SampleContent] as content on ISDESCENDANTNODE(content,page) where (page.prop1 = &amp;#39;page1&amp;#39; or page.prop1=&amp;#39;page2&amp;#39;) and content.prop1=&amp;#39;content3&amp;#39;&lt;br/&gt;
&lt;br/&gt;
As you are referencing both sides of the join on both OR conditions, this will never give you the performance you are apparently seeking.&lt;br/&gt;
&lt;br/&gt;
Talking about performance, there are other pending issues that deal with certain aspects of SQL2 that are not up to speed. And as this is a tricky issue to tackle at best, please refrain yourself from saying things like &lt;br/&gt;
...&lt;br/&gt;
Have you ever tested with more as 3 nodes? &lt;br/&gt;
if the left side have many rows, the performance is very poor. &lt;br/&gt;
...&lt;br/&gt;
this does not help anybody, especially when you are putting a thing like performance on the table.&lt;br/&gt;
&lt;br/&gt;
Performance does not come OOTB, and if you eve have questions or need help with anything, just ask on the list, there are plenty of people willing to help.&lt;br/&gt;
</comment>
                    <comment id="13014884" author="my1234" created="Sat, 2 Apr 2011 00:51:24 +0100"  >Hello Alex.&lt;br/&gt;
&lt;br/&gt;
I see the Sql2 is far from usuability.&lt;br/&gt;
My Customer-Application has an Query Generator, this highly depends on SQL2.&lt;br/&gt;
&lt;br/&gt;
I have this implemented some time ago, with jackrabbit 2.0.0.&lt;br/&gt;
With the old sql2.  This worked, but very  slow.&lt;br/&gt;
&lt;br/&gt;
In the lasttime then i haved patched the old Sql2-Implementierung(A bit hackish),&lt;br/&gt;
but this works much more better as the new implementierung.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Now i was just about to  go with the mainstream and use the new implementation, but i have not so much hope, that this will work.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
</comment>
                    <comment id="13016740" author="my1234" created="Thu, 7 Apr 2011 08:31:47 +0100"  >No answer?</comment>
                    <comment id="13016821" author="alex.parvulescu" created="Thu, 7 Apr 2011 12:51:05 +0100"  >Hi Manfred,&lt;br/&gt;
&lt;br/&gt;
finally an answer :)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m attatching a new version of the patch, that includes the upgraded version of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2852&quot; title=&quot;Support multi-selector OR constraints in join queries&quot;&gt;&lt;strike&gt;JCR-2852&lt;/strike&gt;&lt;/a&gt; also.&lt;br/&gt;
I&amp;#39;ve also added a test for the latest problem (testOuterJoinDoubleJoinSplit).&lt;br/&gt;
&lt;br/&gt;
Some performance things you should consider: sometimes the query engine will split a given query into more subqueries that will be merged at runtime.&lt;br/&gt;
This is not really documented, it is on my todo list :)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve also started the work for a query debugger.&lt;br/&gt;
&lt;br/&gt;
To see it in action just enable debug logging for QueryEngine.&lt;br/&gt;
...just add this to logback-test.xml when you run a test:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;logger name=&amp;quot;org.apache.jackrabbit.core.query.lucene.join.QueryEngine&amp;quot; level=&amp;quot;DEBUG&amp;quot; /&amp;gt;&lt;br/&gt;
...and look at the log (target/jcr.log).&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ve had to time to look at tests for 3 way joins. that will be next I guess.</comment>
                    <comment id="13020275" author="alex.parvulescu" created="Fri, 15 Apr 2011 12:48:45 +0100"  >man, am I happy we have tests :)&lt;br/&gt;
&lt;br/&gt;
thanks jukka for keeping an eye on things</comment>
                    <comment id="13020287" author="jukkaz" created="Fri, 15 Apr 2011 13:34:06 +0100"  >Thanks! I committed the latest patch in revision 1092683. (I assumed the truetrue was a typo, and removed it. :-)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m resolving this as fixed. Let&amp;#39;s use followup issues for any further fixes and other improvements.</comment>
                    <comment id="13037984" author="alex.parvulescu" created="Mon, 23 May 2011 16:05:55 +0100"  >Merged to 2.2 branch in rev 1126536 and 1126527(child issue)</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12493847">JCR-2852</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="12310051">
                <name>Supercedes</name>
                                                <inwardlinks description="is superceded by">
                            <issuelink>
            <issuekey id="12511144">JCR-3000</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12475085" name="JCR-2933.patch" size="21149" author="alex.parvulescu" created="Thu, 31 Mar 2011 11:54:54 +0100" />
                    <attachment id="12475203" name="JCR-2933-v2.patch" size="22798" author="alex.parvulescu" created="Fri, 1 Apr 2011 09:43:15 +0100" />
                    <attachment id="12475205" name="JCR-2933-v3.patch" size="22625" author="alex.parvulescu" created="Fri, 1 Apr 2011 09:58:12 +0100" />
                    <attachment id="12475700" name="JCR-2933-v4.patch" size="52262" author="alex.parvulescu" created="Thu, 7 Apr 2011 12:51:05 +0100" />
                    <attachment id="12476448" name="JCR-2933-v5.patch" size="52281" author="alex.parvulescu" created="Fri, 15 Apr 2011 12:48:45 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 29 Mar 2011 13:40:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>59514</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>250280</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>