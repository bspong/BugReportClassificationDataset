<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:44:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-3089/JCR-3089.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-3089] javax.jcr.RepositoryException when a JOIN SQL2 query is send via Davex and has results</title>
                <link>https://issues.apache.org/jira/browse/JCR-3089</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>see the following thread for details:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/users@jackrabbit.apache.org/msg17975.html&quot;&gt;http://www.mail-archive.com/users@jackrabbit.apache.org/msg17975.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
assuming a data structure as follows:&lt;br/&gt;
/foo [nt:unstructured]&lt;br/&gt;
/foo/bar [nt:unstructured]&lt;br/&gt;
/foo/bar@lala = huii (lala is string property of bar)&lt;br/&gt;
/ding [nt:unstructured]&lt;br/&gt;
/ding@dong = ##barUUID### (dong is a property of type &amp;quot;Reference&amp;quot;)&lt;br/&gt;
&lt;br/&gt;
then the following code will throw an exception:&lt;br/&gt;
&lt;br/&gt;
DavexClient Client = new DavexClient(url);&lt;br/&gt;
Repository repo = Client.getRepository();&lt;br/&gt;
Credentials sc = new SimpleCredentials(&amp;quot;admin&amp;quot;,&amp;quot;admin&amp;quot;.toCharArray());&lt;br/&gt;
Session s = repo.login(sc,workspace);&lt;br/&gt;
&lt;br/&gt;
QueryManager qm = s.getWorkspace().getQueryManager();&lt;br/&gt;
&lt;br/&gt;
String sql = &amp;quot;SELECT data.* FROM [nt:unstructured] AS data WHERE data.lala= &amp;#39;huii&amp;#39;&amp;quot;;&lt;br/&gt;
sql = &amp;quot;SELECT * FROM [nt:unstructured] AS data INNER JOIN [nt:unstructured] AS referring ON referring.[dong] = data.[jcr:uuid] WHERE data.lala = &amp;#39;huii&amp;#39;&amp;quot;;&lt;br/&gt;
sql = &amp;quot;SELECT * FROM [nt:unstructured] AS data INNER JOIN [nt:unstructured] AS referring ON ISDESCENDANTNODE(data, referring) WHERE data.lala = &amp;#39;huii&amp;#39;&amp;quot;;&lt;br/&gt;
Query query = qm.createQuery(sql, Query.JCR_SQL2);&lt;br/&gt;
QueryResult qr = query.execute();&lt;br/&gt;
&lt;br/&gt;
The first query works just fine and I can iterate over the result. Neither the second nor the third query works.&lt;br/&gt;
In both cases I end up with a javax.jcr.RepositoryException. Note the exception only happens if the query returns results. Aka a join will work just fine if it matches no rows.</description>
                <environment></environment>
            <key id="12525302">JCR-3089</key>
            <summary>javax.jcr.RepositoryException when a JOIN SQL2 query is send via Davex and has results</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="alex.parvulescu">Alex Parvulescu</assignee>
                                <reporter username="lsmith77">Lukas Kahwe Smith</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Sep 2011 12:59:46 +0100</created>
                <updated>Wed, 16 Nov 2011 18:16:23 +0000</updated>
                    <resolved>Wed, 5 Oct 2011 10:43:59 +0100</resolved>
                                            <fixVersion>2.2.10</fixVersion>
                <fixVersion>2.3.1</fixVersion>
                                <component>jackrabbit-jcr-server</component>
                <component>jackrabbit-spi2dav</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="13119976" author="alex.parvulescu" created="Tue, 4 Oct 2011 10:25:43 +0100"  >proposed patch + test.&lt;br/&gt;
&lt;br/&gt;
As Jukka suggested, the problem was the SearchResourceImpl didn&amp;#39;t know how to handle join results.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not sure what&amp;#39;s the best way to handle this (I just used the first selector in the join, similar to what already existed in the implementation in the case of multiple selectors in a select).&lt;br/&gt;
&lt;br/&gt;
I also added a test for &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2543&quot; title=&quot;spi2dav : Query offset not respected&quot;&gt;&lt;strike&gt;JCR-2543&lt;/strike&gt;&lt;/a&gt;, a limit-enabled query, to show that the limit constraint is being respected on 2.3&lt;br/&gt;
</comment>
                    <comment id="13119980" author="chregu" created="Tue, 4 Oct 2011 10:45:00 +0100"  >Works without exception now (but didn&amp;#39;t check the result, if it&amp;#39;s useful :))&lt;br/&gt;
But you have to remove &lt;br/&gt;
&amp;nbsp;&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;br/&gt;
from the pom.xml for jackrabbit-core to make it compile&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://gist.github.com/81882d2d3654c21c49d9&quot;&gt;https://gist.github.com/81882d2d3654c21c49d9&lt;/a&gt;</comment>
                    <comment id="13119981" author="anchela" created="Tue, 4 Oct 2011 10:47:35 +0100"  >quickly had a look at the proposed patch and noticed that it uses jackrabbit-core specific functionality:&lt;br/&gt;
&lt;br/&gt;
+import org.apache.jackrabbit.core.query.lucene.join.JoinRow;&lt;br/&gt;
&lt;br/&gt;
the aim of the jcr-server project however was not to rely on jackrabbit-core specific features.&lt;br/&gt;
as far as i remember there is otherwise not dependency to jackrabbit-core (there was one in&lt;br/&gt;
the transaction handling which we commented later on with the remark: &lt;br/&gt;
&amp;quot;// commented, since server should be jackrabbit independent&amp;quot;.)&lt;br/&gt;
&lt;br/&gt;
i would therefore suggest that we try to find a solution that doesn&amp;#39;t rely on jackrabbit-core. was&lt;br/&gt;
that feasible?</comment>
                    <comment id="13120057" author="alex.parvulescu" created="Tue, 4 Oct 2011 14:14:23 +0100"  >ouch, my bad :)&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll dig some more for a cleaner solution</comment>
                    <comment id="13120130" author="alex.parvulescu" created="Tue, 4 Oct 2011 14:36:47 +0100"  >...and I&amp;#39;m back&lt;br/&gt;
patch v2 clean as a baby&amp;#39;s bottom, hehe.&lt;br/&gt;
&lt;br/&gt;
it appears that if you call row.getPath(&amp;quot;name&amp;quot;) works for simple rows and join rows, as opposed to row.getPath() which fails in the case of a join.</comment>
                    <comment id="13120135" author="anchela" created="Tue, 4 Oct 2011 14:47:13 +0100"  >&amp;gt; it appears that if you call row.getPath(&amp;quot;name&amp;quot;) works for simple rows and join rows, as opposed to row.getPath() which fails in the case of a join. &lt;br/&gt;
&lt;br/&gt;
could you add that short explanation in the code as well? that makes the code more readable than just referring to a bug nummer.&lt;br/&gt;
anybody looking at the code will immediately understand what you are doing and why... &lt;br/&gt;
&lt;br/&gt;
something like:&lt;br/&gt;
&lt;br/&gt;
-            String itemPath = row.getPath();&lt;br/&gt;
+            /* Use Row#getPath(String) which works for both simple rows and join rows (in contrast to Row#getPath() &lt;br/&gt;
+                see also &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3089&quot;&gt;https://issues.apache.org/jira/browse/JCR-3089&lt;/a&gt; */&lt;br/&gt;
+            final String itemPath = row.getPath(sn.get(0));&lt;br/&gt;
&lt;br/&gt;
thanks.</comment>
                    <comment id="13120149" author="alex.parvulescu" created="Tue, 4 Oct 2011 15:10:47 +0100"  >yes, sure. I&amp;#39;ve added it to the code.&lt;br/&gt;
&lt;br/&gt;
@Christian, I didn&amp;#39;t check the results either ;) if the queries stop working, somebody will say something probably.&lt;br/&gt;
&lt;br/&gt;
thanks Angela for keeping an eye out!&lt;br/&gt;
&lt;br/&gt;
if all is ok, I&amp;#39;ll commit the patch directly. I don&amp;#39;t see a need for a v3.</comment>
                    <comment id="13120777" author="alex.parvulescu" created="Wed, 5 Oct 2011 10:43:59 +0100"  >I&amp;#39;ll take the lack of additional comments as a +1 :)&lt;br/&gt;
&lt;br/&gt;
fixed on trunk in revision: 1179124.</comment>
                    <comment id="13121880" author="lsmith77" created="Thu, 6 Oct 2011 13:30:44 +0100"  >I noticed that now I get some columns without a dcr:value&lt;br/&gt;
Is this expected?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;dcr:column&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;dcr:name&amp;gt;jcr:path&amp;lt;/dcr:name&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;dcr:selectorName&amp;gt;referring&amp;lt;/dcr:selectorName&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;/dcr:column&amp;gt;</comment>
                    <comment id="13121920" author="alex.parvulescu" created="Thu, 6 Oct 2011 14:18:48 +0100"  >that depends on what queries you are running.&lt;br/&gt;
&lt;br/&gt;
For inner joins, the answer *should* be no. it wouldn&amp;#39;t be normal to have null values for some selectors.&lt;br/&gt;
But you can also have outer joins, where you&amp;#39;ll probably have this situation, and it would be ok. &lt;br/&gt;
&lt;br/&gt;
Can you run the query directly against the repo and see what results you get? &lt;br/&gt;
I didn&amp;#39;t add any functional tests to the patch, just a dummy one to make sure that joins over davex don&amp;#39;t break anymore.</comment>
                    <comment id="13121933" author="lsmith77" created="Thu, 6 Oct 2011 14:23:45 +0100"  >yes this happened for a LEFT OUTER JOIN.&lt;br/&gt;
but thinking about it the problem is more that in my PHP layer we currently just ignore the selectorName, which means that the jcr:path in the result set is probably getting overwritten which is actually what is causing issues on my side.&lt;br/&gt;
&lt;br/&gt;
so likely everything is ok here ..</comment>
                    <comment id="13121964" author="alex.parvulescu" created="Thu, 6 Oct 2011 15:07:44 +0100"  >&amp;gt; yes this happened for a LEFT OUTER JOIN&lt;br/&gt;
phiew, I was expecting a bug here, good news ;)&lt;br/&gt;
&lt;br/&gt;
you kinda lost me for a moment, mostly because I&amp;#39;m not 100% sure what&amp;#39;s supposed to be in the webdav response.&lt;br/&gt;
&lt;br/&gt;
if you have some scenarios/tests in mind that you&amp;#39;d like to add, just list them here, I&amp;#39;m sure we&amp;#39;ll get around to adding them.&lt;br/&gt;
(unit tests are a strong candidate for documentation sometimes)</comment>
                    <comment id="13121997" author="anchela" created="Thu, 6 Oct 2011 16:11:47 +0100"  >regarding tests: the only thing that counts with respect to jcr-remoting is if the setup jcr2spi-spi2dav(ex)-jcrserver works properly and&lt;br/&gt;
returns the expected result when using JCR API operations on the jcr-end of the chain. that&amp;#39;s our reference and use-case.&lt;br/&gt;
&lt;br/&gt;
and it can be easily verified by adding tests to jcr2spi test suite. as far as i remember the jcr2dav module has an integrationTesting profile&lt;br/&gt;
that runs all available tests for the mentioned setup.</comment>
                    <comment id="13122012" author="alex.parvulescu" created="Thu, 6 Oct 2011 16:44:33 +0100"  >yes, I agree.&lt;br/&gt;
&lt;br/&gt;
when I said test scenarios I was referring to, as you very well put it: &amp;quot;returns the expected result&amp;quot;.&lt;br/&gt;
the patch came with a few tests but It did not cover the &amp;#39;outer join&amp;#39; scenario, as Lukas pointed out.&lt;br/&gt;
the point of the comment was not to find different ways to test, but to find (and add) useful tests. &lt;br/&gt;
&lt;br/&gt;
I may be wrong but before the patch there were no sql2 query tests. As sql2 would eventually be the default query engine, I&amp;#39;d say welcome to anybody contributing to the test effort, even if it&amp;#39;s just scenarios.&lt;br/&gt;
...as you can see I&amp;#39;m a big fan of sql2 :)&lt;br/&gt;
</comment>
                    <comment id="13151393" author="jukkaz" created="Wed, 16 Nov 2011 18:16:23 +0000"  >Merged to the 2.2 branch in revision 1202790.</comment>
                </comments>
                    <attachments>
                    <attachment id="12497602" name="JCR-3089.patch" size="4227" author="alex.parvulescu" created="Tue, 4 Oct 2011 10:25:43 +0100" />
                    <attachment id="12497635" name="JCR-3089-v2.patch" size="3261" author="alex.parvulescu" created="Tue, 4 Oct 2011 14:36:47 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 4 Oct 2011 09:25:43 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>41028</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>250234</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>