<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:48:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2619/JCR-2619.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2619] improved internal representation of DATE values</title>
                <link>https://issues.apache.org/jira/browse/JCR-2619</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>DATE values are currently internally represented as java.util.Calendar objects.&lt;br/&gt;
&lt;br/&gt;
Calendar objects have a huge memory footprint (approx 200bytes per instance) &lt;br/&gt;
and are mutable.&lt;br/&gt;
&lt;br/&gt;
i suggest to replace the internal DATE representation with a ISO8601 format string&lt;br/&gt;
(immutable and approx. 85-90% smaller footprint).</description>
                <environment></environment>
            <key id="12463022">JCR-2619</key>
            <summary>improved internal representation of DATE values</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="stefan@jira">Stefan Guggisberg</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Apr 2010 15:26:33 +0100</created>
                <updated>Tue, 8 Nov 2011 15:52:14 +0000</updated>
                    <resolved>Wed, 28 Apr 2010 13:36:35 +0100</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>jackrabbit-core</component>
                <component>jackrabbit-spi-commons</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12860935" author="stefan@jira" created="Mon, 26 Apr 2010 15:29:52 +0100"  >patch with proposed changes. &lt;br/&gt;
&lt;br/&gt;
there doesn&amp;#39;t seem to be a significant impact on performance (test cases run times are more or less identical).</comment>
                    <comment id="12861073" author="tripod" created="Mon, 26 Apr 2010 21:03:06 +0100"  >the memory footprint of a 25 char long string is about 88bytes (56% less) - if you really want to save space, why not use a byte array of the size 10 (for time and timezone) ?</comment>
                    <comment id="12861155" author="jukkaz" created="Mon, 26 Apr 2010 23:57:03 +0100"  >The tradeoff between a string and a binary representation is the performance impact on having to generate the string when the getString() method is called. If that&amp;#39;s not a concern, then I&amp;#39;d actually suggest that we simply use a single long value and avoid all object or array overhead.</comment>
                    <comment id="12861243" author="tmueller" created="Tue, 27 Apr 2010 05:56:41 +0100"  >You would need at least a long and an int to represent the date with the timezone.&lt;br/&gt;
A String does use quite a lot of memory, but it&amp;#39;s easier than writing a separate serialization.&lt;br/&gt;
</comment>
                    <comment id="12861353" author="jukkaz" created="Tue, 27 Apr 2010 11:32:42 +0100"  >Actually a 64-bit long is quite enough to store all the information in the ISO8601 date string subset used by JCR.</comment>
                    <comment id="12861362" author="tmueller" created="Tue, 27 Apr 2010 12:08:55 +0100"  >&amp;gt; a 64-bit long is quite enough&lt;br/&gt;
&lt;br/&gt;
Yes, if we restrict the year / don&amp;#39;t support weird time zones. For me it&amp;#39;s not a problem, but for some applications it may be.</comment>
                    <comment id="12861380" author="alexander.klimetschek" created="Tue, 27 Apr 2010 13:12:38 +0100"  >It should support all values that a Calendar object can have, including any timezone offset. The maximum that I know is +14, so having the timezone running from -15h to +15h, which would be -900 to +900 minutes, should cover every case.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://www.worldtimezone.com/faq.html&quot;&gt;http://www.worldtimezone.com/faq.html&lt;/a&gt;</comment>
                    <comment id="12861383" author="tmueller" created="Tue, 27 Apr 2010 13:20:17 +0100"  >&amp;gt; It should support all values that a Calendar object can have&lt;br/&gt;
&lt;br/&gt;
If we want to do that, then a &amp;quot;long&amp;quot; is not enough. Even long+int is not enough, because a java.util.TimeZone (which is used internally in each java.util.Calendar) is not just an offset, but also includes rules.&lt;br/&gt;
&lt;br/&gt;
If we want to support each possible java.util.Calendar, then we either need to use a String or store the Calendar object.&lt;br/&gt;
&lt;br/&gt;
If we only want to support possible values according to the JCR 2.0 specification (this I&amp;#39;m not sure), then a long is enough, for example in the format yyyymmddhhMMssMMMZZZZ.</comment>
                    <comment id="12861386" author="stefan@jira" created="Tue, 27 Apr 2010 13:59:31 +0100"  >i&amp;#39;ve chosen the ISO8601 string representations for the following reasons:&lt;br/&gt;
&lt;br/&gt;
a) smaller footprint &lt;br/&gt;
b) immutable (no cloning required)&lt;br/&gt;
c) human readable&lt;br/&gt;
d) the ISO8601 format is used extensively for  serialization &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;(persistence layer, remoting protocols, xml, etc),&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;=&amp;gt; getString()/toString() are very effiicient&lt;br/&gt;
&lt;br/&gt;
i&amp;#39;ve deliberately not chosen a more space-efficient&lt;br/&gt;
binary representation because of d)&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12861397" author="alexander.klimetschek" created="Tue, 27 Apr 2010 14:46:32 +0100"  >&amp;gt; If we only want to support possible values according to the JCR 2.0 specification (this I&amp;#39;m not sure)&lt;br/&gt;
&lt;br/&gt;
That&amp;#39;s what I actually meant.&lt;br/&gt;
&lt;br/&gt;
Most notably, JCR 1.0 and 2.0 specifies the date based on the iso8601 string representation without the timezone ID, only with the current offset. Hence including the timezone ID and thus potentially changing the date upon access because of the re-interpretation of the rules and thus a different offset, could break existing applications that currently must work around this issue by storing the timezone ID separately.&lt;br/&gt;
&lt;br/&gt;
(It would be nice to have the timezone ID included, of course, but the spec unfortunately did not get this 100% right.)&lt;br/&gt;
&lt;br/&gt;
&amp;gt; for example in the format yyyymmddhhMMssMMMZZZZ&lt;br/&gt;
&lt;br/&gt;
Might work. ZZZZ would probably be shifted into the positive region, eg. by adding -900 if we say -900 is the smallest negative timezone offset in minutes.</comment>
                    <comment id="12861398" author="alexander.klimetschek" created="Tue, 27 Apr 2010 14:50:51 +0100"  >&amp;gt; d) the ISO8601 format is used extensively for serialization &lt;br/&gt;
&amp;gt;   (persistence layer, remoting protocols, xml, etc)&lt;br/&gt;
&lt;br/&gt;
If the persistence layer can&amp;#39;t (currently) be changed to use the same serialization format (eg. the optimized long) w/o conversion, I agree that the string rep is probably better.</comment>
                    <comment id="12861788" author="stefan@jira" created="Wed, 28 Apr 2010 13:36:35 +0100"  >committed patch in svn  r938969 </comment>
                </comments>
                    <attachments>
                    <attachment id="12442855" name="JCR-2619_improved_internal_representation_of_DATE_values.patch" size="6354" author="stefan@jira" created="Mon, 26 Apr 2010 15:29:52 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 26 Apr 2010 20:03:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>97892</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280216</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>