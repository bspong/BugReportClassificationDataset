<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:33:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2503/JCR-2503.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2503]  inconsistent session and persistent state after ReferentialIntegrityException</title>
                <link>https://issues.apache.org/jira/browse/JCR-2503</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>When a ReferentialIntegrityException occurs in a session it seems that subsequent actions on that session may result in a inconsistent session state AND even inconsistent persistent state. The latter will even make jackrabbit fail to bootstrap an index from that persistent state.&lt;br/&gt;
&lt;br/&gt;
Typical rootcause:&lt;br/&gt;
&lt;br/&gt;
Caused by: org.apache.jackrabbit.core.state.NoSuchItemStateException: ddb9d3ea-59c1-4eb4-a83e-332f646d4f40&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.state.SharedItemStateManager.getItemState(SharedItemStateManager.java:270)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.MultiIndex.createIndex(MultiIndex.java:1082)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.MultiIndex.createIndex(MultiIndex.java:1088)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.MultiIndex.createInitialIndex(MultiIndex.java:395)&lt;br/&gt;
&lt;br/&gt;
Bootstrap failure:&lt;br/&gt;
&lt;br/&gt;
java.io.IOException: Error indexing workspace&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.MultiIndex.createInitialIndex(MultiIndex.java:402)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.lucene.SearchIndex.doInit(SearchIndex.java:465)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.query.AbstractQueryHandler.init(AbstractQueryHandler.java:59)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;at org.apache.jackrabbit.core.SearchManager.initializeQueryHandler(SearchManager.java:553)&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment>win7  / jdk 1.6.0_17 / mvn 2.0.10</environment>
            <key id="12456684">JCR-2503</key>
            <summary> inconsistent session and persistent state after ReferentialIntegrityException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="bramk">Bram de Kruijff</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Feb 2010 18:25:16 +0000</created>
                <updated>Fri, 23 Sep 2011 12:25:30 +0100</updated>
                    <resolved>Fri, 14 May 2010 14:46:39 +0100</resolved>
                            <version>1.6.2</version>
                <version>2.1</version>
                                <fixVersion>1.6.2</fixVersion>
                <fixVersion>2.2</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12835325" author="bramk" created="Thu, 18 Feb 2010 18:32:02 +0000"  >Attaching a junit test that reproduces the problem along with a trace on my setup against svn revision 911308. On both the 1.5 and 1.6 branch I get session- and persistent inconsistencies. Did not pay much attention to 2.0/trunk but there also is a problem in the session. However it looks like that one is not persistent(?). &lt;br/&gt;
&lt;br/&gt;
Any thoughts? Hope it is not me doing something really stupid :)</comment>
                    <comment id="12836553" author="martijnh" created="Mon, 22 Feb 2010 09:14:18 +0000"  >We regularly encounter inconsistent Jackrabbit repositories and the problems look very much like the one generated by the attached code. Any help on this is very much appreciated!</comment>
                    <comment id="12838361" author="stephanh" created="Thu, 25 Feb 2010 14:48:19 +0000"  >This is a failure-atomicity problem in which the ReferentialIntegrityException leaves the session in an inconsistent state. This issue is closely related to &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-288&quot;&gt;https://issues.apache.org/jira/browse/JCR-288&lt;/a&gt;. In &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-288&quot; title=&quot;inconsistent session state after Item/Session.save() throwing ReferentialIntegrityException&quot;&gt;&lt;strike&gt;JCR-288&lt;/strike&gt;&lt;/a&gt; the problem is fixed for items that were previously persisted. It does not work for items that never have been persisted.&lt;br/&gt;
&lt;br/&gt;
Rougly the following happens:&lt;br/&gt;
- Node P3 is created which was never persisted before and node P1 is removed, but this is not allowed due to referential integrity.&lt;br/&gt;
- Session.save calls ItemImpl.save on the root node.&lt;br/&gt;
- Before calling LocalItemStateManager.update() all item states are disposed by calling SessionItemStateManager.disposeTransientItemState and this invalidates the state and removes it from the transient store.&lt;br/&gt;
- The update call throws a ReferentialIntegrityException&lt;br/&gt;
- The exception causes the transient items to be restored by calling ItemImpl.restoreTransientItems. Restoring is a 3 step process:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- retrieve or recreate the item object&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- add the state to the SessionItemStateManager transient store again&lt;br/&gt;
&amp;nbsp;&amp;nbsp;- restore the properties in the state object&lt;br/&gt;
&lt;br/&gt;
The problem is that adding the state to the SessionItemStateManager again is only done for items that where previously persisted (i.e. !isTransient). As a result node P3 transient state no longer exists when the next save is performed and P3 is not created, but its parent contains a child node reference to P3.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
A possible solution is to:&lt;br/&gt;
- Call NodeImpl.restoreTransient and PropertyImpl.restoreTransient also for transient items.&lt;br/&gt;
- Change the NodeImpl.restoreTransient and PropertyImpl.restoreTransient methods to re-create the state for transient items.&lt;br/&gt;
&lt;br/&gt;
See attached patch which is based on the 1.5 branch.</comment>
                    <comment id="12841829" author="bramk" created="Fri, 5 Mar 2010 12:22:55 +0000"  >I can confirm this resolve the problem for me in the 1.5 branch.</comment>
                    <comment id="12867502" author="jukkaz" created="Fri, 14 May 2010 14:46:39 +0100"  >Thanks! Patch committed in revision 944258.</comment>
                    <comment id="12867509" author="jukkaz" created="Fri, 14 May 2010 15:35:35 +0100"  >Merged to the 1.6 branch in revision 944291.</comment>
                    <comment id="13061920" author="reschke" created="Fri, 8 Jul 2011 13:06:47 +0100"  >I don&amp;#39;t believe this is fully fixed; while investigating &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3016&quot; title=&quot;inconsistent repository after overlapping node add operations&quot;&gt;&lt;strike&gt;JCR-3016&lt;/strike&gt;&lt;/a&gt; we came across NodeImplTest.testReferentialIntegrityCorruption().&lt;br/&gt;
&lt;br/&gt;
After the succesful save() the test case tries various operations on P3, but it does not try nodeP3.getPath(). Adding this:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	String expectedPath = root.getPath() + &amp;quot;/P3&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(expectedPath, nodeP3.getPath());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (Exception e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;	e.printStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String msg =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2503&quot; title=&quot; inconsistent session and persistent state after ReferentialIntegrityException&quot;&gt;&lt;strike&gt;JCR-2503&lt;/strike&gt;&lt;/a&gt;: Getting path of P3. Corrupt session?&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.error(msg, e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fail(msg);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
makes the test fail with &lt;br/&gt;
&lt;br/&gt;
javax.jcr.InvalidItemStateException: Item does not exist anymore: ba3ef1ac-fc5a-4e03-b44b-031f5e75c537&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.itemSanityCheck(ItemImpl.java:116)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.perform(ItemImpl.java:90)&lt;br/&gt;
	at org.apache.jackrabbit.core.ItemImpl.getPath(ItemImpl.java:376)&lt;br/&gt;
	at org.apache.jackrabbit.core.NodeImplTest.testReferentialIntegrityCorruption(NodeImplTest.java:308)&lt;br/&gt;
&lt;br/&gt;
(this in 2.2.4)</comment>
                    <comment id="13113341" author="jukkaz" created="Fri, 23 Sep 2011 12:25:11 +0100"  >Closing the issue since the fix was already released earlier. Let&amp;#39;s use followup issues for any further work.</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12406321">JCR-1806</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12434651">JCR-2290</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12326422">JCR-288</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12436230" name="CorruptionTest.java" size="6962" author="bramk" created="Thu, 18 Feb 2010 18:32:02 +0000" />
                    <attachment id="12437003" name="JCR-2503.patch" size="5960" author="stephanh" created="Thu, 25 Feb 2010 14:49:02 +0000" />
                    <attachment id="12436231" name="JR-inconsistencies-1.5.txt" size="17406" author="bramk" created="Thu, 18 Feb 2010 18:32:02 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 22 Feb 2010 09:14:18 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>59612</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189817</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>