<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:38:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-15/JCR-15.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-15] PersistentNode.store() ignores status when storing</title>
                <link>https://issues.apache.org/jira/browse/JCR-15</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>While looking for a performance bottle neck I came across this issue: When a PersistentNodeState is asked to store itself in the PersistentNodeState.store() method, it calls its PersistenceManager to store it.&lt;br/&gt;
&lt;br/&gt;
This is not a problem in itself. The problem is, that if the PersistentNodeState has not been modified, the object does not need to be stored. Doiing it anyway just consumes cycles ! In the case of a deep, unmodified hierarchy, this just results in nodes being written to persistence for nothing.&lt;br/&gt;
&lt;br/&gt;
Comes to it, that this method sends an event, which in the case of an unmodified node state will be notifyStateUpdated(), which is complete nonsense, because nothing has actually been updated.&lt;br/&gt;
&lt;br/&gt;
I suggest to modify the PersistentNodeState.store() method to only do work if modified.&lt;br/&gt;
&lt;br/&gt;
Note: I encountered this issue, whily tracking down performance problems when creating versionable nodes, which turned out to be located somewhere within the PersistentVersionManager.createVersionHistory(NodeImpl) method. And there, predominantly the store() methods consume time.</description>
                <environment>Jackrabbit SVN revision 55714</environment>
            <key id="28051">JCR-15</key>
            <summary>PersistentNode.store() ignores status when storing</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="tripod">Tobias Bocanegra</assignee>
                                <reporter username="fmeschbe">Felix Meschberger</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Oct 2004 08:39:11 +0100</created>
                <updated>Fri, 11 Nov 2005 01:37:18 +0000</updated>
                    <resolved>Fri, 5 Nov 2004 14:20:32 +0000</resolved>
                                                                    <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="54789" author="fmeschbe" created="Fri, 29 Oct 2004 08:45:25 +0100"  >Just for checking I added &amp;quot;if (status == STATUS_EXISTING) return;&amp;quot; at the beginning of the PersistentNodeState.store() and performance increased depending on the number of history entries from 2x times way up to 10x and more !&lt;br/&gt;
&lt;br/&gt;
BTW: I just noticed, that PersistentPropertyState has the same issue  of storing without checking for the need to store.</comment>
                    <comment id="54793" author="tripod" created="Fri, 29 Oct 2004 09:18:00 +0100"  >The concept here is, that the PersistentNodeState should not be to intelligent, it is rather managed from outside. so store() will store and does not repsect the status.&lt;br/&gt;
the performance bottleneck in versioning is caused by the PersistenNode, which is a helper class for easily modifying persistent node states and in the PersistentVersionManager. the status of the underlaying node state should be respected there.</comment>
                    <comment id="54799" author="fmeschbe" created="Fri, 29 Oct 2004 10:03:31 +0100"  >&amp;gt; so store() will store and does not repsect the status.&lt;br/&gt;
&lt;br/&gt;
Ok, but why does it use the status to decide on which event to send ?? As it may be the case that the instance is not modified, an updated message does not make sense to me. On the other hand, there is not enough JavaDoc for me to know it :-)</comment>
                    <comment id="54953" author="tripod" created="Tue, 2 Nov 2004 21:36:24 +0000"  >added check to org.apache.jackrabbit.core.version.PersistentNode. (rev 56421)</comment>
                    <comment id="55041" author="fmeschbe" created="Thu, 4 Nov 2004 16:05:18 +0000"  >Now those additions provide a real performance boost. Unfortunately, the version history is lost when the repository is shutdown...&lt;br/&gt;
&lt;br/&gt;
The problem is, that ItemState and its descendents (NodeState, PersistentNodeState) do not properly handle the status field. For example the NodeState.addChildNodeEntry does not set the status to modified. Consequently, the NodeState is not transient when it is time to store and therefore, it is never stored.&lt;br/&gt;
&lt;br/&gt;
What happens is :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- create a mix:versionable node&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- internally creates the version history (call it XX) below&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jcr:persistentVersionStorage&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- creates nodes and properties below XX and stores them&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;- but as XX itself is not transient, XX is not stored.&lt;br/&gt;
&lt;br/&gt;
The net effect is that the version history nodes and properties exist, but the jcr:persistentVersionStorage node has no link to the version history node just created.&lt;br/&gt;
&lt;br/&gt;
The next time the repository is started, a NullPointerException is thrown if the version history of the node initially created is accessed.&lt;br/&gt;
&lt;br/&gt;
Steps to reproduce:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Start empty repository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Create a mix:versionabl node &amp;quot;/root&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Save &amp;quot;/&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Shutdown the repository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Start the repository&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;- Access the version history of &amp;quot;/root&amp;quot;&lt;br/&gt;
&lt;br/&gt;
At that point you get a NullPointerException on line 103 of the InternalVersionHistory class. (SVN Version 56602 of the class)</comment>
                    <comment id="55095" author="tripod" created="Fri, 5 Nov 2004 14:20:32 +0000"  >PersistentNode now sets proper status to underlaying PersistentNodeStates when beeing altered.</comment>
                    <comment id="12357237" author="stefan@jira" created="Fri, 11 Nov 2005 01:37:18 +0000"  >closing resolved issue</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 29 Oct 2004 08:18:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>141840</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>192075</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>