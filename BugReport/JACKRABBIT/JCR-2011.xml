<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:50:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2011/JCR-2011.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2011] Replacing mixin type doesn&apos;t preserve properties</title>
                <link>https://issues.apache.org/jira/browse/JCR-2011</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>NodeImpl.setPrimaryType(String) attempts to &amp;quot;redefine&amp;quot; nodes and properties that were defined by the previous node type if they also appear in the new type. If there is no matching definition for a node/property in the new type - or value conversion for matched node/property fails - only then are children removed. For example, say I have a node &amp;quot;harry&amp;quot;, with a primary type &amp;quot;Human&amp;quot; that defines a &amp;quot;bloodgroup&amp;quot; property. If I set the primary type to be an unrelated type &amp;quot;Animal&amp;quot; that has a similar &amp;quot;bloodgroup&amp;quot; property, then its property value will survive the call to setPrimaryType(&amp;quot;Animal&amp;quot;).&lt;br/&gt;
&lt;br/&gt;
The same is apparently not possible with mixins. NodeImpl.removeMixin(Name) immediately removes all children that were defined by the mixin (strictly, those that are not present in the effective node type resulting from the mixin being removed). In addition, NodeImpl.addMixin(Name) immediately throws a NodeTypeConflictException if you attempt to add a mixin defining an identically-named property prior to calling removeMixin. For example, say I have a node &amp;quot;matrix&amp;quot;, with a mixin type &amp;quot;movie&amp;quot; that defines a &amp;quot;title&amp;quot; property. If I wish to replace the &amp;quot;movie&amp;quot; mixin on that node with another &amp;quot;jcr:title&amp;quot; mixin type, the existing &amp;quot;title&amp;quot; property will be deleted.&lt;br/&gt;
&lt;br/&gt;
This occurs regardless of the order in which removeMixin and addMixin are called, and without session.save() being called between them. One option for coding this is to defer validation (and possible node/property removal) until session.save() is called.&lt;br/&gt;
&lt;br/&gt;
This is not strictly a bug, as JSR-283 seems to leave the details of assigning node types (section 5.5) unspecified. However, it does say for Node.removeMixin(String) that &amp;quot;Both the semantic change in effective node type and the persistence of the&lt;br/&gt;
change to the jcr:mixinTypes property occur on save&amp;quot; and ideally we could emulate the nice behaviour in NodeImpl.setPrimaryType(String) for mixin types.</description>
                <environment></environment>
            <key id="12416496">JCR-2011</key>
            <summary>Replacing mixin type doesn&apos;t preserve properties</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="brookingcharlie">Charles Brooking</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Mar 2009 07:19:14 +0000</created>
                <updated>Tue, 8 Nov 2011 15:52:11 +0000</updated>
                    <resolved>Mon, 25 Oct 2010 17:28:20 +0100</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12680815" author="stefan@jira" created="Wed, 11 Mar 2009 09:25:47 +0000"  >changed issue type/priority</comment>
                    <comment id="12680824" author="stefan@jira" created="Wed, 11 Mar 2009 09:43:20 +0000"  >i can see your use case. however, setPrimaryType and add/removeMixin do behave differently because the former is an atomic operation whereas the latter isn&amp;#39;t. mimicing the behavior of setPrimaryType for changing the assigned mixins woud require to defer the actual change to the save operation (as you correctly mentionend). this OTOH would cause backwards compatibility issues because&lt;br/&gt;
the (transient) effect of an add/remove mixin would only be visible after a save call. IMO that&amp;#39;s not an option.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; This is not strictly a bug, as JSR-283 seems to leave the details of assigning node types (section 5.5) unspecified. However, it does say for Node.removeMixin(String) that &amp;quot;Both the semantic change in effective node type and the persistence of the &lt;br/&gt;
change to the jcr:mixinTypes property occur on save&amp;quot; and ideally we could emulate the nice behaviour in NodeImpl.setPrimaryType(String) for mixin types.&lt;br/&gt;
&lt;br/&gt;
the current implementation of add/remove mixin are IMO according to the spec. &amp;#39;semantic change&amp;#39; refers to node types with special semantics (e.g. mix:versionable). adding mix:versionable to a node does create the necessary properties on the node. the node does become &amp;#39;versionable&amp;#39; only after calling save.    </comment>
                    <comment id="12680837" author="brookingcharlie" created="Wed, 11 Mar 2009 11:05:28 +0000"  >When you say &amp;quot;&amp;#39;semantic change&amp;#39; refers to node types with special semantics (e.g. mix:versionable)&amp;quot;, do you have a reference for this? I&amp;#39;d be interested in finding out what the spec actually means.&lt;br/&gt;
&lt;br/&gt;
It says&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;the semantic change in effective node type&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;and the persistence of the change to the jcr:mixinTypes property&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;occur on save&amp;quot;,&lt;br/&gt;
&lt;br/&gt;
so surely this encompasses the change in effective node type! My interpretation of the phrase &amp;quot;semantic change&amp;quot; is that it just distinguishes the meaningful effects of changing types from the &amp;quot;literal change&amp;quot;, which is the setting of the jcr:mixinTypes attribute.&lt;br/&gt;
&lt;br/&gt;
So my (humble) interpretation is that if the change in effective node type should be persisted on save, then this issue is valid. Say I remove one mixin type that includes a &amp;quot;foo&amp;quot; property but add another mixin type including an identical &amp;quot;foo&amp;quot; property. If I do both of these things before saving, then the &amp;quot;semantic change in effective node type&amp;quot; would be nil.&lt;br/&gt;
&lt;br/&gt;
By the way, the spec for Node.setPrimaryType(String) also says: &amp;quot;Semantically, the new node type may take effect immediately and must take effect on save. Whichever behavior is adopted it must be the same as the behavior adopted for addMixin() and the behavior that occurs when a node is first created.&amp;quot; (section 5.5.3) This may mean that add/removeMixin should happen on save (thus collectively being atomic like setPrimaryType), and maybe this is a bug rather than improvement?&lt;br/&gt;
&lt;br/&gt;
Some discussion on the list would be good, because I&amp;#39;m no JCR expert.</comment>
                    <comment id="12680871" author="alexander.klimetschek" created="Wed, 11 Mar 2009 14:03:13 +0000"  >The problems of the property being removed can also be circumvented by using nt:unstructured (or another node type with residual property definitions) as primary type in the first place. Unstructured-ness is what JCR is optimized for.</comment>
                    <comment id="12924615" author="stefan@jira" created="Mon, 25 Oct 2010 17:27:55 +0100"  >resolved by &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2788&quot; title=&quot;Provide a JackrabbitNode#setMixins(String[] mixinNames) method&quot;&gt;&lt;strike&gt;JCR-2788&lt;/strike&gt;&lt;/a&gt; which provides a JackrabbitNode#setMixins() method</comment>
                    <comment id="12924616" author="stefan@jira" created="Mon, 25 Oct 2010 17:28:20 +0100"  >resolved as duplicate of &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-2788&quot; title=&quot;Provide a JackrabbitNode#setMixins(String[] mixinNames) method&quot;&gt;&lt;strike&gt;JCR-2788&lt;/strike&gt;&lt;/a&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                                <inwardlinks description="is duplicated by">
                            <issuelink>
            <issuekey id="12477633">JCR-2788</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12427286">JCR-2130</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 11 Mar 2009 09:25:47 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>97833</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>280061</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>