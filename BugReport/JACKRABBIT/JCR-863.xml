<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:42:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-863/JCR-863.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-863] Use FileLock for locking instead of empty file</title>
                <link>https://issues.apache.org/jira/browse/JCR-863</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The FSDirectory uses File.createNewFile to effectively lock a directory (in makeLock), yet the Java Spec says explcitly not to use it for this purpose, and instead use FileLock from nio.&lt;br/&gt;
&lt;br/&gt;
The attached patch shows how this is/could be done (change is internal to the makeLock method only, and functionally equivalent, the same tests apply).</description>
                <environment></environment>
            <key id="12367998">JCR-863</key>
            <summary>Use FileLock for locking instead of empty file</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="michaelneale">Michael Neale</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Apr 2007 04:21:20 +0100</created>
                <updated>Tue, 15 Jan 2008 23:26:37 +0000</updated>
                    <resolved>Tue, 23 Oct 2007 11:40:32 +0100</resolved>
                                            <fixVersion>1.4</fixVersion>
                                <component>jackrabbit-core</component>
                <component>query</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12491512" author="michaelneale" created="Wed, 25 Apr 2007 04:24:34 +0100"  >Here is the patch. Please let me know if any more info is required.</comment>
                    <comment id="12498460" author="jukkaz" created="Thu, 24 May 2007 03:55:16 +0100"  >Good point, and thanks for the patch! (And sorry for the delayed feedback...)&lt;br/&gt;
&lt;br/&gt;
The patch looks good to me, though it might have the same issues as recently discussed in issues &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-912&quot; title=&quot;OverlappingFileLockException with JRE 1.6&quot;&gt;&lt;strike&gt;JCR-912&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-933&quot; title=&quot;RepositoryImpl.acquireRepositoryLock() fails to detect that the file lock is already held by the current process&quot;&gt;&lt;strike&gt;JCR-933&lt;/strike&gt;&lt;/a&gt;. Also, I guess the change of the DISABLE_LOCKS constant is an oversight. Could you check these issues?&lt;br/&gt;
&lt;br/&gt;
You haven&amp;#39;t marked the attachment with the &amp;quot;Grant license to ASF&amp;quot; option on the attachment upload screen. I guess that&amp;#39;s also an oversight. You can fix that either by uploading a new version of the patch and selecting the option, or simply by commenting here that you grant us the right to use the code under the Apache License.</comment>
                    <comment id="12498485" author="michaelneale" created="Thu, 24 May 2007 06:27:37 +0100"  >Yes, I think it could have the same issues. Looking over the JDK code and the comments, it seems that this locking is really up to the OS/platform to decide exactly how to do (ie its possible to ignore it) - at least thats my reading, so &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-933&quot; title=&quot;RepositoryImpl.acquireRepositoryLock() fails to detect that the file lock is already held by the current process&quot;&gt;&lt;strike&gt;JCR-933&lt;/strike&gt;&lt;/a&gt; could be an issue. As for &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-912&quot; title=&quot;OverlappingFileLockException with JRE 1.6&quot;&gt;&lt;strike&gt;JCR-912&lt;/strike&gt;&lt;/a&gt;, I wasn&amp;#39;t quite able to understand it.&lt;br/&gt;
&lt;br/&gt;
I grant the license to the ASF (my oversight ! sorry !).&lt;br/&gt;
&lt;br/&gt;
The change to the DISABLE_LOCKS is also an oversight, I was turning off the system property when debugging, yes it should be left as it. I will try and upload a new patch soon.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12498497" author="michaelneale" created="Thu, 24 May 2007 07:21:29 +0100"  >Here is a patch with the constant fixed up the way it was (and license granted).</comment>
                    <comment id="12498501" author="michaelneale" created="Thu, 24 May 2007 07:25:03 +0100"  >Have looked into the other JIRA - on second look I am not sure if its a problem, as this uses lock() not tryLock, which is fail fast and exclusive. A bigger problem is the issue of JRE implementation on a given platform, not entirely sure how much this can be relied on.&lt;br/&gt;
&lt;br/&gt;
Also, I remember hearing some talk about this being done entirely in Lucene (so this code can be retired?) - then its Lucene&amp;#39;s problem !</comment>
                    <comment id="12498541" author="stefan@jira" created="Thu, 24 May 2007 09:13:44 +0100"  >&amp;gt; Have looked into the other JIRA - on second look I am not sure if its a problem, as this uses lock() not tryLock, which is fail fast and exclusive. A bigger problem is the issue of JRE implementation on a given platform, not entirely sure how much this can be relied on.&lt;br/&gt;
&lt;br/&gt;
the file locking issue discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-912&quot; title=&quot;OverlappingFileLockException with JRE 1.6&quot;&gt;&lt;strike&gt;JCR-912&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-933&quot; title=&quot;RepositoryImpl.acquireRepositoryLock() fails to detect that the file lock is already held by the current process&quot;&gt;&lt;strike&gt;JCR-933&lt;/strike&gt;&lt;/a&gt; applies to both FileChannel#lock() &amp;amp; FileChannel#tryLock():&lt;br/&gt;
&lt;br/&gt;
A. as of java 1.6 the behaviour of lock() and tryLock() has changed. both methods now consistently throw &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;an OverlappingFileLockException on all platforms if the the lock is already held by the current process.&lt;br/&gt;
&lt;br/&gt;
B. in java 1.4 &amp;amp; 1.5 lock() and tryLock() have a platform-dependant behaviour if the lock is already held &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;by the current process::&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on windows:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock() blocks!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;tryLock() returns null&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;on *nix:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock() and tryLock() return a new FileLock object!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
note that A. is the correct behaviour according to the javadoc. &lt;br/&gt;
&lt;br/&gt;
since lock() doesn&amp;#39;t always fail fast (it potentially blocks) i suggest using tryLock() instead.&lt;br/&gt;
the suggested fix in &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-933&quot; title=&quot;RepositoryImpl.acquireRepositoryLock() fails to detect that the file lock is already held by the current process&quot;&gt;&lt;strike&gt;JCR-933&lt;/strike&gt;&lt;/a&gt; addresses the incorrect &amp;amp; platform dependant behaviour&lt;br/&gt;
described in B.</comment>
                    <comment id="12499112" author="mreutegg" created="Fri, 25 May 2007 16:07:43 +0100"  >&amp;gt; Also, I remember hearing some talk about this being done entirely in Lucene (so this code can be retired?) - &lt;br/&gt;
&amp;gt; then its Lucene&amp;#39;s problem !&lt;br/&gt;
&lt;br/&gt;
Lucene 2.1 has a pluggable LockFactory and provides a NativeFSLockFactory: &lt;a href=&quot;http://lucene.apache.org/java/2_1_0/api/org/apache/lucene/store/NativeFSLockFactory.html&quot;&gt;http://lucene.apache.org/java/2_1_0/api/org/apache/lucene/store/NativeFSLockFactory.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I suggest we remove the jackrabbit customizations once we upgrade to lucene 2.1.</comment>
                    <comment id="12499269" author="michaelneale" created="Sat, 26 May 2007 02:08:34 +0100"  >I agree with Marcel. This is getting really nasty if we want to support from 1.4 through 1.6 (Java) in a non ugly fashion. Its also very hard to test. &lt;br/&gt;
&lt;br/&gt;
Perhaps the better solution is to make upgrading to Lucene 2.1 a priority, so this code (which is lucene specific anyway) can be retired and this JIRA closed. &lt;br/&gt;
</comment>
                    <comment id="12536957" author="mreutegg" created="Tue, 23 Oct 2007 11:40:32 +0100"  >Removed the customizations. The index now uses the NativeFSLockFactory from Lucene.&lt;br/&gt;
&lt;br/&gt;
Fixed in revision: 587450</comment>
                </comments>
                    <attachments>
                    <attachment id="12356197" name="FSDirectory.patch" size="3966" author="michaelneale" created="Wed, 25 Apr 2007 04:24:34 +0100" />
                    <attachment id="12358062" name="JCR-863.patch" size="3880" author="michaelneale" created="Thu, 24 May 2007 07:21:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 24 May 2007 02:55:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142402</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>189998</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>