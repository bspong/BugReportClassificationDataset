<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:31:52 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-2864/JCR-2864.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-2864] Use out-of-process text extraction</title>
                <link>https://issues.apache.org/jira/browse/JCR-2864</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>The upcoming Tika 0.9 release will contain a highly useful out-of-process text extraction feature (&lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-416&quot; title=&quot;Out-of-process text extraction&quot;&gt;&lt;strike&gt;TIKA-416&lt;/strike&gt;&lt;/a&gt;) that we should use also in Jackrabbit.</description>
                <environment></environment>
            <key id="12495904">JCR-2864</key>
            <summary>Use out-of-process text extraction</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="jukkaz">Jukka Zitting</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Jan 2011 15:39:35 +0000</created>
                <updated>Tue, 8 Nov 2011 15:55:58 +0000</updated>
                    <resolved>Tue, 12 Apr 2011 15:56:50 +0100</resolved>
                                            <fixVersion>2.3</fixVersion>
                                <component>indexing</component>
                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12985577" author="yabon" created="Mon, 24 Jan 2011 09:14:27 +0000"  >I like this isolation because we can also kill parsers blocked into a infinite loop.&lt;br/&gt;
&lt;br/&gt;
But there might be an issue at least on GNU/Linux systems (vanilla kernel) because of how processes are created.&lt;br/&gt;
Indeed, creating a process required the same amount of free memory as the memory consumed by the parent process (fork() then exec()).&lt;br/&gt;
This can be a big issue for enterprise server where a lot of memory is dedicated to the JVM and creating subprocesses would result in the system swapping or error like &amp;quot;Cannot run program &amp;quot;java&amp;quot;: java.io.IOException: error=12, Cannot allocate memory&amp;quot;.&lt;br/&gt;
&lt;br/&gt;
A solution often recommended is to start one light process parallel to the main one and communicate with it (e.g. by socket) to create the subprocesses.&lt;br/&gt;
&lt;br/&gt;
More information can be found here:&lt;br/&gt;
&lt;a href=&quot;http://developers.sun.com/solaris/articles/subprocess/subprocess.html&quot;&gt;http://developers.sun.com/solaris/articles/subprocess/subprocess.html&lt;/a&gt;&lt;br/&gt;
</comment>
                    <comment id="12985591" author="jukkaz" created="Mon, 24 Jan 2011 09:49:10 +0000"  >Hmm, good point about subprocess creation. That should probably be handled in Tika though I&amp;#39;m not sure where the proper tradeoff between complexity and fail-safety lies. Can we somehow estimate how likely the described fork() memory issues would be in Jackrabbit deployments.</comment>
                    <comment id="12985603" author="yabon" created="Mon, 24 Jan 2011 10:06:51 +0000"  >Yes it definitely needs to be handle in Tika for other projects using it.&lt;br/&gt;
We happened to have this issue in a webapp (1 tomcat with 1 webapp consuming 60% of RAM+Swap and -Xmx == -Xms) and a shell script for launching custom data processing executed from the JVM with ProcessBuilder.&lt;br/&gt;
I guess this can become problematic when we have an enterprise server with multiple webapps (one or several using JR/Tika).</comment>
                    <comment id="12988716" author="jukkaz" created="Mon, 31 Jan 2011 10:08:43 +0000"  >I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-591&quot; title=&quot;Separate launcer process for forking JVMs&quot;&gt;TIKA-591&lt;/a&gt; for tracking this within Tika. See also &lt;a href=&quot;https://issues.apache.org/jira/browse/HADOOP-5059&quot; title=&quot;&amp;#39;whoami&amp;#39;, &amp;#39;topologyscript&amp;#39; calls failing with java.io.IOException: error=12, Cannot allocate memory&quot;&gt;HADOOP-5059&lt;/a&gt; for a similar problem in the Hadoop land.</comment>
                    <comment id="13018851" author="jukkaz" created="Tue, 12 Apr 2011 15:56:50 +0100"  >I&amp;#39;ve implemented this by adding a new &amp;quot;forkJavaCommand&amp;quot; configuration option. When specified, this command will be used to fork background text extraction processes up to the configured &amp;quot;extractorPoolSize&amp;quot; limit (by default 2 x processor count). The pool size limit will only become effective once we upgrade to Tika 1.0 where &lt;a href=&quot;https://issues.apache.org/jira/browse/TIKA-639&quot; title=&quot;Maximum pool size for ForkParser&quot;&gt;&lt;strike&gt;TIKA-639&lt;/strike&gt;&lt;/a&gt; is implemented.&lt;br/&gt;
&lt;br/&gt;
The fork memory use issue is best handled within the Tika issue.</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 24 Jan 2011 09:14:27 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>97787</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>190789</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>