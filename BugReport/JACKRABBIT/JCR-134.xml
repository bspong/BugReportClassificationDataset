<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 06:03:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-134/JCR-134.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-134] Unreferenced VersionHistory should be deleted automatically.</title>
                <link>https://issues.apache.org/jira/browse/JCR-134</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>since the creation of a VersionHistory is triggered by the creation of a mix:versionable node, the removal should happen automatically, as soon as no references to that version histroy exist anymore. this is the case, when all mix:versionable nodes (in all workspaces) belonging to that VH are deleted, and all the versions in the VH are removed i.e. only the jcr:rootVersion is left. At this point, the VH should be deleted aswell.</description>
                <environment></environment>
            <key id="12311281">JCR-134</key>
            <summary>Unreferenced VersionHistory should be deleted automatically.</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="tripod">Tobias Bocanegra</reporter>
                        <labels>
                    </labels>
                <created>Mon, 13 Jun 2005 04:49:50 +0100</created>
                <updated>Fri, 17 Feb 2012 13:48:38 +0000</updated>
                    <resolved>Tue, 26 May 2009 11:32:00 +0100</resolved>
                                            <fixVersion>1.6</fixVersion>
                                <component>versioning</component>
                        <due></due>
                    <votes>10</votes>
                        <watches>11</watches>
                                                    <comments>
                    <comment id="12314771" author="jukkaz" created="Fri, 1 Jul 2005 00:15:09 +0100"  >Schedule for 1.0</comment>
                    <comment id="12457305" author="cedric" created="Mon, 11 Dec 2006 12:10:51 +0000"  >On node.removeMixin(&amp;quot;mix:versionable&amp;quot;), should the VersionHistory also be deleted ?&lt;br/&gt;
May a Node be versionable in a workspace and not in another one ?&lt;br/&gt;
The above proposal (remove the VH when no node and no version references it) would be great, but I think there is no easy and cheap way ATM to check all corresponding nodes on a node or version deletion. Or am I missing something ?</comment>
                    <comment id="12457333" author="tripod" created="Mon, 11 Dec 2006 13:06:18 +0000"  >&amp;gt; but I think there is no easy and cheap way ATM to check all corresponding nodes on a node or &lt;br/&gt;
&amp;gt; version deletion.&lt;br/&gt;
you&amp;#39;re right. one would have to check all workspaces if no corresponding node exist anymore.&lt;br/&gt;
</comment>
                    <comment id="12457427" author="cedric" created="Mon, 11 Dec 2006 18:13:38 +0000"  >And about the two other points :&lt;br/&gt;
&amp;nbsp;- should the VH be deleted on node.removeMixin(&amp;quot;mix:versionable&amp;quot;) ? would it be safe ?&lt;br/&gt;
&amp;nbsp;- may a Node be versionable in a workspace and not in another one ? I think the spec allows it (it doesn&amp;#39;t actually forbid it). But I need confirmation.&lt;br/&gt;
&lt;br/&gt;
So the only way to do this is IMHO the following algorithm :&lt;br/&gt;
&amp;nbsp;- when removing a Version, if this is the last version (only the jcr:rootVersion is left), and there is no references to the jcr:rootVersion, one can remove the VH&lt;br/&gt;
&amp;nbsp;- when removing a Node, if it is versionable, and references the jcr:rootVersion (ie have never been checked in) and there is no other references to the VH (in others workspaces), then delete the VH&lt;br/&gt;
&amp;nbsp;- when removing the mix:versionable, either delete directly the VH (see my first question in this post), either check if there is only the jcr:rootVersion left, and then delete the VH.&lt;br/&gt;
&lt;br/&gt;
WDYT ?&lt;br/&gt;
</comment>
                    <comment id="12457436" author="tripod" created="Mon, 11 Dec 2006 18:46:45 +0000"  >&amp;gt;  - should the VH be deleted on node.removeMixin(&amp;quot;mix:versionable&amp;quot;) ? &lt;br/&gt;
&amp;gt;    would it be safe ?&lt;br/&gt;
yes, unless it&amp;#39;s not used by another node in another workspace. the only usecase i can think of is that the application wants to restore the &amp;#39;versionability&amp;#39; of the node again by adding the mix:versionable again. it might be desirable if the old versions still exist then.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - may a Node be versionable in a workspace and not in another one ? I think the&lt;br/&gt;
&amp;gt; spec allows it (it doesn&amp;#39;t actually forbid it). But I need confirmation.&lt;br/&gt;
i think so, too&lt;br/&gt;
&lt;br/&gt;
&amp;gt; So the only way to do this is IMHO the following algorithm :&lt;br/&gt;
&amp;gt; - when removing a Version, if this is the last version (only the jcr:rootVersion is&lt;br/&gt;
&amp;gt;   left), and there is no references to the jcr:rootVersion, one can remove the VH&lt;br/&gt;
yes.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - when removing a Node, if it is versionable, and references the jcr:rootVersion&lt;br/&gt;
&amp;gt;   (ie have never been checked in) and there is no other references to the VH (in&lt;br/&gt;
&amp;gt;   others workspaces), then delete the VH&lt;br/&gt;
yes.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - when removing the mix:versionable, either delete directly the VH (see my first&lt;br/&gt;
&amp;gt;  question in this post), either check if there is only the jcr:rootVersion left, and &lt;br/&gt;
&amp;gt; then delete the VH. &lt;br/&gt;
yes.&lt;br/&gt;
&lt;br/&gt;
in general: after any operation that affects the references to the version storage, check for orphaned VH and remove them.&lt;br/&gt;
&lt;br/&gt;
the big problem hereby is, that it&amp;#39;s not easy or, lets say, not cheap to check if there is any node that still references the VH. Since there can be a lot of workspaces, which might be idle. the best would probably be to keep a ref count on the VHs.&lt;br/&gt;
</comment>
                    <comment id="12457445" author="reschke" created="Mon, 11 Dec 2006 19:13:37 +0000"  >Isn&amp;#39;t it a common use case that version histories need to be preserved even after the last reference is gone? It seems to me that this may be a valuable feature, so maybe this needs to be configurable.&lt;br/&gt;
</comment>
                    <comment id="12457455" author="cedric" created="Mon, 11 Dec 2006 19:40:14 +0000"  >The VH need only to be kept when there are remaining Version attached to it.&lt;br/&gt;
In many apps, it would be great to get rid of empty VH (ie no more Version, and no more Node referencing it).</comment>
                    <comment id="12457629" author="tripod" created="Tue, 12 Dec 2006 08:45:12 +0000"  >yes, of course:&lt;br/&gt;
empty VH, no references -&amp;gt; remove&lt;br/&gt;
non-empty VH, no references -&amp;gt; keep (or at least configurable).</comment>
                    <comment id="12457736" author="cedric" created="Tue, 12 Dec 2006 14:37:17 +0000"  >Concerning the eventual ref count kept on VHs, is it allowed to store it in the repository, as a new property of the VH ? If yes there would be a compatibility problem whith existing repositories.&lt;br/&gt;
Otherwise, how would you see the storage of this ref count ?</comment>
                    <comment id="12554267" author="blacklion" created="Mon, 24 Dec 2007 17:17:42 +0000"  >Is there any chance of having this fixed in 1.4?&lt;br/&gt;
&lt;br/&gt;
Our use case is as follows: data format (node structure) for an application may change from one app&amp;#39;s version to another (currently it happens pretty often, as it&amp;#39;s not stable yet) and nodes are versionable. Conversion is done by creating another nodes&amp;#39; tree and copying properties there, original nodes are deleted. And they, of course, should be deleted completely, along with all the versions and VH...&lt;br/&gt;
&lt;br/&gt;
Thanks,&lt;br/&gt;
--oleg</comment>
                    <comment id="12554679" author="jukkaz" created="Fri, 28 Dec 2007 11:42:09 +0000"  >&amp;gt; Is there any chance of having this fixed in 1.4? &lt;br/&gt;
&lt;br/&gt;
No, at least not in the scope you envision, see Tobias&amp;#39; summary comment above.</comment>
                    <comment id="12621447" author="yabon" created="Mon, 11 Aug 2008 14:25:23 +0100"  >As no one reply to my thread for fixing this issue:&lt;br/&gt;
&lt;a href=&quot;http://markmail.org/message/7boajk2b2mnhe4xf&quot;&gt;http://markmail.org/message/7boajk2b2mnhe4xf&lt;/a&gt;&lt;br/&gt;
i will try to submit a fix :).&lt;br/&gt;
&lt;br/&gt;
The solution that i propose is based on the following facts:&lt;br/&gt;
- if there is no references to the VersionHistory node then no one node is alive.&lt;br/&gt;
- if the VersionHistory node has only two children (root version and version labels) then there is no version for restoring the content.&lt;br/&gt;
&lt;br/&gt;
These tests are computed in InternalVersionHistoryImpl#removeVersion(Name).&lt;br/&gt;
&lt;br/&gt;
The following use cases are supported:&lt;br/&gt;
- committed node.remove() followed by multiple versionHistory.removeVersion(..)&lt;br/&gt;
the version history is then deleted in the same time as the last version is removed.&lt;br/&gt;
&lt;br/&gt;
The following use cases are not supported (yet):&lt;br/&gt;
- node.removeMixin(&amp;quot;mix:versionable&amp;quot;)&lt;br/&gt;
- node.remove() after all versions (except the root version) have been deleted (don&amp;#39;t know if this is possible)&lt;br/&gt;
&lt;br/&gt;
This patch comes with a test case to validate version history cleaning.&lt;br/&gt;
&lt;br/&gt;
I will be waiting for your feedbacks.</comment>
                    <comment id="12621448" author="blacklion" created="Mon, 11 Aug 2008 14:34:41 +0100"  >IMO, this covers at least the most important use case.&lt;br/&gt;
&lt;br/&gt;
Actually, &amp;quot;node.remove() after all versions (except the root version) have been deleted&amp;quot; is not possible as the node refers to one of the versions. So, we tried to clean up VH, we used node.remove() and then VH.removeVersion() for each Version returned by getAllVersions() enumeration except the root one. This approach works, but leaves VH and root version nodes.&lt;br/&gt;
&lt;br/&gt;
Thanks for approaching this issue! :)</comment>
                    <comment id="12661088" author="cedric" created="Tue, 6 Jan 2009 09:42:58 +0000"  >may the attached patch be reviewed and eventually committed, so this issue can be part of the upcoming 1.5.1 release ?&lt;br/&gt;
IMHO, many users have the same concern (see recent thread on users@)</comment>
                    <comment id="12712944" author="jukkaz" created="Tue, 26 May 2009 11:32:00 +0100"  >Looks good, thanks! Patch applied in revision 778645. I&amp;#39;ll merge it also to the 1.x branch for inclusion in the 1.6 release.&lt;br/&gt;
</comment>
                    <comment id="12712992" author="jukkaz" created="Tue, 26 May 2009 13:47:52 +0100"  >Merged to the 1.x branch in revision 778680.</comment>
                    <comment id="13208482" author="mslama" created="Wed, 15 Feb 2012 13:58:40 +0000"  >There is one use case where it fails: When I have versionable node but never create version using VersionManager so there is only rootVersion. I assume VersionHistory removal is triggered by removing last non root Version so it is understandable. To fix this it would be good to have some way how to explicitly remove also rootVersion after versionable node remove so this removal of rootVersion could trigger removal of version history. It would be good to allow rootVersion removal when its versioned node is already removed. Does it make sense to create issue for this use case?&lt;br/&gt;
&lt;br/&gt;
(Yes it is our mistake as we set versionable node which was not actually used as versioned node. We could workaround it by creating one additional regular version and then removing node, this new version to do full version history cleanup.)</comment>
                    <comment id="13208497" author="jukkaz" created="Wed, 15 Feb 2012 14:24:24 +0000"  >&amp;gt; It would be good to allow rootVersion removal when its versioned node is already removed.&lt;br/&gt;
&lt;br/&gt;
Sounds like a reasonable idea.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Does it make sense to create issue for this use case? &lt;br/&gt;
&lt;br/&gt;
Yes, please do.</comment>
                    <comment id="13210264" author="mslama" created="Fri, 17 Feb 2012 13:48:38 +0000"  >Done. I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-3238&quot; title=&quot;Add posibility to remove version history when versionable node has only root version&quot;&gt;JCR-3238&lt;/a&gt;.</comment>
                </comments>
                    <attachments>
                    <attachment id="12387953" name="jackrabbit-1.4.x-JCR-134-first-try-2008-08-11.patch" size="14616" author="yabon" created="Mon, 11 Aug 2008 14:25:23 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 30 Jun 2005 23:15:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>141951</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>279332</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>