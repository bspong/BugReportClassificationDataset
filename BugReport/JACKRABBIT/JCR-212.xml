<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:29:27 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-212/JCR-212.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-212] decorator enhancements</title>
                <link>https://issues.apache.org/jira/browse/JCR-212</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>added some decorating enhancements as we discussed on the mailing list (apparently there is nothing yet in the gmane /marc archives).</description>
                <environment></environment>
            <key id="12314738">JCR-212</key>
            <summary>decorator enhancements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="jukkaz">Jukka Zitting</assignee>
                                <reporter username="costin">Costin Leau</reporter>
                        <labels>
                    </labels>
                <created>Thu, 8 Sep 2005 21:02:34 +0100</created>
                <updated>Wed, 8 Mar 2006 01:20:00 +0000</updated>
                    <resolved>Thu, 29 Sep 2005 08:30:38 +0100</resolved>
                                                                    <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12322921" author="costin" created="Thu, 8 Sep 2005 21:08:42 +0100"  >I didn&amp;#39; made a patch against the subversion repository because the files are new. There is only one modificatin inside the RepositoryDecorator that&amp;#39;s fairly simple.</comment>
                    <comment id="12322922" author="costin" created="Thu, 8 Sep 2005 21:14:55 +0100"  >Feel free also to change the package to which the classes belong - right now it&amp;#39;s org.springmodules.jcr.jackrabbit.decorator but they don&amp;#39;t belong to springmodules (I was planning to include them there at some point). Having these decorator packages inside the jackrabbit makes more sense however as they are build on the decorator classes inside the jackrabbit package.</comment>
                    <comment id="12322967" author="jukkaz" created="Fri, 9 Sep 2005 06:44:12 +0100"  >Thanks for the contribution! I&amp;#39;ve now committed the ChainedDecoratorFactory class and the RepositoryDecorator changes along with other pending JCR-EXT changes.&lt;br/&gt;
&lt;br/&gt;
Comments about the other classes:&lt;br/&gt;
&lt;br/&gt;
EventListenerDecoratorFactory - This might be better implemented as a RepositoryDecorator that overrides the login() method. The attached ZIP is also missing the referenced EventListenerDefinition class.&lt;br/&gt;
&lt;br/&gt;
SessionListenerDecoratorFactory - As above, this might be better implemented as a RepositoryDecorator.&lt;br/&gt;
&lt;br/&gt;
FullChainedDecoratorFactory - I don&amp;#39;t see the use case for this class. Why/how would you use this?&lt;br/&gt;
</comment>
                    <comment id="12322971" author="costin" created="Fri, 9 Sep 2005 07:30:14 +0100"  >FullChainedDecorator makes sense when you have more decorators.  A decorator contains a level of decorators (a repository decorator, a session, workspace and so on) and through the factory, the calls are made between components of the same level (same factory) - a repository login for example will return session decorator through it&amp;#39;s factory.&lt;br/&gt;
When one uses multiple decorators factories (which most of the times are unaware of each others) you need a way to make sure the decorators before the current &amp;#39;level&amp;#39; are executed (as the chain implementation only delegates to the factories which are after the current level).&lt;br/&gt;
&lt;br/&gt;
Through FullChainedDecoratorFactory you have the topOfChain member (or utility methods) which can guarantee that the full chain will be used for the decoration of the new element returned.&lt;br/&gt;
Example:&lt;br/&gt;
Consider factory A which decorates the only some session methods (like getLockMethods) and factory B which decorates the repository and the session returned by login. If you are using the normal&lt;br/&gt;
chained factory the call to the repository is not decorated by factory A hits factory B, which decorated the login for example and return the decorated session from A but without the decorated session from A. By using the full chained factory, inside the decorated repository A on login method chainedFactory.getSessionDecorator can be removed with&lt;br/&gt;
topOfChain.getSessionDecorator - which will use all session decorators inside the chain (including A).&lt;br/&gt;
It&amp;#39;s the difference between using the session decorators from this point on and apply all the decorators on this chain.&lt;br/&gt;
&lt;br/&gt;
An alternative would be at level A to create a repository decorator which overrides login method to make sure it will apply the session decorator.&lt;br/&gt;
&lt;br/&gt;
I implemented this factory because Session, Repository, Workspaces are related to each other but I wanted to create decorators only for the components I&amp;#39;m interested in not also in the ones that returned them (maybe I was/am confused by the &amp;#39;calling&amp;#39; points to the JCR entities - (for example to a session can be obtain by Session.impersonate or by Repository.login).</comment>
                    <comment id="12323004" author="costin" created="Fri, 9 Sep 2005 17:35:51 +0100"  >Container class which contains the params required for defining an event.</comment>
                    <comment id="12323005" author="costin" created="Fri, 9 Sep 2005 17:36:33 +0100"  >Simple factory decorator which instead of delegating call the repository directly. This class is mainly an utility which helps in defining chains (should be placed at the end of the chain).</comment>
                    <comment id="12323013" author="jukkaz" created="Fri, 9 Sep 2005 20:08:43 +0100"  >Re: NoOpDecoratorFactory.java&lt;br/&gt;
&lt;br/&gt;
There&amp;#39;s a subtle reason for the DecoratorFactory interface and the functioning of some of the decorator methods. To decorate the entire JCR API you need to manage the various back-references between the decorated instances. For example the decorated Session.getRepository() method should return the *decorated* repository instance, not just the repository reference returned by the underlying session:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Repository repository = decoratorFactory.getRepositoryDecorator(...);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Session session = repository.login();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertTrue(repository == session.getRepository());&lt;br/&gt;
&lt;br/&gt;
The DecoratorFactory implementation should make sure that all returned decorators honor this contract. The SimpleDecoratorFactory class binds the individiual decorator base classes together to implement the decorator layer for the entire JCR API. Thus the SimpleDecoratorFactory (or the ChainedDecoratorFactory) should always be used as a base class when adding custom decorator classes to the decorator layer.&lt;br/&gt;
&lt;br/&gt;
Thus I see little use for the NoOpDecoratorFactory. Instead of doing NoOpDecoratorFactory.getRepositoryDecorator(repository) you could always just use the repository instance directly.&lt;br/&gt;
</comment>
                    <comment id="12323017" author="costin" created="Fri, 9 Sep 2005 21:04:03 +0100"  >I agree - this was one thing that was unclear to me (hence the FullChainedDecoratorFactory) that doesn&amp;#39;t make sense on it&amp;#39;s own. Anyways about SimpleDecoratorFactory - the way I got the file from the CVS it contained only null which doesn&amp;#39;t make much sense (to me at least) - got the file on 31/08/2005.</comment>
                    <comment id="12323018" author="jukkaz" created="Fri, 9 Sep 2005 21:10:22 +0100"  >Yeah, sorry for the incomplete state... :-} I hope the recent commits and the above comment clarified the design goals.</comment>
                    <comment id="12330739" author="jukkaz" created="Thu, 29 Sep 2005 08:30:38 +0100"  >Closing this issue. Parts of the proposed changes were applied to JCR-EXT, while the other features are better implemented in client code. See the above discussion for details.</comment>
                </comments>
                    <attachments>
                    <attachment id="12312780" name="decorators.zip" size="3998" author="costin" created="Thu, 8 Sep 2005 21:08:34 +0100" />
                    <attachment id="12312802" name="EventListenerDefinition.java" size="2615" author="costin" created="Fri, 9 Sep 2005 17:35:49 +0100" />
                    <attachment id="12312803" name="NoOpDecoratorFactory.java" size="2112" author="costin" created="Fri, 9 Sep 2005 17:36:33 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 9 Sep 2005 05:44:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142020</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191045</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>