<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Sat Jul 27 05:39:47 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/JCR-1388/JCR-1388.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[JCR-1388] Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false</title>
                <link>https://issues.apache.org/jira/browse/JCR-1388</link>
                <project id="10591" key="JCR">Jackrabbit Content Repository</project>
                        <description>Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false, even if maxConnections&amp;gt;1.&lt;br/&gt;
See &lt;a href=&quot;https://issues.apache.org/jira/browse/JCR-1184&quot; title=&quot;Introduce spellchecker functionality based on content in the workspace&quot;&gt;&lt;strike&gt;JCR-1184&lt;/strike&gt;&lt;/a&gt; for a test for this problem (run it with copyWhenReading=false).&lt;br/&gt;
</description>
                <environment>WinXP x64, Eclipse, remote SQL Server 2005</environment>
            <key id="12388791">JCR-1388</key>
            <summary>Jackrabbit does not allow concurrent reads to the data store if copyWhenReading=false</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="efranqueiro">Esteban Franqueiro</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Feb 2008 17:44:59 +0000</created>
                <updated>Mon, 8 Dec 2008 11:08:00 +0000</updated>
                    <resolved>Fri, 18 Apr 2008 13:28:10 +0100</resolved>
                            <version>1.4</version>
                                <fixVersion>1.5</fixVersion>
                                <component>jackrabbit-core</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12569338" author="efranqueiro" created="Fri, 15 Feb 2008 17:47:32 +0000"  >This patch addresses the issue by provinding a wrapper input stream that encapsulates the database resources, and not returning the connection to the pool until the stream is consumed/closed.</comment>
                    <comment id="12573307" author="efranqueiro" created="Thu, 28 Feb 2008 14:47:21 +0000"  >Hi.&lt;br/&gt;
Did anyone take a look at this patch?&lt;br/&gt;
Regards&lt;br/&gt;
</comment>
                    <comment id="12573737" author="tmueller" created="Fri, 29 Feb 2008 13:40:09 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
I have a few remarks, first about the source code &amp;#39;style&amp;#39;. I use Eclipse and the Checkstyle plugin, this should find most issues:&lt;br/&gt;
- you should use spaces instead of tabs&lt;br/&gt;
- return doesn&amp;#39;t required brackets: return(false) should be changed to return false&lt;br/&gt;
- catch (IOException e) {} should at least have a remark, but it&amp;#39;s better to log the exception (with stack trace)&lt;br/&gt;
- you need to replace the file file headers &lt;br/&gt;
- use &amp;#39;} else {&amp;#39;, &amp;#39;} finally {&amp;#39; and &amp;#39;} catch (Exception e) {&amp;#39; as in the Sun Java coding guidelines&lt;br/&gt;
- Don&amp;#39;t declare all variables at the start of the method as in C. Declare them when / just before using them&lt;br/&gt;
&amp;nbsp;&amp;nbsp;(for example, getResourceAsReader(), reader; there are others&lt;br/&gt;
- Review the Javadocs rules (add comments, use the @param, @return tags)&lt;br/&gt;
- Only use this. when required&lt;br/&gt;
&lt;br/&gt;
Some other remarks:&lt;br/&gt;
- I didn&amp;#39;t see any test cases - please add one&lt;br/&gt;
- Are prepareSchemaObjectPrefix and getResourceAsReader used somewhere? Don&amp;#39;t add unused methods&lt;br/&gt;
- close() methods easting exceptions should be called closeSilently()&lt;br/&gt;
- You have removed the SQL statement remark, why? // SELECT ID, DATA FROM DATASTORE WHERE ID = ?&lt;br/&gt;
- If you are removing code, remove the lines, don&amp;#39;t remark them (+//lastModified = ...)&lt;br/&gt;
- getDatabaseResources, boolean success is always true&lt;br/&gt;
- You hare remarked &amp;quot;lastModified = store.touch(getIdentifier(), lastModified)&amp;quot;, why?&lt;br/&gt;
- Don&amp;#39;t swallow exceptions (use IOException.initCause in DbInputStream.getStream())&lt;br/&gt;
- Synchronization is very inconsistent (DbInputStream)&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas&lt;br/&gt;
</comment>
                    <comment id="12573815" author="efranqueiro" created="Fri, 29 Feb 2008 16:23:55 +0000"  >Hi.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I have a few remarks, first about the source code &amp;#39;style&amp;#39;. I use Eclipse and the Checkstyle plugin, this should find most issues:&lt;br/&gt;
&amp;gt; - you should use spaces instead of tabs&lt;br/&gt;
&amp;gt; - return doesn&amp;#39;t required brackets: return(false) should be changed to return false&lt;br/&gt;
&amp;gt; - catch (IOException e) {} should at least have a remark, but it&amp;#39;s better to log the exception (with stack trace)&lt;br/&gt;
&amp;gt; - you need to replace the file file headers &lt;br/&gt;
&amp;gt; - use &amp;#39;} else {&amp;#39;, &amp;#39;} finally {&amp;#39; and &amp;#39;} catch (Exception e) {&amp;#39; as in the Sun Java coding guidelines&lt;br/&gt;
&amp;gt; - Don&amp;#39;t declare all variables at the start of the method as in C. Declare them when / just before using them&lt;br/&gt;
&amp;gt;  (for example, getResourceAsReader(), reader; there are others&lt;br/&gt;
&amp;gt; - Review the Javadocs rules (add comments, use the @param, @return tags)&lt;br/&gt;
&amp;gt; - Only use this. when required&lt;br/&gt;
&lt;br/&gt;
Fixed all of those I think.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; Some other remarks:&lt;br/&gt;
&amp;gt; - I didn&amp;#39;t see any test cases - please add one&lt;br/&gt;
&amp;gt; - Are prepareSchemaObjectPrefix and getResourceAsReader used somewhere? Don&amp;#39;t add unused methods&lt;br/&gt;
&lt;br/&gt;
Removed them.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - close() methods easting exceptions should be called closeSilently()&lt;br/&gt;
&lt;br/&gt;
Renamed them.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - You have removed the SQL statement remark, why? // SELECT ID, DATA FROM DATASTORE WHERE ID = ?&lt;br/&gt;
&lt;br/&gt;
Because I deleted the entire method.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - If you are removing code, remove the lines, don&amp;#39;t remark them (+//lastModified = ...)&lt;br/&gt;
&amp;gt; - getDatabaseResources, boolean success is always true&lt;br/&gt;
&amp;gt; - You hare remarked &amp;quot;lastModified = store.touch(getIdentifier(), lastModified)&amp;quot;, why?&lt;br/&gt;
&lt;br/&gt;
Fixed those.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; - Don&amp;#39;t swallow exceptions (use IOException.initCause in DbInputStream.getStream())&lt;br/&gt;
&amp;gt; - Synchronization is very inconsistent (DbInputStream)&lt;br/&gt;
&lt;br/&gt;
In what sense? The DbInputStream is not supposed to be used from multiple threads, so I only synchronized the methods that are already synchronized in InputStream.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll attach the new patch and test.&lt;br/&gt;
&lt;br/&gt;
Regards.</comment>
                    <comment id="12573818" author="efranqueiro" created="Fri, 29 Feb 2008 16:29:52 +0000"  >The new patch corrects the issues pointed by Thomas. The test passes with the patch applied, copyWhenReading=false and storeStream=-1. Without the patch, the test fails with the same conditions.</comment>
                    <comment id="12573844" author="tmueller" created="Fri, 29 Feb 2008 17:04:50 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
Your new patch is better, but there are still a few issues:&lt;br/&gt;
&lt;br/&gt;
You still have tabs in the source code.&lt;br/&gt;
&lt;br/&gt;
DbResources and DatabaseHelper still don&amp;#39;t have correct license headers.&lt;br/&gt;
&lt;br/&gt;
There is still a catch (Exception e) {}.&lt;br/&gt;
&lt;br/&gt;
There are still some cases where &amp;quot;} else {&amp;quot; and so on is not on the same line. Please format the source code. In Eclipse, use [Source] [Format]. I suggest you review the Sun coding guidelines at &lt;a href=&quot;http://java.sun.com/docs/codeconv/&quot;&gt;http://java.sun.com/docs/codeconv/&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Javadoc comments are still not correct. getLastModified doesn&amp;#39;t have a Javadoc comment. @return tag is still not used.&lt;br/&gt;
&lt;br/&gt;
Variables are still declared at the start of the method in getDatabaseResources(). Please declare them when / just before using them &lt;br/&gt;
&lt;br/&gt;
DbInputStream.mark and reset are synchronized, but nothing else in this class, why?&lt;br/&gt;
&lt;br/&gt;
The SQL statement remark &amp;quot;// SELECT ID, DATA FROM DATASTORE WHERE ID = ?&amp;quot; was&lt;br/&gt;
there to simplify reading the code (so you don&amp;#39;t have to switch to another file to understand it).&lt;br/&gt;
Please add it where selectDataSQL is used.&lt;br/&gt;
&lt;br/&gt;
About the method finalize(): I wouldn&amp;#39;t use it. It slows down creating objects. If the wrapped InputStream and resource need finalize(), it is already implemented there.&lt;br/&gt;
&lt;br/&gt;
About the test cases:&lt;br/&gt;
&lt;br/&gt;
-  &amp;quot;.classpath&amp;quot; doesn&amp;#39;t exist in all systems (RandomInputStream is better).&lt;br/&gt;
&lt;br/&gt;
- Don&amp;#39;t use System.out.println, use a logger.&lt;br/&gt;
&lt;br/&gt;
- Add the test to the TestAll method.&lt;br/&gt;
&lt;br/&gt;
- You have again used return(..) instead of return ..&lt;br/&gt;
&lt;br/&gt;
- The Javadoc comment is empty&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas&lt;br/&gt;
</comment>
                    <comment id="12573938" author="efranqueiro" created="Fri, 29 Feb 2008 20:27:39 +0000"  >Ok, here&amp;#39;s a new take at it. I hope I resolved all the issues you pointed out.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; DbInputStream.mark and reset are synchronized, but nothing else in this class, why?&lt;br/&gt;
&lt;br/&gt;
I followed the pattern used in InputStream and FilterInputStream.&lt;br/&gt;
&lt;br/&gt;
Regarding the finalizer, I removed it, but I think that it depends on what your position is regarding improper use of the stream. If the policy is to protect against that kind of mistake or to let it happen so that in the end the user has to fix it&amp;#39;s application.</comment>
                    <comment id="12575765" author="tmueller" created="Thu, 6 Mar 2008 16:38:44 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
Your new patch is better, but there are still a few issues:&lt;br/&gt;
&lt;br/&gt;
You still have tabs in the source code: 2 to go ;-)&lt;br/&gt;
&lt;br/&gt;
There is still a catch (Exception e) {}. catch (IOException e) {} should at least have a remark, but it&amp;#39;s better to log the exception (with stack trace) &lt;br/&gt;
&lt;br/&gt;
TestTwoGetStreams.streamToString() expects to read everything with one InputStreamReader.read call. This method could theoretically return a value smaller than requested in length. You should deal with that in some way; for example, use DataInputStream.readFully. Also, the conversion to String expects the data is stored in the current system encoding, that may not be the case.&lt;br/&gt;
&lt;br/&gt;
I wouldn&amp;#39;t use new FileInputStream(&amp;quot;NOTICE.txt&amp;quot;), I would use new RandomInputStream(0, 10 * 1024 * 1024). You can&amp;#39;t be sure that NOTICE.txt will always be there and have that name.&lt;br/&gt;
&lt;br/&gt;
The method testTwoGetStreams doesn&amp;#39;t have any assertion. It doesn&amp;#39;t check if the data read from the repository is the same as in the files. Only calling log.info is not a good test I believe.&lt;br/&gt;
&lt;br/&gt;
DatabaseHelper doesn&amp;#39;t have a class level javadoc.&lt;br/&gt;
&lt;br/&gt;
getDatabaseResources: is the &amp;#39;finally&amp;#39; and the boolean success required? Could the code in &amp;#39;finally&amp;#39; not be written in the &amp;#39;catch&amp;#39; block?&lt;br/&gt;
&lt;br/&gt;
DbInputStream.mark and reset are synchronized: I don&amp;#39;t understand why this needs to be synchronized in your class as well. I probably need to ask Arthur van Hoff then ;-)&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas&lt;br/&gt;
&lt;br/&gt;
</comment>
                    <comment id="12576276" author="efranqueiro" created="Fri, 7 Mar 2008 17:09:28 +0000"  >Here&amp;#39;s a new version. I removed the synchronization from DbInputStream. I&amp;#39;m also posting a new version of the test, and the previous, fixed, version in the patch.&lt;br/&gt;
Regards</comment>
                    <comment id="12576912" author="tmueller" created="Mon, 10 Mar 2008 09:28:07 +0000"  >Hi,&lt;br/&gt;
&lt;br/&gt;
In TestTwoGetStreams there are many &amp;#39;if&amp;#39; without {}:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i2 != null)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i2.close();&lt;br/&gt;
&lt;br/&gt;
According to the code style, this should be written&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i2 != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i2.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
As I wrote before, I suggest you use Checkstyle so that you can find such problems yourself. &lt;br/&gt;
&lt;br/&gt;
What is the reason for the following code?&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i1.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i2.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i1 != null)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i1.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (IOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info(&amp;quot;Could not close first input stream: &amp;quot;, e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (i2 != null)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;i2.close();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (IOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log.info(&amp;quot;Could not close second input stream: &amp;quot;, e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Why do you close i1 and i2 twice? Why do you check for null?&lt;br/&gt;
&lt;br/&gt;
The line&lt;br/&gt;
private final static int BLOCK_SIZE = 4 * 1024;&lt;br/&gt;
should be (according to Checkstyle):&lt;br/&gt;
private static final int BLOCK_SIZE = 4 * 1024;&lt;br/&gt;
&lt;br/&gt;
Your method assertEquals is incorrect:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (n1 != -1 || n2 != -1) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n1 = i1.read(b1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;n2 = i2.read(b2);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; n1; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assertEquals(message + &amp;quot;; byte #&amp;quot; + i + &amp;quot; mismatch!&amp;quot;, b2[i], b1[i]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count1 += n1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;count2 += n2;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
i1 and i2 may not return the same number of bytes (n1 != n2). I suggest to test byte by byte.&lt;br/&gt;
&lt;br/&gt;
Otherwise everything looks very good to me.&lt;br/&gt;
&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas&lt;br/&gt;
</comment>
                    <comment id="12577582" author="efranqueiro" created="Tue, 11 Mar 2008 19:46:10 +0000"  >&amp;gt; As I wrote before, I suggest you use Checkstyle so that you can find such problems yourself. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m using it, but I missed those.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; What is the reason for the following code?&lt;br/&gt;
&amp;gt;  ...&lt;br/&gt;
&amp;gt; Why do you close i1 and i2 twice? Why do you check for null?&lt;br/&gt;
&lt;br/&gt;
Oops my mistake. Fixed that. I left the try/catch calls, so that it logs the exception. Should I re-throw it?&lt;br/&gt;
</comment>
                    <comment id="12577583" author="efranqueiro" created="Tue, 11 Mar 2008 19:48:33 +0000"  >Oops, wrong file. Here is the right one.</comment>
                    <comment id="12579497" author="tmueller" created="Mon, 17 Mar 2008 16:18:28 +0000"  >Hi,&lt;br/&gt;
Sorry for the delay... I think there is one potential problem in assertEquals(String message, InputStream i1, InputStream i2):&lt;br/&gt;
&lt;br/&gt;
+            int b1 = 0, b2 = 0;&lt;br/&gt;
+            int i = 0;&lt;br/&gt;
+            while (b1 != -1 || b2 != -1) {&lt;br/&gt;
+                b1 = i1.read();&lt;br/&gt;
+                b2 = i2.read();&lt;br/&gt;
+                assertEquals(message + &amp;quot;; byte #&amp;quot; + i + &amp;quot; mismatch!&amp;quot;, (byte) b2, (byte) b1);&lt;br/&gt;
+                ++i;&lt;br/&gt;
+            }&lt;br/&gt;
&lt;br/&gt;
This test wouldn&amp;#39;t detect a problem if b1 is -1 and b2 is 255. I would change the code to:&lt;br/&gt;
&lt;br/&gt;
assertEquals(message + &amp;quot;; byte #&amp;quot; + i + &amp;quot; mismatch!&amp;quot;, b2, b1);&lt;br/&gt;
&lt;br/&gt;
Everything else looks fine to me.&lt;br/&gt;
Regards,&lt;br/&gt;
Thomas&lt;br/&gt;
</comment>
                    <comment id="12579559" author="efranqueiro" created="Mon, 17 Mar 2008 19:16:48 +0000"  >I agree with you Thomas. Here&amp;#39;s the corrected patch.</comment>
                    <comment id="12579900" author="tmueller" created="Tue, 18 Mar 2008 15:45:57 +0000"  >+1&lt;br/&gt;
The patch looks good to me. &lt;br/&gt;
</comment>
                    <comment id="12590418" author="tmueller" created="Fri, 18 Apr 2008 13:27:45 +0100"  >Committed in revision 649493 (trunk)</comment>
                </comments>
                    <attachments>
                    <attachment id="12378063" name="JCR-1388-datastore-concurrent-reads.10.patch" size="24342" author="efranqueiro" created="Mon, 17 Mar 2008 19:16:48 +0000" />
                    <attachment id="12376841" name="JCR-1388-datastore-concurrent-reads.2.patch" size="15371" author="efranqueiro" created="Fri, 29 Feb 2008 16:29:52 +0000" />
                    <attachment id="12376865" name="JCR-1388-datastore-concurrent-reads.4.patch" size="21419" author="efranqueiro" created="Fri, 29 Feb 2008 20:27:39 +0000" />
                    <attachment id="12377368" name="JCR-1388-datastore-concurrent-reads.8.patch" size="22819" author="efranqueiro" created="Fri, 7 Mar 2008 17:09:27 +0000" />
                    <attachment id="12375695" name="JCR-1388-datastore-concurrent-reads.patch" size="13922" author="efranqueiro" created="Fri, 15 Feb 2008 17:47:32 +0000" />
                    <attachment id="12377369" name="TestTwoGetStreams.java" size="5342" author="efranqueiro" created="Fri, 7 Mar 2008 17:09:28 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 29 Feb 2008 13:40:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>142667</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>191919</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>