<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:23:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-588/LUCENE-588.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-588] Escaped wildcard character in wildcard term not handled correctly</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-588</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;If an escaped wildcard character is specified in a wildcard query, it is treated as a wildcard instead of a literal.&lt;br/&gt;
e.g., t&amp;#63;?t is converted by the QueryParser to t??t - the escape character is discarded.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows XP SP2&lt;/p&gt;</environment>
            <key id="12343885">LUCENE-588</key>
            <summary>Escaped wildcard character in wildcard term not handled correctly</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="icemank">Sunil Kamath</reporter>
                        <labels>
                    </labels>
                <created>Sat, 3 Jun 2006 10:59:18 +0100</created>
                <updated>Fri, 10 May 2013 11:43:45 +0100</updated>
                    <resolved>Fri, 5 Nov 2010 20:08:29 +0000</resolved>
                            <version>2.0.0</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/queryparser</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12546478" author="lucenebugs@danielnaber.de" created="Wed, 28 Nov 2007 23:26:29 +0000"  >&lt;p&gt;The problem is that the WildcardQuery itself doesn&apos;t have a concept of escaped characters. The escape characters are removed in QueryParser. This mean &quot;t?&amp;#63;t&quot; will arrive as &quot;t??t&quot; in WildcardQuery and the second question mark is also interpreted as a wildcard.&lt;/p&gt;</comment>
                    <comment id="12546479" author="lucenebugs@danielnaber.de" created="Wed, 28 Nov 2007 23:28:52 +0000"  >&lt;p&gt;Also, the original report and my comment look confusing because Jira removes the backslash. Imagine a backslash in front of &lt;b&gt;one&lt;/b&gt; of the question marks.&lt;/p&gt;</comment>
                    <comment id="12546485" author="michaelbusch" created="Wed, 28 Nov 2007 23:38:25 +0000"  >&lt;p&gt;True... a solution might be to have the queryparser map escaped chars to some&lt;br/&gt;
unused unicode codepoints. Then the WildcardQuery could distinguish escaped&lt;br/&gt;
chars. I&apos;d guess that other classes, like FuzzyQuery might have the same problem?&lt;/p&gt;

&lt;p&gt;The advantage of such a char mapping is that we can keep the String API and&lt;br/&gt;
don&apos;t have to add special APIs to the Query objects for the queryparser.&lt;/p&gt;</comment>
                    <comment id="12546743" author="icemank" created="Thu, 29 Nov 2007 14:28:22 +0000"  >&lt;p&gt;The documentation does state that escaping of the &quot;?&quot; character by prepending a &quot;\&quot; character is supported.&lt;/p&gt;</comment>
                    <comment id="12546969" author="hossman" created="Fri, 30 Nov 2007 02:30:14 +0000"  >&lt;p&gt;you&apos;re refering to the documentation for the querysyntax, used by the QueryParser ... which is in fact true: you can \ escape both * and ? as far as the QueryParser goes &amp;#8211; but the WildcardQuery class doesn&apos;t support (nor does it&apos;s documentation advertise) any escape characters.&lt;/p&gt;

&lt;p&gt;In a nut shell: you can escape the characters so QueryParser doesn&apos;t consider them wildcards &amp;#8211; which will influence whether or not QP builds a WIldcardQuery or a TermQuery, but WildcardQuery doesn&apos;t know or care about escape characters.&lt;/p&gt;

&lt;p&gt;Consider these examples, and assume a whitespace analyzer....&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;lucene&quot;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;lucene&quot;&lt;/span&gt;)
parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu?ene&quot;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WIldcardQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu?ene&quot;&lt;/span&gt;)
parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu\?ene&quot;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu?ene&quot;&lt;/span&gt;)
parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu\?e?e&quot;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WIldcardQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu?e?e&quot;&lt;/span&gt;)
parse(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu\?e\?e&quot;&lt;/span&gt;) -&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;lu?e?e&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;that&apos;s why it works the way it does.&lt;/p&gt;

&lt;p&gt;as for how to improve it: It seems reasonable for WildcardQuery to have a boolean constructor arg indicating whether or not it should respect &quot;standard&quot; backslash escape sequences ... and then QueryParser could have an option to pass the &quot;raw&quot; string (with escapes) to this new constructor.&lt;/p&gt;</comment>
                    <comment id="12552434" author="yangxq" created="Mon, 17 Dec 2007 15:11:00 +0000"  >&lt;p&gt;I wrote my first patch to this issue. if QueryParser knows the query is wildcard, it will directly pass the original query string to WildcardQuery which knows exactly which character is wildcard or not. i copied part of discardEscapeChar method from QueryParser because discardEscapeChar will throw ParseException which will causes WildcardQuery changed much. i am looking for a help/idea about what is the better way to process this exception?&lt;/p&gt;</comment>
                    <comment id="12599630" author="michaelbusch" created="Sat, 24 May 2008 23:29:57 +0100"  >&lt;p&gt;I think we should add a new constructor to WildcardQuery like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; WildcardQuery(Term term) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;(term, WildcardTermEnum.WILDCARD_CHAR, WildcardTermEnum.WILDCARD_STRING);
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; WildcardQuery(Term term, &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; wildcardChar, &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; wildcardString) {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(term);
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.wildcardChar = wildcardChar;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.wildcardString = wildcardString;
    
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.termContainsWildcard = (term.text().indexOf(wildcardChar) != -1) 
                                || (term.text().indexOf(wildcardString) != -1);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then the WildcardQuery doesn&apos;t need to know anything about escaping and the QueryParser&lt;br/&gt;
can just map wildcard characters that weren&apos;t escaped to some other unused chars and can&lt;br/&gt;
unescape * and ? chars.&lt;/p&gt;

&lt;p&gt;The only disadvantage of this design would be that the WildcardQuery.toString() would not&lt;br/&gt;
produce a String anymore that the QueryParser could parse. However, I think the requirement&lt;br/&gt;
of Query.toString() to produce a parseable String is not very good anyways, because it adds&lt;br/&gt;
a dependency between the Query classes and the QueryParser. I&apos;d prefer to add a method&lt;br/&gt;
like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; toQueryString(Query);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to the QueryParser. Then Query.toString() wouldn&apos;t be tied anymore to a specific QueryParser&lt;br/&gt;
implementation and syntax. Thoughts?&lt;/p&gt;

&lt;p&gt;Terry are you still around? Would you like to work on a new patch here?&lt;/p&gt;</comment>
                    <comment id="12744427" author="lafa" created="Tue, 18 Aug 2009 10:02:15 +0100"  >&lt;p&gt;The new QP has built in support for this.&lt;/p&gt;

&lt;p&gt;If someone has time to test it or write some testcases I can help fix any problems that might appear.&lt;br/&gt;
The new query parser is in contrib/queryparser. See for more details &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1567&quot; title=&quot;New flexible query parser&quot;&gt;&lt;del&gt;LUCENE-1567&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12744893" author="michaelbusch" created="Wed, 19 Aug 2009 06:30:48 +0100"  >&lt;p&gt;We&apos;ll try to fix this in combination with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1823&quot; title=&quot;QueryParser with new features for Lucene 3&quot;&gt;LUCENE-1823&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12852676" author="rcmuir" created="Fri, 2 Apr 2010 04:07:23 +0100"  >&lt;p&gt;In the flex branch, WildcardQuery (like RegexpQuery) is just a parser for AutomatonQuery.&lt;/p&gt;

&lt;p&gt;its pretty easy to add support for things like this if we still want it. Attached is a patch.&lt;/p&gt;</comment>
                    <comment id="12928209" author="rcmuir" created="Thu, 4 Nov 2010 13:35:57 +0000"  >&lt;p&gt;This one came up recently on the mailing list: see &lt;a href=&quot;http://www.lucidimagination.com/search/document/637848ac365edda6/problem_escaping_question_marks&quot; class=&quot;external-link&quot;&gt;http://www.lucidimagination.com/search/document/637848ac365edda6/problem_escaping_question_marks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again its technically easy to fix in 4.0, but we just need to decide if WildcardQuery/QueryParser should just &lt;br/&gt;
support escaped terms, instead of backwards compatibility stuff/Version/etc?&lt;/p&gt;

&lt;p&gt;Even if we make it &quot;fully backwards compatible&quot; some things will need to change, &lt;br/&gt;
for instance Solr&apos;s &quot;reverse wildcard&quot; support should instead reverse the actual Automaton&lt;br/&gt;
instead of the query string, this way it won&apos;t screw up the escapes... but this is&lt;br/&gt;
really cleaner anyway.&lt;/p&gt;</comment>
                    <comment id="12928218" author="yseeley@gmail.com" created="Thu, 4 Nov 2010 14:22:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Again its technically easy to fix in 4.0, but we just need to decide if WildcardQuery/QueryParser should just support escaped terms, instead of backwards compatibility stuff/Version/etc?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;People wouldn&apos;t be escaping wildcards and expecting them to still be treated as wildcards, so IMO back compat has no value here.&lt;/p&gt;</comment>
                    <comment id="12928220" author="rcmuir" created="Thu, 4 Nov 2010 14:28:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;People wouldn&apos;t be escaping wildcards and expecting them to still be treated as wildcards, so IMO back compat has no value here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, i would prefer to not create a mess and just change the behavior: add support for this to WildcardQuery and &lt;br/&gt;
the QP (it is a trivial change there), and fix the reversing in Solr.&lt;/p&gt;

&lt;p&gt;I&apos;ll make a patch.&lt;/p&gt;</comment>
                    <comment id="12928261" author="rcmuir" created="Thu, 4 Nov 2010 16:13:53 +0000"  >&lt;p&gt;here&apos;s a patch: i also fixed SolrQueryParser not to reverse the query string, but instead the actual automaton.&lt;br/&gt;
This way, it has no problems with what is escaped and what isn&apos;t.&lt;/p&gt;

&lt;p&gt;additionally its ReverseWildcard tests needed some revamping... they were using Query.toString to check&lt;br/&gt;
if a term was reversed or not... but with this approach its transparent and we don&apos;t work on Strings.&lt;/p&gt;

&lt;p&gt;But i couldn&apos;t figure out the contrib/queryparser... i left a test with @Ignore for now that fails.&lt;/p&gt;</comment>
                    <comment id="12928801" author="rcmuir" created="Fri, 5 Nov 2010 20:08:29 +0000"  >&lt;p&gt;Committed revision 1031765&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12433389">LUCENE-1823</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12417241">LUCENE-1567</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12458825" name="LUCENE-588.patch" size="17585" author="rcmuir" created="Thu, 4 Nov 2010 16:13:53 +0000" />
                    <attachment id="12440570" name="LUCENE-588.patch" size="3476" author="rcmuir" created="Fri, 2 Apr 2010 04:07:23 +0100" />
                    <attachment id="12371804" name="LUCENE-588.patch" size="10161" author="yangxq" created="Mon, 17 Dec 2007 15:14:01 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 28 Nov 2007 23:26:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13162</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27139</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>