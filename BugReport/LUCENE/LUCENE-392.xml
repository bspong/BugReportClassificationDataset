<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-392/LUCENE-392.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-392] [PATCH] Some Field methods use Classcast check instead of instanceof which is slow</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-392</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I am not sure if this is because Lucene historically needed to work with older&lt;br/&gt;
JVM&apos;s but with modern JVM&apos;s, instanceof is much quicker. &lt;/p&gt;

&lt;p&gt;The Field.stringValue(), .readerValue(), and .binaryValue() methods all use&lt;br/&gt;
ClassCastException checking.&lt;/p&gt;

&lt;p&gt;Using the following test-bed class, you will see that instanceof is miles quicker:&lt;/p&gt;

&lt;p&gt;package com.aconex.index;&lt;/p&gt;

&lt;p&gt;public class ClassCastExceptionTest {&lt;/p&gt;

&lt;p&gt;    private static final long ITERATIONS = 100000;&lt;/p&gt;

&lt;p&gt;    /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;@param args&lt;br/&gt;
     */&lt;br/&gt;
    public static void main(String[] args) 
{

        runClassCastTest(1); // once for warm up
        runClassCastTest(2);
        
        runInstanceOfCheck(1);
        runInstanceOfCheck(2);

    }
&lt;p&gt;    private static void runInstanceOfCheck(int run) {&lt;br/&gt;
        long start = System.currentTimeMillis();&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        Object foo = new Foo();&lt;br/&gt;
        for (int i = 0; i &amp;lt; ITERATIONS; i++) {&lt;br/&gt;
            String test;&lt;br/&gt;
            if(foo instanceof String) &lt;/p&gt;
{
                System.out.println(&quot;Is a string&quot;); // should never print
            }
&lt;p&gt;        }&lt;br/&gt;
        long end = System.currentTimeMillis();&lt;br/&gt;
        long diff = end - start;&lt;br/&gt;
        System.out.println(&quot;InstanceOf checking run #&quot; + run + &quot;: &quot; + diff + &quot;ms&quot;);&lt;/p&gt;

&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    private static void runClassCastTest(int run) {&lt;br/&gt;
        long start = System.currentTimeMillis();&lt;/p&gt;

&lt;p&gt;        Object foo = new Foo();&lt;br/&gt;
        for (int i = 0; i &amp;lt; ITERATIONS; i++) {&lt;br/&gt;
            String test;&lt;br/&gt;
            try &lt;/p&gt;
{
                test = (String)foo;
            }
&lt;p&gt; catch (ClassCastException c) &lt;/p&gt;
{
                // ignore
            }
&lt;p&gt;        }&lt;br/&gt;
        long end = System.currentTimeMillis();&lt;br/&gt;
        long diff = end - start;&lt;br/&gt;
        System.out.println(&quot;ClassCast checking run #&quot; + run + &quot;: &quot; + diff + &quot;ms&quot;);&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;    private static final class Foo {&lt;br/&gt;
    }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;


&lt;p&gt;Results&lt;br/&gt;
=======&lt;/p&gt;

&lt;p&gt;Run #1&lt;/p&gt;

&lt;p&gt;ClassCast checking run #1: 1660ms&lt;br/&gt;
ClassCast checking run #2: 1374ms&lt;br/&gt;
InstanceOf checking run #1: 8ms&lt;br/&gt;
InstanceOf checking run #2: 4ms&lt;/p&gt;


&lt;p&gt;Run #2&lt;br/&gt;
ClassCast checking run #1: 1280ms&lt;br/&gt;
ClassCast checking run #2: 1344ms&lt;br/&gt;
InstanceOf checking run #1: 7ms&lt;br/&gt;
InstanceOf checking run #2: 2ms&lt;/p&gt;


&lt;p&gt;Run #3&lt;br/&gt;
ClassCast checking run #1: 1347ms&lt;br/&gt;
ClassCast checking run #2: 1250ms&lt;br/&gt;
InstanceOf checking run #1: 7ms&lt;br/&gt;
InstanceOf checking run #2: 2ms&lt;/p&gt;

&lt;p&gt;This could explain why Documents with more Fields scales worse, as in, for lots&lt;br/&gt;
of Documents with lots of Fields, the effect is exacerbated.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: Other&lt;/p&gt;</environment>
            <key id="12314542">LUCENE-392</key>
            <summary>[PATCH] Some Field methods use Classcast check instead of instanceof which is slow</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="psmith@apache.org">Paul Smith</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 May 2005 17:30:37 +0100</created>
                <updated>Thu, 2 Jun 2011 23:03:48 +0100</updated>
                    <resolved>Thu, 10 Nov 2005 12:33:03 +0000</resolved>
                                            <fixVersion>1.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322406" author="psmith@apache.org" created="Tue, 24 May 2005 17:31:34 +0100"  >&lt;p&gt;Created an attachment (id=15142)&lt;br/&gt;
Patch to change Field class to use instanceof check instead of ClassCast&lt;/p&gt;</comment>
                    <comment id="12322407" author="daniel.naber@t-online.de" created="Wed, 25 May 2005 04:06:15 +0100"  >&lt;p&gt;It&apos;s important to note than it&apos;s only slower if the exception is actually &lt;br/&gt;
thrown. Just using the try/catch block doesn&apos;t isn&apos;t bad for performance. If &lt;br/&gt;
the exception is never thrown, the additional &quot;instanceof&quot; will actually make &lt;br/&gt;
things (slightly?) slower. &lt;/p&gt;
</comment>
                    <comment id="12322408" author="whoschek@lbl.gov" created="Wed, 25 May 2005 04:32:55 +0100"  >&lt;p&gt;You might want to double check that assumption on modern VMs.&lt;br/&gt;
The type check must be done anyway, and VMs optimize away the second type check &lt;span class=&quot;error&quot;&gt;&amp;#91;cast&amp;#93;&lt;/span&gt; (which is &lt;br/&gt;
immediately followed by the first one &lt;span class=&quot;error&quot;&gt;&amp;#91;instanceof&amp;#93;&lt;/span&gt;) since at this point the type is already known.&lt;/p&gt;</comment>
                    <comment id="12322409" author="psmith@apache.org" created="Wed, 25 May 2005 06:47:42 +0100"  >&lt;p&gt;Daniel, you are correct that the cost of the exception catching is only incurred&lt;br/&gt;
if the exception is actually thrown.  I was a bit stunned to see this crop up in&lt;br/&gt;
performance analysis.  See Bug 34930 where some performance profiling highlights&lt;br/&gt;
this area as one of the higher CPU consumers, so it &lt;em&gt;must&lt;/em&gt; be getting called. &lt;br/&gt;
now over a large Document set being indexed, if it is invoked quite a bit, it&lt;br/&gt;
ends up causing a reasonable impact on the overall timeline for indexing.&lt;/p&gt;

&lt;p&gt;Isn&apos;t the proposed patch a better way to do the same thing even if it&apos;s NOT&lt;br/&gt;
called that often? &lt;/p&gt;</comment>
                    <comment id="12322410" author="daniel.naber@t-online.de" created="Wed, 25 May 2005 07:27:58 +0100"  >&lt;p&gt;We just need to make sure to optimize for the common use case, not for some &lt;br/&gt;
special case. If the exception was never thrown, try/catch was 30-40% faster &lt;br/&gt;
because it doesn&apos;t require the additional instanceof (tested with Java 1.4). &lt;/p&gt;

&lt;p&gt;I suggest we first find out how often the exception is thrown on average. &lt;/p&gt;
</comment>
                    <comment id="12322411" author="whoschek@lbl.gov" created="Wed, 25 May 2005 07:44:00 +0100"  >&lt;p&gt;I don&apos;t know what you were measuring but that&apos;s not the the case in any environment I&apos;ve seen since &lt;br/&gt;
JDK 1.3, even with the client VM. To see for yourself try this, with and without cast() / cast2(). &lt;/p&gt;


&lt;p&gt;	public static void main(String[] args) throws Exception {&lt;br/&gt;
		int iters = Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;); // e.g. 1000&lt;br/&gt;
		int runs = Integer.parseInt(args&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;);  // e.g. 3&lt;br/&gt;
		int sum = 0;&lt;br/&gt;
		Object[] arr = new Object&lt;span class=&quot;error&quot;&gt;&amp;#91;10000&amp;#93;&lt;/span&gt;;&lt;br/&gt;
		Object obj = &quot;xx&quot;;&lt;br/&gt;
		if (Boolean.valueOf(args&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;).booleanValue()) obj = new Integer(0);&lt;br/&gt;
		for (int i=0; i &amp;lt; arr.length; i++) arr&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = obj;&lt;/p&gt;

&lt;p&gt;		for (int run=0; run &amp;lt; runs; run++) {&lt;br/&gt;
			System.out.println(&quot;\nrun=&quot; + run);&lt;br/&gt;
			long start = System.currentTimeMillis();&lt;br/&gt;
			for (int j=0; j &amp;lt; iters; j++) {&lt;br/&gt;
				for (int i=0; i &amp;lt; arr.length; i++) &lt;/p&gt;
{
					sum += cast2(arr[i]).charAt(0);
//					sum += cast(arr[i]).charAt(0);
				}
&lt;p&gt;			}&lt;br/&gt;
			long end = System.currentTimeMillis();&lt;br/&gt;
			System.out.println(&quot;secs = &quot; + ((end-start) / 1000.0f));&lt;br/&gt;
		}&lt;br/&gt;
		System.out.println(&quot;checksum=&quot; + sum);&lt;br/&gt;
	}&lt;/p&gt;

&lt;p&gt;	private static String cast(Object x) &lt;/p&gt;
{
		if (x instanceof String) return (String)x;
		return &quot;yy&quot;;
	}

&lt;p&gt;	private static String cast2(Object x) {&lt;br/&gt;
		try &lt;/p&gt;
{return (String)x; }
&lt;p&gt; catch (ClassCastException e) &lt;/p&gt;
{ return &quot;yy&quot;; }
&lt;p&gt;	}&lt;/p&gt;</comment>
                    <comment id="12322412" author="psmith@apache.org" created="Wed, 25 May 2005 09:08:47 +0100"  >&lt;p&gt;The area of code that is affected by this is in&lt;br/&gt;
DocumentWriter.invertDocument(Document):&lt;/p&gt;

&lt;p&gt;...&lt;br/&gt;
          Reader reader;			  // find or make Reader&lt;br/&gt;
          if (field.readerValue() != null)&lt;br/&gt;
            reader = field.readerValue();&lt;br/&gt;
          else if (field.stringValue() != null)&lt;br/&gt;
            reader = new StringReader(field.stringValue());&lt;br/&gt;
          else&lt;br/&gt;
            throw new IllegalArgumentException&lt;br/&gt;
                    (&quot;field must have either String or Reader value&quot;);&lt;/p&gt;


&lt;p&gt;In my test scenario I do not use a reader, all my Fields are created as normal&lt;br/&gt;
String values, so the first if() to determine if the reader comes back null will&lt;br/&gt;
always result in an ClassCastException.  &lt;/p&gt;

&lt;p&gt;That&apos;s 1 ClassCastException for each Indexed &amp;amp; Tokenized field &lt;em&gt;per&lt;/em&gt; Document.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure of whether String/Reader is more prevelant out there in the wild,&lt;br/&gt;
but I would have thought String would have been common.  Sure for large&lt;br/&gt;
documents like PDF&apos;s etc it&apos;s more likely a Reader will be used.&lt;/p&gt;

&lt;p&gt;Anyway, for the try/catch block, the JVM performs an implicit ClassCast check&lt;br/&gt;
anyway, that&apos;s how it determines whether it should throw an exception or not, so&lt;br/&gt;
there is no way to avoid some form of an instanceof.&lt;/p&gt;

&lt;p&gt;Modern JVM&apos;s are quicker with instanceof.  However this may not (probably not)&lt;br/&gt;
true for older (1.2 or earlier?) VM&apos;s, although I don&apos;t have access to that&lt;br/&gt;
anymore test that theory.&lt;/p&gt;</comment>
                    <comment id="12322413" author="daniel.naber@t-online.de" created="Thu, 26 May 2005 23:00:26 +0100"  >&lt;p&gt;Paul: I also use mostly String instead of Readers... but testing the patch by &lt;br/&gt;
adding 10000 small documents to a RAMDirectory I couldn&apos;t see any difference. &lt;br/&gt;
Even running the same code multiple times gives varying results for me. I &lt;br/&gt;
guess my desktop environment and the Pentium M just aren&apos;t appropriate for &lt;br/&gt;
these kind of tests. &lt;/p&gt;

&lt;p&gt;Wolfganfg: I used the code pasted in the original report but modified so that &lt;br/&gt;
instanceof is always true and  a cast is done after that and so that the &lt;br/&gt;
exception is never thrown. See above, my setup is probably not appropriate for &lt;br/&gt;
measuring small differences. &lt;/p&gt;
</comment>
                    <comment id="12322414" author="whoschek@lbl.gov" created="Fri, 27 May 2005 03:09:37 +0100"  >&lt;p&gt;Daniel: If there&apos;s a lot other stuff going on that introduces measurement variance and perturbation, it &lt;br/&gt;
makes sense to isolate the cast issue into a small microbenchmark. I think the code I sent demonstrates &lt;br/&gt;
beyond doubt that the &quot;instanceOf + cast&quot; version is always faster no matter which branch is taken. It &lt;br/&gt;
doesn&apos;t matter which branch is more common, it&apos;s always faster. The &quot;catch ClassCastException&quot; is an &lt;br/&gt;
idiom that may have worked well in JDK &amp;lt;= 1.2 but it is demonstrably counterproductive on more recent &lt;br/&gt;
VMs.&lt;/p&gt;
</comment>
                    <comment id="12322415" author="psmith@apache.org" created="Fri, 27 May 2005 06:41:12 +0100"  >&lt;p&gt;Daniel, could you post your test class so I can try your same test on my end?&lt;/p&gt;

&lt;p&gt;cheers,&lt;/p&gt;

&lt;p&gt;Paul&lt;/p&gt;</comment>
                    <comment id="12322416" author="daniel.naber@t-online.de" created="Sat, 28 May 2005 05:50:11 +0100"  >&lt;p&gt;Created an attachment (id=15188)&lt;br/&gt;
simple indexing performance test&lt;/p&gt;</comment>
                    <comment id="12322417" author="psmith@apache.org" created="Mon, 30 May 2005 08:30:56 +0100"  >&lt;p&gt;Thanks for you test case Daniel, I appreciate your time in analysing this&lt;br/&gt;
(pardon the pun... maybe only a little... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).  &lt;/p&gt;

&lt;p&gt;I ran your test and got similar results, as in, with class cast or instanceof,&lt;br/&gt;
they were about the same, which I thought odd indeed...&lt;/p&gt;

&lt;p&gt;Then I spotted something.  You&apos;re test case uses Field.Index.NO for the&lt;br/&gt;
non-stringreader case.  This ends up bypassing the bit of code I mentioned in&lt;br/&gt;
DocumentWriter (see the if() block on line 140 of DocumentWriter, for our test&lt;br/&gt;
the Field has to be an Indexed, tokenized field) .&lt;/p&gt;

&lt;p&gt;Try these lines instead:&lt;/p&gt;

&lt;p&gt;    doc.add(new Field(&quot;body&quot;, &quot;laber&quot;, Field.Store.YES, Field.Index.TOKENIZED));&lt;br/&gt;
    doc.add(new Field(&quot;body2&quot;, &quot;blubb&quot;, Field.Store.YES, Field.Index.TOKENIZED));&lt;br/&gt;
    doc.add(new Field(&quot;body3&quot;, &quot;bla&quot;, Field.Store.YES, Field.Index.TOKENIZED));&lt;/p&gt;

&lt;p&gt;I got about 10-30% slower results with class cast because using this example of&lt;br/&gt;
Tokenised text, the class cast does actually get thrown and caught.  Yes,&lt;br/&gt;
results are quite broad, but the instanceof test slowest result was always&lt;br/&gt;
better than the faster classcast results.&lt;/p&gt;

&lt;p&gt;Modern VM&apos;s exception creation is miles better than it used to be, but older&lt;br/&gt;
VM&apos;s were pretty awful.  I wonder what the difference is with, say, JDK 1.3.&lt;/p&gt;

&lt;p&gt;At the end of the day, this is only a minor performance improvement, but it can&lt;br/&gt;
add up when doing a LOT of documents with a lot of fields, hence I thought this&lt;br/&gt;
would be a worth while improvement.&lt;/p&gt;

</comment>
                    <comment id="12322418" author="psmith@apache.org" created="Mon, 30 May 2005 08:34:41 +0100"  >&lt;p&gt;I thought I would add one more comment.  Perhaps the current implementation&lt;br/&gt;
doesn&apos;t suffer from class cast problem because most people don&apos;t actually&lt;br/&gt;
tokenize Strings? Perhaps they always use Readers, which ends up being &apos;lucky&apos;&lt;br/&gt;
in that it&apos;s always checked for first, and therefore never suffers from the&lt;br/&gt;
class cast exception?&lt;/p&gt;
</comment>
                    <comment id="12322419" author="whoschek@lbl.gov" created="Mon, 30 May 2005 08:40:43 +0100"  >&lt;p&gt;I think the key observation for this issue (backed up by benchmarks and profiling) is that instanceOf &lt;br/&gt;
followed by cast is always faster, no matter which branch ends up being taken. It doesn&apos;t matter which use &lt;br/&gt;
cases might be more common than others, because it&apos;s always faster no matter what.&lt;/p&gt;</comment>
                    <comment id="12322420" author="cutting@apache.org" created="Sat, 4 Jun 2005 03:10:17 +0100"  >&lt;p&gt;I think that catching the Exception here is bad style: Exceptions should not be&lt;br/&gt;
used for control flow in ordinary circumstances.  It should also be faster, but&lt;br/&gt;
I&apos;m not sure whether this is a significant or a premature optimization. &lt;br/&gt;
Regardless, I vote to accept this patch on the basis of style alone.&lt;/p&gt;</comment>
                    <comment id="12322421" author="rnewson@connected.com" created="Mon, 18 Jul 2005 14:15:34 +0100"  >&lt;p&gt;As another style comment, the else clause is unnecessary;&lt;/p&gt;

&lt;p&gt;if (fieldsData instanceof String) {&lt;br/&gt;
  return (String)fieldsData;&lt;br/&gt;
}&lt;br/&gt;
return null;&lt;/p&gt;

&lt;p&gt;Eclipse highlights the current patches &apos;else &lt;/p&gt;
{ return null;}
&lt;p&gt;&apos; with a warning.&lt;/p&gt;

&lt;p&gt;I was also wondering why Field.java is not indented...&lt;/p&gt;</comment>
                    <comment id="12357187" author="yseeley@gmail.com" created="Thu, 10 Nov 2005 12:33:03 +0000"  >&lt;p&gt;instanceof is faster for me (faster than testing getClass()==otherClass too), and it&apos;s better style.&lt;br/&gt;
fix applied.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312628" name="ASF.LICENSE.NOT.GRANTED--lucene.instanceof.patch" size="1661" author="psmith@apache.org" created="Tue, 24 May 2005 17:31:34 +0100" />
                    <attachment id="12312629" name="ASF.LICENSE.NOT.GRANTED--PerformanceTest.java" size="1260" author="daniel.naber@t-online.de" created="Sat, 28 May 2005 05:50:11 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>35037</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 25 May 2005 03:06:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13357</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27339</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>