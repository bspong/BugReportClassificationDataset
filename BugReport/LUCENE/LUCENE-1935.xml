<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:14:06 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1935/LUCENE-1935.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1935] Generify PriorityQueue</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1935</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Priority Queue should use generics like all other Java 5 Collection API classes. This very simple, but makes code more readable.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12437015">LUCENE-1935</key>
            <summary>Generify PriorityQueue</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Oct 2009 14:31:13 +0100</created>
                <updated>Thu, 2 May 2013 03:29:27 +0100</updated>
                    <resolved>Fri, 2 Oct 2009 18:28:30 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>3.0</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12761229" author="thetaphi" created="Thu, 1 Oct 2009 15:26:00 +0100"  >&lt;p&gt;Patch for Priority Queue. The usage is not yet generified, but the class itsself is. Now it works like a standard Java 5 Collection (and can for sure be used conventionally).&lt;/p&gt;

&lt;p&gt;(I also removed the tabs/whitespace in the test).&lt;/p&gt;</comment>
                    <comment id="12761367" author="paul.elschot@xs4all.nl" created="Thu, 1 Oct 2009 23:21:30 +0100"  >&lt;p&gt;Uwe, could you take a look at ScorerDocQueue?&lt;/p&gt;

&lt;p&gt;I derived that one from PriorityQueue in 2005 to avoid casts, but now such code duplication may not be necessary anymore.&lt;/p&gt;

&lt;p&gt;In case you think ScorerDocQueue could indeed be removed by using generics instead, I&apos;d gladly try and provide a patch for that.&lt;/p&gt;</comment>
                    <comment id="12761372" author="thetaphi" created="Thu, 1 Oct 2009 23:29:53 +0100"  >&lt;p&gt;Was it to avoid a perforance impact of casting or only for cleaner code? Because the generic version of PQ does noch change anything, the resulting byte code is identical (you can compare that with a decompilation using JAD). The casts are added by the Java Compiler automatically.&lt;br/&gt;
The lessThan method is covariant overloaded (passed through) in subclasses by javac (like in the test): lessThan(Integer, Integer) will appear as such in the class byte code of the subclass, but javac will add lessThan(Object, Object) that delgates to the covariant overload (which may be a small perf impact). It is called by the compiled code of PQ using the (Object, Object) signature (PQ does not know anything about generics in its byte code).&lt;/p&gt;</comment>
                    <comment id="12761374" author="paul.elschot@xs4all.nl" created="Thu, 1 Oct 2009 23:37:34 +0100"  >&lt;p&gt;It was to avoid the performance impact of casting, however I don&apos;t remember how big the performance impact was.&lt;br/&gt;
I would hope that nowadays the added casts are optimized away by the JIT.&lt;/p&gt;</comment>
                    <comment id="12761381" author="thetaphi" created="Thu, 1 Oct 2009 23:50:54 +0100"  >&lt;p&gt;I think it could be rewritten and the missing functionality with the funny name &quot;topSkipToAndAdjustElsePop&quot; added somewhere. The simpliest would be a subclass:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ScorerDocQueue &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; PriorityQueue&amp;lt;HeapedScorerDoc&amp;gt; {...}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I do not know how big the perf impact would be (if there is one). As mentioned before, there is a small oerhead, because the overriden abstract method lessThan(HeapedScorerDoc, HeapedScorerDoc) would be wrapped by javac as lessThan(Object, Object) - a small added cost (do not know how big or jvm optimizes away, which I hope)&lt;/p&gt;</comment>
                    <comment id="12761387" author="thetaphi" created="Fri, 2 Oct 2009 00:02:07 +0100"  >&lt;p&gt;By the way, the covariant overload is optimized away by the compiler (not the JVM), if an anonymous or private (and therefore final) class is used. This is the code from the test:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class IntegerQueue &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; PriorityQueue&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; IntegerQueue(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count) {
        &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;();
        initialize(count);
    }

    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; lessThan(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; a, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; b) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (a &amp;lt; b);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is compiled to the following code by Java 1.5 javac:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class TestPriorityQueue$IntegerQueue &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; PriorityQueue {

    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; lessThan(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; a, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; b) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;)a).intValue() &amp;lt; ((&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;)b).intValue();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TestPriorityQueue$IntegerQueue(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; count) {
        initialize(count);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So normal usage in Lucene would have no impact (would be the same as before). Only if you override a generified PQ with a lessThan method not final or somehow accessible, the compiler has to add the wrapper.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;If you want to see, what I mean with &quot;wrapper&quot;, look into &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12418140/AttributeSource.jad&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/secure/attachment/12418140/AttributeSource.jad&lt;/a&gt; and there in getAttributeImplIterator(). The inline Iterator overrides next(), but the return type is generic -&amp;gt; compiler adds a &quot;volatile&quot; method (how JAD identifies it).&lt;/p&gt;</comment>
                    <comment id="12761389" author="markrmiller@gmail.com" created="Fri, 2 Oct 2009 00:04:26 +0100"  >&lt;p&gt;Ive tried custom PQ&apos;s for use in sorting to avoid the casting not too long ago - I both mirco benched and used a profiler. I didn&apos;t see no win. Big fat waste of my time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;actually non sorting too - tried em both. &lt;/p&gt;</comment>
                    <comment id="12761395" author="psmith@apache.org" created="Fri, 2 Oct 2009 00:17:50 +0100"  >&lt;p&gt;I shall perhaps regret asking this, but is there any reason not to use java.util.PriorityQueue instead? Seems like reinventing the wheel a bit there (I understand historically why Lucene has this class).&lt;/p&gt;

&lt;p&gt;(is Lucene 2.9+ now Java 5, or is that a different discussion altogether?)&lt;/p&gt;</comment>
                    <comment id="12761399" author="thetaphi" created="Fri, 2 Oct 2009 00:26:38 +0100"  >&lt;p&gt;The implementation of Lucene&apos;s PriorityQueue is a little bit different and also its API. Would be some work to rewrite the collectors.&lt;/p&gt;

&lt;p&gt;The biggest problem of Java&apos;s PQ: It does not let elements fall out when a higher prio entry is inserted and the list is full (no upper limit on list length). The Java list grows like a ArrayList.&lt;/p&gt;</comment>
                    <comment id="12761408" author="psmith@apache.org" created="Fri, 2 Oct 2009 00:43:30 +0100"  >&lt;p&gt;thanks Uwe, I thought I would regret asking, good points there.  Shame the JDK doesn&apos;t have a fixed size PriorityQueue implementation, that seems a bit of a glaring omission. &lt;/p&gt;</comment>
                    <comment id="12761409" author="thetaphi" created="Fri, 2 Oct 2009 00:44:29 +0100"  >&lt;p&gt;Paul Elschot: Do you want to provide a patch for ScorerDocQueue that it subclasses PQ&amp;lt;HeapedScorerDoc&amp;gt;?&lt;/p&gt;</comment>
                    <comment id="12761423" author="markrmiller@gmail.com" created="Fri, 2 Oct 2009 01:22:36 +0100"  >&lt;blockquote&gt;&lt;p&gt;I thought I would regret asking&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why? Now a bunch of us know a bit more than we did. Information sharing is sweet.&lt;/p&gt;</comment>
                    <comment id="12761492" author="paul.elschot@xs4all.nl" created="Fri, 2 Oct 2009 08:22:02 +0100"  >&lt;p&gt;&amp;gt; Do you want to provide a patch for ScorerDocQueue that it subclasses PQ&amp;lt;HeapedScorerDoc&amp;gt;?&lt;/p&gt;

&lt;p&gt;Yes, however that could also be done at a separate issue.&lt;br/&gt;
Thanks for reminding me of the topSkipToAndAdjustElsePop method.&lt;br/&gt;
At the time the JIT was not able to fully optimize two method calls to a ScorerDocQueue object, so I added that method to the class.&lt;/p&gt;

&lt;p&gt;Btw. ScorerDocQueue is used in disjunction queries when the docs should be scored in order, so it is sensitive to query performance, see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-365&quot; title=&quot;[PATCH] Performance improvement to DisjunctionSumScorer&quot;&gt;&lt;del&gt;LUCENE-365&lt;/del&gt;&lt;/a&gt; .&lt;/p&gt;</comment>
                    <comment id="12761651" author="thetaphi" created="Fri, 2 Oct 2009 18:28:30 +0100"  >&lt;p&gt;Committed revision: 821104&lt;/p&gt;</comment>
                    <comment id="12761653" author="thetaphi" created="Fri, 2 Oct 2009 18:33:37 +0100"  >&lt;p&gt;Hi Paul Elschot: I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1940&quot; title=&quot;Refactor ScorerDocQueue that it subclasses PriorityQueue&amp;lt;HeapedScorerDoc&amp;gt;&quot;&gt;&lt;del&gt;LUCENE-1940&lt;/del&gt;&lt;/a&gt; for the refactoring&lt;/p&gt;</comment>
                    <comment id="12836199" author="thetaphi" created="Sat, 20 Feb 2010 16:30:43 +0000"  >&lt;p&gt;Just for reference: Here is the generated class (by javac) when overriding lessThan (as example HitQueue), decompiled from the resulting class file by JAD.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12392905">LUCENE-1257</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12437139">LUCENE-1940</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12436440" name="HitQueue.jad" size="1177" author="thetaphi" created="Sat, 20 Feb 2010 16:30:43 +0000" />
                    <attachment id="12421022" name="LUCENE-1935.patch" size="11791" author="thetaphi" created="Thu, 1 Oct 2009 15:26:00 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 1 Oct 2009 22:21:30 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11835</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25790</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>