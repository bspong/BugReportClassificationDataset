<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:05:45 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3065/LUCENE-3065.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3065] NumericField should be stored in binary format in index (matching Solr&apos;s format)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3065</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;(Spinoff of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3001&quot; title=&quot;Add TrieFieldHelper lucene so we can write solr compatible Trie* fields w/o solr dependency&quot;&gt;&lt;del&gt;LUCENE-3001&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Today when writing stored fields we don&apos;t record that the field was a NumericField, and so at IndexReader time you get back an &quot;ordinary&quot; Field and your number has turned into a string.  See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1701?focusedCommentId=12721972&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12721972&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1701?focusedCommentId=12721972&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12721972&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have spare bits already in stored fields, so, we should use one to record that the field is numeric, and then encode the numeric field in Solr&apos;s more-compact binary format.&lt;/p&gt;

&lt;p&gt;A nice side-effect is we fix the long standing issue that you don&apos;t get a NumericField back when loading your document.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12506079">LUCENE-3065</key>
            <summary>NumericField should be stored in binary format in index (matching Solr&apos;s format)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 3 May 2011 18:39:53 +0100</created>
                <updated>Thu, 2 May 2013 03:29:38 +0100</updated>
                    <resolved>Sat, 7 May 2011 14:14:46 +0100</resolved>
                                            <fixVersion>3.2</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13028395" author="thetaphi" created="Tue, 3 May 2011 21:03:31 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Spookily, nothing failed in Solr... I assume there&apos;s somewhere in Solr&lt;br/&gt;
that must now be fixed to handle the fact that a field can come back&lt;br/&gt;
as NumericField? Anyone know where...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats easy to understand: Solr does not use NumericField at all. It produces a NumericTokenStream and indexes it like any other analyzer. The byte[] field is indexed as a separate Field with only store=true and binary.&lt;/p&gt;

&lt;p&gt;This is what I wanted to say with my last comment.&lt;/p&gt;</comment>
                    <comment id="13028397" author="thetaphi" created="Tue, 3 May 2011 21:07:22 +0100"  >&lt;p&gt;Aboutthe patch: Maybe the byte[] returning methods in NumericUtils should use BytesRef and reuse that for storing (applies to trunk)?&lt;/p&gt;</comment>
                    <comment id="13028398" author="mikemccand" created="Tue, 3 May 2011 21:07:39 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Thats easy to understand: Solr does not use NumericField at all. It produces a NumericTokenStream and indexes it like any other analyzer. The byte[] field is indexed as a separate Field with only store=true and binary.&lt;/p&gt;

&lt;p&gt;This is what I wanted to say with my last comment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ahhhh, OK.  So, not spooky.&lt;/p&gt;

&lt;p&gt;We should eventually fix that; shouldn&apos;t Solr just use NumericField instead of doing this encode/decode itself?  Is there some reason...?&lt;/p&gt;</comment>
                    <comment id="13028399" author="ryantxu" created="Tue, 3 May 2011 21:13:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;Is there some reason...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Solr did its own encoding/decoding so that it could store a binary field &amp;#8211; with this patch, that is not necessary anymore.&lt;/p&gt;</comment>
                    <comment id="13028404" author="mikemccand" created="Tue, 3 May 2011 21:18:30 +0100"  >&lt;p&gt;Uwe: I agree, I&apos;ll use BytesRef in trunk.&lt;/p&gt;

&lt;p&gt;Ryan: OK.  Should we try to fix that w/ this issue?  If so, can you take a crack at it?  Thanks.  Or, we can postpone... not necessary for this initial cutover.&lt;/p&gt;</comment>
                    <comment id="13028408" author="ryantxu" created="Tue, 3 May 2011 21:23:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;If so, can you take a crack at it?  Thanks.  Or, we can postpone... not necessary for this initial cutover.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll take a crack at it... but I don&apos;t think its necessary in the first pass&lt;/p&gt;</comment>
                    <comment id="13028412" author="yseeley@gmail.com" created="Tue, 3 May 2011 21:36:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;ll take a crack at it... but I don&apos;t think its necessary in the first pass&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should we try to accept both (binary or numeric field coming back) so this isn&apos;t a needless index format break, or is there another lucene index format break in the cards soon anyway?&lt;/p&gt;</comment>
                    <comment id="13028416" author="thetaphi" created="Tue, 3 May 2011 21:45:23 +0100"  >&lt;p&gt;Mike: One thing about the bitmask and the 4 values. There is also an issue open to extend NumericField by byte and short. Maybe we should reserve 3 bits instead of 2 for the numeric field type - so 0x70 instead of 0x30 as mask? I just want to reseve this one extra bit, so we dont need to do any dumb masks and values later, if we extend.&lt;/p&gt;

&lt;p&gt;About the index format change:&lt;br/&gt;
As described above, for Solr it&apos;s not a problem. New fields are always indexed using NumericField. On the query side, when Document.getField is called, it could simply check the return value with instanceof. If the getter returns not a NumericField, Solr knows that it&apos;s binary and can decode manually. This would safe backwards.&lt;/p&gt;

&lt;p&gt;Else its no break at all if we support both stored field formats during indexing somehow (in Lucene its string, returning a String Field or new binary NumericField). The index format itsself does not change generally (no need to bump version numbers, as we only use unused bits?)&lt;/p&gt;</comment>
                    <comment id="13028454" author="thetaphi" created="Tue, 3 May 2011 22:49:27 +0100"  >&lt;p&gt;There is still a problem - first the good news:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If user calls Document.get(field), the returned string is as before, so there is no break at all. The reason is the implementation of NumericField.stringValue(), it returns what the user is used to from 3.0&lt;/li&gt;
	&lt;li&gt;If a user calls getFieldable(field) all is fine, too. The only change is that it could return NumericField now. If the user simply calls stringValue() all is identical to 3.0&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Problems start with:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;If user calls Document.getField(name) it returns Field (internally it casts the getFieldable()) result to Field. But NumericField does not subclass Field -&amp;gt; ClassCastException.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;How to handle this?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Maybe change those methods to return AbstractField, but thats a binary break and users will complain, because not everything works as expected&lt;/li&gt;
	&lt;li&gt;Make NumericField subclass Field (and Field is unfinalized) - thats a bad idea, because Field has too many methods / members that are out of scope&lt;/li&gt;
	&lt;li&gt;Deprecate Document.getField() and make it internally do an instanceof check, if it gets NumericField transform to a backwards-compatible Field? - This method is already broken. If you request Lazy field loading it also throws ClassCastEx (e.g. &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-609&quot; title=&quot;Lazy field loading breaks backward compat&quot;&gt;&lt;del&gt;LUCENE-609&lt;/del&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Not sure how to proceed. Else the patch looks fine. I think simply ignoring LazyField loading is fine, as numeric fields are a maximum of 8 bytes.... Else we would need LazyNumericField &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13028483" author="mikemccand" created="Tue, 3 May 2011 23:33:06 +0100"  >&lt;p&gt;Ugh!  Field/Fieldable/AbstractField strikes again.... hmm not sure what to do.&lt;/p&gt;</comment>
                    <comment id="13028526" author="cmale" created="Wed, 4 May 2011 01:32:04 +0100"  >&lt;p&gt;The Field/Fieldable/AbstractField problem is what I&apos;ve been addressing in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2310&quot; title=&quot;Reduce Fieldable, AbstractField and Field complexity&quot;&gt;&lt;del&gt;LUCENE-2310&lt;/del&gt;&lt;/a&gt;.  There I took the step of making NumericField extend Field, with a series of unsupported fields.  This seemed easiest to do particularly with FieldType in mind.  I then deprecated all the Fieldable methods in Document.&lt;/p&gt;</comment>
                    <comment id="13028540" author="yseeley@gmail.com" created="Wed, 4 May 2011 02:06:21 +0100"  >&lt;blockquote&gt;&lt;p&gt;I then deprecated all the Fieldable methods in Document.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmmm, I thought Fieldable was a step forward.  The Field class is the worst of the bunch!&lt;/p&gt;</comment>
                    <comment id="13028570" author="cmale" created="Wed, 4 May 2011 04:06:15 +0100"  >&lt;p&gt;Yeah there is an element of truth to that except I&apos;m not convinced we need to have such a complicated hierarchy (although I&apos;ve since been thinking about field definitions coming from different sources, so maybe an interface is best).  But yes, Field is a mess and I&apos;ve been trying to clean that out too.&lt;/p&gt;</comment>
                    <comment id="13028677" author="thetaphi" created="Wed, 4 May 2011 10:17:44 +0100"  >&lt;p&gt;Mike:&lt;br/&gt;
I reviewed the patch again: You are currently using 3 bits already. 1 bit is solely for detecting numerics, the other two are the type.&lt;/p&gt;

&lt;p&gt;In my opinion, to check if its a numeric field, use a MASK of 3 bits and check for !=0. As soon as any bit in this mask is set, its numeric. The actual numeric fields have values !=0:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; _NUMERIC_BIT_SHIFT = 3;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_MASK = 0x07 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;

&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_INT = 1 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_LONG = 2 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_FLOAT = 3 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_DOUBLE = 4 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;span class=&quot;code-comment&quot;&gt;// unused: &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_SHORT = 5 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// unused: &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; FIELD_IS_NUMERIC_BYTE = 6 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// and we have still one more over :-)  7 &amp;lt;&amp;lt; _NUMERIC_BIT_SHIFT
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// check &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; field is numeric:
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((bits &amp;amp; FIELD_IS_NUMERIC_MASK) != 0) {}

&lt;span class=&quot;code-comment&quot;&gt;// parse type:
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt; (bits &amp;amp; FIELD_IS_NUMERIC_MASK) {
  &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; FIELD_IS_NUMERIC_INT: ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13028680" author="thetaphi" created="Wed, 4 May 2011 10:21:56 +0100"  >&lt;p&gt;This gives us more freedom in future, as we are limit to completely 8 bits, 3 are already used - this only adds 3 more not 4.&lt;/p&gt;

&lt;p&gt;By the way, for performance reasons all constants should be declared as int not byte, as the byte read from index is already an int.&lt;/p&gt;</comment>
                    <comment id="13028691" author="thetaphi" created="Wed, 4 May 2011 10:49:11 +0100"  >&lt;p&gt;Here the patch with my changes&lt;/p&gt;</comment>
                    <comment id="13028693" author="mikemccand" created="Wed, 4 May 2011 10:53:20 +0100"  >&lt;p&gt;Patch looks great Uwe!  Except we need to resolve this Field/Fieldable/AbstractField.  Probably we should go and finish &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2310&quot; title=&quot;Reduce Fieldable, AbstractField and Field complexity&quot;&gt;&lt;del&gt;LUCENE-2310&lt;/del&gt;&lt;/a&gt;...&lt;/p&gt;</comment>
                    <comment id="13028699" author="thetaphi" created="Wed, 4 May 2011 11:35:51 +0100"  >&lt;p&gt;More refactoring:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Now NumericFields also reproduce the indexed/omitNorms/omitTF settings - only precStep cannot be reproduced&lt;/li&gt;
	&lt;li&gt;Cut over to int instead of byte, this removes lots of casting in FieldsReader&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13028701" author="thetaphi" created="Wed, 4 May 2011 11:42:47 +0100"  >&lt;p&gt;New patch, previous one had a leftover unused constant from Mike&apos;s patch.&lt;/p&gt;</comment>
                    <comment id="13028707" author="thetaphi" created="Wed, 4 May 2011 12:05:54 +0100"  >&lt;p&gt;This patch adds some refactoring because FieldSelectorResult is an enum since 3.0, so the (slow) queue of if-statements can be replaced by a fast switch.&lt;/p&gt;

&lt;p&gt;Also some minor comments and a missing &amp;amp; 0xFF when casting byte to int.&lt;/p&gt;</comment>
                    <comment id="13028716" author="thetaphi" created="Wed, 4 May 2011 12:50:42 +0100"  >&lt;p&gt;Next iteration:&lt;/p&gt;

&lt;p&gt;Reverted changes in Solr (they should come later), Lucene instead uses natively IndexInput and IndexOutput to write/read ints and longs.&lt;/p&gt;

&lt;p&gt;Solr&apos;s changes are completely unrelated.&lt;/p&gt;</comment>
                    <comment id="13028718" author="thetaphi" created="Wed, 4 May 2011 12:54:41 +0100"  >&lt;p&gt;Just to note: We also need to change the Forrest index format documentation!&lt;/p&gt;</comment>
                    <comment id="13028726" author="thetaphi" created="Wed, 4 May 2011 13:22:41 +0100"  >&lt;p&gt;Moved test to TestFieldsReader&lt;/p&gt;</comment>
                    <comment id="13028733" author="mikemccand" created="Wed, 4 May 2011 13:34:11 +0100"  >&lt;p&gt;Patch looks great Uwe!&lt;/p&gt;

&lt;p&gt;I think we should deprecate Document.getField?  And advertise in CHANGES that this is an &lt;span class=&quot;error&quot;&gt;&amp;#91;intentional&amp;#93;&lt;/span&gt; BW break, ie, you can no longer .getField if it&apos;s a NumericField (you&apos;ll hit CCE, just like you already do for lazy fields)?  I think that&apos;s the lesser evil here?&lt;/p&gt;</comment>
                    <comment id="13028764" author="thetaphi" created="Wed, 4 May 2011 15:44:18 +0100"  >&lt;p&gt;I added some javadocs to Document class:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getField() / getFields() is deprecated &lt;span class=&quot;error&quot;&gt;&amp;#91;we may change this in LUCENE-2310&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some thoughts:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;maybe we should make getField()/getFields() simply return null or does not include the Field into the returned array, if its not instanceof Field? We can add that to documentation, that lazy loaded and numerical fields are not returned.&lt;/li&gt;
	&lt;li&gt;I would also like to add a method Document.getNumericValue(s), that returns Number[] or Number like the NumericField one. Like above getField() it can return null/empty array if the field name has no numeric Fields?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The CHANGES entry may also be extended, currently it under &quot;bugs&quot; - we shold move.&lt;/p&gt;</comment>
                    <comment id="13029011" author="thetaphi" created="Wed, 4 May 2011 23:19:56 +0100"  >&lt;p&gt;I started a new issue in Solr for the changes there: &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2497&quot; title=&quot;Move Solr to new NumericField stored field impl of LUCENE-3065&quot;&gt;&lt;del&gt;SOLR-2497&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13029410" author="thetaphi" created="Thu, 5 May 2011 17:18:52 +0100"  >&lt;p&gt;Sorry my browser or JIRA deleted wrong comments, so I removed one from me and one from Mike &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; - Sorry.&lt;/p&gt;</comment>
                    <comment id="13029412" author="thetaphi" created="Thu, 5 May 2011 17:20:23 +0100"  >&lt;p&gt;Revert of deletion of Mike&apos;s first comment (sorry)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Patch against 3.x.&lt;/p&gt;

&lt;p&gt;I moved the to/from byte[] methods from Solr&apos;s TrieField into Lucene&apos;s NumericUtils, and fixed FieldsWriter/Reader to use free bits in the field&apos;s flags to know if the field is Numeric, and which type.&lt;/p&gt;

&lt;p&gt;I added a random test case to verify we now get the right NumericField back, when we stored NumericField during indexing.&lt;/p&gt;

&lt;p&gt;Old indices are handled fine (you&apos;ll get a String-ified Field back like you did before).&lt;/p&gt;

&lt;p&gt;Spookily, nothing failed in Solr... I assume there&apos;s somewhere in Solr that must now be fixed to handle the fact that a field can come back as NumericField?  Anyone know where...?)&lt;/p&gt;&lt;/blockquote&gt;</comment>
                    <comment id="13029421" author="earwin" created="Thu, 5 May 2011 17:33:53 +0100"  >&lt;p&gt;It&apos;s sad NumericFields are hardbaked into index format.&lt;/p&gt;

&lt;p&gt;Eg - I have some fields that are similar to Numeric in that they are &apos;stringified&apos; binary structures, and they can&apos;t become first-class in the same manner as Numeric.&lt;/p&gt;</comment>
                    <comment id="13029427" author="thetaphi" created="Thu, 5 May 2011 17:42:34 +0100"  >&lt;p&gt;Earwin: The long-term plan for flexible indexing is to make also stored fields flexible. For now its not possible, so NumericFields are handled separately. In the future, this might be a stored fields codec.&lt;/p&gt;</comment>
                    <comment id="13029642" author="thetaphi" created="Fri, 6 May 2011 00:06:19 +0100"  >&lt;p&gt;Updated patch with some improvements:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NumericField now lazy inits the NumericTokenStream only when tokenStreamValue() is caled for the first time. This speeds up stored fields reading, as the TokenStream is generally not needed in that case.&lt;/li&gt;
	&lt;li&gt;I currently dont like the instanceof chains in FieldsWriter and this lazy init code. Maybe NumericField and NumericTokenStream should define an enum type for the value so you can call NumericField.getValueType() - does anybody have a better idea?&lt;/li&gt;
	&lt;li&gt;Improved JavaDocs for NumericField to reflect the new stored fields format&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13029657" author="thetaphi" created="Fri, 6 May 2011 00:47:23 +0100"  >&lt;p&gt;I just add this TODO here:&lt;br/&gt;
&lt;b&gt;Don&apos;t forget to add a new 3.1 index format to TestBackwardsCompatibility!&lt;/b&gt;&lt;/p&gt;</comment>
                    <comment id="13029796" author="thetaphi" created="Fri, 6 May 2011 08:05:34 +0100"  >&lt;p&gt;New patch with the changes proposed before (no more instanceof chains).&lt;/p&gt;

&lt;p&gt;I think this is now ready to commit.&lt;/p&gt;</comment>
                    <comment id="13029873" author="mikemccand" created="Fri, 6 May 2011 11:12:32 +0100"  >&lt;p&gt;Looks great Uwe!  Awesome to finally get NumericField back at search time...&lt;/p&gt;</comment>
                    <comment id="13029903" author="rcmuir" created="Fri, 6 May 2011 12:58:02 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I just add this TODO here:&lt;br/&gt;
Don&apos;t forget to add a new 3.1 index format to TestBackwardsCompatibility!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we also update the description of the bits in fileformats.html?&lt;/p&gt;</comment>
                    <comment id="13029906" author="thetaphi" created="Fri, 6 May 2011 13:01:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;Just to note: We also need to change the Forrest index format documentation!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I already commented on that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3065?focusedCommentId=13028718&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13028718&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-3065?focusedCommentId=13028718&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13028718&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13029908" author="rcmuir" created="Fri, 6 May 2011 13:02:35 +0100"  >&lt;p&gt;ahh sorry I missed that. patch looks good to me though!&lt;/p&gt;</comment>
                    <comment id="13030294" author="thetaphi" created="Sat, 7 May 2011 09:38:13 +0100"  >&lt;p&gt;Committed 3.x revision: 1100480&lt;/p&gt;

&lt;p&gt;Now forward-porting to trunk...&lt;/p&gt;</comment>
                    <comment id="13030335" author="thetaphi" created="Sat, 7 May 2011 13:20:13 +0100"  >&lt;p&gt;This is the patch for trunk. Will commit soon!&lt;/p&gt;</comment>
                    <comment id="13030346" author="thetaphi" created="Sat, 7 May 2011 14:14:46 +0100"  >&lt;p&gt;Committed trunk revision: 1100526&lt;/p&gt;</comment>
                    <comment id="13043474" author="rcmuir" created="Fri, 3 Jun 2011 17:37:12 +0100"  >&lt;p&gt;Bulk closing for 3.2&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12502736">LUCENE-3001</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12506233">SOLR-2497</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12478380" name="LUCENE-3065.patch" size="33184" author="thetaphi" created="Fri, 6 May 2011 08:05:34 +0100" />
                    <attachment id="12478345" name="LUCENE-3065.patch" size="31548" author="thetaphi" created="Fri, 6 May 2011 00:06:19 +0100" />
                    <attachment id="12478167" name="LUCENE-3065.patch" size="26332" author="thetaphi" created="Wed, 4 May 2011 15:44:18 +0100" />
                    <attachment id="12478154" name="LUCENE-3065.patch" size="22937" author="thetaphi" created="Wed, 4 May 2011 13:22:41 +0100" />
                    <attachment id="12478152" name="LUCENE-3065.patch" size="22798" author="thetaphi" created="Wed, 4 May 2011 12:50:42 +0100" />
                    <attachment id="12478151" name="LUCENE-3065.patch" size="33063" author="thetaphi" created="Wed, 4 May 2011 12:05:54 +0100" />
                    <attachment id="12478150" name="LUCENE-3065.patch" size="32742" author="thetaphi" created="Wed, 4 May 2011 11:42:47 +0100" />
                    <attachment id="12478145" name="LUCENE-3065.patch" size="29613" author="thetaphi" created="Wed, 4 May 2011 10:49:11 +0100" />
                    <attachment id="12478089" name="LUCENE-3065.patch" size="29009" author="mikemccand" created="Tue, 3 May 2011 20:58:34 +0100" />
                    <attachment id="12478506" name="LUCENE-3065-trunk.patch" size="33814" author="thetaphi" created="Sat, 7 May 2011 13:20:13 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 3 May 2011 20:03:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2152</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24628</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>