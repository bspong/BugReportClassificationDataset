<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:23:31 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2762/LUCENE-2762.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2762] Don&apos;t leak deleted open file handles with pooled readers</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2762</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;If you have CFS enabled today, and pooling is enabled (either directly&lt;br/&gt;
or because you&apos;ve pulled an NRT reader), IndexWriter will hold open&lt;br/&gt;
SegmentReaders against the non-CFS format of each merged segment.&lt;/p&gt;

&lt;p&gt;So even if you close all NRT readers you&apos;ve pulled from the writer,&lt;br/&gt;
you&apos;ll still see file handles open against files that have been&lt;br/&gt;
deleted.&lt;/p&gt;

&lt;p&gt;This count will not grow unbounded, since it&apos;s limited by the number&lt;br/&gt;
of segments in the index, but it&apos;s still a serious problem since the&lt;br/&gt;
app had turned off CFS in the first place presumably to avoid risk of&lt;br/&gt;
too-many-open-files.  It&apos;s also bad because it ties up disk space&lt;br/&gt;
since these files would otherwise be deleted.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12479982">LUCENE-2762</key>
            <summary>Don&apos;t leak deleted open file handles with pooled readers</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Mon, 15 Nov 2010 18:10:15 +0000</created>
                <updated>Mon, 30 May 2011 11:25:33 +0100</updated>
                    <resolved>Sat, 20 Nov 2010 14:19:39 +0000</resolved>
                            <version>2.9.4</version>
                <version>3.0.3</version>
                <version>3.1</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>2.9.4</fixVersion>
                <fixVersion>3.0.3</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12932131" author="mikemccand" created="Mon, 15 Nov 2010 18:12:52 +0000"  >&lt;p&gt;Patch.&lt;/p&gt;

&lt;p&gt;I made a new test case showing the problem (and also modified a&lt;br/&gt;
pre-existing test case to also show the problem).  Patch includes the&lt;br/&gt;
fix (I don&apos;t commit the merged segment until after the CFS is built)&lt;br/&gt;
and both tests now pass.&lt;/p&gt;

&lt;p&gt;I also added a new core test utility class (LineFileDocs) that&apos;s able&lt;br/&gt;
to read line files produced by contrib/benchmark, and the new test&lt;br/&gt;
uses this to index the line for Wikipedia.  I think we should somehow&lt;br/&gt;
mark this test to run only at night on hudson eg with a new @nightly&lt;br/&gt;
tag or something... it&apos;s already disabled if it can&apos;t find the line&lt;br/&gt;
file, though it&apos;s now hardwired to the line file location in my env.&lt;/p&gt;

&lt;p&gt;In general I think our tests should sometimes use &quot;real&quot; data so if we&lt;br/&gt;
can get this wikipedia line file in a standard place on hudson then&lt;br/&gt;
longer-running @nightly tests can use it...&lt;/p&gt;</comment>
                    <comment id="12933051" author="mikemccand" created="Wed, 17 Nov 2010 17:50:58 +0000"  >
&lt;p&gt;So with this patch, we now build the CFS for a merged segment before&lt;br/&gt;
adding that segment to the segment infos.&lt;/p&gt;

&lt;p&gt;This is important, to prevent an NRT reader from opening the pre-CFS&lt;br/&gt;
version, thus tying open the files, using up extra disk space, and&lt;br/&gt;
leaking deleted-but-open files even once all NRT readers are closed.&lt;/p&gt;

&lt;p&gt;But, unfortunately, this means the worst-case temporary peak free disk&lt;br/&gt;
space required when using CFS has gone up... this worst case is hit if&lt;br/&gt;
you 1) open an existing index, 2) call optimize on it, 3) the index&lt;br/&gt;
needs more than 1 merge to become optimized, and 4) on the final merge&lt;br/&gt;
of that optimize just after it&apos;s built the CFS but hasn&apos;t yet&lt;br/&gt;
committed it to the segment infos.  At that point you have 1X due to&lt;br/&gt;
starting segments (which cannot be deleted until commit), another 1X&lt;br/&gt;
due to the segments created by the prior merge (now being merged),&lt;br/&gt;
another 1X by the newly merged single segment, and a final 1X from the&lt;br/&gt;
final CFS.  In this worst case that means we require 3X of your index&lt;br/&gt;
size in temporary space.&lt;/p&gt;

&lt;p&gt;In other cases we use less disk space (the NRT case).&lt;/p&gt;

&lt;p&gt;And of course if CFS is off there&apos;s no change to the temp disk space.&lt;/p&gt;

&lt;p&gt;I&apos;ve noted this in the javadocs and will add to CHANGES...&lt;/p&gt;

&lt;p&gt;But... I think we should improve our default MP.  First, maybe we&lt;br/&gt;
should set a maxMergeMB by default?  Because immense merges cause all&lt;br/&gt;
sorts of problems, and, likely are not going to impact search perf.&lt;br/&gt;
Second, I think if a newly merged segment will be more than X% of the&lt;br/&gt;
index, I think we should leave it in non-compound-file format even if&lt;br/&gt;
&quot;useCompoundFile&quot; is enabled... I think there&apos;s a separate issue open&lt;br/&gt;
somewhere for that 2nd one.&lt;/p&gt;</comment>
                    <comment id="12933070" author="jasonrutherglen" created="Wed, 17 Nov 2010 18:32:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should improve our default MP.  First, maybe we should set a maxMergeMB by default?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a good idea, however would we set an absolute size or a size relative to the aggregate size of the index?  I&apos;m using 5 GB in production as otherwise I&apos;m not sure the merge cost is worth the potential performance improvement, ie, long merges adversely affects indexing performance.&lt;/p&gt;</comment>
                    <comment id="12934144" author="mikemccand" created="Sat, 20 Nov 2010 14:19:38 +0000"  >&lt;p&gt;Fixed.&lt;/p&gt;

&lt;p&gt;I&apos;ll open a new issue to make cfs selection dependent on segment size...&lt;/p&gt;</comment>
                    <comment id="13038533" author="jhasenbe" created="Tue, 24 May 2011 13:56:04 +0100"  >&lt;p&gt;Since I am still observing file references on deleted index files, I have a quick question regarding this issue:&lt;/p&gt;

&lt;p&gt;We are using Lucene 3.0.3 with standard configuration and near real-time reader, as the following pseudo code shows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
        &lt;span class=&quot;code-comment&quot;&gt;// initially obtaining and referencing a near-real time searcher
&lt;/span&gt;        IndexSearcher currentSearcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexSearcher(writer.getReader())
...

	&lt;span class=&quot;code-comment&quot;&gt;// subsequently obtaining a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; near-real time searcher &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; necessary
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!currentSearcher.getIndexReader().isCurrent()) {
	    IndexReader newReader = currentSearcher.getIndexReader().reopen();
	    IndexSearcher newSearcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexSearcher(newReader);
	    
	    &lt;span class=&quot;code-comment&quot;&gt;// release old searcher (by decreasing reference)
&lt;/span&gt;	    currentSearcher.getIndexReader().decRef();
	    
	    currentSearcher = newSearcher;
	}
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After running the application for a while with index updates and doing new searcher using the newly obtained IndexSearcher, we noticed that JVM still holds references to already deleted index files.&lt;br/&gt;
For example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java    20742 xxx  394r   REG                8,6      366 3412376 /home/xxx/Desktop/mp.home/dev/index/Artist/_fc.cfs (deleted)
java    20742 xxx  398r   REG                8,6      366 3412375 /home/xxx/Desktop/mp.home/dev/index/Artist/_fq.cfs
java    20742 xxx  401uw  REG                8,6        0 3412333 /home/xxx/Desktop/mp.home/dev/index/Artist/write.lock
java    20742 xxx  415r   REG                8,6      128 3412349 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.tis
java    20742 xxx  416r   REG                8,6      366 3412341 /home/xxx/Desktop/mp.home/dev/index/Artist/_fd.cfs (deleted)
java    20742 xxx  417r   REG                8,6      366 3412344 /home/xxx/Desktop/mp.home/dev/index/Artist/_fe.cfs (deleted)
java    20742 xxx  418r   REG                8,6       71 3412356 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.tis (deleted)
java    20742 xxx  424r   REG                8,6        7 3412362 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.frq (deleted)
java    20742 xxx  425r   REG                8,6        7 3412363 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.prx (deleted)
java    20742 xxx  426r   REG                8,6       23 3412351 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.fdt (deleted)
java    20742 xxx  427r   REG                8,6       12 3412352 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.fdx (deleted)
java    20742 xxx  428r   REG                8,6       10 3412365 /home/xxx/Desktop/mp.home/dev/index/Artist/_fb.nrm (deleted)
java    20742 xxx  429r   REG                8,6       21 3412357 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.frq
java    20742 xxx  432r   REG                8,6       21 3412358 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.prx
java    20742 xxx  433r   REG                8,6       61 3412347 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.fdt
java    20742 xxx  434r   REG                8,6       28 3412348 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.fdx
java    20742 xxx  445r   REG                8,6       22 3412360 /home/xxx/Desktop/mp.home/dev/index/Artist/_fp.nrm
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application reaches the limit of maximum number of open files and then stops. &lt;/p&gt;

&lt;p&gt;Are we doing anything wrong here or does the bug still exist in version 3.0.3? &lt;br/&gt;
Any advice is welcome.&lt;br/&gt;
Thanks!&lt;/p&gt;</comment>
                    <comment id="13038629" author="mikemccand" created="Tue, 24 May 2011 16:31:14 +0100"  >&lt;p&gt;Hmmm... the fix here was backported to 3.0.x, so it should be fixed in 3.0.3.&lt;/p&gt;

&lt;p&gt;The code fragment looks correct, but your usage of decRef (not close) likely means you have other places that also incRef the reader?  Are you sure all incRefs are balanced by a decRef?&lt;/p&gt;

&lt;p&gt;Are you sure you really have leaking file handles and not just too many open files?  EG what mergeFactor are you using...?&lt;/p&gt;</comment>
                    <comment id="13038668" author="jhasenbe" created="Tue, 24 May 2011 18:10:43 +0100"  >&lt;p&gt;Thanks for the quick response.&lt;/p&gt;

&lt;p&gt;You are right, we just increase the reference for the current Searcher when it is obtained and used. Decreasing it again is part of a finally block. I have triple checked this code to make sure, we are not doing anything wrong and I am very sure, we correctly decrease the reference in any case.&lt;/p&gt;

&lt;p&gt;The output of the &apos;lsof&apos; command above shows handles to files already marked deleted. The number of files marked deleted increases over time until we get a Java &apos;IOException: Too many open files&apos;. &lt;br/&gt;
If we don&apos;t hold the reference to the reader contained in our searcher, who is?&lt;/p&gt;

&lt;p&gt;Regarding merge factor etc: we are using standard configurations, i.e. no tweaking (yet).&lt;br/&gt;
Besides, we do not call IndexWriter.optimize() in our code yet.&lt;/p&gt;</comment>
                    <comment id="13038847" author="mikemccand" created="Tue, 24 May 2011 23:03:07 +0100"  >&lt;p&gt;We have a test, TestNRTThreads, that stress-tests NRT to try to catch issues like this.&lt;/p&gt;

&lt;p&gt;I&apos;ve backported to 3.0.x, and was able to run it for 30 minutes with max 1024 file handles, successfully... so if there is a file handle leak, this test failed to uncover it.&lt;/p&gt;

&lt;p&gt;Not sure what&apos;s up... can you try to boil down your test case to a small test showing the problem?&lt;/p&gt;

&lt;p&gt;Note that when you incRef the searcher you have to do that sync&apos;d somehow with your reopen logic to prevent the final decRef from running at the same time.  (I don&apos;t think that&apos;s related to the file handle issue but it&apos;s important to get right else you have a thread hazard).&lt;/p&gt;</comment>
                    <comment id="13038998" author="jhasenbe" created="Wed, 25 May 2011 08:31:46 +0100"  >&lt;p&gt;Thanks for your response.&lt;br/&gt;
I&apos;ll try to extract a small test mimicking the behavior.&lt;/p&gt;

&lt;p&gt;And thanks for pointing out incRef / decRef and threading issue. I am aware of that and the relevant code is synchronized&lt;/p&gt;</comment>
                    <comment id="13039139" author="jhasenbe" created="Wed, 25 May 2011 15:12:43 +0100"  >&lt;p&gt;I have extracted the relevant code into a small Java application, but I am not able to reproduce the observed behavior with it. &lt;/p&gt;

&lt;p&gt;It might have to do with our integration and usage of Lucene in the Glassfish application server.&lt;br/&gt;
I&apos;ll go hunting there no.&lt;br/&gt;
Any advice with such integration?&lt;/p&gt;

&lt;p&gt;Thanks for your help anyway!&lt;/p&gt;</comment>
                    <comment id="13039174" author="mikemccand" created="Wed, 25 May 2011 16:57:03 +0100"  >&lt;p&gt;Hmm I don&apos;t know anything about Glassfish... but it&apos;s interesting your separate tool couldn&apos;t repro the problem.  Maybe re-scrutinize to verify your standalone tool truly matches how the app is using Lucene?&lt;/p&gt;</comment>
                    <comment id="13040789" author="shaie" created="Sun, 29 May 2011 12:44:24 +0100"  >&lt;p&gt;Could this be related to all the leaked handles we fixed at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3147&quot; title=&quot;MockDirectoryWrapper should track open file handles of IndexOutput too&quot;&gt;&lt;del&gt;LUCENE-3147&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                    <comment id="13040795" author="mikemccand" created="Sun, 29 May 2011 13:13:18 +0100"  >&lt;blockquote&gt;&lt;p&gt;Could this be related to all the leaked handles we fixed at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3147&quot; title=&quot;MockDirectoryWrapper should track open file handles of IndexOutput too&quot;&gt;&lt;del&gt;LUCENE-3147&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that&apos;s unlikely?  Ie, the leaks we are fixing in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3147&quot; title=&quot;MockDirectoryWrapper should track open file handles of IndexOutput too&quot;&gt;&lt;del&gt;LUCENE-3147&lt;/del&gt;&lt;/a&gt; are all cases where an exception was hit at some point?&lt;/p&gt;

&lt;p&gt;Unless: Josef, are you regularly hitting exceptions somewhere....?&lt;/p&gt;</comment>
                    <comment id="13041075" author="jhasenbe" created="Mon, 30 May 2011 11:25:33 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Unless: Josef, are you regularly hitting exceptions somewhere....? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, we don&apos;t get any exceptions. I&apos;ll do some testing with our Glassfish integration and also make sure, my test scenario matches the concrete application integration. Hope this will isolate our problem. I&apos;ll report back here.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12459624" name="LUCENE-2762.patch" size="38119" author="mikemccand" created="Mon, 15 Nov 2010 18:12:52 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 17 Nov 2010 18:32:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11089</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24930</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>