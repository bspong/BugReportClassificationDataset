<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:20:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-814/LUCENE-814.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-814] javacc on Win32 (cygwin) creates wrong line endings - fix them with &apos;ant replace&apos;</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-814</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;&quot;ant javacc&quot; in Windows/Cygwin generates files with wrong line endings (\r  or \r\n instead of *Nix&apos;s \n). &lt;br/&gt;
I managed to get rid of those using    perl -p -e &apos;s/(\r\n|\n|\r)/\n/g&apos;&lt;br/&gt;
Some useful info on line ending issues is in &lt;a href=&quot;http://en.wikipedia.org/wiki/Newline&quot; class=&quot;external-link&quot;&gt;http://en.wikipedia.org/wiki/Newline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After wasting some time to get rid of those, I modified javacc-QueryParser build.xml task to take care of that.&lt;br/&gt;
So now QueryParser files created with &quot;ant javacc&quot; are fixed (if required) to have \n as line ends.&lt;/p&gt;

&lt;p&gt;Should probably do that also for the other javacc targets: javacc-HTMLParser and javacc-StandardAnalyzer&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</description>
                <environment>&lt;p&gt;Windows, Cygwin&lt;/p&gt;</environment>
            <key id="12363556">LUCENE-814</key>
            <summary>javacc on Win32 (cygwin) creates wrong line endings - fix them with &apos;ant replace&apos;</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="doronc">Doron Cohen</assignee>
                                <reporter username="doronc">Doron Cohen</reporter>
                        <labels>
                    </labels>
                <created>Sat, 24 Feb 2007 05:32:13 +0000</created>
                <updated>Tue, 19 Jun 2007 09:14:54 +0100</updated>
                    <resolved>Tue, 13 Mar 2007 20:55:46 +0000</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>general/build</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12475600" author="hossman" created="Sat, 24 Feb 2007 05:56:52 +0000"  >&lt;p&gt;a few comments in no particular order...&lt;/p&gt;

&lt;p&gt;1) there is a core ant task called &amp;lt;fixCRLF&amp;gt; that should be able to do what your macro does&lt;/p&gt;

&lt;p&gt;2) this may be related to the fact that svn:eol-style for QueryParser.jj is set to native, yet cygwin likes files to be unix style &amp;#8211; this causes problems with bash scripts in cygwin, so depending on how hte javacc task works (since it requires you to specify a javacchome i&apos;m guessing it does a system exex) under cygwin it may be a similar issue (ie: fixable by changing the svn:eol-style to be explicit)&lt;/p&gt;</comment>
                    <comment id="12475758" author="michaelbusch" created="Sun, 25 Feb 2007 21:34:48 +0000"  >&lt;p&gt;Doron,&lt;/p&gt;

&lt;p&gt;I tried your patch and it works fine for me. The generated files don&apos;t have wrong line endings anymore. Haven&apos;t tried Hoss&apos; suggestions yet.&lt;/p&gt;</comment>
                    <comment id="12476030" author="doronc" created="Mon, 26 Feb 2007 22:58:27 +0000"  >&lt;p&gt;Hoss is right about both:&lt;/p&gt;

&lt;p&gt;1) &quot;ant fixcrlf&quot; is much simpler to use,and does the job. I wish I have discovered that task before fighting with the replace tasks. &lt;/p&gt;

&lt;p&gt;2) QueryParser.jj has svn:eol-style native and hence when extracted under DOS, has Windows eols. There, &quot;ant javacc&quot; which runs as a Win app, would create Windows eols, all dandy. But if Cygwin is used for checkout, jj has Unix eols, however here &quot;ant javacc&quot; still runs as Win app, and the result file is a mix of eol styles. &lt;/p&gt;

&lt;p&gt;I think there is no fixed (non native) setting for jj that would sattisfy all situations. Also, I think this is why Eclipse svn plugin (subclipse) sometimes shows a file as entirely modified (comparing to repository head) - may be related to checkout with cygwin while Eclipse runs as Win app.&lt;/p&gt;

&lt;p&gt;So I see three options:&lt;br/&gt;
1 - leave as is (do not fix)&lt;br/&gt;
2 - add target to build.xml to allow easily fixing eol (what one can do with sed)&lt;br/&gt;
3 - fix eol-style to be the same as that of the jj file (worth the effort?)&lt;/p&gt;

&lt;p&gt;Preferences?&lt;/p&gt;</comment>
                    <comment id="12476091" author="hossman" created="Tue, 27 Feb 2007 08:09:55 +0000"  >&lt;p&gt;i &lt;b&gt;think&lt;/b&gt; the right solution is to leave the .jj and .java files with svn:eol-style=native, then modify any target which regenerates a .java file from a.jj file to use &amp;lt;fixCRLF&amp;gt; without specifying either the &quot;eol&quot; or &quot;cr&quot; attributes ... the default of &amp;lt;fixCRLF&amp;gt; is to convert the file to the native format ... so it should synx up.&lt;/p&gt;

&lt;p&gt;...but i haven&apos;t tested this (no access to windows/cygwin) so i&apos;m not positive it works.&lt;/p&gt;

&lt;p&gt;if that doesn&apos;t work, the safest thing to do might be to set svn:eol-style=CRLF (or any other non variable value) for all of hte generated but commited .java files, and then modify the ant task that generates them to call &amp;lt;fixCRLF eol=&quot;CRLF&quot;&amp;gt; on those files.&lt;/p&gt;


&lt;p&gt;(incidently: are you sure that if you do &lt;b&gt;everything&lt;/b&gt; in cygwin &amp;#8211; both the checkout and running &quot;ant javacc&quot; &amp;#8211; you don&apos;t wind up with unix style line endings on all files?)&lt;/p&gt;</comment>
                    <comment id="12477135" author="steven_parkes" created="Thu, 1 Mar 2007 23:36:08 +0000"  >&lt;p&gt;Patch that uses fixcrlf and adds a couple of extra gen&apos;d files.&lt;/p&gt;</comment>
                    <comment id="12477136" author="steven_parkes" created="Thu, 1 Mar 2007 23:43:46 +0000"  >&lt;p&gt;I&apos;ve attached a patch that has the fixcrlf tasks (I wanted to check them under cygwin, to see if they work with mixed crlf/lf files, not just all crlf or all lf.)  This seems to give the correct results on both windows/cygwin and linux.&lt;/p&gt;

&lt;p&gt;To Chris&apos;s comment: even if you do everything in cygwin, you&apos;ll get mixed output files because cygwin doesn&apos;t have any impact on java. Cygwin doesn&apos;t include java in anyway: you use the normal windows binaries. cygwin bash can call java, javac, ant, etc., but the windows java binaries still don&apos;t know anything about cygwin&apos;s crlf/lf mapping stuff.&lt;/p&gt;

&lt;p&gt;And just to make things more confusing, it is possible to install cygwin in &quot;dos mode&apos; where it (supposedly) uses crlf rather lf. I have no experience with this. I did go so far as to try to install it this way to test but failed miserably: the two installations fought with each other, so I gave up. I  haven&apos;t heard of anyone running cygwin in crlf mode anyway.&lt;/p&gt;</comment>
                    <comment id="12477176" author="hossman" created="Fri, 2 Mar 2007 03:50:15 +0000"  >&lt;p&gt;&amp;gt; To Chris&apos;s comment: even if you do everything in cygwin, you&apos;ll get mixed output files&lt;br/&gt;
&amp;gt; because cygwin doesn&apos;t have any impact on java. Cygwin doesn&apos;t include java in anyway: &lt;/p&gt;

&lt;p&gt;...hmmm... that&apos;s unfortunate, I figured cygwin would influence line.separator.&lt;/p&gt;

&lt;p&gt;actually ... couldn&apos;t we set the line.separator sysproperty explicitly before executing the javacc tasks? ... but how would we know what to set it too? i guess we&apos;d have to inspect the source file to see what svn thinks the &quot;native&quot; eol is.  that&apos;s probably just as much work as fixcrlf.&lt;/p&gt;</comment>
                    <comment id="12477185" author="doronc" created="Fri, 2 Mar 2007 04:50:32 +0000"  >&lt;p&gt;Steven, thanks, this works for me too. &lt;/p&gt;

&lt;p&gt;I usually run ant from Emacs (Win) rather from cygwin, so after Chris&apos;s comment I thought that this was the cause. But I checked again - in this regard running from Emacs and from Cygwin shell behaves the same. &lt;/p&gt;

&lt;p&gt;So I think this is the right approach (as Chris suggested: not specifying crlf style, falling to native style).&lt;/p&gt;

&lt;p&gt;One thing with the Java files created by javaCC - QueryParserConstants.java can also be created by the JavaCC parser. Truth is I don&apos;t know enough about JavaCC to tell which other files it can generate. So I moved that logic to the macro in common-build, so that crlf are fixed for all the Java files that were modified  by (current run of) JavaCC.&lt;/p&gt;

&lt;p&gt;Attaching 814.javacc.fixcrlf.common-build.patch with this approach.  &lt;/p&gt;</comment>
                    <comment id="12477409" author="steven_parkes" created="Fri, 2 Mar 2007 19:08:12 +0000"  >&lt;p&gt;That&apos;s cool. Didn&apos;t know about the modified task.&lt;/p&gt;

&lt;p&gt;Using it does want to create a cache.properties file and it leaves it out there. This version uses other than the default name (in case that name is used anywhere else?) and also removes it when it&apos;s done. It also deletes it before it begins. Is that a good thing? Don&apos;t know what would happen if it had an old version ahead of time.&lt;/p&gt;</comment>
                    <comment id="12477555" author="doronc" created="Fri, 2 Mar 2007 23:47:19 +0000"  >&lt;p&gt;That&apos;s right about the properties file left there.&lt;/p&gt;

&lt;p&gt;I tried the patch and I think the selector is not working as documented - it seems that &quot;modified&quot; does not work correctly with specifying a cache file - it takes all the files. To see this run &quot;ant -debug javacc&quot; (or &quot;ant -debug javacc-QueryParser&quot;).&lt;/p&gt;

&lt;p&gt;I didn&apos;t find a bug on this in ant&apos;s bugzila, but I&apos;m sure I read something about that somewhere... upgrading ant from 1.6.5 to 1.7.0 did not fix this. &lt;/p&gt;

&lt;p&gt;So it may be safer to record the system time before calling javacc and then selecting files dated after that time? -  updating 814.javacc.fixcrlf.common-build.patch to do it this way.&lt;/p&gt;</comment>
                    <comment id="12477876" author="hossman" created="Sun, 4 Mar 2007 23:29:00 +0000"  >&lt;p&gt;Doron: if you are seeing problems with the modified selector, it may be because of the modification time granularity issue on windows (which is discussed in the &amp;lt;date&amp;gt; selector, but not the modified selector)&lt;/p&gt;

&lt;p&gt;personally, i don&apos;t think it&apos;s the end of the world to enumerate hte files we expect javacc to create in the build.xml, but if you want to be craftier then that, i would suggest using the &amp;lt;containsregexp&amp;gt; selector to look for &quot;Generated By:JavaCC&quot; instead of one based on the &amp;lt;date&amp;gt; .. that way people who have the misfortune of editing some file right as the task is running won&apos;t wonder why all of their line endings are different. &lt;/p&gt;</comment>
                    <comment id="12477919" author="doronc" created="Mon, 5 Mar 2007 06:22:39 +0000"  >&lt;p&gt;The modified selector worked ok with the default cache file, so I thught the problem was with using a different cache file.&lt;/p&gt;

&lt;p&gt;I also suspected the modification time granularity, but adding a sleep between the first and second date selector did not overcome that. Actually, I thought that this granularity issue would cause the oposite problem - changed files to appear as if they did not change, thus added the delay.&lt;/p&gt;

&lt;p&gt;I also considered the regexp &quot;Genereated By JavaCC&quot; selector, but then found out that there are more files (7) containing this string than files that are currently generated by JavaCC task (4) - removing all those files, running javacc-QueryParser did not recreate all of them.&lt;/p&gt;

&lt;p&gt;grep -ni &quot;generated by:.*javacc&quot; *.java&lt;br/&gt;
    CharStream.java:1:/* Generated By:JavaCC: Do not edit this line. CharStream.java Version 3.0 */&lt;br/&gt;
    ParseException.java:1:/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 3.0 */&lt;br/&gt;
    QueryParser.java:1:/* Generated By:JavaCC: Do not edit this line. QueryParser.java */ &lt;br/&gt;
    QueryParserConstants.java:1:/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */&lt;br/&gt;
    QueryParserTokenManager.java:1:/* Generated By:JavaCC: Do not edit this line. QueryParserTokenManager.java */&lt;br/&gt;
    Token.java:1:/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */&lt;br/&gt;
    TokenMgrError.java:1:/* Generated By:JavaCC: Do not edit this line. TokenMgrError.java Version 3.0 */&lt;/p&gt;

&lt;p&gt;So it seemed unreliable to rely on the presense of this string.&lt;/p&gt;</comment>
                    <comment id="12478161" author="hossman" created="Mon, 5 Mar 2007 21:18:17 +0000"  >&lt;p&gt;Hmmm... if there are files that say &quot;Generated By:JavaCC&quot; which JavaCC does &lt;b&gt;not&lt;/b&gt; generate, then perhaps we should remove that line from those files (making the regex a feasible solution)&lt;/p&gt;

&lt;p&gt;It leaves me wondering: why do those files say they were generated by JavaCC if they aren&apos;t? ... were they only generated with JavaCC 3.0? are they no longer needed using 3.2?  do we depend on them even though they are (evidently) falling out of sync as QueryParser.jj evolves and QueryParser.java changes?&lt;/p&gt;</comment>
                    <comment id="12478282" author="doronc" created="Tue, 6 Mar 2007 06:57:12 +0000"  >&lt;p&gt;I need to refine this claim - if I delete 4 of these 7 files - CharStream.java, ParseException.java, Token.java, TokenMgrError.java - and run &quot;ant javacc-QueryParser&quot; - those files are not created. But if I then modify QueryParser.jj or delete QueryParser.java, all missing files are created (though 3 of them remain unmodified if they exist). So when you run &quot;and javacc&quot;, the &quot;clean-javacc&quot; target guarantees that any missing/outdated file out of these 7 files is created/updated.&lt;/p&gt;

&lt;p&gt;By JavaCC&apos;s FAQ &quot;What files does JavaCC produce?&quot; &lt;a href=&quot;http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#tth_sEc2.1&quot; class=&quot;external-link&quot;&gt;http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#tth_sEc2.1&lt;/a&gt; - some of the files are generated only if they do not exist, allowing to edit these (&quot;boiler plate&quot;) files without losing the edits by mistake.&lt;/p&gt;

&lt;p&gt;So it  would be safest to require both - regexp and the modification time.&lt;br/&gt;
The updated patch do both.&lt;/p&gt;</comment>
                    <comment id="12478562" author="steven_parkes" created="Tue, 6 Mar 2007 20:28:51 +0000"  >&lt;p&gt;What&apos;s the reasoning behind the 100ms sleep? If it&apos;s to handle FAT file systems, I thought their resolution was 2s, so 100ms isn&apos;t guaranteed to be enough?&lt;/p&gt;

&lt;p&gt;I guess it depends on whether you know what javacc is doing. This article&lt;br/&gt;
&lt;a href=&quot;http://msdn2.microsoft.com/en-us/library/ms724290.aspx&quot; class=&quot;external-link&quot;&gt;http://msdn2.microsoft.com/en-us/library/ms724290.aspx&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://tinyurl.com/3xp6ou&quot; class=&quot;external-link&quot;&gt;http://tinyurl.com/3xp6ou&lt;/a&gt;&lt;br/&gt;
says create time is good to 10ms but that write time is only good to 2s. If javacc is rewriting, this might not work but if it always deletes and creates, it sounds like it would be. (I don&apos;t have a FAT system around to test this on).&lt;/p&gt;

&lt;p&gt;I&apos;m beginning to wonder if this isn&apos;t overkill. We already list a bunch of files (a list I&apos;m not longer sure is complete) for the clean-javacc task.&lt;/p&gt;</comment>
                    <comment id="12478606" author="doronc" created="Tue, 6 Mar 2007 22:21:46 +0000"  >&lt;p&gt;The sleep aims at systems with rough clock resolution (5ms). Sleep 5ms would probably suffice, but sleep 100ms seemed safer.&lt;/p&gt;

&lt;p&gt;Preferring cautious (don&apos;t fix where not desired/required) over completness (developers running this on Fat32 (if such exist)) seems ok to me.&lt;/p&gt;</comment>
                    <comment id="12478630" author="steven_parkes" created="Tue, 6 Mar 2007 23:29:21 +0000"  >&lt;p&gt;Seems like a reasonable trade off to me.&lt;/p&gt;</comment>
                    <comment id="12478829" author="hossman" created="Wed, 7 Mar 2007 18:02:31 +0000"  >&lt;p&gt;i&apos;m still not sure why modification time matters ... there&apos;s no risk in running &amp;lt;fixCRLF&amp;gt; on a file that&apos;s already &quot;ok&quot; right?&lt;/p&gt;

&lt;p&gt;on a related note: if javacc will recreate those files as needed, is there anyreason not to use the same regex matcher in the clear-javacc target?  (yes it would delete more files then it does currently, but those files will be created and then we don&apos;t have a magic list of files that might get out of date) &lt;/p&gt;</comment>
                    <comment id="12478923" author="doronc" created="Wed, 7 Mar 2007 22:07:34 +0000"  >&lt;p&gt;It was nice if javaCC had a &apos;native-eol&apos; option. It doesn&apos;t, and the modification time is used in attempt to imitate the availability of such an option.&lt;/p&gt;

&lt;p&gt;But I think you are right, there should be no harm in fixing crlf for all the files containing the &quot;generated&quot; string - I&apos;ll go and commit it without the date check. &lt;/p&gt;

&lt;p&gt;For the javacc-clean comment - having it deleting all the files containing this string will almost work - except for ParseException in standardTokenizer - where a modified version is maintained. So we could modify javacc-clean to delete all Java files containing that &quot;generated&quot; string, except for ParseException in standardTokenizer. But if we want to do this, it rather be in a separate issue. (Also, I noticed that contrib/surround has no javacc-clean, and contrib/misc/o.a.l/queryParser/precedence has no javacc target.)&lt;/p&gt;
</comment>
                    <comment id="12480544" author="doronc" created="Tue, 13 Mar 2007 20:55:46 +0000"  >&lt;p&gt;Committed.&lt;br/&gt;
Steven and Chris thanks for your help!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12352864" name="814.javacc.fixcrlf.common-build.patch" size="463" author="doronc" created="Wed, 7 Mar 2007 22:07:34 +0000" />
                    <attachment id="12352716" name="814.javacc.fixcrlf.common-build.patch" size="959" author="doronc" created="Tue, 6 Mar 2007 06:57:12 +0000" />
                    <attachment id="12352489" name="814.javacc.fixcrlf.common-build.patch" size="861" author="doronc" created="Fri, 2 Mar 2007 23:47:19 +0000" />
                    <attachment id="12352396" name="814.javacc.fixcrlf.common-build.patch" size="710" author="doronc" created="Fri, 2 Mar 2007 04:50:31 +0000" />
                    <attachment id="12351947" name="814.javacc.line.ends.patch" size="1482" author="doronc" created="Sat, 24 Feb 2007 05:36:33 +0000" />
                    <attachment id="12352474" name="LUCENE-814.txt" size="967" author="steven_parkes" created="Fri, 2 Mar 2007 19:08:12 +0000" />
                    <attachment id="12352374" name="LUCENE-814.txt" size="1624" author="steven_parkes" created="Thu, 1 Mar 2007 23:36:07 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 24 Feb 2007 05:56:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12926</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26916</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>