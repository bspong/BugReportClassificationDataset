<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-868/LUCENE-868.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-868] Making Term Vectors more accessible</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-868</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;One of the big issues with term vector usage is that the information is loaded into parallel arrays as it is loaded, which are then often times manipulated again to use in the application (for instance, they are sorted by frequency).&lt;/p&gt;

&lt;p&gt;Adding a callback mechanism that allows the vector loading to be handled by the application would make this a lot more efficient.&lt;/p&gt;

&lt;p&gt;I propose to add to IndexReader:&lt;br/&gt;
abstract public void getTermFreqVector(int docNumber, String field, TermVectorMapper mapper) throws IOException;&lt;br/&gt;
and a similar one for the all fields version&lt;/p&gt;

&lt;p&gt;Where TermVectorMapper is an interface with a single method:&lt;br/&gt;
void map(String term, int frequency, int offset, int position);&lt;/p&gt;

&lt;p&gt;The TermVectorReader will be modified to just call the TermVectorMapper.  The existing getTermFreqVectors will be reimplemented to use an implementation of TermVectorMapper that creates the parallel arrays.  Additionally, some simple implementations that automatically sort vectors will also be created.&lt;/p&gt;

&lt;p&gt;This is my first draft of this API and is subject to change.  I hope to have a patch soon.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-user/48003?search_string=get%20the%20total%20term%20frequency;#48003&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-user/48003?search_string=get%20the%20total%20term%20frequency;#48003&lt;/a&gt; for related information.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12367776">LUCENE-868</key>
            <summary>Making Term Vectors more accessible</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="gsingers">Grant Ingersoll</assignee>
                                <reporter username="gsingers">Grant Ingersoll</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Apr 2007 00:21:01 +0100</created>
                <updated>Tue, 24 Jul 2007 17:45:32 +0100</updated>
                    <resolved>Mon, 23 Jul 2007 13:30:03 +0100</resolved>
                                                            <component>core/store</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12490763" author="gsingers" created="Mon, 23 Apr 2007 02:12:18 +0100"  >&lt;p&gt;TermVectorMapper should have been:&lt;br/&gt;
void map(String field, String term, int frequency, TermVectorOffsetInfo [] offsets, int [] positions);&lt;/p&gt;</comment>
                    <comment id="12509348" author="gsingers" created="Sun, 1 Jul 2007 03:04:49 +0100"  >&lt;p&gt;First pass at a patch on providing a callback mechanism for term vectors.  The big benefit to this is the ability to control how to store the TV info, instead of being stuck with parallel arrays.  Two sample implementations are provided, as FieldSortedTermVectorMapper and SortedTermVectorMapper.&lt;/p&gt;

&lt;p&gt;One thing I am not completely sure on and would appreciate a review of, is the interface definition of TermVectorMapper, in particular the interplay of the setExpectations method with the actual map method (see the TermVectorsReader).  It is not thread-safe (although I am not so sure the current way is either)&lt;/p&gt;

&lt;p&gt;The existing access methods for TVs still works just the same, even though the underlying implementation is different.  &lt;/p&gt;

&lt;p&gt;I don&apos;t know if this is any faster in the Lucene core, but it should speed up those applications that have to reformat the TV info for their needs.&lt;/p&gt;
</comment>
                    <comment id="12511256" author="gsingers" created="Mon, 9 Jul 2007 22:05:59 +0100"  >&lt;p&gt;Anyone have any comments on this approach for Term Vectors?&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if the patch still applies to trunk, but I will update it and commit on Wednesday or Thursday unless I hear other comments.&lt;/p&gt;</comment>
                    <comment id="12511267" author="yseeley@gmail.com" created="Mon, 9 Jul 2007 22:50:29 +0100"  >&lt;p&gt;I haven&apos;t really used the term vector APIs, but I like the goal of allowing the app to handle things.&lt;br/&gt;
What about dropping down a level lower, and not constructing the arrays or TermVectorOffsetInfo either?&lt;br/&gt;
Perhaps something like:&lt;/p&gt;

&lt;p&gt;public interface TermVectorMapper {&lt;br/&gt;
  void setExpectations(String field, int numTerms, boolean hasOffsets, boolean hasPositions);&lt;br/&gt;
  void mapTerm(String term, int frequency)&lt;br/&gt;
  void mapTermPos(int startOffset, int endOffset, int position)&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;One could have an implementation of TermVectorMapper that collected the offsets and positions into an array as your patch does now.  I&apos;m not sure if there would be a noticable performance impact to a method call per term instance or not.&lt;/p&gt;

&lt;p&gt;Oh, wait...  I just went and looked at the readTermVector() code, and positions and offsets aren&apos;t stored interleaved, so one would have to do a sequence of mapTermPos() followed by a sequence of mapTerm Offset(), which makes less sense than what you have now.&lt;/p&gt;

&lt;p&gt;Might also consider using an abstract class instead of an interface in case you want to make backward-compatible tweaks later.&lt;/p&gt;</comment>
                    <comment id="12511442" author="karl.wettin" created="Tue, 10 Jul 2007 14:43:28 +0100"  >&lt;p&gt;Grant Ingersoll - &lt;span class=&quot;error&quot;&gt;&amp;#91;09/Jul/07 02:05 PM &amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; Anyone have any comments on this approach for Term Vectors?&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I&apos;m not sure if the patch still applies to trunk, but I will update it &lt;br/&gt;
&amp;gt; and commit on Wednesday or Thursday unless I hear other comments.&lt;/p&gt;

&lt;p&gt;I can give the code an overview in the weekend if you want. I&apos;ll defintely be using this stuff when I get back from vacation.&lt;/p&gt;</comment>
                    <comment id="12511924" author="gsingers" created="Thu, 12 Jul 2007 02:43:35 +0100"  >&lt;p&gt;I will have to add a new patch, it MemoryIndexReader does not implement the new methods&lt;/p&gt;</comment>
                    <comment id="12512841" author="gsingers" created="Mon, 16 Jul 2007 02:22:21 +0100"  >&lt;p&gt;New patch that passes all tests (and compiles against the memory contrib)&lt;/p&gt;</comment>
                    <comment id="12512842" author="gsingers" created="Mon, 16 Jul 2007 02:30:15 +0100"  >&lt;p&gt;I also switched TermVectorMapper to be an abstract class per Yonik&apos;s suggestion.&lt;/p&gt;</comment>
                    <comment id="12513784" author="gsingers" created="Thu, 19 Jul 2007 02:24:36 +0100"  >&lt;p&gt;Added the start of a Position based Mapper.  This would allow indexing directly (almost) into the vector by position.  Still needs a little more testing, but wanted to put it out there for others to see.&lt;/p&gt;</comment>
                    <comment id="12513983" author="karl.wettin" created="Thu, 19 Jul 2007 20:43:15 +0100"  >&lt;p&gt;Sorry for the delay, vacation time.&lt;/p&gt;

&lt;p&gt;In short I think this is a really nice improvment to the API. I also agree with Yonik about the array[]s constructed and passed down to the mapper. Perhaps your current implementation could be moved one layer further up? Another thought is to reuse array(s) and pass on the data length, but that might just complicate things.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to introduce these things next week and see how well it works. &lt;/p&gt;

&lt;p&gt;I use the term vectors for text classification. For each new classifier introduced (occurs quite a lot) I iterate the corpus and classify the documents. Potentially it could save me quite a bit of ticks and bits to not create all them array[]s, however my gut tells me there might be some JVM settings that does the same trick. I&apos;ll have to look in to that.&lt;/p&gt;
</comment>
                    <comment id="12513991" author="gsingers" created="Thu, 19 Jul 2007 21:39:29 +0100"  >&lt;p&gt;The TermVectorOffsetInfo and Position arrays are only created if storeOffsets and storePositions are turned on.  But, we could also add mapperMethods like:&lt;br/&gt;
boolean isIgnoringOffsets()&lt;br/&gt;
and&lt;br/&gt;
boolean isIgnoringPositions()&lt;/p&gt;

&lt;p&gt;Then, in TermVectorsReader, it could become:&lt;/p&gt;

&lt;p&gt;if (storePositions &amp;amp;&amp;amp; mapper.isIgnoringPositions() == false)&lt;/p&gt;

&lt;p&gt;and likewise for isIgnoringOffsets.  This way a mapper could express whether it wants these arrays to be constructed even if they are turned on.  Then we just need to skip ahead by the appropriate amount.&lt;/p&gt;</comment>
                    <comment id="12514066" author="gsingers" created="Fri, 20 Jul 2007 01:57:29 +0100"  >&lt;p&gt;Based on Yonik&apos;s and Karl&apos;s comments on avoiding loading the offset and position arrays, this patch has two new methods on the TermVectorMapper which tell the TermVectorsReader whether the Mapper is interested in positions or not, regardless of whether they are stored or not.&lt;/p&gt;</comment>
                    <comment id="12514612" author="gsingers" created="Mon, 23 Jul 2007 13:30:03 +0100"  >&lt;p&gt;Committed.  Did not include the PositionBasedTermVectorMapper stuff as it was not ready to go.&lt;/p&gt;</comment>
                    <comment id="12514963" author="paul.elschot@xs4all.nl" created="Tue, 24 Jul 2007 14:20:51 +0100"  >&lt;p&gt;I just got this warning from ant javadocs-internal:&lt;br/&gt;
src/java/org/apache/lucene/index/TermVectorsReader.java:448: @return tag has no arguments.&lt;br/&gt;
This could well be from the materializeVector method of the v4 patch.&lt;/p&gt;
</comment>
                    <comment id="12515004" author="gsingers" created="Tue, 24 Jul 2007 16:31:23 +0100"  >&lt;p&gt;Thanks, Paul, I have added a comment.&lt;/p&gt;</comment>
                    <comment id="12515024" author="paul.elschot@xs4all.nl" created="Tue, 24 Jul 2007 17:45:32 +0100"  >&lt;p&gt;[ &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-868?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12515004&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-868?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12515004&lt;/a&gt; ] &lt;/p&gt;

&lt;p&gt;My pleasure,&lt;/p&gt;

&lt;p&gt;Paul Elschot&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-868&quot; title=&quot;Making Term Vectors more accessible&quot;&gt;&lt;del&gt;LUCENE-868&lt;/del&gt;&lt;/a&gt;-v4.patch&lt;br/&gt;
loaded into parallel arrays as it is loaded, which are then often times &lt;br/&gt;
manipulated again to use in the application (for instance, they are sorted by &lt;br/&gt;
frequency).&lt;br/&gt;
by the application would make this a lot more efficient.&lt;br/&gt;
TermVectorMapper mapper) throws IOException;&lt;br/&gt;
The existing getTermFreqVectors will be reimplemented to use an &lt;br/&gt;
implementation of TermVectorMapper that creates the parallel arrays.  &lt;br/&gt;
Additionally, some simple implementations that automatically sort vectors &lt;br/&gt;
will also be created.&lt;br/&gt;
have a patch soon.&lt;br/&gt;
&lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-user/48003?search_string=get%20the%20total%20term%20frequency;#48003&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-user/48003?search_string=get%20the%20total%20term%20frequency;#48003&lt;/a&gt; &lt;br/&gt;
for related information.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12361864" name="LUCENE-868-v2.patch" size="57182" author="gsingers" created="Mon, 16 Jul 2007 02:22:21 +0100" />
                    <attachment id="12362101" name="LUCENE-868-v3.patch" size="64361" author="gsingers" created="Thu, 19 Jul 2007 02:24:36 +0100" />
                    <attachment id="12362185" name="LUCENE-868-v4.patch" size="68658" author="gsingers" created="Fri, 20 Jul 2007 01:57:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 9 Jul 2007 21:50:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12874</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26861</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>