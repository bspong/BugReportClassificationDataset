<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:11:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2662/LUCENE-2662.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2662] BytesHash</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2662</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This issue will have the BytesHash separated out from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12474788">LUCENE-2662</key>
            <summary>BytesHash</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="jasonrutherglen">Jason Rutherglen</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Sep 2010 06:25:47 +0100</created>
                <updated>Fri, 10 May 2013 11:43:51 +0100</updated>
                    <resolved>Thu, 25 Nov 2010 10:42:47 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12913415" author="jasonrutherglen" created="Wed, 22 Sep 2010 07:24:32 +0100"  >&lt;p&gt;We need unit tests and a base implementation as BytesHash is abstract...&lt;/p&gt;</comment>
                    <comment id="12913589" author="jasonrutherglen" created="Wed, 22 Sep 2010 15:54:03 +0100"  >&lt;p&gt;The current hash implementation needs to be separated out of TermsHashPerField.  &lt;/p&gt;</comment>
                    <comment id="12913599" author="rcmuir" created="Wed, 22 Sep 2010 16:05:30 +0100"  >&lt;p&gt;Jason: I am confused... there is no hash impl in TermsHashPerField.&lt;/p&gt;

&lt;p&gt;the hashing, and term encoding and other things, is the responsibility of the analysis chain (TermToBytesRefAttribute):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-comment&quot;&gt;// Get the text &amp;amp; hash of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; term.
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; code = termAtt.toBytesRef(utf8);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this way, implementations can &apos;hash-as-they-go&apos; like we do when encoding unicode char[] -&amp;gt; byte[],&lt;br/&gt;
or they can simply return BytesRef.hashCode() if they don&apos;t have an optimized implementation.&lt;/p&gt;</comment>
                    <comment id="12913622" author="jasonrutherglen" created="Wed, 22 Sep 2010 16:33:07 +0100"  >&lt;p&gt;The THPF is hashing tokens for use in the indexing RAM buffer and the creation of postings, ie, the lookup of term byte[]s to term ids.  The hash component is currently interwoven into THPF.  &lt;/p&gt;

&lt;p&gt;Here&apos;s some of the variables being used in THPF.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; postingsHashSize = 4;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; postingsHashHalfSize = postingsHashSize/2;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; postingsHashMask = postingsHashSize-1;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] postingsHash;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also there&apos;s the methods rehashPostings, shrinkHash, postingEquals, and add(int textStart) has the lookup.  &lt;/p&gt;

&lt;p&gt;We&apos;ll probably also need to separate out the quick sort implementation in THPF, I&apos;ll add that to this issue.&lt;/p&gt;</comment>
                    <comment id="12913628" author="rcmuir" created="Wed, 22 Sep 2010 16:52:15 +0100"  >&lt;p&gt;Jason: what I am saying is if i look at the method in your patch:&lt;/p&gt;

&lt;p&gt;public T add(BytesRef bytes)&lt;/p&gt;

&lt;p&gt;the first thing it does is compute the hash, but this is already computed in the analysis chain.&lt;/p&gt;

&lt;p&gt;why not have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; T add(BytesRef bytes, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hashCode)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and also:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; T add(BytesRef bytes) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; add(bytes, bytes.hashCode());
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then we can avoid computing this twice, and keep the optimization in UnicodeUtil&lt;/p&gt;</comment>
                    <comment id="12913632" author="jasonrutherglen" created="Wed, 22 Sep 2010 17:00:24 +0100"  >&lt;p&gt;Ah, ok, I didn&apos;t write this code, I extracted it from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt;, and nice, you reviewed it can be improved.  I&apos;ll make changes to it shortly, hopefully.&lt;/p&gt;</comment>
                    <comment id="12913636" author="simonw" created="Wed, 22 Sep 2010 17:05:45 +0100"  >&lt;p&gt;jason, can you please hold off with this since I have newer / different versions of this class already with tests etc. I understand that you need that class but creating all these issues and rushing ahead is rather counter productive.&lt;/p&gt;

&lt;p&gt;@Robert: this class is standalone in this patch and doesn&apos;t know about the analysis chain. But thanks for the comments I will incorporate them.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12913638" author="jasonrutherglen" created="Wed, 22 Sep 2010 17:10:43 +0100"  >&lt;p&gt;Simon, when do you think you&apos;ll be posting?&lt;/p&gt;</comment>
                    <comment id="12913642" author="simonw" created="Wed, 22 Sep 2010 17:18:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Simon, when do you think you&apos;ll be posting?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;maybe within the next week I have a busy schedule but does this patch keep you from doing any work? You shouldn&apos;t just pull out stuff from 1 month old patches especially as you don&apos;t even give me time to reply on the orig. discussion. &lt;/p&gt;

&lt;p&gt;Any rush on this?&lt;/p&gt;</comment>
                    <comment id="12913651" author="jasonrutherglen" created="Wed, 22 Sep 2010 17:29:26 +0100"  >&lt;p&gt;It&apos;d be nice to get deletes working, ie, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2655&quot; title=&quot;Get deletes working in the realtime branch&quot;&gt;&lt;del&gt;LUCENE-2655&lt;/del&gt;&lt;/a&gt; and move forward in a way that&apos;s useful long term.  What changes have you made?&lt;/p&gt;</comment>
                    <comment id="12914443" author="simonw" created="Fri, 24 Sep 2010 13:42:04 +0100"  >&lt;p&gt;This patch contains a slightly different version of BytesHash (renamed it to BytesRefHash but that is to be discussed - while writing this I actually think BytesHash is the better name).  BytesRefHash is now final and does not create Entry objects anymore. Internally it maintains two integer arrays one acting as the hash buckets and the other one contain the bytes-start offset in the ByteBlockPool. Each added entry is assigned to an increasing ordinal since this is what Entry is used in almost all use-cases (in CSF though). For TermsHashPerField this is also &quot;native&quot; since is uses the same kind of referencing system.&lt;/p&gt;

&lt;p&gt;These changes keep this class as efficient as possible, keeping GC costs low and allows JIT to do better optimizations. IMO this class is super performance critical and since we recently refactored indexing towards parallel arrays adding another &quot;object&quot; array might not be the way to go anyway.&lt;/p&gt;

&lt;p&gt;I also incorporated robers comments - thanks for the review anyway. I guess that is the first step towards factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?&lt;/p&gt;

&lt;p&gt;comments / review welcome!!&lt;/p&gt;

&lt;p&gt;One more thing, I did not move ByteBlockPool to o.a.l.utils but I thing it belongs there, thoughts?&lt;/p&gt;</comment>
                    <comment id="12914452" author="rcmuir" created="Fri, 24 Sep 2010 13:48:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;I guess that is the first step towards factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it would be better if this class were used in the patch... i wouldn&apos;t commit it by itself unused. Its difficult for people to review its behavior, since its just a standalone unused thing (for instance, the hashCode thing i brought up)&lt;/p&gt;</comment>
                    <comment id="12914478" author="jasonrutherglen" created="Fri, 24 Sep 2010 15:25:16 +0100"  >&lt;p&gt;&amp;gt; BytesRefHash is now final and does not create Entry objects anymore&lt;/p&gt;

&lt;p&gt;That&apos;s good.&lt;/p&gt;

&lt;p&gt;&amp;gt; move ByteBlockPool to o.a.l.utils&lt;/p&gt;

&lt;p&gt;Sure why not.&lt;/p&gt;

&lt;p&gt;&amp;gt; factoring it out of TermsHashPerField, the next question is are we gonna do that in a different issue and get this committed first?&lt;/p&gt;

&lt;p&gt;We need to factor it out of THPF otherwise this patch isn&apos;t really useful for committing.  Also, it&apos;ll get tested through the entirety of the unit tests, ie, it&apos;ll get put through the laundry.  &lt;/p&gt;</comment>
                    <comment id="12914486" author="simonw" created="Fri, 24 Sep 2010 15:40:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;We need to factor it out of THPF otherwise this patch isn&apos;t really useful for committing. Also, it&apos;ll get tested through the entirety of the unit tests, ie, it&apos;ll get put through the laundry.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, lets see this as the first baby step towards it. I will move ByteBockPool to o.a.l.utils and start cutting THPF over to it. We need to do benchmarking in any case just to make sure JIT doesn&apos;t play nasty tricks with us again.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12914521" author="jasonrutherglen" created="Fri, 24 Sep 2010 17:28:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;make sure JIT doesn&apos;t play nasty tricks with us again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What would we do if this happens?&lt;/p&gt;</comment>
                    <comment id="12914621" author="mikemccand" created="Fri, 24 Sep 2010 20:52:40 +0100"  >&lt;p&gt;Patch looks good Simon &amp;#8211; some ideas:&lt;/p&gt;



&lt;ul&gt;
	&lt;li&gt;In the class jdocs, I think state that this is basically a&lt;br/&gt;
    Map&amp;lt;BytesRef,int&amp;gt;?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe we also move ByteBlockPool --&amp;gt; oal.util?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe move out the ByteBlockAllocator to its own class (in util)?&lt;br/&gt;
    RecyclingByteBlockAllocator?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can we have DocumentsWriter share the ByteBlockAllocator?  (Right&lt;br/&gt;
    now it&apos;s dup&apos;d code since DW also implements this).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe rename ords -&amp;gt; keys?  And hash -&amp;gt; values?  (The key isn&apos;t&lt;br/&gt;
    really an &quot;ord&quot; (I think?) because it increases by more than 1&lt;br/&gt;
    each time... it&apos;s more like an address since it references an&lt;br/&gt;
    address in the byte-pool space).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;We should advertise the limits in the jdocs &amp;#8211; limited to &amp;lt;= 2GB&lt;br/&gt;
    total byte storage, each key must be &amp;lt;= BLOCK SIZE-2 in length.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can we have sortedEntries() not allocate a new iterator object?&lt;br/&gt;
    Ie, just return the sorted bytesStart int[]?  (This is what&apos;s done&lt;br/&gt;
    today, and, for term vectors on small docs, this method is pretty&lt;br/&gt;
    hot).  And the javadocs for this should be stronger &amp;#8211; it&apos;s not&lt;br/&gt;
    that the behaviour is undefined after, it&apos;s that you must .clear()&lt;br/&gt;
    after you&apos;re done consume the sorted entries.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12914623" author="mikemccand" created="Fri, 24 Sep 2010 20:54:13 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;make sure JIT doesn&apos;t play nasty tricks with us again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What would we do if this happens?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cry?&lt;/p&gt;

&lt;p&gt;Or... install Harmony and see if it has the same problem and if so submit a patch to them to fix it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12914627" author="simonw" created="Fri, 24 Sep 2010 21:07:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;In the class jdocs, I think state that this is basically a Map&amp;lt;BytesRef,int&amp;gt;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah that simplifies it - will do.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we also move ByteBlockPool --&amp;gt; oal.util?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah I did that already - that makes totally sense&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe move out the ByteBlockAllocator to its own class (in util)? RecyclingByteBlockAllocator?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 yeah I like that - I also think we should allow to pass the blockpool to the byteshash instead of the allocator. From what I can tell now I think this is necessary for the refactoring anyway since we share pools with secondary TermsHash instances in the termvector case.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe rename ords -&amp;gt; keys? And hash -&amp;gt; values? (The key isn&apos;t&lt;br/&gt;
really an &quot;ord&quot; (I think?) because it increases by more than 1&lt;br/&gt;
each time... it&apos;s more like an address since it references an&lt;br/&gt;
address in the byte-pool space).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah that depends how you see it - the array index really is the ord though. but I like those names. I will change.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should advertise the limits in the jdocs - limited to &amp;lt;= 2GB&lt;br/&gt;
total byte storage, each key must be &amp;lt;= BLOCK SIZE-2 in length.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think I have done the latter already but I will add the other too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can we have sortedEntries() not allocate a new iterator object?&lt;br/&gt;
Ie, just return the sorted bytesStart int[]? (This is what&apos;s done&lt;br/&gt;
today, and, for term vectors on small docs, this method is pretty&lt;br/&gt;
hot). And the javadocs for this should be stronger - it&apos;s not&lt;br/&gt;
that the behaviour is undefined after, it&apos;s that you must .clear()&lt;br/&gt;
after you&apos;re done consume the sorted entries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ah I see - good point. I think what you refer to is   public int[] sort(Comparator&amp;lt;BytesRef&amp;gt; comp) - the iterator one is just more convenient one. I will change though.&lt;/p&gt;

&lt;p&gt;thanks mike!&lt;/p&gt;</comment>
                    <comment id="12914859" author="simonw" created="Sat, 25 Sep 2010 19:48:35 +0100"  >&lt;p&gt;Attaching my current state for feedback and iteration.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;factored out ByteBlockAllocator from DocumentsWriter&lt;/li&gt;
	&lt;li&gt;moved ByteBlockPool to o.a.l.util&lt;/li&gt;
	&lt;li&gt;added RecyclingByteBlockAllocator which can be used with or without synchronization. IMO the DummyConcurrentLock will be optimized away so that his might be super low cost. - feedback for that would more than welcome.&lt;/li&gt;
	&lt;li&gt;addressed all the comments from mike - thanks again&lt;/li&gt;
	&lt;li&gt;added more tests&lt;/li&gt;
	&lt;li&gt;cut over constants from DocumentsWriter to ByteBlockPool&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TermsHashPerField is next.... feedback welcome.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12914888" author="jasonrutherglen" created="Sat, 25 Sep 2010 23:43:23 +0100"  >&lt;p&gt;An API change to BBP that would be useful is instead of passing in the &quot;size in bytes&quot; to newSlice, it&apos;d be more useful if the level and/or the size were passed in.  In fact, throughout the codebase, a level, specifically the first, is all that is passed into the newSlice method.  The utility of this change is, I&apos;m recording the level of the last slice for the skip list in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2312&quot; title=&quot;Search on IndexWriter&amp;#39;s RAM Buffer&quot;&gt;LUCENE-2312&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12915079" author="jasonrutherglen" created="Mon, 27 Sep 2010 00:50:46 +0100"  >&lt;p&gt;Simon, the patch looks like it&apos;s ready for the next stage, ie, TermsHashPerField deparchment.  &lt;/p&gt;</comment>
                    <comment id="12915135" author="simonw" created="Mon, 27 Sep 2010 07:03:57 +0100"  >&lt;p&gt;We are almost there. I factored out ByteRefHash out of TermsHashPerField just having two &quot;nocommit&quot; parts left in the code I need to find a solution for. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;there needs to be a way to communicate the byte usage up to DocumentsWriter which I haven&apos;t explored yet&lt;/li&gt;
	&lt;li&gt;textStarts in ParallelPostingsArray needs to be replaced since it is already maintained in ByteRefHash. I will need to look closer into that but suggestions are welcome. One way to do it would be to attach a reference to BRH instead of the textStart - but that is a naive suggestion since I haven&apos;t looked into that in more detail.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests are passing so far and TermsHashPerField looks somewhat cleaner. I will work on fixing those nocommits and run some indexing perf test against the patch. &lt;/p&gt;
</comment>
                    <comment id="12915700" author="mikemccand" created="Tue, 28 Sep 2010 11:31:11 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Maybe rename ords -&amp;gt; keys? And hash -&amp;gt; values? (The key isn&apos;t really an &quot;ord&quot; (I think?) because it increases by more than 1 each time... it&apos;s more like an address since it references an address in the byte-pool space).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah that depends how you see it - the array index really is the ord though. but I like those names. I will change.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Duh, I agree &amp;#8211; the new names are confusing!!  Sorry.  I was&lt;br/&gt;
confused... you are right that what&apos;s now called &quot;keys&quot; are in fact&lt;br/&gt;
really ords!  They are always incr&apos;d by one, on adding a new one.&lt;/p&gt;

&lt;p&gt;How about renaming key back to ord?  And then maybe rename values to&lt;br/&gt;
bytesStart?  And in their decls add comments saying they are indexed&lt;br/&gt;
by hash code?  And maybe rename addByOffset -&amp;gt; addByBytesStart?&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;On the nocommit in ByteBlockPool &amp;#8211; I think that&apos;s fine?  It&apos;s an&lt;br/&gt;
    internal class....&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The nocommit in BytesRefHash seems wrong?  (Ie, compact is used&lt;br/&gt;
    internally)... though maybe we make it private if it&apos;s not used&lt;br/&gt;
    externally?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;On the &quot;nocommit factor this out!&quot; in THPF.java... I agree, the&lt;br/&gt;
    postingsArray.textStarts should go away right?  Ie, it&apos;s a&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;wasteful&amp;#93;&lt;/span&gt; copy of what the BytesRefHash is already storing?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can we impl BytesRefHash.bytesUsed as an AtomicLong (hmm maybe&lt;br/&gt;
    AtomicInt &amp;#8211; none of these classes can address &amp;gt; 2GB)?  Then the&lt;br/&gt;
    pool would add in blockSize every time it binds a new block.  That&lt;br/&gt;
    method (DW.bytesUsed) is called &lt;b&gt;alot&lt;/b&gt; &amp;#8211; at least once on every&lt;br/&gt;
    addDoc.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I&apos;m confused again &amp;#8211; when do we use RecyclingByteBlockAllocator&lt;br/&gt;
    from a single thread...?  Ie, why did the sync need to be&lt;br/&gt;
    conditional for this class, again....?  It seems like we always&lt;br/&gt;
    need it sync&apos;d (both the main pool &amp;amp; per-doc pool need this)?  If&lt;br/&gt;
    so we can simplify and make these methods sync&apos;d?&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12915713" author="simonw" created="Tue, 28 Sep 2010 12:52:03 +0100"  >&lt;blockquote&gt;
&lt;p&gt;How about renaming key back to ord? And then maybe rename values to&lt;br/&gt;
bytesStart? And in their decls add comments saying they are indexed&lt;br/&gt;
by hash code? And maybe rename addByOffset -&amp;gt; addByBytesStart?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t like addByBytesStart I would like to keep offset since it really is an offset into the pool. addByPoolOffset?&lt;br/&gt;
The names ord and bytesStart are a good compromise &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; lets shoot for that.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;On the nocommit in ByteBlockPool - I think that&apos;s fine? It&apos;s an&lt;br/&gt;
internal class....&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;you refer to this: // nocommit - public arrays are not nice! ?&lt;br/&gt;
yeah that more of an style thing but if somebody changes them its their fault for being stupid I guess.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The nocommit in BytesRefHash seems wrong? (Ie, compact is used&lt;br/&gt;
internally)... though maybe we make it private if it&apos;s not used&lt;br/&gt;
externally?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah yeah thats bogus - its from a previous iteration which was wrong as well, I will remove.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On the &quot;nocommit factor this out!&quot; in THPF.java... I agree, the&lt;br/&gt;
postingsArray.textStarts should go away right? Ie, it&apos;s a&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;wasteful&amp;#93;&lt;/span&gt; copy of what the BytesRefHash is already storing?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah that is the reason for that nocommit. Yet, I though about this a little and I have two options for this.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it.&lt;br/&gt;
BytesRefHash would accept this class, don&apos;t have a good name for it but lets call it TextStartArray for now, and use it internally. It would call grow() once needed inside BytesRefHash and all the other code would be unchanged since PPA is a subclass. &lt;/li&gt;
	&lt;li&gt;the other way would be to bind the ByteRefHash to the postings array which seems odd to me though.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;More ideas?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Can we impl BytesRefHash.bytesUsed as an AtomicLong (hmm maybe&lt;br/&gt;
AtomicInt - none of these classes can address &amp;gt; 2GB)? Then the&lt;br/&gt;
pool would add in blockSize every time it binds a new block. That&lt;br/&gt;
method (DW.bytesUsed) is called alot - at least once on every&lt;br/&gt;
addDoc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did exactly that in the not yet uploaded patch. But I figured that it would maybe make more sense to use that AtomicInt in the allocator as well as in THPF or is that what you mean?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;m confused again - when do we use RecyclingByteBlockAllocator&lt;br/&gt;
from a single thread...? Ie, why did the sync need to be&lt;br/&gt;
conditional for this class, again....? It seems like we always&lt;br/&gt;
need it sync&apos;d (both the main pool &amp;amp; per-doc pool need this)? If&lt;br/&gt;
so we can simplify and make these methods sync&apos;d?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;man, I am sorry - I  thought I will use this in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt; in a single threaded env but if so I should change it there if needed. I was one step ahead though.&lt;br/&gt;
I will change and maybe have a second one if needed. Agree?&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;





</comment>
                    <comment id="12915723" author="mikemccand" created="Tue, 28 Sep 2010 13:33:36 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t like addByBytesStart I would like to keep offset since it really is an offset into the pool. addByPoolOffset?&lt;br/&gt;
The names ord and bytesStart are a good compromise  lets shoot for that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems good?  So, this would be the &quot;store&quot; that BRH manages... and by subclassing it you can have other parallel arrays storing anything, indexed by ord.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I did exactly that in the not yet uploaded patch. But I figured that it would maybe make more sense to use that AtomicInt in the allocator as well as in THPF or is that what you mean?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should use it everywhere to track bytes used &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;man, I am sorry - I thought I will use this in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt; in a single threaded env but if so I should change it there if needed. I was one step ahead though.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will change and maybe have a second one if needed. Agree?&lt;/p&gt;

&lt;p&gt;Ahh that&apos;s right I forgot the whole driver for this refactoring heh &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Yeah I think leave it sync&apos;d for now and we can test if this hurts perf in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt;?  &quot;Supposedly&quot; uncontended locks are low-cost (but I&apos;m not sure...).&lt;/p&gt;</comment>
                    <comment id="12916355" author="jasonrutherglen" created="Thu, 30 Sep 2010 04:05:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;we could factor out a super class from ParallelPostingArray which only has the textStart int array, the grow and copy method and let ParallelPostingArray subclass it. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This option, makes the most sense.  ParallelByteStartsArray?&lt;/p&gt;


</comment>
                    <comment id="12916542" author="simonw" created="Thu, 30 Sep 2010 17:28:44 +0100"  >&lt;p&gt;Next iteration - seems to be very close!&lt;/p&gt;

&lt;p&gt;I have applied the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;introduces a AtomicLong to track bytesUsed in DocumetnsWriter, TermsHashPerField, ByteRefHash and RecyclingByteBlockAllocator&lt;/li&gt;
	&lt;li&gt;Factored out  a BytesStartArray class from BytesRefHash that manages the int[] holding the bytesStart offsets. TermsHashPerField subclasses and manages the ParallelPostingsArray through it.&lt;/li&gt;
	&lt;li&gt;remove remaining no-commits&lt;/li&gt;
	&lt;li&gt;made RecyclingbyteBlockAllocator synced by default (we use synchronized methods for it now)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I run a quick Wikipedia 100k docs benchmark against trunk vs. &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2662&quot; title=&quot;BytesHash&quot;&gt;&lt;del&gt;LUCENE-2662&lt;/del&gt;&lt;/a&gt; and the results are promising.&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;version&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;rec/sec&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;elapsed sec&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;avgUsedMem&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2662&quot; title=&quot;BytesHash&quot;&gt;&lt;del&gt;LUCENE-2662&lt;/del&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;717.30&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;139.41&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;536,682,592&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;trunk&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 682.66&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;146.49&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;546,065,344&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I will run the 10M benchmark once I get back to this.&lt;/p&gt;</comment>
                    <comment id="12916767" author="jasonrutherglen" created="Fri, 1 Oct 2010 04:41:54 +0100"  >&lt;p&gt;Simon, looks good.&lt;/p&gt;

&lt;p&gt;Are we using:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; add(BytesRef bytes, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; code)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;yet?&lt;/p&gt;</comment>
                    <comment id="12916799" author="simonw" created="Fri, 1 Oct 2010 07:26:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;Are we using:...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah, look at TermsHashPerFields add() method&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       termID = bytesHash.add(termBytesRef, termAtt.toBytesRef(termBytesRef));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12916872" author="mikemccand" created="Fri, 1 Oct 2010 13:28:50 +0100"  >&lt;p&gt;I indexed 10M 1KB wikipedia docs, single threaded, and also see things a bit faster w/ the patch (10,353 docs/sec vs 10,182 docs/sec).  Nice to have a refactor improve performance for a change, heh.&lt;/p&gt;

&lt;p&gt;The avgUsedMem was quite a bit higher (1.5GB vs 1.0GB), but, I&apos;m not sure this stat is trustworthy.... I&apos;ll re-run w/ infoStream enabled to see if anything looks suspicious (eg, we are somehow not tracking bytes used correctly).&lt;/p&gt;

&lt;p&gt;Still, the resulting indices had identical structure (ie we seem to flush at exactly the same points), so I think bytes used is properly tracked.&lt;/p&gt;</comment>
                    <comment id="12916873" author="mikemccand" created="Fri, 1 Oct 2010 13:33:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Still, the resulting indices had identical structure (ie we seem to flush at exactly the same points), so I think bytes used is properly tracked.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, scratch that &amp;#8211; I was inadvertently flushing by doc count, not by RAM usage.  I&apos;m re-running w/ flush-by-RAM to verify we flush at exactly the same points as trunk.&lt;/p&gt;</comment>
                    <comment id="12916875" author="mikemccand" created="Fri, 1 Oct 2010 13:46:34 +0100"  >&lt;p&gt;In RecyclingByteBlockAllocator.recycleByteBlocks, if we cannot recycle all of the blocks (ie because it exceeds maxBufferedBlocks), we are failing to null out the entries in the incoming array?&lt;/p&gt;

&lt;p&gt;Also maybe rename pos -&amp;gt; freeCount?  (pos is a little too generic?)&lt;/p&gt;</comment>
                    <comment id="12916882" author="rcmuir" created="Fri, 1 Oct 2010 14:07:44 +0100"  >&lt;p&gt;Simon, thank you for renaming the &apos;utf8&apos; variables here. &lt;/p&gt;</comment>
                    <comment id="12916885" author="simonw" created="Fri, 1 Oct 2010 14:21:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;Simon, thank you for renaming the &apos;utf8&apos; variables here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;YW &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In RecyclingByteBlockAllocator.recycleByteBlocks, if we cannot recycle all of the blocks (ie because it exceeds maxBufferedBlocks), we are failing to null out the entries in the incoming array?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ahh you are right - I will fix. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also maybe rename pos -&amp;gt; freeCount? (pos is a little too generic?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I mean its internal though but I see your point.&lt;/p&gt;

&lt;p&gt;thanks for reviewing it closely. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The avgUsedMem was quite a bit higher (1.5GB vs 1.0GB), but, I&apos;m not sure this stat is trustworthy.... I&apos;ll re-run w/ infoStream enabled to see if anything looks suspicious (eg, we are somehow not tracking bytes used correctly).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hmm I will dig once I get back to my workstation.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12916913" author="mikemccand" created="Fri, 1 Oct 2010 16:27:41 +0100"  >&lt;p&gt;OK my 2nd indexing test (10M wikipedia docs, flush @ 256 MB ram used) finished and trunk/patch are essentially the same throughput, and, all flushes happened at identical points.  So I think we are good to go...&lt;/p&gt;

&lt;p&gt;Nice work Simon!&lt;/p&gt;</comment>
                    <comment id="12916965" author="mikemccand" created="Fri, 1 Oct 2010 18:35:40 +0100"  >&lt;p&gt;I also ran a test w/ 5 threads &amp;#8211; they are close (22,402 docs/sec for patch, 22,868 docs/sec for trunk), and this time avgUsedMem is closer (811 MB for trunk, 965 MB for patch).&lt;/p&gt;

&lt;p&gt;I don&apos;t think the avgUsedMem is that meaningful &amp;#8211; it takes the max of Runtime.totalMemory() - Runtime.freeMemory() (which includes garbage I think), after each completed task, and then averages across all tasks.  In my case I think it&apos;s averaging 1 measure per thread, so it&apos;s really sort of measuring how much garbage there happened to be at the time.&lt;/p&gt;</comment>
                    <comment id="12916988" author="mikemccand" created="Fri, 1 Oct 2010 19:18:17 +0100"  >&lt;p&gt;I instrumented trunk &amp;amp; the patch to see how many times we do new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;bufferSize&amp;#93;&lt;/span&gt; while building 5M index, and they both alloc the same number of byte[] from the BBA.  So I don&apos;t think we have a memory issue...&lt;/p&gt;</comment>
                    <comment id="12917186" author="simonw" created="Sat, 2 Oct 2010 13:35:59 +0100"  >&lt;p&gt;This patch fixes nulling out the recycled but not reused byte blocks in RecyclingByteBlockAllocator.&lt;/p&gt;

&lt;p&gt;I thing we are ready to go I will commit to trunk soon. I don&apos;t think we need a CHANGES.TXT here - at least I can not find any section this refactoring would fit to. &lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12917188" author="simonw" created="Sat, 2 Oct 2010 13:45:25 +0100"  >&lt;p&gt;Committed to trunk in rev. 1003790&lt;/p&gt;

&lt;p&gt;@Jason: do you need that merged into Realtime-Branch or is buschmi going to do that? Otherwise I can help too&lt;/p&gt;

&lt;p&gt;I will keep it open until this is merged into Realtime Branch&lt;/p&gt;</comment>
                    <comment id="12917354" author="jasonrutherglen" created="Sun, 3 Oct 2010 17:04:21 +0100"  >&lt;p&gt;Simon, I&apos;m going to get deletes working, tests passing using maps in the RT branch, then we can integrate.  This&apos;ll probably be best.&lt;/p&gt;</comment>
                    <comment id="12917372" author="simonw" created="Sun, 3 Oct 2010 19:10:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;Simon, I&apos;m going to get deletes working, tests passing using maps in the RT branch, then we can integrate. This&apos;ll probably be best.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Jason, I suggest you create a separate issue something like &quot;Integrate BytesRefHash in Realtime Branch&quot; and I will take care of it. I think this issue had a clear target to factor out the hash table out of TermsHashPerField and we should close it. lets use a new one to track the integration.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;Simon&lt;/p&gt;</comment>
                    <comment id="12917416" author="jasonrutherglen" created="Sun, 3 Oct 2010 23:10:26 +0100"  >&lt;p&gt;Lets commit this to trunk.  We need to merge in all of trunk to the RT branch, or vice versa at some point anyways.  This patch could be a part of that bulk merge-in, or we can simply do it now.&lt;/p&gt;</comment>
                    <comment id="12917537" author="mikemccand" created="Mon, 4 Oct 2010 10:51:06 +0100"  >&lt;p&gt;This was already committed to trunk...&lt;/p&gt;</comment>
                    <comment id="12924484" author="tolot27" created="Mon, 25 Oct 2010 08:56:45 +0100"  >&lt;p&gt;Why is this issue still open, if the patch was already committed to trunk?&lt;/p&gt;</comment>
                    <comment id="12924488" author="simonw" created="Mon, 25 Oct 2010 09:02:42 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why is this issue still open, if the patch was already committed to trunk?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;see my comment above: &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I will keep it open until this is merged into Realtime Branch&lt;/p&gt;&lt;/blockquote&gt;</comment>
                    <comment id="12935716" author="simonw" created="Thu, 25 Nov 2010 10:42:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;I will keep it open until this is merged into Realtime Branch&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we should really close this since RT branch is not very active right now....&lt;/p&gt;
</comment>
                    <comment id="12935735" author="michaelbusch" created="Thu, 25 Nov 2010 12:13:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should really close this since RT branch is not very active right now....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry about that.  I need to merge trunk into RT, then I&apos;ll get this change too.  It&apos;s a big merge though with tons of conflicts...&lt;/p&gt;</comment>
                    <comment id="12935739" author="simonw" created="Thu, 25 Nov 2010 12:24:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sorry about that. I need to merge trunk into RT, then I&apos;ll get this change too. It&apos;s a big merge though with tons of conflicts...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;HA! good to see you here! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; have fun with the merge&lt;/p&gt;</comment>
                    <comment id="12935744" author="thetaphi" created="Thu, 25 Nov 2010 12:44:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;HA! good to see you here!  have fun with the merge&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He is working hard, it&apos;s 4:45 am in California &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12935746" author="simonw" created="Thu, 25 Nov 2010 12:51:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;He is working hard, it&apos;s 4:45 am in California &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;true but he is in germany &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12935747" author="michaelbusch" created="Thu, 25 Nov 2010 13:02:31 +0000"  >&lt;p&gt;Yeah sitting in Stuttgart, going to hit the Weihnachtsmarkt soon - let&apos;s see how the merge goes after several glasses of Gluehwein &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12444498">LUCENE-2186</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12477280">LUCENE-2702</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12478122">LUCENE-2719</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12456183" name="LUCENE-2662.patch" size="95491" author="simonw" created="Sat, 2 Oct 2010 13:35:59 +0100" />
                    <attachment id="12456025" name="LUCENE-2662.patch" size="95382" author="simonw" created="Thu, 30 Sep 2010 17:28:44 +0100" />
                    <attachment id="12455641" name="LUCENE-2662.patch" size="82158" author="simonw" created="Mon, 27 Sep 2010 07:03:57 +0100" />
                    <attachment id="12455572" name="LUCENE-2662.patch" size="63427" author="simonw" created="Sat, 25 Sep 2010 19:48:35 +0100" />
                    <attachment id="12455488" name="LUCENE-2662.patch" size="28475" author="simonw" created="Fri, 24 Sep 2010 13:42:04 +0100" />
                    <attachment id="12455238" name="LUCENE-2662.patch" size="11897" author="jasonrutherglen" created="Wed, 22 Sep 2010 07:24:32 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 22 Sep 2010 15:05:30 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11178</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25030</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>