<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:10:10 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2215/LUCENE-2215.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2215] paging collector</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2215</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-2127?focusedCommentId=12796898&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12796898&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-2127?focusedCommentId=12796898&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12796898&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Somebody assign this to Aaron McCurry and we&apos;ll see if we can get enough votes on this issue to convince him to upload his patch.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12445693">LUCENE-2215</key>
            <summary>paging collector</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="aheinz_lulu">Adam Heinz</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Jan 2010 22:37:15 +0000</created>
                <updated>Thu, 2 May 2013 03:29:27 +0100</updated>
                    <resolved>Mon, 26 Sep 2011 17:34:55 +0100</resolved>
                            <version>2.4</version>
                <version>3.0</version>
                                <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>5</votes>
                        <watches>9</watches>
                                                    <comments>
                    <comment id="12800981" author="amccurry" created="Fri, 15 Jan 2010 22:58:30 +0000"  >&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I will try to get my patch ready this weekend.  Otherwise it will be first of the week.&lt;/p&gt;</comment>
                    <comment id="12802031" author="amccurry" created="Tue, 19 Jan 2010 01:47:09 +0000"  >&lt;p&gt;This is a lucene 3.0 paging collector.  This should allow for paging through any amount of results without exhausting the jvm&apos;s memory.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions or would like me to make any mods.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nearinfinity.com/blogs/aaron_mccurry/making_lucene_hit_results_pagi.html&quot; class=&quot;external-link&quot;&gt;http://www.nearinfinity.com/blogs/aaron_mccurry/making_lucene_hit_results_pagi.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12802276" author="aheinz_lulu" created="Tue, 19 Jan 2010 14:29:52 +0000"  >&lt;p&gt;Awesome, thanks!  I&apos;ll schedule some time in the coming week to patch our dev installation and sic some QA guys on it.&lt;/p&gt;</comment>
                    <comment id="12829357" author="amccurry" created="Thu, 4 Feb 2010 01:00:08 +0000"  >&lt;p&gt;Not sure if anyone has looked at this yet, but I just fixed a minor issue with the IterablePaging.java class.  If you did not specify a gather amount, it wouldn&apos;t gather any hits.&lt;/p&gt;</comment>
                    <comment id="12833024" author="jmwap" created="Fri, 12 Feb 2010 15:27:22 +0000"  >&lt;p&gt;Kudos Aaron, this is cool for what I need. &lt;/p&gt;

&lt;p&gt;I just integrated in my project, upgraded to 3.0 just to get this in. But I am having an issue in my first test:&lt;/p&gt;

&lt;p&gt;java.lang.ArrayIndexOutOfBoundsException: 1&lt;br/&gt;
	at org.apache.lucene.util.PriorityQueue.initialize(PriorityQueue.java:96)&lt;br/&gt;
	at org.apache.lucene.search.HitQueue.&amp;lt;init&amp;gt;(HitQueue.java:67)&lt;br/&gt;
	at org.apache.lucene.search.PagingCollector.&amp;lt;init&amp;gt;(PagingCollector.java:43)&lt;br/&gt;
	at org.apache.lucene.search.PagingCollector.&amp;lt;init&amp;gt;(PagingCollector.java:39)&lt;br/&gt;
	at org.apache.lucene.search.IterablePaging$PagingIterator.search(IterablePaging.java:158)&lt;br/&gt;
	at org.apache.lucene.search.IterablePaging$PagingIterator.&amp;lt;init&amp;gt;(IterablePaging.java:151)&lt;br/&gt;
	at org.apache.lucene.search.IterablePaging.iterator(IterablePaging.java:140)&lt;br/&gt;
	at ...CombinedLuceneDBStep.proceed(CombinedLuceneDBStep.java:71)&lt;/p&gt;

&lt;p&gt;I use it like this:&lt;br/&gt;
            MultiSearcher ms = new MultiSearcher(indexes);&lt;br/&gt;
            TotalHitsRef totalHitsRef = new TotalHitsRef();&lt;br/&gt;
            ProgressRef progressRef = new ProgressRef();&lt;br/&gt;
            IterablePaging paging = new IterablePaging(ms, lucquery, NB_LUCENE_HITS_PER_BATCH);&lt;/p&gt;

&lt;p&gt;I have no clue where the issue lies, I am using MultiSearcher , and norms are disabled. Or maybe I screwed up something while upgrading to 3.0... I got the files as of feb 11th.&lt;/p&gt;</comment>
                    <comment id="12833041" author="jmwap" created="Fri, 12 Feb 2010 15:59:23 +0000"  >&lt;p&gt;disregard my previous comment... There was some refactoring in my codebase to get this in and NB_LUCENE_HITS_PER_BATCH was uninitialized...so far it is working sweetly, I will report when I finish my tests.&lt;/p&gt;

&lt;p&gt;thanks&lt;/p&gt;</comment>
                    <comment id="12848842" author="gsingers" created="Tue, 23 Mar 2010 18:38:35 +0000"  >&lt;p&gt;I think in order to properly implement this, topDocs() needs to be non-final, otherwise there is some oddities in initing a PQ with more results than are available once paging.  Updated patch shortly.&lt;/p&gt;</comment>
                    <comment id="12848896" author="shaie" created="Tue, 23 Mar 2010 20:33:52 +0000"  >&lt;p&gt;I&apos;ve reviewed PagingCollector.java and the first thing I have to say about it is that I really like it ! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Saves lots of unnecessary heapify code, if the application can allow itself to store the lowest last SD.&lt;/p&gt;

&lt;p&gt;I have few comments/questions.&lt;/p&gt;

&lt;p&gt;I don&apos;t understand what getLastScoreDoc is for? Is it just a utility method? Is it something the app can compute by itself? Anyway, it lacks javadocs, so perhaps if they existed I wouldn&apos;t need to ask &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;In collect(), there&apos;s the following code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
		} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (score == previousPassLowest.score &amp;amp;&amp;amp; doc &amp;lt;= previousPassLowest.doc) {
			&lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the scores are the same and the doc is less than or equal to
&lt;/span&gt;			&lt;span class=&quot;code-comment&quot;&gt;// the
&lt;/span&gt;			&lt;span class=&quot;code-comment&quot;&gt;// previous pass lowest hit doc then skip because &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; collector
&lt;/span&gt;			&lt;span class=&quot;code-comment&quot;&gt;// favors
&lt;/span&gt;			&lt;span class=&quot;code-comment&quot;&gt;// lower number documents.
&lt;/span&gt;			&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think there&apos;s a typo in the comment &quot;favors lower number documents&quot; .. while it seems to prefer higher doc IDs? The way I understand it, irregardless of whether docs are collected in/out of order, HitQueue ensures that when scores are equals, the lowest IDs are favored. Thus the first round always keeps the lowest IDs among the docs whose scores match. The next round will favor the docs whose IDs come next, and so forth ... am I right? (just clarifying my understanding).&lt;br/&gt;
If that&apos;s the case, I think it&apos;ll be good if it&apos;s spelled out in the comment, and also mention that it means that document has already been returned previously (like it&apos;s documented in the previous &apos;if&apos;).&lt;/p&gt;

&lt;p&gt;The last &apos;else&apos; really looks like TSDC&apos;s out-of-order version, which makes me think whether PagingCollector can be viewed as a filter on top of TSDC (and possibly even TopFieldCollector)? So if a hit should be collected, it just calls super.collect? I realize though that a Collector is a hotspot and we want to minimize &apos;if&apos; let alone method call statements as much as possible. But it just feels so strong that it should be a filter ... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. And you wouldn&apos;t need to specifically handle in/out orderness ... and w/ the right design, it can also wrap a TFC or any other TDC implementation ...&lt;/p&gt;

&lt;p&gt;BTW, I&apos;ve noticed that you don&apos;t track maxScore - is it assumed that the application stores it from the first round? If so I&apos;d document it, because the application needs to know it should use TSDC the first round, and PagingCollector the second round.&lt;/p&gt;

&lt;p&gt;Also, PagingCollector offers a ctor which does not force the application to pass in a ScoreDoc. See my comment from above - it might be misleading, because if you use this collector right from the very first search, you lose the maxScore tracking. I also don&apos;t see why it should be allowed - if a dummy previousPassLowest ScoreDoc is used, collect() does a lot of unnecessary &apos;if&apos;s. I think this collector should be used only from the second round, and a single ctor which forces a ScoreDoc to be passed would make more sense. If the application wishes to shoot itself in the leg (performance-wise), it can pass a dummy SD itself.&lt;/p&gt;</comment>
                    <comment id="12848897" author="gsingers" created="Tue, 23 Mar 2010 20:36:41 +0000"  >&lt;p&gt;Here&apos;s an update of Aaron&apos;s work with the following changes:&lt;/p&gt;

&lt;p&gt;1. Added real unit tests&lt;br/&gt;
2. Made topDocs() non final in order to override in PagingCollector to handle the case where the some edge cases with larger PQ size than total hits.  Overrode the other topDocs(...) methods to throw UnsupportedOperation as they aren&apos;t needed for a Paging Collector&lt;br/&gt;
3. Pass in num already seen so that PQ operations can be calculated correctly.  Not sure if we really need, but otherwise it puts the burden on the user to make sure the PQ is sized properly, I think, which may not be such a bad burden&lt;br/&gt;
4. Renamed IterablePaging to be PagingIterable.  Not a huge fan of that name either, but couldn&apos;t think of anything better&lt;br/&gt;
5. Collapsed the if/else clauses in the collect method into a single if clause.&lt;/p&gt;

&lt;p&gt;Left to do:&lt;br/&gt;
1. benchmark.  Is it really better?&lt;br/&gt;
2. Not entirely certain on the PagingIterable API stuff yet.  Looks useful.&lt;br/&gt;
3. Should we have an InOrder Collector as well?  Seems like we might be able to save a few operations per doc.&lt;/p&gt;</comment>
                    <comment id="12848904" author="gsingers" created="Tue, 23 Mar 2010 20:46:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;BTW, I&apos;ve noticed that you don&apos;t track maxScore&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point.  I think we probably should track it, so that the PagingColl could be used right from the get go.&lt;/p&gt;

&lt;p&gt;We might also consider deprecating the topDocs() methods that take in parameters and think about how the paging collector might be integrated at a lower level in the other collectors, such that one doesn&apos;t even have to think about calling a diff. collector.&lt;/p&gt;</comment>
                    <comment id="12848908" author="shaie" created="Tue, 23 Mar 2010 20:55:43 +0000"  >&lt;p&gt;I must admit I don&apos;t like throwing UOE. I imagine the naive user calling one of these and hit w/ UOE out of nowhere really &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Perhaps it&apos;s a sign PagingCollector should not be a sub-class of TopDocsCollector? It does not benefit from it in any way because it overrides all the main methods, impls them or throws UOE for those it doesn&apos;t like. So perhaps it should just be a TopScorePagingCollector which copies some of the functionality of TSDC, but is not a TDC itself. It will have a topDocs() method, and only it (b/c I agree the rest don&apos;t make any sense).&lt;/p&gt;

&lt;p&gt;Notice the different name I propose - to make it clear it&apos;s a collector that can be used for paging through a scored list of results.&lt;/p&gt;

&lt;p&gt;I BTW liked that the if/else clauses were separated, b/c you could include meaningful documentation for each. Right now those are just very long lines.&lt;/p&gt;

&lt;p&gt;About in-order, I think the only thing you will save is the last &apos;else&apos;. Read my comment above about wrapping TSDC ... not sure about it, but it will make it more elegant.&lt;/p&gt;

&lt;p&gt;I&apos;ll review the rest of the patch. Didn&apos;t yet understand what&apos;s PagingIterable for ...&lt;/p&gt;</comment>
                    <comment id="12849193" author="gsingers" created="Wed, 24 Mar 2010 14:04:28 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I must admit I don&apos;t like throwing UOE. I imagine the naive user calling one of these and hit w/ UOE out of nowhere really . Perhaps it&apos;s a sign PagingCollector should not be a sub-class of TopDocsCollector? It does not benefit from it in any way because it overrides all the main methods, impls them or throws UOE for those it doesn&apos;t like. So perhaps it should just be a TopScorePagingCollector which copies some of the functionality of TSDC, but is not a TDC itself. It will have a topDocs() method, and only it (b/c I agree the rest don&apos;t make any sense).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, not a huge fan of it either, but it is bad form to call it when using this collector and I&apos;d rather people learn that up front.  Like I said in the last comment, I think we&apos;d be better off trying to integrate this in to a lower level and not even having a &quot;special&quot; collector.  If we just added a create option that took in the necessary info, then we could just mod the existing collectors, possibly.  Then those two topDocs methods could just be deprecated/removed.&lt;/p&gt;</comment>
                    <comment id="12849200" author="shaie" created="Wed, 24 Mar 2010 14:31:00 +0000"  >&lt;p&gt;So what&apos;s the motivation of declaring PagingCollector a TopDocsCollector? Would you envision one to request for a TopDocsCollector but don&apos;t care if it&apos;s TSDC, TFC or PagingCollector? I would rather have it extend TDC directly, and then you won&apos;t need to throw UOE for the rest of the methods ...&lt;/p&gt;

&lt;p&gt;What about renaming it to TopScorePagingCollector?&lt;/p&gt;</comment>
                    <comment id="12849207" author="gsingers" created="Wed, 24 Mar 2010 14:46:59 +0000"  >&lt;p&gt;I&apos;m saying PagingColl. doesn&apos;t even exist and it is just folded into the two existing In/Out Collectors with a new create() method that knows when it&apos;s paging and when it&apos;s not.&lt;/p&gt;</comment>
                    <comment id="12849211" author="shaie" created="Wed, 24 Mar 2010 15:05:13 +0000"  >&lt;p&gt;Ohh I see. Missed that. So that can be folded into TSDC.create, or actually another create method which in addition to numHits specifies a &apos;startFrom&apos; w/ a ScoreDoc, and a similar one for TFC.create. The only complication I see is that if we want to make it extremely efficient, we&apos;ll need to double the number of Collector impls for TSDC and TFC (the internal instances that are created) ...&lt;/p&gt;

&lt;p&gt;Then ... I think ... TDC can have just one topDocs() indeed.&lt;/p&gt;

&lt;p&gt;But the idea of doubling the number of collector impls worries me. Especially for cases where even for paging, you won&apos;t use the Paging thing because you simply don&apos;t maintain any state on the server. I wonder if for those apps, who do maintain the state, and I imagine there aren&apos;t lots of them, having a PagingCollector which either wraps TSDC, or is the one you provided in the patch (but does not extend TDC) would be better? It won&apos;t unnecessarily over-complicate the code of TSDC and TFC (which will have 12 impls) and give you sort of what you need - if you maintain state, then you know that&apos;s the second page the user requested, so using a PagingCollector specifically doesn&apos;t sound that bad to me?&lt;/p&gt;</comment>
                    <comment id="12849216" author="gsingers" created="Wed, 24 Mar 2010 15:23:36 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The only complication I see is that if we want to make it extremely efficient, we&apos;ll need to double the number of Collector impls for TSDC and TFC (the internal instances that are created) ... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not convinced yet.  I think we can likely make it short circuit quite fast for the non-paging case, but rather than guess, let&apos;s benchmark.  I&apos;m extracting my Benchmark collector stuff right now on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2343&quot; title=&quot;Add support for benchmarking Collectors&quot;&gt;&lt;del&gt;LUCENE-2343&lt;/del&gt;&lt;/a&gt;.  I also am not sure we need to double the number of collectors.&lt;/p&gt;</comment>
                    <comment id="12849639" author="mikemccand" created="Thu, 25 Mar 2010 09:47:47 +0000"  >&lt;p&gt;This is a neat collector!&lt;/p&gt;

&lt;p&gt;I like the idea of chaining/filtering... couldn&apos;t we put this in core&lt;br/&gt;
(under TFC/TSDC.create), but instead of doubling the 12 specialized&lt;br/&gt;
(anonymous) impls we now have, just delegate?&lt;/p&gt;

&lt;p&gt;Ie, we&apos;d make a FilteredCollector, taking another collector when it&apos;s&lt;br/&gt;
created, and then on every collect call, only if the hit is &quot;weak&quot;&lt;br/&gt;
enough (ie is worse than what the app provided as prev low score/doc)&lt;br/&gt;
would it forward it to the delegate?  I guess we should test perf w/&lt;br/&gt;
(the new additions to benchmark &amp;#8211; yay!) to see if specializing the&lt;br/&gt;
code (even anonymously) is warranted.&lt;/p&gt;

&lt;p&gt;The indent whitespace needs to fixed to 2 spaces...&lt;/p&gt;</comment>
                    <comment id="12849843" author="gsingers" created="Thu, 25 Mar 2010 19:00:36 +0000"  >&lt;p&gt;Mike,  don&apos;t you think, though, that through a fairly simple update of some of the clauses to appropriate short circuit things that we can just hook this into the existing collectors w/o no need for any delegation or changes?  Let me try a patch.  Now that the benchmark stuff is in, we should be able to test.&lt;/p&gt;</comment>
                    <comment id="12849851" author="thetaphi" created="Thu, 25 Mar 2010 19:10:19 +0000"  >&lt;p&gt;Hey, and I want to fix the NaN thing in TSDC: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2271&quot; title=&quot;Function queries producing scores of -inf or NaN (e.g. 1/x) return incorrect results with TopScoreDocCollector&quot;&gt;LUCENE-2271&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Maybe when we delegate, we can also use my cool code that switches the delegate to remove on comparison after the queue is full.&lt;/p&gt;</comment>
                    <comment id="12849863" author="mikemccand" created="Thu, 25 Mar 2010 19:23:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;...through a fairly simple update of some of the clauses to appropriate short circuit things that we can just hook this into the existing collectors w/o no need for any delegation or changes? Let me try a patch. Now that the benchmark stuff is in, we should be able to test.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This&apos;d make me nervous...&lt;/p&gt;

&lt;p&gt;Ie I don&apos;t think we should insert bytecodes for the 99.9% of searches that wouldn&apos;t make use of this, even if we can&apos;t uncover a slowdown with benchmarking.&lt;/p&gt;

&lt;p&gt;We should still benchmark it though (I&apos;m curious)... we should also benchmark the delegate solution.&lt;/p&gt;</comment>
                    <comment id="12849961" author="gsingers" created="Fri, 26 Mar 2010 00:26:16 +0000"  >&lt;p&gt;Yeah, but one could make the argument, Mike, that the existing &quot;optimizations&quot; are useless for the most common case, since I think it&apos;s safe to say most applications implement paging.  Of course, that being said, most users don&apos;t page all that deeply.  Also, for something like Solr that prefetches the top 50 it might not be good, either.  Still, in my mind it is one additional boolean check, as in:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ( (current stuff) || (pagingInfoPresent == &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; paging check) )
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pagingInfoPresent can be determined at construction time and that whole clause would be short circuited very quickly.&lt;/p&gt;

&lt;p&gt;That being said, delegation could be done at construction time, too and more cleanly separates things.  I&apos;ll try to put up my version tomorrow.&lt;/p&gt;</comment>
                    <comment id="12850002" author="shaie" created="Fri, 26 Mar 2010 04:22:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;since I think it&apos;s safe to say most applications implement paging&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s be careful about the semantics here Grant. Most if not all applications implement paging indeed, but I believe only FEW actually store user contexts between searches. PagingCollector relies on the application to store the lowest ranking doc that was returned previously, which means storing context between user&apos;s searches.&lt;/p&gt;

&lt;p&gt;I agree w/ Mike&apos;s statement about 99.9% of the searches would never run that code, which is why I&apos;ve proposed a delegation/wrapper approach from the beginning. I also think that we should make some allowances here and there, for the non-common case, and introduce better software design than specialized code. A Collector filter approach for some rare (or even less common) cases seems very reasonable to me.&lt;/p&gt;

&lt;p&gt;Also, I think that if we add to TSDC a create method which takes into account the previously scored lowest doc, it will confuse people. Now they will need to think &quot;where do I get this low score from?&quot; - but perhaps after I see the code, it wouldn&apos;t be such a bad thing .... just have a feeling TSDC and TFC should be left on their own, and extreme paging stuff should either be its own specialized collector, or a wrapper.&lt;/p&gt;</comment>
                    <comment id="12850072" author="gsingers" created="Fri, 26 Mar 2010 10:39:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Let&apos;s be careful about the semantics here Grant. Most if not all applications implement paging indeed, but I believe only FEW actually store user contexts between searches. PagingCollector relies on the application to store the lowest ranking doc that was returned previously, which means storing context between user&apos;s searches.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think, assuming the math plays out, that once you show the gains to be had here, esp. for deep paging, storing an int and a float is trivial.  If they are implementing paging, they are already keeping state about what page they are on.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Now they will need to think &quot;where do I get this low score from?&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, but If that is that hard to figure out, then I don&apos;t see how they have any business writing a Lucene application to begin with.  A simple javadoc that says these two values are taken from the last result of the previously seen page should do the trick&lt;/p&gt;

&lt;p&gt;At any rate, let&apos;s put up the patches and find out instead of debating.  I should have time today to do mine.&lt;/p&gt;</comment>
                    <comment id="12850086" author="shaie" created="Fri, 26 Mar 2010 11:14:58 +0000"  >&lt;p&gt;Sure let&apos;s wait for the patch and some perf. results.&lt;/p&gt;</comment>
                    <comment id="13022372" author="itamar" created="Wed, 20 Apr 2011 22:08:43 +0100"  >&lt;p&gt;Hi guys, any update on this?&lt;/p&gt;

&lt;p&gt;I&apos;m interested in using this for production code. Can anyone comment on how safe / mature this code is?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="13025236" author="jmwap" created="Tue, 26 Apr 2011 15:12:05 +0100"  >&lt;p&gt;Itamar, in case it&apos;s helpful for you: my code is not in production yet, but close, and I am not using latest patch, but the original one. I have not seen any issue in my regression tests against my older code where I was not using this.&lt;/p&gt;</comment>
                    <comment id="13032359" author="itamar" created="Thu, 12 May 2011 12:05:45 +0100"  >&lt;p&gt;Thanks. I ended up using the standard Lucene paging code.&lt;/p&gt;

&lt;p&gt;Hopefully this will get into Lucene soon...&lt;/p&gt;</comment>
                    <comment id="13064383" author="simonw" created="Wed, 13 Jul 2011 07:31:27 +0100"  >&lt;p&gt;it this still valid / needed? Grant are you planning to work on this any time soon?&lt;/p&gt;</comment>
                    <comment id="13064484" author="gsingers" created="Wed, 13 Jul 2011 12:05:40 +0100"  >&lt;p&gt;I do think it is still valid and much needed, but haven&apos;t had time to work on it and I don&apos;t think we ever got agreement on the API level.&lt;/p&gt;</comment>
                    <comment id="13105664" author="chubbard" created="Thu, 15 Sep 2011 21:26:29 +0100"  >&lt;p&gt;So this is not apart of 3.x yet.  If I want to use this with 3.x where is the most recent version?  It looks like Grant has made some changes since the original upload I&apos;d like to get those changes since it sounds like it fixed several bugs in the original.&lt;/p&gt;</comment>
                    <comment id="13106844" author="rcmuir" created="Fri, 16 Sep 2011 22:55:39 +0100"  >&lt;p&gt;I think for this issue, we should just add IndexSearcher.pagedSearch() methods for paging, passing in the bottom result of the previous page (ScoreDoc lastBottom).&lt;/p&gt;

&lt;p&gt;Note for the first page of results, this means you pass in null for lastBottom and its doing the same thing as search(), so even if you choose to use this method your &apos;page 1 results&apos; will be just as fast as IndexSearcher.search()&lt;/p&gt;

&lt;p&gt;Also, its easy to make a ScoreDoc from the int+float so apps that want to keep this state can probably do so easily (and maybe they benchmark and decide its only worthwhile to cutover to this once you hit page 3, or 4, or whatever).&lt;/p&gt;

&lt;p&gt;I also added a few optimizations to the previous code: specialized InOrder/OutOfOrder, subtract docBase from the bottom&apos;s doc in setNextReader to remove an add, etc.&lt;/p&gt;

&lt;p&gt;I didn&apos;t add the methods that take sort, but I think we could do this in a separate issue.&lt;/p&gt;</comment>
                    <comment id="13106848" author="mikemccand" created="Fri, 16 Sep 2011 23:02:59 +0100"  >&lt;p&gt;Patch looks great!  I like the API &amp;#8211; all the app must do is hold onto the bottom doc from last page and resubmit for next page.&lt;/p&gt;</comment>
                    <comment id="13106944" author="hossman" created="Sat, 17 Sep 2011 01:17:20 +0100"  >&lt;p&gt;I&apos;m not overly familiar with the historical evolution of this patch, but is a new IndexSearcher.pagedSearch really warranted in this case?&lt;/p&gt;

&lt;p&gt;Adding the &quot;ScoreDoc lastBottom&quot; param to TopScoreDocCollector.create seems like it would make this easy enough to use.&lt;/p&gt;

&lt;p&gt;My concern is that most novice users doing &quot;simple paginated search&quot; aren&apos;t ever going to hit the deep paging problem &amp;#8211; keeping track of the current page number and multiplying by the number of items per page to determine the numHit value works just fine for most applications.  But if they see an explicit IndexSearcher.pagedSearch method, they are going to think &quot;this is what i need for paginated search&quot; and then be confused as to how they should keep track in their app of the last ScoreDoc instance.&lt;/p&gt;

&lt;p&gt;I mean, i&apos;m all in favor of simple convince methods &amp;#8211; but isn&apos;t TopScoreDocCollector.create simple enough for the level of knowledge a user will need to use this effectively?&lt;/p&gt;</comment>
                    <comment id="13106971" author="rcmuir" created="Sat, 17 Sep 2011 01:43:43 +0100"  >&lt;p&gt;Hoss, how can they use this in combination with an ExecutorService then?&lt;/p&gt;

&lt;p&gt;With the current patch: this works?&lt;/p&gt;</comment>
                    <comment id="13106987" author="hossman" created="Sat, 17 Sep 2011 02:22:50 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hoss, how can they use this in combination with an ExecutorService then?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I sync&apos;ed up with rmuir on irc,  i wasn&apos;t aware that the ExecutorService only worked with some IndexSeracher methods and not others.  I see now why a new method is important (for deep paging you&apos;re really going ot want to use the ExecutorService), but i&apos;m still a little concerned about hte name sucking in novice users who don&apos;t really need it to do paginated search.&lt;/p&gt;

&lt;p&gt;we can add detailed javadocs making it clear to folks what the diff is, but perhaps a diff name would be more appropriate?  at a minimum maybe call it &quot;deepPagingSearch&quot; or something else that conveys more  explicitly how it works (&quot;searchAfterLastMatch&quot; ?)&lt;/p&gt;</comment>
                    <comment id="13106994" author="rcmuir" created="Sat, 17 Sep 2011 02:35:07 +0100"  >&lt;p&gt;Maybe instead &apos;searchAfter&apos; ? perhaps we could rearrange the arguments too, to make it read better:&lt;br/&gt;
instead of:&lt;/p&gt;

&lt;p&gt;TopDocs pagedSearch(Query query, ScoreDoc lastBottom, int n)&lt;/p&gt;

&lt;p&gt;we could do:&lt;/p&gt;

&lt;p&gt;TopDocs searchAfter(ScoreDoc previous, Query query, int n)&lt;/p&gt;

&lt;p&gt;or something like that?&lt;/p&gt;</comment>
                    <comment id="13107103" author="mikemccand" created="Sat, 17 Sep 2011 13:17:15 +0100"  >&lt;p&gt;+1 for TopDocs searchAfter(ScoreDoc previous, Query query, int n), though maybe name the param &quot;after&quot; not &quot;previous&quot;?&lt;/p&gt;</comment>
                    <comment id="13107147" author="rcmuir" created="Sat, 17 Sep 2011 15:03:15 +0100"  >&lt;p&gt;renamed to searchAfter, added a little to the javadocs, and improved the test coverage a bit.&lt;/p&gt;</comment>
                    <comment id="13107182" author="gsingers" created="Sat, 17 Sep 2011 18:47:23 +0100"  >&lt;p&gt;+1.&lt;/p&gt;</comment>
                    <comment id="13109083" author="rcmuir" created="Wed, 21 Sep 2011 00:28:08 +0100"  >&lt;p&gt;I committed the patch to trunk: we can discuss if/how we should backport to 3.x, backwards break or add sophisticated layer or whatever.&lt;/p&gt;</comment>
                    <comment id="13109553" author="mikemccand" created="Wed, 21 Sep 2011 16:00:55 +0100"  >&lt;p&gt;For 3.x can we just add these methods to IndexSearcher (not Searcher/Searchable)?   This would require the app to use IndexSearcher if they are not already, which is great because that&apos;s what they&apos;ll need to do in 4.0 anyway (since Searcher/Searchable are deprecated).&lt;/p&gt;

&lt;p&gt;Or is there some other back compat issue?&lt;/p&gt;</comment>
                    <comment id="13109571" author="rcmuir" created="Wed, 21 Sep 2011 16:24:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;Or is there some other back compat issue?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We add this param to a protected method signature, so it would affect subclasses of IndexSearcher.&lt;/p&gt;</comment>
                    <comment id="13109575" author="mikemccand" created="Wed, 21 Sep 2011 16:27:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;We add this param to a protected method signature, so it would affect subclasses of IndexSearcher.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh, right.  Well, I think we can make an exception here &amp;#8211; subclassing IS is very expert.&lt;/p&gt;</comment>
                    <comment id="13157764" author="thetaphi" created="Sun, 27 Nov 2011 12:29:27 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12442628">LUCENE-2127</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12445919">SOLR-1726</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12434750" name="IterablePaging.java" size="6220" author="amccurry" created="Thu, 4 Feb 2010 01:00:08 +0000" />
                    <attachment id="12494919" name="LUCENE-2215.patch" size="18060" author="rcmuir" created="Sat, 17 Sep 2011 15:03:15 +0100" />
                    <attachment id="12494871" name="LUCENE-2215.patch" size="17873" author="rcmuir" created="Fri, 16 Sep 2011 22:55:39 +0100" />
                    <attachment id="12439607" name="LUCENE-2215.patch" size="23534" author="gsingers" created="Tue, 23 Mar 2010 20:36:40 +0000" />
                    <attachment id="12430688" name="PagingCollector.java" size="2840" author="amccurry" created="Tue, 19 Jan 2010 01:47:09 +0000" />
                    <attachment id="12430686" name="TestingPagingCollector.java" size="3603" author="amccurry" created="Tue, 19 Jan 2010 01:47:09 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 15 Jan 2010 22:58:30 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2438</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25510</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>