<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:03 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1877/LUCENE-1877.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1877] Use NativeFSLockFactory as default for new API (direct ctors &amp; FSDir.open)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1877</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;A user requested we add a note in IndexWriter alerting the availability of NativeFSLockFactory (allowing you to avoid retaining locks on abnormal jvm exit). Seems reasonable to me - we want users to be able to easily stumble upon this class. The below code looks like a good spot to add a note - could also improve whats there a bit - opening an IndexWriter does not necessarily create a lock file - that would depend on the LockFactory used.&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &amp;lt;p&amp;gt;Opening an &amp;lt;code&amp;gt;IndexWriter&amp;lt;/code&amp;gt; creates a lock file &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the directory in use. Trying to open
  another &amp;lt;code&amp;gt;IndexWriter&amp;lt;/code&amp;gt; on the same directory will lead to a
  {@link LockObtainFailedException}. The {@link LockObtainFailedException}
  is also thrown &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; an IndexReader on the same directory is used to delete documents
  from the index.&amp;lt;/p&amp;gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Anyone remember why NativeFSLockFactory is not the default over SimpleFSLockFactory?&lt;/p&gt;</description>
                <environment></environment>
            <key id="12434383">LUCENE-1877</key>
            <summary>Use NativeFSLockFactory as default for new API (direct ctors &amp; FSDir.open)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="markrmiller@gmail.com">Mark Miller</reporter>
                        <labels>
                    </labels>
                <created>Sun, 30 Aug 2009 19:27:33 +0100</created>
                <updated>Sun, 11 Sep 2011 00:35:09 +0100</updated>
                    <resolved>Thu, 3 Sep 2009 23:18:07 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>general/javadocs</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12749301" author="thetaphi" created="Sun, 30 Aug 2009 19:34:04 +0100"  >&lt;p&gt;For IndexWriter/IndexReader this hint is no longer needed (in Lucene 2.9), as all methods taking String/File instead of Directory are deprecated and users should create directory instances and then will automatically get to the place where the LockFactory can be supplied.&lt;/p&gt;

&lt;p&gt;The note should be added to FSDirectory instead.&lt;/p&gt;</comment>
                    <comment id="12749303" author="markrmiller@gmail.com" created="Sun, 30 Aug 2009 19:51:06 +0100"  >&lt;p&gt;My initial thought was also that it didn&apos;t really belong in IndexWriter - but I sold myself on the fact that IndexWriter talks about locking and offers the force unlock method - so it seems fine to me to mention how to use the optimal locking factory (and generally avoid using the force unlock at all - as an aside I just saw a guy trying to use that the other day as regular code so that they could use two IndexWriters with just commit rather than close - ugg).&lt;/p&gt;

&lt;p&gt;I&apos;m not sold either way though - I&apos;d go with whatever. My preference would really be to make it the default (though of course not for 2.9).&lt;/p&gt;</comment>
                    <comment id="12749322" author="mikemccand" created="Sun, 30 Aug 2009 21:24:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;Anyone remember why NativeFSLockFactory is not the default over SimpleFSLockFactory?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my testing (long ago) over NFS, I actually found &quot;native&quot; locks didn&apos;t work as well as &quot;simple&quot; locks.  I was also a bit nervous on how well supported &quot;native&quot; locks are across different OSs. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My preference would really be to make it the default (though of course not for 2.9).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I think it&apos;s the better default.&lt;/p&gt;

&lt;p&gt;People who use Lucene over NFS already have to do special things (eg make a custom deletion policy), and far too many users hit the &quot;leftover lock file&quot; problem.  We could state in the javadocs that this default will change in 3.0?&lt;/p&gt;

&lt;p&gt;Maybe just add one sentence in that IndexWriter locking section, referencing the discussion in NativeFSLockFactory&apos;s javadocs about not having the &quot;leftover lock file&quot; problem?&lt;/p&gt;</comment>
                    <comment id="12749324" author="thetaphi" created="Sun, 30 Aug 2009 21:30:43 +0100"  >&lt;p&gt;Let&apos;s do it in the following way:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;deprecated FSDir.getDirectory() methods return the SimpleLockFactory, as it was before.&lt;/li&gt;
	&lt;li&gt;The new FSDir.open() methods and also the direct ctors of SimpleFSDir, MMapFSDir, NIOFSDir default to NativeLocakFactory (these ctors/methods are all new in 2.9)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because of this we have no BW problem.&lt;/p&gt;</comment>
                    <comment id="12749330" author="creamyg" created="Sun, 30 Aug 2009 22:31:14 +0100"  >&lt;p&gt;&amp;gt; Anyone remember why NativeFSLockFactory is not the default over &lt;br/&gt;
&amp;gt; SimpleFSLockFactory?&lt;/p&gt;

&lt;p&gt;Wasn&apos;t it because native locking is somethings implemented with Fcntl, and&lt;br/&gt;
Fcntl locking blows chunks?  Especially for a library rather than an&lt;br/&gt;
application.&lt;/p&gt;

&lt;p&gt;From the BSD manpage on Fcntl:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This interface follows the completely stupid semantics of System V and IEEE&lt;br/&gt;
Std 1003.1-1988 (``POSIX.1&apos;&apos;) that require that all locks associated with a&lt;br/&gt;
file for a given process are removed when any file descriptor for that file is&lt;br/&gt;
closed by that process.  This semantic means that applications must be aware&lt;br/&gt;
of any files that a subroutine library may access.  For example if an&lt;br/&gt;
application for updating the password file locks the password file database&lt;br/&gt;
while making the update, and then calls getpwname(3) to retrieve a record, the&lt;br/&gt;
lock will be lost because getpwname(3) opens, reads, and closes the password&lt;br/&gt;
database.  The database close will release all locks that the process has&lt;br/&gt;
associated with the database, even if the library routine never requested a&lt;br/&gt;
lock on the database.  Another minor semantic problem with this interface is&lt;br/&gt;
that locks are not inherited by a child process created using the fork(2)&lt;br/&gt;
function.  The flock(2) interface has much more rational last close&lt;br/&gt;
semantics and allows locks to be inherited by child processes.  Flock(2) is&lt;br/&gt;
recommended for applications that want to ensure the integrity of their locks&lt;br/&gt;
when using library routines or wish to pass locks to their children...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The lockfile may be annoying, but at least it&apos;s guaranteed safe on all non-shared&lt;br/&gt;
volumes when the OS implements atomic file opening.&lt;/p&gt;

&lt;p&gt;Are you folks at least able to clean up orphaned lockfiles if the PID it was created&lt;br/&gt;
under is no longer active?&lt;/p&gt;</comment>
                    <comment id="12749334" author="markrmiller@gmail.com" created="Sun, 30 Aug 2009 22:48:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;This interface follows the completely stupid semantics of System V and IEEE&lt;br/&gt;
Std 1003.1-1988 (``POSIX.1&apos;&apos;) that require that all locks associated with a&lt;br/&gt;
file for a given process are removed when any file descriptor for that file is&lt;br/&gt;
closed by that process. This semantic means that applications must be aware&lt;br/&gt;
of any files that a subroutine library may access. For example if an&lt;br/&gt;
application for updating the password file locks the password file database&lt;br/&gt;
while making the update, and then calls getpwname(3) to retrieve a record, the&lt;br/&gt;
lock will be lost because getpwname(3) opens, reads, and closes the password&lt;br/&gt;
database. The database close will release all locks that the process has&lt;br/&gt;
associated with the database, even if the library routine never requested a&lt;br/&gt;
lock on the database. Another minor semantic problem with this interface is&lt;br/&gt;
that locks are not inherited by a child process created using the fork(2)&lt;br/&gt;
function. The flock(2) interface has much more rational last close&lt;br/&gt;
semantics and allows locks to be inherited by child processes. Flock(2) is&lt;br/&gt;
recommended for applications that want to ensure the integrity of their locks&lt;br/&gt;
when using library routines or wish to pass locks to their children... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I can see how this is not ideal, but I&apos;m not seeing how any of the mentioned issues apply to our simple lock usage ...&lt;/p&gt;</comment>
                    <comment id="12749336" author="markrmiller@gmail.com" created="Sun, 30 Aug 2009 23:22:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;People who use Lucene over NFS already have to do special things (eg make a custom deletion policy), and far too many users hit the &quot;leftover lock file&quot; problem. We could state in the javadocs that this default will change in 3.0?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 from me - if it made things work out of the box with NFS, I&apos;d vote to keep as is, but the points you mention were in my head too.&lt;/p&gt;

&lt;p&gt;My only worry is current users counting on this default for NFS - but if we put it in the back compat break section (a break in regards to NFS anyway), that should be sufficient warning?&lt;/p&gt;</comment>
                    <comment id="12749363" author="creamyg" created="Mon, 31 Aug 2009 04:25:19 +0100"  >&lt;p&gt;&amp;gt; I can see how this is not ideal, but I&apos;m not seeing how any of the &lt;br/&gt;
&amp;gt; mentioned issues apply to our simple lock usage ...&lt;/p&gt;

&lt;p&gt;&quot;Simple lock usage&quot;?!  You must have a bigger brain than me...&lt;/p&gt;

&lt;p&gt;As a matter of fact, I think you&apos;re right.   Fcntl locks have two major&lt;br/&gt;
drawbacks, and upon review I think NativeFSLockFactory avoids both of them.&lt;/p&gt;

&lt;p&gt;The first is that opening and closing a file releases all locks for the entire&lt;br/&gt;
process.  Even if you never request a lock on the second filehandle, or if you&lt;br/&gt;
request a lock and the request is denied, closing the filehandle releases the&lt;br/&gt;
lock on the first filehandle.  But NativeFSLockFactory avoids that problem by&lt;br/&gt;
keeping the HashSet of filepaths and ensuring that the same file is never&lt;br/&gt;
opened twice.  Furthermore, since the lockfiles are private to Lucene, you can&lt;br/&gt;
assume that nobody else is going to open them and inadvertently spoil the lock.&lt;/p&gt;

&lt;p&gt;The second is that child processes spawned via fork() do not inherit locks&lt;br/&gt;
from the parent process.  If you assume that nobody&apos;s ever going to fork a&lt;br/&gt;
Java process, that&apos;s not relevant.  (Too bad that won&apos;t work for Lucy... we&lt;br/&gt;
have to support fork().)&lt;/p&gt;

&lt;p&gt;I think you&apos;re probably safe with Fcntl locks on all non-shared volumes.&lt;/p&gt;</comment>
                    <comment id="12749404" author="markrmiller@gmail.com" created="Mon, 31 Aug 2009 08:37:34 +0100"  >&lt;p&gt;My brain has never been as large as I&apos;d like it to be, but that&apos;s  &lt;br/&gt;
never concerned me too greatly - it&apos;s my ego that I have the trouble  &lt;br/&gt;
with.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.lucidimagination.com&quot; class=&quot;external-link&quot;&gt;http://www.lucidimagination.com&lt;/a&gt; (mobile)&lt;/p&gt;

&lt;p&gt;On Aug 30, 2009, at 11:25 PM, &quot;Marvin Humphrey (JIRA)&quot;  &lt;/p&gt;
</comment>
                    <comment id="12749417" author="mikemccand" created="Mon, 31 Aug 2009 09:13:04 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Let&apos;s do it in the following way:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;deprecated FSDir.getDirectory() methods return the SimpleLockFactory, as it was before.&lt;/li&gt;
	&lt;li&gt;The new FSDir.open() methods and also the direct ctors of SimpleFSDir, MMapFSDir, NIOFSDir default to NativeLocakFactory (these ctors/methods are all new in 2.9)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12749448" author="thetaphi" created="Mon, 31 Aug 2009 10:53:05 +0100"  >&lt;p&gt;Here is a patch, that changes the default for ctor-based / open() based instantiations to use NativeFSLockFactory (in fact, if the supplied param to ctor is NULL). Also change javadocs.&lt;/p&gt;

&lt;p&gt;It also deprecates the static FSDirectory.setDisableLocks() &lt;span class=&quot;error&quot;&gt;&amp;#91;which we should have done already&amp;#93;&lt;/span&gt;. One should simple use a ctor/open with NoLockFactory as param to do that.&lt;/p&gt;

&lt;p&gt;Currently only TestIndexReader fails here on windows because of some strange lockfile-delete opeartions. Maybe the testcase must be updated. I will look into this.&lt;/p&gt;

&lt;p&gt;If we want to go this way, we have to put this in 2.9.&lt;/p&gt;</comment>
                    <comment id="12749449" author="thetaphi" created="Mon, 31 Aug 2009 10:54:59 +0100"  >&lt;p&gt;I will be happy when 3.0 removes all this FSDirectory deprecated stuff. Its a hell to maintain!&lt;/p&gt;</comment>
                    <comment id="12749459" author="mikemccand" created="Mon, 31 Aug 2009 11:49:53 +0100"  >&lt;p&gt;I think we should also fix NativeLockFactory so that if the write lock is in the index dir it doesn&apos;t generate the large digest in the file name.  That digest is problematic when two different machines access the same physical dir via different mount names, since that results in different lock file names.&lt;/p&gt;</comment>
                    <comment id="12749475" author="thetaphi" created="Mon, 31 Aug 2009 13:13:26 +0100"  >&lt;p&gt;With the above patch some more tests are failing, mostly because of the strange lock file names. I think we should fix the tests, at least hardcode the simplelock factory, when it should be tested.&lt;/p&gt;

&lt;p&gt;The backwards-tests seem to pass, as they only use FSDir.getDirectory() which defaults to old standard. That&apos;s good.&lt;/p&gt;</comment>
                    <comment id="12749502" author="markrmiller@gmail.com" created="Mon, 31 Aug 2009 15:03:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;If we want to go this way, we have to put this in 2.9.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d personally be a little (to a lot) afraid to change the default to native during freeze -&lt;/p&gt;</comment>
                    <comment id="12749505" author="thetaphi" created="Mon, 31 Aug 2009 15:10:19 +0100"  >&lt;p&gt;It&apos;s only the default for new code, clearly documented; deprecated code stays as it is.&lt;/p&gt;

&lt;p&gt;If we will not get this into 2.9, 3.0 will remove the deprecated parts and the new code (new in 2.9) will change its defaults.&lt;/p&gt;</comment>
                    <comment id="12749506" author="markrmiller@gmail.com" created="Mon, 31 Aug 2009 15:14:20 +0100"  >&lt;p&gt;Oh, okay, cool - that makes me feel a little better.&lt;/p&gt;

&lt;p&gt;Though new users seeing it as the default now - thats not the worst situation, but I would almost prefer the change go through a dev cycle as the default.&lt;/p&gt;

&lt;p&gt;If others are not feeling as cautious, I wouldn&apos;t vote against.&lt;/p&gt;</comment>
                    <comment id="12750117" author="thetaphi" created="Tue, 1 Sep 2009 22:39:25 +0100"  >&lt;p&gt;As nobody else objects, I will update the tests tomorrow and switch to NativeFSLockFactory for the new ctors and FSDir.open(). The old and deprectated API is unchanged.&lt;/p&gt;

&lt;p&gt;I will also remove the unneeded lock prefix and use the same lock file name as SimpleFSLockFactory. This would also help users mixing both lock factories together (by using deprecated code defaulting to Simple and new code defaulting to Native). The SimpleLockFactory would also detect a lock, if the NativeFSLockFactory created it (because file has same name). The tests will then also pass (which depended on file name).&lt;/p&gt;

&lt;p&gt;Will go to bed now.&lt;/p&gt;</comment>
                    <comment id="12750425" author="thetaphi" created="Wed, 2 Sep 2009 14:10:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should also fix NativeLockFactory so that if the write lock is in the index dir it doesn&apos;t generate the large digest in the file name. That digest is problematic when two different machines access the same physical dir via different mount names, since that results in different lock file names. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The digest problem is not easy to solve: It happens for all LockFactories if they are not automatically created (when LockFactory==null). As soon as you call FSDir.open(..., new SimpleLockFactory(...)) you also get this prefix. It does not appear, when the FSDir is created by FSDir.getDirectory(), as the init() method cleans the lockPrefix directly after setting the lockfactory (the lock factory setter sets the prefix).&lt;/p&gt;

&lt;p&gt;The prefix is only important, if the lock is not placed inside the index directory. The best would be that FSDir would simply return null in getLockId(), when the LockFactory uses the same path as the Directory. For that to work, the LockFactory should have a getter for the fs path.&lt;/p&gt;

&lt;p&gt;I will try some possibilities and post a patch.&lt;/p&gt;</comment>
                    <comment id="12750549" author="thetaphi" created="Wed, 2 Sep 2009 18:28:00 +0100"  >&lt;p&gt;Here is the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SimpleFSLockFactory and NativeFSLockFactory now have the same abstract superclass providing setLockDir and getLockDir. Using this method, it is possible for directory instances to detect, if the locks reside in the directory itsself and so a lock prefix is switched off.&lt;/li&gt;
	&lt;li&gt;The isLocked() bug in NativeFSLockFactory (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1885&quot; title=&quot;NativeFSLockFactory.makeLock(...).isLocked() does not work&quot;&gt;&lt;del&gt;LUCENE-1885&lt;/del&gt;&lt;/a&gt;) is solved by implementing what was described in this issue.&lt;/li&gt;
	&lt;li&gt;aquireTestLock in NativeFSLockFactory was removed from ctor and only called for the first makeLock() call. This prevents the LockFactory from creating the directory when not needed (e.g. opening non-existent index).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have one idea (which is  a new feature): How about providing a ctor to NativeFSLockFactory and SimpleFSLockFactory without param. When this LF is added to a FSDir, it would default to set the LockDir to itsself (if lf.getLockDir()==null) lf.setLockDir(this.directory)). This would prevent users from always giving the directory twice? Any thoughts, I would like to have that.&lt;/p&gt;

&lt;p&gt;Because of the missing lockPrefix for locks inside the directory itsself one backwards test (TestLockFactory) must be changed in backwards-branch, too.&lt;/p&gt;</comment>
                    <comment id="12750552" author="markrmiller@gmail.com" created="Wed, 2 Sep 2009 18:38:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;Any thoughts, I would like to have that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 - def a good idea.&lt;/p&gt;

&lt;p&gt;I&apos;d kind of like to deprecate the sys property to set the lock dir as well - we have done a good job of moving away from that stuff elsewhere.&lt;/p&gt;</comment>
                    <comment id="12750560" author="thetaphi" created="Wed, 2 Sep 2009 18:47:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d kind of like to deprecate the sys property to set the lock dir as well - we have done a good job of moving away from that stuff elsewhere.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is already deprecated and even not used anymore:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * Directory specified by &amp;lt;code&amp;gt;org.apache.lucene.lockDir&amp;lt;/code&amp;gt;
   * or &amp;lt;code&amp;gt;java.io.tmpdir&amp;lt;/code&amp;gt; system property.

   * @deprecated As of 2.1, &amp;lt;code&amp;gt;LOCK_DIR&amp;lt;/code&amp;gt; is unused
   * because the write.lock is now stored by &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; in the
   * index directory.  If you really want to store locks
   * elsewhere you can create your own {@link
   * SimpleFSLockFactory} (or {@link NativeFSLockFactory},
   * etc.) passing in your preferred lock directory.  Then,
   * pass &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &amp;lt;code&amp;gt;LockFactory&amp;lt;/code&amp;gt; instance to one of
   * the &amp;lt;code&amp;gt;getDirectory&amp;lt;/code&amp;gt; methods that take a
   * &amp;lt;code&amp;gt;lockFactory&amp;lt;/code&amp;gt; (&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; example, {@link #getDirectory(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, LockFactory)}).
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; LOCK_DIR = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.lucene.lockDir&quot;&lt;/span&gt;,
                                                           &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;java.io.tmpdir&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12750563" author="markrmiller@gmail.com" created="Wed, 2 Sep 2009 18:52:42 +0100"  >&lt;p&gt;heh - my jetlag is full effect - I wasn&apos;t looking at the lockdir, I was looking at:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; lockClassName = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.getProperty(&lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.lucene.store.FSDirectoryLockFactoryClass&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*edit&lt;/p&gt;

&lt;p&gt;I&apos;m too tired to be emailing - how about deprecating this one though?&lt;/p&gt;</comment>
                    <comment id="12750573" author="thetaphi" created="Wed, 2 Sep 2009 19:08:01 +0100"  >&lt;p&gt;It is indirectly deprecated, as it is only used, when FSDir.getDirectory() is used. In all other cases NativeFSLockFactory is used or the given one. Maybe we should add a note somewhere in javadocs. The same with the default FSDir class property (its also indirectly deprecated.&lt;/p&gt;

&lt;p&gt;I know the code is very ugly, but this is how it works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12750581" author="markrmiller@gmail.com" created="Wed, 2 Sep 2009 19:16:57 +0100"  >&lt;p&gt;Interesting - yeah, its hard to follow it all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I havn&apos;t had a chance to apply and look at your patch either.&lt;/p&gt;

&lt;p&gt;My main issue with it is that there a bunch of places where it says you can set the lock factory that way (not in deprecated javadoc sections). We should prob remove all those.&lt;/p&gt;</comment>
                    <comment id="12750588" author="mikemccand" created="Wed, 2 Sep 2009 19:25:40 +0100"  >&lt;p&gt;Patch looks good!  I like the deprecation of FSDir.set/getDisableLocks and the new FSLockFactory approach.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we should add a note somewhere in javadocs. The same with the default FSDir class property (its also indirectly deprecated&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I think we should deprecate these global system properties.&lt;/p&gt;</comment>
                    <comment id="12750632" author="thetaphi" created="Wed, 2 Sep 2009 20:51:45 +0100"  >&lt;p&gt;Final patch.&lt;/p&gt;

&lt;p&gt;I implemented additional:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;all FS-based lock factories use the same prefix encoding. They are now (mostly) compatible. E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory.&lt;/li&gt;
	&lt;li&gt;Added LockFactory ctors with no param. The FSDir will set the lockdir to itsself in this case.&lt;/li&gt;
	&lt;li&gt;Added test for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1885&quot; title=&quot;NativeFSLockFactory.makeLock(...).isLocked() does not work&quot;&gt;&lt;del&gt;LUCENE-1885&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Added note about deprecation of all FSDir related system properties, fixed some docs&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Please test this extensively! I hope, I found all problems.&lt;/p&gt;</comment>
                    <comment id="12750646" author="mikemccand" created="Wed, 2 Sep 2009 21:26:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is neat, but I don&apos;t think we should advertise it?&lt;/p&gt;

&lt;p&gt;Ie, it&apos;s unsupported to mix different LockFactory impls.  EG, in this case, the reverse is not true, right?&lt;/p&gt;</comment>
                    <comment id="12750650" author="thetaphi" created="Wed, 2 Sep 2009 21:37:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;This is neat, but I don&apos;t think we should advertise it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Definitely not.&lt;/p&gt;

&lt;p&gt;b.q. Ie, it&apos;s unsupported to mix different LockFactory impls. EG, in this case, the reverse is not true, right?&lt;/p&gt;

&lt;p&gt;Exactly.&lt;/p&gt;</comment>
                    <comment id="12750655" author="mikemccand" created="Wed, 2 Sep 2009 21:46:57 +0100"  >&lt;p&gt;Patch looks good!  Don&apos;t forget to fix back compat tests.&lt;/p&gt;</comment>
                    <comment id="12750664" author="thetaphi" created="Wed, 2 Sep 2009 22:04:07 +0100"  >&lt;p&gt;Yes, I already prepared the BW test change (i simply disabled this test with the lock prefix).&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;all FS-based lock factories use the same prefix encoding. They are now (mostly) compatible. E.g. a lock obtained with NativeFSLockFactory would also be seen as locked with SimpleFSLockFactory&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ie, it&apos;s unsupported to mix different LockFactory impls. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One important fact, because I enabled this: The deprecated methods in IndexWriter/IndexReader taking String/File args and FSDirectory.getDirectory() still use the SimpleFSLockFactory per default (or the system property). If some use mixes these deprecated calls with e.g. FSDir.open() he has still a chance to get locking work. But it is unsupported. I also added a extra note in the CHANGES.txt now, that warns because of this trap.&lt;/p&gt;</comment>
                    <comment id="12750839" author="thetaphi" created="Thu, 3 Sep 2009 07:15:20 +0100"  >&lt;p&gt;Formatting changes in CHANGES.txt and some minor tweaks.&lt;/p&gt;

&lt;p&gt;Also changed the isLocked() method for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1885&quot; title=&quot;NativeFSLockFactory.makeLock(...).isLocked() does not work&quot;&gt;&lt;del&gt;LUCENE-1885&lt;/del&gt;&lt;/a&gt; to shortcut, if no lock file is present. In this case, without a lockfile it may also be not locked. This prevent NativeFSLock for creating the lock short time without really using it.&lt;/p&gt;

&lt;p&gt;It would be good, if somebody could also test this with strange file systems. I only tested Windows and Solaris&lt;/p&gt;</comment>
                    <comment id="12751190" author="thetaphi" created="Thu, 3 Sep 2009 23:05:39 +0100"  >&lt;p&gt;I will commit soon!&lt;/p&gt;</comment>
                    <comment id="12751195" author="thetaphi" created="Thu, 3 Sep 2009 23:18:07 +0100"  >&lt;p&gt;Committed revision: 811157&lt;/p&gt;</comment>
                    <comment id="12780540" author="tmueller" created="Fri, 20 Nov 2009 13:01:30 +0000"  >&lt;p&gt;FYI: other Java projects also implement exclusive locking, and automatic removal of such a file. &lt;/p&gt;

&lt;p&gt;Apache Jackrabbit uses FileChannel.lock() by default, but there are problems with some NFS implementations (some don&apos;t release the lock after restart, some don&apos;t support locks at all). Also, some operating systems / file systems allow multiple write locks within the same process (possibly in different class loaders). Jackrabbit works around that by (mis-)using a system property. See &lt;a href=&quot;http://wiki.apache.org/jackrabbit/RepositoryLock&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/jackrabbit/RepositoryLock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the H2 Database Engine I implemented a cooperative locking mechanism: &lt;a href=&quot;http://www.h2database.com/html/advanced.html#file_locking_protocols&quot; class=&quot;external-link&quot;&gt;http://www.h2database.com/html/advanced.html#file_locking_protocols&lt;/a&gt; - I have also ported that to Apache Jackrabbit (&quot;Cooperative File Lock Mechanism&quot;). It always works, but needs a background thread. H2 also supports a mechanism based on a server socket (open a server socket and write the IP address and port to the file) - but this is problematic if the network is misconfigured (localhost not bound to 127.0.0.1 and such) which does happen in practice.&lt;/p&gt;</comment>
                    <comment id="12780647" author="creamyg" created="Fri, 20 Nov 2009 16:55:18 +0000"  >&lt;p&gt;&amp;gt; &lt;a href=&quot;http://www.h2database.com/html/advanced.html#file_locking_protocols&quot; class=&quot;external-link&quot;&gt;http://www.h2database.com/html/advanced.html#file_locking_protocols&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m a little concerned about the suitability of the polling approach for a&lt;br/&gt;
low-level library like Lucene &amp;#8211; shouldn&apos;t active code like that live in the&lt;br/&gt;
application layer?  Is it possible to exceed the polling interval for a low&lt;br/&gt;
priority process on a system under heavy load?  What happens when the app&lt;br/&gt;
sleeps?&lt;/p&gt;

&lt;p&gt;For removing stale lock files, another technique is to incorporate the host&lt;br/&gt;
name and the pid.  So long as you can determine that the lock file belongs to&lt;br/&gt;
your machine and that the PID is not active, you can safely zap it.&lt;/p&gt;

&lt;p&gt;Then tricky bit is how you get that information into the lock file.  If you&lt;br/&gt;
try to write that info to the lock file itself after an O_EXCL open, creating&lt;br/&gt;
a fully valid lock file is no longer an atomic operation.  &lt;/p&gt;

&lt;p&gt;The approach suggested by the creat(2) man page and endorsed in the Linux NFS&lt;br/&gt;
FAQ involves hard links:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    The solution for performing atomic file locking using a lockfile
    is to create a unique file on the same file system (e.g.,
    incorporating hostname and pid), use link(2) to make a link to the
    lockfile. If link() returns 0, the lock is successful. Otherwise,
    use stat(2) on the unique file to check if its link count has
    increased to 2, in which case the lock is also successful. 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach should also work on Windows for NTFS file systems since Windows&lt;br/&gt;
2000 thanks to the CreateHardLink() function.  (Samba file shares, you&apos;re out&lt;br/&gt;
of luck.)  However, I&apos;m not sure about the state of support for hard links in&lt;br/&gt;
Java.&lt;/p&gt;

&lt;p&gt;If you&apos;re interested in continuing this discussion, we should probably take it&lt;br/&gt;
somewhere other than this closed issue.&lt;/p&gt;</comment>
                    <comment id="12781111" author="tmueller" created="Sun, 22 Nov 2009 10:35:49 +0000"  >&lt;p&gt;&amp;gt; take it somewhere other than this closed issue.&lt;/p&gt;

&lt;p&gt;Yes, where?&lt;/p&gt;

&lt;p&gt;&amp;gt; shouldn&apos;t active code like that live in the application layer?&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;&amp;gt; exceed the polling interval for a low priority process on a system under heavy load?&lt;/p&gt;

&lt;p&gt;The watchdog thread runs with high priority (see the H2 docs). It&apos;s still possible the thread isn&apos;t run at all, but highly unlikely. High priority threads are quite reliable. I wrote a MP3 player in Java (mp3transform) which I used a lot, I never heard any gaps. If the thread can be avoided, that would be great of course. I&apos;m just trying to say that in theory, the thread is problematic, but in practice it isn&apos;t. While file locking is not a problem in theory, but in practice.&lt;/p&gt;

&lt;p&gt;&amp;gt; What happens when the app sleeps?&lt;/p&gt;

&lt;p&gt;Good question! Standby / hibernate are not supported. I didn&apos;t think about that. Is there a way to detect the wakeup?&lt;/p&gt;

&lt;p&gt;&amp;gt; host name and the pid&lt;/p&gt;

&lt;p&gt;Yes. It is not so easy to get the PID in Java, I found: &lt;a href=&quot;http://stackoverflow.com/questions/35842/process-id-in-java&quot; class=&quot;external-link&quot;&gt;http://stackoverflow.com/questions/35842/process-id-in-java&lt;/a&gt; &quot;ManagementFactory.getRuntimeMXBean().getName()&quot;. What do you do if the lock was generated by another machine? I tried with using a server socket, so you need the IP address, but unfortunately, sometimes the network is not configured correctly (but maybe it&apos;s possible to detect that). Maybe the two machines can&apos;t access each other over TCP/IP.&lt;/p&gt;

&lt;p&gt;&amp;gt; hard links&lt;/p&gt;

&lt;p&gt;Yes, but it looks like this doesn&apos;t work always.&lt;/p&gt;
</comment>
                    <comment id="12781113" author="tmueller" created="Sun, 22 Nov 2009 10:38:51 +0000"  >&lt;p&gt;&amp;gt; detect the wakeup / polling interval exceeded&lt;/p&gt;

&lt;p&gt;An obvious solution is to use System.currentTimeMillis() and compare with the expected delay. And then stop writing and throw a exception.&lt;/p&gt;</comment>
                    <comment id="12781531" author="creamyg" created="Mon, 23 Nov 2009 18:40:13 +0000"  >&lt;p&gt;&amp;gt;&amp;gt; take it somewhere other than this closed issue.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Yes, where?&lt;/p&gt;

&lt;p&gt;The java-dev list: &lt;a href=&quot;http://markmail.org/message/ivdgmxrivs3jzhfe&quot; class=&quot;external-link&quot;&gt;http://markmail.org/message/ivdgmxrivs3jzhfe&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13029373" author="gregtarr" created="Thu, 5 May 2011 16:33:42 +0100"  >&lt;p&gt;A previous comment read: &quot;My only worry is current users counting on this default for NFS - but if we put it in the back compat break section (a break in regards to NFS anyway), that should be sufficient warning?&quot;&lt;/p&gt;

&lt;p&gt;We use NFS with Lucene 2.9.4, and we have just noticed the change to NativeFSLockFactory in 2.9. Despite the above comment, it was missing from the 2.9.0 changes.txt. Unfortunately using it has led to index corruptions on several occasions.&lt;/p&gt;

&lt;p&gt;Please can everyone ensure that changes like this make the changes.txt file so that users can properly impact assess upgrades to new versions.&lt;/p&gt;</comment>
                    <comment id="13029430" author="mikemccand" created="Thu, 5 May 2011 17:55:21 +0100"  >&lt;p&gt;Uggggggh, sorry about that Greg.  Somehow this obviously very important note was lost in this issue.&lt;/p&gt;

&lt;p&gt;Can you describe how you use NFS and Lucene?  Is there a single machine writing to the NFS dir, or more than one?&lt;/p&gt;</comment>
                    <comment id="13029599" author="gregtarr" created="Thu, 5 May 2011 22:54:03 +0100"  >&lt;p&gt;Instances of lucene run on machines with the indexes hosted remotely on a SAN with access through a fileserver. We&apos;ve now changed our implementation to SimpleFSLockFactory in the hope this will lead to the write.lock files behaving properly.&lt;/p&gt;</comment>
                    <comment id="13029654" author="mikemccand" created="Fri, 6 May 2011 00:38:12 +0100"  >&lt;p&gt;But multiple machines are able to write to the same index on the SAN?  (And must therefore rely on write.lock to protect the index from two writers at once).&lt;/p&gt;

&lt;p&gt;What corruption are you seeing...?&lt;/p&gt;</comment>
                    <comment id="13036142" author="gregtarr" created="Thu, 19 May 2011 13:17:00 +0100"  >&lt;p&gt;Yes, we have multiple machines being able to write to the same index on the SAN. &lt;/p&gt;</comment>
                    <comment id="13036289" author="mikemccand" created="Thu, 19 May 2011 17:47:11 +0100"  >&lt;p&gt;OK.  I would strongly recommend using the lock stress test (LockStressTest/LockVerifyServer) in Lucene to verify whichever locking you&apos;re trying is in fact working properly.&lt;/p&gt;</comment>
                    <comment id="13102178" author="noreply@nabble.com" created="Sun, 11 Sep 2011 00:35:09 +0100"  >&lt;p&gt;Dear JIRA jira@apache.org,&lt;/p&gt;

&lt;p&gt;Please fix the embedding code of your Nabble application &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; Commented: (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1877&quot; title=&quot;Use NativeFSLockFactory as default for new API (direct ctors &amp;amp; FSDir.open)&quot;&gt;&lt;del&gt;LUCENE-1877&lt;/del&gt;&lt;/a&gt;) Use NativeFSLockFactory as default for new API (direct ctors &amp;amp; FSDir.open)&quot; as soon as possible because Nabble will stop supporting that code in a few days. Here is the code you should use in your HTML page:&lt;/p&gt;

&lt;p&gt;&amp;lt;a id=&quot;nabblelink&quot; href=&quot;http://lucene.472066.n3.nabble.com/jira-Created-LUCENE-1877-Improve-IndexWriter-javadoc-on-locking-tp574303p574326.html&quot;&amp;gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; Commented: (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1877&quot; title=&quot;Use NativeFSLockFactory as default for new API (direct ctors &amp;amp; FSDir.open)&quot;&gt;&lt;del&gt;LUCENE-1877&lt;/del&gt;&lt;/a&gt;) Use NativeFSLockFactory as default for new API (direct ctors &amp;amp; FSDir.open)&amp;lt;/a&amp;gt;&lt;br/&gt;
&amp;lt;script src=&quot;http://&lt;a href=&quot;http://lucene.472066.n3.nabble.com/embed/f574326&quot; class=&quot;external-link&quot;&gt;http://lucene.472066.n3.nabble.com/embed/f574326&lt;/a&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/p&gt;

&lt;p&gt;Here is the link to your application:&lt;br/&gt;
&lt;a href=&quot;http://lucene.472066.n3.nabble.com/jira-Created-LUCENE-1877-Improve-IndexWriter-javadoc-on-locking-tp574303p574326.html&quot; class=&quot;external-link&quot;&gt;http://lucene.472066.n3.nabble.com/jira-Created-LUCENE-1877-Improve-IndexWriter-javadoc-on-locking-tp574303p574326.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don&apos;t update your HTML page, the embedded application will stop working. Note that we won&apos;t send more emails about this issue and we apologize for the inconvenience.&lt;/p&gt;

&lt;p&gt;Sincerely,&lt;br/&gt;
The Nabble team&lt;/p&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12434648">LUCENE-1885</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12418476" name="LUCENE-1877.patch" size="23944" author="thetaphi" created="Thu, 3 Sep 2009 07:15:20 +0100" />
                    <attachment id="12418425" name="LUCENE-1877.patch" size="23004" author="thetaphi" created="Wed, 2 Sep 2009 20:51:45 +0100" />
                    <attachment id="12418409" name="LUCENE-1877.patch" size="17932" author="thetaphi" created="Wed, 2 Sep 2009 18:28:00 +0100" />
                    <attachment id="12418129" name="LUCENE-1877.patch" size="5187" author="thetaphi" created="Mon, 31 Aug 2009 10:53:05 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 30 Aug 2009 18:34:04 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11887</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25850</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>