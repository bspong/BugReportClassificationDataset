<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:50 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1001/LUCENE-1001.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1001] Add Payload retrieval to Spans</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1001</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;It will be nice to have access to payloads when doing SpanQuerys.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-dev/52270&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-dev/52270&lt;/a&gt; and &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-dev/51134&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-dev/51134&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Current API, added to Spans.java is below.  I will try to post a patch as soon as I can figure out how to make it work for unordered spans (I believe I have all the other cases working).&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; /**
   * Returns the payload data for the current span.
   * This is invalid until {@link #next()} is called for
   * the first time.
   * This method must not be called more than once after each call
   * of {@link #next()}. However, payloads are loaded lazily,
   * so if the payload data for the current position is not needed,
   * this method may not be called at all for performance reasons.&amp;lt;br&amp;gt;
   * &amp;lt;br&amp;gt;
   * &amp;lt;p&amp;gt;&amp;lt;font color=&quot;#FF0000&quot;&amp;gt;
   * WARNING: The status of the &amp;lt;b&amp;gt;Payloads&amp;lt;/b&amp;gt; feature is experimental.
   * The APIs introduced here might change in the future and will not be
   * supported anymore in such a case.&amp;lt;/font&amp;gt;
   *
   * @return a List of byte arrays containing the data of this payload
   * @throws IOException
   */
  // TODO: Remove warning after API has been finalized
  List/*&amp;lt;byte[]&amp;gt;*/ getPayload() throws IOException;

  /**
   * Checks if a payload can be loaded at this position.
   * &amp;lt;p/&amp;gt;
   * Payloads can only be loaded once per call to
   * {@link #next()}.
   * &amp;lt;p/&amp;gt;
   * &amp;lt;p&amp;gt;&amp;lt;font color=&quot;#FF0000&quot;&amp;gt;
   * WARNING: The status of the &amp;lt;b&amp;gt;Payloads&amp;lt;/b&amp;gt; feature is experimental.
   * The APIs introduced here might change in the future and will not be
   * supported anymore in such a case.&amp;lt;/font&amp;gt;
   *
   * @return true if there is a payload available at this position that can be loaded
   */
  // TODO: Remove warning after API has been finalized
  public boolean isPayloadAvailable();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
            <key id="12378356">LUCENE-1001</key>
            <summary>Add Payload retrieval to Spans</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="gsingers">Grant Ingersoll</assignee>
                                <reporter username="gsingers">Grant Ingersoll</reporter>
                        <labels>
                    </labels>
                <created>Sun, 16 Sep 2007 03:48:05 +0100</created>
                <updated>Fri, 21 Nov 2008 21:46:21 +0000</updated>
                    <resolved>Wed, 20 Aug 2008 17:07:15 +0100</resolved>
                                            <fixVersion>2.4</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12527837" author="paul.elschot@xs4all.nl" created="Sun, 16 Sep 2007 09:49:45 +0100"  >&lt;p&gt;Could you put this in a subclass of Spans?&lt;/p&gt;

&lt;p&gt;A little while ago I suggested to add a score() method to Spans to summarize the influence of subspans on the span score, and that would be another direction for a subclass.&lt;/p&gt;</comment>
                    <comment id="12527855" author="gsingers" created="Sun, 16 Sep 2007 13:07:03 +0100"  >&lt;p&gt;Do you mean in a separate interface?  I suppose I should for backward compatibility so that people with existing Span implementations outside of Lucene aren&apos;t broken.&lt;/p&gt;</comment>
                    <comment id="12527856" author="gsingers" created="Sun, 16 Sep 2007 13:11:15 +0100"  >&lt;p&gt;This also blurs the line more between payloads and Spans, I suggest we drop the payloads package and move the BoostingTermQuery into the Spans package.  I originally thought there would be more distinction between the two packages, but that seems less likely now.&lt;/p&gt;

&lt;p&gt;Since payloads are still marked as experimental, does anyone see a problem with moving it?  I suppose it could be deprecated and copied since it has been released.&lt;/p&gt;</comment>
                    <comment id="12527863" author="paul.elschot@xs4all.nl" created="Sun, 16 Sep 2007 15:03:56 +0100"  >&lt;p&gt;My mistake, I thought Spans was an abstract class, but it is an interface.&lt;br/&gt;
That also means that Spans should not be changed at all, interfaces are forever.&lt;/p&gt;

&lt;p&gt;Something like this could do nicely:&lt;/p&gt;

&lt;p&gt;public interface PayloadSpans extends Spans {&lt;br/&gt;
// as above&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;I&apos;d prefer the payload &quot;core&quot; classes to stay in their own package search/payload&lt;br/&gt;
because they may well turn out to be useful in other circumstances, for example&lt;br/&gt;
as a way to avoid disjunctions with many terms.&lt;br/&gt;
At the moment I have no preference for a package for the PayloadSpans above,&lt;br/&gt;
it could be search.spans or search.payloads.&lt;/p&gt;</comment>
                    <comment id="12536872" author="gsingers" created="Tue, 23 Oct 2007 01:29:29 +0100"  >&lt;blockquote&gt;
&lt;p&gt;public interface PayloadSpans extends Spans &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: { // as above }&lt;/span&gt; &lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this is problematic too, unfortunately, since many spans actually contain other spans, so there is no way to safely cast even in the internal implementations.&lt;/p&gt;

&lt;p&gt;Alternative might be to add SpanQuery.getPayloadSpans() but that is ugly, too.&lt;/p&gt;

&lt;p&gt;I wish there was an equivalent way to deprecated that allowed one to tell people new methods are coming, but that won&apos;t break the existing interface.  Semantics of it would need to be figured out, but it would be useful here to just be able to let people know that we want to add to the Spans interface, but they just get a warning when compiling until we make it official.&lt;/p&gt;

&lt;p&gt;I suppose the right thing to do if we really want this to work is to deprecate Spans and SpanQuery.getSpans() and introduce a new form of Spans (maybe as an abstract class this time?)&lt;/p&gt;

&lt;p&gt;Or am I missing something that provides a clearer way of doing this?&lt;/p&gt;</comment>
                    <comment id="12537082" author="paul.elschot@xs4all.nl" created="Tue, 23 Oct 2007 18:17:56 +0100"  >&lt;p&gt;I think I would just go ahead and create a parallel class hierarchy starting from class PayloadSpanQuery with a getPayloadSpans() method, and try and use delegation to the various SpanQueries and their Spans as much as possible.&lt;br/&gt;
That means you would end up with this a few times:&lt;/p&gt;

&lt;p&gt;return new PayLoadSpans () {&lt;br/&gt;
   Spans delegatedTo = aFinalSpans;&lt;br/&gt;
   .... some Spans methods directly delegated...&lt;br/&gt;
};&lt;/p&gt;

&lt;p&gt;When this delegation happens too often, it  could even be factored out into its own superclass.&lt;br/&gt;
If the delegation turns out to be a performance problem it might be inlined, but that would mean code duplication.&lt;/p&gt;

&lt;p&gt;For the rest, in case you need some existing SpanQuery private methods you could change them to package private, and move your classes to the search.spans package for that reason.&lt;/p&gt;</comment>
                    <comment id="12543640" author="gsingers" created="Mon, 19 Nov 2007 19:10:25 +0000"  >&lt;p&gt;Paul,&lt;/p&gt;

&lt;p&gt;I think I have this implemented for the most part, but am having trouble with the NearSpansUnordered.  Can you enlighten me to the use of the PriorityQueue in the file?  Not saying its wrong, just saying I don&apos;t understand what&apos;s going on.  Also wondering about how it relates to the ordered member and the first and last SpansCell.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Grant&lt;/p&gt;</comment>
                    <comment id="12543692" author="paul.elschot@xs4all.nl" created="Mon, 19 Nov 2007 21:08:15 +0000"  >&lt;p&gt;I only wrote NearSpansOrdered. NearSpansOrdered is what is left of the original NearSpans after the ordered case was taken out, and after I specialized NearSpans the unordered case. That means I only simplified the original NearSpans.&lt;/p&gt;

&lt;p&gt;Off the top of my head: the priority queue is used to make sure that the Spans are processed by increasing doc numbers and increasing token positions; the first and the last Spans determine whether there is a match, and all other Spans (in the queue) are &quot;in between&quot;.&lt;/p&gt;

&lt;p&gt;I think you&apos;ll only need to implement the Spans interface to use the same priority queue,&lt;br/&gt;
and you&apos;ll have to come up with a way to collect all the payloads from your payload spans on a match.&lt;br/&gt;
Probably fairly straightforward, but with Spans there is always unexpected fun waiting around the next corner &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="12543696" author="gsingers" created="Mon, 19 Nov 2007 21:16:19 +0000"  >&lt;p&gt;I have it implemented for the Ordered case (and all other Spans) but will need to dig in deeper for the unordered case.  Worst case, I can pop the queue from min() to max, but I then have to reconstruct the queue and that doesn&apos;t seem good.  Hopefully, I can dig in soon, as I would like to get this in 2.3 along with the other Payload stuff we are discussing since it sounds like that API is firming up.&lt;/p&gt;</comment>
                    <comment id="12543722" author="paul.elschot@xs4all.nl" created="Mon, 19 Nov 2007 22:54:24 +0000"  >&lt;p&gt;So far, it&apos;s easier than that: when they match, they all match, so you only need to keep the input Spans around in List or whatever. Then use them all as a source for your payloads.&lt;/p&gt;</comment>
                    <comment id="12543915" author="gsingers" created="Tue, 20 Nov 2007 15:03:55 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Off the top of my head: the priority queue is used to make sure that the Spans are processed by increasing doc numbers and increasing token positions; the first and the last Spans determine whether there is a match, and all other Spans (in the queue) are &quot;in between&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Would it be simpler to just use a SortedSet?  Then we could iterate w/o losing the sort, right?  Would this be faster since we wouldn&apos;t have to do the heap operations?&lt;/p&gt;</comment>
                    <comment id="12544029" author="cutting" created="Tue, 20 Nov 2007 19:50:54 +0000"  >&lt;p&gt;&amp;gt; Would it be simpler to just use a SortedSet?&lt;/p&gt;

&lt;p&gt;TreeMap is slower than a PriorityQueue for this.  With PriorityQueue, insertions and deletions do not allocate new objects.  And, if some items are much more frequent than others, using adjustTop() instead of inserting and deleting makes merges run much faster, since most updates are then considerably faster than log&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;19&quot; width=&quot;19&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="12544105" author="gsingers" created="Tue, 20 Nov 2007 22:46:57 +0000"  >&lt;p&gt;Sure, but how do I get access to the position payloads in the order that they occur in the PQ?  I have to go and pop them all of the PQ or I need to maintain a separate PQ for the Payloads so that when I go to get a payload for a span, I can iterate over all the items by calling PQ.pop() but then I have to rebuild it again if getPayload is called again, right?&lt;/p&gt;

&lt;p&gt;I think I need to take a break and come back to this after some Turkey...  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12544532" author="cutting" created="Wed, 21 Nov 2007 17:37:59 +0000"  >&lt;p&gt;&amp;gt; how do I get access to the position payloads in the order that they occur in the PQ?&lt;/p&gt;

&lt;p&gt;Why do you need them in that order?  In the API you propose in the description of this issue, there&apos;s no clear association between the payloads returned  and the query terms.  So I don&apos;t yet see how the order of the payloads is useful.&lt;/p&gt;

&lt;p&gt;You could pretty easily return the list of payloads along with their positions by iterating through the list of sub-queries.  The problem is that providing that sorted by position is expensive.  Perhaps you could leave any such sorting, if required, to the application?&lt;/p&gt;</comment>
                    <comment id="12545268" author="gsingers" created="Sun, 25 Nov 2007 14:20:29 +0000"  >&lt;p&gt;Yeah, I was thinking this as a possibility, but thought people may want to rely on the ordering, even if they mark it as unordered.  I guess I will just have to properly document it, b/c I agree it is expensive to sort.&lt;/p&gt;

&lt;p&gt;I will submit a patch shortly.&lt;/p&gt;</comment>
                    <comment id="12545285" author="gsingers" created="Sun, 25 Nov 2007 17:52:40 +0000"  >&lt;p&gt;First draft of a patch for this issue.  Need to expand/double check the tests and cleanup a few things before committing, but wanted to get opinion on the API.&lt;/p&gt;

&lt;p&gt;Also, would like to see if NearSpansOrdered can be optimized a bit to not load the payloads in the case where the user doesn&apos;t ask for PayloadSpans.  The other implementations shouldn&apos;t have this issue.&lt;/p&gt;</comment>
                    <comment id="12545419" author="gsingers" created="Mon, 26 Nov 2007 12:06:59 +0000"  >&lt;p&gt;There is an issue w/ this patch related to unordered, overlapping spans that still needs to be fixed.  Will try to get an updated patch out soon.&lt;/p&gt;</comment>
                    <comment id="12545461" author="gsingers" created="Mon, 26 Nov 2007 14:26:22 +0000"  >&lt;p&gt;Fixes the unordered problem.  Still needs more testing, but I believe it is working&lt;/p&gt;</comment>
                    <comment id="12593370" author="gsingers" created="Wed, 30 Apr 2008 17:32:57 +0100"  >&lt;p&gt;I don&apos;t think that patch is compatible w/ anything &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;   It was a  &lt;br/&gt;
rough sketch that never properly worked.  I put it up there in the  &lt;br/&gt;
hopes that maybe someone would have some more insight to offer.&lt;/p&gt;




&lt;p&gt;--------------------------&lt;br/&gt;
Grant Ingersoll&lt;/p&gt;

&lt;p&gt;Lucene Helpful Hints:&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/lucene-java/BasicsOfPerformance&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/lucene-java/BasicsOfPerformance&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://wiki.apache.org/lucene-java/LuceneFAQ&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/lucene-java/LuceneFAQ&lt;/a&gt;&lt;/p&gt;





</comment>
                    <comment id="12621156" author="markrmiller@gmail.com" created="Sat, 9 Aug 2008 17:57:40 +0100"  >&lt;p&gt;Anyone still have a use case for this issue?&lt;/p&gt;

&lt;p&gt;Here is a patch that I think fixes the orderedspans problem - need to test further, but that may be the last piece on those parts.&lt;/p&gt;

&lt;p&gt;Beyond that, I think that a span uses only one clause to determine if a payload is available for the whole span - it seems to me we have to ask every clause.&lt;/p&gt;

&lt;p&gt;As far as the ordering of returned payloads, I don&apos;t see how they can be ordered by the user without having some info in the payload itself - I mean its just going to be a collection of byte arrays right? How could you order them? Seems at most you can say those payloads came from the given span and use them all.&lt;/p&gt;

&lt;p&gt;The more I look at spans the less I understand them I think &amp;lt;g&amp;gt; Its like repeating certain words over and over.&lt;/p&gt;</comment>
                    <comment id="12621157" author="markrmiller@gmail.com" created="Sat, 9 Aug 2008 18:02:27 +0100"  >&lt;p&gt;Without the absolute paths in the patch this time (get it together eclipse)&lt;/p&gt;</comment>
                    <comment id="12621209" author="markrmiller@gmail.com" created="Sun, 10 Aug 2008 04:47:11 +0100"  >&lt;p&gt;Fixes the unorderedspan ispostionavailable issue for good measure.&lt;/p&gt;

&lt;p&gt;I think we have to give the payloads back unsorted - there are probably cases where you could just use all the payloads for a span rather than per term, so we might as well not incur a penalty there. If you need per term, you can put the position into the payload (pretty simple) and then just sort yourself.&lt;/p&gt;</comment>
                    <comment id="12621321" author="markrmiller@gmail.com" created="Mon, 11 Aug 2008 00:46:24 +0100"  >&lt;p&gt;I&apos;ll correct it if I have anything to add later, but the new isPayloadAvailable on the unordered spans should start at min(), not first.&lt;/p&gt;</comment>
                    <comment id="12621332" author="markrmiller@gmail.com" created="Mon, 11 Aug 2008 02:22:27 +0100"  >&lt;p&gt;Might as well keep striking while the iron&apos;s hot. This fixes the first to min() issue, I think it adds an isSpansAvailable call that had been commented out, adds a couple tests, tightens a test, and adds a new class that takes a single document and returns all of payloads from the terms that match a given Query object (so you could do a mix of span/query) - may or may not be useful someday.&lt;/p&gt;</comment>
                    <comment id="12621578" author="gsingers" created="Mon, 11 Aug 2008 21:22:26 +0100"  >&lt;p&gt;TestBoostingTermQuery.testNoPayload now fails for me.&lt;/p&gt;

&lt;p&gt;Also noticed some extraneous System.out.println.&lt;/p&gt;</comment>
                    <comment id="12621595" author="markrmiller@gmail.com" created="Mon, 11 Aug 2008 21:56:03 +0100"  >&lt;p&gt;I see what happened with the boosting test - the old patch didn&apos;t apply cleanly for me to the trunk for that test class - I looked for the issue but it looked clean so I left it to deal with later - turns out one or two lines were mangled. New patch that fixes that.&lt;/p&gt;

&lt;p&gt;Also turned off DEBUG for the payloads test class so that will drop the System.outs.&lt;/p&gt;

&lt;p&gt;Pretty clean now.&lt;/p&gt;</comment>
                    <comment id="12623686" author="gsingers" created="Tue, 19 Aug 2008 15:39:30 +0100"  >&lt;p&gt;Added to CHANGES.txt&lt;/p&gt;

&lt;p&gt;Made the SpanQuery.getPayloadSpans() method an empty implementation that returns null instead of being abstract, so as not to break anyone that extends SpanQuery.   All Lucene span implementations override it.&lt;/p&gt;

&lt;p&gt;Also added in license headers.&lt;/p&gt;

&lt;p&gt;Plan to commit in a day or two&lt;/p&gt;</comment>
                    <comment id="12623818" author="markrmiller@gmail.com" created="Tue, 19 Aug 2008 22:43:58 +0100"  >&lt;p&gt;Took one last look through for final cleanup - removed an unused import and some unneeded commented code.&lt;/p&gt;</comment>
                    <comment id="12624034" author="gsingers" created="Wed, 20 Aug 2008 17:07:15 +0100"  >&lt;p&gt;Committed revision 687379.&lt;/p&gt;</comment>
                    <comment id="12647965" author="joma" created="Sun, 16 Nov 2008 13:15:25 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I use getPayloadSpans to get the spans (PayloadSpans spans = sq.getPayloadSpans(this.getIndexReader())&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and for each span I extract the relevant payload using spans.getPayload() (after calling spans.next()).&lt;/p&gt;

&lt;p&gt;I have tested it for a SpanNearQuery, I have stored the offset in the payload (for testing). &lt;/p&gt;

&lt;p&gt;It seems to me that the payloads returned for the span (spans.getPayload()) does not match the current span (given by span.next()). In fact, the offset returned by the payload are different from the offset returned by span.start().&lt;br/&gt;
It occurs when they are multiple occurrences of the terms. &lt;/p&gt;

&lt;p&gt;Are you aware of this bug?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan &lt;/p&gt;</comment>
                    <comment id="12647970" author="markrmiller@gmail.com" created="Sun, 16 Nov 2008 13:29:13 +0000"  >&lt;p&gt;So are you finding the payloads not at the right term if the terms match ie&lt;/p&gt;

&lt;p&gt;term1 term2 term1&lt;/p&gt;

&lt;p&gt;You might get the second term1&apos;s offsets for the first term1 and vice versa?&lt;/p&gt;</comment>
                    <comment id="12647978" author="joma" created="Sun, 16 Nov 2008 14:12:26 +0000"  >&lt;p&gt;In my document, I have &quot;.... term1 ... term1 term2 ...&quot;&lt;br/&gt;
offset of term1: 10, 20&lt;br/&gt;
offset of term2: 21&lt;/p&gt;

&lt;p&gt;When running the query SpanNearQuery(term1 term2), &lt;br/&gt;
according to span.start, I get 20  &lt;br/&gt;
while I get 10 and 21 when reading the payloads of the span.&lt;br/&gt;
I would expect to get 20 and 21when reading the payloads of the span.&lt;/p&gt;</comment>
                    <comment id="12648259" author="joma" created="Mon, 17 Nov 2008 19:11:55 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Here is the relevant code. &lt;/p&gt;

&lt;p&gt;I would expect to obtain&lt;br/&gt;
10&lt;br/&gt;
pos: 10&lt;br/&gt;
pos: 11&lt;/p&gt;

&lt;p&gt;while I obtain&lt;br/&gt;
10&lt;br/&gt;
pos: 0&lt;br/&gt;
pos: 11&lt;/p&gt;




&lt;p&gt;import java.io.StringReader;&lt;br/&gt;
import java.util.Collection;&lt;br/&gt;
import java.util.Iterator;&lt;/p&gt;

&lt;p&gt;import org.apache.lucene.document.Document;&lt;br/&gt;
import org.apache.lucene.document.Field;&lt;br/&gt;
import org.apache.lucene.index.IndexWriter;&lt;br/&gt;
import org.apache.lucene.index.Term;&lt;br/&gt;
import org.apache.lucene.search.IndexSearcher;&lt;br/&gt;
import org.apache.lucene.search.TopDocs;&lt;br/&gt;
import org.apache.lucene.search.spans.PayloadSpans;&lt;br/&gt;
import org.apache.lucene.search.spans.SpanNearQuery;&lt;br/&gt;
import org.apache.lucene.search.spans.SpanQuery;&lt;br/&gt;
import org.apache.lucene.search.spans.SpanTermQuery;&lt;/p&gt;


&lt;p&gt;public class Test {&lt;/p&gt;

&lt;p&gt;public static void main (String args[]) throws Exception{&lt;br/&gt;
IndexWriter writer = new IndexWriter(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, new&lt;br/&gt;
TestPayloadAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);&lt;br/&gt;
Document doc = new Document();&lt;br/&gt;
doc.add();new Field(&quot;content&quot;, new StringReader(&quot;a b c d e f g&lt;br/&gt;
h i j a k&quot;)));&lt;br/&gt;
writer.addDocument(doc);&lt;br/&gt;
writer.close();&lt;/p&gt;

&lt;p&gt;IndexSearcher is = new IndexSearcher(args&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;)&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;;&lt;br/&gt;
SpanTermQuery stq1 = new SpanTermQuery(new Term(&quot;content&quot;, &quot;a&quot;&lt;br/&gt;
));&lt;br/&gt;
SpanTermQuery stq2 = new SpanTermQuery(new Term(&quot;content&quot;, &quot;k&quot;&lt;br/&gt;
));&lt;br/&gt;
SpanQuery[] sqs = &lt;/p&gt;
{stq1,stq2}
&lt;p&gt;;&lt;br/&gt;
SpanNearQuery snq = new SpanNearQuery(sqs,1,true);&lt;br/&gt;
PayloadSpans spans = snq.getPayloadSpans(is.getIndexReader());&lt;/p&gt;

&lt;p&gt;TopDocs topDocs = is.search(snq,1);&lt;/p&gt;

&lt;p&gt;for (int i = 0; i &amp;lt; topDocs.scoreDocs.length; i++) {&lt;br/&gt;
while) (spans.next()) {&lt;br/&gt;
System.out.println(spans.start());&lt;br/&gt;
Collection&amp;lt;byte[]&amp;gt; payloads = spans.getPayload();&lt;br/&gt;
for (Iterator&amp;lt;byte[]&amp;gt; it = payloads.iterator();&lt;br/&gt;
it.hasNext()&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
{
System.out.println(new String(it.next()));
}
}}
&lt;p&gt;}&lt;br/&gt;
}&lt;br/&gt;
}}&lt;/p&gt;

&lt;p&gt;-------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
import java.io.IOException;&lt;br/&gt;
import java.io.Reader;&lt;/p&gt;

&lt;p&gt;import org.apache.lucene.analysis.Analyzer;&lt;br/&gt;
import org.apache.lucene.analysis.LowerCaseTokenizer;&lt;br/&gt;
import org.apache.lucene.analysis.Token;&lt;br/&gt;
import org.apache.lucene.analysis.TokenFilter;&lt;br/&gt;
import org.apache.lucene.analysis.TokenStream;&lt;br/&gt;
import org.apache.lucene.index.Payload;&lt;/p&gt;


&lt;p&gt;public class TestPayloadAnalyzer extends Analyzer {&lt;/p&gt;

&lt;p&gt;public TokenStream tokenStream(String fieldName, Reader reader) {&lt;br/&gt;
TokenStream result = new LowerCaseTokenizer(reader);&lt;br/&gt;
result = new PayloadFilter(result, fieldName);&lt;br/&gt;
return result;&lt;br/&gt;
}&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;class PayloadFilter extends TokenFilter {&lt;br/&gt;
String fieldName;&lt;br/&gt;
int pos;&lt;/p&gt;

&lt;p&gt;public PayloadFilter(TokenStream input, String fieldName) &lt;/p&gt;
{
super(input);
this.fieldName = fieldName;
pos = 0;

}

&lt;p&gt;public Token next() throws IOException {&lt;br/&gt;
Token result = input.next();&lt;br/&gt;
if (result != null) &lt;/p&gt;
{
String token = new String(result.termBuffer(), 0, result.termLength
());
result.setPayload(),new Payload((&quot;pos: &quot; + pos).getBytes()));
pos += result.getPositionIncrement();
}
return}
&lt;p&gt; result;&lt;br/&gt;
}&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;Jonathan &lt;/p&gt;</comment>
                    <comment id="12649581" author="markrmiller@gmail.com" created="Fri, 21 Nov 2008 02:37:51 +0000"  >&lt;p&gt;Okay, I still understand like 2% of spans, but I think I have fixed the bug.&lt;/p&gt;

&lt;p&gt;After finding a match, but before finding a min match, we were pulling the payload - works fine when the match is the min match, but otherwise we actually have to wait to get the payload until we have crunched in on the min match. I had an idea of this before, and the code before I touched it tried to grab the payloads at this point - the problem is, in finding the min match, you&apos;ve often advanced passed the term position of interest to find out there was no such min match. So you have to save the possible payload ahead of time, and either find a new one or use the possible saved one. Sucks to have to add extra loading, but at the moment I don&apos;t see how to do it differently (I admittedly can&apos;t see much in spans). Thats all partly a guess, partly probably true.&lt;/p&gt;

&lt;p&gt;Non the less, this patch handles the previous test cases, plus the bug case reported above. I have also added a modified version of the given test for the bug to the span battery of tests.&lt;/p&gt;

&lt;p&gt;Thanks Jonathan!&lt;/p&gt;</comment>
                    <comment id="12649647" author="markrmiller@gmail.com" created="Fri, 21 Nov 2008 11:48:50 +0000"  >&lt;p&gt;Whats the best procedure JIRA wise on this? Reopen this issue or start a new issue? If we reopen this issue, how is the bug fix tracked in changes?&lt;/p&gt;</comment>
                    <comment id="12649674" author="gsingers" created="Fri, 21 Nov 2008 14:04:45 +0000"  >&lt;p&gt;Open a new one.&lt;/p&gt;


</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12409029">LUCENE-1465</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12394394" name="LUCENE-1001-fix.patch" size="6794" author="markrmiller@gmail.com" created="Fri, 21 Nov 2008 02:37:51 +0000" />
                    <attachment id="12388564" name="LUCENE-1001.patch" size="57704" author="markrmiller@gmail.com" created="Tue, 19 Aug 2008 22:43:58 +0100" />
                    <attachment id="12388532" name="LUCENE-1001.patch" size="58917" author="gsingers" created="Tue, 19 Aug 2008 15:39:30 +0100" />
                    <attachment id="12387993" name="LUCENE-1001.patch" size="56610" author="markrmiller@gmail.com" created="Mon, 11 Aug 2008 21:56:03 +0100" />
                    <attachment id="12387916" name="LUCENE-1001.patch" size="56323" author="markrmiller@gmail.com" created="Mon, 11 Aug 2008 02:22:27 +0100" />
                    <attachment id="12387894" name="LUCENE-1001.patch" size="46797" author="markrmiller@gmail.com" created="Sun, 10 Aug 2008 04:47:11 +0100" />
                    <attachment id="12387881" name="LUCENE-1001.patch" size="44441" author="markrmiller@gmail.com" created="Sat, 9 Aug 2008 18:02:27 +0100" />
                    <attachment id="12370204" name="LUCENE-1001.patch" size="45423" author="gsingers" created="Mon, 26 Nov 2007 14:26:18 +0000" />
                    <attachment id="12370162" name="LUCENE-1001.patch" size="43541" author="gsingers" created="Sun, 25 Nov 2007 17:52:40 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>9.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 16 Sep 2007 08:49:45 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12744</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26728</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>