<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:05 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1539/LUCENE-1539.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1539] Improve Benchmark</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1539</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Benchmark can be improved by incorporating recent suggestions posted&lt;br/&gt;
on java-dev. M. McCandless&apos; Python scripts that execute multiple&lt;br/&gt;
rounds of tests can either be incorporated into the codebase or&lt;br/&gt;
converted to Java.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12414506">LUCENE-1539</key>
            <summary>Improve Benchmark</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="jasonrutherglen">Jason Rutherglen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Feb 2009 18:48:44 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:18 +0100</updated>
                    <resolved>Sun, 14 Jun 2009 18:08:11 +0100</resolved>
                            <version>2.4</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/benchmark</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="1209600">336h</timeoriginalestimate>
                    <timeestimate seconds="1209600">336h</timeestimate>
                                  <comments>
                    <comment id="12673337" author="jasonrutherglen" created="Fri, 13 Feb 2009 18:26:48 +0000"  >&lt;p&gt;The patch adds CreateWikiIndex which creates enwiki indexes with&lt;br/&gt;
multiple percentages of deletes. It probably needs to be made into a&lt;br/&gt;
task or multiple tasks along with an alg file. One goal is to evolve&lt;br/&gt;
this patch to enable concurrent indexing and searching. &lt;/p&gt;

&lt;p&gt;I can see the elegance of using Python scripts because it&apos;s easy to&lt;br/&gt;
edit, and the pickling is nice. Equivalent Java code could be fairly&lt;br/&gt;
lengthy. However since this is a Java project and we have a framework&lt;br/&gt;
with the .alg files for defining some level of external operations,&lt;br/&gt;
it seems we may want to figure out a way to put the Python script&lt;br/&gt;
functionality into tasks and defined by .alg files. &lt;/p&gt;</comment>
                    <comment id="12673339" author="jasonrutherglen" created="Fri, 13 Feb 2009 18:27:54 +0000"  >&lt;p&gt;Python scripts attached.  &lt;/p&gt;</comment>
                    <comment id="12673596" author="mikemccand" created="Sun, 15 Feb 2009 10:56:27 +0000"  >&lt;p&gt;Jason, couldn&apos;t we create a .alg that makes multiple copies of a Wikipedia index w/ different pctg deletes, instead of a static main java tool?&lt;/p&gt;

&lt;p&gt;In fact.... one cleaner way to achieve this would be to use multiple commits in the same index.  So instead of making a full copy of the wiki index for each pctg of deletes, make a new commit.  You end up w/ a single index that has N commits, one for each pctg you need to test.  Then we&apos;d just need a way to tell an alg which commit to open.  Since a commit can contain an optional string commitUserData, we could use to tell the alg which commit to open.&lt;/p&gt;</comment>
                    <comment id="12674075" author="jasonrutherglen" created="Mon, 16 Feb 2009 22:36:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;couldn&apos;t we create a .alg that makes multiple copies of a Wikipedia index w/ different pctg deletes, instead of a static main java tool? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We&apos;ll need a new DeletesTask that deletes based on a percentage?  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;use multiple commits in the same index&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds good.  &lt;/p&gt;</comment>
                    <comment id="12675196" author="jasonrutherglen" created="Fri, 20 Feb 2009 00:31:30 +0000"  >&lt;p&gt;In looking over the code, to do the multiple commits using IR we&apos;ll need to add a IR.flush(String userData) method?&lt;/p&gt;</comment>
                    <comment id="12675336" author="mikemccand" created="Fri, 20 Feb 2009 11:35:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;In looking over the code, to do the multiple commits using IR we&apos;ll need to add a IR.flush(String userData) method?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, we should.  Can you open a new issue + patch?&lt;/p&gt;

&lt;p&gt;We also have to fix contrib/benchmark to allow specification of a Deletion Policy, and then allow openReader task to take a string (userData) to specific which commit to open.&lt;/p&gt;

&lt;p&gt;But: it&apos;d be best if, within a single alg, we could specify a series of commits to open, so that we can iterate over the different commit points.  I don&apos;t think a param to the task allows this?  (But I&apos;m not sure).  If we made it a config option then I believe we could specify a sequence which each round would advance through.&lt;/p&gt;</comment>
                    <comment id="12680276" author="jasonrutherglen" created="Mon, 9 Mar 2009 20:59:30 +0000"  >&lt;p&gt;For a performing simultaneous indexing and searching, how should we&lt;br/&gt;
best represent this in the .alg file? We have an example&lt;br/&gt;
indexing-multithreaded.alg so I suppose we can simply spawn another&lt;br/&gt;
set of threads after the &quot;[&lt;/p&gt;
{ &quot;MAddDocs&quot; AddDoc }
&lt;p&gt; : 5000] : 4&quot; line&lt;br/&gt;
that performs searches? Just gathering opinions as I don&apos;t feel&lt;br/&gt;
completely familiar with the benchmark suite yet.&lt;/p&gt;</comment>
                    <comment id="12681437" author="jasonrutherglen" created="Thu, 12 Mar 2009 18:42:43 +0000"  >&lt;ul&gt;
	&lt;li&gt;Added deletepercent.alg as an example of these tasks&lt;/li&gt;
	&lt;li&gt;CommitIndexTask commits an IndexWriter using a commit name&lt;/li&gt;
	&lt;li&gt;OpenReaderTask opens a specific commit point by name&lt;/li&gt;
	&lt;li&gt;FlushReaderTask flushes a reader using a commit name&lt;/li&gt;
	&lt;li&gt;DeleteByPercentTask a percentage of reader documents&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12695462" author="mikemccand" created="Fri, 3 Apr 2009 16:51:39 +0100"  >&lt;p&gt;This patch looks good &amp;#8211; some questions:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Is CreateWikiIndex intended to be committed?  I thought not?  Ie I&lt;br/&gt;
    though the goal w/ this issue is add the necessary tasks so that&lt;br/&gt;
    CreateWikiIndex would be done as an alg.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I think we shouldn&apos;t bump to Java 1.5 &amp;#8211; it&apos;s only CreateWikiIndex&lt;br/&gt;
    that needs it anyway (in only 2 places).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;PrintReaderTask never closes the reader.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Not sure why you needed to relax private -&amp;gt; protected in AddDocTask?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12696848" author="jasonrutherglen" created="Wed, 8 Apr 2009 01:42:09 +0100"  >&lt;p&gt;Fixed the above mentioned problems.  When &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1516&quot; title=&quot;Integrate IndexReader with IndexWriter &quot;&gt;&lt;del&gt;LUCENE-1516&lt;/del&gt;&lt;/a&gt; is in should we add the near realtime benchmarks here?&lt;/p&gt;</comment>
                    <comment id="12696971" author="mikemccand" created="Wed, 8 Apr 2009 11:12:26 +0100"  >&lt;p&gt;I think DeleteByPercentTask.java is missing?&lt;/p&gt;

&lt;p&gt;Also: I think you&apos;re missing the ability to set the deletion policy for the reader or writer?  Without that, only the last commit is retained.&lt;/p&gt;</comment>
                    <comment id="12697057" author="shaie" created="Wed, 8 Apr 2009 16:23:31 +0100"  >&lt;p&gt;Is it also interesting to add extensions to EnwikiDocMaker, WriteLineDoc and LineDocMaker which can read/write the content in a bzip format?&lt;br/&gt;
I downloaded the latest Enwiki dump, 4.5 GB in bzip format. Extracted XML size is 17GB. I thought to myslef that I don&apos;t have a real reason to extract it - I can read the content directly from the bzip-type file.&lt;/p&gt;

&lt;p&gt;So I looked around and found out that in ant.jar there are two classes which can read/write that format. Just to compare, I gzipped the XML file and the result was 5.1GB file (~13% larger). The general measurements on the web also show bzip is superior to gzip, although it probably runs a bit slower.&lt;/p&gt;

&lt;p&gt;I then ran the WriteLineDoc task, to produce the one-line-per-document text file, and stopped when it reache 228MB. Again, I zipped, gzipped and bzipped the file, and the bzip format was smaller by ~20%.&lt;/p&gt;

&lt;p&gt;So I was wondering - besides the speed of writing from a compressed archive, which is slwoer than reading from a plain XML or TXT file, is there a reason why we don&apos;t use bzip/gzip when reading content? It will save a lot of space and I&apos;m not sure that part of the indexing is what&apos;s most important.&lt;br/&gt;
However, I&apos;m aware that some people might find it better to read from plain files, so I suggest we just have extensions which can read/write the compressed format.&lt;br/&gt;
The question is, assuming you agree to it, should we use bzip (which requires external library) or gzip which is in the JDK, does not compress as good as bzip, but might have better performance (I can give it some measurements if needed, but the main question I have is whether we want to introduce a dependency on another library).&lt;/p&gt;

&lt;p&gt;If this belongs in a separate issue, let me know.&lt;/p&gt;</comment>
                    <comment id="12697088" author="mikemccand" created="Wed, 8 Apr 2009 17:45:46 +0100"  >&lt;p&gt;Enabling bzip compression sounds like a win; the added dependency to contrib/benchmark seems fine (it already has several external dependencies).&lt;/p&gt;

&lt;p&gt;Can you open a new issue?&lt;/p&gt;</comment>
                    <comment id="12697117" author="shaie" created="Wed, 8 Apr 2009 18:37:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;Can you open a new issue?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will do.&lt;/p&gt;</comment>
                    <comment id="12697219" author="jasonrutherglen" created="Wed, 8 Apr 2009 22:24:44 +0100"  >&lt;p&gt;Above mentioned issues fixed.&lt;/p&gt;

&lt;p&gt;It seems a bit awkward that DeleteByPercentTask needs to call&lt;br/&gt;
IR.undeleteAll before executing the deletes. Also that&lt;br/&gt;
subsequent delete by percent calls in deletepercent.alg need to&lt;br/&gt;
open the latest version of the index rather than the original&lt;br/&gt;
(which does not have deletes). This is due to&lt;br/&gt;
DirectoryIndexReader.acquireWriteLock checking to insure the&lt;br/&gt;
latest version of the index is locked. Perhaps we can relax&lt;br/&gt;
this? I would rather be able to open a commit point and delete&lt;br/&gt;
from the reader, then flush as the latest version.&lt;/p&gt;

&lt;p&gt;Perhaps in flexible indexing we can have more customizability&lt;br/&gt;
with the versioning? &lt;/p&gt;</comment>
                    <comment id="12697468" author="mikemccand" created="Thu, 9 Apr 2009 11:16:52 +0100"  >&lt;p&gt;This patch still has some noise, eg the unused *Property additions to PerfRunData, the nocommit &quot;first&quot; logic in ReadTask.&lt;/p&gt;

&lt;p&gt;On DeleteTaskByPercentTask: should it delete a pctg of the undeleted (numDocs()) docs or of the total (maxDoc()) doc space?  Right now its implementation is dangerous, eg, if I delete 5% of the index and then 10%, that 10% delete will do nothing, since the docs it deletes will fall onto the exact docs that the 5% had deleted.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It seems a bit awkward that DeleteByPercentTask needs to call&lt;br/&gt;
IR.undeleteAll before executing the deletes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, I see.  I don&apos;t think it should do that?  I think it should mean &quot;delete XXX% of the remaining undeleted docs&quot;?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also that&lt;br/&gt;
subsequent delete by percent calls in deletepercent.alg need to&lt;br/&gt;
open the latest version of the index rather than the original&lt;br/&gt;
(which does not have deletes)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems correct?  Ie the purpose of this task is &quot;open the latest commit on the index, delete XXX% of its undeleted docs&quot;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is due to&lt;br/&gt;
DirectoryIndexReader.acquireWriteLock checking to insure the&lt;br/&gt;
latest version of the index is locked. Perhaps we can relax&lt;br/&gt;
this? I would rather be able to open a commit point and delete&lt;br/&gt;
from the reader, then flush as the latest version.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think we can relax that.  This (single transaction (writer) open at once) is a core assumption in Lucene.&lt;/p&gt;</comment>
                    <comment id="12701768" author="jasonrutherglen" created="Thu, 23 Apr 2009 01:48:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I think it should mean &quot;delete XXX% of the remaining&lt;br/&gt;
undeleted docs&quot;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah? Ok. So the deleteDocsByPercent method needs to somehow&lt;br/&gt;
take into account whether it&apos;s deleted before by adjusting the&lt;br/&gt;
doc nums it&apos;s deleting?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&apos;t think we can relax that. This (single transaction&lt;br/&gt;
(writer) open at once) is a core assumption in Lucene.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, however doesn&apos;t mean we have to stick with it, especially&lt;br/&gt;
internally. Hopefully we can move to a more componentized model&lt;br/&gt;
someone could change this if they wanted. Perhaps in the&lt;br/&gt;
flexible indexing revamp?&lt;/p&gt;


</comment>
                    <comment id="12702436" author="mikemccand" created="Fri, 24 Apr 2009 17:50:40 +0100"  >
&lt;blockquote&gt;
&lt;p&gt;Yeah? Ok. So the deleteDocsByPercent method needs to somehow&lt;br/&gt;
take into account whether it&apos;s deleted before by adjusting the&lt;br/&gt;
doc nums it&apos;s deleting?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How about randomly choosing docs to delete instead of every N?  Then&lt;br/&gt;
you don&apos;t need to keep track?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; I don&apos;t think we can relax that. This (single transaction&lt;br/&gt;
&amp;gt; (writer) open at once) is a core assumption in Lucene.&lt;/p&gt;

&lt;p&gt;True, however doesn&apos;t mean we have to stick with it, especially&lt;br/&gt;
internally. Hopefully we can move to a more componentized model&lt;br/&gt;
someone could change this if they wanted. Perhaps in the&lt;br/&gt;
flexible indexing revamp&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We&apos;d need to figure out how to get multiple writers to properly&lt;br/&gt;
&quot;cooperate&quot;.  Actually Marvin is working on something like this (for&lt;br/&gt;
KS/Lucy), where one &quot;lightweight&quot; writer can do adds/deletes/small&lt;br/&gt;
merges, and a separate &quot;heavyweight&quot; writer does large merges.&lt;/p&gt;</comment>
                    <comment id="12718440" author="mikemccand" created="Thu, 11 Jun 2009 13:58:25 +0100"  >&lt;p&gt;Jason this patch seems close... are you gonna have time/itch to finish this soonish?&lt;/p&gt;</comment>
                    <comment id="12718575" author="jasonrutherglen" created="Thu, 11 Jun 2009 19:16:39 +0100"  >&lt;p&gt;It would be good to get done, we need the deletes to randomly delete, or maybe just delete only docs that aren&apos;t already deleted?  (i.e. the loop tries to delete at a pos, if it&apos;s already deleted, try the next spot, etc).&lt;/p&gt;</comment>
                    <comment id="12718578" author="mikemccand" created="Thu, 11 Jun 2009 19:30:26 +0100"  >&lt;p&gt;Right, I think deleteDocsByPercent should 1) determine how many docs to delete (deletePct * reader.numDocs()), and then 2) random select ones to delete, counting how many actually were deleted, and stopping when it reaches the target.  To avoid this taking excessively long when too many deletions are requested, you should probably invert if the %tg is &amp;gt; 50?  Ie, choose instead the docs NOT to delete, and then make a linear sweep to delete any docs not chosen?&lt;/p&gt;</comment>
                    <comment id="12718697" author="jasonrutherglen" created="Fri, 12 Jun 2009 03:05:40 +0100"  >&lt;p&gt;Changed the deletes to be random, cleaned up the code.&lt;/p&gt;

&lt;p&gt;Multiple passes of deletePercent.alg fails, I may have time to figure out why, as is though the patch works.&lt;/p&gt;</comment>
                    <comment id="12718897" author="jasonrutherglen" created="Fri, 12 Jun 2009 18:02:05 +0100"  >&lt;p&gt;Keeps previous deletes (doesn&apos;t call undeleteall).  When existing deletes are over 50%, we loop through termdocs instead.&lt;/p&gt;</comment>
                    <comment id="12718899" author="mikemccand" created="Fri, 12 Jun 2009 18:03:49 +0100"  >&lt;p&gt;Thanks Jason, getting close:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Can you add contrib/benchmark/CHANGES entry?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The new source files need a copyright header&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can you remove the undeleteAll?  I don&apos;t think the&lt;br/&gt;
    DeleteByPercentTask should do that.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can you make its param a real percent, ie so DeleteByPercent(25)&lt;br/&gt;
    deletes 25% of the remaining docs.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The random-pick is going to be too slow once too many docs are&lt;br/&gt;
    deleted (I mentioned this above, too).  How to fix?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12718907" author="mikemccand" created="Fri, 12 Jun 2009 18:13:46 +0100"  >&lt;blockquote&gt;&lt;p&gt;When existing deletes are over 50%, we loop through termdocs instead.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK good, except it&apos;s deleting too aggressively when &amp;gt; 50% deletions are already present (using nextBoolean()).  Can you change that to target a certain deletion rate?  Ie if you need to delete 20%, then do random.nextDouble() &amp;lt; 0.20 to do the delete?  But then I guess put a floor on that rate so that it doesn&apos;t get too slow on the &quot;tail&quot;?  It won&apos;t be perfectly random when it hits that tail but I think that&apos;s OK.&lt;/p&gt;</comment>
                    <comment id="12718914" author="jasonrutherglen" created="Fri, 12 Jun 2009 18:38:22 +0100"  >&lt;p&gt;Implemented the changes.  Wasn&apos;t sure how to floor it.  &lt;/p&gt;</comment>
                    <comment id="12718954" author="mikemccand" created="Fri, 12 Jun 2009 20:48:24 +0100"  >&lt;p&gt;Updated patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Switched to TermDocs to pick the deletes; I think this is sufficient (no floor is needed)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Beefed up CHANGES&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added a few more copyrights&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think it&apos;s ready to commit!  I&apos;ll wait a day or two...&lt;/p&gt;</comment>
                    <comment id="12718957" author="jasonrutherglen" created="Fri, 12 Jun 2009 20:58:46 +0100"  >&lt;p&gt;The only small thing that came to mind is if the user decides to&lt;br/&gt;
subsequently (in the .alg) delete a lesser percentage of docs&lt;br/&gt;
than the what exists in the reader. Does that mean we should&lt;br/&gt;
undelete docs?&lt;/p&gt;</comment>
                    <comment id="12718960" author="mikemccand" created="Fri, 12 Jun 2009 21:04:18 +0100"  >&lt;p&gt;I&apos;d say we don&apos;t allow that now.  EG one can easily save &amp;amp; open a past commit point, with less deletions?&lt;/p&gt;

&lt;p&gt;But maybe we should throw an exception if you attempt this, so you don&apos;t falsely think it worked.  I&apos;ll make that change.&lt;/p&gt;</comment>
                    <comment id="12718961" author="mikemccand" created="Fri, 12 Jun 2009 21:05:20 +0100"  >&lt;p&gt;Or... maybe we should just do undeleteAll all that case?  I&apos;ll take that approach instead.&lt;/p&gt;</comment>
                    <comment id="12718971" author="mikemccand" created="Fri, 12 Jun 2009 21:47:52 +0100"  >&lt;p&gt;Added undelete all if you try to delete to an absolute pct less than the current deletions.&lt;/p&gt;</comment>
                    <comment id="12719248" author="mikemccand" created="Sun, 14 Jun 2009 11:58:44 +0100"  >&lt;p&gt;Attached new patch; fixed a bunch of silly issues (eg we had broken&lt;br/&gt;
parsing of the readOnly option to OpenReaderTask; the&lt;br/&gt;
deletepercent.alg was opening readOnly readers to do the deletes; the&lt;br/&gt;
readOnly option was ignored if you specified userData; etc.).&lt;/p&gt;

&lt;p&gt;I also switched the default for autoCommit to false, when creating an&lt;br/&gt;
IndexWriter.&lt;/p&gt;

&lt;p&gt;I think it&apos;s ready to commit... I&apos;ll commit soon.&lt;/p&gt;</comment>
                    <comment id="12719305" author="mikemccand" created="Sun, 14 Jun 2009 18:08:11 +0100"  >&lt;p&gt;Thanks Jason!&lt;/p&gt;</comment>
                    <comment id="12721586" author="jasonrutherglen" created="Fri, 19 Jun 2009 01:39:11 +0100"  >&lt;p&gt;I think it would be convenient to allow passing in the data files&apos; absolute path, instead of assuming they&apos;re in a relative path.  &lt;/p&gt;</comment>
                    <comment id="12721705" author="mikemccand" created="Fri, 19 Jun 2009 10:29:41 +0100"  >&lt;p&gt;Where are we assuming/requiring the path be relative?&lt;/p&gt;</comment>
                    <comment id="12722738" author="jasonrutherglen" created="Mon, 22 Jun 2009 19:16:59 +0100"  >&lt;p&gt;Took a look at ANT in Action at Borders and learned the -Dproperty passed in overrides what&apos;s in the build.xml.  &lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12422634">LUCENE-1595</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12410569" name="LUCENE-1539.patch" size="22320" author="mikemccand" created="Sun, 14 Jun 2009 11:58:44 +0100" />
                    <attachment id="12410511" name="LUCENE-1539.patch" size="21147" author="mikemccand" created="Fri, 12 Jun 2009 21:47:52 +0100" />
                    <attachment id="12410508" name="LUCENE-1539.patch" size="21041" author="mikemccand" created="Fri, 12 Jun 2009 20:48:24 +0100" />
                    <attachment id="12410500" name="LUCENE-1539.patch" size="19385" author="jasonrutherglen" created="Fri, 12 Jun 2009 18:38:22 +0100" />
                    <attachment id="12410496" name="LUCENE-1539.patch" size="17282" author="jasonrutherglen" created="Fri, 12 Jun 2009 18:02:05 +0100" />
                    <attachment id="12410448" name="LUCENE-1539.patch" size="17113" author="jasonrutherglen" created="Fri, 12 Jun 2009 03:05:40 +0100" />
                    <attachment id="12405006" name="LUCENE-1539.patch" size="19025" author="jasonrutherglen" created="Wed, 8 Apr 2009 22:24:44 +0100" />
                    <attachment id="12404908" name="LUCENE-1539.patch" size="12867" author="jasonrutherglen" created="Wed, 8 Apr 2009 01:42:09 +0100" />
                    <attachment id="12402076" name="LUCENE-1539.patch" size="24514" author="jasonrutherglen" created="Thu, 12 Mar 2009 18:42:43 +0000" />
                    <attachment id="12400197" name="LUCENE-1539.patch" size="13270" author="jasonrutherglen" created="Fri, 13 Feb 2009 18:26:48 +0000" />
                    <attachment id="12400198" name="sortBench2.py" size="3881" author="jasonrutherglen" created="Fri, 13 Feb 2009 18:27:54 +0000" />
                    <attachment id="12400199" name="sortCollate2.py" size="1221" author="jasonrutherglen" created="Fri, 13 Feb 2009 18:27:54 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 15 Feb 2009 10:56:27 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12215</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26190</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>