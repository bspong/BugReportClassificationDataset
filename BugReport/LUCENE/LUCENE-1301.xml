<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:10:36 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1301/LUCENE-1301.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1301] Refactor DocumentsWriter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1301</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I&apos;ve been working on refactoring DocumentsWriter to make it more&lt;br/&gt;
modular, so that adding new indexing functionality (like column-stride&lt;br/&gt;
stored fields, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1231&quot; title=&quot;Column-stride fields (aka per-document Payloads)&quot;&gt;&lt;del&gt;LUCENE-1231&lt;/del&gt;&lt;/a&gt;) is just a matter of adding a plugin into&lt;br/&gt;
the indexing chain.&lt;/p&gt;

&lt;p&gt;This is an initial step towards flexible indexing (but there is still&lt;br/&gt;
alot more to do!).&lt;/p&gt;

&lt;p&gt;And it&apos;s very much still a work in progress &amp;#8211; there are intemittant&lt;br/&gt;
thread safety issues, I need to add tests cases and test/iterate on&lt;br/&gt;
performance, many &quot;nocommits&quot;, etc.  This is a snapshot of my current&lt;br/&gt;
state...&lt;/p&gt;

&lt;p&gt;The approach introduces &quot;consumers&quot; (abstract classes defining the&lt;br/&gt;
interface) at different levels during indexing.  EG DocConsumer&lt;br/&gt;
consumes the whole document.  DocFieldConsumer consumes separate&lt;br/&gt;
fields, one at a time.  InvertedDocConsumer consumes tokens produced&lt;br/&gt;
by running each field through the analyzer.  TermsHashConsumer writes&lt;br/&gt;
its own bytes into in-memory posting lists stored in byte slices,&lt;br/&gt;
indexed by term, etc.&lt;/p&gt;

&lt;p&gt;DocumentsWriter*.java is then much simpler: it only interacts with a&lt;br/&gt;
DocConsumer and has no idea what that consumer is doing.  Under that&lt;br/&gt;
DocConsumer there is a whole &quot;indexing chain&quot; that does the real work:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;NormsWriter holds norms in memory and then flushes them to _X.nrm.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;FreqProxTermsWriter holds postings data in memory and then flushes&lt;br/&gt;
    to _X.frq/prx.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;StoredFieldsWriter flushes immediately to _X.fdx/fdt&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;TermVectorsTermsWriter flushes immediately to _X.tvx/tvf/tvd&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;DocumentsWriter still manages things like flushing a segment, closing&lt;br/&gt;
doc stores, buffering &amp;amp; applying deletes, freeing memory, aborting&lt;br/&gt;
when necesary, etc.&lt;/p&gt;

&lt;p&gt;In this first step, everything is package-private, and, the indexing&lt;br/&gt;
chain is hardwired (instantiated in DocumentsWriter) to the chain&lt;br/&gt;
currently matching Lucene trunk.  Over time we can open this up.&lt;/p&gt;

&lt;p&gt;There are no changes to the index file format.&lt;/p&gt;

&lt;p&gt;For the most part this is just a &lt;span class=&quot;error&quot;&gt;&amp;#91;large&amp;#93;&lt;/span&gt; refactoring, except for these&lt;br/&gt;
two small actual changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Improved concurrency with mixed large/small docs: previously the&lt;br/&gt;
    thread state would be tied up when docs finished indexing&lt;br/&gt;
    out-of-order.  Now, it&apos;s not: instead I use a separate class to&lt;br/&gt;
    hold any pending state to flush to the doc stores, and immediately&lt;br/&gt;
    free up the thread state to index other docs.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Buffered norms in memory now remain sparse, until flushed to the&lt;br/&gt;
    _X.nrm file.  Previously we would &quot;fill holes&quot; in norms in memory,&lt;br/&gt;
    as we go, which could easily use way too much memory.  Really this&lt;br/&gt;
    isn&apos;t a solution to the problem of sparse norms (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-830&quot; title=&quot;norms file can become unexpectedly enormous&quot;&gt;&lt;del&gt;LUCENE-830&lt;/del&gt;&lt;/a&gt;); it&lt;br/&gt;
    just delays that issue from causing memory blowup during indexing;&lt;br/&gt;
    memory use will still blowup during searching.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I expect performance (indexing throughput) will be worse with this&lt;br/&gt;
change.  I&apos;ll profile &amp;amp; iterate to minimize this, but I think we can&lt;br/&gt;
accept some loss.  I also plan to measure benefit of manually&lt;br/&gt;
re-cycling RawPostingList instances from our own pool, vs letting GC&lt;br/&gt;
recycle them.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12397895">LUCENE-1301</key>
            <summary>Refactor DocumentsWriter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Jun 2008 11:14:31 +0100</created>
                <updated>Sat, 11 Oct 2008 13:49:37 +0100</updated>
                    <resolved>Fri, 18 Jul 2008 10:25:56 +0100</resolved>
                            <version>2.3</version>
                <version>2.3.1</version>
                <version>2.3.2</version>
                <version>2.4</version>
                                <fixVersion>2.4</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12605183" author="michaelbusch" created="Mon, 16 Jun 2008 03:34:50 +0100"  >&lt;p&gt;Mike, I think the ArrayUtil class is missing in your patch?&lt;/p&gt;</comment>
                    <comment id="12605247" author="mikemccand" created="Mon, 16 Jun 2008 11:17:06 +0100"  >&lt;p&gt;Woops, sorry, I forgot to svn add that.  I&apos;m attaching my current&lt;br/&gt;
state, with that file added.  Does this one work?  (You may need to&lt;br/&gt;
forcefully remove DocumentsWriterFieldData.java if applying the patch&lt;br/&gt;
doesn&apos;t do so).&lt;/p&gt;
</comment>
                    <comment id="12605798" author="michaelbusch" created="Wed, 18 Jun 2008 02:35:02 +0100"  >&lt;p&gt;Just a quick update, Mike: &lt;br/&gt;
With your latest patch it&apos;s compiling fine now. Thanks!&lt;br/&gt;
I&apos;m seeing NullPointerExceptions in TestStressIndexing2 though,&lt;br/&gt;
but I guess this patch is not final yet.&lt;/p&gt;

&lt;p&gt;I haven&apos;t read the patch yet, hope I&apos;ll find some time soon.&lt;/p&gt;</comment>
                    <comment id="12606322" author="mikemccand" created="Thu, 19 Jun 2008 11:50:01 +0100"  >&lt;p&gt;Attached new rev of the patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m seeing NullPointerExceptions in TestStressIndexing2 though,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe this patch fixes that.  All tests should now pass.&lt;/p&gt;</comment>
                    <comment id="12612944" author="mikemccand" created="Fri, 11 Jul 2008 18:59:43 +0100"  >&lt;p&gt;New rev of the patch attached.  I&apos;ve fixed all nocommits.  All tests&lt;br/&gt;
pass.  I believe this version is ready to commit!&lt;/p&gt;

&lt;p&gt;I&apos;ll wait a few more days before committing...&lt;/p&gt;

&lt;p&gt;I ran some indexing throughput tests, indexing Wikipedia docs from a&lt;br/&gt;
line file using StandardAnalyzer.  Each result is best of 4.  Here&apos;s&lt;br/&gt;
the alg:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer

doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker

docs.file=/Volumes/External/lucene/wiki.txt
doc.stored = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
doc.term.vector = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
doc.add.log.step=2000

directory=FSDirectory
autocommit=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
compound=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;

work.dir=/lucene/work
ram.flush.mb=64

{ &lt;span class=&quot;code-quote&quot;&gt;&quot;Rounds&quot;&lt;/span&gt;
  ResetSystemErase
  { &lt;span class=&quot;code-quote&quot;&gt;&quot;BuildIndex&quot;&lt;/span&gt;
    - CreateIndex
     { &lt;span class=&quot;code-quote&quot;&gt;&quot;AddDocs&quot;&lt;/span&gt; AddDoc &amp;gt; : 200000
    - CloseIndex
  }
  NewRound
} : 4

RepSumByPrefRound BuildIndex
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gives these results with term vectors &amp;amp; stored fields:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;patch
  BuildIndex -  - 1 -  -   1 -  -  200000 -  -   900.4 -  - 222.12 - 410,938,688  1,029,046,272

trunk
  BuildIndex -  - 1 -  -   1 -  -  200000 -  -   969.0 -  - 206.39 - 400,372,256  1,029,046,272

2.3
  BuildIndex      2        1       200002        905.4      220.89   391,630,016  1,029,046,272
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;And without term vectors &amp;amp; stored fields:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;patch
  BuildIndex -  - 3 -  -   1 -  -  200000 -  - 1,297.5 -  - 154.15 - 399,966,592  1,029,046,272

trunk
  BuildIndex -  - 1 -  -   1 -  -  200000 -  - 1,372.5 -  - 145.72 - 390,581,376  1,029,046,272

2.3
  BuildIndex -  - 1 -  -   1 -  -  200002 -  - 1,308.5 -  - 152.85 - 389,224,640  1,029,046,272
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the bad news is the refactoring had made things a bit (~5-7%)&lt;br/&gt;
slower than the current trunk.  But the good news is trunk was already&lt;br/&gt;
6-7% faster than 2.4, so they nearly cancel out.&lt;/p&gt;

&lt;p&gt;If I repeat these tests using tiny docs (~100 bytes per body) instead,&lt;br/&gt;
indexing the first 10 million docs, the slowdown is worse (~13-15% vs&lt;br/&gt;
trunk, ~11-13% vs 2.3)... I think it&apos;s because the additional method calls&lt;br/&gt;
with the refactoring become a bigger part of the time.&lt;/p&gt;

&lt;p&gt;With term vectors &amp;amp; stored fields:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;patch
  BuildIndex -  - 3 -  -   1 -   10000000 -   38,320.1 -  - 260.96 - 313,980,832  1,029,046,272

trunk
  BuildIndex      2        1     10000000     45,194.1      221.27   414,987,072  1,029,046,272

2.3
  BuildIndex -  - 1 -  -   1 -   10000002 -   42,861.4 -  - 233.31 - 182,957,440  1,029,046,272
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without term vectors &amp;amp; stored fields:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;patch
  BuildIndex -  - 1 -  -   1 -   10000000 -   60,778.4 -  - 164.53 - 341,611,456  1,029,046,272

trunk
  BuildIndex      2        1     10000000     68,387.8      146.23   405,388,960  1,029,046,272

2.3
  BuildIndex      0        1     10000002     68,052.7      146.95   330,334,912  1,029,046,272
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think these small slowdowns are worth the improvement in code&lt;br/&gt;
clarity.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12385891" name="LUCENE-1301.patch" size="345751" author="mikemccand" created="Fri, 11 Jul 2008 18:59:43 +0100" />
                    <attachment id="12383736" name="LUCENE-1301.patch" size="301801" author="mikemccand" created="Tue, 10 Jun 2008 11:17:00 +0100" />
                    <attachment id="12384044" name="LUCENE-1301.take2.patch" size="315085" author="mikemccand" created="Mon, 16 Jun 2008 11:17:06 +0100" />
                    <attachment id="12384275" name="LUCENE-1301.take3.patch" size="329898" author="mikemccand" created="Thu, 19 Jun 2008 11:50:01 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 16 Jun 2008 02:34:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12447</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26427</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>