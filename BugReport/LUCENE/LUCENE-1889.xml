<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1889/LUCENE-1889.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1889] FastVectorHighlighter: support for additional queries</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1889</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I am using fastvectorhighlighter for some strange languages and it is working well! &lt;/p&gt;

&lt;p&gt;One thing i noticed immediately is that many query types are not highlighted (multitermquery, multiphrasequery, etc)&lt;br/&gt;
Here is one thing Michael M posted in the original ticket:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think a nice &lt;span class=&quot;error&quot;&gt;&amp;#91;eventual&amp;#93;&lt;/span&gt; model would be if we could simply re-run the&lt;br/&gt;
scorer on the single document (using InstantiatedIndex maybe, or&lt;br/&gt;
simply some sort of wrapper on the term vectors which are already a&lt;br/&gt;
mini-inverted-index for a single doc), but extend the scorer API to&lt;br/&gt;
tell us the exact term occurrences that participated in a match (which&lt;br/&gt;
I don&apos;t think is exposed today).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Due to strange requirements I am using something similar to this (but specialized to our case).&lt;br/&gt;
I am doing strange things like forcing multitermqueries to rewrite into boolean queries so they will be highlighted,&lt;br/&gt;
and flattening multiphrasequeries into boolean or&apos;ed phrasequeries.&lt;br/&gt;
I do not think these things would be &apos;fast&apos;, but i had a few ideas that might help:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;looking at contrib/highlighter, you can support FilteredQuery in flatten() by calling getQuery() right?&lt;/li&gt;
	&lt;li&gt;maybe as a last resort, try Query.extractTerms() ?&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12434749">LUCENE-1889</key>
            <summary>FastVectorHighlighter: support for additional queries</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="koji">Koji Sekiguchi</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Sep 2009 15:44:28 +0100</created>
                <updated>Mon, 23 Jan 2012 04:45:13 +0000</updated>
                    <resolved>Thu, 13 Oct 2011 13:11:39 +0100</resolved>
                                            <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/highlighter</component>
                        <due></due>
                    <votes>4</votes>
                        <watches>7</watches>
                                                    <comments>
                    <comment id="12751752" author="jasonrutherglen" created="Sat, 5 Sep 2009 12:53:22 +0100"  >&lt;p&gt;Robert, you&apos;ve implemented extending scorer to return the exact term occurrences?&lt;/p&gt;</comment>
                    <comment id="12751753" author="rcmuir" created="Sat, 5 Sep 2009 13:45:47 +0100"  >&lt;p&gt;Jason, no but the high-level idea in concept is similar: re-run the query on single doc &quot;mini-index&quot; to work a bit differently (specialized for highlighting)&lt;/p&gt;

&lt;p&gt;if i had done it in a nice way I would have contributed something &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12751795" author="mikemccand" created="Sat, 5 Sep 2009 22:38:15 +0100"  >&lt;p&gt;I think we &quot;just&quot; need to merge Span*Query into their &quot;nomal&quot; counterparts, making sure there&apos;s no performance penalty when you don&apos;t use the spans.  Then we get the exact occurrence of every match &quot;for free&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12843261" author="digydigy" created="Tue, 9 Mar 2010 19:43:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;One thing i noticed immediately is that many query types are not highlighted (multitermquery, multiphrasequery, etc)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am using queryParser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE)&lt;br/&gt;
before query.rewrite, and it works well.&lt;/p&gt;

&lt;p&gt;DIGY&lt;/p&gt;</comment>
                    <comment id="13054923" author="sokolov" created="Sat, 25 Jun 2011 16:29:51 +0100"  >&lt;p&gt;I made an incremental change to FVH to support WildcardQuery, PrefixQuery and RegexpQuery.  Just uses Java regexes to match.  It is faster than HighlightQuery (4-5x in enwiki benchmark) although not as much faster as the comparison w/TermQuery.  &lt;/p&gt;

&lt;p&gt;A possible issue is that regex support will differ from RegexpQuery, but I think? that Java&apos;s is a superset, so should be ok, but I&apos;m not sure about this one.&lt;/p&gt;

&lt;p&gt;This doesn&apos;t take you to nirvana, but does add support for a common case. If there&apos;s interest I&apos;ll post.&lt;/p&gt;</comment>
                    <comment id="13054984" author="koji" created="Sun, 26 Jun 2011 00:18:05 +0100"  >&lt;p&gt;Sounds great!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This doesn&apos;t take you to nirvana, but does add support for a common case. If there&apos;s interest I&apos;ll post.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, please post. Does it cover range queries?&lt;/p&gt;</comment>
                    <comment id="13054985" author="sokolov" created="Sun, 26 Jun 2011 00:54:53 +0100"  >&lt;p&gt;No, no range queries, sorry.  I don&apos;t think that&apos;s easily expressible as a regex? So it would add probably require yet another data structure in FieldQuery - right now we have Map&amp;lt;String,QueryPhraseMap&amp;gt; for TermQuery; I&apos;ve added a List&amp;lt;QueryPhraseMap&amp;gt; and QPM.Pattern for matching wildcards and regexes.  To handle RangeQuery, you&apos;d need to add another such data structure: it would probably be best to introduce some new abstraction to represent all of these query-proxies.&lt;/p&gt;

&lt;p&gt;It seemed a less useful case to me anyway since we don&apos;t usually use range queries in the context of full text; more often they come up in structured metadata?  Curious if  you have requests for that?&lt;/p&gt;

&lt;p&gt;Anyway I will clean up a bit and post.&lt;/p&gt;</comment>
                    <comment id="13054986" author="sokolov" created="Sun, 26 Jun 2011 01:11:01 +0100"  >&lt;p&gt;Patch includes FVH support for Wildcard-, Regexp- and PrefixQuery.  Change to Enwiki benchmark (to generate wildcard queries) should maybe not be committed; just providing this as a validation of this approach.&lt;/p&gt;</comment>
                    <comment id="13055364" author="koji" created="Mon, 27 Jun 2011 08:03:37 +0100"  >&lt;p&gt;Patch looks really good!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To handle RangeQuery, you&apos;d need to add another such data structure: it would probably be best to introduce some new abstraction to represent all of these query-proxies.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would you like to try this one? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It seemed a less useful case to me anyway since we don&apos;t usually use range queries in the context of full text; more often they come up in structured metadata? Curious if you have requests for that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t have the requirement for highlighting range queries, even wildcard, prefix and regexp either. Because I&apos;m using FVH to highlight terms in N-gram fields, and these MultiTermQueries are not ideal for N-gram. But if FVH could cover range queries, it should be nicer for users.&lt;/p&gt;</comment>
                    <comment id="13055452" author="rcmuir" created="Mon, 27 Jun 2011 11:22:21 +0100"  >&lt;blockquote&gt;
&lt;p&gt;A possible issue is that regex support will differ from RegexpQuery, but I think? that Java&apos;s is a superset, so should be ok, but I&apos;m not sure about this one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, these are totally different syntaxes!&lt;/p&gt;

&lt;p&gt;An alternative way to flatten these multitermqueries could be to implement o.a.l.index.Terms with what is in the term vector... then you could rewrite them with their own code.&lt;/p&gt;

&lt;p&gt;trying to generate an equivalent string pattern could be a little problematic, for example wildcard supports escaped terms (and could contain other characters that are java.util.regex syntax characters but not wildcard syntax characters), the regex syntax is different, etc.&lt;/p&gt;

&lt;p&gt;if you still decide you want to do it this way though, i would use o.a.l.util.automaton instead of java.util.regex? Besides being faster, this is internally what these queries are using anyway, so you can convert them with for example WildcardQuery.toAutomaton(). Then, union these and match against the union&apos;ed machine instead of a List.&lt;/p&gt;

&lt;p&gt;But personally i would look at going the Terms/rewriteMethod route if possible, this way all multitermqueries will &quot;just work&quot;.&lt;/p&gt;</comment>
                    <comment id="13055546" author="sokolov" created="Mon, 27 Jun 2011 14:41:32 +0100"  >&lt;p&gt;Robert: Thanks that sounds like good advice. I wasn&apos;t completely happy with that Pattern list anyway; really still just feeling my way around Lucene and trying random things at this point a bit.  I wonder if you could comment on this possible other idea, following up on Mike M&apos;s quote above:&lt;/p&gt;

&lt;p&gt;I tried hacking up SpanScorer to see if I could get positions out of it using a custom Collector, but found that by the time a doc was reported, SpanScorer had already iterated over and dropped the positions.  I was thinking of adding a Collector.collectSpans(int start, int end), and having SpanScorer call it (it would be an empty function in Collector proper) or something like that.  At this point I&apos;m wondering if it might be possible to rewrite many queries as some kind of SpanQuery (using a visitor), without the need to actually alter all the Query implementations.  Is there a better way?&lt;/p&gt;

&lt;p&gt;I was also thinking it might be possible to capture and re-use positions gathered during the initial scoring episode rather than having to re-score during highlighting, but I guess that&apos;s a separate issue.&lt;/p&gt;

&lt;p&gt;Koji: Thanks for the review, but it sounds like some more iteration is needed here; for sure on RegExpQuery.  I probably should have tested that a bit more carefully, although the one thing I tried (character classes) seems to work the same.&lt;/p&gt;</comment>
                    <comment id="13055580" author="rcmuir" created="Mon, 27 Jun 2011 15:31:22 +0100"  >&lt;p&gt;Hi Mike, Simon has an issue open to make a lot of what you are talking about wrt positions easier:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my opinion once &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt; is resolved, we may want to then consider adding the capability for a codec to encode the offset deltas in parallel with the positions (so its just a stream of delta-encoded integers you read in parallel with the positions for things like highlighting). &lt;/p&gt;

&lt;p&gt;Then, highlighting would not require term vectors anymore right? I think this would be much faster and more efficient without the space waste of term vectors, and we could prototype such a thing by encoding these ourselves into the payloads... which is close to the same, but I think ultimately optionally supporting offsets this way will be better especially with block-oriented compression algorithms.&lt;/p&gt;
</comment>
                    <comment id="13055599" author="sokolov" created="Mon, 27 Jun 2011 16:21:01 +0100"  >&lt;p&gt;Ah, I see - that&apos;s awesome, thanks, had no idea.  Yeah - I had been thinking about matching positions-&amp;gt;offsets using the existing term vectors, which was going to be kind of unpleasant; you have to iterate by term, which you don&apos;t care about, and scan for a matching position.&lt;/p&gt;</comment>
                    <comment id="13055603" author="rcmuir" created="Mon, 27 Jun 2011 16:31:46 +0100"  >&lt;p&gt;well I think Simon might be looking for feedback on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt;, which would allow you to get at the positions and corresponding payloads.&lt;/p&gt;

&lt;p&gt;So as an experiment close to what you describe, you could play with his patch, make a TokenFilter that copies whatever offset info highlighting needs into the payload (OffsetAsPayloadFilter or something), and try to make a quick-n-dirty highlighter that uses it?&lt;/p&gt;

&lt;p&gt;It would be interesting to see what the performance is like from this versus the term vectors, besides working with all queries &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13096918" author="sokolov" created="Sun, 4 Sep 2011 20:08:10 +0100"  >&lt;p&gt;This patch adds support for highlighting MultiTermQuery in FastVectorHighlighter via Query.rewrite().  I left one FIXME (should that be nocommit?) that should be fairly easy to resolve: we currently rewrite() the same MTQ query twice in some circumstances - if it&apos;s in a phrase I think.  I&apos;d be happy to sort that out if y&apos;all decide to commit this.&lt;/p&gt;</comment>
                    <comment id="13099715" author="sokolov" created="Thu, 8 Sep 2011 03:38:18 +0100"  >&lt;p&gt;Koji - back in June, you expressed some interest in this; are you still interested / do you have time to review the patch?  I think it is as good a solution as one can wish for in the context of FVH.  Possibly &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt; will end up as something better, but it is a longer-term project I think with a lot of work left to be done; in the meantime this would offer a good way to extend FVH support to a broader range of queries.  This&apos;ll be my last nudge &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13099718" author="koji" created="Thu, 8 Sep 2011 03:46:35 +0100"  >&lt;p&gt;Thank you for the wake-up call, Mike! I&apos;d like to review the patch tomorrow.&lt;/p&gt;</comment>
                    <comment id="13100357" author="koji" created="Thu, 8 Sep 2011 15:42:14 +0100"  >&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Possibly &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt; will end up as something better, but it is a longer-term project I think with a lot of work left to be done; in the meantime this would offer a good way to extend FVH support to a broader range of queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1. I think this is close to commit. Mike, can you sort out FIXME part?&lt;/p&gt;</comment>
                    <comment id="13100825" author="sokolov" created="Fri, 9 Sep 2011 01:47:14 +0100"  >&lt;p&gt;updated patch resolves issue w/possibly rewriting MTQs multiple times&lt;/p&gt;</comment>
                    <comment id="13100826" author="sokolov" created="Fri, 9 Sep 2011 01:48:17 +0100"  >&lt;p&gt;here you go, Koji - thanks for the quick review&lt;/p&gt;</comment>
                    <comment id="13100859" author="koji" created="Fri, 9 Sep 2011 02:58:22 +0100"  >&lt;p&gt;Committed revision 1166954 in trunk.&lt;/p&gt;

&lt;p&gt;Now I&apos;m trying to port 3x, but I got &quot;no such method&quot; issue in FieldQuery:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (query &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; MultiTermQuery) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ((MultiTermQuery)query).getField();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you have an idea to solve this?&lt;/p&gt;</comment>
                    <comment id="13100888" author="sokolov" created="Fri, 9 Sep 2011 03:33:13 +0100"  >&lt;p&gt;I&apos;m a little out of my depth here, but it appears from poking around in svn history that the field name got pulled up in to MTQ from its subclasses when the &quot;flex_1458&quot; branch was merged in, and I guess that hasn&apos;t happened in 3.x?&lt;/p&gt;

&lt;p&gt;So it looks to me that the only way to get this change into 3.x is either to do the same kind of refactoring that was done in that branch, or to go back to special-casing all the different MTQs. (ie something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (query &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; WildcardQuery) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ((WildcardQuery)query).getField();
}
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (query &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; PrefixQuery) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ((PrefixQuery)query).getField();
}
etc...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sorry - I didn&apos;t realize the patch relied on something only in trunk.  That branch was merged in a year and a half ago now, but I guess it must include enough major changes that it&apos;s difficult to back-port.&lt;/p&gt;</comment>
                    <comment id="13100897" author="koji" created="Fri, 9 Sep 2011 03:56:40 +0100"  >&lt;p&gt;Ok, I took the latter way in this issue. committed 3x.&lt;/p&gt;</comment>
                    <comment id="13100898" author="koji" created="Fri, 9 Sep 2011 03:57:18 +0100"  >&lt;p&gt;Thanks Mike!&lt;/p&gt;</comment>
                    <comment id="13100985" author="cmale" created="Fri, 9 Sep 2011 06:02:00 +0100"  >&lt;p&gt;Solr&apos;s build is broken by these changes it seems.&lt;/p&gt;</comment>
                    <comment id="13101004" author="rcmuir" created="Fri, 9 Sep 2011 06:47:17 +0100"  >&lt;p&gt;here is the patch I applied, might not be the best or whatever, and see the TODO/note in the code.&lt;/p&gt;</comment>
                    <comment id="13101127" author="sokolov" created="Fri, 9 Sep 2011 12:21:20 +0100"  >&lt;p&gt;Sorry, forgot to include changes to DefaultSolrHighlighter as well (it gets confusing maintaining multiple patches in the same build).&lt;/p&gt;

&lt;p&gt;I do think the non-reader method should be derprecated as in Robert&apos;s comment.&lt;/p&gt;</comment>
                    <comment id="13126510" author="koji" created="Thu, 13 Oct 2011 13:11:39 +0100"  >&lt;p&gt;The fix of the broken solr build had been committed in last month.&lt;/p&gt;</comment>
                    <comment id="13157758" author="thetaphi" created="Sun, 27 Nov 2011 12:29:26 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                    <comment id="13190872" author="billnbell" created="Mon, 23 Jan 2012 04:45:13 +0000"  >&lt;p&gt;It looks like this will automatically be used in SOLR ? OR do we need to add support for this ?&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12447063">LUCENE-2243</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12493705" name="LUCENE-1889.patch" size="15671" author="sokolov" created="Fri, 9 Sep 2011 01:47:14 +0100" />
                    <attachment id="12492986" name="LUCENE-1889.patch" size="14675" author="sokolov" created="Sun, 4 Sep 2011 20:08:10 +0100" />
                    <attachment id="12483830" name="LUCENE-1889.patch" size="18430" author="sokolov" created="Sun, 26 Jun 2011 01:11:01 +0100" />
                    <attachment id="12493731" name="LUCENE-1889_reader.patch" size="2467" author="rcmuir" created="Fri, 9 Sep 2011 06:47:17 +0100" />
                    <attachment id="12493764" name="LUCENE-1889-solr.patch" size="863" author="sokolov" created="Fri, 9 Sep 2011 12:21:20 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 5 Sep 2009 11:53:22 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11877</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25838</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>