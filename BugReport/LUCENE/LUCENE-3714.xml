<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3714/LUCENE-3714.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3714] add suggester that uses shortest path/wFST instead of buckets</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3714</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently the FST suggester (really an FSA) quantizes weights into buckets (e.g. single byte) and puts them in front of the word.&lt;br/&gt;
This makes it fast, but you lose granularity in your suggestions.&lt;/p&gt;

&lt;p&gt;Lately the question was raised, if you build lucene&apos;s FST with positiveintoutputs, does it behave the same as a tropical semiring wFST?&lt;/p&gt;

&lt;p&gt;In other words, after completing the word, we instead traverse min(output) at each node to find the &apos;shortest path&apos; to the &lt;br/&gt;
best suggestion (with the highest score).&lt;/p&gt;

&lt;p&gt;This means we wouldnt need to quantize weights at all and it might make some operations (e.g. adding fuzzy matching etc) a lot easier.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12539308">LUCENE-3714</key>
            <summary>add suggester that uses shortest path/wFST instead of buckets</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sat, 21 Jan 2012 19:12:49 +0000</created>
                <updated>Fri, 10 May 2013 11:43:12 +0100</updated>
                    <resolved>Sun, 19 Feb 2012 17:19:08 +0000</resolved>
                                            <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/spellchecker</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13190510" author="rcmuir" created="Sat, 21 Jan 2012 19:14:41 +0000"  >&lt;p&gt;patch that Mike and I came up with that finds the minimal output from an arc, and a random test showing it works.&lt;/p&gt;</comment>
                    <comment id="13190523" author="dweiss" created="Sat, 21 Jan 2012 20:25:39 +0000"  >&lt;p&gt;An problematic example where root arcs, when traversed min-to-max collect outputs, but every outgoing arc only collects a single better suggestion (and should skip possibly lots of other suggestions). This is created by the following input:&lt;/p&gt;

&lt;p&gt;aa|N&lt;br/&gt;
ab|1&lt;br/&gt;
ba|N&lt;br/&gt;
bb|2&lt;br/&gt;
ca|N&lt;br/&gt;
cb|3&lt;br/&gt;
..&lt;/p&gt;

&lt;p&gt;collecting the K-th suggestion with the smallest score will require scanning pessimistically all of the arcs. Note that you can put arbitrarily large subtrees on _a|N nodes like:&lt;/p&gt;

&lt;p&gt;aaa|N&lt;br/&gt;
aab|N&lt;br/&gt;
aac|N&lt;/p&gt;

&lt;p&gt;etc.&lt;/p&gt;</comment>
                    <comment id="13190524" author="dweiss" created="Sat, 21 Jan 2012 20:28:04 +0000"  >&lt;p&gt;The patch works because it finds the first (topmost) suggestion, but collecting suggestions with max-N (or min-N) will require a priority queue so that one knows which next arc to follow next (and this will also require storing partially collected paths for pointers in the fst/queue)?&lt;/p&gt;</comment>
                    <comment id="13190525" author="rcmuir" created="Sat, 21 Jan 2012 20:29:02 +0000"  >&lt;p&gt;Not sure it requires one, &lt;a href=&quot;http://www.cs.nyu.edu/~mohri/pub/nbest.ps&quot; class=&quot;external-link&quot;&gt;http://www.cs.nyu.edu/~mohri/pub/nbest.ps&lt;/a&gt; has some solutions.&lt;/p&gt;</comment>
                    <comment id="13190526" author="dweiss" created="Sat, 21 Jan 2012 20:33:19 +0000"  >&lt;p&gt;I&apos;m sure there are solutions to the problem if you change algebra ops &amp;#8211; the pq is a naive solutions that would work on top of positive outputs.&lt;/p&gt;</comment>
                    <comment id="13190535" author="rcmuir" created="Sat, 21 Jan 2012 21:41:51 +0000"  >&lt;p&gt;Yeah I think we should try that first, and see how it performs.&lt;/p&gt;</comment>
                    <comment id="13190536" author="mikemccand" created="Sat, 21 Jan 2012 21:45:04 +0000"  >&lt;p&gt;Dawid, by problematic example, you mean you think this approach is functionally correct but may not perform very well...?&lt;/p&gt;

&lt;p&gt;That is definitely the worst-case performance (for either top-1 or top-K on a wFST with simple PQ), but this (number of non-competitive arcs you have to scan and discard) is a constant factor on the overall complexity right?&lt;/p&gt;

&lt;p&gt;I think we should at least test the simple PQ on PositiveIntsOutputs wFST and see how it performs in practice.  If indeed having everything &quot;in one bucket&quot; is too slow, we could combine the two approaches: still use buckets, but within each bucket we have a wFST (ie, use the &quot;true&quot; score), so we don&apos;t actually do any quantizing in the end results.  Then bucketing is purely an optimization...&lt;/p&gt;

&lt;p&gt;Or, maybe, we could keep one bucket but sort each node&apos;s arcs by their output instead of by label.  This&apos;d mean the initial lookup-by-prefix gets slower (linear scan instead a bin search, assuming those nodes had array&apos;d arcs), but then producing the top-N is very fast (no wasted arcs need to be scanned).  Maybe we could keep the by-label sort for nodes within depth N, and then sort by output beyond that...&lt;/p&gt;

&lt;p&gt;Or we could change the outputs algebra so that more &quot;lookahead&quot; is stored in each output so we have more guidance on which arcs are worth pursuing...&lt;/p&gt;</comment>
                    <comment id="13190539" author="dweiss" created="Sat, 21 Jan 2012 22:04:34 +0000"  >&lt;p&gt;I thought you had a solution that collects top-N, but your patch selects one (best) matching solution only. I don&apos;t know how you planned to go around selecting top-N, but in my understanding (at that moment) top-N selection is not going to work via recursive scan because an output at the given level doesn&apos;t tell you much about which arcs to follow. &lt;/p&gt;

&lt;p&gt;I can see how this can be solved by picking the arc/direction with the &quot;next smallest/largest&quot; output among all arcs traversed so far but this will be more complex and I cannot provide any bounds on how large the queue can be or what the   worst case lookup then is. I do have a feeling a degenerate example can be devised, but then I also have a feeling these are uncommon in practice.&lt;/p&gt;

&lt;p&gt;Sorting arcs by score doesn&apos;t help if you use the pq &amp;#8211; you need to add all of them to the pq and then pick the smallest path. In a way it is like what you did, but the pq is maintaining fast access to the next-smaller-cost path. Another feeling is that the PQ can be bound to a maximum size of N? Every arc leads to at least one leaf so while traversing you&apos;d drop those arcs that definitely would have fallen out of the first N smallest/largest weights... Yes, this could work. I&apos;d still try to devise a degenerate example to see what the cost of maintaining the PQ can be.&lt;/p&gt;</comment>
                    <comment id="13190541" author="dweiss" created="Sat, 21 Jan 2012 22:15:16 +0000"  >&lt;p&gt;If I seem inconsistent above then it&apos;s because I don&apos;t have ready-to-use answers and I&apos;m sort of thinking out loud &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13190543" author="rcmuir" created="Sat, 21 Jan 2012 22:29:07 +0000"  >&lt;blockquote&gt;
&lt;p&gt;we could combine the two approaches: still use buckets, but within each bucket we have a wFST (ie, use the &quot;true&quot; score), so we don&apos;t actually do any quantizing in the end results. Then bucketing is purely an optimization...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this idea!&lt;/p&gt;</comment>
                    <comment id="13190547" author="dweiss" created="Sat, 21 Jan 2012 22:57:02 +0000"  >&lt;p&gt;If my feeling is right and the PQ can be kept constant-size then it won&apos;t matter much at runtime I think. With realistic data distributions the number of elements to be inserted into the PQ before you reach the top-N will be pretty much the same &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. And the benefit would be a much cleaner traversal (no need to deal with buckets, early termination, etc.).&lt;/p&gt;</comment>
                    <comment id="13190752" author="mikemccand" created="Sun, 22 Jan 2012 19:56:15 +0000"  >&lt;p&gt;Patch, generalizing to a topN search from the wFST (not just top 1).  I fixed the random test to randomly pick a topN and it&apos;s passing!&lt;/p&gt;

&lt;p&gt;I think the cost is something like O(N * L) + O(N * log(N)), where N is the top N and L is the length of each completion.  The N * log(N) is because I use a TreeSet (PQ wasn&apos;t enough: I needed pollFirst and pollLast... for 3.x that&apos;ll have to be 2 method calls...)... but I suspect in practice it won&apos;t dominate, since N is typically smaller than L and the constant in front of that is tiny...&lt;/p&gt;

&lt;p&gt;Each path requires a traversal through the FST looking for the arcs with NO_OUTPUT, so if the FST has many non-competitive arcs that will definitely slow it down (by a &lt;span class=&quot;error&quot;&gt;&amp;#91;possibly large&amp;#93;&lt;/span&gt; constant factor).  We need to test on a real data set how slow it is....&lt;/p&gt;</comment>
                    <comment id="13190754" author="dweiss" created="Sun, 22 Jan 2012 20:04:29 +0000"  >&lt;p&gt;an example showing top-n with score and alpha order, pq (unbounded, but going for bounded should be simple).&lt;/p&gt;</comment>
                    <comment id="13190756" author="dweiss" created="Sun, 22 Jan 2012 20:07:37 +0000"  >&lt;p&gt;Damn, Again slower than McCandless... I didn&apos;t do a bounded queue but it&apos;s perfectly possible to do one. My patch just shows the algorithm, didn&apos;t check if Mike&apos;s version is the same but I suspect it must be close &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="13190773" author="mikemccand" created="Sun, 22 Jan 2012 20:50:02 +0000"  >&lt;p&gt;Ooh, your patch is doing the same algo as mine (best-first search)... yours is much simpler/smaller though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I think your tie break isn&apos;t quite right?  Because, those two arc.labels you use aren&apos;t necessarily &quot;comparable&quot;, since the two paths may not be the same length (hmm or share the same &quot;last parent&quot; node)?  You need to roll back and do a full compare of the accumulated input labels down that path?  I struggled with this too...&lt;/p&gt;

&lt;p&gt;I also took advantage of a neat property that every min/+ wFST will have (Robert pointed this out): the first arc (only) will have the min output, and then there must exist a NO_OUTPUT completion path from that arc to some final node.  So, I think my patch will visit paths in the same best-first order as yours, but I avoid the push/pop/new object into the queue for each arc traversed by greedily/recursively pursuing the first NO_OUTPUT arc I can find.  I only fall back to the queue when I need to find the next top-N path to pursue...&lt;/p&gt;
</comment>
                    <comment id="13190778" author="dweiss" created="Sun, 22 Jan 2012 21:04:44 +0000"  >&lt;p&gt;You&apos;re correct &amp;#8211; I should be comparing full paths so far, not the current label. Otherwise I see we&apos;re pretty much the same. I like the lower bound cutoff condition. I vaguely understand the NO_OUTPUT optimization. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;I like it, this indeed is a nice improvement - if somebody wants exact scores, they can have them.&lt;/p&gt;</comment>
                    <comment id="13193548" author="rcmuir" created="Thu, 26 Jan 2012 03:58:15 +0000"  >&lt;p&gt;patch with a prototype suggester.&lt;/p&gt;

&lt;p&gt;there are many nocommits: especially the encoding of weights is very inefficient and slows/bloats the fst (but easy for a prototype).&lt;/p&gt;

&lt;p&gt;We should make a better Outputs class with the algebra we need (e.g. max) and maybe think about floats in this suggester API (it seems from the API names like TermFreq that these are really frequencies so maybe we should define them as ints? I don&apos;t like floats because of all the hassles like NaN/inf)&lt;/p&gt;

&lt;p&gt;But even with this, the performance seems promising:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] ------------- Standard Error -----------------
    [junit] -- prefixes: 100-200, num: 7, onlyMorePopular: true
    [junit] JaspellLookup   queries: 50001, time[ms]: 91 [+- 6.59], ~qps: 547
    [junit] TSTLookup       queries: 50001, time[ms]: 33 [+- 1.55], ~qps: 1532
    [junit] FSTCompletionLookup queries: 50001, time[ms]: 163 [+- 13.04], ~qps: 307
    [junit] WFSTCompletionLookup queries: 50001, time[ms]: 55 [+- 1.50], ~qps: 910
    [junit] -- construction time
    [junit] JaspellLookup   input: 50001, time[ms]: 23 [+- 0.93]
    [junit] TSTLookup       input: 50001, time[ms]: 31 [+- 1.25]
    [junit] FSTCompletionLookup input: 50001, time[ms]: 72 [+- 1.73]
    [junit] WFSTCompletionLookup input: 50001, time[ms]: 69 [+- 2.50]
    [junit] -- RAM consumption
    [junit] JaspellLookup   size[B]:    7,869,415
    [junit] TSTLookup       size[B]:    7,914,524
    [junit] FSTCompletionLookup size[B]:      466,051
    [junit] WFSTCompletionLookup size[B]:      506,662
    [junit] -- prefixes: 6-9, num: 7, onlyMorePopular: true
    [junit] JaspellLookup   queries: 50001, time[ms]: 129 [+- 1.37], ~qps: 389
    [junit] TSTLookup       queries: 50001, time[ms]: 139 [+- 2.30], ~qps: 361
    [junit] FSTCompletionLookup queries: 50001, time[ms]: 177 [+- 1.62], ~qps: 282
    [junit] WFSTCompletionLookup queries: 50001, time[ms]: 85 [+- 12.74], ~qps: 592
    [junit] -- prefixes: 2-4, num: 7, onlyMorePopular: true
    [junit] JaspellLookup   queries: 50001, time[ms]: 363 [+- 16.75], ~qps: 138
    [junit] TSTLookup       queries: 50001, time[ms]: 1112 [+- 22.57], ~qps: 45
    [junit] FSTCompletionLookup queries: 50001, time[ms]: 140 [+- 3.16], ~qps: 356
    [junit] WFSTCompletionLookup queries: 50001, time[ms]: 242 [+- 4.01], ~qps: 207
    [junit] ------------- ---------------- ---------------
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13193637" author="dweiss" created="Thu, 26 Jan 2012 07:48:30 +0000"  >&lt;p&gt;Didn&apos;t look at the patch yet but this looks surprising:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;FSTCompletionLookup queries: 50001, time[ms]: 163 [+- 13.04], ~qps: 307
WFSTCompletionLookup queries: 50001, time[ms]: 55 [+- 1.50], ~qps: 910
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why would the previous version be so much slower? With onlyMorePopular=true this should be a single pass. Unless it&apos;s setup to bring exact match to the top and then there&apos;s a need to check multiple buckets with lower scores &amp;#8211; would that be it?&lt;/p&gt;</comment>
                    <comment id="13193804" author="rcmuir" created="Thu, 26 Jan 2012 12:54:35 +0000"  >&lt;p&gt;Thats the exact match case of the benchmark where it benchmarks the entire word being typed in completely?&lt;/p&gt;

&lt;p&gt;I didn&apos;t look at it because its not very interesting (TSTLookup looks super-fast here too)&lt;/p&gt;

&lt;p&gt;I think this is the interesting part:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] -- prefixes: 2-4, num: 7, onlyMorePopular: true
    [junit] JaspellLookup   queries: 50001, time[ms]: 363 [+- 16.75], ~qps: 138
    [junit] TSTLookup       queries: 50001, time[ms]: 1112 [+- 22.57], ~qps: 45
    [junit] FSTCompletionLookup queries: 50001, time[ms]: 140 [+- 3.16], ~qps: 356
    [junit] WFSTCompletionLookup queries: 50001, time[ms]: 242 [+- 4.01], ~qps: 207
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could of course toggle &apos;num&apos; etc and see how this comes out. Anyway I just wanted&lt;br/&gt;
to make sure the performance was &apos;in the ballpark&apos; and  competitive with the other&lt;br/&gt;
suggesters, I think for a lot of users thats all that matters, and whether its&lt;br/&gt;
400 QPS or 200QPS, probably doesnt matter so much... so I didnt tweak any further.&lt;/p&gt;</comment>
                    <comment id="13193832" author="mikemccand" created="Thu, 26 Jan 2012 13:38:55 +0000"  >&lt;p&gt;Awesome!  I haven&apos;t looked at patch yet... but the comparison is also apples/oranges right?&lt;/p&gt;

&lt;p&gt;Because WFSTCompletionLookup does no quantizing (bucketing), ie, it returns the &quot;true&quot; topN suggestions, so it has to do more work to differentiate hits that FSTCompletionLookup considers equal.&lt;/p&gt;

&lt;p&gt;I guess we could pre-quantize the weights into the same buckets that FSTCompletionLookup will use, when adding to WFSTCompletionLookup... then the results are comparable.&lt;/p&gt;

&lt;p&gt;But I guess we don&apos;t need to do this since the results are &quot;good enough&quot;...&lt;/p&gt;</comment>
                    <comment id="13193838" author="dweiss" created="Thu, 26 Jan 2012 13:48:57 +0000"  >&lt;p&gt;No, no, Mike &amp;#8211; I&apos;m all for going with exact, fine scores. That way even if WFSTCompletionLookup is slower it&apos;s still a real-life use case and FSTCompletionLookup (even if faster) will have a &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; saying it&apos;s not a complete solution.&lt;/p&gt;

&lt;p&gt;I like what Robert did (still didn&apos;t look at the patch), but I was just wondering why the hell difference for long prefixes. This is not a frequent case in real-life, just curiosity.&lt;/p&gt;</comment>
                    <comment id="13193845" author="mikemccand" created="Thu, 26 Jan 2012 13:57:39 +0000"  >&lt;p&gt;Sorry, I&apos;m not proposing we commit pre-quantizing the scores... I&apos;m&lt;br/&gt;
just saying we&apos;d learn more from the perf test that way.  Ie, is WFST&lt;br/&gt;
slower because 1) it&apos;s doing precise scores, or 2) the topN algo is&lt;br/&gt;
slowish.&lt;/p&gt;</comment>
                    <comment id="13193854" author="rcmuir" created="Thu, 26 Jan 2012 14:07:03 +0000"  >&lt;p&gt;I think the (existing) benchmark is fair: it just measures how fast each suggester returns the top-N.&lt;br/&gt;
Of course FSTSuggester buckets/early terminates and thats just a tradeoff it makes (having some impact on scores, possibly even positive).&lt;/p&gt;

&lt;p&gt;This is just like benchmarking different relevance ranking algorithms, which also compute the top-N differently...&lt;/p&gt;

&lt;p&gt;Keep in mind, I didnt optimize the implementation at all or profile anything. So there could be easy wins here.&lt;br/&gt;
But at this stage I think we just wanted to know its in the ballpark?&lt;/p&gt;</comment>
                    <comment id="13193855" author="dweiss" created="Thu, 26 Jan 2012 14:11:04 +0000"  >&lt;p&gt;Looked through the patch. Some comments:&lt;/p&gt;

&lt;p&gt;+        // nocommit: why does the benchmark test supply duplicates? what should we do in this case?&lt;/p&gt;

&lt;p&gt;ignore duplicates. I think it is allowed for the iterator to allow duplicates; I&apos;m not sure but this may even be used when bucketing input &amp;#8211; the same entry with a different score (before bucketing) may end up identical after sorting.&lt;/p&gt;

&lt;p&gt;+    // nocommit: shouldn&apos;t we have an option to&lt;br/&gt;
+    // match exactly even if its a crappy suggestion? we would just look&lt;br/&gt;
+    // for arc.isFinal here etc...&lt;/p&gt;

&lt;p&gt;Yes, this should definitely be an option because if it&apos;s an exact match then you&apos;ll probably want it on top of the suggestions list, no matter what.&lt;/p&gt;

&lt;p&gt;You could also add a generator of the &quot;bad case&quot; that I attached inside TestMe.java &amp;#8211; this creates the case when following greedily doesn&apos;t yield correct output (requires a pq).&lt;/p&gt;

&lt;p&gt;I also checked the benchmark and yes, it uses exactMatchFirst promotion. This clarifies the speed difference for longer prefixes &amp;#8211; not enough results are collected in any of the buckets so no early termination occurs and &lt;em&gt;all&lt;/em&gt; buckets must be traversed.&lt;/p&gt;

&lt;p&gt;I like WFSTCompletionLookup very much, clean and simple.&lt;/p&gt;</comment>
                    <comment id="13193865" author="rcmuir" created="Thu, 26 Jan 2012 14:37:07 +0000"  >&lt;p&gt;Dawid thanks for the comments: we can remove that first nocommit and then add an option&lt;br/&gt;
for the second one...&lt;/p&gt;

&lt;p&gt;I think as a step to move this forward we have to fix the output encoding to &lt;br/&gt;
not be (Integer.MAX_VALUE-weight). &lt;/p&gt;

&lt;p&gt;Seems like the best first step is to generify findMinPairs to T and to allow an arbitrary Comparator&lt;br/&gt;
so that we can muck around with the algebra? I looked at this and it seems possible...&lt;/p&gt;</comment>
                    <comment id="13193867" author="rcmuir" created="Thu, 26 Jan 2012 14:42:26 +0000"  >&lt;p&gt;also I&apos;m not sure I&apos;m in love with &quot;findMinPairs&quot;. Maybe we should call it &quot;shortestPaths&quot; ?&lt;/p&gt;</comment>
                    <comment id="13193950" author="mikemccand" created="Thu, 26 Jan 2012 16:35:53 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think the (existing) benchmark is fair: it just measures how fast each suggester returns the top-N.&lt;br/&gt;
 Of course FSTSuggester buckets/early terminates and thats just a tradeoff it makes (having some impact on scores, possibly even positive).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, I agree with that: it is a meaningful black-box comparison of two suggester impls.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;also I&apos;m not sure I&apos;m in love with &quot;findMinPairs&quot;. Maybe we should call it &quot;shortestPaths&quot; ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13194178" author="rcmuir" created="Thu, 26 Jan 2012 21:07:53 +0000"  >&lt;p&gt;updated patch nuking a couple nocommits: added the boolean exactMatchFirst (default=on like FSTSuggester), and removed the deduping nocommit.&lt;/p&gt;

&lt;p&gt;So the main remaining things are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fix the encoding of the weights&lt;/li&gt;
	&lt;li&gt;use the offline sort&lt;/li&gt;
	&lt;li&gt;figure out what onlyMorePopular means for suggesters and what we should do about it&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13195893" author="rcmuir" created="Mon, 30 Jan 2012 00:32:40 +0000"  >&lt;p&gt;I&apos;ve been wanting to work on this.. havent found the time.&lt;/p&gt;

&lt;p&gt;This just syncs the patch up to trunk&apos;s FST api changes.&lt;/p&gt;</comment>
                    <comment id="13207798" author="rcmuir" created="Tue, 14 Feb 2012 16:01:47 +0000"  >&lt;p&gt;I played with a lot of variations on this patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;generified the shortest path method to take things like Comparators/Comparable&lt;/li&gt;
	&lt;li&gt;tried different algebra/representations with that&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think we should keep the code wired to Long for now. according to the benchmark&lt;br/&gt;
any generification is like a 5-10% overall perf hit, and I don&apos;t see a need for&lt;br/&gt;
anything but Long.&lt;/p&gt;

&lt;p&gt;I think as far as representation, we need to integrate the offline sort, find min/max &lt;br/&gt;
float values and scale to &amp;lt;precision&amp;gt; space, e.g. if precision is 32 then &lt;br/&gt;
Integer.MAX_VALUE - scaledWeight. &lt;/p&gt;

&lt;p&gt;I tried different representations and they just add more complexity (e.g. negative outputs),&lt;br/&gt;
without saving much space at all. This patch uses Integer precision and is only 10% larger&lt;br/&gt;
than the previous impl.&lt;/p&gt;

&lt;p&gt;We don&apos;t even need precision to be configurable really,&lt;br/&gt;
we could wire it to integers as a start. But maybe later someone could specify it, e.g.&lt;br/&gt;
if they specified 8 then they basically get the same result as bucketed algorithm today...&lt;/p&gt;</comment>
                    <comment id="13211216" author="rcmuir" created="Sun, 19 Feb 2012 05:49:53 +0000"  >&lt;p&gt;Rounded out this patch: fixed it to use the offline sorting, added a random test (basically a port of the FST shortest-path test, but uses the suggester instead), and added a solr factory and some docs.&lt;/p&gt;

&lt;p&gt;I think its ready to go.&lt;/p&gt;</comment>
                    <comment id="13211386" author="rcmuir" created="Sun, 19 Feb 2012 15:35:20 +0000"  >&lt;p&gt;I&apos;ll commit this soon if there are no objections.&lt;/p&gt;

&lt;p&gt;I&apos;ll mark it experimental for now when committing.&lt;/p&gt;</comment>
                    <comment id="13211405" author="rcmuir" created="Sun, 19 Feb 2012 16:41:46 +0000"  >&lt;p&gt;Committed to trunk: working on the backport now.&lt;/p&gt;

&lt;p&gt;I&apos;m gonna measure any perf difference from the pollFirst/pollLast stuff... if there is a slowdown&lt;br/&gt;
we can deal with that on a separate issue (maybe there is some way to prevent a slowdown, at least&lt;br/&gt;
if java 6 is actually whats being used)... but maybe it doesn&apos;t affect overall suggest speed anyway.&lt;/p&gt;</comment>
                    <comment id="13211410" author="rcmuir" created="Sun, 19 Feb 2012 17:03:56 +0000"  >&lt;p&gt;I ran the benchmarks, no measurable difference, makes it easy. Will commit &lt;br/&gt;
the backport soon after ant test/javadocs with java5 are finished.&lt;/p&gt;</comment>
                    <comment id="13211421" author="rcmuir" created="Sun, 19 Feb 2012 17:19:08 +0000"  >&lt;p&gt;Backported to 3.x too, I think we can iterate from here with other issues!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12523000">SOLR-2761</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12515119" name="LUCENE-3714.patch" size="38639" author="rcmuir" created="Sun, 19 Feb 2012 05:49:53 +0000" />
                    <attachment id="12512379" name="LUCENE-3714.patch" size="28690" author="rcmuir" created="Mon, 30 Jan 2012 00:32:40 +0000" />
                    <attachment id="12512036" name="LUCENE-3714.patch" size="31488" author="rcmuir" created="Thu, 26 Jan 2012 21:07:53 +0000" />
                    <attachment id="12511941" name="LUCENE-3714.patch" size="31399" author="rcmuir" created="Thu, 26 Jan 2012 03:58:15 +0000" />
                    <attachment id="12511439" name="LUCENE-3714.patch" size="18596" author="mikemccand" created="Sun, 22 Jan 2012 19:56:15 +0000" />
                    <attachment id="12511405" name="LUCENE-3714.patch" size="6778" author="rcmuir" created="Sat, 21 Jan 2012 19:14:41 +0000" />
                    <attachment id="12511408" name="out.png" size="64583" author="dweiss" created="Sat, 21 Jan 2012 20:25:38 +0000" />
                    <attachment id="12511440" name="TestMe.java" size="4551" author="dweiss" created="Sun, 22 Jan 2012 20:04:29 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 21 Jan 2012 20:25:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>224811</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23984</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>