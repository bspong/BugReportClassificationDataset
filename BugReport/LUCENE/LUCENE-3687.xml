<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:18 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3687/LUCENE-3687.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3687] Allow similarity to encode norms other than a single byte</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3687</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3628&quot; title=&quot;Cut Norms over to DocValues&quot;&gt;&lt;del&gt;LUCENE-3628&lt;/del&gt;&lt;/a&gt; cut over norms to docvalues. This removes the long standing limitation that norms are a single byte. Yet, we still need to expose this functionality to Similarity to write / encode norms in a different format. &lt;/p&gt;</description>
                <environment></environment>
            <key id="12538039">LUCENE-3687</key>
            <summary>Allow similarity to encode norms other than a single byte</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Jan 2012 11:29:29 +0000</created>
                <updated>Fri, 10 May 2013 11:44:28 +0100</updated>
                    <resolved>Mon, 16 Jan 2012 14:57:34 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13184003" author="simonw" created="Wed, 11 Jan 2012 11:37:06 +0000"  >&lt;p&gt;here is a first patch allowing similarity be more flexible when encoding norms. This patch  allows similarity to write all numeric values plus fixed bytes. I tried to keep the actual DocValues type out of similarity to reduce complexity. From my perspective this is a fair game here not exposing the entire power of DocValues to similarity to reduce complexity in the API. &lt;/p&gt;

&lt;p&gt;I cleaned up the Lucene4FieldInfoFormat and added a preflex and 3x version. The 3x version is read-only and only deals with what was supported in 3x. 4x FieldInfo format has no backwards logic in there anymore too. &lt;/p&gt;

&lt;p&gt;The preflex version is slightly different. Even that this is a 3x mock codec for RW support I need to write fieldnumbers since the actual FI ord might be different from the field number assigned by the trunk IW. so I have a special format for this.&lt;/p&gt;

&lt;p&gt;there is certainly room for improvement but its a start. comments are welcome&lt;/p&gt;</comment>
                    <comment id="13184300" author="simonw" created="Wed, 11 Jan 2012 19:22:11 +0000"  >&lt;p&gt;what a typo... s/omit/emit in the patch! anyway I think we should name the methos setXXX instead.&lt;/p&gt;</comment>
                    <comment id="13184346" author="rcmuir" created="Wed, 11 Jan 2012 20:17:12 +0000"  >&lt;p&gt;I havent done a full review but with the typo fix I am very happy with the sim api. &lt;/p&gt;

&lt;p&gt;I also understand the preflex problem and I totally agree with the solution here.&lt;/p&gt;</comment>
                    <comment id="13184877" author="simonw" created="Thu, 12 Jan 2012 11:26:51 +0000"  >&lt;p&gt;new patch with setXXX methods on Norm class. I also fixed some JavaDoc issues since computeNorm signature has changed. All tests pass but still need to add JavaDoc to the norms class. &lt;/p&gt;

&lt;p&gt;patch created with svn diff --show-copies-as-adds for readability.&lt;/p&gt;</comment>
                    <comment id="13185510" author="simonw" created="Fri, 13 Jan 2012 09:11:49 +0000"  >&lt;p&gt;new patch. added some cleanups + javadoc.&lt;br/&gt;
I now throw a hard IArgExc if sim emits different types for the same field and added tests to check if that is happening.&lt;/p&gt;

&lt;p&gt;I also remove setByte in favor of setInt(byte) &lt;/p&gt;

&lt;p&gt;I think its ready!&lt;/p&gt;</comment>
                    <comment id="13185520" author="rcmuir" created="Fri, 13 Jan 2012 09:36:01 +0000"  >&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;I also remove setByte in favor of setInt(byte)&lt;br/&gt;
{quote]&lt;/p&gt;

&lt;p&gt;Why? this is really confusing! I think setByte should take byte, setInt int, setLong, long etc.&lt;/p&gt;
</comment>
                    <comment id="13185524" author="rcmuir" created="Fri, 13 Jan 2012 09:47:07 +0000"  >&lt;p&gt;I just saw DocValuesField has this same problem. Ill open a separate issue for that.&lt;/p&gt;

&lt;p&gt;But this is a real serious trap. Overloading setint as setInt(short) setInt(int) setInt(byte) setInt(long),&lt;br/&gt;
besides being confusing (and I see no advantage to doing this), has the nice property&lt;br/&gt;
of easily quadrupling peoples norms with no type safety unless they are like, peeking at &lt;br/&gt;
their generated bytecode to verify java didn&apos;t promote them up to setInt(int)&lt;/p&gt;

&lt;p&gt;by making it setByte(byte) instead, if they don&apos;t pass an actual byte they will get&lt;br/&gt;
a compile error.&lt;/p&gt;</comment>
                    <comment id="13185533" author="thetaphi" created="Fri, 13 Jan 2012 10:12:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why? this is really confusing! I think setByte should take byte, setInt int, setLong, long etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. That&apos;s also a problem in other DocValues use cases like sorting. The SortField name uses INT but sorts by long and so on. There is already an issue open: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3192&quot; title=&quot;SortField.INT / SortField.FLOAT inconsistency with DocValues&quot;&gt;LUCENE-3192&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13185544" author="simonw" created="Fri, 13 Jan 2012 11:01:53 +0000"  >&lt;p&gt;I agree, I will change this accordingly for all methods in Norm. Any other comments?&lt;/p&gt;</comment>
                    <comment id="13186315" author="rcmuir" created="Sat, 14 Jan 2012 19:43:00 +0000"  >&lt;p&gt;I think otherwise the patch is great.&lt;/p&gt;

&lt;p&gt;we really needed to split out fieldinfos implementations for 3.x and 4.x, for example&lt;br/&gt;
this will be useful to support offsets in the postings lists for lucene4xcodec (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3684&quot; title=&quot;Add offsets to postings (D&amp;amp;PEnum)&quot;&gt;&lt;del&gt;LUCENE-3684&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;a few minor/trivial comments:&lt;/p&gt;

&lt;p&gt;in PreFlexRW and SimpleText&apos;s impl:&lt;br/&gt;
throw new IllegalArgumentException(&quot;Codec only supports single byte norm values. Type give: &quot; + type);&lt;br/&gt;
I think this should be UOE?&lt;/p&gt;

&lt;p&gt;shouldn&apos;t we combine Norm and DocValueNorm into one final class (Norm) and pull it out of Sim?&lt;br/&gt;
I don&apos;t think it needs to be inside Sim anymore, as I don&apos;t see any usefulness to making your own&lt;br/&gt;
subclass (how will this affect scoring versus just using the DocValueNorm impl)&lt;/p&gt;

&lt;p&gt;Is there any other use case to Norm being abstract? iff there is, shouldnt normsconsumer&lt;span class=&quot;error&quot;&gt;&amp;#91;perfield&amp;#93;&lt;/span&gt; pull the impl from the codec?&lt;/p&gt;</comment>
                    <comment id="13186320" author="rcmuir" created="Sat, 14 Jan 2012 19:56:38 +0000"  >&lt;p&gt;Two more questions:&lt;/p&gt;

&lt;p&gt;In the patch omitNorms is still a separate boolean from normValueType == null.&lt;br/&gt;
If this is the case, aren&apos;t we now able to represent (in 4.x codec) that norms are not omitted for the field,&lt;br/&gt;
they just don&apos;t exist at all (e.g. all documents without norms are deleted).&lt;br/&gt;
Couldn&apos;t we take advantage of this to provide a true fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3678&quot; title=&quot;TestAddIndexes fails (norms file not found)&quot;&gt;&lt;del&gt;LUCENE-3678&lt;/del&gt;&lt;/a&gt;, removing the bogus fileExists() stuff in NormsFormat&apos;s files()?&lt;/p&gt;

&lt;p&gt;What happens if a sim doesnt ever set anything in computeNorm at all for a field? &lt;br/&gt;
Previously this was &apos;required&apos; because the method required that you return a byte.&lt;br/&gt;
I think, if we do the above and are able to separately represent &apos;doesnt hvae any norms for this segment&apos; &lt;br/&gt;
from &apos;omitNorms for this field always&apos;, that we would just have normValueType as null, and it would all just work?&lt;/p&gt;</comment>
                    <comment id="13186328" author="simonw" created="Sat, 14 Jan 2012 20:21:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;in PreFlexRW and SimpleText&apos;s impl:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree this should be UOE&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;shouldn&apos;t we combine Norm and DocValueNorm into one final class (Norm) and pull it out of Sim?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I kind of like the separation here. DocValues is really the Codec side of things and it would be nice if we would not mix that stuff in the similarity API.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If this is the case, aren&apos;t we now able to represent (in 4.x codec) that norms are not omitted for the field, they just don&apos;t exist at all (e.g. all documents without norms are deleted).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah we can do that I will look into it but I am not sure if we should rather let that patch bake in for a bit and then do that change in a second issue. Would make debugging simpler if we run into problems.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;from &apos;omitNorms for this field always&apos;, that we would just have normValueType as null, and it would all just work?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, maybe its better to get this right in this patch already I can still move the stupid file checks removed in a second issue. But I should really handle null types ie. Sims that don&apos;t set a value, currently I have tons of asserts that enforce a value.&lt;/p&gt;</comment>
                    <comment id="13186335" author="rcmuir" created="Sat, 14 Jan 2012 20:44:11 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I kind of like the separation here. DocValues is really the Codec side of things and it would be nice if we would not mix that stuff in the similarity API.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But what is the use case of having a separate Abstract class (Norm) from an implementation class (DocValueNorm) that the codec doesn&apos;t even provide (its instantiated as DocValues by normsconsumer&lt;span class=&quot;error&quot;&gt;&amp;#91;perfield&amp;#93;&lt;/span&gt; directly.&lt;/p&gt;

&lt;p&gt;If we are going to have separate classes, then norm should be abstract and the codec should provide the implementation. But we need a real use case as to why a codec would need to customize the implementation of Norm to justify this.&lt;/p&gt;</comment>
                    <comment id="13186338" author="simonw" created="Sat, 14 Jan 2012 20:51:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we are going to have separate classes, then norm should be abstract and the codec should provide the implementation. But we need a real use case as to why a codec would need to customize the implementation of Norm to justify this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;maybe we should. if a user wants to do crazy stuff with norms ie. use packed ints for norms or var length bytes they should be able the do this ie return a different type then we do right now?&lt;/p&gt;</comment>
                    <comment id="13186340" author="rcmuir" created="Sat, 14 Jan 2012 21:01:01 +0000"  >&lt;blockquote&gt;
&lt;p&gt;maybe we should. if a user wants to do crazy stuff with norms ie. use packed ints for norms or var length bytes they should be able the do this ie return a different type then we do right now?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What crazy stuff would they be doing? Keep in mind that the only thing you can put in a norm is stuff from FieldInvertState.&lt;/p&gt;</comment>
                    <comment id="13186342" author="rcmuir" created="Sat, 14 Jan 2012 21:09:26 +0000"  >&lt;blockquote&gt;
&lt;p&gt;yeah we can do that I will look into it but I am not sure if we should rather let that patch bake in for a bit and then do that change in a second issue. Would make debugging simpler if we run into problems.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, that case is crazy today and it shouldn&apos;t block nor confuse the issue. I just wanted us to have a plan for the file format. Otherwise there is no point in writing OMIT_NORMS bit in the fieldinfoswriter because it could be represented by normValueType of 0.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I agree, maybe its better to get this right in this patch already I can still move the stupid file checks removed in a second issue. But I should really handle null types ie. Sims that don&apos;t set a value, currently I have tons of asserts that enforce a value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This isn&apos;t a huge deal though, its mostly just curiousity. Previously you always had to return something, we didnt even have the option for a sim (like basic tf * idf) to not encode any length normalization information. The way you had to do that before was to return a bogus byte in computeNorm and ensure you always did omitNorms for the field.&lt;/p&gt;

&lt;p&gt;If its tricky or messy, in my opinion we could even just add an assertion for now and document &quot;you must set something&quot; in Similarity, because its a lower level API than it was in previous release (most people would generally extend higher level stuff like BM25Similarity, TFIDFSimilarity,  or even DefaultSimilarity that do not expose this stuff).&lt;/p&gt;</comment>
                    <comment id="13186484" author="simonw" created="Sun, 15 Jan 2012 11:42:25 +0000"  >&lt;p&gt;new patch &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;renamed setXXX to setDouble, setFloat etc.&lt;/li&gt;
	&lt;li&gt;moved Norm our of similarity and merged it with DocValueNorm&lt;/li&gt;
	&lt;li&gt;use UOE in simpletext and 3x norms&lt;/li&gt;
	&lt;li&gt;utilize normValueType to actually not write norms if only bogus norms would be written. Lucene4 can now check if norms are present without looking at the directory.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;this patch actually doesn&apos;t even write norms if not absolutely needed. Do we have any requirement that this needs to happen even if there is not a single doc with norms in that field? I removed all the crazy 0 value writing in NormsConsumer and still all tests pass. If there is a case where these bogus norms are required we need to have a test for it.&lt;/p&gt;</comment>
                    <comment id="13186638" author="mikemccand" created="Mon, 16 Jan 2012 01:03:09 +0000"  >&lt;p&gt;This looks great!  I love how you pass Norm to the sim and it sets&lt;br/&gt;
what it wants...&lt;/p&gt;

&lt;p&gt;Hmm... Norm impls DocValue which I just removed... maybe we should add&lt;br/&gt;
it back?&lt;/p&gt;

&lt;p&gt;Very nice to have a private 3x FieldInfos reader/writer!&lt;/p&gt;

&lt;p&gt;What happens if an app (incorrectly) tries to change up the normType&lt;br/&gt;
suddenly...?  If you change in the middle of an IW session... it&apos;s&lt;br/&gt;
quietly ignored and you get 0/empty bytes indexed instead?&lt;br/&gt;
(FieldInfo.setNormValueType silently does nothing if it&apos;s already&lt;br/&gt;
set).  Can we throw an exception if it&apos;s already set to a conflicting&lt;br/&gt;
value?&lt;/p&gt;

&lt;p&gt;If you change on a new IW session... they will be merged according to&lt;br/&gt;
the normal type promotion rules of doc values right?&lt;/p&gt;

&lt;p&gt;Maybe instead of set and reset methods on FieldInfo just have a single&lt;br/&gt;
set method with force boolean?&lt;/p&gt;

&lt;p&gt;This fails for me:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] Testsuite: org.apache.solr.search.function.TestFunctionQuery
    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 0.939 sec
    [junit] 
    [junit] ------------- Standard Error -----------------
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestFunctionQuery -Dtestmethod=testGeneral -Dtests.seed=-406004cdb5fb0321:-4f9a2e7a9fa49aa4:7de466246285c0e9 -Dargs=&quot;-Dfile.encoding=UTF-8&quot;
    [junit] NOTE: test params are: codec=Lucene40: {}, sim=RandomSimilarityProvider(queryNorm=true,coord=true): {}, locale=ro, timezone=Europe/Malta
    [junit] NOTE: all tests run in this JVM:
    [junit] [TestFunctionQuery]
    [junit] NOTE: Linux 2.6.33.6-147.fc13.x86_64 amd64/Sun Microsystems Inc. 1.6.0_21 (64-bit)/cpus=24,threads=1,free=171062240,total=239534080
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testGeneral(org.apache.solr.search.function.TestFunctionQuery):	Caused an ERROR
    [junit] null
    [junit] java.lang.NullPointerException
    [junit] 	at org.apache.solr.search.function.TestFunctionQuery.testGeneral(TestFunctionQuery.java:352)
    [junit] 	at org.apache.lucene.util.LuceneTestCase$3$1.evaluate(LuceneTestCase.java:528)
    [junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:165)
    [junit] 	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="13186865" author="simonw" created="Mon, 16 Jan 2012 11:04:17 +0000"  >&lt;p&gt;here is a new patch with changes.txt and more tests for cases where norms are not written but also not omitted.&lt;/p&gt;

&lt;p&gt;all tests pass, I think this is ready though!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hmm... Norm impls DocValue which I just removed... maybe we should add it back?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I used DocValuesField as a delegate in this patch. I don&apos;t think we need this interface at this point.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; &lt;br/&gt;
What happens if an app (incorrectly) tries to change up the normType suddenly...? If you change in the middle of an IW session... it&apos;s quietly ignored and you get 0/empty bytes indexed instead? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;there is a test for this in TestCustomNorms (testExceptionOnRandomType) it throws a IAE in NormsConsumerPerField.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;(FieldInfo.setNormValueType silently does nothing if it&apos;s already&lt;br/&gt;
set). Can we throw an exception if it&apos;s already set to a conflicting&lt;br/&gt;
value?&lt;/p&gt;&lt;/blockquote&gt; 

&lt;p&gt;I added some logic in there to throw an exc if it is not forced and the value != null.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; If you change on a new IW session... they will be merged according to&lt;br/&gt;
the normal type promotion rules of doc values right? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;right!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe instead of set and reset methods on FieldInfo just have a single&lt;br/&gt;
set method with force boolean?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;done! I also added some sugar to FieldInfo to check if the norms are present.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This fails for me:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;fixed my fault&lt;/p&gt;</comment>
                    <comment id="13186923" author="simonw" created="Mon, 16 Jan 2012 13:51:42 +0000"  >&lt;p&gt;I plan to commit this soon if nobody objects.&lt;/p&gt;</comment>
                    <comment id="13186937" author="mikemccand" created="Mon, 16 Jan 2012 14:25:40 +0000"  >&lt;p&gt;Patch looks good!  Small typo in FieldInfo.setNormValueType &quot;Norn type...&quot; --&amp;gt; &quot;Norm type...&quot;.&lt;/p&gt;

&lt;p&gt;I don&apos;t like the inconsistency of Field.setValue(T value) but Norm.setT(T value)... we should somehow reconcile how we name the native type setters on these &quot;value holder&quot; classes... but we can sort this later.&lt;/p&gt;

&lt;p&gt;You can remove the unused BytesRef spare in NormsConsumerPerField...&lt;/p&gt;</comment>
                    <comment id="13186953" author="simonw" created="Mon, 16 Jan 2012 14:57:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;Patch looks good! Small typo in FieldInfo.setNormValueType &quot;Norn type...&quot; --&amp;gt; &quot;Norm type...&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will fix that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t like the inconsistency of Field.setValue(T value) but Norm.setT(T value)... we should somehow reconcile how we name the native type setters on these &quot;value holder&quot; classes... but we can sort this later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I will open a followup issue&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You can remove the unused BytesRef spare in NormsConsumerPerField...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;done!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310040">
                <name>Required</name>
                                <outwardlinks description="requires">
                            <issuelink>
            <issuekey id="12538299">LUCENE-3694</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12510691" name="LUCENE-3687.patch" size="162353" author="simonw" created="Mon, 16 Jan 2012 11:04:17 +0000" />
                    <attachment id="12510622" name="LUCENE-3687.patch" size="152228" author="simonw" created="Sun, 15 Jan 2012 11:42:25 +0000" />
                    <attachment id="12510477" name="LUCENE-3687.patch" size="106569" author="simonw" created="Fri, 13 Jan 2012 09:11:49 +0000" />
                    <attachment id="12510361" name="LUCENE-3687.patch" size="94766" author="simonw" created="Thu, 12 Jan 2012 11:26:51 +0000" />
                    <attachment id="12510176" name="LUCENE-3687.patch" size="86997" author="simonw" created="Wed, 11 Jan 2012 11:37:06 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 11 Jan 2012 20:17:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>223546</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24011</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>