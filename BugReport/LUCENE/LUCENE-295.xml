<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:22 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-295/LUCENE-295.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-295] [PATCH] MultiSearcher problems with Similarity.docFreq()</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-295</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;When MultiSearcher invokes its subsearchers, it is the subsearchers&apos; docFreq()&lt;br/&gt;
that is accessed by Similarity.docFreq().  This causes idf&apos;s to be computed&lt;br/&gt;
local to each index rather than globally, which causes ranking across multiple&lt;br/&gt;
indices to not be equivalent to ranking across the entire global collection.&lt;/p&gt;

&lt;p&gt;The attached files (if I can figure out how to attach them) provide a potential&lt;br/&gt;
partial solution for this.  They properly fix a simple test case, RankingTest,&lt;br/&gt;
that was provided by Daniel Naber.&lt;/p&gt;

&lt;p&gt;The changes are:&lt;br/&gt;
  1.  Searcher:  Add topmostSearcher() field with getter and setter to record&lt;br/&gt;
the outermost Searcher.  Default to this.&lt;br/&gt;
  2.  MultiSearcher:  Pass down the topmostSearcher when creating the subsearchers.&lt;br/&gt;
  3.  IndexSearcher:  Call Query.weight() everywhere with the topmostSearcher&lt;br/&gt;
instead of this.&lt;br/&gt;
  4.  Query:  Provide a default implementation of Query.combine() so that&lt;br/&gt;
MultiSearcher works with all queries.&lt;/p&gt;

&lt;p&gt;Problems or possible problems I see:&lt;br/&gt;
  1.  This does not address the same issue with RemoteSearchable. &lt;br/&gt;
RemoteSearchable is not a Searcher, nor can it be due to lack of multiple&lt;br/&gt;
inheritance in Java, but Query.weight() requires a Searcher.  Perhaps&lt;br/&gt;
Query.weight() should be changed to take a Searchable, but this requires&lt;br/&gt;
changing many places and I suspect would break apps.&lt;br/&gt;
  2.  There may be other places that topmostSearcher should be used instead of this.&lt;br/&gt;
  3.  The default implementation for Query.combine() is a guess on my part - it&lt;br/&gt;
works for TermQuery.  It&apos;s fragile in that the default implementation will hide&lt;br/&gt;
bugs caused by queries that inadvertently omit a more precise Query.combine()&lt;br/&gt;
method.&lt;br/&gt;
  4.  The prior comment on Query.combine() indicates that whoever wrote it was&lt;br/&gt;
fully aware of this problem and so probably had another usage in mind, so the&lt;br/&gt;
whole issue may just be Daniel&apos;s usage in the test case.  It&apos;s not apparent to&lt;br/&gt;
me, so I probably don&apos;t understand something.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
            <key id="12314445">LUCENE-295</key>
            <summary>[PATCH] MultiSearcher problems with Similarity.docFreq()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="java-dev@lucene.apache.org">Lucene Developers</assignee>
                                <reporter username="chuck@manawiz.com">Chuck Williams</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Oct 2004 09:11:33 +0100</created>
                <updated>Sat, 27 May 2006 02:38:39 +0100</updated>
                    <resolved>Sat, 27 May 2006 02:38:39 +0100</resolved>
                            <version>1.4</version>
                                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12321963" author="chuck@manawiz.com" created="Fri, 22 Oct 2004 09:15:01 +0100"  >&lt;p&gt;Created an attachment (id=13175)&lt;br/&gt;
Modified files for MultiSearcher / Similarity incompatibility&lt;/p&gt;</comment>
                    <comment id="12321964" author="daniel.naber@t-online.de" created="Sat, 23 Oct 2004 02:58:40 +0100"  >&lt;p&gt;Created an attachment (id=13194)&lt;br/&gt;
Chuck&apos;s changes as a diff&lt;/p&gt;</comment>
                    <comment id="12321965" author="daniel.naber@t-online.de" created="Sat, 23 Oct 2004 03:00:22 +0100"  >&lt;p&gt;Chuck, thanks for the files. I cannot judge if that&apos;s the correct/best way to &lt;br/&gt;
fix the problem. I&apos;ve attached a diff built from your new files so that &lt;br/&gt;
someone will hopefully review your changes. &lt;/p&gt;</comment>
                    <comment id="12321966" author="siberski@learninglab.de" created="Fri, 12 Nov 2004 17:39:11 +0000"  >&lt;p&gt;Created an attachment (id=13413)&lt;br/&gt;
Patch to MultiSearcher.java to correct idf calculation&lt;/p&gt;</comment>
                    <comment id="12321967" author="siberski@learninglab.de" created="Fri, 12 Nov 2004 17:55:04 +0000"  >&lt;p&gt;Here is another patch to correct the idf calculation. This patch currently is&lt;br/&gt;
kind of proof of concept (fixes Daniel Nabers test case), but not ready for&lt;br/&gt;
commitment, as it breaks ParallelMultiSearcher.java and several test cases. &lt;/p&gt;

&lt;p&gt;Instead of Chucks Williams patch, this one relies on a specialized Similarity&lt;br/&gt;
object which is passed to the searchers. This causes less changes (only&lt;br/&gt;
MultiSearcher is affected), and IMHO fits better into Lucene&apos;s design, because&lt;br/&gt;
Similarity is responsible for idf calculation anyway, but the Searchers aren&apos;t.&lt;/p&gt;

&lt;p&gt;Problems:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The Similarity object can&apos;t be passed to RemoteSearchables, so the patch works&lt;br/&gt;
only for Searchers.&lt;/li&gt;
	&lt;li&gt;MultiSearcher.search() methods aren&apos;t thread-safe anymore. The only way to&lt;br/&gt;
provide the Searches with the new Similarity object is to use setSimilarity().&lt;br/&gt;
This causes &lt;b&gt;all&lt;/b&gt; searches to use it, not only the search which is currently&lt;br/&gt;
running.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A better solution would be to add the Similarity object to the Query. While ther&lt;br/&gt;
e is already a similarity attribute in the Query, there is no Method to set it,&lt;br/&gt;
and also interaction with subqueries is unclear. Such a change would therefore&lt;br/&gt;
require a major redesign of similarity handling. If we make Similarity&lt;br/&gt;
serializable, then we could pass the object to RemoteSearchers too, as part of&lt;br/&gt;
the query. If I find time, I&apos;ll submit a complete patch in the future.&lt;/p&gt;</comment>
                    <comment id="12321968" author="siberski@learninglab.de" created="Mon, 15 Nov 2004 21:24:32 +0000"  >&lt;p&gt;Created an attachment (id=13464)&lt;br/&gt;
Complete patch to allow specification the Similarity on a query-by-query case&lt;/p&gt;

&lt;p&gt;This is a followup on my patch/comment from 2004-11-12. The patch attached now&lt;br/&gt;
is complete, i.e. everything compiles and no test case is broken by it.&lt;br/&gt;
The main idea is that a setSimilarity() method and a similarity attributed is&lt;br/&gt;
added to Query. If the similarity is not set, the query uses the Searcher&apos;s&lt;br/&gt;
similarity as before. However, if one sets the Similarity on the query, this&lt;br/&gt;
one takes precedence.&lt;br/&gt;
To solve the MultiSearcher issue, I have provided two different Similarities:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;MultiSimilarity delegates the docFreq() and maxDoc() calls to the&lt;br/&gt;
MultiSearcher, thus retrieving the sum over all registered searchers.&lt;br/&gt;
This Similarity always &apos;gets it right&apos;, but obviously doesn&apos;t work with&lt;br/&gt;
RemoteSearchables.&lt;/li&gt;
	&lt;li&gt;DfMapSimilarity analyses a query and caches all necessary docFreq values.&lt;br/&gt;
This Similarity is Serializable and therefore works with RemoteSearchables,&lt;br/&gt;
too. However, it is not able to handle queries where the term set is not known&lt;br/&gt;
beforehand, e.g. wildcard queries.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both problems mentioned in my previous comment (thread-safety and remote&lt;br/&gt;
searcher compatibility) are solved by this patch. All test cases work&lt;br/&gt;
unchanged with the exception of one test case which had been tweaked&lt;br/&gt;
previously due to the incorrect MultiSearcher and now works as expected&lt;br/&gt;
(TestSort.testNormalizedScores()).&lt;/p&gt;

&lt;p&gt;Problems:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DfMapSimilarity.collectDfs() contains a lot of ugly casts to Query&lt;br/&gt;
subclasses.&lt;br/&gt;
  This could be avoided by adding another abstract method to Query, but it is&lt;br/&gt;
  unclear if this is really the better solution.&lt;/li&gt;
	&lt;li&gt;In this patch the choice for DfMapSimilarity is hard-coded into&lt;br/&gt;
MultiSearcher. This should be made configurable.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12321969" author="daniel.naber@t-online.de" created="Wed, 5 Jan 2005 07:49:23 +0000"  >&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Bug 32053 has been marked as a duplicate of this bug. ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12321970" author="siberski@learninglab.de" created="Thu, 10 Feb 2005 19:33:34 +0000"  >&lt;p&gt;Created an attachment (id=14242)&lt;br/&gt;
New patch based on the discussion on lucene-dev (intermediate version)&lt;/p&gt;

&lt;p&gt;According to my understanding of our dev-lucene discussion Multisearcher should&lt;br/&gt;
evaluate queries in the following way:&lt;br/&gt;
1. rewrite queries using the Multisearch Similarity&lt;br/&gt;
2. extract necessary terms&lt;br/&gt;
3. collect idfs for these terms from the Searchables&lt;br/&gt;
4. adjust query boosts according to collected idfs&lt;br/&gt;
5. distribute re-written and re-boosted query to Searchables&lt;br/&gt;
6. merge results&lt;/p&gt;

&lt;p&gt;This patch implements all steps except 4, where it uses a modified Similarity&lt;br/&gt;
class instead. Thus it is fully functional, but not yet ready for commit.&lt;/p&gt;</comment>
                    <comment id="12321971" author="siberski@learninglab.de" created="Fri, 18 Feb 2005 20:33:09 +0000"  >&lt;p&gt;Created an attachment (id=14312)&lt;br/&gt;
New patch based on the discussion on lucene-dev (complete)&lt;/p&gt;

&lt;p&gt;This is a complete version, from my point of view ready for prime time.&lt;/p&gt;

&lt;p&gt;Now a query can be &apos;frozen&apos;. A frozen query always returns the most&lt;br/&gt;
recently created Weight when calling Query.weight().&lt;/p&gt;

&lt;p&gt;MultiSearcher query processing is now done in the following steps:&lt;br/&gt;
   1. rewrite query&lt;br/&gt;
   2. extract necessary terms&lt;br/&gt;
   3. collect dfs for these terms from the Searchables&lt;br/&gt;
   4. create query weights using aggregate dfs and &lt;b&gt;freeze query&lt;/b&gt;.&lt;br/&gt;
   5. distribute weighted and frozen query to Searchables&lt;br/&gt;
   6. merge results&lt;/p&gt;</comment>
                    <comment id="12321972" author="cutting@apache.org" created="Tue, 22 Feb 2005 02:49:14 +0000"  >&lt;p&gt;This looks good.  Thanks!&lt;/p&gt;

&lt;p&gt;A few comments:&lt;/p&gt;

&lt;p&gt;Orignally there was no Weight in Lucene, only Query and Scorer.  Weight was&lt;br/&gt;
added in order to make it so that searching did not modify a Query, so that a&lt;br/&gt;
Query instance could be reused.  Searcher-dependent state of the query is meant&lt;br/&gt;
to reside in the Weight.  IndexReader dependent state resides in the Scorer. &lt;br/&gt;
Your &quot;freezing&quot; a query violates this.  Can&apos;t we create the weight once in&lt;br/&gt;
Searcher.search?&lt;/p&gt;

&lt;p&gt;CachedDfSource does not need to be public does it?&lt;/p&gt;

&lt;p&gt;We need to think about back-compatibliity.  Folks have implementations of Query,&lt;br/&gt;
Weight, Similarity and Scorer.  So, when a public API changes we need to&lt;br/&gt;
deprecate, not remove, old methods, and try hard to make the old version still&lt;br/&gt;
work.  So, for example, we need to figure out how to handle the case where folks&lt;br/&gt;
have implemented the old Similarity.idf() methods.&lt;/p&gt;

&lt;p&gt;You no longer call Query.getSimilarity(Searcher).  That method permits queries&lt;br/&gt;
to override the Searcher&apos;s Similarity implementation.  Is there a reason you do&lt;br/&gt;
this?  We should be computing DFs once for the whole query tree, but it should&lt;br/&gt;
still be possible to compute, e.g., IDFs independently per node, no?&lt;/p&gt;

&lt;p&gt;I also wonder if, instead of adding DocFreqSource we could instead still use the&lt;br/&gt;
Searcher.  MultiSearcher could keep an LRU cache of total doc freqs, implemented&lt;br/&gt;
with LinkedHashMap, for the last few thousand search terms.  That would be a far&lt;br/&gt;
less invasive change, and hence less likely to break folks.  Or am I missing&lt;br/&gt;
something?&lt;/p&gt;

&lt;p&gt;Sorry if I seem picky, but this is core stuff in Lucene and affects a lot of people.&lt;/p&gt;</comment>
                    <comment id="12321973" author="siberski@learninglab.de" created="Wed, 23 Feb 2005 00:33:00 +0000"  >&lt;p&gt;Created an attachment (id=14344)&lt;br/&gt;
Next version - sends weights instead of queries&lt;/p&gt;

&lt;p&gt;Thanks for the valuable feedback which has resulted in this new version. Now&lt;br/&gt;
the query freezing approach is avoided by sending weights to the searchables&lt;br/&gt;
instead of queries. Thus queries are still resusable, but the Searchable&lt;br/&gt;
interface had to be extended. Also, previous API and behavior modifications&lt;br/&gt;
have been reverted as far as possible.&lt;/p&gt;</comment>
                    <comment id="12321974" author="cutting@apache.org" created="Wed, 23 Feb 2005 03:17:20 +0000"  >&lt;p&gt;This looks great to me!&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Thanks again for patiently working through this rather extensive change.&lt;/p&gt;</comment>
                    <comment id="12321975" author="otis@apache.org" created="Tue, 5 Apr 2005 12:31:57 +0100"  >&lt;p&gt;I applied this patch (2005-02-22 version) locally, but it doesn&apos;t compile as is.&lt;br/&gt;
 It looks like I need to add &quot;throws IOException&quot; to&lt;br/&gt;
BooleanQuery.BooleanWeight2.createWeight(Searcher) methods, and also to&lt;br/&gt;
MultiPhraseQuery.createWeight(Searcher) method.&lt;/p&gt;

&lt;p&gt;It looks like I also need to modify TermQuery.TermWeight and add a searcher&lt;br/&gt;
declaration (private Searcher searcher&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, plus the searcher assignment to the&lt;br/&gt;
constructor (this.searcher = searcher).&lt;/p&gt;

&lt;p&gt;After these 2-3 changes Lucene compile.  Are my changes OK?&lt;/p&gt;

&lt;p&gt;Unfortunately, unit tests fail in a few places, and it looks like all failures&lt;br/&gt;
have to do with RemoteSearchable.  Re-reading the comments in this bug entry, it&lt;br/&gt;
looks like this was a known issue at one point, but Wolf noted the following on&lt;br/&gt;
2004-11-15:&lt;/p&gt;

&lt;p&gt;&quot;Both problems mentioned in my previous comment (thread-safety and remote&lt;br/&gt;
searcher compatibility) are solved by this patch. All test cases work&lt;br/&gt;
unchanged with the exception of one test case which had been tweaked&lt;br/&gt;
previously due to the incorrect MultiSearcher and now works as expected&lt;br/&gt;
(TestSort.testNormalizedScores()).&quot;&lt;/p&gt;

&lt;p&gt;This sounds like tests involving RemoteSearchable should pass now.&lt;/p&gt;</comment>
                    <comment id="12321976" author="otis@apache.org" created="Tue, 5 Apr 2005 12:50:20 +0100"  >&lt;p&gt;Changing MultiSearcher to implement Serializable makes all unit tests pass again.&lt;/p&gt;

&lt;p&gt;I&apos;ll wait a bit more before committing this in order to give people time to comment.&lt;/p&gt;</comment>
                    <comment id="12321977" author="paul.elschot@xs4all.nl" created="Wed, 6 Apr 2005 02:03:34 +0100"  >&lt;p&gt;(In reply to comment #13) &lt;br/&gt;
&amp;gt; I applied this patch (2005-02-22 version) locally, but it doesn&apos;t compile as &lt;br/&gt;
is. &lt;br/&gt;
&amp;gt;  It looks like I need to add &quot;throws IOException&quot; to &lt;br/&gt;
&amp;gt; BooleanQuery.BooleanWeight2.createWeight(Searcher) methods, and also to &lt;br/&gt;
&amp;gt; MultiPhraseQuery.createWeight(Searcher) method. &lt;/p&gt;

&lt;p&gt;That should be no problem for BooleanWeight2.createWeight(Searcher). &lt;/p&gt;

&lt;p&gt;&amp;gt; It looks like I also need to modify TermQuery.TermWeight and add a searcher &lt;br/&gt;
&amp;gt; declaration (private Searcher searcher&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, plus the searcher assignment to the &lt;br/&gt;
&amp;gt; constructor (this.searcher = searcher). &lt;br/&gt;
&amp;gt;  &lt;br/&gt;
&amp;gt; After these 2-3 changes Lucene compile.  Are my changes OK? &lt;/p&gt;

&lt;p&gt;I think so. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;

</comment>
                    <comment id="12321978" author="chuck@manawiz.com" created="Wed, 6 Apr 2005 02:16:45 +0100"  >&lt;p&gt;I made these comments last night, but somehow they aren&apos;t here.  Sorry if a&lt;br/&gt;
duplicate pops up in the wrong place somewhere...&lt;/p&gt;

&lt;p&gt;I don&apos;t think all of the changes are correct and feel we need Wolf to comment on&lt;br/&gt;
this as his message states that he ran the unit tests successfully on his code&lt;br/&gt;
as submitted.  Specifically, it looks to me like:&lt;br/&gt;
  1.  The additions of throws IOException to Weights are correct, and due to new&lt;br/&gt;
Weights added in parallel to Wolf&apos;s work.&lt;br/&gt;
  2.  I do not believe adding the searcher field back to TermWeight is correct.&lt;br/&gt;
 Wolf explicitly pulled this field out and replaced all references to it with&lt;br/&gt;
references to similarity or idf.  What caused the field to be added back?&lt;br/&gt;
  3.  Making MultiSearcher implement Serializable seems strange &amp;#8211; I don&apos;t&lt;br/&gt;
understand why in the protocol this would be requried.  It does not seem right.&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12321979" author="chuck@manawiz.com" created="Wed, 6 Apr 2005 04:34:13 +0100"  >&lt;p&gt;Here is what I think happened and, if so, the correct fix:&lt;br/&gt;
  1.  MultiPhraseQuery and the new BooleanQuery were both added in parallel to&lt;br/&gt;
Wolf&apos;s work.  We now have a merge conflict.&lt;br/&gt;
  2.  The addition of the throws IOException to these two classes is now&lt;br/&gt;
required for Weights, and so the change is correct.&lt;br/&gt;
  3.  The new protocol for Weight&apos;s is to NOT have a searcher field.  Instead,&lt;br/&gt;
they should keep a Similarity field.  Just like the other Weight&apos;s that Wolf&apos;s&lt;br/&gt;
patch addresses, these two classes only use the searcher field to access the&lt;br/&gt;
Similarity and/or the idf.  MultiPhraseQuery, which needs the idf, already has&lt;br/&gt;
an idf field.  So, identical to Wolf&apos;s other changes it is straightforward to&lt;br/&gt;
modify these two classes to eliminate the searcher field.&lt;br/&gt;
  4.  Eliminating the searcher field will elimninate the need for MultiSearcher&lt;br/&gt;
to be Serializable, therefore retracting that change.&lt;/p&gt;

&lt;p&gt;I think that&apos;s right, and that the best fix is too conform the new Weights to&lt;br/&gt;
the new protocol for MultiSearcher compatibility.  I&apos;ve also sent a message&lt;br/&gt;
directly to Wolf asking him to review this.&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12321980" author="chuck@manawiz.com" created="Wed, 6 Apr 2005 05:09:02 +0100"  >&lt;p&gt;One more note on this.  I think conforming to the new Weight protocol, i.e.&lt;br/&gt;
eliminating the searcher field from BooleanWeight, BooleanWeight2, and&lt;br/&gt;
MultiPhraseWeight, is quite important.  This is because the Weight is now sent&lt;br/&gt;
to RemoteSearchables instead of the Query.  If Weights have a searcher field,&lt;br/&gt;
then this could be quite expensive.&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12321981" author="paul.elschot@xs4all.nl" created="Wed, 6 Apr 2005 07:49:00 +0100"  >&lt;p&gt;(In reply to comment #17) &lt;br/&gt;
&amp;gt; Here is what I think happened and, if so, the correct fix: &lt;br/&gt;
&amp;gt;   1.  MultiPhraseQuery and the new BooleanQuery were both added in parallel &lt;br/&gt;
to &lt;br/&gt;
&amp;gt; Wolf&apos;s work.  We now have a merge conflict. &lt;br/&gt;
&amp;gt;   2.  The addition of the throws IOException to these two classes is now &lt;br/&gt;
&amp;gt; required for Weights, and so the change is correct. &lt;/p&gt;

&lt;p&gt;It could well be that there is a conflict with the new BooleanQuery and &lt;br/&gt;
BooleanScorer. Given the backward compatibility goal of this new code, I&apos;d be &lt;br/&gt;
happy to resolve that possible conflict. &lt;/p&gt;

&lt;p&gt;Over the last months, I have kept all the changes to BooleanQuery/BooleanScorer &lt;br/&gt;
in a local working copy, and I had only one or two conflicts. These were &lt;br/&gt;
very easy to resolve. Bugzilla works well in this respect: all changes have &lt;br/&gt;
some comments associated with them, and, from what I have read so far, &lt;br/&gt;
there are no conflicting intentions for the functionality of this code. &lt;br/&gt;
So, please go ahead as you see fit for the MultiSearcher. I think you  &lt;br/&gt;
can safely ignore evt. conflicts with new code for BooleanQuery/BooleanScorer. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;</comment>
                    <comment id="12321982" author="siberski@learninglab.de" created="Thu, 7 Apr 2005 02:41:26 +0100"  >&lt;p&gt;Sorry for the late reply; I&apos;m currently traveling and had no Internet access.&lt;br/&gt;
Chucks analysis is completely correct. Serializing a (Multi-)Searcher doesn&apos;t&lt;br/&gt;
make sense, instead the Similarity has to be passed with the weight.&lt;/p&gt;

&lt;p&gt;What I don&apos;t understand is why the patch failed. I checked the diff file again,&lt;br/&gt;
and the necessary changes appear to be in it. For example, line 89 of the diff&lt;br/&gt;
contains the addition of &apos;throws IOException&apos; to BooleanWeight2.createWeight(),&lt;br/&gt;
and the corresponding change for MultiPhraseQueryWeight is on line 346. The&lt;br/&gt;
changes required for TermWeight are at starting at line 1187. Could you please&lt;br/&gt;
check if everything went ok when applying the patch, by comparing manually to&lt;br/&gt;
the diff file when errors occur somewhere?&lt;/p&gt;</comment>
                    <comment id="12321983" author="otis@apache.org" created="Wed, 20 Apr 2005 13:13:46 +0100"  >&lt;p&gt;Created an attachment (id=14767)&lt;br/&gt;
local diffs that I&apos;ll apply&lt;/p&gt;

&lt;p&gt;This is what the final diff is like.  I&apos;ll apply it shortly.&lt;/p&gt;</comment>
                    <comment id="12321984" author="otis@apache.org" created="Wed, 20 Apr 2005 14:01:45 +0100"  >&lt;p&gt;Committed, unit tests pass.&lt;/p&gt;</comment>
                    <comment id="12321985" author="siberski@learninglab.de" created="Fri, 22 Apr 2005 18:08:05 +0100"  >&lt;p&gt;Created an attachment (id=14784)&lt;br/&gt;
Additional patch for deprecation issue&lt;/p&gt;

&lt;p&gt;This patch removes all references to deprecated methods in Searchable,&lt;br/&gt;
and fixes some other minor issues.&lt;/p&gt;</comment>
                    <comment id="12321986" author="cutting@apache.org" created="Tue, 26 Apr 2005 06:06:47 +0100"  >&lt;p&gt;I am now confused by the changes in Searcher.java.  Why is sometimes&lt;br/&gt;
query.weight(Searcher) called and other times query.createWeight()?  The latter&lt;br/&gt;
is meant only to only construct a Weight, and the former to construct and&lt;br/&gt;
initialize it.  Shouldn&apos;t it always be initialized?&lt;/p&gt;

&lt;p&gt;Also, it was difficult to apply your patch.  It uses CRLF instead of LF, which&lt;br/&gt;
confuses patch on Linux.&lt;/p&gt;</comment>
                    <comment id="12321987" author="siberski@learninglab.de" created="Tue, 26 Apr 2005 17:34:50 +0100"  >&lt;p&gt;Created an attachment (id=14841)&lt;br/&gt;
Additional patch for deprecation issue - corrected&lt;/p&gt;

&lt;p&gt;This was just an oversight. I&apos;ve replaced the remaining calls to query.weight()&lt;br/&gt;
in Searcher with Searcher.createWeight() and corrected that method so that it&lt;br/&gt;
calls query.weight() now.&lt;/p&gt;</comment>
                    <comment id="12321988" author="cutting@apache.org" created="Wed, 27 Apr 2005 05:30:32 +0100"  >&lt;p&gt;I have applied the deprecation patch.&lt;/p&gt;

&lt;p&gt;The solution to my patch difficulties was to use &apos;patch -l -F 4&apos;.  This gets&lt;br/&gt;
around the end-of-line issues.&lt;/p&gt;

&lt;p&gt;Thanks again, Wolf!&lt;/p&gt;</comment>
                    <comment id="12321989" author="chuck@manawiz.com" created="Wed, 27 Apr 2005 06:51:02 +0100"  >&lt;p&gt;Created an attachment (id=14846)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;PATCH&amp;#93;&lt;/span&gt; Fix to Query.combine() method and all specializations&lt;/p&gt;

&lt;p&gt;This fixes the bugs in Query.combine() that were uncovered by the failing test&lt;br/&gt;
in the Highlighter.  Only Query.combine() remains &amp;#8211; all overrides in&lt;br/&gt;
BooleanQuery, RangeQuery, MultiTermQuery and PrefixQuery are deleted.  I&lt;br/&gt;
believe this fix is correct, robust realtive to possible user Query&lt;br/&gt;
implementations, and generates optimal queries for at least the cases that are&lt;br/&gt;
built-in to Lucene (query rewriting of MultTermQuery&apos;s and RangeQuery&apos;s).  This&lt;br/&gt;
is more robust relative to possible user Query implementations and covers more&lt;br/&gt;
optimizations cases than the version I sent via email last night.  With this&lt;br/&gt;
patch, all Lucene and Highlighter tests pass (with the exception of the buggy&lt;br/&gt;
TestSort.testNormalizedScores() which should be fixed by Wolf&apos;s patch).&lt;/p&gt;</comment>
                    <comment id="12321990" author="siberski@learninglab.de" created="Wed, 27 Apr 2005 20:03:13 +0100"  >&lt;p&gt;Created an attachment (id=14854)&lt;br/&gt;
Slightly extended Fix to Query.combine()&lt;/p&gt;

&lt;p&gt;This is an extension/modification of Chucks patch.&lt;br/&gt;
Besides his changes, it contains more test cases (in TestMultiSearcherRanking)&lt;br/&gt;
and minor additional modifications to make these tests work:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if the resulting query consists of only one clause, return that clause&lt;br/&gt;
  directly instead of wrapping it into a BooleanQuery.&lt;/li&gt;
	&lt;li&gt;BooleanQuery.equals doesn&apos;t take clause order into account anymore&lt;br/&gt;
I also have rewritten the loop logic of Query.combine to use a flag instead &lt;br/&gt;
of a labeled break, but this is more a matter of taste.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12321991" author="chuck@manawiz.com" created="Thu, 28 Apr 2005 01:15:53 +0100"  >&lt;p&gt;Wolf&apos;s revisions to my changes to Query.combine() look fine.  The single-query&lt;br/&gt;
optimization is good &amp;#8211; my oversight to have not included it originally.  I&lt;br/&gt;
don&apos;t believe either of the other two changes is necessary, but they are correct:&lt;br/&gt;
  1.  Using a flag instead of the labelled loop is a matter of style as Wolf&lt;br/&gt;
says, and it&apos;s a little less efficent (the biggest effect could be remedied by&lt;br/&gt;
one more if (splittable) to avoid unnecessarily copying the clauses of a&lt;br/&gt;
BooleanQuery where coord is not disabled).&lt;br/&gt;
  2.  Changing BooleanQuery equality to be independent of clause order is&lt;br/&gt;
semantically correct, although again it is a little less efficient.  It&apos;s only&lt;br/&gt;
purpose is to stop a false-negative in the new tests.&lt;/p&gt;

&lt;p&gt;Regarding additional test cases, it would be helpful to add the cases I was&lt;br/&gt;
concerned about, which are situations where a query can rewrite into different&lt;br/&gt;
kinds of fundamental queries depending on the reader.  I believe the only case&lt;br/&gt;
where this occurs with the built-in queries is with MultiTermQuery&apos;s and&lt;br/&gt;
RangeQuery&apos;s (where the rewrite depends on how many query clauses are generated&lt;br/&gt;
by each reader), and we have covered those cases.  The coord testing in&lt;br/&gt;
Query.combine() is designed to handle the case where some query rewrites into a&lt;br/&gt;
different kind of BooleanQuery (e.g., an AND), in some readers and not others. &lt;br/&gt;
Nothing tests this at present.  A single-term BooleanQuery OR could rewrite into&lt;br/&gt;
a BooleanQuery AND, but this would be independent of reader.&lt;/p&gt;

&lt;p&gt;Many additional optimizations could be added.  It seems redundant to have&lt;br/&gt;
optimizations here and in the rewrite mechanism.  Since we are down to just&lt;br/&gt;
Query.combine(), only called from one place, I think a better fix is to change&lt;br/&gt;
MultiSearcher to pass the reader as well.  Then Query.combine() could construct&lt;br/&gt;
the straightforward BooleanQuery and rewrite it.  All the optimizations would&lt;br/&gt;
then go into a single place, the rewrite methods.  Wolf, what do you think of&lt;br/&gt;
that approach?&lt;/p&gt;</comment>
                    <comment id="12321992" author="siberski@learninglab.de" created="Tue, 21 Jun 2005 17:44:30 +0100"  >&lt;p&gt;Created an attachment (id=15481)&lt;br/&gt;
Updated fix to Query.combine()&lt;/p&gt;

&lt;p&gt;This is a slightly updated version of my previous patch, taking Chucks comments&lt;br/&gt;
into account and based on the current HEAD.&lt;/p&gt;</comment>
                    <comment id="12321993" author="siberski@learninglab.de" created="Tue, 21 Jun 2005 17:46:12 +0100"  >&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;Bug 35241 has been marked as a duplicate of this bug. ***&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12321994" author="lucenebugs@danielnaber.de" created="Wed, 22 Jun 2005 07:08:33 +0100"  >&lt;p&gt;There might be one corner case that your change in equals doesn&apos;t get right &lt;br/&gt;
(not tested): a query &quot;a b a&quot; (i.e. one clause occuring twice &amp;#8211; doesn&apos;t make &lt;br/&gt;
much sense, but has an influence on the result order) would equal &quot;a b b&quot;, &lt;br/&gt;
wouldn&apos;t it? Is that a problem? &lt;/p&gt;
</comment>
                    <comment id="12321995" author="siberski@learninglab.de" created="Wed, 22 Jun 2005 19:12:00 +0100"  >&lt;p&gt;I&apos;ve started a separate thread on BooleanQuery semantics on the dev mailing&lt;br/&gt;
list. You could still apply the patch and omit the change to&lt;br/&gt;
BooleanQuery.equals(). This just leads to warning outputs in&lt;br/&gt;
TestMultiSearcherRanking.checkQuery(), and if you want to avoid these, simply&lt;br/&gt;
delete the last 10 lines of TestMultiSearcherRanking.checkQuery(). They contain&lt;br/&gt;
an additional, not really necessary test.&lt;/p&gt;</comment>
                    <comment id="12321996" author="lucenebugs@danielnaber.de" created="Fri, 24 Jun 2005 06:57:02 +0100"  >&lt;p&gt;Thanks, I&apos;ve committed your patch, leaving out the change to equals() and not &lt;br/&gt;
removing mergeBooleanQueries() as that is a public method which someone might &lt;br/&gt;
be using. Also, could you please check if the test case is correct now? I &lt;br/&gt;
couldn&apos;t apply that part of your patch cleanly and something might have been &lt;br/&gt;
broken. &lt;/p&gt;
</comment>
                    <comment id="12321997" author="siberski@learninglab.de" created="Fri, 24 Jun 2005 17:37:45 +0100"  >&lt;p&gt;Thanks for applying the patch. Everything is fine from my point of view, except&lt;br/&gt;
one minor issue: You are right that Query.mergeBooleanQueries() can&apos;t just be&lt;br/&gt;
removed, as it is public. However, I doubt if it is still useful. Could we mark&lt;br/&gt;
it as deprecated, and suggest a call to super.combine() as replacement?&lt;/p&gt;</comment>
                    <comment id="12321998" author="lucenebugs@danielnaber.de" created="Sat, 25 Jun 2005 08:23:34 +0100"  >&lt;p&gt;Should combine() maybe be static? Then deprecating mergeBooleanQueries() seems &lt;br/&gt;
to be the obvious way to go. &lt;/p&gt;</comment>
                    <comment id="12321999" author="lucenebugs@danielnaber.de" created="Tue, 5 Jul 2005 04:10:49 +0100"  >&lt;p&gt;Okay, I see that there are errors in the test cases if one makes &lt;br/&gt;
Query.combine() static. But does it have to be public? &lt;/p&gt;</comment>
                    <comment id="12322000" author="siberski@learninglab.de" created="Tue, 5 Jul 2005 19:19:43 +0100"  >&lt;p&gt;Currently, Query.combine() is only called by MultiSearcher and a Highlighter&lt;br/&gt;
test case. If I understand it correctly, the intent of this method was to give&lt;br/&gt;
Query subclasses a hook to modify the combination algorithm. This hook is not&lt;br/&gt;
used by Query subclasses which are part of the Lucene distribution, and I would&lt;br/&gt;
be very astonished if someone used it outside of Lucene. Such an implementation&lt;br/&gt;
would break now anyway, because BooleanQueries are only handled correctly in the&lt;br/&gt;
new Query.combine[] method, but not in mergeBooleanQueries() (which&lt;br/&gt;
reimplementations are supposed to call as helper method).&lt;/p&gt;

&lt;p&gt;IMHO the cleanest solution would be to remove combine() and&lt;br/&gt;
mergeBooleanQueries() from Query and move the query combination logic to&lt;br/&gt;
MultiSearcher. Of course, that would be an incompatible API change, and we can&apos;t&lt;br/&gt;
be 100% sure that no one needs the combine() hook. On the other hand, we now&lt;br/&gt;
have useless code in mergeBooleanQueries() and code which is only used by&lt;br/&gt;
MultiSearcher in combine(), and that also isn&apos;t a desirable situation.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312430" name="ASF.LICENSE.NOT.GRANTED--combine-fix2.diff" size="13645" author="siberski@learninglab.de" created="Wed, 27 Apr 2005 20:03:13 +0100" />
                    <attachment id="12312429" name="ASF.LICENSE.NOT.GRANTED--combine-fix.patch" size="5043" author="chuck@manawiz.com" created="Wed, 27 Apr 2005 06:51:02 +0100" />
                    <attachment id="12312424" name="ASF.LICENSE.NOT.GRANTED--multisearcher-2005-02-18b.diff" size="47715" author="siberski@learninglab.de" created="Fri, 18 Feb 2005 20:33:09 +0000" />
                    <attachment id="12312425" name="ASF.LICENSE.NOT.GRANTED--multisearcher-2005-02-22c.diff" size="49186" author="siberski@learninglab.de" created="Wed, 23 Feb 2005 00:33:00 +0000" />
                    <attachment id="12312426" name="ASF.LICENSE.NOT.GRANTED--multisearcher-2005-04-19.diff" size="44491" author="otis@apache.org" created="Wed, 20 Apr 2005 13:13:46 +0100" />
                    <attachment id="12312422" name="ASF.LICENSE.NOT.GRANTED--multisearcher2.diff" size="13060" author="siberski@learninglab.de" created="Mon, 15 Nov 2004 21:24:32 +0000" />
                    <attachment id="12312428" name="ASF.LICENSE.NOT.GRANTED--multisearcher-deprecation.diff" size="19714" author="siberski@learninglab.de" created="Tue, 26 Apr 2005 17:34:50 +0100" />
                    <attachment id="12312427" name="ASF.LICENSE.NOT.GRANTED--multisearcher-deprecation.diff" size="20212" author="siberski@learninglab.de" created="Fri, 22 Apr 2005 18:08:05 +0100" />
                    <attachment id="12312431" name="ASF.LICENSE.NOT.GRANTED--multisearcher.diff" size="14139" author="siberski@learninglab.de" created="Tue, 21 Jun 2005 17:44:30 +0100" />
                    <attachment id="12312423" name="ASF.LICENSE.NOT.GRANTED--multisearcher.diff" size="20988" author="siberski@learninglab.de" created="Thu, 10 Feb 2005 19:33:34 +0000" />
                    <attachment id="12312421" name="ASF.LICENSE.NOT.GRANTED--multisearcher.diff" size="1882" author="siberski@learninglab.de" created="Fri, 12 Nov 2004 17:39:11 +0000" />
                    <attachment id="12312419" name="ASF.LICENSE.NOT.GRANTED--MultiSearcherPatch.zip" size="7193" author="chuck@manawiz.com" created="Fri, 22 Oct 2004 09:15:01 +0100" />
                    <attachment id="12312420" name="ASF.LICENSE.NOT.GRANTED--patch.diff" size="3647" author="daniel.naber@t-online.de" created="Sat, 23 Oct 2004 02:58:40 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>31841</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 23 Oct 2004 01:58:40 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13454</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27436</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>