<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:02:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1500/LUCENE-1500.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1500] Highlighter throws StringIndexOutOfBoundsException</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1500</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Using the canonical Solr example (ant run-example) I added this document (using exampledocs/post.sh):&lt;/p&gt;

&lt;p&gt;&amp;lt;add&amp;gt;&amp;lt;doc&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;id&quot;&amp;gt;Test for Highlighting StringIndexOutOfBoundsExcdption&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;name&quot;&amp;gt;Some Name&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;manu&quot;&amp;gt;Acme, Inc.&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;features&quot;&amp;gt;Description of the features, mentioning various things&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;features&quot;&amp;gt;Features also is multivalued&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;popularity&quot;&amp;gt;6&amp;lt;/field&amp;gt;&lt;br/&gt;
  &amp;lt;field name=&quot;inStock&quot;&amp;gt;true&amp;lt;/field&amp;gt;&lt;br/&gt;
&amp;lt;/doc&amp;gt;&amp;lt;/add&amp;gt;&lt;/p&gt;

&lt;p&gt;and then the URL &lt;a href=&quot;http://localhost:8983/solr/select/?q=features&amp;amp;hl=true&amp;amp;hl.fl=features&quot; class=&quot;external-link&quot;&gt;http://localhost:8983/solr/select/?q=features&amp;amp;hl=true&amp;amp;hl.fl=features&lt;/a&gt; caused the exception.&lt;/p&gt;

&lt;p&gt;I have a patch.  I don&apos;t know if it is completely correct, but it avoids this exception.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Found this running the example code in Solr (latest version).&lt;/p&gt;</environment>
            <key id="12411204">LUCENE-1500</key>
            <summary>Highlighter throws StringIndexOutOfBoundsException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markh">Mark Harwood</assignee>
                                <reporter username="dbowen">David Bowen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Dec 2008 02:44:30 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:16 +0100</updated>
                    <resolved>Wed, 25 Mar 2009 23:06:53 +0000</resolved>
                            <version>2.4</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/highlighter</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12658735" author="koji" created="Tue, 23 Dec 2008 03:34:00 +0000"  >&lt;p&gt;I think the bug in Solr, not Lucene. Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-925&quot; title=&quot;Highlighter doesn&amp;#39;t work on a field which is multiValued=&amp;quot;true&amp;quot; and termOffsets=&amp;quot;true&amp;quot;&quot;&gt;&lt;del&gt;SOLR-925&lt;/del&gt;&lt;/a&gt;, a patch is there.&lt;/p&gt;</comment>
                    <comment id="12658740" author="dbowen" created="Tue, 23 Dec 2008 04:08:46 +0000"  >&lt;p&gt;That makes sense, thank-you Koji.&lt;/p&gt;

&lt;p&gt;I think it may be worth incorporating this patch anyway, since it is a small change which makes the method more robust.  It just eliminates the possibility of running off the end of the text string.&lt;/p&gt;</comment>
                    <comment id="12676421" author="pwolanin" created="Tue, 24 Feb 2009 21:35:21 +0000"  >&lt;p&gt;I have run into this issue over the last couple days.  Also using Solr, but the error is triggered by content that has multi-byte characters (such as German).&lt;/p&gt;

&lt;p&gt;It seems that somewhere Lucene is counting bytes instead of characters, so each substring the highlighter tries to select is offset further forward in the string being matched.&lt;/p&gt;

&lt;p&gt;here&apos;s an example trying to highlight the string &apos;Drupaltalk&apos; with &quot;strong&quot; tags&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;p class=&lt;span class=&quot;code-quote&quot;&gt;&quot;search-snippet&quot;&lt;/span&gt;&amp;gt;
 Community ist - und dieses Portal Dr&amp;lt;strong&amp;gt;upaltalk.d&amp;lt;/strong&amp;gt;e samt seinem schon eifrigen Benutzer- und G&#228;stezulauf ( ... 
 nter &lt;span class=&quot;code-quote&quot;&gt;&quot;Dru&amp;lt;strong&amp;gt;paltalk001&amp;lt;/strong&amp;gt;&quot;&lt;/span&gt; k&#246;nnt Ihr die erste Konferenz noch mal nachh&#246;ren und erfahren, wie Selbstorganisation in der Drupal Szene funktioniert.  
 &lt;span class=&quot;code-quote&quot;&gt;&quot;Dru&amp;lt;strong&amp;gt;paltalk002&amp;lt;/strong&amp;gt;&quot;&lt;/span&gt; ist dann der Talk vom Dienstag zum Thema &quot;Drupal Al&amp;lt;/p&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the attached patch would probably avoid the exception (and is a good idea) but would not fix the bug I&apos;m seeing.&lt;/p&gt;</comment>
                    <comment id="12676426" author="pwolanin" created="Tue, 24 Feb 2009 22:06:27 +0000"  >&lt;p&gt;Actually, looking at the Lucene source and the trace:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java.lang.StringIndexOutOfBoundsException: &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; index out of range: 2822
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.substring(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.java:1765)
	at org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(Highlighter.java:274)
	at org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:313)
	at org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:84)
	at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)
	at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)
       ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I see now that getBestTextFragments() takes in a token stream - and each token in this steam already has start/end positions set.  So, this patch would mitigate the exception, but looks like the real bug is in Solr, or perhaps elsewhere in Lucene where the token stream is constructed.&lt;/p&gt;</comment>
                    <comment id="12676449" author="pwolanin" created="Tue, 24 Feb 2009 23:20:51 +0000"  >&lt;p&gt;Actually - the initial patch does not avoid the exception I&apos;m seeing, since the start of the token is ok, but the end is beyond the string&apos;s end.  Here is a slightly enhanced version that checks both the start and end of the token.&lt;/p&gt;</comment>
                    <comment id="12676611" author="mikemccand" created="Wed, 25 Feb 2009 10:56:37 +0000"  >&lt;p&gt;I think the defensive coding (the current patch) makes sense, to avoid out-of-bounds substring call.&lt;/p&gt;

&lt;p&gt;But what is the root cause here?  It seems likely the analyzer chain is not producing the right (original) start/end offset in the tokens?  What analyzer chain are you using?&lt;/p&gt;</comment>
                    <comment id="12676633" author="markh" created="Wed, 25 Feb 2009 12:46:32 +0000"  >&lt;p&gt;Hmmm. I&apos;m not so sure that this &quot;defensive coding&quot; patch is the right thing to do here. &lt;/p&gt;

&lt;p&gt;One could argue that it is obscuring an error condition further upstream (as you suggest, Mike - a dodgy analyzer). Commiting this will only make these errors harder to detect e.g. we&apos;d get forum posts saying &quot;why doesn&apos;t my term get highlighted?&quot;&lt;/p&gt;

&lt;p&gt;Perhaps we can turn this around and ask &quot;under what conditions is it acceptable to provide a TokenStream with tokens whose offsets exceed the length of the text provided?&quot;. &lt;br/&gt;
Not sure I see a justifiable case for supporting that as a legitimate scenario and I would prefer the reporting of an error in this case.&lt;/p&gt;

</comment>
                    <comment id="12676648" author="pwolanin" created="Wed, 25 Feb 2009 13:36:33 +0000"  >&lt;p&gt;Yes - this patch is not a fix - but a work-around.&lt;/p&gt;

&lt;p&gt;The root cause is clearly somewhere in the code generating the token stream - tokens seem to be getting positions in bytes rather than characters.&lt;/p&gt;

&lt;p&gt;DefaultSolrHighlighter.java has this code:&lt;/p&gt;



&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.apache.lucene.search.highlight.TokenSources;

...

            &lt;span class=&quot;code-comment&quot;&gt;// create TokenStream
&lt;/span&gt;            &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
              &lt;span class=&quot;code-comment&quot;&gt;// attempt term vectors
&lt;/span&gt;              &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( tots == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; )
                tots = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermOffsetsTokenStream( TokenSources.getTokenStream(searcher.getReader(), docId, fieldName) );
              tstream = tots.getMultiValuedTokenStream( docTexts[j].length() );
            }
            &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IllegalArgumentException e) {
              &lt;span class=&quot;code-comment&quot;&gt;// fall back to anaylzer
&lt;/span&gt;              tstream = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(docTexts[j])), 10);
            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="12676682" author="koji" created="Wed, 25 Feb 2009 15:44:27 +0000"  >&lt;p&gt;Can you post your document and schema so that others can reproduce your problem?&lt;/p&gt;</comment>
                    <comment id="12676714" author="hossman" created="Wed, 25 Feb 2009 17:37:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;Perhaps we can turn this around and ask &quot;under what conditions is it acceptable to provide a TokenStream with tokens whose offsets exceed the length of the text provided?&quot;. Not sure I see a justifiable case for supporting that as a legitimate scenario and I would prefer the reporting of an error in this case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+ 1 to reporting an error ... but StringIndexOutOfounds is not a helpful error.  Code should certainly check the offsets before calling substring and throw a specific exception identifying which token has an invalid offset&lt;/p&gt;</comment>
                    <comment id="12676728" author="mikemccand" created="Wed, 25 Feb 2009 18:15:27 +0000"  >
&lt;p&gt;The thing is, since it&apos;s an unchecked exception, you could be well&lt;br/&gt;
into production, serving searches, etc, when suddenly unexpectedly&lt;br/&gt;
this exception kills the entire search request.  It&apos;s brittle.&lt;/p&gt;

&lt;p&gt;(vs highlighting the wrong parts but still providing search results to&lt;br/&gt;
the user &amp;#8211; graceful degradation).&lt;/p&gt;

&lt;p&gt;So I&apos;m still torn on &quot;brittle&quot; (what we have now) vs &quot;graceful&quot;&lt;br/&gt;
(current &quot;workaround&quot; patch) handling.  For exceptions that can strike&lt;br/&gt;
arbitrarily deep into production/searching, I usually lean towards&lt;br/&gt;
being &quot;graceful&quot;.&lt;/p&gt;

&lt;p&gt;Or... maybe we could introduce a new exception to call this case out&lt;br/&gt;
(IncorrectTokenOffsetsException or something?), but: we make it a&lt;br/&gt;
checked exception so at compile time you need to handle it?&lt;/p&gt;

&lt;p&gt;(I still don&apos;t like that we only catch the error intermittantly... but there&apos;s&lt;br/&gt;
nothing we could really do about that, so javadocs should spell that&lt;br/&gt;
out).&lt;/p&gt;</comment>
                    <comment id="12676745" author="markh" created="Wed, 25 Feb 2009 19:23:56 +0000"  >&lt;p&gt;So to be consistent, where else in Lucene might an &quot;IncorrectTokenOffsetsException&quot; be a possibility - IndexWriter.addDocument(..)?&lt;/p&gt;</comment>
                    <comment id="12676754" author="mikemccand" created="Wed, 25 Feb 2009 19:56:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;So to be consistent, where else in Lucene might an &quot;IncorrectTokenOffsetsException&quot; be a possibility - IndexWriter.addDocument(..)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good question!&lt;/p&gt;

&lt;p&gt;I don&apos;t think we can throw it from addDocument, because we cannot&lt;br/&gt;
assume/assert that the int startOffset &amp;amp; endOffset are in fact&lt;br/&gt;
character offsets into the String/Reader we had been given?&lt;/p&gt;

&lt;p&gt;Technically, to Lucene the start/end offsets are somewhat opaque (I&lt;br/&gt;
think?).  It&apos;s not until you actually do something with them (eg, call&lt;br/&gt;
the highlighter) that you are saying &quot;these are really supposed to be&lt;br/&gt;
character offsets into the specific text I just provided you&quot;.&lt;/p&gt;</comment>
                    <comment id="12677372" author="mikemccand" created="Fri, 27 Feb 2009 13:57:45 +0000"  >&lt;p&gt;Mark, do you want/have time to take this one?  I&apos;d like to resolve it before 2.4.1 if we can...&lt;/p&gt;</comment>
                    <comment id="12677507" author="markh" created="Fri, 27 Feb 2009 20:10:52 +0000"  >&lt;p&gt;OK - choices are:&lt;/p&gt;

&lt;p&gt;1) Throw a RuntimeException with a more useful diagnostic message&lt;br/&gt;
2) Throw a new checked Exception (introducing possible compile errors in existing client code)&lt;br/&gt;
3) Check for the error condition and ignore (as done in the current patch)&lt;/p&gt;

&lt;p&gt;This feels to me like one of those &quot;there&apos;s something seriously wrong with the codebase&quot; problems rather than an invalid bit of data or user input which is external to the system so my personal preference is to lean towards 1). &lt;/p&gt;
</comment>
                    <comment id="12677517" author="pwolanin" created="Fri, 27 Feb 2009 20:34:45 +0000"  >&lt;p&gt;Well, this patch does not (obviously) solve the real bug.  Is it possible to combine #1 and #3, but possibly revert #3 later when we solve the real bug in the highlighter code?  &lt;/p&gt;</comment>
                    <comment id="12677524" author="mikemccand" created="Fri, 27 Feb 2009 20:54:45 +0000"  >
&lt;blockquote&gt;&lt;p&gt;This feels to me like one of those &quot;there&apos;s something seriously wrong with the codebase&quot; problems&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My guess is it can happen quite easily and not be so obvious until the&lt;br/&gt;
&quot;right&quot; text goes through the analyzer.  If Solr&apos;s analysis (for&lt;br/&gt;
highlighting multi-valued fields) can hit this my guess is it&apos;s (wrong&lt;br/&gt;
offsets coming out of analyzer) not uncommon...&lt;/p&gt;

&lt;p&gt;I&apos;d still prefer #2, but I don&apos;t feel super strongly about it, so if&lt;br/&gt;
there&apos;s no consensus otherwise, it&apos;s fine with me to go forward&lt;br/&gt;
with #1.&lt;/p&gt;</comment>
                    <comment id="12677531" author="pwolanin" created="Fri, 27 Feb 2009 21:11:12 +0000"  >&lt;p&gt;The bug we are seeing now happens on pretty much every document that contains multi-byte characters, but only sometime was it going past the end of the full string and hitting the exception.   With the patch, the bug is still very evident, it jsut prevents the exception.  I&apos;s a serious flaw in the highlighter - maybe using some only non-utf-8 aware method to calculate string lengths?&lt;/p&gt;</comment>
                    <comment id="12677535" author="mikemccand" created="Fri, 27 Feb 2009 21:19:19 +0000"  >&lt;p&gt;I thought the bug was in the analyzer (producing out-of-bounds token offsets), not highlighter?&lt;/p&gt;

&lt;p&gt;The original Solr bug (&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-925&quot; title=&quot;Highlighter doesn&amp;#39;t work on a field which is multiValued=&amp;quot;true&amp;quot; and termOffsets=&amp;quot;true&amp;quot;&quot;&gt;&lt;del&gt;SOLR-925&lt;/del&gt;&lt;/a&gt;), which I think was the analyzer producing invalid offsets, is now fixed.  Peter are you using Solr, or are you seeing this in a different context?&lt;/p&gt;</comment>
                    <comment id="12677540" author="pwolanin" created="Fri, 27 Feb 2009 21:27:45 +0000"  >&lt;p&gt;I am using Solr, but with a single value field.  I&apos;m using the current Solr build (includes the fix), so the bug I&apos;m describing, which triggers the same exception as the prior Solr bug did, is still present and unrelated to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-925&quot; title=&quot;Highlighter doesn&amp;#39;t work on a field which is multiValued=&amp;quot;true&amp;quot; and termOffsets=&amp;quot;true&amp;quot;&quot;&gt;&lt;del&gt;SOLR-925&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The extent of my tracing suggests it&apos;s coming when the token stream is generated, which looks to be part of the lucene highlighter:  org.apache.lucene.search.highlight.TokenSources&lt;/p&gt;
</comment>
                    <comment id="12677549" author="hossman" created="Fri, 27 Feb 2009 21:49:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;The extent of my tracing suggests it&apos;s coming when the token stream is generated, which looks to be part of the lucene highlighter: org.apache.lucene.search.highlight.TokenSources&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;with my limited knowledge of solr highlighting, that really doesn&apos;t sound right.&lt;/p&gt;

&lt;p&gt;If the field has TermVectors, then the TokenStream used comes from there, otherwise it coems from analyzing the stored field value &amp;#8211; either way the analyzer configured in Solr should be setting the offset values, correct? &lt;/p&gt;

&lt;p&gt;hence my question on the solr thread where this first came up...&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Error-with-highlighter-and-UTF-8-chars--to22156161.html#a22207917&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Error-with-highlighter-and-UTF-8-chars--to22156161.html#a22207917&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;so what does the analysis screen tell you about each token produced with that input text given your configuration?  in verbose mode it will show the start/end offsets for every token, so it should be fairly easy to identify where the bug is. &lt;/p&gt;&lt;/blockquote&gt;</comment>
                    <comment id="12677551" author="mikemccand" created="Fri, 27 Feb 2009 21:52:40 +0000"  >&lt;p&gt;But that class either uses TermVectors stored in the index, or re-analyzes using the analyzer passed to it, I think?  Are you using TermVectors?&lt;/p&gt;</comment>
                    <comment id="12677561" author="pwolanin" created="Fri, 27 Feb 2009 22:10:51 +0000"  >&lt;p&gt;I&apos;m still trying to get a handle on how these pieces fit together., so sorry if I&apos;ve jumped to the wrong conclusion.  If the analyzer is where the offsets are calculated, then that sounds like the place to look.&lt;/p&gt;

&lt;p&gt;The field does use term vectors.  The field uses this type from the Solr schema:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;text&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The full schema is&lt;br/&gt;
&lt;a href=&quot;http://cvs.drupal.org/viewvc.py/drupal/contributions/modules/apachesolr/schema.xml?revision=1.1.2.1.2.30&amp;amp;pathrev=DRUPAL-6--1&quot; class=&quot;external-link&quot;&gt;http://cvs.drupal.org/viewvc.py/drupal/contributions/modules/apachesolr/schema.xml?revision=1.1.2.1.2.30&amp;amp;pathrev=DRUPAL-6--1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;the field is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&amp;lt;field name=&lt;span class=&quot;code-quote&quot;&gt;&quot;body&quot;&lt;/span&gt; type=&lt;span class=&quot;code-quote&quot;&gt;&quot;text&quot;&lt;/span&gt; indexed=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; stored=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt; termVectors=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;in case it&apos;s relevant, the solrconfig is:&lt;br/&gt;
&lt;a href=&quot;http://cvs.drupal.org/viewvc.py/drupal/contributions/modules/apachesolr/solrconfig.xml?revision=1.1.2.15&amp;amp;pathrev=DRUPAL-6--1&quot; class=&quot;external-link&quot;&gt;http://cvs.drupal.org/viewvc.py/drupal/contributions/modules/apachesolr/solrconfig.xml?revision=1.1.2.15&amp;amp;pathrev=DRUPAL-6--1&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12677608" author="hossman" created="Sat, 28 Feb 2009 00:27:12 +0000"  >&lt;p&gt;Peter: i tried some experiments with teh analyzer specified in the schema+fieldType you referenced, and i couldn&apos;t reproduce any problem.&lt;/p&gt;

&lt;p&gt;I suggest you open a new Jira issue against Solr and attach some sort of reproducible test (either a junit test OR a patch against the example configs + an example doc to index and an example query that either triggers an error or highlights an incorrect substring) so people have a starting point for trying to figure where the incorrect offsets are coming from.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1500&quot; title=&quot;Highlighter throws StringIndexOutOfBoundsException&quot;&gt;&lt;del&gt;LUCENE-1500&lt;/del&gt;&lt;/a&gt; can/should stay open, but should focus specifically on the issue of what Highlighter&apos;s behavior should be when dealing with offsets that go past the end of the string (there seems to be consensus that it should do something different then IndexOutOfBounds, it just doesn&apos;t seem to be clear what the new behavior should be)&lt;/p&gt;</comment>
                    <comment id="12677620" author="pwolanin" created="Sat, 28 Feb 2009 01:49:31 +0000"  >&lt;p&gt;Ah, it occurs to me that we first saw this bug recently - and it seems likely it was only after starting to use :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; &amp;lt;charFilter class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.MappingCharFilterFactory&quot;&lt;/span&gt; mapping=&lt;span class=&quot;code-quote&quot;&gt;&quot;mapping-ISOLatin1Accent.txt&quot;&lt;/span&gt;/&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for that field type.  I will investigate more and post a SOLR issue.&lt;/p&gt;</comment>
                    <comment id="12677626" author="koji" created="Sat, 28 Feb 2009 02:08:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;for that field type. I will investigate more and post a SOLR issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you use charFilter, your Tokenizer must be a &quot;CharStreamAware&quot; Tokenizer. We have only two CharStreamAwareTokenizers - CharStreamAwareWhitespaceTokenizer and CharStreamAwareCJKTokenizer in Solr. Please consider using CharStreamAwareWhitespaceTokenizer in your case. To know what CharStreamAware Tokenizer is, see &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-822&quot; title=&quot;CharFilter - normalize characters before tokenizer&quot;&gt;&lt;del&gt;SOLR-822&lt;/del&gt;&lt;/a&gt; .&lt;/p&gt;</comment>
                    <comment id="12677629" author="pwolanin" created="Sat, 28 Feb 2009 02:35:03 +0000"  >&lt;p&gt;Koji - thanks - I was aware that not all worked with the mapping filter, but I was apparently misinformed since I was told that the &quot;solr.HTMLStripWhitespaceTokenizerFactory&quot; was also suitable for CharFilter.  Indeed your e-mail thread linked from &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-822&quot; title=&quot;CharFilter - normalize characters before tokenizer&quot;&gt;&lt;del&gt;SOLR-822&lt;/del&gt;&lt;/a&gt; describes exactly the problem I have:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As you can see, if you use CharFilter, Token offsets could be incorrect because CharFilters may convert 1 char to 2 chars or the other way around.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In the thread you suggest that this API could be aded to lucene java?&lt;/p&gt;</comment>
                    <comment id="12677639" author="koji" created="Sat, 28 Feb 2009 04:04:16 +0000"  >&lt;p&gt;Peter, thank you.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In the thread you suggest that this API could be aded to lucene java?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve proposed CharFilter feature for Lucene in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1466&quot; title=&quot;CharFilter - normalize characters before tokenizer&quot;&gt;&lt;del&gt;LUCENE-1466&lt;/del&gt;&lt;/a&gt; . If you like it, please vote for it. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12677865" author="markh" created="Sun, 1 Mar 2009 23:52:00 +0000"  >&lt;p&gt;Attached a patch with new checked exception.&lt;br/&gt;
This will have a knock-on effect on all Highlighter client code (Solr?) as it introduces a new checked exception that must be handled.&lt;/p&gt;</comment>
                    <comment id="12677948" author="mikemccand" created="Mon, 2 Mar 2009 10:21:32 +0000"  >&lt;p&gt;Patch looks great, thanks Mark!&lt;/p&gt;

&lt;p&gt;Do you also need to check that startOffset is within bounds?  EG if both start &amp;amp; end offset == length of input text, what does substring do?&lt;/p&gt;

&lt;p&gt;If endOffset is &amp;lt; startOffset (seriously invalid token offsets) what happens?&lt;/p&gt;

&lt;p&gt;Maybe just add javadoc to the @throws  explaining why this new exception would be thrown?&lt;/p&gt;</comment>
                    <comment id="12677956" author="markh" created="Mon, 2 Mar 2009 11:08:54 +0000"  >&lt;p&gt;My thoughts were that this exception solely traps inconsistencies with Tokens in relation to a particular provided chunk of text.&lt;/p&gt;

&lt;p&gt;I think internal inconsistencies within a Token (e.g. endOffset &amp;lt;startOffset) should ideally be handled by Token (throwing something like an IllegalArgumentException in it&apos;s constructor).&lt;br/&gt;
I guess an open question there is can startOffset=endOffset in a Token? Either way, String.substring simply returns an empty string so I think that&apos;s probably OK in highlighter.&lt;/p&gt;</comment>
                    <comment id="12677963" author="mikemccand" created="Mon, 2 Mar 2009 11:39:55 +0000"  >&lt;p&gt;The problem is, this hits a StringIndexOutOfBoundsException:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s = &lt;span class=&quot;code-quote&quot;&gt;&quot;abcd&quot;&lt;/span&gt;;
s.substring(3, 2);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java.lang.StringIndexOutOfBoundsException: &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; index out of range: -1
    at java.lang.&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.substring(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;.java:1938)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think highlighter should guard against this?&lt;/p&gt;</comment>
                    <comment id="12677964" author="mikemccand" created="Mon, 2 Mar 2009 11:41:17 +0000"  >&lt;p&gt;I think given the addition of a checked exception to the Highlighter API, we should not back-port this to 2.4.1.&lt;/p&gt;</comment>
                    <comment id="12677968" author="markh" created="Mon, 2 Mar 2009 11:55:23 +0000"  >&lt;p&gt;Isn&apos;t your example predicated on being given an invalid Token with end&amp;lt;start?&lt;/p&gt;

&lt;p&gt;What did you think of my suggestion to fix this problem at it&apos;s source - i.e. Token should never be in a state with end&amp;lt;start in the first place?&lt;/p&gt;

&lt;p&gt;Acheiving this goal is complicated by the fact that offsets are not only set in the constructor - there are independent set methods for start and end offsets which can be called in any order.&lt;br/&gt;
One solution would be to deprecate Token.setStartOffset and Token.endOffset and replacing with a Token.setExtent(int startOffset, int endOffset) with the appropriate checks.&lt;/p&gt;


</comment>
                    <comment id="12677983" author="mikemccand" created="Mon, 2 Mar 2009 13:38:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;What did you think of my suggestion to fix this problem at it&apos;s source - i.e. Token should never be in a state with end&amp;lt;start in the first place?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m wary of this, for the same reason as cited above.  I think the&lt;br/&gt;
start/end offsets are rather opaque to Lucene, and I would lean&lt;br/&gt;
towards asserting as little as possible about them during indexing.&lt;/p&gt;

&lt;p&gt;(Not to mention the challenges, as you enumerated, of actually doing&lt;br/&gt;
this checking with the current API).&lt;/p&gt;

&lt;p&gt;I think at point-of-use (highlighting) we should assert the offsets&lt;br/&gt;
are valid, for highlighting.&lt;/p&gt;</comment>
                    <comment id="12677991" author="markh" created="Mon, 2 Mar 2009 14:19:12 +0000"  >&lt;p&gt;I struggle to see why endOffset&amp;lt;startOffset should ever be acceptable but also share your concerns about the disruption of changing the Token API to enforce this.&lt;/p&gt;

&lt;p&gt;So, I&apos;ll add code to the patch to check for bad startOffsets too. If we had more &quot;points of use&quot; for Token offsets outside of highlighting I&apos;d be more concerned, but things being the way they are this seems like the most pragmatic option.&lt;/p&gt;</comment>
                    <comment id="12680121" author="mikemccand" created="Mon, 9 Mar 2009 10:36:24 +0000"  >&lt;p&gt;Handing this one off to you Mark!&lt;/p&gt;</comment>
                    <comment id="12680125" author="markh" created="Mon, 9 Mar 2009 10:48:18 +0000"  >&lt;p&gt;Will submit a new patch tonight.&lt;/p&gt;</comment>
                    <comment id="12680292" author="markh" created="Mon, 9 Mar 2009 21:53:21 +0000"  >&lt;p&gt;Added support for testing both Token start or end offset &amp;gt;text.length.&lt;/p&gt;

&lt;p&gt;Added javadoc comments for new exception&lt;/p&gt;</comment>
                    <comment id="12680330" author="mikemccand" created="Tue, 10 Mar 2009 00:07:04 +0000"  >&lt;p&gt;The InvalidTokenOffsetsException.java just needs a copyright header; otherwise patch looks good!&lt;/p&gt;</comment>
                    <comment id="12681868" author="markh" created="Fri, 13 Mar 2009 19:23:24 +0000"  >&lt;p&gt;With updated Apache license header.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit soon if no objections&lt;/p&gt;</comment>
                    <comment id="12689267" author="markh" created="Wed, 25 Mar 2009 23:06:53 +0000"  >&lt;p&gt;Committed in revision: 758460 &lt;/p&gt;</comment>
                    <comment id="12704022" author="genernic" created="Wed, 29 Apr 2009 08:43:38 +0100"  >&lt;p&gt;Hi! with the risk of being a noob, I just have to ask...&lt;br/&gt;
The patch Lucene-1500-NewException.patch, is it incorporated in the Lucene nightly builds as of 2009-04-27?&lt;/p&gt;

&lt;p&gt;I am now running my code against the nightly builds of Lucene20090427, and those libs give me the new error &quot;InvalidTokenOffsetsException&quot; at the exact same spot as the 2.4.1 libs return a StringIndexOutOfBounds exception. Should it not solve the issue?&lt;/p&gt;

&lt;p&gt;If not, could you maybe suggest a client coding which circumvents it?&lt;/p&gt;

&lt;p&gt;When using the Tika test-documents with search query &quot;tika&quot;&lt;br/&gt;
The resulting 9 documents return 5 occurences of the exception. &lt;/p&gt;

&lt;p&gt;PS: I&apos;m not running Solr, just POJO with lucene and Tika&lt;/p&gt;

</comment>
                    <comment id="12704047" author="mikemccand" created="Wed, 29 Apr 2009 10:22:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Should it not solve the issue?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The change to highlighter (which is committed, on trunk) is simply to throw a more meaningful, checked exception (InvalidTokenOffsetsException) when the Token has out-of-bounds offsets.  On upgrading to this, this is an exception your code needs to handle.&lt;/p&gt;

&lt;p&gt;But this issue doesn&apos;t fix the root causes that actually produce Tokens with incorrect offsets &amp;#8211; that&apos;s very app specific.  EG, the particular case that led to this issue was &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-925&quot; title=&quot;Highlighter doesn&amp;#39;t work on a field which is multiValued=&amp;quot;true&amp;quot; and termOffsets=&amp;quot;true&amp;quot;&quot;&gt;&lt;del&gt;SOLR-925&lt;/del&gt;&lt;/a&gt; (which is now fixed).&lt;/p&gt;

&lt;p&gt;Are you actually hitting this exception at runtime, or noting that you need to handle it at compilation time?&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12402165" name="Lucene-1500-NewException.patch" size="8257" author="markh" created="Fri, 13 Mar 2009 19:23:24 +0000" />
                    <attachment id="12401778" name="Lucene-1500-NewException.patch" size="7422" author="markh" created="Mon, 9 Mar 2009 21:53:21 +0000" />
                    <attachment id="12400890" name="LUCENE-1500.patch" size="1110" author="pwolanin" created="Tue, 24 Feb 2009 23:22:11 +0000" />
                    <attachment id="12396645" name="patch.txt" size="1074" author="dbowen" created="Tue, 23 Dec 2008 02:45:26 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Dec 2008 03:34:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12251</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26227</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>