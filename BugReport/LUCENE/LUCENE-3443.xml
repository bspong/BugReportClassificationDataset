<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3443/LUCENE-3443.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3443] Port 3.x FieldCache.getDocsWithField() to trunk</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3443</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Spinoff from LUCENE-3390&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I think the approach in 3.x for handling un-valued docs, and making it&lt;br/&gt;
possible to specify how such docs are sorted, is better than the&lt;br/&gt;
solution we have in trunk.&lt;/p&gt;

&lt;p&gt;I like that FC has a dedicated method to get the Bits for docs with field&lt;br/&gt;
&amp;#8211; easy for apps to directly use.  And I like that the&lt;br/&gt;
bits have their own entry in the FC.&lt;/p&gt;

&lt;p&gt;One downside is that it&apos;s 2 passes to get values and valid bits, but&lt;br/&gt;
I think we can fix this by passing optional bool to FC.getXXX methods&lt;br/&gt;
indicating you want the bits, and the populate the FC entry for the&lt;br/&gt;
missing bits as well.  (We can do that for 3.x and trunk). Then it&apos;s&lt;br/&gt;
single pass.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12523855">LUCENE-3443</key>
            <summary>Port 3.x FieldCache.getDocsWithField() to trunk</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Sep 2011 13:43:59 +0100</created>
                <updated>Thu, 2 May 2013 03:29:46 +0100</updated>
                    <resolved>Fri, 11 Nov 2011 01:08:22 +0000</resolved>
                                            <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13109678" author="ryantxu" created="Wed, 21 Sep 2011 18:22:01 +0100"  >&lt;p&gt;+1  &lt;/p&gt;

&lt;p&gt;A separate cache entry for Bits is a good thing assuming it can be calculated in a single pass.&lt;/p&gt;</comment>
                    <comment id="13146229" author="mikemccand" created="Tue, 8 Nov 2011 11:43:42 +0000"  >&lt;p&gt;Initial patch, cutting over to 3.x&apos;s approach.&lt;/p&gt;

&lt;p&gt;I still need to check the patch a bit more closely.... but tests do pass.&lt;/p&gt;

&lt;p&gt;I think we should commit this, first, then separately optimize the valid bits to single pass....&lt;/p&gt;</comment>
                    <comment id="13146367" author="yseeley@gmail.com" created="Tue, 8 Nov 2011 15:44:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should commit this, first, then separately optimize the valid bits to single pass....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That represents a pretty significant performance regression though, and it seems we should try to avoid stuff like that on trunk (better in a branch if one is going to remove functionality with the idea of adding it back later).  Or we could generate the bits by default - the extra cache entry if not needed is less serious than doubling the generation time.&lt;/p&gt;

&lt;p&gt;Another small piece we are losing from trunk is numUniqueTerms.&lt;br/&gt;
What about returning an object, so instead of getLongs() returning a long[], it would return a LongValues that had&lt;br/&gt;
a long[] as well as numUniqueTerms, and docsWithValues (optionally set).  This also halves the number of cache lookups needed when using sortMissinglast and supplies a place to put more info in the future (stuff like numUniqueTerms).&lt;/p&gt;</comment>
                    <comment id="13146457" author="mikemccand" created="Tue, 8 Nov 2011 18:30:58 +0000"  >
&lt;blockquote&gt;&lt;p&gt;That represents a pretty significant performance regression though, and it seems we should try to avoid stuff like that on trunk (better in a branch if one is going to remove functionality with the idea of adding it back later).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well we haven&apos;t released trunk yet, and this is not a perf regression&lt;br/&gt;
vs 3.4.0?&lt;/p&gt;

&lt;p&gt;Ie, there&apos;s no guarantee w/in trunk that performance won&apos;t &quot;change&quot;,&lt;br/&gt;
just like there&apos;s no guarantee APIs and index format won&apos;t &quot;change&quot;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Or we could generate the bits by default - the extra cache entry if not needed is less serious than doubling the generation time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d rather not do that; apps that don&apos;t use sort missing first/last&lt;br/&gt;
shouldn&apos;t be forced to spend the RAM (even if it&apos;s only a bit per&lt;br/&gt;
doc).&lt;/p&gt;

&lt;p&gt;I think we can find a solution that makes it optional; I just don&apos;t&lt;br/&gt;
think we have to do it here, now.&lt;/p&gt;

&lt;p&gt;This issue can focus on getting to 3.x&apos;s FC impl.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another small piece we are losing from trunk is numUniqueTerms.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, we track this in FC (only in trunk) today, but it&apos;s not used&lt;br/&gt;
anywhere, I think?  Also, this is redundant with&lt;br/&gt;
Terms.getUniqueTermCount()?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What about returning an object, so instead of getLongs() returning a long[], it would return a LongValues that had&lt;br/&gt;
a long[] as well as numUniqueTerms, and docsWithValues (optionally set). This also halves the number of cache lookups needed when using sortMissinglast and supplies a place to put more info in the future (stuff like numUniqueTerms).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think for now we should stick w/ simple arrays for this issue; we&lt;br/&gt;
can explore returning an object under a new issue.  The extra cache&lt;br/&gt;
lookup is really a negligible cost.&lt;/p&gt;</comment>
                    <comment id="13146465" author="yseeley@gmail.com" created="Tue, 8 Nov 2011 18:42:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Ie, there&apos;s no guarantee w/in trunk that performance won&apos;t &quot;change&quot;,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course not.  I&apos;m arguing a specific point though: that we shouldn&apos;t double time time it takes solr users to instantiate field caches (or other lucene users that regularly use sortMissingLast).  &quot;we can do it later&quot; is not a good argument to remove existing functionality.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;gt; Or we could generate the bits by default - the extra cache entry if not needed is less serious than doubling the generation time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I mean, generate the bits by default until the two-pass problem is fixed (not forever).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;d rather not do that; apps that don&apos;t use sort missing first/last shouldn&apos;t be forced to spend the RAM (even if it&apos;s only a bit per doc).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But it&apos;s trunk, right?  There&apos;s no guarantee w/in trunk that performance won&apos;t &quot;change&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Using 1/32 more memory (3%) is way less evil than doubling field cache entry times.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, this (uniqueTermCount) is redundant with Terms.getUniqueTermCount()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not for numeric fields, where a precisionStep causes nTerms &amp;gt; nUniqueValues&lt;/p&gt;
</comment>
                    <comment id="13146677" author="mikemccand" created="Wed, 9 Nov 2011 00:15:01 +0000"  >
&lt;blockquote&gt;&lt;p&gt;I&apos;m arguing a specific point though: that we shouldn&apos;t double time time it takes solr users to instantiate field caches (or other lucene users that regularly use sortMissingLast). &quot;we can do it later&quot; is not a good argument to remove existing functionality.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We&apos;re not doubling the time vs 3.x.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;d rather not do that; apps that don&apos;t use sort missing first/last shouldn&apos;t be forced to spend the RAM (even if it&apos;s only a bit per doc).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But it&apos;s trunk, right? There&apos;s no guarantee w/in trunk that performance won&apos;t &quot;change&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Using 1/32 more memory (3%) is way less evil than doubling field cache entry times.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, compared to 3.x, that&apos;d be worse.  Ie, w/ the patch as it now&lt;br/&gt;
stands we could ship 4.0 and we&apos;d match 3.x.&lt;/p&gt;

&lt;p&gt;For a byte[] FC entry that&apos;s 12.5% extra RAM.&lt;/p&gt;

&lt;p&gt;I think one-time FC init cost is the lesser evil vs &quot;permanently&quot;&lt;br/&gt;
tying up unused RAM.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Also, this (uniqueTermCount) is redundant with Terms.getUniqueTermCount()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not for numeric fields, where a precisionStep causes nTerms &amp;gt; nUniqueValues&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh, true.&lt;/p&gt;</comment>
                    <comment id="13146682" author="yseeley@gmail.com" created="Wed, 9 Nov 2011 00:24:25 +0000"  >&lt;p&gt;Just because the functionality isn&apos;t in 3.x doesn&apos;t mean we should feel free to rip it out of trunk and replace it with something that has less functionality (well, we should be able to if we think it&apos;s for the best, but my point is... it&apos;s not.)  IMO, this patch should be further developed as a patch until the 2-pass problem has been solved as well.  Unless there&apos;s a good reason, we shouldn&apos;t be moving backwards.&lt;/p&gt;</comment>
                    <comment id="13146706" author="rcmuir" created="Wed, 9 Nov 2011 01:08:09 +0000"  >&lt;p&gt;I like this patch (it makes the fieldcache less confusing to me, currently I only understand the 3.x one).&lt;/p&gt;

&lt;p&gt;I updated the patch with a tiny optimization, maybe it can help resolve some concerns. I see that solr defaults its &quot;string&quot; field etc to sortMissingLast.&lt;/p&gt;

&lt;p&gt;I think its very common that many fields are populated for every document (of course this option is totally stupid in this case...), but regardless of stupid configurations we shouldn&apos;t do any additional pass there:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the field is fully populated, don&apos;t bother enumerating
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (terms.getDocCount() == maxDoc) {
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Bits.MatchAllBits(maxDoc);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13147219" author="mikemccand" created="Wed, 9 Nov 2011 18:49:08 +0000"  >&lt;p&gt;New patch.&lt;/p&gt;

&lt;p&gt;I managed to fold in setting the docsWithField bits with a single pass.  You pass an extra boolean to each getXXX.&lt;/p&gt;

&lt;p&gt;I think it&apos;s ready!&lt;/p&gt;</comment>
                    <comment id="13147870" author="yseeley@gmail.com" created="Thu, 10 Nov 2011 18:01:31 +0000"  >&lt;p&gt;Looks good!  +1 to commit.&lt;/p&gt;

&lt;p&gt;Something we should consider for the future is expanding the functionality of the Parser class.&lt;br/&gt;
If the parser could handle the creation of the whole entry, we could get rid of hacks like throwing+catching an exception for the NumericField parsers and enable doing other things like populating a FieldCache entry from a CSF.&lt;/p&gt;</comment>
                    <comment id="13157796" author="thetaphi" created="Sun, 27 Nov 2011 12:29:33 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12530603">SOLR-2881</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12474349">LUCENE-2649</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12519669">LUCENE-3390</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12530603">SOLR-2881</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12503114" name="LUCENE-3443.patch" size="245757" author="mikemccand" created="Wed, 9 Nov 2011 18:49:08 +0000" />
                    <attachment id="12502994" name="LUCENE-3443.patch" size="199186" author="rcmuir" created="Wed, 9 Nov 2011 01:08:09 +0000" />
                    <attachment id="12502910" name="LUCENE-3443.patch" size="199010" author="mikemccand" created="Tue, 8 Nov 2011 11:43:42 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 21 Sep 2011 17:22:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2963</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24253</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>