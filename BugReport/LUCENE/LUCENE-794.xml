<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-794/LUCENE-794.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-794] Extend contrib Highlighter to properly support PhraseQuery, SpanQuery,  ConstantScoreRangeQuery</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-794</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This patch adds a new Scorer class (SpanQueryScorer) to the Highlighter package that scores just like QueryScorer, but scores a 0 for Terms that did not cause the Query hit. This gives &apos;actual&apos; hit highlighting for the range of SpanQuerys, PhraseQuery, and  ConstantScoreRangeQuery. New Query types are easy to add. There is also a new Fragmenter that attempts to fragment without breaking up Spans.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-403&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-403&lt;/a&gt; for some background.&lt;/p&gt;

&lt;p&gt;There is a dependency on MemoryIndex.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12361915">LUCENE-794</key>
            <summary>Extend contrib Highlighter to properly support PhraseQuery, SpanQuery,  ConstantScoreRangeQuery</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="markrmiller@gmail.com">Mark Miller</reporter>
                        <labels>
                    </labels>
                <created>Sat, 3 Feb 2007 12:48:41 +0000</created>
                <updated>Tue, 8 Jul 2008 12:06:36 +0100</updated>
                    <resolved>Tue, 29 Apr 2008 23:08:28 +0100</resolved>
                                            <fixVersion>2.3.2</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>7</watches>
                                                    <comments>
                    <comment id="12470074" author="markrmiller@gmail.com" created="Sun, 4 Feb 2007 18:25:20 +0000"  >&lt;p&gt;There are two highlighting modes: highlight entire spans or highlight first and last word of each span. For the highlight first and last word of span it would probably be better to change QuerySpansExtractor.getSpansFromPhraseQuery so that it creates a series of near spans instead of a single near span with multiple clauses.&lt;/p&gt;</comment>
                    <comment id="12470090" author="markh" created="Sun, 4 Feb 2007 21:29:05 +0000"  >&lt;p&gt;Looks like a good start, Mark - thanks for contributing this!&lt;/p&gt;

&lt;p&gt;I&apos;ve had a quick play and have identified the following issues:&lt;/p&gt;

&lt;p&gt;1) Fieldname &quot;contents&quot; shouldn&apos;t be hardcoded into the Highlighter - different analyzers can behave differently for different fields (see PerFieldAnalyzerWrapper). Either pass a fieldname parameter or do as the existing highlighter does and take a TokenStream. The latter approach has the advantage of being able to avoid re-analysis and make use of any stored TermVectors (see TokenSources.java)&lt;br/&gt;
2) Analyzers which produce overlapping tokens (see Synonym analyzer in existing highlighter Junit test) are problematic in the existing code. I remember the &quot;TokenGroup&quot; class in the existing highlighter was an approach to help cater for these &quot;overlap&quot; scenarios.&lt;br/&gt;
3) Without wishing to resurrect the whole 1.4 vs 1.5 debate I beleive Lucene still targets Java 1.4. &lt;/p&gt;

&lt;p&gt;To rectify these points it&apos;s not clear to me if it would be quicker to use your code or adapt the existing highlighter code to use spans.&lt;br/&gt;
Thoughts?&lt;/p&gt;

&lt;p&gt;Thanks, again,&lt;br/&gt;
Mark&lt;/p&gt;





</comment>
                    <comment id="12470098" author="markrmiller@gmail.com" created="Sun, 4 Feb 2007 23:36:44 +0000"  >&lt;p&gt;Sorry about all that Mark H. This was literally just some test code that I quickly shoved into an api similar to your existing highlighter. If you decided that it should be something considered on it&apos;s own I would certainly have quite a bit further to go. Mostly I just put it up for your evaluation on extending the current highlighter with this highlight method.&lt;/p&gt;

&lt;p&gt;&amp;gt;1) Fieldname &quot;contents&quot; shouldn&apos;t be hardcoded into the Highlighter - different analyzers can behave differently for different fields (see &amp;gt;PerFieldAnalyzerWrapper). Either pass a fieldname parameter or do as the existing highlighter does and take a TokenStream. The latter approach &amp;gt;has the advantage of being able to avoid re-analysis and make use of any stored TermVectors (see TokenSources.java)&lt;/p&gt;

&lt;p&gt;I don&apos;t have a great solution for this right now. I need to read the TokenStream at least twice due to the MemoryIndex extracting the spans. Unfortunately, it seems I can copy the tokens to a list or pass them to the MemoryIndex &amp;#8211; I cannot do both. The MemoryIndex is also looking for a field name...so while I changed the api to take a TokenStream, I have not resolved also needing the field name. I am hoping you have some good comments. To get around reading the TokenStream twice I used the horribly hackey but quick-for-me method of adding a method to MemoryIndex that accepts a List of Tokens. Any ideas?&lt;/p&gt;

&lt;p&gt;2) Analyzers which produce overlapping tokens (see Synonym analyzer in existing highlighter Junit test) are problematic in the existing code. I remember the &quot;TokenGroup&quot; class in the existing highlighter was an approach to help cater for these &quot;overlap&quot; scenarios.&lt;/p&gt;

&lt;p&gt;I always attack this last &amp;lt;G&amp;gt;. Seems a simple fix: if position increment equals 0 skip printing out the token. It passes your test which I have added to my test code, but I am not totally confident it is perfect yet.&lt;/p&gt;

&lt;p&gt;3) Without wishing to resurrect the whole 1.4 vs 1.5 debate I beleive Lucene still targets Java 1.4.&lt;/p&gt;

&lt;p&gt;Just me being lazy. I swear I have seen Contrib stuff that says 1.5. I have gone through and stripped out all of the 1.4 except for StringBuilder for the moment.&lt;/p&gt;

&lt;p&gt;&amp;gt;To rectify these points it&apos;s not clear to me if it would be quicker to use your code or adapt the existing highlighter code to use spans.&lt;br/&gt;
&amp;gt;Thoughts? &lt;/p&gt;

&lt;p&gt;Depends entirely on what you think. I am sure I can fix all of the issues you mention (with a little advice &amp;lt;G&amp;gt;), but I am pretty new to this type of thing and perhaps you just want to start from scratch in order to achieve span highlighting with the existing highlighter. It may just be that the way I am doing this is not very compatible with the way you currently fragment and score.&lt;/p&gt;

&lt;p&gt;I have added an updated Highlighter.java and HighlighterTest.java. The MemoryIndex problem remains...so it either has to be fixed or the modified MemoryIndex must be used.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark m&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12470313" author="otis" created="Mon, 5 Feb 2007 18:59:49 +0000"  >&lt;p&gt;There is indeed some Java 1.5 code in contrib/  I believe the gdata-server uses 1.5 classes.  I think that&apos;s okay for contrib.&lt;/p&gt;</comment>
                    <comment id="12470327" author="markh" created="Mon, 5 Feb 2007 19:43:14 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;Sorry about all that Mark H&lt;br/&gt;
No need for any apologies - all help is gratefully received!&lt;br/&gt;
I don&apos;t mean to criticise your efforts or seem picky - I just wanted to record my findings somewhere useful if we were to consider working a solution up from this &quot;test code&quot; rather than tweaking the current highlighter - I&apos;m still uncertain about the best approach. I also thought it might be useful to point the potential issues out to you if you were already reliant on using this code somewhere.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;I need to read the TokenStream at least twice&lt;br/&gt;
&amp;gt;&amp;gt;I used the horribly hackey but quick-for-me method of adding a method to MemoryIndex that accepts a List of Tokens. Any ideas? &lt;/p&gt;

&lt;p&gt;I&apos;m not sure about modifying MemoryIndex. It should be easy enough to create a subclass of TokenStream - (&quot;CachedTokenStream&quot; perhaps?) which takes a real TokenStream in it&apos;s constructor and delegates all &quot;next&quot; calls to it (and also records them in a List) for the the first use. This can then be &quot;rewound&quot; and re-used to run through the same set of tokens held in the list  from the first run.&lt;/p&gt;


&lt;p&gt;&amp;gt;&amp;gt;if position increment equals 0 skip printing out the token...but I am not totally confident it is perfect yet. &lt;/p&gt;

&lt;p&gt;I think it&apos;s possible some of the more Byzantine analyzers may have a position increment &amp;gt;0 but overlap in terms of their byte offsets. I&apos;d need to check the old Junit tests to be sure on this. Welcome to my hell!&lt;/p&gt;

&lt;p&gt;Thanks again for your help.&lt;br/&gt;
Mark H&lt;/p&gt;</comment>
                    <comment id="12470374" author="markrmiller@gmail.com" created="Mon, 5 Feb 2007 22:13:01 +0000"  >&lt;p&gt;Removed 1.5 dependencies, fixed api &lt;/p&gt;</comment>
                    <comment id="12470379" author="markrmiller@gmail.com" created="Mon, 5 Feb 2007 22:23:44 +0000"  >&lt;p&gt;I switched to accepting an analyzer and a field name. I need the field name anyway for the MemoryIndex.&lt;/p&gt;

&lt;p&gt; I agree that modifying MemoryIndex was horrible and I have removed that dependency (just did it as a &apos;quickfix&apos;). &lt;/p&gt;

&lt;p&gt;I used the CachedTokenStream anyway to avoid analyzing twice (once for MemoryIndex and again for Highlighter use. Thanks for the idea...shows how bright I am having missed it &amp;lt;g&amp;gt;).&lt;/p&gt;

&lt;p&gt;I removed all of the 1.5 code.&lt;/p&gt;

&lt;p&gt;The code is probably fairly usable right now then. I think synonyms work fine unless a case does exist like you suggested.&lt;/p&gt;

&lt;p&gt;So I suppose we have 4 options:&lt;/p&gt;

&lt;p&gt;1. I extend and polish the code (needs more test cases, most of mine where written using my query parser) and it is used independently for full document highlighting based on spans. (I would like to add google cache like coloring)&lt;/p&gt;

&lt;p&gt;2. The code is either merged with the existing highlighter or gutted to create a single highlighter that can fragment based on spans or based on the original term based approach.&lt;/p&gt;

&lt;p&gt;3. The code is ignored and someone else starts fresh adding span support to the existing highlighter.&lt;/p&gt;

&lt;p&gt;4. The code languishes in purgatory and we await the unknown.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark M&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12473577" author="markrmiller@gmail.com" created="Fri, 16 Feb 2007 01:07:17 +0000"  >&lt;p&gt;Updated code to address deficiency in highlighting BooleanQueries.&lt;/p&gt;

&lt;p&gt;Use the following latest classes:&lt;/p&gt;

&lt;p&gt;CachedTokenStream&lt;br/&gt;
DefaultEncoder&lt;br/&gt;
Encoder&lt;br/&gt;
Formatter&lt;br/&gt;
Highlighter&lt;br/&gt;
QuerySpansExtractor&lt;br/&gt;
SimpleFormatter&lt;br/&gt;
HighlighterTest&lt;/p&gt;</comment>
                    <comment id="12473578" author="markrmiller@gmail.com" created="Fri, 16 Feb 2007 01:10:31 +0000"  >&lt;p&gt;Using an Analyzer that produces multiple tokens at the same position does not yet operate correctly if used at query time. Using such a &apos;synonym&apos; analyzer for indexing and a non &apos;synonym&apos; analyzer for searching will work fine.&lt;/p&gt;</comment>
                    <comment id="12473969" author="markrmiller@gmail.com" created="Sun, 18 Feb 2007 00:03:21 +0000"  >&lt;p&gt;I had some free time today and came back this issue. I was so set on my own needs to start on this that I completely ignored looking closely at the contrib highlighter code. I went back and read over it this morning and am in the middle of a new solution. The new solution is in the form of new SpanQueryScorer that extends Scorer and plugs into the original contrib highlighter code. I have adapted almost all of the original tests (still a few to go) and so far they all still pass using the SpanQueryScorer. There is no guarantee yet that Spans will not be chopped up, but I am sure there is a way to share Span info with a Fragmenter if you wanted to rectify this (I may get to it). I also have not implemented a scoring properly yet...at the moment any term that is found returns a score of 1, and each unique term in a fragment contributes 1 to the fragment score. I will look at going further here, but I will be posting the code first after I convert the rest of the relevant tests and add a few Span Query tests.&lt;/p&gt;

&lt;p&gt;I am pretty confident this will be a great solution for &apos;actual hit&apos; highlighting with the already tried and true contrib Highlighter, fragments and all.&lt;/p&gt;

&lt;p&gt;-Mark&lt;/p&gt;</comment>
                    <comment id="12473970" author="markh" created="Sun, 18 Feb 2007 00:44:29 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;I am pretty confident this will be a great solution &lt;/p&gt;

&lt;p&gt;Great stuff, Mark. Sorry I&apos;ve been out of the loop on this recently and not participating as much as I&apos;d like - just too tied up with other work. &lt;br/&gt;
I look forward to seeing your work!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Mark H&lt;/p&gt;</comment>
                    <comment id="12474033" author="markrmiller@gmail.com" created="Sun, 18 Feb 2007 21:44:31 +0000"  >&lt;p&gt;Howdy Mark H, I have not got into making new SpanQuery tests yet, but at this point I could use some help/guidance. All of the original highlighter tests are passing with the new SpanScorer except for two: &lt;/p&gt;

&lt;p&gt;1. testFieldSpecificHighlighting&lt;/p&gt;

&lt;p&gt;This will not pass the second assertion (ignore fields) because when i add the TokenStream to a MemoryIndex I have to add it to a field. I am stumped on getting around this one.&lt;/p&gt;

&lt;p&gt;2. testOverlapAnalyzer2&lt;/p&gt;

&lt;p&gt;Passes the first bunch but then fails on one. This is because I am looking up terms based on position since the Spans do not return the term text. The first assertion failing is looking for &apos;hi-&amp;lt;b&amp;gt;speed&amp;lt;/b&amp;gt;&apos; but finds &apos;&amp;lt;b&amp;gt;hi-speed&amp;lt;/b&amp;gt;&apos; because both &apos;speed&apos; and &apos;hi-speed&apos; are at position 0...consequently both score a 1. Any thoughts? I was thinking about gathering all possible terms in the SpanQueryExtractor and someone using them...&lt;/p&gt;

&lt;p&gt;Beyond that, I am sure you can find plenty of other things to point out . Have at me &amp;lt;g&amp;gt;&lt;/p&gt;

&lt;p&gt;Any ideas on scoring would be appreciated as well.&lt;/p&gt;

&lt;p&gt;Feel free to run with this on your own if you have time as well...or run with it a bit and pass it back, or just provide some guidance as I go...whatever works out best for you.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark M&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12474035" author="markrmiller@gmail.com" created="Sun, 18 Feb 2007 21:46:19 +0000"  >&lt;p&gt;By the way...I apologize the file list is so messy now.&lt;/p&gt;

&lt;p&gt;You just need:&lt;/p&gt;

&lt;p&gt;SpanScorer&lt;br/&gt;
SpanQueryExtractor&lt;br/&gt;
CachedTokenStream&lt;br/&gt;
SpanHighlighterTest&lt;/p&gt;

&lt;p&gt;and there is the dependency on MemoryIndex&lt;/p&gt;</comment>
                    <comment id="12474582" author="markrmiller@gmail.com" created="Tue, 20 Feb 2007 22:18:02 +0000"  >&lt;p&gt;Almost at the holy grail here. Everything works except the optional ignoring fields in the Query object. Scores work, all other tests pass, and even better there is no more limitation of only highlighting the first and last term in a Span &amp;#8211; instead all correct terms in each Span will be highlighted. The only change to the existing code I had to make was to add a parameter to scoreToken(Token token) &amp;#8211; I had to add int position.&lt;/p&gt;

&lt;p&gt;I still think it is very feasible to pass info from this SpanScorer to a Fragmenter so that the Freagmenter can attempt to avoid splitting up Spans.&lt;/p&gt;

&lt;p&gt;The current code will correctly highlight pretty much any standard or span query ( I think &amp;lt;g&amp;gt;) based on &apos;actual&apos; hits using the exisiting contrib highlighter code...I have yet to write out the new extensive Span tests and I would appreciate it if some others would go over the code for some obvious improvements, but this is almost ready.&lt;/p&gt;

&lt;p&gt;Get the latests:&lt;br/&gt;
SpanScorer&lt;br/&gt;
SpanQueryExtractor&lt;br/&gt;
CachedTokenStream&lt;br/&gt;
SpanHighlighterTest &lt;br/&gt;
WeightedSpanTerm&lt;br/&gt;
Highlighter&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12474590" author="karl.wettin" created="Tue, 20 Feb 2007 22:37:11 +0000"  >&lt;p&gt;Mark, I&apos;ll take a look at this any year now. I think the code can be used or tweaked to act as &quot;term order suggestion&quot; and &quot;untokenized cosmetic suggestion from stored values&quot; in my didyoumean-patch.&lt;/p&gt;

&lt;p&gt;Is there some documentation that describes this patch in a  chronologically ordered text rather than &quot;just&quot; the java docs? Some simple package level html would probably help me to get started.&lt;/p&gt;</comment>
                    <comment id="12475002" author="markrmiller@gmail.com" created="Thu, 22 Feb 2007 13:18:33 +0000"  >&lt;p&gt;I have a patch coming tonight. It fixes a few odd mistakes and has a little more documentation. I had wanted to subpackage it into spanscorer for now, but it appears I can&apos;t make a patch with a new folder so that is out. Should I merge my package.html documentation with the one currently in highlighter? Also, I am not sure how a contrib that depends on another contrib should work build file wise (SpanScorer depends on MemoryIndex). I just made up something that works for now.&lt;/p&gt;

&lt;p&gt;This new patch will be off the trunk so now the RangeQuery test fails as it does with the original QueryScorer...you cannot highlight a constantrangequery to my knowledge.&lt;/p&gt;

&lt;p&gt;You also cannot ignore the fields in the query as you can with QueryScorer so that test fails. The only way that I can see doing this is to have the option in your query parser of ignoring all fields and just using one field name during parsing. Send the field-normal Query to search, and then make a field-neutered query for highlighting. That is the approach I will be taking with my query parser. I sure wish there was something better though.&lt;/p&gt;

&lt;p&gt;Ill post the patch when I get out of work.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12475207" author="markrmiller@gmail.com" created="Fri, 23 Feb 2007 00:03:18 +0000"  >&lt;p&gt;Forget all the .java files...just get spanhighlighter.patch and apply to the trunk.&lt;/p&gt;

&lt;p&gt;Still looking for pointers on how to handle to build.xml&lt;/p&gt;</comment>
                    <comment id="12475289" author="markh" created="Fri, 23 Feb 2007 08:27:10 +0000"  >&lt;p&gt;Hi Mark,&lt;br/&gt;
I found a little time to look at the span Highlighter the other night and was struggling with some missing bits and pieces (updated Scorer, missing SynonymAnalyzer etc) so only got as far as getting it all to compile before I ran out of time. Hopefully the patch will make life easier - will investigate when I have another chance.&lt;/p&gt;

&lt;p&gt;As for the build.xml - have a look at XMLQueryParser&apos;s build.xml in contrib. This has a dependency on the &quot;queries&quot; contrib module added to the build.xml.&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Mark H&lt;/p&gt;</comment>
                    <comment id="12475316" author="markrmiller@gmail.com" created="Fri, 23 Feb 2007 11:52:41 +0000"  >&lt;p&gt;Yeah the patch should take care of all of that...I would have started with a patch, but this was literally my first and it took me a bit to figure it all out, especially with eclipses subclipse plugin using absolute paths instead of relative in the patch..then I was trying forever to add a new package before finding out I can&apos;t add a folder to a patch...but now that I got it all worked out it should make life much easier for anyone trying this &amp;lt;g&amp;gt; I will use patches from now on.&lt;/p&gt;

&lt;p&gt;Thanks for the build.xml info and for taking a look.&lt;/p&gt;</comment>
                    <comment id="12476476" author="markrmiller@gmail.com" created="Wed, 28 Feb 2007 01:08:02 +0000"  >&lt;p&gt;Patch version 2&lt;/p&gt;

&lt;p&gt;Changed to correct build.xml, removed some unneeded code&lt;/p&gt;

&lt;p&gt;Has been working well for me personally, could still use some additional span highlighting tests&lt;/p&gt;</comment>
                    <comment id="12478609" author="markrmiller@gmail.com" created="Tue, 6 Mar 2007 22:28:35 +0000"  >&lt;p&gt;This patch tries another approach instead of changing the existing Highlighter api. The result is that if you call getBestFragments more than once, you must call reset() on the SpanScorer between each call. Whether this is better than modifying the existing api, I am not sure.&lt;/p&gt;

&lt;p&gt;This patch also adds a new SimpleSpanFragmenter that fragments based on size, but ensures that Spans are not broken up. This class might not be perfect yet.&lt;/p&gt;</comment>
                    <comment id="12478936" author="markrmiller@gmail.com" created="Wed, 7 Mar 2007 22:36:59 +0000"  >&lt;p&gt;I have finally come up with a way to ignore fields and so the final test (testFieldSpecificHighlighting) passes for this. Now all original Highlighter tests pass with this patch. Pass null as the field to SpanScorer and fields will be ignored during highlighting.&lt;/p&gt;

&lt;p&gt;SpanScorer now has the same behavior as the QueryScorer except that actual hits are highlighted.&lt;/p&gt;

&lt;p&gt;I have also made a small fix to the SimpleSpanFragmenter.&lt;/p&gt;

&lt;p&gt;I am still not sure if it is better to change the Highlighter API or require the kind of nasty call to reset the SpanScorer between calls to getBestFragments.&lt;/p&gt;

&lt;p&gt;I have used a zip file this time. It contains the patch plus an index folder that holds a new class called TermModifier. This was necessary because I cannot add folders to the patch, but TermModifier needs to be in the org.apache.lucene.index package. First apply then patch, then add the index folder to the correct place in the Highlighter contrib section.&lt;/p&gt;

&lt;p&gt;Not a lot left to do here. What do you think Mark H? &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12479883" author="markh" created="Sat, 10 Mar 2007 23:04:51 +0000"  >&lt;p&gt;Hi Mark,&lt;br/&gt;
Got the code patched and running here.&lt;br/&gt;
Junit seems to work fine but I feel a little uncomfortable about use of the TermModifier class. Using this has the potentially undesirable side-effect of changing the client&apos;s query field. If they plan on re-running the same query this could be a problem.&lt;/p&gt;

&lt;p&gt;I&apos;ll need to have a think if there is a better solution to this.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                    <comment id="12479886" author="markrmiller@gmail.com" created="Sat, 10 Mar 2007 23:34:51 +0000"  >&lt;p&gt;Hey Mark,&lt;/p&gt;

&lt;p&gt;I wasn&apos;t too happy about TermModifier either since I am basically violating encapsulation...TermModifier basically makes field public. I really don&apos;t see how it is possible to ignore fields in another way though. If you can think of a way, that would be awesome . At a minimum, the Term fields could be set back to their original value after doing the Span search...I wouldn&apos;t think that would be much of a performance hit.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12480175" author="markh" created="Mon, 12 Mar 2007 19:33:40 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;At a minimum, the Term fields could be set back to their original value after doing the Span search..&lt;/p&gt;

&lt;p&gt;Hmm. If the query is being reused in a multi-threaded server environment this wouldn&apos;t fly.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;I really don&apos;t see how it is possible to ignore fields in another way though&lt;/p&gt;

&lt;p&gt;I can think of one. Your current approach is based on modifying the query to suit the MemoryIndex content. Another approach may be to modify the MemoryIndex content to suit the query. Your code creates a MemoryIndex when presented with the text of a field. If it recognised it was being used in &quot;field-insensitive mode&quot; it could extract the query terms and create a MemoryIndex field for each unique fieldname in the set of query terms - using the same source text (a CachedTokenStreamAnalyzer  could be used to avoid excessive tokenization of this text)&lt;br/&gt;
This approach would of course use some more memory but avoids the unpleasantness of changing Query objects&apos; contents.&lt;br/&gt;
I haven&apos;t fully considered the implications of this idea yet - initial thoughts?&lt;/p&gt;

&lt;p&gt;Cheers&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                    <comment id="12480207" author="markrmiller@gmail.com" created="Mon, 12 Mar 2007 22:22:43 +0000"  >&lt;p&gt;&quot;Another approach may be to modify the MemoryIndex content to suit the query. Your code creates a MemoryIndex when presented with the text of a field. If it recognised it was being used in &quot;field-insensitive mode&quot; it could extract the query terms and create a MemoryIndex field for each unique fieldname in the set of query terms&quot;&lt;/p&gt;

&lt;p&gt;This should work fine. I had dismissed it ( and again butted heads with it for a while now that you mentioned it) because I couldn&apos;t see the forest through the trees. I kept thinking, this is just not going to work with a Span query that has terms from different fields. Over and over I thought that. How can I ignore fields in a SpanQuery. Now it hits me, rather embarrassingly, such a SpanQuery doesn&apos;t make sense at all.&lt;/p&gt;

&lt;p&gt;I will try your approach and submit a new patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12480222" author="markh" created="Mon, 12 Mar 2007 23:38:15 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;How can I ignore fields in a SpanQuery. Now it hits me, rather embarrassingly, such a SpanQuery doesn&apos;t make sense at all. &lt;/p&gt;

&lt;p&gt;Just to make sure we&apos;re talking about the same thing. Yes, I too came to the obvious realisation that a single SpanQuery cannot test content from more than one field - but I don&apos;t think that is something we were trying to support here. The requirement (as I understand it) is to support a scenario where a SpanQuery  was testing only one field, say the &quot;body&quot; field and yet the user wanted to see any matches that just so happened to occur in another field, say the &quot;title&quot; field. Nowhere in the query was there a suggestion of any criteria mandatory or otherwise testing the &quot;title&quot; field - the user just wanted to highlight the title field for additional decoration.&lt;br/&gt;
In this scenario we have the challenge of taking the &quot;body&quot; query terms and using them to highlight &quot;title&quot; field content. A &quot;match&quot; would have to disregard the original choice of field name but would still require that  the positions of term text adhered to the SpanQuery logic.&lt;/p&gt;

&lt;p&gt;Hope this makes sense&lt;/p&gt;

&lt;p&gt;Mark&lt;/p&gt;</comment>
                    <comment id="12480230" author="markrmiller@gmail.com" created="Mon, 12 Mar 2007 23:57:20 +0000"  >&lt;p&gt;Yup, we are on the same page. I was just buried in the code at the time, and having stared at your code that ignores the field for each Term I was not  thinking from a high level but was instead stuck on the process of ignoring fields in a similar manner. For whatever reason it never dawned on me that we don&apos;t have to worry about a Span that has Terms with different field values. After staring at your suggestion long enough, my brain de-fogged.&lt;/p&gt;

&lt;p&gt;I will submit an updated patch tomorrow.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12480866" author="markrmiller@gmail.com" created="Wed, 14 Mar 2007 18:16:41 +0000"  >&lt;p&gt;Just for thought, what about a SpanOr query with two sub Span queries that target different fields? Too obscure to care about?&lt;/p&gt;

&lt;p&gt;I will post the new patch later tonight.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12480868" author="markrmiller@gmail.com" created="Wed, 14 Mar 2007 18:26:50 +0000"  >&lt;p&gt;Bah, that last comment is rubbish again. Of course that will work alright. Everything is looking sharp.&lt;/p&gt;

&lt;p&gt;On another note though, what do you think about the restriction of having to reset the SpanScorer between calls to getBestFragments? Is this preferable to an api change?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12487665" author="markrmiller@gmail.com" created="Tue, 10 Apr 2007 02:06:05 +0100"  >&lt;p&gt;Apologize for the delay on this &amp;#8211; I was pulled into a busy product launch.&lt;/p&gt;

&lt;p&gt;This adds the final piece, replacing TermModifer with multiple Memory Indexes.&lt;/p&gt;

&lt;p&gt;I also did a little refactoring, especially in the SpansExtractor.&lt;/p&gt;

&lt;p&gt;All tests now pass and I have been using this succesfully for some time now.&lt;/p&gt;

&lt;p&gt;For anyone new following this issue, ignore all of the files except for this one: spanhighlighter5.patch&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12487847" author="seanoc5" created="Tue, 10 Apr 2007 18:56:01 +0100"  >&lt;p&gt;I was able to apply the spanhighlighter5.patch. I&apos;m inexperienced with ant and svn, so I assume the slight troubles I had were self-inflicted; I mention them in case they are of any help.&lt;/p&gt;

&lt;p&gt;I might have missed something, but my MemoryIndex.java seemed to be missing the implementation of the abstract isPayloadAvailable() method from TermPositions. That was causing my build to fail, so I added the method, simply returning false.&lt;/p&gt;

&lt;p&gt;After that change, the tests run, and life was good again. I do get a failed test at org.apache.lucene.search.highlight.HighlighterTest.testGetRangeFragments(HighlighterTest.java:137), but it looks like that might be expected. The search is &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;kannedy TO kznnedy&amp;#93;&lt;/span&gt;&quot;.&lt;/p&gt;

&lt;p&gt;I am now looking into getting the total number of hits for a given query (for un-normalized scoring), and the hit positions (saved for larger scale analysis and browsing). I have code that does this, but hope I can improve on my existing approach by using this highlighting patch.&lt;br/&gt;
Thanks,&lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;</comment>
                    <comment id="12487860" author="markrmiller@gmail.com" created="Tue, 10 Apr 2007 19:09:34 +0100"  >&lt;p&gt;Sorry Sean, I forgot to mention that the patch is off of the latest &lt;br/&gt;
Lucene trunk code.&lt;/p&gt;

&lt;p&gt;The range query test should fail because they switched the query parser &lt;br/&gt;
to return a constant score query instead of a range query. Cannot &lt;br/&gt;
highlight a constant score query.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12487981" author="seanoc5" created="Wed, 11 Apr 2007 04:56:32 +0100"  >&lt;p&gt;Thanks Mark. I had the trunk from a few days ago (perhaps a week), so that was just me being lazy : -).&lt;/p&gt;

&lt;p&gt;Is there anything I should be aware of the: parser.setUseOldRangeQuery(true); in doSearching(String queryString)? &lt;span class=&quot;error&quot;&gt;&amp;#91;about&#160; line 890 in SpanHighlighterTest.java&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve read the javadocs which explain it a bit, but I don&apos;t think a understand enough to infer why you use it in the SpanHighterTest.java. If I can (relatively) safely ignore that, I will.&lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;


&lt;p&gt;Mark Miller (JIRA) wrote:&lt;br/&gt;
    [ &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;https://issues.apache.org/jira/browse/LUCENE-794?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12487860 ] &lt;/p&gt;

&lt;p&gt;Mark Miller commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-794&quot; title=&quot;Extend contrib Highlighter to properly support PhraseQuery, SpanQuery,  ConstantScoreRangeQuery&quot;&gt;&lt;del&gt;LUCENE-794&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
------------------------------------&lt;/p&gt;

&lt;p&gt;Sorry Sean, I forgot to mention that the patch is off of the latest &lt;br/&gt;
Lucene trunk code.&lt;/p&gt;

&lt;p&gt;The range query test should fail because they switched the query parser &lt;br/&gt;
to return a constant score query instead of a range query. Cannot &lt;br/&gt;
highlight a constant score query.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;SpanScorer and SimpleSpanFragmenter for Contrib Highlighter&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;                Key: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-794&quot; title=&quot;Extend contrib Highlighter to properly support PhraseQuery, SpanQuery,  ConstantScoreRangeQuery&quot;&gt;&lt;del&gt;LUCENE-794&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
                URL: &lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;https://issues.apache.org/jira/browse/LUCENE-794&lt;br/&gt;
            Project: Lucene - Java&lt;br/&gt;
         Issue Type: Improvement&lt;br/&gt;
         Components: Other&lt;br/&gt;
           Reporter: Mark Miller&lt;br/&gt;
           Priority: Minor&lt;br/&gt;
        Attachments: CachedTokenStream.java, CachedTokenStream.java, CachedTokenStream.java, DefaultEncoder.java, Encoder.java, Formatter.java, Highlighter.java, Highlighter.java, Highlighter.java, Highlighter.java, Highlighter.java, HighlighterTest.java, HighlighterTest.java, HighlighterTest.java, HighlighterTest.java, MemoryIndex.java, QuerySpansExtractor.java, QuerySpansExtractor.java, QuerySpansExtractor.java, QuerySpansExtractor.java, SimpleFormatter.java, spanhighlighter.patch, spanhighlighter2.patch, spanhighlighter3.patch, spanhighlighter5.patch, spanhighlighter_patch_4.zip, SpanHighlighterTest.java, SpanHighlighterTest.java, SpanScorer.java, SpanScorer.java, WeightedSpanTerm.java&lt;/p&gt;


&lt;p&gt;This patch adds a new Scorer class (SpanQueryScorer) to the Highlighter package that scores just like QueryScorer, but scores a 0 for Terms that did not cause the Query hit. This gives &apos;actual&apos; hit highlighting for the range of SpanQuerys and PhraseQuery. There is also a new Fragmenter that attempts to fragment without breaking up Spans.&lt;br/&gt;
See &lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;http://issues.apache.org/jira/browse/LUCENE-403 for some background.&lt;br/&gt;
There is a dependency on MemoryIndex.&lt;/p&gt;




&lt;p&gt;----------------------------------------------------------------------------------------&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-794?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12487860&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-794?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12487860&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-794&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-794&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-403&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-403&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12488039" author="markrmiller@gmail.com" created="Wed, 11 Apr 2007 10:59:32 +0100"  >&lt;p&gt;I use that to make the Range Query test pass. The old style Range Query &lt;br/&gt;
is highlightable.&lt;/p&gt;</comment>
                    <comment id="12496434" author="seanoc5" created="Thu, 17 May 2007 00:19:44 +0100"  >&lt;p&gt;Mark,&lt;br/&gt;
   Can you point me in the right direction? I want to find ALL hits (not just the top xx), and their location in the text. &lt;/p&gt;

&lt;p&gt;    I think the functionality exists in your patch, or could be easily extended. I just can&apos;t seem to get my head around where to start. &lt;br/&gt;
Thanks,&lt;/p&gt;

&lt;p&gt;Sean&lt;/p&gt;</comment>
                    <comment id="12499647" author="markrmiller@gmail.com" created="Tue, 29 May 2007 01:32:29 +0100"  >&lt;p&gt;Updated the patch to version 6. Apply against Lucene trunk.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Updated CachedTokenStream to implement reset() instead of rewind()&lt;/li&gt;
	&lt;li&gt;Removed rewind checks in CachedTokenStream&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Reordered QuerySpansExtractor constructors and added one&lt;/li&gt;
	&lt;li&gt;QuerySpansExtractor now interns field name for faster comparisons against Token fields&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12499650" author="michaelbusch" created="Tue, 29 May 2007 01:42:57 +0100"  >&lt;p&gt;Hi Mark,&lt;/p&gt;

&lt;p&gt;I don&apos;t know the details of your patch. I just saw your class &lt;br/&gt;
CachedTokenStream and was wondering if you&apos;re aware of &lt;br/&gt;
the new class CachingTokenFilter in the analysis package?&lt;br/&gt;
Maybe you could use that?&lt;/p&gt;</comment>
                    <comment id="12499651" author="markrmiller@gmail.com" created="Tue, 29 May 2007 01:59:23 +0100"  >&lt;p&gt;Thanks Michael &amp;#8211; I was not aware and will certainly make the change in the next patch I put up.&lt;/p&gt;</comment>
                    <comment id="12500727" author="markrmiller@gmail.com" created="Fri, 1 Jun 2007 15:41:26 +0100"  >&lt;p&gt;Minor update to straighten a few things out.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Replaced custom CachingTokenStream with Lucene&apos;s CachingTokenFilter&lt;/li&gt;
	&lt;li&gt;Some refactoring in the SpanExtractor (now WeightedSpanTermExtractor)&lt;/li&gt;
	&lt;li&gt;Updated some stale JavaDoc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12501682" author="markrmiller@gmail.com" created="Tue, 5 Jun 2007 21:05:53 +0100"  >&lt;p&gt;I plan on one more release and than I am finished.&lt;/p&gt;

&lt;p&gt;I need to optimize the scoring (stop looking at positions for terms that are not position sensitive)&lt;/p&gt;

&lt;p&gt;Make a couple unit tests to check for a bug I suspect&lt;/p&gt;

&lt;p&gt;Turn the javadoc&apos;s into something I am actually proud of.&lt;/p&gt;

&lt;p&gt;I would wait for this final patch before taking a look at this Mark H.&lt;/p&gt;

&lt;p&gt;I apologize for being so incremental on this issue...lesson learned.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12506300" author="markrmiller@gmail.com" created="Tue, 19 Jun 2007 22:25:02 +0100"  >
&lt;p&gt;patch version 8 : Apply to root dir of trunk&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed a bug that was caused when a query had the same term multiple times&lt;/li&gt;
	&lt;li&gt;Added a unit test for the bug just mentioned&lt;/li&gt;
	&lt;li&gt;Improved performance by not converting Querys that are not position sensitive to SpanQuerys. Non position sensitive Query clauses are treated the same way the standard Scorer would treat them.&lt;/li&gt;
	&lt;li&gt;Some refactoring based on the previous change.&lt;/li&gt;
	&lt;li&gt;Improved some of the JavaDoc comments&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12508659" author="markrmiller@gmail.com" created="Wed, 27 Jun 2007 22:22:16 +0100"  >&lt;p&gt;patch version 9 : Apply to root dir of trunk &lt;/p&gt;

&lt;p&gt;Various small improvements.&lt;/p&gt;

&lt;p&gt;Be sure to use the recently updated CachingTokenFilter for optimal performance.&lt;/p&gt;</comment>
                    <comment id="12515911" author="otis" created="Fri, 27 Jul 2007 00:38:11 +0100"  >&lt;p&gt;Mark, wow, long list of files up there.  I can&apos;t tell which ones are still relevant.  Ah, only  spanhighlighter9.patch, right?&lt;/p&gt;

&lt;p&gt;It looks like all files in that patch are new files, that is, this is a parallel highlighter implementation - we can leave the old one in there and commit yours without worrying about breaking the old one.  Could you add Apache license headers to all files, switch to 2 spaces for indentation, and then I think this can get committed?&lt;/p&gt;

&lt;p&gt;Oh, and since contrib can be java 1.5+, I think you can use StringBuilder instead of StringBuffer, etc.&lt;/p&gt;</comment>
                    <comment id="12515926" author="markrmiller@gmail.com" created="Fri, 27 Jul 2007 02:34:57 +0100"  >&lt;p&gt;Requested changes have been made. Only relevant file now is spanhighlighter10.patch.&lt;/p&gt;

&lt;p&gt;This is a parallel implementation...it uses all of the current Highlighter classes. Really, it is just a new Scorer implementation that scores position sensitive queries based on correct positions for a hit.&lt;/p&gt;

&lt;p&gt;The whole approach was radically changed from the StringBuilder version, so all code is still Java 1.4 compatible.&lt;/p&gt;

&lt;p&gt;I have been using this extensively with great success for a few months now.&lt;/p&gt;</comment>
                    <comment id="12526803" author="andyliu1227" created="Wed, 12 Sep 2007 14:59:42 +0100"  >&lt;p&gt;I gave this patch a whirl, and it looks great.&lt;/p&gt;

&lt;p&gt;I do see one problem.  Say a document contains:&lt;/p&gt;

&lt;p&gt;x y z a b y z&lt;/p&gt;

&lt;p&gt;and the query is:&lt;/p&gt;

&lt;p&gt;&quot;x y z&quot;&lt;/p&gt;

&lt;p&gt;the highlighter will return (with terms in brackets denoting highlighted terms):&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;x&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;y&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;z&amp;#93;&lt;/span&gt; a b &lt;span class=&quot;error&quot;&gt;&amp;#91;y&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;z&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Since the last y and z are not part of the full phrase, they should not be highlighted.&lt;/p&gt;</comment>
                    <comment id="12526822" author="markrmiller@gmail.com" created="Wed, 12 Sep 2007 16:32:08 +0100"  >&lt;p&gt;I believe the issue is that turning a PhraseQuery into a representative Span query is only an approximate conversion.&lt;/p&gt;

&lt;p&gt;I will look into whether or not I can improve this.&lt;/p&gt;

&lt;p&gt;Thanks for the feedback.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12526834" author="markrmiller@gmail.com" created="Wed, 12 Sep 2007 17:05:49 +0100"  >&lt;p&gt;I made up a quick test to identify the behavior but did not duplicate your results:&lt;/p&gt;

&lt;p&gt;The results of your example:&lt;/p&gt;

&lt;p&gt;doc in index: x y z a b y z&lt;/p&gt;

&lt;p&gt;Searching for: &quot;x y z&quot;&lt;/p&gt;

&lt;p&gt;Result: &amp;lt;b&amp;gt;x&amp;lt;/b&amp;gt; &amp;lt;b&amp;gt;y&amp;lt;/b&amp;gt; &amp;lt;b&amp;gt;z&amp;lt;/b&amp;gt; a b y z&lt;/p&gt;

&lt;p&gt;Could you post some code demonstrating the problem?&lt;/p&gt;
</comment>
                    <comment id="12526847" author="andyliu1227" created="Wed, 12 Sep 2007 17:48:18 +0100"  >&lt;p&gt;Hmm, I tried it again and now it&apos;s working correctly.  Maybe I had interpreted the output incorrectly.  Sorry for the false alarm.&lt;/p&gt;</comment>
                    <comment id="12527134" author="andyliu1227" created="Thu, 13 Sep 2007 16:12:05 +0100"  >&lt;p&gt;Ah, I wasn&apos;t crazy.  I had the test data wrong.  Here&apos;s the code I&apos;m using to produce the failing result:&lt;/p&gt;

&lt;p&gt;        String text = &quot;y z x y z a b&quot;;&lt;/p&gt;

&lt;p&gt;        Analyzer analyzer = new StandardAnalyzer();&lt;br/&gt;
        QueryParser parser = new QueryParser(&quot;body&quot;, analyzer);&lt;br/&gt;
        Query query = parser.parse(&quot;\&quot;x y z\&quot;&quot;);&lt;/p&gt;

&lt;p&gt;        CachingTokenFilter tokenStream = new CachingTokenFilter(analyzer.tokenStream(&quot;body&quot;, new StringReader(text)));&lt;br/&gt;
        Highlighter highlighter = new Highlighter(new SpanScorer(query, &quot;body&quot;, tokenStream));&lt;br/&gt;
        highlighter.setTextFragmenter(new NullFragmenter());&lt;br/&gt;
        tokenStream.reset();&lt;/p&gt;

&lt;p&gt;        String result = highlighter.getBestFragments(tokenStream, text, 1, &quot;...&quot;);&lt;br/&gt;
        System.out.println(result);&lt;/p&gt;

&lt;p&gt;This produces:&lt;/p&gt;

&lt;p&gt;&amp;lt;B&amp;gt;y&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;x&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;y&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; a b&lt;/p&gt;

&lt;p&gt;The beginning y and z shouldn&apos;t be highlighted.&lt;/p&gt;

&lt;p&gt;If I change the the beginning y and z to x and y, I get the correct result:&lt;/p&gt;

&lt;p&gt;&quot;x y x y z a b&quot; =&amp;gt; x y &amp;lt;B&amp;gt;x&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;y&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; a b&lt;/p&gt;

&lt;p&gt;Here&apos;s a couple other failing results:&lt;/p&gt;

&lt;p&gt;&quot;z x y z a b&quot; =&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;x&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;y&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; a b&lt;br/&gt;
&quot;z a x y z a b&quot; =&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; a &amp;lt;B&amp;gt;x&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;y&amp;lt;/B&amp;gt; &amp;lt;B&amp;gt;z&amp;lt;/B&amp;gt; a b&lt;/p&gt;

&lt;p&gt;FYI, I&apos;m using the latest version of Lucene.&lt;/p&gt;</comment>
                    <comment id="12527152" author="markrmiller@gmail.com" created="Thu, 13 Sep 2007 16:52:20 +0100"  >&lt;p&gt;Thanks a lot Andy. As I suspected, the issue is that the conversion from PhraseQuery to SpanQuery is inexact. I have updated the code to handle this case though. If a PhraseQuery has 0 slop then the created Span query will now force an inorder match. This should be a nice improvement to the PhraseQuery to SpanQuery approximation.&lt;/p&gt;

&lt;p&gt;Patch with fix and new junit test attached.&lt;/p&gt;

&lt;p&gt;patch 11&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12536240" author="markrmiller@gmail.com" created="Fri, 19 Oct 2007 15:47:47 +0100"  >&lt;p&gt;Nice little addition courtesy of Michael Goddard:&lt;/p&gt;

&lt;p&gt;&quot;...In our Lucene work, we took the approach of indexing all fields into a single field, &quot;FULLTEXT&quot;, which is the default field for queries.  Our query syntax is such that a user can combine clauses against named fields with clauses with no field specified.  When we go to highlight such queries, if a given clause is against this FULLTEXT field but we&apos;re highlighting text in the TITLE field, we&apos;d still like for matching terms to be highlighted...&quot;&lt;/p&gt;

&lt;p&gt;Thanks for the patch Micahael.&lt;/p&gt;

&lt;p&gt;There is a new constructor that allows you to specify a default field. Terms from this field will be highlighted regardless of the specific field you are highlighting.&lt;/p&gt;

&lt;p&gt;Only file to worry about in that huge mess of files listed above is spanhighlighter12.patch.&lt;/p&gt;</comment>
                    <comment id="12545234" author="markrmiller@gmail.com" created="Sun, 25 Nov 2007 05:05:44 +0000"  >&lt;p&gt;Anything anyone wants to see to further this issue? It seems like a no brainer to add to the current contrib Highlighter...at this point, more than a few people are using it. Suggestions, criticisms, interest ?&lt;/p&gt;</comment>
                    <comment id="12545462" author="linuxologist" created="Mon, 26 Nov 2007 14:27:47 +0000"  >&lt;p&gt;Mark,&lt;/p&gt;

&lt;p&gt;I did a little bit more with this since I needed support for highlighting queries containing ConstantScoreRangeQuery&apos;s.  Would you be interested in looking at those changes?&lt;/p&gt;</comment>
                    <comment id="12546181" author="markh" created="Wed, 28 Nov 2007 09:44:16 +0000"  >&lt;p&gt;Makes sense to commit it to me.&lt;br/&gt;
I want to spend some time reviewing this in more detail once I&apos;m through with contributing the new web-based version of Luke.&lt;br/&gt;
At a quick glance, does the new Junit test in this patch encompass both old and new Highlighter tests? In which case should we remove the old Junit test if they overlap?&lt;/p&gt;</comment>
                    <comment id="12546236" author="markrmiller@gmail.com" created="Wed, 28 Nov 2007 13:18:19 +0000"  >&lt;p&gt;Michael: I would love to take a look. I&apos;ve got the code you sent me and I will go through it soon.&lt;/p&gt;

&lt;p&gt;Mark: That is an issue that should probably be cleaned up. A lot of tests are shared, the new SpanScorer just requires some different, odd,  setup that made it easier to copy and change the test file.  I will spend some time trying to combine them into one test file to avoid the overlap.&lt;/p&gt;</comment>
                    <comment id="12557538" author="otis" created="Thu, 10 Jan 2008 04:04:03 +0000"  >&lt;p&gt;I re-skimmed this JIRA issue just now.  Other than the final cleanup that Marks mention, any reason this is not yet in svn?&lt;/p&gt;</comment>
                    <comment id="12558784" author="gsingers" created="Mon, 14 Jan 2008 20:58:29 +0000"  >&lt;p&gt;How should this relate to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-663&quot; title=&quot;New feature rich higlighter for Lucene.&quot;&gt;&lt;del&gt;LUCENE-663&lt;/del&gt;&lt;/a&gt;?  Seems like that one also covers other kinds of queries?  I&apos;m no expert in highlighting, but it seems like there is at least 3 different issues in JIRA for enabling things like phrase queries, etc.   Should we try to consolidate these?&lt;/p&gt;</comment>
                    <comment id="12558803" author="gsingers" created="Mon, 14 Jan 2008 21:46:14 +0000"  >&lt;p&gt;Never mind, I went back and read the thread at &lt;a href=&quot;http://lucene.markmail.org/message/p4gfxewk6jcqfxxj?q=highlighter+list:org%2Eapache%2Elucene%2Ejava-user&quot; class=&quot;external-link&quot;&gt;http://lucene.markmail.org/message/p4gfxewk6jcqfxxj?q=highlighter+list:org%2Eapache%2Elucene%2Ejava-user&lt;/a&gt;&lt;br/&gt;
which I think accounts for this approach and makes sense to me.&lt;/p&gt;</comment>
                    <comment id="12558819" author="mgoddard" created="Mon, 14 Jan 2008 22:37:47 +0000"  >&lt;p&gt;Mark,&lt;/p&gt;

&lt;p&gt;I&apos;ve still got a little work to do on it, but would like to also include support for highlighting of RangeQuery within SpanNearQuery.  I have a new SpanQuery subclass which helps, and will post that to see if it merits inclusion within Lucene.  In conjunction with that, I&apos;d have one last &quot;else if&quot; clause to add to the patch covered by this issue.  Basically, I&apos;m trying to make a case for the work covered in this Jira issue being committed, since it&apos;s very useful to me.&lt;/p&gt;</comment>
                    <comment id="12561566" author="markrmiller@gmail.com" created="Wed, 23 Jan 2008 02:51:29 +0000"  >&lt;p&gt;Hows that work coming Michael? I have started turning the two test classes into one and I&apos;d like to get together one final patch with your new work when I am done.&lt;/p&gt;

&lt;p&gt;I have checked out your code that adds ConstantScoreRangQuery support and it looks great. Great idea there.&lt;/p&gt;</comment>
                    <comment id="12562103" author="mgoddard" created="Thu, 24 Jan 2008 15:40:42 +0000"  >&lt;p&gt;Mark,&lt;/p&gt;

&lt;p&gt;Thanks for looking at that.  I just entered a new Jira issue for the new work,&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1148&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1148&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which seems to work well enough with the most recent spanhighlighter_patch code, since  it already contains a clause to handle SpanQuery.  So, no need to wait on anything from me.&lt;/p&gt;

&lt;p&gt;  Mike&lt;/p&gt;</comment>
                    <comment id="12562258" author="mgoddard" created="Thu, 24 Jan 2008 22:22:33 +0000"  >&lt;p&gt;Relocated the fir.close() to after the extract(bq, terms) call.  Problem had manifested itself as a org.apache.lucene.store.AlreadyClosedException, but should be fixed via this patch.&lt;/p&gt;
</comment>
                    <comment id="12562919" author="markrmiller@gmail.com" created="Sat, 26 Jan 2008 21:44:59 +0000"  >&lt;p&gt;This patch gets rid of the separate SpanScorer test class and combines all test in HighlighterTest. Almost all of the tests are now run twice - once with the standard QueryScorer and once with the new SpanScorer.&lt;/p&gt;

&lt;p&gt;Thanks to all for the bug fixes and contributions.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12563106" author="dessaigne" created="Mon, 28 Jan 2008 10:14:53 +0000"  >&lt;p&gt;Mark,&lt;/p&gt;

&lt;p&gt;I added a few lines of code to the WeightedSpanTermExtractor.extract method to handle DisjunctionMaxQuery instances. I didn&apos;t take the time to make a patch against your new version but the code is pretty simple:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;...
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (query &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DisjunctionMaxQuery) {}}
	Map disjunctTerms = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap();
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Iterator iterator = ((DisjunctionMaxQuery) query).iterator(); iterator.hasNext();) {
		extract((Query) iterator.next(), disjunctTerms);
	}
	terms.putAll(disjunctTerms);
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12563128" author="markrmiller@gmail.com" created="Mon, 28 Jan 2008 12:36:17 +0000"  >&lt;p&gt;Thanks, looks great.&lt;/p&gt;

&lt;p&gt;New patch with posted code.&lt;/p&gt;</comment>
                    <comment id="12570472" author="markrmiller@gmail.com" created="Tue, 19 Feb 2008 21:47:29 +0000"  >&lt;p&gt;Hey Mark H, any chance you will have some time to look at this soon?&lt;/p&gt;

&lt;p&gt;Now that the test classes have been merged, any change to the current contrib test class will break this patch.&lt;/p&gt;

&lt;p&gt;I think everything is good except that we might want to alert which Highlighter version caused the Junit test to fail., since almost every test is run with both the standard and new Span Highlighter. I may just be nitpicking there though.&lt;/p&gt;</comment>
                    <comment id="12570478" author="markh" created="Tue, 19 Feb 2008 22:17:13 +0000"  >&lt;p&gt;Will do. I&apos;m taking a quick look now but should have more time tomorrow.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                    <comment id="12570505" author="markh" created="Tue, 19 Feb 2008 23:46:29 +0000"  >&lt;p&gt;Couple of quick comments from a first look.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I amended the new unit test, stripped out all new &quot;Span&quot; related tests and compared running it against 2.3 highlighter code and this patch. On this rough test it looks like the new implementation is slightly faster executing these tests (2.6 seconds vs 3.0). Good stuff.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The general advice on using the Highlighter is to call it with re-written queries in order to highlight fuzzy queries etc. That being the case, the support for ConstantScoreRangeQuery in WeightedSpanTermExtractor is not likely to work because ConstantScoreRangeQuery rewrites to a ConstantScoreQuery and therefore can&apos;t be inspected for terms.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Hope to spend some more time looking at this tomorrow.&lt;/p&gt;</comment>
                    <comment id="12570515" author="markrmiller@gmail.com" created="Wed, 20 Feb 2008 00:53:47 +0000"  >&lt;p&gt;Good catch right off Mark. Appreciate you looking into this so quickly &amp;lt;g&amp;gt; You&apos;ve got a darn quick eye for problems.&lt;/p&gt;

&lt;p&gt;Hey Michael G. How are you dealing with the rewrite issue for the ConstantScoreRangeQuery? I assume you just are not using rewrite? Any comments on this?&lt;/p&gt;</comment>
                    <comment id="12570849" author="markh" created="Wed, 20 Feb 2008 22:05:29 +0000"  >&lt;p&gt;Actually is it worth trying to resolve this ConstantScoreRangeQuery issue?&lt;/p&gt;

&lt;p&gt;1) A large range can produce a lot of terms - extracting these would bloat memory and slow down highlighting. &lt;br/&gt;
2) The sorts of &quot;quantity&quot; fields that are subject to ranges (prices, dates, lat-lon coordinates) don&apos;t typically need highlighting anyway because:&lt;br/&gt;
    a) range criteria is normally mandatory (so ALL results are expected to match the range and highlighting matches is unnecessary)&lt;br/&gt;
    b) Quantities are normally held in dedicated fields with only one value. Unlike free-text fields there&apos;s no need for the user&apos;s eye to scan large amounts of information looking for the &quot;hit&quot; so, again highlighting/summarising is generally less useful.&lt;/p&gt;

&lt;p&gt;Given the unavoidable performance overhead this introduces and the sneaking suspicion that it&apos;s not useful anyway is this worth supporting?&lt;/p&gt;

&lt;p&gt;Would be keen to know what the scenario was that introduced this as a requirement.&lt;/p&gt;</comment>
                    <comment id="12570896" author="klaasm" created="Thu, 21 Feb 2008 00:00:42 +0000"  >&lt;p&gt;This may be largely irrelevant, but Solr has a ConstantScorePrefixQuery which has similar issues (but &lt;em&gt;should&lt;/em&gt; be highlighted most of the time).&lt;/p&gt;

&lt;p&gt;It might find its way into lucene core one day.&lt;/p&gt;</comment>
                    <comment id="12570917" author="mgoddard" created="Thu, 21 Feb 2008 01:20:22 +0000"  >&lt;p&gt;I&apos;m fairly certain that Mark H.&apos;s comments are correct, but somehow I was getting highlighting.  ConstantScoreRangeQuery was the query I&apos;d used initially, but I had to later introduce a SpanRangeQuery which I could embed in SpanNearQuery instances.  And, yes, we have users who need this perverse combination.  They have a query syntax which is very expressive and enables them to nest &quot;proximity&quot; (SpanNearQuery) queries to an arbitrary depth; they can even embed numeric range queries within any of these sub-queries.  The requirement is mainly cultural, arising out of the long time use of a pure boolean text engine.  Still, over the past fifteen or so years, the user base has developed a fairly large body of &quot;literature&quot; &amp;#8211; queries they use to find certain things &amp;#8211; and they don&apos;t want to throw all of that away.  I agree that this type of thing is sort of specialized, but I thought there might just be a few others out there with similar needs.  The need to highlight all of this is due to the fact that several tools are use to post-process search results and visualize them.&lt;/p&gt;

&lt;p&gt;I really appreciate the attention you guys have given to this.  There&apos;s the background from my end.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                    <comment id="12570921" author="markrmiller@gmail.com" created="Thu, 21 Feb 2008 01:51:14 +0000"  >&lt;p&gt;Thanks Michael,&lt;/p&gt;

&lt;p&gt;Seems we can drop it to me then.&lt;/p&gt;

&lt;p&gt;I don&apos;t know that the performance would be that bad - you are only extracting the terms from an index with a single document, so there is not likely to be &lt;b&gt;that&lt;/b&gt; many terms. &lt;/p&gt;

&lt;p&gt;but,&lt;/p&gt;

&lt;p&gt;Initially I thought that highlighting something like the Date would be nice as it would visually indicate that piece&apos;s involvement in selecting the document...but as Mark points out, its really not that helpful at all.&lt;/p&gt;

&lt;p&gt;Since Micahel doesn&apos;t even need it anymore, it seems we prob shouldn&apos;t even keep it as configurable. Just drop it then?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12570979" author="markh" created="Thu, 21 Feb 2008 08:16:54 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;This may be largely irrelevant, but Solr has a ConstantScorePrefixQuery which has similar issues&lt;/p&gt;

&lt;p&gt;No, very relevant. Only yesterday I had a user with exactly the same highlighting problem&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;it seems we prob shouldn&apos;t even keep it as configurable. Just drop it then?&lt;/p&gt;

&lt;p&gt;My nightmare scenario is systems where people are using ConstantScoreRangeQuery in their queries to do both latitude and longitude ranges over large areas - that&apos;s a lot of terms. I&apos;d at least want the option of NOT loading them all into RAM at once when highlighting.&lt;/p&gt;

&lt;p&gt;Maybe we could look at having different highlight &quot;matchers&quot;. The existing approach of keeping a big bag of query terms becomes a &quot;TermsMatcher&quot; (simply looks up tokens in a HashSet of terms), You can imagine a new &quot;PrefixMatcher&quot; which would examine tokens using &quot;startsWith&quot; and a &quot;RangeMatcher&quot; examine tokens using just a start and end term. However, there&apos;s  a danger we could end up re-implementing a lot of query logic so maybe the relevant queries/filters could implement a &quot;Matcher&quot; interface to enable the same logic that is used when scanning TermEnum at query time to be used by the Highlighter when looking at TokenStreams i,e. something like this:&lt;br/&gt;
interface Matcher&lt;br/&gt;
{&lt;br/&gt;
   boolean matches(String value)&lt;br/&gt;
}&lt;br/&gt;
Needs some more thought yet but it could be an approach.&lt;/p&gt;</comment>
                    <comment id="12571088" author="paul.elschot@xs4all.nl" created="Thu, 21 Feb 2008 15:59:47 +0000"  >&lt;p&gt;One way to solve the problem of many terms in a range or a prefix query is by indexing terms in a hierarchy of prefixes, for example for a date CCYYMMDD can be indexed as all of C, CC, CCY, CCYY, CCYYMM, CCYYMMD and CCYYMMDD on the same position.&lt;br/&gt;
Then for a range and prefix queries the query analyzer can construct an OR over as few terms as possible.&lt;br/&gt;
Query search and highlighting would work faster and still correct as they are based on the term positions.&lt;/p&gt;</comment>
                    <comment id="12576672" author="bkeil@mouthpunch.com" created="Sun, 9 Mar 2008 01:11:25 +0000"  >&lt;p&gt;This is a patch that applies on top of  SpanHighlighter-01-28-2008.patch in order to highlight MutliPhraseQueries&lt;/p&gt;</comment>
                    <comment id="12576954" author="markrmiller@gmail.com" created="Mon, 10 Mar 2008 11:55:21 +0000"  >&lt;p&gt;Another attempt at putting this to bed.&lt;/p&gt;

&lt;p&gt;Added the MultiPhraseQuery support patch above - thanks!&lt;br/&gt;
Updated some code to stop using deprecated methods.&lt;br/&gt;
Made highlighting ConstantScoreRangeQuerys optional, defaulting to false.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12590841" author="otis" created="Mon, 21 Apr 2008 04:48:44 +0100"  >&lt;p&gt;Hey, is this 14-month old (impressive persistence, MM) piece of work ready to be committed?&lt;/p&gt;</comment>
                    <comment id="12591031" author="markh" created="Mon, 21 Apr 2008 21:16:08 +0100"  >&lt;p&gt;Just tried the latest of everything- patch applies cleanly, Junit test passes and I&apos;ve just run my own additional side-by-side tests with my content to see the effects of new phrase support and without.&lt;/p&gt;

&lt;p&gt;Looks good to me - unless there are any objections I&apos;ll go ahead and commit.&lt;/p&gt;</comment>
                    <comment id="12593030" author="maurizio316" created="Tue, 29 Apr 2008 15:42:35 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
probably I&apos;m missing something, I&apos;m not sure this is the right place to ask my question, but I can&apos;t understand how patch mechanism works.&lt;br/&gt;
First, I downloaded source code from &lt;a href=&quot;http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/highlighter/&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/repos/asf/lucene/java/trunk/contrib/highlighter/&lt;/a&gt;, then I tried to apply every patches listed above.&lt;br/&gt;
I wrote a trivial bash script for apply patches (I&apos;m assuming that these one are not cumulative patch), but unsuccessfully.&lt;/p&gt;

&lt;p&gt;thanks in advance...&lt;/p&gt;

&lt;p&gt;Maurizio&lt;/p&gt;


&lt;p&gt;patch.sh&lt;br/&gt;
/&lt;b&gt;-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&lt;/b&gt;/&lt;br/&gt;
#!/bin/sh&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter2.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter3.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter4.patch&lt;br/&gt;
unzip spanhighlighter_patch_4.zip&lt;br/&gt;
mv index src/java/org/apache/lucene/&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter5.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter6.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter7.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter8.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter9.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter10.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter11.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter12.patch&lt;br/&gt;
patch -p2 &amp;lt; spanhighlighter_24_January_2008.patch&lt;br/&gt;
patch -p2 &amp;lt; SpanHighlighter-01-26-2008.patch&lt;br/&gt;
patch -p2 &amp;lt; SpanHighlighter-01-28-2008.patch&lt;br/&gt;
patch -p2 &amp;lt; MultiPhraseQueryExtraction.patch&lt;br/&gt;
patch -p2 &amp;lt; SpanHighlighter-02-10-2008.patch&lt;br/&gt;
patch -p2 &amp;lt; MultiPhraseQueryExtraction.patch&lt;/p&gt;
</comment>
                    <comment id="12593032" author="steve_rowe" created="Tue, 29 Apr 2008 15:56:34 +0100"  >&lt;p&gt;Hi Maurizio, &lt;/p&gt;

&lt;p&gt;SpanHighlighter-02-10-2008.patch should contain everything - start again with a clean checkout and apply only this patch.&lt;/p&gt;</comment>
                    <comment id="12593049" author="bwhitman" created="Tue, 29 Apr 2008 18:00:11 +0100"  >&lt;p&gt;hi, after checking out lucene trunk and applying the 02-10-2008 patch I am getting this during &quot;ant dist&quot;:&lt;/p&gt;

&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; /Users/bwhitman/outside/lucene/java/trunk/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor.java:35: package org.apache.lucene.index.memory does not exist&lt;/p&gt;

&lt;p&gt;Any ideas? The patch does say &quot;relies on MemoryIndex&quot; but that was committed a long time ago and is in contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java in lucene trunk.&lt;/p&gt;

</comment>
                    <comment id="12593068" author="maurizio316" created="Tue, 29 Apr 2008 18:54:13 +0100"  >&lt;p&gt;@Steven&lt;br/&gt;
thanks a lot, now it&apos;s working&lt;br/&gt;
@Brian&lt;br/&gt;
looking for lucene-memory-x.x.x.jar&lt;/p&gt;</comment>
                    <comment id="12593077" author="bwhitman" created="Tue, 29 Apr 2008 19:22:51 +0100"  >&lt;p&gt;Ah, got it. You have to ant dist before applying the patch to build the memory jar, then apply the patch and ant again.&lt;/p&gt;</comment>
                    <comment id="12593143" author="markh" created="Tue, 29 Apr 2008 23:08:03 +0100"  >&lt;p&gt;Committed as part of r652164.&lt;/p&gt;

&lt;p&gt;Thanks for all your hard work and putting up with my limited availability/support, Mark. &lt;br/&gt;
I owe you a beer..&lt;/p&gt;</comment>
                    <comment id="12593144" author="markh" created="Tue, 29 Apr 2008 23:08:28 +0100"  >&lt;p&gt;Committed as part of r652164.&lt;/p&gt;</comment>
                    <comment id="12593145" author="bwhitman" created="Tue, 29 Apr 2008 23:18:05 +0100"  >&lt;p&gt;I must be missing something, but after your commit, I did a clean checkout of lucene trunk, did an ant dist and am getting the same MemoryIndex problem as I reported above. Before I could just apply the patch after doing the ant dist first but now that the patch is in trunk I can&apos;t get around that. How are you compiling lucene now from trunk?&lt;/p&gt;
</comment>
                    <comment id="12593166" author="hossman" created="Wed, 30 Apr 2008 00:24:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;You have to ant dist before applying the patch to build the memory jar, then apply the patch and ant again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this seems like a bug/inconsistency in the new contrib/highlighter/build.xml&lt;/p&gt;

&lt;p&gt;it added a &quot;buildHighlighter&quot; target which takes care of the dependency in building contrib/memory ... this isn&apos;t the way this is normally handled in contrib build.xml files because it&apos;s a non standard target name that people (and the contrib walking code) don&apos;t know about.&lt;/p&gt;

&lt;p&gt;xml-query-parser has a better example of doing this same kind of dependency...&lt;/p&gt;

&lt;p&gt;&amp;lt;target name=&quot;compile-core&quot; depends=&quot;build-queries, common.compile-core&quot; /&amp;gt;&lt;/p&gt;</comment>
                    <comment id="12593177" author="markrmiller@gmail.com" created="Wed, 30 Apr 2008 01:07:57 +0100"  >&lt;p&gt;Darn...waited just too long to comment on this. I had noticed two tiny things: there is a System.out if a query is not recognized by the Query to Span converter.  Also, the get weightedTerms call might want to accept a cachingtokenfilter rather than a tokenstream...I don&apos;t think this is a biggie though...just avoids double wrapping in a cachingtokenfilter if that is what is passed in. Someone mentioned that one on the list a few days ago. Neither issues are a big deal, but would be nice to get the System.out out of there...sorry I missed it in the patch.&lt;/p&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;p&gt;Sorry about the bad build file Hoss &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I swear I copied it off another contrib (I didn&apos;t know how to do it frankly), so I can&apos;t explain why its so incorrect. Maybe I have accumulated too much of this beer I keep demanding and dont remember changing things for the worse...&lt;/p&gt;</comment>
                    <comment id="12593184" author="markrmiller@gmail.com" created="Wed, 30 Apr 2008 01:46:29 +0100"  >&lt;p&gt;Here is a kill on the System.out.&lt;/p&gt;

&lt;p&gt;I should make a new issue right?&lt;/p&gt;</comment>
                    <comment id="12595830" author="otis" created="Sat, 10 May 2008 16:38:27 +0100"  >&lt;p&gt;Probably no need for a new issue, just commit the fix.&lt;br/&gt;
But I also noticed that CHANGES.txt has no mention of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-794&quot; title=&quot;Extend contrib Highlighter to properly support PhraseQuery, SpanQuery,  ConstantScoreRangeQuery&quot;&gt;&lt;del&gt;LUCENE-794&lt;/del&gt;&lt;/a&gt;.  Somebody forgot to mention the fix there?  It&apos;s not too late &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="12596632" author="otis" created="Wed, 14 May 2008 06:28:00 +0100"  >&lt;p&gt;Regarding issues with building this, I am seeing the same thing, both for contrib/highlighter and contrib/xml-query-parser.  Running &quot;ant compile-core&quot; from within those dirs does not work and running &quot;ant build-contrib&quot; also fails.&lt;/p&gt;

&lt;p&gt;The problem in both is with the dependency (on contrib/memory and contrib/queries.  Here is what fixes xml-query-parser:&lt;/p&gt;

&lt;p&gt;Instead of:&lt;br/&gt;
..... inheritall=&quot;false/&amp;gt;&lt;/p&gt;

&lt;p&gt;Use this:&lt;br/&gt;
......inheritall=&quot;true&quot; dir=&quot;../queries&quot; /&amp;gt;&lt;/p&gt;

&lt;p&gt;And a similar thing for contrib/highlighter.&lt;br/&gt;
I&apos;ll commit both fixes shortly.&lt;/p&gt;</comment>
                    <comment id="12607415" author="tavi" created="Tue, 24 Jun 2008 00:50:08 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I&apos;m new to Lucene and the highlighter, so I apologize if my question is obvious. In any case, I&apos;m trying to allow phrase highlighting in my instance of Lucene, so I applied this patch to 2.3.2. I&apos;m confused, though, about the structure of SpanScorer vs. QueryScorer. Why does SpanScorer require the stream of source text tokens (i.e. SpanScorer(Query query, String field, CachingTokenFilter cachingTokenFilter)) while QueryScorer does not (i.e. QueryScorer(Query query, String fieldName))?&lt;/p&gt;

&lt;p&gt;Intuitively, if QueryScorer is scoring based on the number of unique query terms found in the document, wouldn&apos;t the stream of source text tokens be necessary for this calculation? I&apos;m wondering a) why is this not necessary in QueryScorer? and b) what makes it necessary in SpanScorer? I&apos;m having some trouble understanding the code, and was wondering if I could get any guidance &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Tavi&lt;/p&gt;</comment>
                    <comment id="12607437" author="markrmiller@gmail.com" created="Tue, 24 Jun 2008 02:39:45 +0100"  >&lt;p&gt;FYI: This has been applied to the trunk as well.&lt;/p&gt;

&lt;p&gt;The SpanScorer needs a TokenStream because it shoves the stream into a&lt;br/&gt;
MemoryIndex and transforms the query into a Span approximation to find hit&lt;br/&gt;
positions. This approach was used for compatibility with the current API.&lt;/p&gt;

&lt;p&gt;The QueryScorer simply +scores each Token that is in the query as well as&lt;br/&gt;
the TokenStream - so it just needs to extract the terms from the query and&lt;br/&gt;
find overlap with the TokenStream passed to the getFragments method. This is&lt;br/&gt;
not position sensitive.&lt;/p&gt;

&lt;p&gt;The SpanScorer works the same way, but it also fills the MemoryIndex and&lt;br/&gt;
gets matching Spans so that Terms in the wrong position score a 0 during&lt;br/&gt;
Highlighter Term scoring (again getBestFragments or whatever).&lt;/p&gt;

&lt;p&gt;The approach was mainly dictated by the old API. Fitting into the current&lt;br/&gt;
API seemed the most practical/efficient way to get a position sensitive&lt;br/&gt;
Highlighter in the short term.&lt;/p&gt;

&lt;p&gt;On Mon, Jun 23, 2008 at 7:51 PM, Tavi Nathanson (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;/p&gt;
</comment>
                    <comment id="12611453" author="tavi" created="Tue, 8 Jul 2008 06:02:25 +0100"  >&lt;p&gt;Hey everyone,&lt;/p&gt;

&lt;p&gt;I&apos;m having some trouble getting SpanScorer to act the way I&apos;d like for proper highlighting, and I&apos;m wondering if anyone has any suggestions.&lt;/p&gt;

&lt;p&gt;I have two fields: text_raw and text_stemmed. text_raw, as the name suggests, stores unstemmed (tokenized) text while text_stemmed stores stemmed (tokenized) text.&lt;/p&gt;

&lt;p&gt;I have queries that look over both fields. For, example, I may have the query +(text_raw:&quot;apple sauce&quot; text_stemmed:orange). This query matches &quot;apple sauce oranges&quot; but it does not match &quot;apples sauces orange&quot; (because &quot;apple sauce&quot; is not stemmed). I&apos;d like to be able to highlight accordingly: I want &quot;apple,&quot; &quot;sauce,&quot; and &quot;oranges&quot; to all be highlighted.&lt;/p&gt;

&lt;p&gt;So, even though it is in fact the raw text that ends up getting highlighted, I&apos;m looking for a way to build SpanScorer such that I don&apos;t need to limit myself to one field (&quot;field&quot; is one of the arguments to the constructor).&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;Tavi&lt;/p&gt;</comment>
                    <comment id="12611526" author="markrmiller@gmail.com" created="Tue, 8 Jul 2008 12:06:33 +0100"  >&lt;p&gt;Hey Tavi,&lt;/p&gt;

&lt;p&gt;Try passing null as the field.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;


</comment>
                </comments>
                    <attachments>
                    <attachment id="12377469" name="MultiPhraseQueryExtraction.patch" size="6402" author="bkeil@mouthpunch.com" created="Sun, 9 Mar 2008 01:11:25 +0000" />
                    <attachment id="12374132" name="SpanHighlighter-01-26-2008.patch" size="114914" author="markrmiller@gmail.com" created="Sat, 26 Jan 2008 21:44:59 +0000" />
                    <attachment id="12374176" name="SpanHighlighter-01-28-2008.patch" size="115270" author="markrmiller@gmail.com" created="Mon, 28 Jan 2008 12:36:17 +0000" />
                    <attachment id="12377519" name="SpanHighlighter-02-10-2008.patch" size="121189" author="markrmiller@gmail.com" created="Mon, 10 Mar 2008 11:55:21 +0000" />
                    <attachment id="12362653" name="spanhighlighter10.patch" size="73134" author="markrmiller@gmail.com" created="Fri, 27 Jul 2007 02:34:57 +0100" />
                    <attachment id="12365745" name="spanhighlighter11.patch" size="74187" author="markrmiller@gmail.com" created="Thu, 13 Sep 2007 16:52:20 +0100" />
                    <attachment id="12368022" name="spanhighlighter12.patch" size="77664" author="markrmiller@gmail.com" created="Fri, 19 Oct 2007 15:47:47 +0100" />
                    <attachment id="12373983" name="spanhighlighter_24_January_2008.patch" size="77031" author="mgoddard" created="Thu, 24 Jan 2008 22:22:33 +0000" />
                    <attachment id="12352194" name="spanhighlighter2.patch" size="69184" author="markrmiller@gmail.com" created="Wed, 28 Feb 2007 01:08:02 +0000" />
                    <attachment id="12352795" name="spanhighlighter3.patch" size="75202" author="markrmiller@gmail.com" created="Tue, 6 Mar 2007 22:28:35 +0000" />
                    <attachment id="12355202" name="spanhighlighter5.patch" size="73297" author="markrmiller@gmail.com" created="Tue, 10 Apr 2007 02:06:05 +0100" />
                    <attachment id="12358395" name="spanhighlighter6.patch" size="73170" author="markrmiller@gmail.com" created="Tue, 29 May 2007 01:32:29 +0100" />
                    <attachment id="12358719" name="spanhighlighter7.patch" size="70465" author="markrmiller@gmail.com" created="Fri, 1 Jun 2007 15:41:26 +0100" />
                    <attachment id="12360142" name="spanhighlighter8.patch" size="75327" author="markrmiller@gmail.com" created="Tue, 19 Jun 2007 22:25:02 +0100" />
                    <attachment id="12360691" name="spanhighlighter9.patch" size="77821" author="markrmiller@gmail.com" created="Wed, 27 Jun 2007 22:22:16 +0100" />
                    <attachment id="12351848" name="spanhighlighter.patch" size="70677" author="markrmiller@gmail.com" created="Fri, 23 Feb 2007 00:03:18 +0000" />
                    <attachment id="12352871" name="spanhighlighter_patch_4.zip" size="12330" author="markrmiller@gmail.com" created="Wed, 7 Mar 2007 22:36:59 +0000" />
                    <attachment id="12381152" name="SpanHighlighter-RemovSysOut.patch" size="525" author="markrmiller@gmail.com" created="Wed, 30 Apr 2008 01:46:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>18.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 4 Feb 2007 21:29:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12959</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26936</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>