<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:06:03 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1019/LUCENE-1019.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1019] CustomScoreQuery should support multiple ValueSourceQueries</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1019</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;CustomScoreQuery&apos;s constructor currently accepts a subQuery, and a ValueSourceQuery.  I would like it to accept multiple ValueSourceQueries.  The workaround of nested CustomScoreQueries works for simple cases, but it quickly becomes either cumbersome to manage, or impossible to implement the desired function.&lt;/p&gt;

&lt;p&gt;This patch implements CustomMultiScoreQuery with my desired functionality, and refactors CustomScoreQuery to implement the special case of a CustomMultiScoreQuery with 0 or 1 ValueSourceQueries.  This keeps the CustomScoreQuery API intact.&lt;/p&gt;

&lt;p&gt;This patch includes basic tests, more or less taken from the original implementation, and customized a bit to cover the new cases.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12379723">LUCENE-1019</key>
            <summary>CustomScoreQuery should support multiple ValueSourceQueries</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="doronc">Doron Cohen</assignee>
                                <reporter username="fizx">Kyle Maxwell</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Oct 2007 02:06:12 +0100</created>
                <updated>Fri, 25 Jan 2008 03:24:06 +0000</updated>
                    <resolved>Thu, 13 Dec 2007 06:32:38 +0000</resolved>
                            <version>2.2</version>
                                <fixVersion>2.3</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12532557" author="fizx" created="Fri, 5 Oct 2007 02:06:50 +0100"  >&lt;p&gt;Here&apos;s the patch!  BTW, I&apos;ll edit the docs as soon as someone signs off that this is a good idea!&lt;/p&gt;</comment>
                    <comment id="12532560" author="hossman" created="Fri, 5 Oct 2007 02:50:01 +0100"  >&lt;p&gt;this class seems to assume that the ValueSourceQueries should be multipled ... but it would be just as easy to assume the should be added, or averaged.&lt;/p&gt;

&lt;p&gt;It seems like it might make more sense if instead of a CustomMultiScoreQuery there was just a &quot;ProductValueSource&quot; class that took in a ValueSource[] and multiplied them&lt;/p&gt;</comment>
                    <comment id="12532789" author="fizx" created="Fri, 5 Oct 2007 23:34:23 +0100"  >&lt;p&gt;Here&apos;s a slightly simpler version of the diff (v1).&lt;/p&gt;

&lt;p&gt;The default behavior of CustomScoreQuery with multiple ValueSourceQueries does not matter to me.  I really want to be able to override it with custom logic.  Also note that multiplying twice is currently as simple as CustomScoreQuery(CustomScoreQuery(subQuery, value1), value2).  But what about things that aren&apos;t linear combinations?&lt;/p&gt;

&lt;p&gt;Use case:  I want the score to fall off exponentially as content ages, with a decay rate that varies on a per document basis.  &lt;/p&gt;

&lt;p&gt;Each document has three fields: &quot;text,&quot; &quot;created-at,&quot; and &quot;half-life.&quot;  Created-at is represented as a UNIX timestamp, and half-life in seconds.  I&apos;m not sure that the following query is able to be expressed as nested queries.  There may be another way to do this, but this seems simple and elegant to me.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class DateDecayQuery &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; CustomScoreQuery {
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; LOG2 = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.log(2);
	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now;

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DateDecayQuery(Query subQuery) {
		&lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(subQuery, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ValueSourceQuery[] {
				&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FieldScoreQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;created-at&quot;&lt;/span&gt;, Type.INT),
				&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FieldScoreQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;half-life&quot;&lt;/span&gt;, Type.INT) });
		now = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Date().getTime() / 1000; &lt;span class=&quot;code-comment&quot;&gt;// UNIX timestamp;
&lt;/span&gt;		setStrict(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
	}

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; customScore(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; doc, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; score, &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; fields[]) {
		&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; date = fields[0];
		&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; halfLife = fields[1];
		&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; dateScore = (&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.exp(LOG2 * (date - now) / halfLife);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; score * dateScore;
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12534038" author="doronc" created="Thu, 11 Oct 2007 14:41:22 +0100"  >&lt;p&gt;You could put this logic in your implementation of ValueSource, &lt;br/&gt;
possibly constructed over multiple FieldCacheSources - &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;DateDecayQuery over multiple value sources&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class DateDecayQuery &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; CustomScoreQuery {

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DateDecayQuery(Query subQuery) {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(subQuery, createValSrceQuery());
    setStrict(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; ValueSourceQuery createValSrceQuery() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ValueSourceQuery(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HalfLifeValSrc());
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class HalfLifeValSrc &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; ValueSource {
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ValueSource createdAt  = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IntFieldSource(&lt;span class=&quot;code-quote&quot;&gt;&quot;created-at&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ValueSource halfLife  = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IntFieldSource(&lt;span class=&quot;code-quote&quot;&gt;&quot;half-life&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Date().getTime() / 1000; &lt;span class=&quot;code-comment&quot;&gt;// UNIX timestamp;
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; LOG2 = &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.log(2);

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DocValues getValues(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; IndexReader reader) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DocValues valsCreated = createdAt.getValues(reader);
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DocValues valsHalfLife = halfLife.getValues(reader);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DocValues(reader.maxDoc()) {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; floatVal(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; doc) {
          &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; vCreated = valsCreated.floatVal(doc);
          &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; vHalfLife = valsHalfLife.floatVal(doc);
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.exp(LOG2 * (vCreated - now) / vHalfLife);
        }
      };
    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though usage is much simpler if this is added to the query.&lt;/p&gt;</comment>
                    <comment id="12540621" author="fizx" created="Tue, 6 Nov 2007 23:27:28 +0000"  >&lt;p&gt;Ok, I&apos;m satisfied with Doron&apos;s solution.  It&apos;d be nice to see something like this in some documentation, somewhere.  The wiki is prolly appropriate.&lt;/p&gt;</comment>
                    <comment id="12547544" author="fizx" created="Sun, 2 Dec 2007 00:17:48 +0000"  >&lt;p&gt;Hi, after trying out the combined valuesource implementation suggested by Doron, I&apos;ve found it to be &lt;em&gt;extremely&lt;/em&gt; cumbersome and brittle in practice.  Therefore, I am reopening this ticket.  &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Trying to get explain information from the sub-ValueSources was quite difficult.&lt;/li&gt;
	&lt;li&gt;There is much more code in my queries, leading to increased brittleness.&lt;/li&gt;
	&lt;li&gt;The way in which caching is handled is now unclear.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Can this ticket please be reconsidered?  Thanks!&lt;/p&gt;</comment>
                    <comment id="12547673" author="doronc" created="Sun, 2 Dec 2007 21:48:22 +0000"  >&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;The way in which caching is handled is now unclear.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;For e.g. IntFieldSource caching is done in that level, so I am not sure &lt;br/&gt;
I understand about what is unclear here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;Trying to get explain information from the sub-ValueSources was quite difficult.&lt;/li&gt;
	&lt;li&gt;There is much more code in my queries, leading to increased brittleness.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes I agree about this part.&lt;br/&gt;
I had the similar experience when combining field values, and decided to just live with that. &lt;br/&gt;
In a glance, the v2 patch seems to solve this nicely so I will look into committing this.&lt;/p&gt;

&lt;p&gt;Thanks for bringing this up,&lt;br/&gt;
Doron&lt;/p&gt;</comment>
                    <comment id="12548620" author="doronc" created="Wed, 5 Dec 2007 10:50:03 +0000"  >&lt;p&gt;lucene-1019-multi-vsq.patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;modified version2:
	&lt;ul&gt;
		&lt;li&gt;fixed hash() and equals()&lt;/li&gt;
		&lt;li&gt;added a multi vsq form of customExplain()&lt;/li&gt;
		&lt;li&gt;more documentation in customScore() and customExplain()&lt;/li&gt;
		&lt;li&gt;added test of multi vsq&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;fixed a bug in search.function tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests pass. &lt;br/&gt;
I intend to commit this in a few days. &lt;/p&gt;</comment>
                    <comment id="12549007" author="gsingers" created="Thu, 6 Dec 2007 11:54:45 +0000"  >&lt;p&gt;Somewhat related, but any thoughts on some of the newer functionality in Solr?  I really hate to see such a divergence.&lt;/p&gt;</comment>
                    <comment id="12549016" author="doronc" created="Thu, 6 Dec 2007 12:27:22 +0000"  >&lt;p&gt;When working on this I hoped that Solr would move to&lt;br/&gt;
use it, but by &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-192&quot; title=&quot;Move FunctionQuery to Lucene&quot;&gt;&lt;del&gt;SOLR-192&lt;/del&gt;&lt;/a&gt; it never happen. If someone in&lt;br/&gt;
Solr is committed to do this I will definitely work on it&lt;br/&gt;
(hoping there&apos;s nothing with the ne functionality in Solr&lt;br/&gt;
that breaks with our changes so far). I will ask in Solr.&lt;/p&gt;</comment>
                    <comment id="12551235" author="doronc" created="Thu, 13 Dec 2007 06:32:38 +0000"  >&lt;p&gt;Committed, thanks Kyle!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12384266">LUCENE-1085</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12367122" name="CustomMultiQuery.v0.diff" size="37607" author="fizx" created="Fri, 5 Oct 2007 02:06:50 +0100" />
                    <attachment id="12367164" name="CustomScoreQuery.v1.diff" size="13412" author="fizx" created="Fri, 5 Oct 2007 23:34:23 +0100" />
                    <attachment id="12371017" name="lucene-1019-multi-vsq.patch" size="25220" author="doronc" created="Wed, 5 Dec 2007 10:50:03 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 5 Oct 2007 01:50:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12726</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26710</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>