<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:13 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3736/LUCENE-3736.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3736] ParallelReader is now atomic, rename to ParallelAtomicReader and also add a ParallelCompositeReader (that requires LogDocMergePolicy to have identical subreader structure)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3736</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The plan is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Move all subreaders to ctor (builder-like API. First build reader-set, then call build)&lt;/li&gt;
	&lt;li&gt;Rename ParallelReader to ParallelAtomicReader&lt;/li&gt;
	&lt;li&gt;Add a ParallelCompositeReader with same builder API, but taking any CompositeReader-set and checks them that they are aligned (docStarts identical). The subreaders are ParallelAtomicReaders.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12540527">LUCENE-3736</key>
            <summary>ParallelReader is now atomic, rename to ParallelAtomicReader and also add a ParallelCompositeReader (that requires LogDocMergePolicy to have identical subreader structure)</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                    <parent id="12540522">LUCENE-3733</parent>
                        <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Tue, 31 Jan 2012 10:25:06 +0000</created>
                <updated>Fri, 10 May 2013 11:45:03 +0100</updated>
                    <resolved>Tue, 21 Feb 2012 16:17:27 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13198337" author="thetaphi" created="Wed, 1 Feb 2012 23:51:38 +0000"  >&lt;p&gt;Here just my cleanup work in ParallelReader, nothing new. It&apos;s as before, only &quot;bugs&quot; (missing open checks) fixed and code violations (synthetic accessors, final fields).&lt;/p&gt;

&lt;p&gt;The next step will be to remove the add() methods, as IndexReaders should not be changed after create.&lt;/p&gt;

&lt;p&gt;Will work more tomorrow.&lt;/p&gt;

&lt;p&gt;The plan is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Move all subreaders to ctor (builder-like API. First build reader-set, then call build)&lt;/li&gt;
	&lt;li&gt;Rename ParallelReader to ParallelAtomicReader&lt;/li&gt;
	&lt;li&gt;Add a ParallelCompositeReader with same builder API, but taking any CompositeReader-set and checks them that they are aligned (docStarts identical). The subreaders are ParallelAtomicReaders.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13200972" author="thetaphi" created="Sun, 5 Feb 2012 23:57:49 +0000"  >&lt;p&gt;Attached is a patch implementing the above proposal using the builder pattern. The builder pattern (sorry Robert), is the only nice setup that allows to set properties like ignroing stored fields on the parallel readers, but make the built reader unmodifiable!&lt;/p&gt;</comment>
                    <comment id="13200975" author="thetaphi" created="Mon, 6 Feb 2012 00:01:02 +0000"  >&lt;p&gt;There are som test todos: The tests for parallel readers are very simplistic and have only 2 documents (which is especially stupid for composite readers to test them). We should raise number of documents.&lt;/p&gt;</comment>
                    <comment id="13201455" author="thetaphi" created="Mon, 6 Feb 2012 18:39:06 +0000"  >&lt;p&gt;New patch with javadocs and imporved tests (to check all builder setting).&lt;/p&gt;

&lt;p&gt;I will commit this later!&lt;/p&gt;</comment>
                    <comment id="13201479" author="rcmuir" created="Mon, 6 Feb 2012 19:13:45 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The builder pattern (sorry Robert), is the only nice setup that allows to set properties like ignroing stored fields on the parallel readers, but make the built reader unmodifiable!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think its probably appropriate here, I think immutability for an indexreader subclass is worth the pain &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;But maybe we don&apos;t need it to return itself on add()? I don&apos;t think building parallelreaders is like building&lt;br/&gt;
Strings, I think it can just return void for add()... (I can&apos;t think().of().a().situation().where().this() would help code readability)&lt;/p&gt;</comment>
                    <comment id="13201481" author="mikemccand" created="Mon, 6 Feb 2012 19:16:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;But maybe we don&apos;t need it to return itself on add()? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I would prefer that add() return void.&lt;/p&gt;

&lt;p&gt;Otherwise the patch looks great!&lt;/p&gt;</comment>
                    <comment id="13201504" author="thetaphi" created="Mon, 6 Feb 2012 19:43:12 +0000"  >&lt;p&gt;If you look at the test cases, the code is much less verbose and better readable.&lt;/p&gt;

&lt;p&gt;The good thing of the builder pattern (remember the class is actually called &quot;Builder&quot;) is that nobody is required to use it). But I prefer to chain calls so I want to have the opportunity to do that.&lt;/p&gt;

&lt;p&gt;Returning void of itsself is no difference in bytecode or performance, it just adds a possibility. And everybody expects that when he sees a class named &quot;Builder&quot; with a method build().&lt;/p&gt;

&lt;p&gt;I().dont().want().to().start().fights().here().again(), but this time I will not change the patch that forces me to use another pattern i dont like. Code without chaining here looks horrible.&lt;/p&gt;

&lt;p&gt;Just&lt;br/&gt;
rewrite&lt;br/&gt;
the&lt;br/&gt;
test&lt;br/&gt;
,&lt;br/&gt;
you&lt;br/&gt;
have&lt;br/&gt;
to&lt;br/&gt;
declare&lt;br/&gt;
an&lt;br/&gt;
additional&lt;br/&gt;
variable&lt;br/&gt;
with&lt;br/&gt;
a&lt;br/&gt;
very&lt;br/&gt;
verbose&lt;br/&gt;
name&lt;br/&gt;
.&lt;/p&gt;

&lt;p&gt;If somebody wants to change this, he can do this in another issue called &quot;remove all builders from Lucene&quot;, but then please also rename the methods away from build() and rename the classes.&lt;/p&gt;</comment>
                    <comment id="13201508" author="rcmuir" created="Mon, 6 Feb 2012 19:45:35 +0000"  >&lt;p&gt;Uwe, its not a big deal to me really... just a suggestion.&lt;/p&gt;

&lt;p&gt;so +1 to commit, thanks for cleaning up ParallelReader &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13202420" author="thetaphi" created="Tue, 7 Feb 2012 14:26:22 +0000"  >&lt;p&gt;Committed trunk revision: 1241470&lt;/p&gt;

&lt;p&gt;CHANGES and MIGRATE will be added in parent issue.&lt;/p&gt;</comment>
                    <comment id="13202446" author="mikemccand" created="Tue, 7 Feb 2012 14:56:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you look at the test cases, the code is much less verbose and better readable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, you separated each method call onto a separate line, so, it&apos;d&lt;br/&gt;
look basically the same without chaining?  If only all chained API&lt;br/&gt;
consumers followed your approach...&lt;/p&gt;

&lt;p&gt;To be clear: what I dislike about chaining is it creates ambiguity&lt;br/&gt;
in how you write the code that consumes our APIs.&lt;br/&gt;
You().can().do().this().  Or, you().&lt;br/&gt;
can().&lt;br/&gt;
do().&lt;br/&gt;
this().  Or maybe you().can().&lt;br/&gt;
do().this().&lt;/p&gt;

&lt;p&gt;Ambiguity is very bad, especially in open-source dev: it invites&lt;br/&gt;
bikeshed wars, harming communities by dividing them, spending precious&lt;br/&gt;
time debating what from the outside would seem like trivial&lt;br/&gt;
differences.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If somebody wants to change this, he can do this in another issue called &quot;remove all builders from Lucene&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The first API I would fix is IndexWriterConfig; its setters should not&lt;br/&gt;
be chainable, because now we get code like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Code is already hard enough to read... we should not make it even&lt;br/&gt;
harder by enabling big hard-to-read compound expressions like this.&lt;/p&gt;

&lt;p&gt;This phenomenon is &lt;span class=&quot;error&quot;&gt;&amp;#91;unfortunately&amp;#93;&lt;/span&gt; human nature, and also well outside&lt;br/&gt;
of software development; see&lt;br/&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/Parkinson&amp;#39;s_Law_of_Triviality&quot; class=&quot;external-link&quot;&gt;http://en.wikipedia.org/wiki/Parkinson&apos;s_Law_of_Triviality&lt;/a&gt; ... the&lt;br/&gt;
less important the ambiguity the more brutal the bike shed wars will&lt;br/&gt;
be.  You see this also in Theodor Geisel (&quot;Dr Seuss&quot;)&apos;s delightful&lt;br/&gt;
Sneetches (the stars on their stomachs), his Butter Battle Book (which&lt;br/&gt;
side to butter the bread on), which end of the egg to crack (the&lt;br/&gt;
Lilliputians in Gulliver&apos;s Travels), etc.  It&apos;s not an uncommon&lt;br/&gt;
problem &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Battles over code styling is a great example of this phenomenon, and&lt;br/&gt;
fortunately we long ago adopted a standard for Lucene so we don&apos;t&lt;br/&gt;
argue (much!) about code style.  There is one way and there is no&lt;br/&gt;
(little!) ambiguity left.&lt;/p&gt;

&lt;p&gt;So I don&apos;t want to add any more chainable methods in Lucene.  It&lt;br/&gt;
creates an unnecessary ambiguity and I don&apos;t like where that will lead&lt;br/&gt;
us.  We should reduce ambiguity whenever we can: there should&lt;br/&gt;
generally be one obvious way to do something.&lt;/p&gt;</comment>
                    <comment id="13202454" author="mikemccand" created="Tue, 7 Feb 2012 15:12:27 +0000"  >&lt;p&gt;Another question: do we even need a ParallelCompositeReader?  Can&apos;t we&lt;br/&gt;
have only the Builder, and that returns a MultiReader?&lt;/p&gt;</comment>
                    <comment id="13202458" author="mikemccand" created="Tue, 7 Feb 2012 15:21:33 +0000"  >&lt;p&gt;Reopening to address the chained APIs...&lt;/p&gt;</comment>
                    <comment id="13202459" author="thetaphi" created="Tue, 7 Feb 2012 15:22:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Another question: do we even need a ParallelCompositeReader? Can&apos;t we&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;have only the Builder, and that returns a MultiReader?&lt;/p&gt;

&lt;p&gt;The problem why we need ParallelCompositeReader is that the refCounting and close logic is different. MultiReader will close/refcount its childs, but the ParallelCompositeReader must close/refcount the parallel sub readers. If you return a simple MultiReader, all tests fail, because something is closing the subreaders of the original parallel Composite/DirectoryReaders (as they are closed by the wrappers), but the original CompositeReaders stay open.&lt;/p&gt;

&lt;p&gt;If the parallel readers are DirectoryReaders it goes very bad, as the wrapped SegmentReaders are closed...&lt;/p&gt;

&lt;p&gt;The change does the following: It returns a BaseMultiReader of ParallelAtomicReaders that wrap e.g. the SegmentReaders of a DirectoryReader. On close it decRefs or closes the original wrapped DirectoryReader, but does not touch the subreaders. In contrast, a normal MultiReader would close/decRef the inner ParallelAtomicReaders, which itsself cose the SegmentReaders they wrap. The DirectoryReaders would still be open.&lt;/p&gt;</comment>
                    <comment id="13202461" author="mikemccand" created="Tue, 7 Feb 2012 15:24:41 +0000"  >&lt;p&gt;Patch, removing the chained APIs; I&apos;d like to commit this soon, if there are no objections.  Otherwise I think we should revert the first commit and continue iterating on this issue until we reach agreement.&lt;/p&gt;</comment>
                    <comment id="13202463" author="thetaphi" created="Tue, 7 Feb 2012 15:25:32 +0000"  >&lt;p&gt;Please keep the chained APIs, otherwise please also change all toString() methods in whole Lucene to no longer chain and rename all classes to no longer be called Builder with build() as method. If you keep the class names and disallow chaing you break the pattern and that will confuse people more.&lt;/p&gt;

&lt;p&gt;For me the issue is closed as I disagree, somebody else can do this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13202464" author="thetaphi" created="Tue, 7 Feb 2012 15:25:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;Patch, removing the chained APIs&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I disagree!&lt;/p&gt;</comment>
                    <comment id="13202478" author="rcmuir" created="Tue, 7 Feb 2012 15:41:57 +0000"  >&lt;p&gt;As i stated earlier on the issue, I agree technically with the builder here, for these reasons:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;its not like Document/Field where we worry about making tons of objects in indexing&lt;/li&gt;
	&lt;li&gt;as far as immutable objects for IndexReader subclasses, thats a no-brainer from my perspective.&lt;/li&gt;
	&lt;li&gt;we need lots of checks that the &apos;structure&apos; is the same to support per-segment search.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So the only remaining issue is the style... yes I don&apos;t personally like chaining, but I gave my&lt;br/&gt;
+1 to the patch, because I thought Uwe&apos;s argument was reasonable (its true its not enforced),&lt;br/&gt;
and because I don&apos;t think its worth arguing over for such an expert API (there are bigger wins&lt;br/&gt;
when it comes to cleaning up our APIs).&lt;/p&gt;

&lt;p&gt;Personally I am glad to Uwe for all this work, we wanted to fix these issues in ParallelReader &lt;br/&gt;
for a long time (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2766&quot; title=&quot;ParallelReader should support getSequentialSubReaders if possible&quot;&gt;LUCENE-2766&lt;/a&gt;). It needed a policeman to do this, for all the checks to be correct,&lt;br/&gt;
and good javadocs explaining how to make the composite case work.&lt;/p&gt;

&lt;p&gt;So maybe we should just open a separate issue for the style? I just feel we would lose so much&lt;br/&gt;
if we went back to what we had before this change, I&apos;d really prefer it not be backed out for&lt;br/&gt;
that reason.&lt;/p&gt;


</comment>
                    <comment id="13202489" author="mikemccand" created="Tue, 7 Feb 2012 15:56:58 +0000"  >&lt;p&gt;I think the changes here are awesome too &amp;#8211; ParallelReader has been&lt;br/&gt;
badly unloved for a long time, so I&apos;m very happy we are improving it&lt;br/&gt;
here.&lt;/p&gt;

&lt;p&gt;But I don&apos;t think we need to have chained APIs to achieve that good&lt;br/&gt;
progress.  Chained APIS are dangerous.  We added chained APIs in&lt;br/&gt;
IndexWriterConfig and I think that was a mistake... it gave us lots of&lt;br/&gt;
not-so-readable code.  We shouldn&apos;t encourage that and we shouldn&apos;t&lt;br/&gt;
add more.&lt;/p&gt;</comment>
                    <comment id="13202492" author="mikemccand" created="Tue, 7 Feb 2012 16:00:44 +0000"  >&lt;p&gt;OK I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3756&quot; title=&quot;Don&amp;#39;t allow IndexWriterConfig setters to chain&quot;&gt;LUCENE-3756&lt;/a&gt; to address the chained APIs in IndexWriterConfig.&lt;/p&gt;</comment>
                    <comment id="13202497" author="thetaphi" created="Tue, 7 Feb 2012 16:07:00 +0000"  >&lt;p&gt;If somebody wants to commit the changes, do it. I want to be out of that, as I don&apos;t want to be responsible when somebody opens an issue that says &quot;Builder pattern without chaining is broken&quot; (which it is). Do what you want but keep me away from it!&lt;/p&gt;

&lt;p&gt;Just a suggestion:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As noted before, a Builder class with a build() method without chaining violates the pattern, so please rename it!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I unassigned from this issue and will take care of some minor AtomicReaderContext changes (to remove one more utility method from ReaderUtil thats useless, if the API would implement what Javadocs say - I am talking about leaves()).&lt;/p&gt;</comment>
                    <comment id="13202529" author="thetaphi" created="Tue, 7 Feb 2012 16:59:23 +0000"  >&lt;p&gt;As a comment came up on IRC:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;17:21&amp;#93;&lt;/span&gt;	mikemccand: well... we could also remove the builder&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;17:22&amp;#93;&lt;/span&gt;	mikemccand: PR is expert&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IndexReaders are now unmodifiable and I was able to make numDocs, maxDocs,... all final, so reverting the removal of ParallelReader.add() is not an option. I think Robert and I agree here, the old code was too risky - we should fix all of Lucene 4&apos;s API to remove not immutable classes where possible.&lt;/p&gt;

&lt;p&gt;We can also move Parallel*Reader to contrib, its very special and seldom used &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; The test in facet module is not really needed (I was about to remove it already).&lt;/p&gt;
</comment>
                    <comment id="13202957" author="thetaphi" created="Tue, 7 Feb 2012 23:34:48 +0000"  >&lt;p&gt;Mike: Here the updated patch for Lucene trunk, as reverse merging of the revert is impossible &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It was not a good idea to revert before Steven&apos;s change...&lt;/p&gt;</comment>
                    <comment id="13203697" author="mikemccand" created="Wed, 8 Feb 2012 16:06:27 +0000"  >&lt;p&gt;Thanks Uwe, I&apos;ll start from there and iterate...&lt;/p&gt;</comment>
                    <comment id="13204131" author="mikemccand" created="Wed, 8 Feb 2012 23:56:48 +0000"  >&lt;p&gt;OK, I started from Uwe&apos;s last patch (thanks!) and then replaced the Builder&lt;br/&gt;
construction API with straight (normal) constructors.&lt;/p&gt;

&lt;p&gt;This way each PR can be created just like MultiReader for the common&lt;br/&gt;
case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  new ParallelAtomicReader(ir1, ir2)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the expert case you pass in separate arrays for the &quot;normal&quot;&lt;br/&gt;
readers and the &quot;stored fields&quot; readers (and boolean for the&lt;br/&gt;
&quot;closeSubReaders&quot;).  That means the app must create the arrays, but I&lt;br/&gt;
think that&apos;s fine (Paralel*Reader is already expert, and that ctor is&lt;br/&gt;
extra-expert).&lt;/p&gt;

&lt;p&gt;Everything else is the same: we now have ParallelAtomicReader and&lt;br/&gt;
ParallelCompositReader, it does all the checking to make sure the passed&lt;br/&gt;
in atomic/composite readers are &quot;congruent&quot;, etc..&lt;/p&gt;</comment>
                    <comment id="13204361" author="thetaphi" created="Thu, 9 Feb 2012 08:37:59 +0000"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;I attached a new patch with some obsolete code removed: At the times of the builder, to detect errors early, the subreader checks were also not only inspecting the composite subs but also the leaves. As we now have no separation anymore between Builder.add() and the ctor that does the actual work, we can remove the leaves checks, as the recursive ctor will do the same checks, so its impossible to have different leaf structure.&lt;br/&gt;
One check could be added instead: currently only maxDocs of subs are compared, maybe also numDocs.... But also here the check is done by the invoked ctors for the wrapped subreaders already.&lt;/p&gt;

&lt;p&gt;Otherwise I am not happy with the telescopic ctor (sorry, builder looked better for the expert case - this is now unreadable).&lt;/p&gt;

&lt;p&gt;The good thing is that we could add freedom so storedFieldsReaders can be completely separate. It would be easy to implement: closeSubReaders/parallelReaders arrays would need to be an union of both sets (currently only readers ctor param).&lt;/p&gt;

&lt;p&gt;I did not know that Collections.newSetFromMap() is already in 1.6. We should remove the util class MapBackedSet in trunk and replace all occurences by the same code like you did. I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3764&quot; title=&quot;Remove oal.util.MapBackedSet (Java 6 offsers Collections.newSetFromMap())&quot;&gt;&lt;del&gt;LUCENE-3764&lt;/del&gt;&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;One small thing for &quot;safety&quot;: MultiReader currently clones the reader arrays to prevent external modification. Both ParallelReaders should do the same. The builder enforced that before as you had no access to the subs and the array was cloned on building (copy from ArrayList-&amp;gt;array).&lt;/p&gt;</comment>
                    <comment id="13204992" author="mikemccand" created="Thu, 9 Feb 2012 22:58:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;I attached a new patch with some obsolete code removed&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks Uwe!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One check could be added instead: currently only maxDocs of subs are compared, maybe also numDocs.... But also here the check is done by the invoked ctors for the wrapped subreaders already.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK sounds like we can rely on the invoked ctors to catch this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Otherwise I am not happy with the telescopic ctor (sorry, builder looked better for the expert case - this is now unreadable).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, but the common case is simpler?  And, no longer an API break,&lt;br/&gt;
besides the name change.  Ie, you create the PAR/PCR like you do on&lt;br/&gt;
3.x.  I think that&apos;s the right tradeoff (expert case can be more&lt;br/&gt;
work...).&lt;/p&gt;

&lt;p&gt;I also don&apos;t like the API inconsistency this would start (we don&apos;t use&lt;br/&gt;
builders to create other IndexReaders).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The good thing is that we could add freedom so storedFieldsReaders can be completely separate. It would be easy to implement: closeSubReaders/parallelReaders arrays would need to be an union of both sets (currently only readers ctor param).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, actually this would be pretty simple now I think?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One small thing for &quot;safety&quot;: MultiReader currently clones the reader arrays to prevent external modification. Both ParallelReaders should do the same. The builder enforced that before as you had no access to the subs and the array was cloned on building (copy from ArrayList-&amp;gt;array).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh, right.&lt;/p&gt;

&lt;p&gt;I started from your patch, added the array clones, and added the&lt;br/&gt;
missing javadocs... I didn&apos;t yet add allowing arbitrary&lt;br/&gt;
storedFieldsReaders but I think this wouldn&apos;t be so hard...&lt;/p&gt;</comment>
                    <comment id="13204997" author="thetaphi" created="Thu, 9 Feb 2012 23:02:16 +0000"  >&lt;p&gt;Patch is incomplete? Maybe you forgot to svn add &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13205020" author="mikemccand" created="Thu, 9 Feb 2012 23:13:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Patch is incomplete? Maybe you forgot to svn add&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ugh, indeed, sorry.  Fixed!&lt;/p&gt;</comment>
                    <comment id="13205032" author="thetaphi" created="Thu, 9 Feb 2012 23:25:13 +0000"  >&lt;p&gt;Thanks, looks fine. I will look tomorrow into a IdentityHashSet on all readers (storedReaders+readers) and use that for incRef/close. Thats the easiest.&lt;/p&gt;

&lt;p&gt;One small improvement for shorter code:&lt;/p&gt;

&lt;p&gt;You can add all entries from an array to a collection with:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Set&amp;lt;CompositeReader&amp;gt; readersSet = Collections.newSetFromMap(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IdentityHashMap&amp;lt;CompositeReader,&lt;span class=&quot;code-object&quot;&gt;Boolean&lt;/span&gt;&amp;gt;());
Collections.addAll(readersSet, readers);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(it&apos;s just shorter)&lt;/p&gt;</comment>
                    <comment id="13205313" author="thetaphi" created="Fri, 10 Feb 2012 09:42:57 +0000"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;I found a bug in your implementation of the ParallelCompositeReader ctor, the test did not hit this as stupiditly the number of &lt;b&gt;vertical&lt;/b&gt; segments was 2, but also the number of &lt;b&gt;parallel&lt;/b&gt; subreaders! You simply got the validation (was before in the builder at the wrong place) iterate over the wrong set (vertical vs. parallel). I did it like for the atomic ones as a validate method.&lt;/p&gt;</comment>
                    <comment id="13205322" author="thetaphi" created="Fri, 10 Feb 2012 09:54:53 +0000"  >&lt;p&gt;Patch that fixes the bugs in Mike&apos;s code and also allows decoupled stored fields readers:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;moved the composite reader checks from the main builder loop (where it was wrongly placed) to a validate method acting only on the top-level readers&lt;/li&gt;
	&lt;li&gt;I improved the tests to have a different number of documents, subreaders and parallel readers&lt;/li&gt;
	&lt;li&gt;Current limitation is only that at least one &quot;searchable&quot; reader must be there, but there can be 0..infinite stored readers&lt;/li&gt;
	&lt;li&gt;toString() shows the unique set of parallel readers, unfortunately unsorted (as hashed set)&lt;/li&gt;
	&lt;li&gt;I added one more ctor PR(closeSubReaders, IR subs...), this makes code not separating stored fields readers look better, as closeSubReaders is not an expert option.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mike, can I take the issue again and commit this? Thanks for the refactoring, but as we now allow separate stored fields and main readers, the missing builder is fine to me - grrrr&lt;/p&gt;</comment>
                    <comment id="13205326" author="thetaphi" created="Fri, 10 Feb 2012 10:08:02 +0000"  >&lt;p&gt;Minor improvements:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove compiler warning because of redundant cast&lt;/li&gt;
	&lt;li&gt;rename the reader IdentitySet to be consistent in both impls.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think it&apos;s ready to commit.&lt;/p&gt;</comment>
                    <comment id="13205351" author="mikemccand" created="Fri, 10 Feb 2012 10:39:15 +0000"  >&lt;p&gt;Ooh, nice catch on that validation bug!&lt;/p&gt;

&lt;p&gt;Yes, please feel free to take this one back.  Your last patch looks great; I like the new ctor.  +1 to commit.&lt;/p&gt;</comment>
                    <comment id="13205398" author="thetaphi" created="Fri, 10 Feb 2012 12:27:20 +0000"  >&lt;p&gt;A previous discussion on IRC with Mike:&lt;/p&gt;

&lt;p&gt;We think that the numDocs checks are not needed and prevent advanced use cases. The whole ParallelReaders structure simply rely on maxDocs identical - not even hasDeletions need to be checked. It should simply be documented that Parallel*Reader takes the liveDocs/hasDeletions from the first reader and ignores livedocs of other readers. &lt;/p&gt;

&lt;p&gt;In 3.x this was more an issue, but in trunk, where liveDocs are completely separated, there is no need to check numDocs.&lt;/p&gt;

&lt;p&gt;The checking of numDocs is also no added safety, because 2 readers can have different liveDocs, but still same numDocs.&lt;/p&gt;</comment>
                    <comment id="13205552" author="thetaphi" created="Fri, 10 Feb 2012 17:01:44 +0000"  >&lt;p&gt;New patch without numDocs checks (added javadocs describing that the deletions are taken from first reader). Also improved the tests to handle empty indexes for both reader variants.&lt;/p&gt;

&lt;p&gt;I will commit this later!&lt;/p&gt;</comment>
                    <comment id="13205556" author="mikemccand" created="Fri, 10 Feb 2012 17:09:30 +0000"  >&lt;p&gt;Looks great Uwe, thanks!  +1&lt;/p&gt;</comment>
                    <comment id="13205759" author="thetaphi" created="Fri, 10 Feb 2012 21:13:40 +0000"  >&lt;p&gt;Committed trunk revision: 1242924&lt;/p&gt;

&lt;p&gt;Thanks to all for reviewing!&lt;/p&gt;</comment>
                    <comment id="13210317" author="thetaphi" created="Fri, 17 Feb 2012 15:22:08 +0000"  >&lt;p&gt;Here is a patch that improves test coverage and adds one more check to the composite parallel reader ctor:&lt;br/&gt;
If somebody has 2 parallel composite readers, while the first one has atomic subreaders but the other one has composite subreaders (but correct maxDocs), the ctor fails with ClassCastEx.&lt;/p&gt;

&lt;p&gt;I will commit this now as test improvement.&lt;/p&gt;</comment>
                    <comment id="13210320" author="thetaphi" created="Fri, 17 Feb 2012 15:24:05 +0000"  >&lt;p&gt;Committed trunk revision: 1245605&lt;/p&gt;</comment>
                    <comment id="13210890" author="thetaphi" created="Sat, 18 Feb 2012 09:57:46 +0000"  >&lt;p&gt;I committed some minor code cleanups in revision: 1245897&lt;/p&gt;</comment>
                    <comment id="13212665" author="thetaphi" created="Tue, 21 Feb 2012 15:37:41 +0000"  >&lt;p&gt;Robert also found some bugs in ParallelAtomicReader (in fact it was jenkins). Some fixes should be documented here.&lt;/p&gt;</comment>
                    <comment id="13212668" author="thetaphi" created="Tue, 21 Feb 2012 15:42:49 +0000"  >&lt;p&gt;This is a patch for ParallelAtomicReader (after the heavy commit of Robert, rev. 1291679), I found some other inconsistencies in some tests. One was already fixed (rev 1291753).&lt;/p&gt;

&lt;p&gt;The new implementation builds the ParallelFields instance using the FieldsEnums of the parallel readers, which is much more correct than iterating FieldInfos and checking for indexed fields.&lt;/p&gt;

&lt;p&gt;The fieldInfos and fieldToReaderMap is now only used for retrieving stored fields and other global information. Fields is now completely separate.&lt;/p&gt;</comment>
                    <comment id="13212674" author="rcmuir" created="Tue, 21 Feb 2012 15:47:35 +0000"  >&lt;blockquote&gt;
&lt;p&gt;(after the heavy commit of Robert, rev. 1291679)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hey, maybe only a medium-heavy commit: i did reply to the jenkins failure with a patch to the list before committing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new implementation builds the ParallelFields instance using the FieldsEnums of the parallel readers, which is much more correct than iterating FieldInfos and checking for indexed fields.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, when debugging i was a little confused not just about how it was built but where in the code... I think this is more intuitive!&lt;/p&gt;</comment>
                    <comment id="13212696" author="thetaphi" created="Tue, 21 Feb 2012 16:09:06 +0000"  >&lt;p&gt;More simplifications (especially cleaned up the test TestParallelTermEnum).&lt;/p&gt;

&lt;p&gt;Also added a separate map for term vectors, to improve speed for large indexes with many fields.&lt;/p&gt;</comment>
                    <comment id="13212700" author="thetaphi" created="Tue, 21 Feb 2012 16:17:27 +0000"  >&lt;p&gt;Committed trunk revision: 1291889&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12514993" name="LUCENE-3736-improveTestCoverage.patch" size="7827" author="thetaphi" created="Fri, 17 Feb 2012 15:22:08 +0000" />
                    <attachment id="12514119" name="LUCENE-3736.patch" size="71329" author="thetaphi" created="Fri, 10 Feb 2012 17:01:44 +0000" />
                    <attachment id="12514094" name="LUCENE-3736.patch" size="70386" author="thetaphi" created="Fri, 10 Feb 2012 10:08:02 +0000" />
                    <attachment id="12514093" name="LUCENE-3736.patch" size="70404" author="thetaphi" created="Fri, 10 Feb 2012 09:54:53 +0000" />
                    <attachment id="12514041" name="LUCENE-3736.patch" size="64091" author="mikemccand" created="Thu, 9 Feb 2012 23:13:39 +0000" />
                    <attachment id="12514034" name="LUCENE-3736.patch" size="14284" author="mikemccand" created="Thu, 9 Feb 2012 22:58:53 +0000" />
                    <attachment id="12513927" name="LUCENE-3736.patch" size="65141" author="thetaphi" created="Thu, 9 Feb 2012 08:37:59 +0000" />
                    <attachment id="12513885" name="LUCENE-3736.patch" size="64406" author="mikemccand" created="Wed, 8 Feb 2012 23:56:48 +0000" />
                    <attachment id="12513716" name="LUCENE-3736.patch" size="66309" author="thetaphi" created="Tue, 7 Feb 2012 23:34:48 +0000" />
                    <attachment id="12513462" name="LUCENE-3736.patch" size="64483" author="thetaphi" created="Mon, 6 Feb 2012 18:39:06 +0000" />
                    <attachment id="12513380" name="LUCENE-3736.patch" size="55105" author="thetaphi" created="Sun, 5 Feb 2012 23:57:49 +0000" />
                    <attachment id="12512872" name="LUCENE-3736.patch" size="6605" author="thetaphi" created="Wed, 1 Feb 2012 23:51:38 +0000" />
                    <attachment id="12515372" name="LUCENE-3736-readerMaps.patch" size="12903" author="thetaphi" created="Tue, 21 Feb 2012 16:09:06 +0000" />
                    <attachment id="12515370" name="LUCENE-3736-readerMaps.patch" size="2394" author="thetaphi" created="Tue, 21 Feb 2012 15:42:49 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>14.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 6 Feb 2012 19:13:45 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>225941</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23962</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>