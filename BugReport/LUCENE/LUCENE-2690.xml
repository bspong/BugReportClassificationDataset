<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:16:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2690/LUCENE-2690.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2690] Do MultiTermQuery boolean rewrites per segment</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2690</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;MultiTermQuery currently rewrites FuzzyQuery (using TopTermsBooleanQueryRewrite), the auto constant rewrite method and the ScoringBQ rewrite methods using a MultiFields wrapper on the top-level reader. This is inefficient.&lt;/p&gt;

&lt;p&gt;This patch changes the rewrite modes to do the rewrites per segment and uses some additional datastructures (hashed sets/maps) to exclude duplicate terms. All tests currently pass, but FuzzyQuery&apos;s tests should not, because it depends for the minimum score handling, that the terms are collected in order..&lt;/p&gt;

&lt;p&gt;Robert will fix FuzzyQuery in this issue, too. This patch is just a start.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12476825">LUCENE-2690</key>
            <summary>Do MultiTermQuery boolean rewrites per segment</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Oct 2010 05:39:56 +0100</created>
                <updated>Fri, 10 May 2013 11:43:46 +0100</updated>
                    <resolved>Fri, 15 Oct 2010 15:26:49 +0100</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12919375" author="thetaphi" created="Fri, 8 Oct 2010 21:52:17 +0100"  >&lt;p&gt;Updated patch, that also checks for duplicate terms in the fuzzy rewrite. This should be fine now, but we need to fix the FuzzyQuery tests to checks for multiple segments with the same terms that should fail with this patch.&lt;/p&gt;

&lt;p&gt;Maybe we need a separate MTQ tests that creates two IndexWriters which add documents with an overlapping term set to both indexes. Queries are then ran using MzultiReader, so we can control merging and make sure the term appears really in two &quot;segments&quot;. I will work on a test for that.&lt;/p&gt;</comment>
                    <comment id="12919496" author="mikemccand" created="Sat, 9 Oct 2010 15:43:01 +0100"  >&lt;p&gt;It&apos;d be nice somehow to have MTQ.getTotalNumberOfTerms return the &lt;b&gt;unique&lt;/b&gt; term count instead of the total number of terms visited across all segments...&lt;/p&gt;</comment>
                    <comment id="12919528" author="mikemccand" created="Sat, 9 Oct 2010 19:43:12 +0100"  >&lt;p&gt;We have to sort the terms coming out of the BytesRefHash, else we get bad seek performance because the within-block seek opto will otherwise often fail to apply...&lt;/p&gt;

&lt;p&gt;So I used a TreeMap instead of HashMap.&lt;/p&gt;

&lt;p&gt;Then ran a quick perf test on 10 M Wikipedia index:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS clean&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mtqseg&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.83&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.80&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13.64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.95&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;24.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.67&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.77&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;41.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;34.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;74.94&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;115.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;183.37&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;437.13&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;138.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;So these are good gains!  I can&apos;t run FuzzyQuery until we fix the tie-break problem...&lt;/p&gt;

&lt;p&gt;I&apos;m really not sure why the prefix query sees no gain yet the others do (I would have actually expected the reverse, because PrefixTermsEnum&apos;s accept method is so simple).&lt;/p&gt;</comment>
                    <comment id="12919551" author="rcmuir" created="Sun, 10 Oct 2010 02:36:48 +0100"  >&lt;p&gt;we fixed some bugs in the patch, it is not ready for committing, but the tests now pass.&lt;/p&gt;</comment>
                    <comment id="12919556" author="mikemccand" created="Sun, 10 Oct 2010 04:02:00 +0100"  >&lt;p&gt;Another iteration... same perf as before but more failures!&lt;/p&gt;</comment>
                    <comment id="12919560" author="thetaphi" created="Sun, 10 Oct 2010 04:28:01 +0100"  >&lt;p&gt;Same as Mike&apos;s patch, only with some nocommits removed (max clause count increased) and added the missing FloatUtils file.&lt;/p&gt;</comment>
                    <comment id="12919561" author="thetaphi" created="Sun, 10 Oct 2010 04:31:04 +0100"  >&lt;p&gt;by the way: no more failures - only speed improvements (mostly)! Seems that TestFuzzyQuery2 failed because of the incorrectly increased max clause count!&lt;/p&gt;

&lt;p&gt;The last thing to do is fixing the attribute stuff to separate the two attribute parts.&lt;/p&gt;</comment>
                    <comment id="12919573" author="simonw" created="Sun, 10 Oct 2010 06:53:10 +0100"  >&lt;p&gt;Guys, awesome improvements!! Here are some comments...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;In CutOffTermCollector:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; BytesRefHash pendingTerms = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BytesRefHash(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteBlockPool(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RecyclingByteBlockAllocator()));&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Sice we do not reuse the allocator we don&apos;t need to use the synced one here. There is no reset call anywhere to free the allocated blocks too. We should just use new BytesRefHash() here.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
	&lt;li&gt;BooleanQueryRewrite#rewrite uses a HashMap to keep track of BytesRef and TermFreqBoost. I wonder if we should make use of the ParallelArray technique we us in the indexing chain together with a BytesRefHash which could safe us lots of object creation and GC cost would be lower to once MTQ gets under load. Those MTQ can create a very large amount of objects though and this seems to be a hot spot. I currently have use-cases for direct support of something like a ParallelArray base class in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2186&quot; title=&quot;First cut at column-stride fields (index values storage)&quot;&gt;&lt;del&gt;LUCENE-2186&lt;/del&gt;&lt;/a&gt; and it seems we can use it here too.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;In FloatsUtil#nextAfter I wonder if we need the following lines:  
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt;(direction)
...
&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.valueOf(direction).floatValue();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; since those methods do nothing else than a (float) direction case really.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12919588" author="mikemccand" created="Sun, 10 Oct 2010 12:21:36 +0100"  >
&lt;p&gt;I attached a hacked patch... nowhere near committable, various tests&lt;br/&gt;
fail, etc... yet I think once we clean it up, the approach is viable.&lt;/p&gt;

&lt;p&gt;I started from the patch like 2 iterations ago, and then fixed how the&lt;br/&gt;
MTQ BQ rewrite works so that instead of the two passes (first to&lt;br/&gt;
gather matching terms, second to create weight/scorers &amp;amp; run the BQ),&lt;br/&gt;
it now makes a single pass.&lt;/p&gt;

&lt;p&gt;In that single pass it records which terms matched which segments, and&lt;br/&gt;
creates TermScorer for each.&lt;/p&gt;

&lt;p&gt;After the single pass, once we&apos;ve summed up the top level docFreq for&lt;br/&gt;
all terms, I go back and reset the weights for all the TermScorers,&lt;br/&gt;
sumSQ them, normalize, etc., and then create a FakeQuery object whose&lt;br/&gt;
only purpose is to remember the per-segment scorers and provide them&lt;br/&gt;
once .scorer(...) is called on each segment.&lt;/p&gt;

&lt;p&gt;The big gain with this approach is you don&apos;t waste effort trying to&lt;br/&gt;
seek to non-existent terms in the sub readers.  Normally the terms&lt;br/&gt;
cache would save you here, but, we never cache a miss and so when we&lt;br/&gt;
try to look that up again it&apos;s always a real (costly) seek.&lt;/p&gt;

&lt;p&gt;With this approach we can disable using the terms cache entirely from&lt;br/&gt;
MTQ.rewrite, which is great.&lt;/p&gt;

&lt;p&gt;I believe the patch works correctly, at least for this test, because&lt;br/&gt;
on my 10M wikipedia index it gets identical top N results as clean&lt;br/&gt;
trunk.  Here&apos;re the perf gains:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS clean&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mtqseg&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;37.49&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;37.40&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.86&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.23&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;70.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13.58&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;30.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;127.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;173.22&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;535.27&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;209.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.61&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.05&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;247.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;33.59&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;120.32&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;258.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Note that these gains already include the sizable gains from the&lt;br/&gt;
original patch, but the single pass approach makes further great&lt;br/&gt;
gains, especially eg on the prefix query.&lt;/p&gt;

&lt;p&gt;I don&apos;t think we should couple this new patch w/ this issue... this&lt;br/&gt;
issue already has awesome gains with a fairly minor change...&lt;br/&gt;
I&apos;ll open a new issue.&lt;/p&gt;</comment>
                    <comment id="12919590" author="mikemccand" created="Sun, 10 Oct 2010 12:23:52 +0100"  >&lt;p&gt;OK I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2694&quot; title=&quot;MTQ rewrite + weight/scorer init should be single pass&quot;&gt;&lt;del&gt;LUCENE-2694&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12919594" author="rcmuir" created="Sun, 10 Oct 2010 12:56:09 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The big gain with this approach is you don&apos;t waste effort trying to&lt;br/&gt;
seek to non-existent terms in the sub readers. Normally the terms&lt;br/&gt;
cache would save you here, but, we never cache a miss and so when we&lt;br/&gt;
try to look that up again it&apos;s always a real (costly) seek.&lt;/p&gt;

&lt;p&gt;With this approach we can disable using the terms cache entirely from&lt;br/&gt;
MTQ.rewrite, which is great.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is the way to go because its horrible for the MTQ to touch the terms cache at all,&lt;br/&gt;
and depending on it for good performance is even worse.&lt;/p&gt;

&lt;p&gt;I think if you somehow changed the benchmark to use multiple threads and had different&lt;br/&gt;
queries executing at the same time, you would see these guys fighting each other&lt;br/&gt;
over huge amounts of terms with df=1 and slowing each other down... but we wouldnt&lt;br/&gt;
have this problem with them rewriting to FakeQuery&lt;/p&gt;
</comment>
                    <comment id="12919597" author="rcmuir" created="Sun, 10 Oct 2010 13:02:44 +0100"  >&lt;blockquote&gt;&lt;p&gt;In FloatsUtil#nextAfter I wonder if we need the following lines:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Simon, this is a good point. I poached this method from harmony&apos;s &lt;a href=&quot;http://svn.apache.org/repos/asf/harmony/enhanced/java/branches/java6/classlib/modules/luni/src/main/java/java/lang/StrictMath.java&quot; class=&quot;external-link&quot;&gt;StrictMath.nextAfter&lt;/a&gt;&lt;br/&gt;
Its interesting to take a look also at their &lt;a href=&quot;http://svn.apache.org/repos/asf/harmony/enhanced/java/branches/java6/classlib/modules/luni/src/main/java/java/lang/Math.java&quot; class=&quot;external-link&quot;&gt;Math.nextAfter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The difference is this Double promotion, I don&apos;t understand if this affects us at all or what it would change.&lt;br/&gt;
In both cases I do not understand why the boxing is necessary!&lt;/p&gt;</comment>
                    <comment id="12920511" author="thetaphi" created="Wed, 13 Oct 2010 13:19:24 +0100"  >&lt;p&gt;Simon:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sice we do not reuse the allocator we don&apos;t need to use the synced one here. There is no reset call anywhere to free the allocated blocks too. We should just use new BytesRefHash() here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is no such ctor in trunk. The only available allocator is the used one.&lt;/p&gt;</comment>
                    <comment id="12920589" author="simonw" created="Wed, 13 Oct 2010 15:56:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;There is no such ctor in trunk. The only available allocator is the used one.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;good point there is one in mine &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; - I&apos;m going to upload a patch for this later / tomorrow...&lt;/p&gt;</comment>
                    <comment id="12920762" author="simonw" created="Wed, 13 Oct 2010 21:52:50 +0100"  >&lt;p&gt;Current patch makes use of a DirectAllocator without recycling etc. I remove the unnecessary boxing in FlaotsUtil and replaced the terms HashMap with a BytesRefHash. I skipped the latest patch since mike marked it as a hack and opened a new issue for that. This one is based on uwes latest one. All tests pass for me though.&lt;/p&gt;</comment>
                    <comment id="12920896" author="thetaphi" created="Thu, 14 Oct 2010 10:23:14 +0100"  >&lt;p&gt;Thanks for the improvements, some comments and changes I did locally:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The code in BooleanQueryRewrite uses += for the boost and docFreq in the case of (&amp;gt;=0, no entry in BytesRefHash), but this should only be an assignment. The update and comparison in the assert should be done only when an entry is already in the hash. Boosts should never be sumed up.&lt;/li&gt;
	&lt;li&gt;The parts for update with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2702&quot; title=&quot;BytesRefHash#get() should expect a BytesRef instances for consistency&quot;&gt;&lt;del&gt;LUCENE-2702&lt;/del&gt;&lt;/a&gt; are marked, they wrap currently with new BytesRef(#get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) and should be replaced with code like it was before using PagedBytes&lt;/li&gt;
	&lt;li&gt;The work for creating the BytesStartArray is much to do, maybe we can unfinal the DirectBytesStartArray and reuse the code. This would make it easier to extend it and simply add more parallel arrays. Client code should not need to replcate the code (this is maybe another issue).&lt;/li&gt;
	&lt;li&gt;But there is also a problem with the current code in TermFreqBoostByteStart: The arrays may not use the exact same size as expected (depending how oversize/grow works). As they are parallel arrays, all should be equal size, so we should only use grow/oversize only for the base array and resize the others to same size. Do we have an ArrayUtil method for that? Currently it (may) be broken. Any comments?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12920906" author="thetaphi" created="Thu, 14 Oct 2010 10:57:25 +0100"  >&lt;p&gt;Here a patch with the allocation problems resolved. Also the DirectBytesStartArray is public.&lt;/p&gt;</comment>
                    <comment id="12920909" author="simonw" created="Thu, 14 Oct 2010 11:01:42 +0100"  >&lt;blockquote&gt;&lt;p&gt;The code in BooleanQueryRewrite uses += for the boost and docFreq in the case of (&amp;gt;=0, no entry in BytesRefHash), but this should only be an assignment. The update and comparison in the assert should be done only when an entry is already in the hash. Boosts should never be sumed up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ah yeah - true for sure! it did not break since that only happens once when it is initially added. but you are right for sure that this should only be an assignment&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But there is also a problem with the current code in TermFreqBoostByteStart: The arrays may not use the exact same size as expected (depending how oversize/grow works). As they are parallel arrays, all should be equal size, so we should only use grow/oversize only for the base array and resize the others to same size. Do we have an ArrayUtil method for that? Currently it (may) be broken. Any comments?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;good catch man! this won&apos;t happen here but its cleaner to use the exact same size. The bigger problem is that I missed to add the right constant to the grow method though. I can fix in a minute&lt;/p&gt;</comment>
                    <comment id="12920915" author="simonw" created="Thu, 14 Oct 2010 11:26:48 +0100"  >&lt;p&gt;Updated patch after committing &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2707&quot; title=&quot;NumericField throws a NotSerializableException when it is serialized, even though it implements Serializable&quot;&gt;&lt;del&gt;LUCENE-2707&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also fixed the constant in the grow(float[]) method.&lt;/p&gt;
</comment>
                    <comment id="12920922" author="thetaphi" created="Thu, 14 Oct 2010 11:55:22 +0100"  >&lt;p&gt;Merged patch. I had some addition asserts and some spelling probs in comments. I will now remove the attributes hell.&lt;/p&gt;

&lt;p&gt;So this patch is just for review, before the big changes come &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12920930" author="thetaphi" created="Thu, 14 Oct 2010 12:51:23 +0100"  >&lt;p&gt;This is the attributes hell patch (not yet finally done on the FuzzyTermsEnum side, Robert can you review?).&lt;/p&gt;

&lt;p&gt;The change is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BoostAttribute is only added to the TermsEnum, because the TermsEnum produces the boost, the MTQ rewrite consumes.&lt;/li&gt;
	&lt;li&gt;MaxNonCompetitiveBoostAttribute is owned by the rewrite mode as it is the producer. The TermsEnum consunmes this attribute&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fixing needs the hackish attributes() method in the Fuzzy rewrite.&lt;/p&gt;

&lt;p&gt;TODO: Contrib/Solr is not yet reviewed for the API change in MTQ.getTermsEnum()!&lt;/p&gt;</comment>
                    <comment id="12920937" author="thetaphi" created="Thu, 14 Oct 2010 13:20:14 +0100"  >&lt;p&gt;small improvements. Also added missing bottomChanged() to Fuzzy ctor.&lt;/p&gt;</comment>
                    <comment id="12920940" author="rcmuir" created="Thu, 14 Oct 2010 13:27:54 +0100"  >&lt;p&gt;I will play with the latest patch some, and hopefully upload a new one.&lt;/p&gt;

&lt;p&gt;The real solution to this &quot;tie-break&quot; case really is the fact that the priority queue comparison is &quot;compare by boost, then term text&quot;.&lt;/p&gt;

&lt;p&gt;With the MultiTermsEnum this was no problem, because we look at all terms in order, so we made MaxNonCompetitiveBoostAttribut just a float.&lt;/p&gt;

&lt;p&gt;With per-segment rewrite, then we can look at terms out-of-order.&lt;/p&gt;

&lt;p&gt;So I think if we add the optional term text of the pq&apos;s bottom for the previous segment to the MaxNonCompetitiveBoostAttribute itself, then the enum itself can implement the tie break, cleaner, and more efficiently. The rewrite method should or consumer should only be setting the values of this attribute and not dealing with this case.&lt;/p&gt;</comment>
                    <comment id="12920959" author="thetaphi" created="Thu, 14 Oct 2010 14:35:16 +0100"  >&lt;p&gt;Here the patch for Robert, which fails the tie break test. I think you can fix the tie brea  case using the competitiveTerm and we are done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12920966" author="rcmuir" created="Thu, 14 Oct 2010 15:13:48 +0100"  >&lt;p&gt;here is my patch, but the test still fails... I think it is a bug in the rewrite method&apos;s priority queue.&lt;/p&gt;

&lt;p&gt;it has nothing to do with maxBoostAttribute, because i can add a &quot;if (true) return;&quot; to FuzzyTermsEnum.bottomChanged() and the test will still always fail.&lt;/p&gt;</comment>
                    <comment id="12920991" author="thetaphi" created="Thu, 14 Oct 2010 16:50:21 +0100"  >&lt;p&gt;Here the final patch. There is only one special case:&lt;br/&gt;
Our boolean clauses sorting only works for TermQuery. But The BoostOnly fuzzy rewrite creates ConstScoreQueries for each clause, so no reordering.&lt;/p&gt;

&lt;p&gt;You can see this in TestMultiTermQueryRewrites with tests.verbose=true.&lt;/p&gt;</comment>
                    <comment id="12921006" author="thetaphi" created="Thu, 14 Oct 2010 17:28:54 +0100"  >&lt;p&gt;This patch contains a better BooleanClause comparator that also reorders ConstantScores that contain TermQuery.&lt;/p&gt;

&lt;p&gt;Maybe the ideal case would be that every query gets a method that returns the &quot;primary&quot; term or null. The default would be null, but TermQuery and all delegating wrappers should implement that.&lt;/p&gt;</comment>
                    <comment id="12921015" author="simonw" created="Thu, 14 Oct 2010 17:49:49 +0100"  >&lt;p&gt;Just as a first result here are the results I see on my workstation with a 10 M Wikipedia index (5 segments):&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS trunk&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2690&quot; title=&quot;Do MultiTermQuery boolean rewrites per segment&quot;&gt;&lt;del&gt;LUCENE-2690&lt;/del&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.74&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.81&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.07&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.26&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.89&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12.65&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;6.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.7&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39.29&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;45.52&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;15.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15.17&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;27.86&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;83.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;using the latest patch.&lt;/p&gt;

&lt;p&gt;those are run with Xmx2G on  an intel core2 3ghz&lt;/p&gt;</comment>
                    <comment id="12921035" author="thetaphi" created="Thu, 14 Oct 2010 18:30:36 +0100"  >&lt;p&gt;Simon: Just for comparing with Mike&apos;s results: How many segments?&lt;/p&gt;</comment>
                    <comment id="12921048" author="thetaphi" created="Thu, 14 Oct 2010 18:50:51 +0100"  >&lt;p&gt;Updated patch with optimization in ctor of FuzzyTermsEnum&lt;/p&gt;</comment>
                    <comment id="12921056" author="thetaphi" created="Thu, 14 Oct 2010 19:11:47 +0100"  >&lt;p&gt;Revision of last patch (was buggy).&lt;/p&gt;

&lt;p&gt;About the &quot;chicken and egg problem&quot;: Maybe AutomatonTermsEnum should throw Ex, if termComparator is not the exspected one. This would prevent people from trying automaton with other indexes?&lt;/p&gt;</comment>
                    <comment id="12921057" author="yseeley@gmail.com" created="Thu, 14 Oct 2010 19:12:10 +0100"  >&lt;p&gt;Hmmm, it looks like this changes BQ.rewrite() to always rewrite/clone?  Do we need that extra overhead?&lt;/p&gt;</comment>
                    <comment id="12921058" author="thetaphi" created="Thu, 14 Oct 2010 19:14:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hmmm, it looks like this changes BQ.rewrite() to always rewrite/clone? Do we need that extra overhead? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;...until we find a better solution, how we reorder clauses. This has a big speed degradion for lots of MTQs if we don&apos;t reorder clauses intelligent.&lt;/p&gt;</comment>
                    <comment id="12921066" author="yseeley@gmail.com" created="Thu, 14 Oct 2010 19:24:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;This has a big speed degradion for lots of MTQs if we don&apos;t reorder clauses intelligent.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seems like the right place for sorting is in the MTQ rewrite to a BQ.&lt;br/&gt;
The current patch makes BQ rewrite quite a bit more expensive... a clone is always made, and equals is always called on the clone after.&lt;/p&gt;

&lt;p&gt;For normal boolean queries (caused by someone typing in a few words), it seems like a real-world speedup is unlikely (since the terms would need to be in the same tii block).  People generating very large boolean queries should also be able to pre-sort them and not have the overhead imposed every time.&lt;/p&gt;</comment>
                    <comment id="12921077" author="thetaphi" created="Thu, 14 Oct 2010 19:51:15 +0100"  >&lt;p&gt;Yes, Mr. No-inlining-Policeman &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;We are still working on this patch, its marked as TODO, so we will investigate further. For random queries it had a huge positive impact on query perf. The BQ cloning/reordering was not measureable. We did this after you left Mike&apos;s house, so it was just a quick idea.&lt;/p&gt;</comment>
                    <comment id="12921081" author="yseeley@gmail.com" created="Thu, 14 Oct 2010 20:11:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;For random queries it had a huge positive impact on query perf. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the clauses were just term queries, that would make me really suspect the test.&lt;br/&gt;
If it was MTQ queries, then MTQ should sort, not BQ.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The BQ cloning/reordering was not measureable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right - I would expect that for typical queries and typical uses.&lt;br/&gt;
I guess I&apos;m worried about the atypical cases since I&apos;ve seen so many of them - people putting together single boolean queries with 10K clauses, people doing complex nested queries with thousands of terms, or people executing thousands of queries per request (or per document added, via memory index) where this overhead suddenly becomes significant.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We are still working on this patch, its marked as TODO, so we will investigate further.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12921101" author="thetaphi" created="Thu, 14 Oct 2010 21:00:54 +0100"  >&lt;p&gt;Attached is a new patch with two changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;moved the BQ reordering to MTQ for now. A general reordering of BooleanQueries should be done in a separate issue (with more performant rewrite). Currently this uses the same comparator like BQ before. You may wonder: why not simply use a sorted map? - the idea is that sorting at the end is faster than using a TreeMap where all terms are compared against (even those falling out of queue). I sort the BQ clauses directly like BQ, to not create an additional array to hold all terms again. Maybe its still faster by copying all BytesRefs to an array before and then build BQ? For now this should be enough. To improve we need SorterTemplate again (for the BytesRefHash case) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;fixed an issue with the PQ in TopTermsRewrite: The bottom information was previously only set when the PQ was overflowing. In the past and now its set once the queue is full. This was an optimization bug, its now as it was always. Maybe this explains Mike&apos;s score changes on wikipedia index?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mike: can you test?&lt;/p&gt;</comment>
                    <comment id="12921179" author="thetaphi" created="Fri, 15 Oct 2010 00:58:09 +0100"  >&lt;p&gt;Patch with BytesRefHash parallel array sorting instead of sorting the BQ. This should improve all cases. This patch also contains a test that this resorting works.&lt;/p&gt;

&lt;p&gt;It also has an assert that the docFreq is correct. This only slows down tests, but is more secure!&lt;/p&gt;

&lt;p&gt;Now we only need to fix contrib and Mike can check the performance (Mike: you have to update your current trunk checkout, too - so scores will compare correct).&lt;/p&gt;</comment>
                    <comment id="12921182" author="mikemccand" created="Fri, 15 Oct 2010 01:04:18 +0100"  >&lt;p&gt;Test results on 10M Wiki index:&lt;/p&gt;

&lt;p&gt;Single seg:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS clean&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mtqseg3&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;26.01&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25.48&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-2.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;260.88&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;258.61&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;91.52&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;90.99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.7&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;98.01&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;97.99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39.95&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39.94&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;33.60&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;33.73&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;29.87&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;30.01&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1825.14&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1859.49&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Multi seg (22 segments):&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS clean&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mtqseg3&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;34.68&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;34.56&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;40.43&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;40.30&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.18&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.20&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.81&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;19.55&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;16.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~0.7&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.01&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;25.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;52.51&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;66.21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;26.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;42.88&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;92.95&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;116.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*ed&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;175.06&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;543.64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;210.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;And, the test did not barf so the hits (docID &amp;amp; scores) are identical!&lt;/p&gt;</comment>
                    <comment id="12921298" author="thetaphi" created="Fri, 15 Oct 2010 11:16:41 +0100"  >&lt;p&gt;Patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;contrib changed and tests pass (fixed also bug in MemoryIndex TermsEnum)&lt;/li&gt;
	&lt;li&gt;Improved test in core for dumplicate terms, boosts, sorting&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12921379" author="thetaphi" created="Fri, 15 Oct 2010 15:24:31 +0100"  >&lt;p&gt;Final patch, will commit this soon:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added javadocs, changes and migration instructions&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12921380" author="thetaphi" created="Fri, 15 Oct 2010 15:26:49 +0100"  >&lt;p&gt;Committed revision: 1022934&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12442685">LUCENE-2130</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12476949">LUCENE-2694</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12457155" name="LUCENE-2690-attributes.patch" size="38744" author="thetaphi" created="Thu, 14 Oct 2010 14:35:16 +0100" />
                    <attachment id="12457152" name="LUCENE-2690-attributes.patch" size="50891" author="thetaphi" created="Thu, 14 Oct 2010 13:20:14 +0100" />
                    <attachment id="12457150" name="LUCENE-2690-attributes.patch" size="50851" author="thetaphi" created="Thu, 14 Oct 2010 12:51:23 +0100" />
                    <attachment id="12456801" name="LUCENE-2690-hack.patch" size="23506" author="mikemccand" created="Sun, 10 Oct 2010 12:21:36 +0100" />
                    <attachment id="12457260" name="LUCENE-2690.patch" size="63009" author="thetaphi" created="Fri, 15 Oct 2010 15:24:31 +0100" />
                    <attachment id="12457250" name="LUCENE-2690.patch" size="57446" author="thetaphi" created="Fri, 15 Oct 2010 11:16:41 +0100" />
                    <attachment id="12457211" name="LUCENE-2690.patch" size="50018" author="thetaphi" created="Fri, 15 Oct 2010 00:58:09 +0100" />
                    <attachment id="12457185" name="LUCENE-2690.patch" size="46761" author="thetaphi" created="Thu, 14 Oct 2010 21:00:53 +0100" />
                    <attachment id="12457176" name="LUCENE-2690.patch" size="47326" author="thetaphi" created="Thu, 14 Oct 2010 19:11:47 +0100" />
                    <attachment id="12457167" name="LUCENE-2690.patch" size="47442" author="thetaphi" created="Thu, 14 Oct 2010 17:28:54 +0100" />
                    <attachment id="12457163" name="LUCENE-2690.patch" size="46346" author="thetaphi" created="Thu, 14 Oct 2010 16:50:21 +0100" />
                    <attachment id="12457158" name="LUCENE-2690.patch" size="40444" author="rcmuir" created="Thu, 14 Oct 2010 15:13:48 +0100" />
                    <attachment id="12457147" name="LUCENE-2690.patch" size="27141" author="thetaphi" created="Thu, 14 Oct 2010 11:55:22 +0100" />
                    <attachment id="12457145" name="LUCENE-2690.patch" size="26596" author="simonw" created="Thu, 14 Oct 2010 11:26:48 +0100" />
                    <attachment id="12457142" name="LUCENE-2690.patch" size="26846" author="thetaphi" created="Thu, 14 Oct 2010 10:57:25 +0100" />
                    <attachment id="12457137" name="LUCENE-2690.patch" size="26898" author="thetaphi" created="Thu, 14 Oct 2010 10:23:14 +0100" />
                    <attachment id="12457097" name="LUCENE-2690.patch" size="26199" author="simonw" created="Wed, 13 Oct 2010 21:52:50 +0100" />
                    <attachment id="12456791" name="LUCENE-2690.patch" size="19762" author="thetaphi" created="Sun, 10 Oct 2010 04:28:01 +0100" />
                    <attachment id="12456788" name="LUCENE-2690.patch" size="16781" author="mikemccand" created="Sun, 10 Oct 2010 04:01:59 +0100" />
                    <attachment id="12456786" name="LUCENE-2690.patch" size="17311" author="rcmuir" created="Sun, 10 Oct 2010 02:36:48 +0100" />
                    <attachment id="12456735" name="LUCENE-2690.patch" size="13486" author="thetaphi" created="Fri, 8 Oct 2010 21:52:17 +0100" />
                    <attachment id="12456665" name="LUCENE-2690.patch" size="12169" author="thetaphi" created="Fri, 8 Oct 2010 05:41:01 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>22.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 9 Oct 2010 14:43:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11154</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25002</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>