<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:05:23 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1590/LUCENE-1590.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1590] Stored-only fields automatically enable norms and tf when added to document</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1590</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;During updating my internal components to the new TrieAPI, I have seen the following:&lt;/p&gt;

&lt;p&gt;I index a lot of numeric fields with trie encoding omitting norms and term frequency. This works great. Luke shows that both is omitted.&lt;/p&gt;

&lt;p&gt;As I sometimes also want to have the components of the field stored and want to use the same field name for it. So I add additionally the field again to the document, but stored only (as the Field c&apos;tor using a TokenStream cannot additionally store the field). As it is stored only, I thought, that I can left out explicit setting of omitNorms and omitTermFreqAndPositions. After adding the stored-only-without-omits field, Luke shows all fields with norms enabled. I am not sure, if the norms/tf were really added to the index, but Luke shows a value for the norms and FieldInfo has it enabled.&lt;/p&gt;

&lt;p&gt;In my opinion, this is not intuitive, o.a.l.document.Field  should switch both omit* options on when storing fields only (and also disable other indexing-only options). Alternatively the internal FieldInfo.update(boolean isIndexed, boolean storeTermVector, boolean storePositionWithTermVector, boolean storeOffsetWithTermVector, boolean omitNorms, boolean storePayloads, boolean omitTermFreqAndPositions) should only change the omit* and other options, if the isIndexed parameter (not this.isIndexed) is also true, elsewhere leave it as it is.&lt;/p&gt;

&lt;p&gt;In principle, when adding a stored-only field, any indexing-specific options should not be changed in FieldInfo. If the field was indexed with norms before, norms should stay enabled (but this would be the default as it is).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12422257">LUCENE-1590</key>
            <summary>Stored-only fields automatically enable norms and tf when added to document</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Apr 2009 17:16:48 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:21 +0100</updated>
                    <resolved>Thu, 9 Apr 2009 11:38:01 +0100</resolved>
                            <version>2.4</version>
                <version>2.4.1</version>
                <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12696810" author="mikemccand" created="Wed, 8 Apr 2009 00:14:05 +0100"  >&lt;p&gt;Uwe are you working out a patch for this?&lt;/p&gt;</comment>
                    <comment id="12696813" author="thetaphi" created="Wed, 8 Apr 2009 00:22:46 +0100"  >&lt;p&gt;Here is it, not fully tested, but seems to work at least for norms and all Lucene Tests pass.&lt;br/&gt;
The changes in Field could be left out, the important thing are FieldInfo cahnges.&lt;br/&gt;
When a FieldInfo is generated without indexing switched on, all the indexing-only flags are set to defaults.&lt;/p&gt;

&lt;p&gt;The update method, that merges the existing field infos with new ones, only updates the indexing flags, if the added field is indexed. For all merging that results in an OR operation (all excl. omitNorms) the c&apos;tors default is false, for all flags that merge with AND (omitNorms), the c&apos;tors default is true.&lt;/p&gt;

&lt;p&gt;The problem is: Luke does not show the omitTf thing, as this flag seems not be loaded by IndexReader, so I cannot find out if the omitTf was really done in index (Luke does not show this flag even for fields that were added once with omitTf).&lt;/p&gt;

&lt;p&gt;Finally, I wanted to add a test, that exactly does what I have done, and tests if it works.&lt;/p&gt;</comment>
                    <comment id="12696821" author="thetaphi" created="Wed, 8 Apr 2009 00:38:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;The problem is: Luke does not show the omitTf thing, as this flag seems not be loaded by IndexReader, so I cannot find out if the omitTf was really done in index (Luke does not show this flag even for fields that were added once with omitTf).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahhh, I found the problem: FieldsReader does not set this flag in the generated Field instances with the flag from FieldInfo. Patch follows shortly that fixes this, too. My Luke now displays this flag, too.&lt;/p&gt;</comment>
                    <comment id="12696836" author="thetaphi" created="Wed, 8 Apr 2009 01:06:52 +0100"  >&lt;p&gt;Here the patch that also fixes the missing omitTf settings in FieldsReader.&lt;/p&gt;

&lt;p&gt;I will create the TestCase tomorrow, it&apos;s to late for that, I want to go to bed now.&lt;/p&gt;

&lt;p&gt;Just a note: The behavior in Luke is with this patch a little bit different: Stored-Only fields now show in Luke always &quot;omitNorms&quot; (O), because this is the default for non-indexed fields. As soon as a field is added that is indexed and has not explicitely set omitNorms, norms are enabled again (as noted in the FieldInfo.update() method). So everything behaves correctly, only the display is now correct in Luke.&lt;/p&gt;</comment>
                    <comment id="12696973" author="thetaphi" created="Wed, 8 Apr 2009 11:19:29 +0100"  >&lt;p&gt;Here is the final patch. I added two tests (one for the bug itsself) and one for the additional bug in FieldsReader, that does not propagate omitNorms and omitTf to the Fieldable on loading. I also found a bug in FieldInfos, that forgets to add omitTf if the FieldInfos are loaded from a Document instance (I realized this during changing the FieldsReader test).&lt;/p&gt;

&lt;p&gt;All core tests pass.&lt;/p&gt;

&lt;p&gt;It would be really good, if somebody with good knowledge of the internals could review the patch, as there are a lot of things, I do not understand completely.&lt;/p&gt;</comment>
                    <comment id="12696994" author="mikemccand" created="Wed, 8 Apr 2009 13:00:50 +0100"  >
&lt;p&gt;Patch looks good!  All tests pass.  That was trickier than I expected;&lt;br/&gt;
thanks Uwe.  I plan to commit in a day or two.&lt;/p&gt;

&lt;p&gt;It&apos;s a good catch, all the places in FieldsReader where we fail to&lt;br/&gt;
carryover OTFAP from FieldInfo --&amp;gt; Field instance on the document.&lt;br/&gt;
It&apos;s yet another example of how having the loaded Document &quot;seem like&quot;&lt;br/&gt;
the indexed document causes problems.&lt;/p&gt;

&lt;p&gt;In the ideal future (I think?), the fields on a &quot;loaded&quot; Document&lt;br/&gt;
would make no effort to convey these index-time options like&lt;br/&gt;
omitNorms, OTFAP, etc., because those settings are &quot;semi-global&quot;&lt;br/&gt;
(absorbed into the FieldInfos for the current segment).  And something&lt;br/&gt;
like boost, which the API lets you access on a loaded doc, is always&lt;br/&gt;
wrong since we cannot recreate that (it&apos;s not stored, directly, in the&lt;br/&gt;
index).&lt;/p&gt;

&lt;p&gt;At indexing time, all these if&apos;s all over the place to conditionalize&lt;br/&gt;
the defaults depending on whether the field is indexed, are also&lt;br/&gt;
spooky.  It&apos;s as if we should have a separate class (IndexedField)&lt;br/&gt;
that privately carries these values.  Then a StoredField wouldn&apos;t even&lt;br/&gt;
have them.  But that approach breaks down because we&apos;d also want an&lt;br/&gt;
IndexedAndStoredField.&lt;/p&gt;

&lt;p&gt;Or... perhaps we move all the indexing-specific settings out of&lt;br/&gt;
Field.java and into Field.Index.  After all, these details really&lt;br/&gt;
describe tweaks on how Lucene will do its indexing, so they don&apos;t&lt;br/&gt;
really belong in the main Field.java class.&lt;/p&gt;</comment>
                    <comment id="12697024" author="thetaphi" created="Wed, 8 Apr 2009 14:59:25 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Patch looks good! All tests pass. That was trickier than I expected;&lt;br/&gt;
thanks Uwe. I plan to commit in a day or two.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The only tricky part was the FieldsReader. The original bug was fixed in a few lines (FieldInfo ctor and update()).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&apos;s a good catch, all the places in FieldsReader where we fail to&lt;br/&gt;
carryover OTFAP from FieldInfo --&amp;gt; Field instance on the document.&lt;br/&gt;
It&apos;s yet another example of how having the loaded Document &quot;seem like&quot;&lt;br/&gt;
the indexed document causes problems.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am still not happy with the new FieldReader because it cannot replicate all indexing infos (but now does almost everything). I know, it does not affect functionality (as only the stored contents can be retrieved). In principle the Field instances should have &lt;b&gt;no&lt;/b&gt; indexing options. Luke would the display nothing anymore, but for this case it would really be better to make the Field infos &quot;public&quot;, so somebody could enumerate all fields and test then, which options were used during indexing. Mixing this with retrieval of stored fields is not good.&lt;/p&gt;

&lt;p&gt;One case is now not implemented correctly in FieldsReader: A binary stored field have a special if-clause in FieldsReader. The binary field is loaded as stored only, currently only omitTf and omitNorms are set (I added this). But e.g. INDEX is always false and so on. In principle for completeness, all options from FieldInfo should be replicated here.&lt;br/&gt;
FieldsReader would be better to have a central method like copyFieldOptions(FieldInfo, Fieldable), that copies all options from FieldInfo to the Fieldable (without looking at the stored contents). The other if-cases should only initialize the stored parts and type. I think, I give it a try.&lt;br/&gt;
The whole info is now more important: If somebody in the past had stored the string contents compressed, he must now use a binary field and compress himself. In this case, Luke would not display any indexing options anymore. This is not bad, but inconsistent.&lt;/p&gt;

&lt;p&gt;So the better case is to make the Field properties public not on the document level, but on the IndexReader level.&lt;/p&gt;</comment>
                    <comment id="12697034" author="mikemccand" created="Wed, 8 Apr 2009 15:21:01 +0100"  >
&lt;blockquote&gt;&lt;p&gt;In principle the Field instances should have no indexing options.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean retrieved fields right?  I agree.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;but for this case it would really be better to make the Field infos &quot;public&quot;, so somebody could enumerate all fields and test then, which options were used during indexing. Mixing this with retrieval of stored fields is not good.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, we should make it possible to access the &quot;schema&quot;&lt;br/&gt;
(FieldInfos) from the index. This would presumably replace the&lt;br/&gt;
getFieldNames(FieldOption) IndexReader exposes today.&lt;/p&gt;

&lt;p&gt;Since FieldInfos is per-segment, one challenge is how Multi*Reader&lt;br/&gt;
should work.  Should it simply merge on-the-fly?  (ie present a single&lt;br/&gt;
FieldInfo that merged the fields by the same name across all segmens)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;FieldsReader would be better to have a central method like copyFieldOptions(FieldInfo, Fieldable), that copies all options from FieldInfo to the Fieldable (without looking at the stored contents).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds like a good stop-gap measure, but I&apos;d rather put our&lt;br/&gt;
energy towards exposing the schema, decoupling &quot;retrieved&quot; Fields from&lt;br/&gt;
indexed fields, etc.&lt;/p&gt;</comment>
                    <comment id="12697238" author="thetaphi" created="Wed, 8 Apr 2009 22:56:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;Since FieldInfos is per-segment, one challenge is how Multi*Reader should work. Should it simply merge on-the-fly? (ie present a single FieldInfo that merged the fields by the same name across all segmens)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe merge with the already existing FieldInfos/FieldInfo methods.&lt;/p&gt;

&lt;p&gt;A new case for this would be good, after thinking a little bit about it, I may open one. But in general it should be combined with the Document/Fields redesign.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This sounds like a good stop-gap measure, but I&apos;d rather put our energy towards exposing the schema, decoupling &quot;retrieved&quot; Fields from indexed fields, etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, and it will not work. I think, we leave the patch as it is, maybe remove the omitTf and omitNorms update for binary fields. Binary fields are &quot;special&quot;.&lt;/p&gt;</comment>
                    <comment id="12697440" author="mikemccand" created="Thu, 9 Apr 2009 10:06:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;Maybe merge with the already existing FieldInfos/FieldInfo methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And we should think about flexible indexing, ie, make FieldInfo extensible.  I think there are two separate questions, here:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;What API doe we expose for the &quot;schema&quot; (FieldInfo/s)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;How to handle the fact that each segment has its own &quot;schema&quot; (hide it, by virtually merging the way SegmentMerger would, or, expose it)?&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;A new case for this would be good, after thinking a little bit about it, I may open one. But in general it should be combined with the Document/Fields redesign.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, a new issue.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yes, and it will not work. I think, we leave the patch as it is, maybe remove the omitTf and omitNorms update for binary fields. Binary fields are &quot;special&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you want to make a new patch (removing omit* update for binary fields)?&lt;/p&gt;</comment>
                    <comment id="12697449" author="thetaphi" created="Thu, 9 Apr 2009 10:30:50 +0100"  >&lt;blockquote&gt;&lt;p&gt;Do you want to make a new patch (removing omit* update for binary fields)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here it is, FieldsReader is now equal to the pre-previous patch, tests still pass. Binary field handling is now unchanged.&lt;/p&gt;</comment>
                    <comment id="12697452" author="thetaphi" created="Thu, 9 Apr 2009 10:32:32 +0100"  >&lt;p&gt;I forgot to add a change-note in changes.txt. As the behaviour is now a little bit different (stored-only fields now have omitNorms switched &quot;on&quot; per default), there should be a note in changes.txt. Can you add it when committing. I am not sure, what to add there.&lt;/p&gt;</comment>
                    <comment id="12697457" author="mikemccand" created="Thu, 9 Apr 2009 10:56:14 +0100"  >&lt;p&gt;Thanks Uwe.  I&apos;ll add a CHANGES entry.&lt;/p&gt;</comment>
                    <comment id="12697472" author="mikemccand" created="Thu, 9 Apr 2009 11:38:01 +0100"  >&lt;p&gt;Thanks Uwe!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12405054" name="LUCENE-1590.patch" size="12923" author="thetaphi" created="Thu, 9 Apr 2009 10:30:50 +0100" />
                    <attachment id="12404944" name="LUCENE-1590.patch" size="14262" author="thetaphi" created="Wed, 8 Apr 2009 11:19:29 +0100" />
                    <attachment id="12404905" name="LUCENE-1590.patch" size="6073" author="thetaphi" created="Wed, 8 Apr 2009 01:06:51 +0100" />
                    <attachment id="12404900" name="LUCENE-1590.patch" size="4239" author="thetaphi" created="Wed, 8 Apr 2009 00:22:46 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 7 Apr 2009 23:14:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12165</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26139</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>