<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3778/LUCENE-3778.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3778] Create a grouping convenience class</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3778</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently the grouping module has many collector classes with a lot of different options per class. I think it would be a good idea to have a GroupUtil (Or another name?) convenience class. I think this could be a builder, because of the many options (sort,sortWithinGroup,groupOffset,groupCount and more) and implementations (term/dv/function) grouping has.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12542503">LUCENE-3778</key>
            <summary>Create a grouping convenience class</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="martijn.v.groningen">Martijn van Groningen</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Feb 2012 09:42:58 +0000</created>
                <updated>Fri, 10 May 2013 11:43:35 +0100</updated>
                    <resolved>Thu, 22 Mar 2012 16:17:17 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/grouping</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13208550" author="mikemccand" created="Wed, 15 Feb 2012 15:54:42 +0000"  >&lt;p&gt;This sounds like a good idea!  Grouping is hard to use now...&lt;/p&gt;

&lt;p&gt;Would it be something like this?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;GroupSearch ctx = new GroupingSearch(groupByField);

ctx.setGroupSort(...);
ctx.setWithinGroupSort(...);
ctx.setNeedsAllGroups(...);
ctx.setNeedsAllGroupHeads(...);
ctx.setUseCaching(...);

topGroups = ctx.search(searcher, query, numGroups);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... and the search method figures out which first/second pass&lt;br/&gt;
collectors to make, whether to cache, etc.?&lt;/p&gt;

&lt;p&gt;Would you also handle block (single pass) grouping with the same&lt;br/&gt;
class...?&lt;/p&gt;

&lt;p&gt;I guess you&apos;d then .getAllGroups(), .getAllGroupHeads() after&lt;br/&gt;
.search(...)?&lt;/p&gt;

&lt;p&gt;Hmm would we try to handle Term/BytesRef and Function/MutableValue&lt;br/&gt;
with the same class?&lt;/p&gt;</comment>
                    <comment id="13208846" author="martijn.v.groningen" created="Wed, 15 Feb 2012 22:11:18 +0000"  >&lt;p&gt;Yes, it would look something like that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would you also handle block (single pass) grouping with the same class...?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we can do this. The block grouping returns TopGroups as result.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I guess you&apos;d then .getAllGroups(), .getAllGroupHeads() after .search(...)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, we need that. In the case of getAllGroups() the TopGroups#totalGroupCount field can be used when the user is only interested in the number of matching groups.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hmm would we try to handle Term/BytesRef and Function/MutableValue with the same class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With generics?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class GroupingSearch {

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &amp;lt;T&amp;gt; TopGroups&amp;lt;T&amp;gt; search(IndexSearcher searcher, Query query, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numGroups) {
    ...
  }

}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Function usage:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
GroupSearch ctx = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; GroupingSearch(groupByFunction);
ctx.useFunction();
...
TopGroups&amp;lt;MutableValue&amp;gt; topGroups = ctx.search(searcher, query, numGroups);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same could work for grouping by docvalues types int and float, right?&lt;/p&gt;

&lt;p&gt;Maybe distributed grouping needs its own class? Since the usage is different from a non distributed grouping.&lt;/p&gt;</comment>
                    <comment id="13209594" author="mikemccand" created="Thu, 16 Feb 2012 18:47:16 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Would you also handle block (single pass) grouping with the same class...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we can do this. The block grouping returns TopGroups as result.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I guess you&apos;d then .getAllGroups(), .getAllGroupHeads() after .search(...)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, we need that. In the case of getAllGroups() the TopGroups#totalGroupCount field can be used when the user is only interested in the number of matching groups.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Hmm would we try to handle Term/BytesRef and Function/MutableValue with the same class?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;With generics?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think so... but I think it may get tricky.  Like, I think you should&lt;br/&gt;
specify up front (to GroupingSearch ctor) the required things about&lt;br/&gt;
your request (block join OR group field OR field + DV type OR function&lt;br/&gt;
VS/ctx map), setters for the numerous optional things (sort,&lt;br/&gt;
groupSort, getScores, getMaxScores, maxDocsPerGroup) and maybe params&lt;br/&gt;
to search for the per-requesty things (topNGroups, groupOffset,&lt;br/&gt;
withinGroupOffset).&lt;/p&gt;

&lt;p&gt;But then the &amp;lt;T&amp;gt; will depend on which ctor you used...?  Not sure how&lt;br/&gt;
it&apos;d work...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe distributed grouping needs its own class? Since the usage is different from a non distributed grouping.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah...&lt;/p&gt;

&lt;p&gt;Maybe we can do this for join module too!&lt;/p&gt;</comment>
                    <comment id="13212663" author="martijn.v.groningen" created="Tue, 21 Feb 2012 15:33:15 +0000"  >&lt;p&gt;Just a start, but it think this is the way to go.&lt;/p&gt;</comment>
                    <comment id="13217153" author="mikemccand" created="Mon, 27 Feb 2012 11:35:26 +0000"  >&lt;p&gt;I really dislike the cancerous chaining (all setters returning&lt;br/&gt;
&lt;tt&gt;this&lt;/tt&gt;): it&apos;s poor API design because it creates unnecessary&lt;br/&gt;
ambiguity on how to consume it.  It amounts to a denial-of-service&lt;br/&gt;
attack on the devs who consume our APIs....  We should strive to have&lt;br/&gt;
less, not more, ambiguity in all of our APIs.&lt;/p&gt;

&lt;p&gt;But, since others seem to love it, as a compromise, can you write all&lt;br/&gt;
consumption of the cancerous chaining as if the methods did not chain?&lt;br/&gt;
Ie minimize the cancer: contain it to the API definition, alone.&lt;/p&gt;

&lt;p&gt;The litmus test is then simple: if I were to change all methods to&lt;br/&gt;
return void instead, everything should compile / tests should pass.&lt;/p&gt;

&lt;p&gt;Otherwise, the patch looks great!&lt;/p&gt;

&lt;p&gt;One can actually use GroupingSearch in a shard&apos;d env, on each shard,&lt;br/&gt;
right?  It&apos;s just that then you merge them like normal on the front&lt;br/&gt;
end (ie, TopGroups.merge).  Is that the only reason for the &quot;... in a&lt;br/&gt;
non distributed environment&quot; javadoc warning?&lt;/p&gt;

&lt;p&gt;I think the jdocs for each ctor should explain what kind of grouping&lt;br/&gt;
impl will be used (ie, the ctor taking Filter groupEndDocs uses&lt;br/&gt;
single-pass block collector, and requires you indexed doc blocks).&lt;/p&gt;

&lt;p&gt;Maybe the ctor should take docValuesType / diskResidentValues, instead&lt;br/&gt;
of setters to change it?  Ie, so that you are stating up front what&lt;br/&gt;
source to group by (DocValues, FC (Term), function, block).&lt;/p&gt;

&lt;p&gt;Maybe you should pass the groupSort, groupsOffset, groupsLimit to the&lt;br/&gt;
search method (instead of setters)?&lt;/p&gt;</comment>
                    <comment id="13222368" author="martijn.v.groningen" created="Mon, 5 Mar 2012 14:33:58 +0000"  >&lt;blockquote&gt;
&lt;p&gt;One can actually use GroupingSearch in a shard&apos;d env, on each shard,&lt;br/&gt;
right? It&apos;s just that then you merge them like normal on the front&lt;br/&gt;
end (ie, TopGroups.merge). Is that the only reason for the &quot;... in a&lt;br/&gt;
non distributed environment&quot; javadoc warning?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In a sharded env one needs to first execute all the first pass collector on all shards, merge the returned search groups, execute the second pass search (with the top N merged search groups as argument) on most of the shards and finally merge the TopGroups from all shards into a topN TopGroups. Also grouping by docblock and grouping features like allGroups and groupHead don&apos;t work in a normal sharded environment (unless you partition the groups properly). The docs caching also only makes sense when performing grouping on a local index. This usage is very different then non distributed grouping, that is why I think it is better to have a separate grouping convenience class for distributed grouping (DistributedGroupSearch?). &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe the ctor should take docValuesType / diskResidentValues&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Makes sense!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe you should pass the groupSort, groupsOffset, groupsLimit to the search method (instead of setters)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Maybe we just should have defaults for these options? Sort.RELEVANCE, 0 and 10?&lt;/p&gt;</comment>
                    <comment id="13222413" author="martijn.v.groningen" created="Mon, 5 Mar 2012 15:50:03 +0000"  >&lt;p&gt;Updated patch.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Added jdocs.&lt;/li&gt;
	&lt;li&gt;allGroups and allGroupHeads methods are implemented now.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13224561" author="mikemccand" created="Wed, 7 Mar 2012 18:09:06 +0000"  >&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also grouping by docblock and grouping features like allGroups and groupHead don&apos;t work in a normal sharded environment (unless you partition the groups properly).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Doc block grouping should work well in a sharded env right?  As long&lt;br/&gt;
as you send the whole block to a single shard...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This usage is very different then non distributed grouping, that is why I think it is better to have a separate grouping convenience class for distributed grouping (DistributedGroupSearch?).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I agree.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Maybe you should pass the groupSort, groupsOffset, groupsLimit to the search method (instead of setters)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe we just should have defaults for these options? Sort.RELEVANCE, 0 and 10?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I was trying to mirror IndexSearcher.search (for lack of any&lt;br/&gt;
other guidance on what should be required arg to ctor, optional via&lt;br/&gt;
setter or required arg to .search).&lt;/p&gt;

&lt;p&gt;So, yeah, I think default to Sort.RELEVANCE is good?  Maybe we have 1&lt;br/&gt;
search method doing that and another taking the GroupSort?&lt;/p&gt;

&lt;p&gt;I think it&apos;s strange to have a default for the top N groups (10)?  I&lt;br/&gt;
think app should have to specify that as an arg to search...&lt;/p&gt;

&lt;p&gt;Should we name it GroupSearch?  GroupedSearch?  GroupingSearch...?  I don&apos;t&lt;br/&gt;
have a strong preference... I think GroupingSearch (current name) is OK?&lt;/p&gt;</comment>
                    <comment id="13224774" author="martijn.v.groningen" created="Wed, 7 Mar 2012 22:09:22 +0000"  >&lt;blockquote&gt;
&lt;p&gt;So, yeah, I think default to Sort.RELEVANCE is good? Maybe we have 1&lt;br/&gt;
search method doing that and another taking the GroupSort?&lt;/p&gt;

&lt;p&gt;I think it&apos;s strange to have a default for the top N groups (10)? I&lt;br/&gt;
think app should have to specify that as an arg to search...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Makes sense.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think GroupingSearch (current name) is OK?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the join module we have the JoinUtil. Maybe rename it to GroupUtil? Just to be consistent? Or rename JoinUtil to JoinSearch?&lt;/p&gt;</comment>
                    <comment id="13225146" author="mikemccand" created="Thu, 8 Mar 2012 11:25:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;In the join module we have the JoinUtil. Maybe rename it to GroupUtil? Just to be consistent? Or rename JoinUtil to JoinSearch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, except in JoinUtil&apos;s case, it just has one static method... vs GroupingSearch which you instantiate, tweak, and use.  So I think it&apos;s good that they are named differently?&lt;/p&gt;</comment>
                    <comment id="13225149" author="martijn.v.groningen" created="Thu, 8 Mar 2012 11:30:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmm, except in JoinUtil&apos;s case, it just has one static method... vs GroupingSearch which you instantiate, tweak, and use. So I think it&apos;s good that they are named differently?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;True. Lets keep the current name then.&lt;/p&gt;

&lt;p&gt;I think that the package.html should also be updated? It should use the GroupSearch instead of all the different collectors. &lt;/p&gt;</comment>
                    <comment id="13227041" author="mikemccand" created="Sun, 11 Mar 2012 13:13:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think that the package.html should also be updated? It should use the GroupSearch instead of all the different collectors.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, as long as GroupSearch covers all cases package.html now describes I guess?&lt;/p&gt;</comment>
                    <comment id="13227083" author="rcmuir" created="Sun, 11 Mar 2012 16:42:43 +0000"  >&lt;p&gt;I took a quick glance and ... completely avoiding the chaining discussion, i have a few silly API suggestions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;methods like enableCaching(double maxCacheRAMMB, boolean cacheScores) and enableCaching(int maxDocsToCache, boolean cacheScores)&lt;br/&gt;
  are confusing because the signature is overloaded by different primitive types... can we give those unique names?&lt;/li&gt;
	&lt;li&gt;methods like disableCaching(), includeScores(boolean includeScores) are a little confusing because the verb &apos;set&apos; is missing?&lt;br/&gt;
  In general I think getXXX and setXXX are useful, because otherwise its hard to consume the API since you don&apos;t&lt;br/&gt;
  know if the method will have some unintended side effects. As an extreme example, imagine if instead of isClosed() if you &lt;br/&gt;
  used closed(), which is very different from close() but confusable.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13228283" author="martijn.v.groningen" created="Tue, 13 Mar 2012 09:05:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;+1, as long as GroupSearch covers all cases package.html now describes I guess?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think the GroupSearch class covers all local cases, so that should be fine.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;methods like disableCaching(), includeScores(boolean includeScores) are a little confusing because the verb &apos;set&apos; is missing?&lt;br/&gt;
In general I think getXXX and setXXX are useful, because otherwise its hard to consume the API since you don&apos;t&lt;br/&gt;
know if the method will have some unintended side effects. As an extreme example, imagine if instead of isClosed() if you &lt;br/&gt;
used closed(), which is very different from close() but confusable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Kinda makes sense, lets make the method names more descriptives to avoid any confusion (although we have jdocs). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;methods like enableCaching(double maxCacheRAMMB, boolean cacheScores) and enableCaching(int maxDocsToCache, boolean cacheScores)&lt;br/&gt;
are confusing because the signature is overloaded by different primitive types... can we give those unique names?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure, we can do that. What would be good names? setCacheSizeInMb(Double,boolean) and setCacheSizeInDocs(Integer,boolean)? Setting null would disable the cache?&lt;/p&gt;</comment>
                    <comment id="13230269" author="martijn.v.groningen" created="Thu, 15 Mar 2012 16:22:53 +0000"  >&lt;p&gt;Updated patch.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Changed package.html&lt;/li&gt;
	&lt;li&gt;The methods that set something now have a name that begins with set.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13234412" author="martijn.v.groningen" created="Wed, 21 Mar 2012 15:17:45 +0000"  >&lt;p&gt;Updated patch. Grouplimit and groupoffset are now parameters in the search methods. I think it is time to commit this.&lt;/p&gt;</comment>
                    <comment id="13234445" author="mikemccand" created="Wed, 21 Mar 2012 15:58:33 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13235682" author="martijn.v.groningen" created="Thu, 22 Mar 2012 16:17:17 +0000"  >&lt;p&gt;Committed to trunk. Feature work (distributed grouping, grouped facets etc.) will be done in new issues.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12519242" name="LUCENE-3778.patch" size="36725" author="martijn.v.groningen" created="Wed, 21 Mar 2012 15:17:44 +0000" />
                    <attachment id="12518476" name="LUCENE-3778.patch" size="37437" author="martijn.v.groningen" created="Thu, 15 Mar 2012 16:22:53 +0000" />
                    <attachment id="12517093" name="LUCENE-3778.patch" size="36774" author="martijn.v.groningen" created="Mon, 5 Mar 2012 15:50:03 +0000" />
                    <attachment id="12515368" name="LUCENE-3778.patch" size="27635" author="martijn.v.groningen" created="Tue, 21 Feb 2012 15:33:15 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 15 Feb 2012 15:54:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>227790</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23921</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>