<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:45 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1715/LUCENE-1715.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1715] DirectoryIndexReader finalize() holding TermInfosReader longer than necessary</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1715</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;DirectoryIndexReader has a finalize method, which causes the JDK to keep a reference to the object until it can be finalized.  SegmentReader and MultiSegmentReader are subclasses that contain references to, potentially, hundreds of megabytes of cached data in a TermInfosReader.&lt;/p&gt;

&lt;p&gt;Some options would be removing finalize() from DirectoryIndexReader (it releases a write lock at the moment) or possibly nulling out references in various close() and doClose() methods throughout the class hierarchy so that the finalizable object doesn&apos;t references the Term arrays.&lt;/p&gt;

&lt;p&gt;Original mailing list message:&lt;br/&gt;
&lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200906.mbox/%3C7A5CB4A7BBCE0C40B81C5145C326C31301A62971@NUMEVP06.na.imtn.com%3E&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200906.mbox/%3C7A5CB4A7BBCE0C40B81C5145C326C31301A62971@NUMEVP06.na.imtn.com%3E&lt;/a&gt;&lt;/p&gt;</description>
                <environment>&lt;p&gt;Sun JDK 6 update 12 64-bit, Debian Lenny&lt;/p&gt;</environment>
            <key id="12428675">LUCENE-1715</key>
            <summary>DirectoryIndexReader finalize() holding TermInfosReader longer than necessary</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="bgroose">Brian Groose</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Jun 2009 16:08:48 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:28 +0100</updated>
                    <resolved>Thu, 25 Jun 2009 11:55:53 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12723156" author="mikemccand" created="Tue, 23 Jun 2009 17:13:36 +0100"  >&lt;p&gt;I&apos;d be inclined to remove the finalizer at this point.  Apps should not be relying on GC to release the write lock, and if they are, at best they get very buggy behavior (eg we don&apos;t flush changes to disk, other writers will sometimes to acquire the write lock because GC didn&apos;t finalize, etc.),&lt;/p&gt;

&lt;p&gt;If we remove the finalizer then the closed SegmentReader should be GC&apos;d promptly.&lt;/p&gt;</comment>
                    <comment id="12723157" author="earwin" created="Tue, 23 Jun 2009 17:18:12 +0100"  >&lt;p&gt;+1&lt;br/&gt;
I suggest removing finalize() from IndexWriter too.&lt;/p&gt;

&lt;p&gt;If someone forgets to close IR/IW - that&apos;s his personal problem. (Which, in the abscence of finalizer he&apos;ll going to notice and fix pretty soon)&lt;/p&gt;</comment>
                    <comment id="12723164" author="mikemccand" created="Tue, 23 Jun 2009 17:25:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;I suggest removing finalize() from IndexWriter too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;At best you get buggy behavior if somehow you&apos;re relying on these finalizers...&lt;/p&gt;

&lt;p&gt;I plan to commit shortly.&lt;/p&gt;</comment>
                    <comment id="12723169" author="mikemccand" created="Tue, 23 Jun 2009 17:32:21 +0100"  >&lt;p&gt;Thanks Brian!&lt;/p&gt;</comment>
                    <comment id="12723174" author="thetaphi" created="Tue, 23 Jun 2009 17:40:27 +0100"  >&lt;p&gt;I would still additionally null the references Brian notes for even faster release by GC?&lt;/p&gt;</comment>
                    <comment id="12723180" author="mikemccand" created="Tue, 23 Jun 2009 17:50:18 +0100"  >&lt;p&gt;Does that really help GC?  (I thought not)&lt;/p&gt;

&lt;p&gt;Had we left finalize in place, I agree nulling would help, because stuff can sit in the finalize queue for a while and nulling would have severed it.  But now since all of DirectoryReader will be GCd &quot;at once&quot;, I didn&apos;t think nulling would help?&lt;/p&gt;

&lt;p&gt;Though, I suppose what it would help is when someone closes the reader but then still hangs onto it, so perhaps we should do it?&lt;/p&gt;</comment>
                    <comment id="12723183" author="thetaphi" created="Tue, 23 Jun 2009 17:55:29 +0100"  >&lt;p&gt;That was my intention. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12723184" author="simonw" created="Tue, 23 Jun 2009 17:57:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;Does that really help GC? (I thought not) &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It really depends on the VM implementation. In a dalvik VM people start nulling stuff all the time because it helps GC. In that case where a lot of memory can be collected I guess its worth to null the references. I generally do not null references but in this case I would really to it.&lt;/p&gt;

&lt;p&gt;so +1 from my side.&lt;/p&gt;</comment>
                    <comment id="12723188" author="mikemccand" created="Tue, 23 Jun 2009 18:05:25 +0100"  >&lt;p&gt;Reopening for nulling at least termInfosReader; we should probably null other memory intensive things like deleted docs &amp;amp; norms.&lt;/p&gt;</comment>
                    <comment id="12723203" author="rnewson" created="Tue, 23 Jun 2009 18:41:25 +0100"  >&lt;p&gt;I wonder if it&apos;s also worth examining the (very few) other places that have finalize()?&lt;/p&gt;

&lt;p&gt;The mere presence of a finalize() method triggers different handling by the garbage collector.  Since all remaining finalize() methods appear to close resources that should have been closed explicitly, the same principle applies for those as for the resolution of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1715&quot; title=&quot;DirectoryIndexReader finalize() holding TermInfosReader longer than necessary&quot;&gt;&lt;del&gt;LUCENE-1715&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;
</comment>
                    <comment id="12723217" author="mikemccand" created="Tue, 23 Jun 2009 18:54:51 +0100"  >&lt;p&gt;SimpleFSDirectory.FSIndexInput&apos;s finalize() protects you from running out of descriptors, if you fail to close your reader; NativeFSLockFactory protects you if you forget to release the lock (close your writer). &lt;/p&gt;

&lt;p&gt;I agree, I think we should remove both of these.&lt;/p&gt;</comment>
                    <comment id="12723224" author="earwin" created="Tue, 23 Jun 2009 19:01:51 +0100"  >&lt;p&gt;I object nulling references in attempt to speed up GC. It&apos;s totally useless on any decent JVM implementation and if someone uses indecent JVM, I doubt he&apos;s concerned with his app efficiency.&lt;/p&gt;</comment>
                    <comment id="12723225" author="earwin" created="Tue, 23 Jun 2009 19:02:47 +0100"  >&lt;p&gt;And support removing finalizers everywhere if their only point is to guard against forgotten close().&lt;/p&gt;</comment>
                    <comment id="12723276" author="mikemccand" created="Tue, 23 Jun 2009 20:59:48 +0100"  >&lt;p&gt;I agree nulling is not a good practice to make GC faster.&lt;/p&gt;

&lt;p&gt;But... for freeing up memory even if the app still holds a reference to the reader after closing it, I think this is in fact worthwhile.&lt;/p&gt;</comment>
                    <comment id="12723283" author="simonw" created="Tue, 23 Jun 2009 21:11:41 +0100"  >&lt;p&gt;I is def. not good practice and I agree that a decent VM should not care. In some environments you don&apos;t have a choice (mobile phones for instance) and if selected pieces of &quot;nulling&quot; code can speed things up we should do it. I will run a benchmark on a dalivk VM (Android) to show the difference with the change. I might not have time today or tomorrow though. &lt;br/&gt;
This change is not visible to anybody using lucene so to me its not that much of a deal. &lt;br/&gt;
To be honest I&apos;m not a fan of doing that at all but in this case it &quot;could&quot; be useful in some corner cases but does not harm anybody.&lt;/p&gt;</comment>
                    <comment id="12723289" author="earwin" created="Tue, 23 Jun 2009 21:28:43 +0100"  >&lt;p&gt;There&apos;s in fact one case where nulling harms. I&apos;m going to try making as much of IR as possible immutable and final. Load everything upfront on creation/reopen (or don&apos;t load if IR is created for, say, merging). Unlike nulling references, making frequently accessed fields final does have an impact under adequate JVMs.&lt;/p&gt;

&lt;p&gt;Well, nulling can be added now and removed when/if I finish my IR stuff.&lt;/p&gt;</comment>
                    <comment id="12723304" author="mikemccand" created="Tue, 23 Jun 2009 22:02:07 +0100"  >&lt;p&gt;OK, attached patch nulling just a few things... I plan to commit in a day or two.&lt;/p&gt;</comment>
                    <comment id="12724023" author="mikemccand" created="Thu, 25 Jun 2009 11:55:53 +0100"  >&lt;p&gt;Thanks Brian!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12411572" name="LUCENE-1715.patch" size="4551" author="mikemccand" created="Tue, 23 Jun 2009 22:02:07 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Jun 2009 16:13:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12044</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26011</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>