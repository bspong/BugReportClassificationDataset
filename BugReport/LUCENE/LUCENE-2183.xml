<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:33:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2183/LUCENE-2183.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2183] Supplementary Character Handling in CharTokenizer</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2183</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;CharTokenizer is an abstract base class for all Tokenizers operating on a character level. Yet, those tokenizers still use char primitives instead of int codepoints. CharTokenizer should operate on codepoints and preserve bw compatibility. &lt;/p&gt;</description>
                <environment></environment>
            <key id="12444257">LUCENE-2183</key>
            <summary>Supplementary Character Handling in CharTokenizer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 28 Dec 2009 17:12:11 +0000</created>
                <updated>Fri, 10 May 2013 11:44:28 +0100</updated>
                    <resolved>Fri, 29 Jan 2010 07:45:56 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12794836" author="simonw" created="Mon, 28 Dec 2009 17:13:30 +0000"  >&lt;p&gt;linked issues&lt;/p&gt;</comment>
                    <comment id="12794838" author="simonw" created="Mon, 28 Dec 2009 17:30:28 +0000"  >&lt;p&gt;Here is a first proposal of a slightly new API that rather decouples the &quot;isTokenChar&quot; predicate and the &quot;normalize&quot; method instead of enforceing CharTokenizer subclasses and overriding methods. &lt;br/&gt;
I introduced a new class TokenCharFunctions that is passed to the constructor of CharTokenizer and is used internally. The patch preserves full backwards compat and provides a clean way to move towards a consistent codepoint based API with would still provide the flexibility to make use of the old and buggy behavior even if the char based methods are removed.&lt;/p&gt;

&lt;p&gt;I consider this patch as a basis for the discussion how to solve this problem. other approaches would be using reflection like the TokenStream BWCompat layer does but I personally prefer not to use reflection and rather use delegation in favor of inheritance.&lt;/p&gt;

&lt;p&gt;looking forward to see some comments. &lt;/p&gt;</comment>
                    <comment id="12794841" author="rcmuir" created="Mon, 28 Dec 2009 18:08:56 +0000"  >&lt;p&gt;Hello, first comment is that I really like how the IO-handling is done in CharacterUtils.&lt;/p&gt;

&lt;p&gt;This solves a problem across more than CharTokenizer, other tokenizers in lucene contrib that do NOT extend CharTokenizer have the same logic and also need to be fixed.&lt;/p&gt;

&lt;p&gt;So we could reuse this code in other places too, such as CJKTokenizer. I think we could also reuse this code to fix some unrelated problems in the n-gram tokenizers (at a glance, i do not see how the n-gram tokenizer io-handling even works correctly at all)&lt;/p&gt;</comment>
                    <comment id="12794886" author="rcmuir" created="Mon, 28 Dec 2009 19:11:54 +0000"  >&lt;p&gt;Hello Simon, another option very similar to yours (I am not sure if it really would work, but just thinking out loud somewhat) could be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/** &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; method will be declared &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; in Lucene 4.0 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; isTokenChar(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ch) {
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; UOE();
}

/** @deprecated will be removed in Lucene 4.0 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; isTokenChar(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; ch) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; isTokenChar((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)ch);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and do the same for normalize(). The rest would be the same as your patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Use CharacterUtils for io-buffering&lt;/li&gt;
	&lt;li&gt;Use CharacterUtils for character/codepoint iteration.&lt;/li&gt;
	&lt;li&gt;Use Version to decide which method to call instead of reflection: this should not be conditional upon each call to isTokenChar() but instead two private inner classes or whatever.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The difference would be that the api would appear more natural in my opinion, and once deprecations are removed we would end out with an abstract class with the int-equivalent of what we have now.&lt;/p&gt;

&lt;p&gt;If someone attempts to use a CharTokenizer that does &lt;b&gt;not&lt;/b&gt; support int-based methods (only implements the char-based methods) with Version.LUCENE_31 then this would throw UOE, which in my opinion is correct, as it does not support the behavior of that version.&lt;/p&gt;

&lt;p&gt;edit: I changed the deprecation of isTokenChar(char) to 4.0. The index back compat would still exist because using CharacterUtils with isTokenChar(int) is the same thing.&lt;/p&gt;</comment>
                    <comment id="12794948" author="thetaphi" created="Mon, 28 Dec 2009 22:17:53 +0000"  >&lt;p&gt;+1 @ Roberts comment! I like this more and it would work correctly as proposed with UOE..&lt;/p&gt;</comment>
                    <comment id="12794964" author="rcmuir" created="Mon, 28 Dec 2009 23:34:31 +0000"  >&lt;p&gt;I thought about this some (the idea i mentioned earlier, not Simon&apos;s patch), but i am worried about one thing:&lt;/p&gt;

&lt;p&gt;Consider LetterTokenizer, which is non-final subclass of CharTokenizer.&lt;br/&gt;
Lets say you make LetterAndNumberTokenizer which extends LetterTokenizer, but you do not implement the int-based method.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isTokenChar(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; c) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.isTokenChar(c) || &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.isNumber(c);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we have fixed LetterTokenizer so it has isTokenChar(int), but that means if someone tries to use this LettterAndNumberTokenizer with Version.LUCENE_31, it will not work, because it will not throw UOE, and silently discard numbers...  since it will call the LetterTokenizer int-based method.&lt;/p&gt;

&lt;p&gt;of course it will work correctly with Version.LUCENE_30, so it is not a back compat problem, but it will not throw UOE and silently behave incorrectly for LUCENE_31 until the &apos;int&apos; method is implemented.&lt;/p&gt;

&lt;p&gt;so i think this is a problem in this design, and i do not know how to fix without reflection.&lt;/p&gt;</comment>
                    <comment id="12795043" author="simonw" created="Tue, 29 Dec 2009 12:47:11 +0000"  >&lt;p&gt;Hey guys thanks for your comments.&lt;br/&gt;
when I started thinking about this issue I had a quick chat with robert and we figured that his solution could be working so I implemented it.&lt;br/&gt;
Yet, i found 2 problems with it.&lt;br/&gt;
1. If a user calls super.isTokenChar(char) and the super class has implemented the int method the UOE will never be thrown and the code does not behave like &quot;expected&quot; from the user perspective. - This is what robert explained above. We could solve this problem with reflection which leads to the second problem.&lt;/p&gt;

&lt;p&gt;2. If a Tokenizer like LowerCaseTokenizer only overrides normalize(char|int) it relies on the superclass implementation of isTokenChar. Yet if we solve problem 1. the user would be forced to override the isTokenChar to just call super.isTokenChar otherwise the reflection code will raise an exception that the int method is not implemented in the concrete class or will use the char API - anyway it will not do what is expected. &lt;/p&gt;

&lt;p&gt;Working around those two problem was the cause of a new API for CharTokenizer. My personal opinion is that inheritance is the wrong tool for changing behavior I used delegation (like a strategy) to on the one hand define a clear &quot;new&quot; API and decouple the code changing the behavior of the Tokenizer from the tokenizer itself. Inheritance for me is for extending a class and delegation is for changing behavior in this particular problem. &lt;br/&gt;
Decoupling the old from the new has several advantages over a reflection / inheritance based solution. &lt;br/&gt;
1. if a user does not provide a delegation impl he want to use the old API&lt;br/&gt;
2. if a user does provide a delegation impl he has still the ability to choose between charprocessing in 3.0 style or 3.1 style&lt;br/&gt;
3. no matter what is provided a user has full flexibility to choose the combination of their choice - old char processing - new int based api (maybe minor though)&lt;br/&gt;
4. we can leave all tokeinizer subclasses as their are and define new functions that implement their behavior in parallel. those functions can be made final from the beginning and which prevents users from subclassing them. (all of the existing ones should be final in my opinion - like LowerCaseTokenizer which should call Character.isLetter in the isTokenCodePoint(int) directly instead of subclassing another function.)&lt;/p&gt;

&lt;p&gt;As a user I would expect lucene to revise their design decisions made years ago when there is a need for it like we have in this issue. It is easier to change behavior in user code by swapping to a new api instead of diggin into an workaround implementation of an old api silently calling a new API.&lt;/p&gt;
</comment>
                    <comment id="12795052" author="rcmuir" created="Tue, 29 Dec 2009 13:54:40 +0000"  >&lt;blockquote&gt;
&lt;p&gt;1. If a user calls super.isTokenChar(char) and the super class has implemented the int method the UOE will never be thrown and the code does not behave like &quot;expected&quot; from the user perspective. - This is what robert explained above. We could solve this problem with reflection which leads to the second problem.&lt;/p&gt;

&lt;p&gt;2. If a Tokenizer like LowerCaseTokenizer only overrides normalize(char|int) it relies on the superclass implementation of isTokenChar. Yet if we solve problem 1. the user would be forced to override the isTokenChar to just call super.isTokenChar otherwise the reflection code will raise an exception that the int method is not implemented in the concrete class or will use the char API - anyway it will not do what is expected. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;i do not think this is true, what i was trying to do was modify the design i proposed so that we did not need reflection at all: but i think this is impossible. &lt;/p&gt;

&lt;p&gt;in the design you propose under the new api, subclassing is impossible, which I am not sure I like either.&lt;/p&gt;

&lt;p&gt;#2 is no problem at all, instead the reflection code to address #1 must be implemented with these conditions &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A is the class implementing method isTokenChar(int)&lt;/li&gt;
	&lt;li&gt;B is the class implementing method isTokenChar(char)&lt;/li&gt;
	&lt;li&gt;B is a subclass of A&lt;/li&gt;
	&lt;li&gt;A is not CharTokenizer&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12795091" author="simonw" created="Tue, 29 Dec 2009 18:03:58 +0000"  >&lt;blockquote&gt;
&lt;p&gt;#2 is no problem at all, instead the reflection code to address #1 must be implemented with these conditions&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A is the class implementing method isTokenChar(int)&lt;/li&gt;
	&lt;li&gt;B is the class implementing method isTokenChar(char)&lt;/li&gt;
	&lt;li&gt;B is a subclass of A&lt;/li&gt;
	&lt;li&gt;A is not CharTokenizer&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;ok here is a scenario:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class MySmartDeseretTokenizer &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; LetterTokenizer {
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isTokenChar(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; c) {
    &lt;span class=&quot;code-comment&quot;&gt;// we trust that DeseretHighLow surrogates are never unpaired
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.isTokenChar(c) || isDeseretHighLowSurrogate(c);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; nomalize(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; c) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(isDeseretHighSurrogate(c))
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; c;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(isDeseretLowSurrogate(c))
     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; lowerCaseDeseret(&apos;\ud801&apos;, c)[1];
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toLowercase(c);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; normalize(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; c) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toLowerCase(c);
  }
}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if somebody has similar code like this they might want to preserve compat because they have different versions of their app. Yet the old app only supports deseret high surrogates but the new one accepts all letter supplementary chars due to super.isTokenChar(int). This scenario will break our reflection solution and users might be disappointed though as the new api is there to bring the unicode support. I don&apos;t say this scenario exists but it could be a valid one for a very special usecase. &lt;/p&gt;

&lt;p&gt;I don&apos;t say my proposal is THE way to go but I really don&apos;t want to use reflection - this would make things worse IMO. &lt;br/&gt;
Lets find a solution that fits to all scenarios.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in the design you propose under the new api, subclassing is impossible, which I am not sure I like either.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, that is not true. You can still subclass and pass your impl up to the superclass. I haven&apos;t implemented that yet but this is def. possible.&lt;/p&gt;</comment>
                    <comment id="12795235" author="rcmuir" created="Wed, 30 Dec 2009 04:58:10 +0000"  >&lt;p&gt;Simon, I don&apos;t think your example is a problem.&lt;/p&gt;

&lt;p&gt;I am proposing my original design, with no reflection, driven by Version only.&lt;/p&gt;

&lt;p&gt;There is only one exception where reflection is used... that is during ctor to determine if:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;you subclass a tokenizer that implements int-based methods&lt;/li&gt;
	&lt;li&gt;you have only implemented char-based methods&lt;/li&gt;
	&lt;li&gt;you request VERSION &amp;gt;= 3.1&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;in this case, the reflection is only used in the ctor to throw UOE!&lt;/p&gt;

&lt;p&gt;if someone wants to support VERSION 3.1 in their app, they simply implement the int-based methods.&lt;br/&gt;
to support lower versions, they do nothing, they do not need to implement char-based methods, they get the backwards compat automatically, as long as they supply the correct version. this is guaranteed by CharacterUtils.&lt;/p&gt;

&lt;p&gt;I am only proposing using reflection to enforce the throwing of UOE, in the case that someone requests VERSION 3.1, but has not implemented int.&lt;/p&gt;

&lt;p&gt;if they want to support Version &amp;lt;= 3.1, this is fine, it will work with their char-based stuff automatically.&lt;/p&gt;

&lt;p&gt;I think it would be easiest if i modified your patch to illustrate this, so i&apos;ll do it in a few days.&lt;/p&gt;</comment>
                    <comment id="12795974" author="simonw" created="Sun, 3 Jan 2010 14:10:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;This issue is blocked by: ...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I give up... &lt;/p&gt;</comment>
                    <comment id="12795975" author="thetaphi" created="Sun, 3 Jan 2010 14:33:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;I give up... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hehe &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12796026" author="thetaphi" created="Sun, 3 Jan 2010 21:03:07 +0000"  >&lt;p&gt;this linkage is less hard.&lt;/p&gt;</comment>
                    <comment id="12796027" author="thetaphi" created="Sun, 3 Jan 2010 21:15:53 +0000"  >&lt;blockquote&gt;
&lt;p&gt;There is only one exception where reflection is used... that is during ctor to determine if:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;you subclass a tokenizer that implements int-based methods&lt;/li&gt;
	&lt;li&gt;you have only implemented char-based methods&lt;/li&gt;
	&lt;li&gt;you request VERSION &amp;gt;= 3.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;With &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2188&quot; title=&quot;A handy utility class for tracking deprecated overridden methods&quot;&gt;&lt;del&gt;LUCENE-2188&lt;/del&gt;&lt;/a&gt;, this is easy and no performance problem. Just define two static final fields for both char-based methods and check in the ctor if this.getClass() overrides the char-based method. In this case throw UOE. The result is cached for the class and further instantiations of the same class will not use reflection anymore:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; VirtualMethod&amp;lt;CharTokenizer&amp;gt; isTokenCharMethod =
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; VirtualMethod&amp;lt;CharTokenizer&amp;gt;(CharTokenizer.class, &lt;span class=&quot;code-quote&quot;&gt;&quot;isTokenChar&quot;&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;.class);
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; VirtualMethod&amp;lt;CharTokenizer&amp;gt; normalizeMethod =
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; VirtualMethod&amp;lt;CharTokenizer&amp;gt;(CharTokenizer.class, &lt;span class=&quot;code-quote&quot;&gt;&quot;normalize&quot;&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;.class);
...
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CharTokenizer(...) {
  &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(...)
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (matchVersion.onOrAfter(Version.LUCENE_31) &amp;amp;&amp;amp; (
   isTokenCharMethod.isOverriddenAsOf(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass()) || normalizeMethod.isOverriddenAsOf(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass())
  ) &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IAE(&lt;span class=&quot;code-quote&quot;&gt;&quot;For matchVersion &amp;gt;= LUCENE_31, CharTokenizer subclasses must not override isTokenChar(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;) or normalize(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;).&quot;&lt;/span&gt;):
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12800909" author="simonw" created="Fri, 15 Jan 2010 21:00:24 +0000"  >&lt;p&gt;I updated the patch to make use of the nice reflection utils and ported all subclasses of CharTokenizer to the int based API.&lt;br/&gt;
Due to the addition of Version to CharTokenizer ctors this patch creates a lot of usage of deprecated API.&lt;br/&gt;
Yet, I haven&apos;t changed all the usage of the deprecated ctors, this should be done in another issue IMO.&lt;/p&gt;</comment>
                    <comment id="12800939" author="thetaphi" created="Fri, 15 Jan 2010 22:04:53 +0000"  >&lt;p&gt;Have not looked detailed into it yet, but it looks correct. I am not sure about the overhead of passing each char through the proxy class. My idea would be to declare CharFunction as a private interface and let CharTokenizer implement it (invisible to the outside, so it can be removed in later versions). The ctor then passes &quot;this&quot; as CharFunction if &amp;gt;=3.1 and a new proxy instance of the interface for the deprecated case. By this at least the new stuff does not have extra method calls.&lt;/p&gt;

&lt;p&gt;The VirtualMethod stuff looks ok, thanks for using it as suggested here! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12800986" author="simonw" created="Fri, 15 Jan 2010 23:04:47 +0000"  >&lt;p&gt;Uwe, using an interface doesn&apos;t work though as I can not reduce the public visibility in CharTokeinzer. Yet, this patch tries to solve it with an abstract class.&lt;br/&gt;
To be honest I would rather say we duplicate the code and use a simple boolean switch in incrementToken. Not that nice but def. faster.&lt;/p&gt;

&lt;p&gt;what do you think?&lt;/p&gt;</comment>
                    <comment id="12801027" author="thetaphi" created="Sat, 16 Jan 2010 00:25:41 +0000"  >&lt;p&gt;+1, because this is very speed-sensitive.&lt;/p&gt;</comment>
                    <comment id="12801070" author="simonw" created="Sat, 16 Jan 2010 02:10:45 +0000"  >&lt;p&gt;This version &quot;duplicates&quot; the incrementToken method to prevent any unnecessary method call inside the loop. &lt;br/&gt;
I also use the Character static methods directly where possible without the CharacterUtils indirection. &lt;/p&gt;

</comment>
                    <comment id="12805508" author="simonw" created="Wed, 27 Jan 2010 13:53:37 +0000"  >&lt;p&gt;Short update: I found a bug in the latest version which was untested I will update soon with a speed comparison between the current version and the version using the proxy class.&lt;/p&gt;</comment>
                    <comment id="12805908" author="simonw" created="Thu, 28 Jan 2010 13:08:47 +0000"  >&lt;p&gt;Added CHANGES.TXT entry and fixed 2 supplementary chars related bugs in the new version of incrementToken(). Testcases added for the bugs.&lt;/p&gt;</comment>
                    <comment id="12805909" author="simonw" created="Thu, 28 Jan 2010 13:14:39 +0000"  >&lt;p&gt;I did run following benchmark alg file against the latest patch (specialized old and new methods), the patch with the proxy methods and the old 3.0 code. The outcome shows that the specialized code is about ~8% faster than the proxy class based code so I would rather keep the specialized code as this class is performance sensitive though&lt;/p&gt;

&lt;p&gt;.alg file&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
analyzer=org.apache.lucene.analysis.WhitespaceAnalyzer
content.source=org.apache.lucene.benchmark.byTask.feeds.ReutersContentSource
content.source.forever=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;Rounds&quot;&lt;/span&gt; { &lt;span class=&quot;code-quote&quot;&gt;&quot;ReadTokens&quot;&lt;/span&gt; ReadTokens &amp;gt; : *  NewRound ResetSystemErase} : 10
RepAll
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10 Rounds with the latest patch&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     [java] ------------&amp;gt; Report All (11 out of 12)
     [java] Operation          round   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem
     [java] Rounds_10              0        1            0         0.00       14.83     5,049,432     66,453,504
     [java] ReadTokens_Exhaust -   0 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   2.07 -  34,558,000 -   55,705,600
     [java] ReadTokens_Exhaust     1        1            0         0.00        1.40    41,865,312     60,555,264
     [java] ReadTokens_Exhaust -   2 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.22 -  34,393,904 -   63,176,704
     [java] ReadTokens_Exhaust     3        1            0         0.00        1.24    15,440,624     64,487,424
     [java] ReadTokens_Exhaust -   4 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.22 -   7,540,512 -   65,601,536
     [java] ReadTokens_Exhaust     5        1            0         0.00        1.21    50,174,760     67,239,936
     [java] ReadTokens_Exhaust -   6 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.19 -  22,202,768 -   67,174,400
     [java] ReadTokens_Exhaust     7        1            0         0.00        1.19    20,591,672     68,812,800
     [java] ReadTokens_Exhaust -   8 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.18 -  63,749,984 -   69,009,408
     [java] ReadTokens_Exhaust     9        1            0         0.00        1.19    22,331,600     68,943,872
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10 rounds with Proxy Class&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     [java] ------------&amp;gt; Report All (11 out of 12)
     [java] Operation          round   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem
     [java] Rounds_10              0        1            0         0.00       16.33     5,021,144     67,436,544
     [java] ReadTokens_Exhaust -   0 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   2.34 -  44,649,496 -   59,244,544
     [java] ReadTokens_Exhaust     1        1            0         0.00        1.53    36,681,952     61,472,768
     [java] ReadTokens_Exhaust -   2 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.37 -  13,863,688 -   64,094,208
     [java] ReadTokens_Exhaust     3        1            0         0.00        1.34    50,247,864     65,470,464
     [java] ReadTokens_Exhaust -   4 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.36 -  14,922,888 -   66,322,432
     [java] ReadTokens_Exhaust     5        1            0         0.00        1.36     5,718,296     67,371,008
     [java] ReadTokens_Exhaust -   6 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.32 -  54,583,776 -   67,502,080
     [java] ReadTokens_Exhaust     7        1            0         0.00        1.33    35,739,800     68,943,872
     [java] ReadTokens_Exhaust -   8 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.32 -  24,985,688 -   69,861,376
     [java] ReadTokens_Exhaust     9        1            0         0.00        1.29    64,138,112     69,730,304
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;10 rounds with current trunk&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     [java] ------------&amp;gt; Report All (11 out of 12)
     [java] Operation          round   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem
     [java] Rounds_10                   0        1            0         0.00       15.19     5,040,928     66,256,896
     [java] ReadTokens_Exhaust -   0 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   2.15 -  39,548,440 -   55,443,456
     [java] ReadTokens_Exhaust     1        1            0         0.00        1.43    28,088,544     60,096,512
     [java] ReadTokens_Exhaust -   2 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.27 -  16,004,088 -   61,800,448
     [java] ReadTokens_Exhaust     3        1            0         0.00        1.25    51,034,016     63,045,632
     [java] ReadTokens_Exhaust -   4 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.24 -  23,371,056 -   63,504,384
     [java] ReadTokens_Exhaust     5        1            0         0.00        1.24    12,964,368     65,208,320
     [java] ReadTokens_Exhaust -   6 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.25 -   6,598,128 -   65,601,536
     [java] ReadTokens_Exhaust     7        1            0         0.00        1.23    50,932,464     67,239,936
     [java] ReadTokens_Exhaust -   8 -  -   1 -  -  -  - 0 -  -  - 0.00 -  -   1.24 -  20,433,136 -   67,305,472
     [java] ReadTokens_Exhaust     9        1            0         0.00        1.23    63,638,552     68,812,800

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12805935" author="thetaphi" created="Thu, 28 Jan 2010 14:47:24 +0000"  >&lt;p&gt;I&apos;ll commit this, if nobody objects in a day.&lt;/p&gt;</comment>
                    <comment id="12805974" author="rcmuir" created="Thu, 28 Jan 2010 16:30:30 +0000"  >&lt;p&gt;hello, a few very minor nitpicks:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;it seems the javadoc for isTokenChar()/isTokenInt() is backwards, the int-based api refers to &apos;character&apos; but the char-based api refers to codepoint (which is wrong). perhaps it would be best to refer to all char-based methods as working on &apos;utf-16 code unit&apos; and int-based apis as &apos;codepoint&apos;.&lt;/li&gt;
	&lt;li&gt;we might want to insert a note/warning on the char-based methods, consistent with the JDK javadocs, &quot;Note this method cannot handle supplementary characters...&quot; for example, like: &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#getType%28char%29&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#getType%28char%29&lt;/a&gt; I think its important to include the link to the JDK explanation of what a supplementary character is, also. &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#supplementary&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#supplementary&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;if possible we might want to include some class-level wordage on how the whole thing works. If you implement the int-based API, you can use your class with all Lucene Versions, and bw layer will make it work correctly with old indexes. If you only stay with the char-based API, then you can only use your CharTokenizer for Version &amp;lt;= 3.0. We can also mention it is unnecessary to implement both, only the int-based api!!!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;sorry for being picky about the javadocs, trying to think of ways to prevent confusion on the user list, as i anticipate a bunch of people probably just use Version.LUCENE_CURRENT and have no idea what a supplementary character is.&lt;/p&gt;

&lt;p&gt;great work.&lt;/p&gt;</comment>
                    <comment id="12805992" author="thetaphi" created="Thu, 28 Jan 2010 17:24:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;we might want to insert a note/warning on the char-based methods, consistent with the JDK javadocs, &quot;Note this method cannot handle supplementary characters...&quot; for example, like: &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#getType%28char%29&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#getType%28char%29&lt;/a&gt; I think its important to include the link to the JDK explanation of what a supplementary character is, also. &lt;a href=&quot;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#supplementary&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Character.html#supplementary&lt;/a&gt; &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For that a link using javadoc &lt;/p&gt;
{@link Character#supplementary}
&lt;p&gt; would be good. I will fix this here, as I already have the patcxh applied and will commit it later.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if possible we might want to include some class-level wordage on how the whole thing works. If you implement the int-based API, you can use your class with all Lucene Versions, and bw layer will make it work correctly with old indexes. If you only stay with the char-based API, then you can only use your CharTokenizer for Version &amp;lt;= 3.0. We can also mention it is unnecessary to implement both, only the int-based api!!! &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;++++++1. The old TokenStream API had a check for these problems, right?&lt;/p&gt;
</comment>
                    <comment id="12806028" author="simonw" created="Thu, 28 Jan 2010 19:00:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;For that a link using javadoc {@link Character#supplementary} would be good. I will fix this here, as I already have the patcxh applied and will commit it later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Uwe I will take care of it and upload another patch. Thanks for being picky rob!&lt;/p&gt;</comment>
                    <comment id="12806029" author="thetaphi" created="Thu, 28 Jan 2010 19:01:48 +0000"  >&lt;p&gt;here other javadoc fixes&lt;/p&gt;</comment>
                    <comment id="12806098" author="simonw" created="Thu, 28 Jan 2010 21:25:40 +0000"  >&lt;p&gt;Robert / Uwe,&lt;/p&gt;

&lt;p&gt;I worked on the documentation on method and class level. I would appreciate a wording review.&lt;/p&gt;

&lt;p&gt;thanks&lt;/p&gt;</comment>
                    <comment id="12806105" author="rcmuir" created="Thu, 28 Jan 2010 21:36:53 +0000"  >&lt;p&gt;hello simon, thanks for adding this additional wording.&lt;/p&gt;</comment>
                    <comment id="12806143" author="thetaphi" created="Thu, 28 Jan 2010 22:58:11 +0000"  >&lt;p&gt;OK, will commit that tomorrow. Thanks Simon &amp;amp; Robert!&lt;/p&gt;</comment>
                    <comment id="12806267" author="thetaphi" created="Fri, 29 Jan 2010 07:45:55 +0000"  >&lt;p&gt;Committed revision: 904401&lt;br/&gt;
Thanks Simon!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                                <inwardlinks description="is part of">
                            <issuelink>
            <issuekey id="12427774">LUCENE-1689</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12447053">LUCENE-2240</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12444526">LUCENE-2188</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12431702" name="LUCENE-2183.patch" size="66312" author="simonw" created="Thu, 28 Jan 2010 21:25:39 +0000" />
                    <attachment id="12431691" name="LUCENE-2183.patch" size="63835" author="thetaphi" created="Thu, 28 Jan 2010 19:01:48 +0000" />
                    <attachment id="12431664" name="LUCENE-2183.patch" size="61780" author="simonw" created="Thu, 28 Jan 2010 13:08:47 +0000" />
                    <attachment id="12430477" name="LUCENE-2183.patch" size="59174" author="simonw" created="Sat, 16 Jan 2010 02:10:45 +0000" />
                    <attachment id="12430455" name="LUCENE-2183.patch" size="59768" author="simonw" created="Fri, 15 Jan 2010 23:04:47 +0000" />
                    <attachment id="12430438" name="LUCENE-2183.patch" size="59264" author="simonw" created="Fri, 15 Jan 2010 21:00:24 +0000" />
                    <attachment id="12429019" name="LUCENE-2183.patch" size="25745" author="simonw" created="Mon, 28 Dec 2009 17:30:28 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 28 Dec 2009 18:08:56 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11603</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25542</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>