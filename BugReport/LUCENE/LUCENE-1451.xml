<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1451/LUCENE-1451.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1451] Can&apos;t create NIOFSDirectory w/o setting a system property</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1451</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;NIOFSDirectory.getDirectory() returns a FSDirectory object&lt;/p&gt;</description>
                <environment></environment>
            <key id="12408369">LUCENE-1451</key>
            <summary>Can&apos;t create NIOFSDirectory w/o setting a system property</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Wed, 12 Nov 2008 20:24:43 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:13 +0100</updated>
                    <resolved>Fri, 14 Nov 2008 19:23:07 +0000</resolved>
                                            <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12647047" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 20:38:48 +0000"  >&lt;p&gt;The actual class used for making new instances of Directory is FSDirectory.IMPL, set via the system property &quot;org.apache.lucene.FSDirectory.class&quot;.&lt;/p&gt;

&lt;p&gt;It seems like we should make it  possible to create multiple FSDirectory implementations of different types in the same JVM.&lt;br/&gt;
The simplest workaround would be to create a&lt;br/&gt;
  protected static FSDirectory getDirectory(File file, LockFactory lockFactory, Class impl)&lt;br/&gt;
Subclasses could implement their own getDirectory calls that pass down the appropriate class.&lt;/p&gt;

&lt;p&gt;Not the most elegant solution if one were starting from scratch, but it seems like it would be completely backward compatible, while allowing NIOFSDirectory.getDirectory() to do what it looks like it should do.&lt;/p&gt;</comment>
                    <comment id="12647058" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 20:50:18 +0000"  >&lt;p&gt;Attaching untested patch implementing logic above.&lt;/p&gt;</comment>
                    <comment id="12647061" author="mikemccand" created="Wed, 12 Nov 2008 20:53:20 +0000"  >&lt;p&gt;That looks like a good approach to me.&lt;/p&gt;

&lt;p&gt;Though, should we make the new getDirectory that takes the Class directoryImpl arg public, so that external subclasses of FSDirectory could also create their own instances?&lt;/p&gt;</comment>
                    <comment id="12647065" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 21:02:16 +0000"  >&lt;p&gt;Hmmm, external subclasses should be able to call the protected getDirectory method, right?&lt;br/&gt;
But perhaps a test case for external subclasses is warranted.&lt;/p&gt;</comment>
                    <comment id="12647077" author="hossman" created="Wed, 12 Nov 2008 22:07:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;It seems like we should make it possible to create multiple FSDirectory implementations of different types in the same JVM.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As mentioned in the thread that spawned this issue...&lt;/p&gt;

&lt;p&gt;1. i&apos;m not sure i see any real motivation for this.  the biggest motivation to use an alternate impl will be OS (which is fixed for the whole JVM)&lt;br/&gt;
1. if i&apos;m reading it right, this patch won&apos;t work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and &quot;win&quot; for all future calls.&lt;/p&gt;


&lt;p&gt;that second problem can be solved in a similar way to the lockFactory check ... but like i said: this seems like a can of worms, with very little real advantage over a simple static setter.&lt;/p&gt;</comment>
                    <comment id="12647078" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 22:08:56 +0000"  >&lt;p&gt;Attaching patch with tests.&lt;/p&gt;</comment>
                    <comment id="12647085" author="mikemccand" created="Wed, 12 Nov 2008 22:21:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;1. if i&apos;m reading it right, this patch won&apos;t work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and &quot;win&quot; for all future calls.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm good point.  Actually why do we do this &apos;single instance of FSDir per File&apos; again?  Is it really needed?&lt;/p&gt;</comment>
                    <comment id="12647086" author="mikemccand" created="Wed, 12 Nov 2008 22:21:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmmm, external subclasses should be able to call the protected getDirectory method, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Woops sorry you&apos;re right.&lt;/p&gt;</comment>
                    <comment id="12647103" author="markrmiller@gmail.com" created="Wed, 12 Nov 2008 23:08:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmm good point. Actually why do we do this &apos;single instance of FSDir per File&apos; again? Is it really needed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While it might be useful sometimes, I don&apos;t see how it really is needed. I think a better solution is allowing for direct instantiation while providing a factory class if for some reason you need that behavior. Most apps I have worked with do not need it and I don&apos;t understand why its forced on you, other than a bit of overprotection.&lt;/p&gt;</comment>
                    <comment id="12647109" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 23:22:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;if i&apos;m reading it right, this patch won&apos;t work if two different callers ask for Directories backed by the same File using different directoryImpl instances ... the first one will go into the DIRECTORIES cache and &quot;win&quot; for all future calls.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right... the tests in the patch test for this too.  If an instance already exists, then it&apos;s returned.  If all the instances are closed, the desired implementation can be returned.   So it won&apos;t be for all future calls, but it would be difficult to ensure you got the implementation you wanted.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hmm good point. Actually why do we do this &apos;single instance of FSDir per File&apos; again? Is it really needed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I had assumed it was locking.... but it goes outside of the FSDirectory and operates directly on File.  So, I&apos;m not sure.&lt;/p&gt;
</comment>
                    <comment id="12647129" author="hossman" created="Thu, 13 Nov 2008 00:03:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Right... the tests in the patch test for this too. If an instance already exists, then it&apos;s returned.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Miller is probably right and we should just remove the cache anyway &amp;#8211; but if we do leave it in this still seems dangerous to me, clients aren&apos;t guaranteed to get what they ask for.&lt;/p&gt;

&lt;p&gt;Adopting the same pattern as with LockType (throw an Exception if a Directory is in the cache but doens&apos;t match the class specified) seems safer.&lt;/p&gt;</comment>
                    <comment id="12647249" author="mikemccand" created="Thu, 13 Nov 2008 10:14:51 +0000"  >&lt;p&gt;I think we should simply allow direct instantiation of NIOFSDirectory, and not map to a singular instance per-File.  But we should keep it for FSDir for back-compat.&lt;/p&gt;</comment>
                    <comment id="12647406" author="yseeley@gmail.com" created="Thu, 13 Nov 2008 21:26:36 +0000"  >&lt;p&gt;Ok, here&apos;s a version that adds public constructors, and a test that ensures that reading, writing, and locking all work concurrently in the same directory with different FSDirectory implementations.&lt;/p&gt;

&lt;p&gt;AFAIK, there&apos;s nowhere in Lucene that synchronizes on the Directory instance (where it matters), so multiple instances per path should be safe.&lt;/p&gt;</comment>
                    <comment id="12647636" author="mikemccand" created="Fri, 14 Nov 2008 15:41:48 +0000"  >&lt;p&gt;This looks good, Yonik.  Should we deprecate FSDirectory.getDirectory?&lt;/p&gt;</comment>
                    <comment id="12647638" author="yseeley@gmail.com" created="Fri, 14 Nov 2008 15:53:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we deprecate FSDirectory.getDirectory? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Perhaps... it would cut down the number of silly future errors in the form of NIOFSDirectory.getDirectory().&lt;/p&gt;</comment>
                    <comment id="12647642" author="mikemccand" created="Fri, 14 Nov 2008 15:58:34 +0000"  >&lt;p&gt;True.  And in general I don&apos;t like have more than one way to do basically the same thing.  People can always do the single-Directory-instance-per-File thing externally if they need to.&lt;/p&gt;</comment>
                    <comment id="12647644" author="yseeley@gmail.com" created="Fri, 14 Nov 2008 16:03:01 +0000"  >&lt;p&gt;When I was reviewing getDirectory() I can across a race condition anyway - could lead to handing out a closed directory.  But people would need to be opening and closing directories rapidly from multiple threads, so I&apos;m not sure if it&apos;s actually bitten anyone.&lt;/p&gt;</comment>
                    <comment id="12647645" author="yseeley@gmail.com" created="Fri, 14 Nov 2008 16:07:36 +0000"  >&lt;p&gt;Any preferences on the public constructor signature... File or String for the path?&lt;/p&gt;</comment>
                    <comment id="12647651" author="mikemccand" created="Fri, 14 Nov 2008 16:21:55 +0000"  >&lt;p&gt;I think File is fine?  But I don&apos;t have a strong preference (I can&apos;t think of any tradeoffs).&lt;/p&gt;</comment>
                    <comment id="12647703" author="yseeley@gmail.com" created="Fri, 14 Nov 2008 19:23:07 +0000"  >&lt;p&gt;Committed.  Thanks for the input guys!&lt;/p&gt;</comment>
                    <comment id="12650344" author="cutting" created="Mon, 24 Nov 2008 21:52:51 +0000"  >&lt;p&gt;A bit of history, if any care.&lt;/p&gt;

&lt;p&gt;Originally Lucene synchronized only on the Directory to coordinate index writes.  This was the primary motivation for the Directory cache.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinyurl.com/62ugs9#l120&quot; class=&quot;external-link&quot;&gt;http://tinyurl.com/62ugs9#l120&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Later, lock files were added, but Directory synchronization remained as an optimization, to avoid hitting the filesystem when coordinating threads in the same process.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tinyurl.com/5dzsyq#l125&quot; class=&quot;external-link&quot;&gt;http://tinyurl.com/5dzsyq#l125&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now Directory-based synchronization has been dropped entirely, so the Directory cache can now go too.&lt;/p&gt;

</comment>
                </comments>
                    <attachments>
                    <attachment id="12393893" name="LUCENE-1451.patch" size="6644" author="yseeley@gmail.com" created="Thu, 13 Nov 2008 21:26:36 +0000" />
                    <attachment id="12393814" name="LUCENE-1451.patch" size="6951" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 22:08:56 +0000" />
                    <attachment id="12393804" name="LUCENE-1451.patch" size="5509" author="yseeley@gmail.com" created="Wed, 12 Nov 2008 20:50:18 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 12 Nov 2008 20:53:20 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12300</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26276</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>