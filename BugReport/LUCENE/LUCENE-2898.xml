<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:30:17 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2898/LUCENE-2898.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2898] CMS merge throttling is not aggressive enough</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2898</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I hit this crab while working on the NRT benchmarker (in luceneutil).&lt;/p&gt;

&lt;p&gt;CMS today forcefully idles any incoming threads, when there are too many merges pending.&lt;/p&gt;

&lt;p&gt;This is the last line of defense that it has, since it also juggles thread priorities (and forcefully idles the biggest merges) to try to reduce the outstanding merge count.&lt;/p&gt;

&lt;p&gt;But when it cannot keep up it has no choice but to stall those threads responsible for making new segments.&lt;/p&gt;

&lt;p&gt;However, the logic is in the wrong place now &amp;#8211; the stalling happens after pulling the next merge from IW.  This is poor because it means if you have N indexing threads, you allow max + N outstanding merges.&lt;/p&gt;

&lt;p&gt;I have a simple fix, which is to just move the stall logic to before we pull the next merge from IW.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12497134">LUCENE-2898</key>
            <summary>CMS merge throttling is not aggressive enough</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sat, 29 Jan 2011 16:11:21 +0000</created>
                <updated>Wed, 30 Mar 2011 16:50:07 +0100</updated>
                    <resolved>Sat, 29 Jan 2011 17:17:54 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12988540" author="shaie" created="Sun, 30 Jan 2011 04:53:23 +0000"  >&lt;p&gt;Mike, now that you wait before you poll IW.getNextMerge, isn&apos;t there a risk CMS pulled from IW all of its merges (say 1 + maxMergeCount) but there are no more merges? So now the code will wait until one of the merges completes, before the user gets back control (since it&apos;s CMS.merge(IW) that waits)?&lt;/p&gt;</comment>
                    <comment id="12988574" author="mikemccand" created="Sun, 30 Jan 2011 12:20:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;So now the code will wait until one of the merges completes, before the user gets back control (since it&apos;s CMS.merge(IW) that waits)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, that&apos;s exactly what we want to happen, I think?&lt;/p&gt;

&lt;p&gt;Ie, that thread is in CMS because it is a thread responsible somehow for adding new segments to the index (ie, it called getReader or commit or expungeDeletes, etc.), and we are in a situation where too many merge threads are running, so we forcefully stall the incoming thread.  This is the last line of defense that CMS has to prevent over-production of segments (vs rate of consumption from merging).&lt;/p&gt;</comment>
                    <comment id="12988595" author="shaie" created="Sun, 30 Jan 2011 14:27:51 +0000"  >&lt;p&gt;So if the user allows for N max-merges in CMS, and MP returns N merges to be executed, then this is fine. If however MP returns N + 1 merges, then CMS will register N + 1 merges, and then stall? I&apos;m asking because the while() checks for mergeThreadCount() &amp;gt;= 1 + maxMergeCount.&lt;/p&gt;

&lt;p&gt;Before your changes, at most maxMergeCount merges could be registered, while now the code allows for maxMergeCount + 1? I&apos;m confused.&lt;/p&gt;

&lt;p&gt;And my question I think is stil valid - what if CMS waits for nothing - meaning after wait() finishes, IW.getNextMerge() returns null? The user thread will be blocked until then, even though no more merges are &apos;pending&apos;?&lt;/p&gt;

&lt;p&gt;Perhaps I&apos;m just confused though ... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12988614" author="mikemccand" created="Sun, 30 Jan 2011 17:26:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;If however MP returns N + 1 merges, then CMS will register N + 1 merges, and then stall?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, now I allow N+1 merges to be running, and then all incoming threads will stall.&lt;/p&gt;

&lt;p&gt;We could change that (remove the +1) but I didn&apos;t like that because then we stall app threads when exactly the max allowed number of merges are running.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Before your changes, at most maxMergeCount merges could be registered&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, before my change, maxMergeCount &lt;b&gt;plus&lt;/b&gt; the number of app threads you send into IW, could be registered.  (This was the bug &amp;#8211; that our &quot;last line of defense&quot; was vulnerable to how many app threads you send in).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And my question I think is stil valid - what if CMS waits for nothing - meaning after wait() finishes, IW.getNextMerge() returns null? The user thread will be blocked until then, even though no more merges are &apos;pending&apos;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s exactly the case I&apos;d expect to happen.  It&apos;s not &quot;for nothing&quot; &amp;#8211; it&apos;s very much to stall the thread that&apos;s responsible for causing new segments to be added.  The fact that after the stall there are likely no new merges to do is fine... the app thread runs free and then produces more segments again.&lt;/p&gt;

&lt;p&gt;Really, if we could somehow cutover to a blocking queue... where MergePolicy is the producer and MergeScheduler consumes, that&apos;d be cleaner.&lt;/p&gt;</comment>
                    <comment id="13013369" author="gsingers" created="Wed, 30 Mar 2011 16:50:07 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 30 Jan 2011 04:53:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10970</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24794</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>