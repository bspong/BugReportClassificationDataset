<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:47 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1719/LUCENE-1719.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1719] Add javadoc notes about ICUCollationKeyFilter&apos;s advantages over CollationKeyFilter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1719</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;contrib/collation&apos;s ICUCollationKeyFilter, which uses ICU4J collation, is faster than CollationKeyFilter, the JVM-provided java.text.Collator implementation in the same package.  The javadocs of these classes should be modified to add a note to this effect.&lt;/p&gt;

&lt;p&gt;My curiosity was piqued by &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1581?focusedCommentId=12720300#action_12720300&quot; class=&quot;external-link&quot;&gt;Robert Muir&apos;s comment&lt;/a&gt; on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1581&quot; title=&quot;LowerCaseFilter should be able to be configured to use a specific locale.&quot;&gt;&lt;del&gt;LUCENE-1581&lt;/del&gt;&lt;/a&gt;, in which he states that ICUCollationKeyFilter is up to 30x faster than CollationKeyFilter.&lt;/p&gt;

&lt;p&gt;I timed the operation of these two classes, with Sun JVM versions 1.4.2/32-bit, 1.5.0/32- and 64-bit, and 1.6.0/64-bit, using 90k word lists of 4 languages (taken from the corresponding Debian wordlist packages and truncated to the first 90k words after a fixed random shuffling), using Collators at the default strength, on a Windows Vista 64-bit machine.  I used an analysis pipeline consisting of WhitespaceTokenizer chained to the collation key filter, so to isolate the time taken by the collation key filters, I also timed WhitespaceTokenizer operating alone for each combination.  The rightmost column represents the performance advantage of the ICU4J implemtation (ICU) over the java.text.Collator implementation (JVM), after discounting the WhitespaceTokenizer time (WST): (JVM-ICU) / (ICU-WST). The best times out of 5 runs for each combination, in milliseconds, are as follows:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Sun JVM&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Language&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;java.text&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;ICU4J&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;WhitespaceTokenizer&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;ICU4J Improvement&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.4.2_17 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;English&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;522&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;212&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;156%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.4.2_17 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;French&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;716&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;243&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;207%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.4.2_17 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;German&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;669&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;264&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;163%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.4.2_17 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Ukranian&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;931&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;474&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;102%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;English&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;604&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;176&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;268%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;French&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;817&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;209&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;317%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;German&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;799&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;225&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;280%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (32 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Ukranian&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1029&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;436&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;26&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;145%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;English&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;431&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;89&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;433%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;French&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;562&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;112&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;446%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;German&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;567&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;116&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;13&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;438%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.5.0_15 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Ukranian&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;734&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;281&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;174%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.6.0_13 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;English&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;162&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;81&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;113%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.6.0_13 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;French&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;192&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;92&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;122%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.6.0_13 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;German&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;204&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;124%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.6.0_13 (64 bit)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Ukranian&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;273&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;202&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</description>
                <environment></environment>
            <key id="12429040">LUCENE-1719</key>
            <summary>Add javadoc notes about ICUCollationKeyFilter&apos;s advantages over CollationKeyFilter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="steve_rowe">Steve Rowe</reporter>
                        <labels>
                    </labels>
                <created>Sun, 28 Jun 2009 05:48:11 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:28 +0100</updated>
                    <resolved>Wed, 1 Jul 2009 17:52:11 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12724922" author="steve_rowe" created="Sun, 28 Jun 2009 05:51:57 +0100"  >&lt;p&gt;Patch containing notes to add to collation key filter/analyzer classes&apos; javadocs.&lt;/p&gt;</comment>
                    <comment id="12724923" author="steve_rowe" created="Sun, 28 Jun 2009 06:05:03 +0100"  >&lt;p&gt;I also tested ICU4J version 4.2 (released 6 weeks ago), and the timings were nearly identical to those from ICU4J version 4.0 (the one that&apos;s in contrib/collation/lib/).&lt;/p&gt;

&lt;p&gt;The timings given in the table above were not produced with the &quot;-server&quot; option to the JVM.  I separately tested all combinations using the &quot;-server&quot; option, but there was no difference for the 32-bit JVMs, though roughly 3-4% faster for the 64-bit JVMs.  I got the impression (didn&apos;t actually calculate) that although the best times of 5 runs were better for the 64-bit JVMs when using the &quot;-server&quot; option, the average times seemed to be slightly worse.  In any case, the performance improvement of the ICU4J implementation over the java.text.Collator implementation was basically unaffected by the use of the &quot;-server&quot; JVM option.&lt;/p&gt;</comment>
                    <comment id="12724941" author="rcmuir" created="Sun, 28 Jun 2009 12:08:12 +0100"  >&lt;p&gt;steven, you are correct. &lt;/p&gt;

&lt;p&gt;i should have clarified, the gain is not as much when generating keys. but there is still huge gains for runtime comparison. see recent numbers here for a few languages:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://site.icu-project.org/charts/collation-icu4j-sun&quot; class=&quot;external-link&quot;&gt;http://site.icu-project.org/charts/collation-icu4j-sun&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but you should also mention that key size is smaller too!  (smaller term dictionary)&lt;/p&gt;</comment>
                    <comment id="12724974" author="steve_rowe" created="Sun, 28 Jun 2009 18:35:10 +0100"  >&lt;p&gt;Cool! Thanks for the link, Robert.&lt;/p&gt;

&lt;p&gt;Key comparison under Lucene when using *CollationKeyAnalyzer will utilize neither ICU4J&apos;s nor the java.text incremental collation facilities - the base-8000h-String-encoded raw collation keys will be directly compared (and sorted) as Strings.  So key generation time and, as you point out, key length are the appropriate measures here.&lt;/p&gt;

&lt;p&gt;I&apos;ll post a patch shortly that includes your ICU4J link, and mentions the key length aspect as well.  I&apos;ll also remove specific numbers from the javadoc notes - people can follow the ICU4J link if they&apos;re interested.&lt;/p&gt;</comment>
                    <comment id="12724978" author="steve_rowe" created="Sun, 28 Jun 2009 19:13:20 +0100"  >&lt;p&gt;Edited title to reflect addition of key length concerns, and switched performance improvement column to be percentage improvements rather than multipliers.&lt;/p&gt;</comment>
                    <comment id="12724986" author="rcmuir" created="Sun, 28 Jun 2009 20:28:28 +0100"  >&lt;p&gt;steven, no thank you for running the calculations!&lt;/p&gt;

&lt;p&gt;yeah i think the sort key length is worth mentioning. in practice i wonder how much it helps lucene at runtime, maybe for things like SORT at least it would improve runtime performance by some small amount.&lt;/p&gt;</comment>
                    <comment id="12724996" author="rcmuir" created="Sun, 28 Jun 2009 21:53:27 +0100"  >&lt;p&gt;steven, another note i thought i would mention.&lt;/p&gt;

&lt;p&gt;along these same lines i searched lucene source code for java.text.Collator and found some uses of it (the incremental facility). I wonder if in the future we could find a way to allow usage of com.ibm.icu.text.Collator in these spots.&lt;/p&gt;

&lt;p&gt;this could give some healthy performance improvements. I found it in:&lt;/p&gt;

&lt;p&gt;QueryParser (for localized RangeQuery)&lt;br/&gt;
RangeQuery/RangeFilter/RangeTermEnum/ConstantScoreRangeQuery&lt;br/&gt;
FieldComparator/FieldSortedHitQueue/FieldDocSortedHitQueue&lt;/p&gt;
</comment>
                    <comment id="12725023" author="steve_rowe" created="Mon, 29 Jun 2009 04:55:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; i searched lucene source code for java.text.Collator and found some uses of it (the incremental facility). I wonder if in the future we could find a way to allow usage of com.ibm.icu.text.Collator in these spots.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I guess the way to go would be to make the implementation pluggable.&lt;/p&gt;</comment>
                    <comment id="12725024" author="steve_rowe" created="Mon, 29 Jun 2009 04:57:44 +0100"  >&lt;p&gt;Updated patch including information about ICU4J&apos;s shorter key length; adding a link to the ICU4J documentation&apos;s comparison of ICU4J and java.text.Collator key generation time and key length; and removing specific performance numbers.&lt;/p&gt;</comment>
                    <comment id="12725648" author="simonw" created="Tue, 30 Jun 2009 15:37:59 +0100"  >&lt;p&gt;Steven, patch looks good to me. I will look at it again in a day or two.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12726129" author="simonw" created="Wed, 1 Jul 2009 17:52:11 +0100"  >&lt;p&gt;I committed your patch and removed the last &quot;NB:&quot; in the ICUCollationKeyFilter.java for consistency.&lt;/p&gt;

&lt;p&gt;Thanks Steven!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12412036" name="LUCENE-1719.patch" size="5334" author="steve_rowe" created="Mon, 29 Jun 2009 04:57:44 +0100" />
                    <attachment id="12412009" name="LUCENE-1719.patch" size="4488" author="steve_rowe" created="Sun, 28 Jun 2009 05:51:57 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 28 Jun 2009 11:08:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12040</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26007</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>