<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:33:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3439/LUCENE-3439.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3439] add checks/asserts if you search across a closed reader</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3439</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;if you try to search across a closed reader (and/or searcher too),&lt;br/&gt;
there are no checks, not even assertions statements.&lt;/p&gt;

&lt;p&gt;this results in crazy scary stacktraces deep inside places like FSTs/various term dictionary implementations etc.&lt;/p&gt;

&lt;p&gt;In some situations, depending on codec, you wont even get an error (i&apos;m sure its fun when you try to retrieve the stored fields!)&lt;/p&gt;</description>
                <environment></environment>
            <key id="12523238">LUCENE-3439</key>
            <summary>add checks/asserts if you search across a closed reader</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Thu, 15 Sep 2011 20:56:31 +0100</created>
                <updated>Sun, 27 Nov 2011 12:29:26 +0000</updated>
                    <resolved>Wed, 21 Sep 2011 17:13:15 +0100</resolved>
                                            <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13105663" author="mikemccand" created="Thu, 15 Sep 2011 21:25:59 +0100"  >&lt;p&gt;I think we should add real checks here, w/ volatile isOpen/isClosed bool, up and down the stack, to those methods where the volatile read cost will be tiny compared to the cost of the method or of the app using the returned result.&lt;/p&gt;

&lt;p&gt;IR/IW already try to do this (hmm: though not volatile for IW) but it sounds like we are missing checks inside the codecs?&lt;/p&gt;</comment>
                    <comment id="13105665" author="rcmuir" created="Thu, 15 Sep 2011 21:28:52 +0100"  >&lt;blockquote&gt;
&lt;p&gt;IR/IW already try to do this&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so? I&apos;ll attach a patch with a trivial test basically demonstrating what I was seeing.&lt;/p&gt;

&lt;p&gt;It sometimes passes!!!!!&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  public void test() throws Exception {
    TermRangeQuery query = TermRangeQuery.newStringRange(&quot;field&quot;, &quot;a&quot;, &quot;z&quot;, true, true);
    searcher.search(query, 5);
    searcher.close();
    reader.close();
    searcher.search(query, 5); // are you serious? 
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13105685" author="yseeley@gmail.com" created="Thu, 15 Sep 2011 22:06:53 +0100"  >&lt;p&gt;I think the open/closed checks should still be non-volatile.&lt;br/&gt;
While a volatile read on (current) x86 is a no-op, it still imposes a happens-before/after restriction via the memory model and hence prevents optimizations across that volatile read.  Volatile reads may not always be a no-op on x86 either (and they already aren&apos;t on other CPUs).&lt;/p&gt;

&lt;p&gt;Using a volatile also doesn&apos;t buy us much either - it&apos;s still best-effort (the close could come after we have checked the volatile, but before we have done the read).  We have enough volatile/synchronized reads in other places that a non-volatile check will suffice to catch bugs (and we shouldn&apos;t penalize correct programs).&lt;/p&gt;</comment>
                    <comment id="13106738" author="mikemccand" created="Fri, 16 Sep 2011 20:24:17 +0100"  >
&lt;blockquote&gt;&lt;p&gt;and we shouldn&apos;t penalize correct programs&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree we should keep the added cost for correct programs to a&lt;br/&gt;
minimum, but there are many good reasons why we should try to throw&lt;br/&gt;
AlreadyClosedException instead of something scary like NPE or&lt;br/&gt;
EOFException, etc.:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Better usability &amp;#8211; when you make a simple mistake (IW/IR.close in&lt;br/&gt;
    the wrong place) you get a clear indication what&apos;s wrong, and that&lt;br/&gt;
    saves you time/frustration/hair/iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Earlier error detection: lower risk that an app will push to&lt;br/&gt;
    production without catching that IW/IR.close is wrong.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Save Lucene devs time: when users come to the list w/ a cryptic&lt;br/&gt;
    exception that after a few back &amp;amp; forths we discover was an errant&lt;br/&gt;
    IW/IR.close, that uses up lots of people&apos;s time, time that instead&lt;br/&gt;
    could be spent towards improving Lucene/Solr instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Protect Lucene&apos;s perceived quality: like it or not, Lucene (not&lt;br/&gt;
    the app) will sometimes be blamed when a user hits a cryptic&lt;br/&gt;
    exception because of an errant IW/IR.close.  Blog posts will go&lt;br/&gt;
    up, tweets will get tweeted, emails to list or to other lists will&lt;br/&gt;
    go unanswered, people doing future Googling will hit these and&lt;br/&gt;
    see Lucene as buggy.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;We can find our own bugs &amp;#8211; in adding some missing ensureOpens to&lt;br/&gt;
    IW, here, I discovered a case where DirectoryReader.close calls&lt;br/&gt;
    IW.deleteUnusedFiles after IW was closed, and this invokes the&lt;br/&gt;
    DelPolicy, which is definitely dangerous.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Net/net I think it&apos;s important that we try, when possible/reasonable,&lt;br/&gt;
to have clear error detection and reporting, making it as easy as we&lt;br/&gt;
can for the user to understand what&apos;s wrong.  And if that means a&lt;br/&gt;
miniscule extra cost to &quot;correct&quot; users, that&apos;s a fair tradeoff.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;While a volatile read on (current) x86 is a no-op, it still imposes a happens-before/after restriction via the memory model and hence prevents optimizations across that volatile read. Volatile reads may not always be a no-op on x86 either (and they already aren&apos;t on other CPUs).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The thing is, we already call ensureOpen only in places where the&lt;br/&gt;
added cost should be vanishingly small compared to what will follow;&lt;br/&gt;
it&apos;ll still be vanishingly small as a volatile.&lt;/p&gt;

&lt;p&gt;Actually, IR&apos;s ensureOpen checks the refCount (AtomicLong)&lt;br/&gt;
so we are already &quot;effectively&quot; volatile for IR, just not for IW.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Using a volatile also doesn&apos;t buy us much either - it&apos;s still best-effort (the close could come after we have checked the volatile, but before we have done the read).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right this will always be a best effort check, but if we can do a&lt;br/&gt;
&quot;better&quot; best effort, while still having no real added cost, I think&lt;br/&gt;
we should improve.&lt;/p&gt;

&lt;p&gt;I&apos;m not saying we should add ensureOpen() in hotspots.  But I do think&lt;br/&gt;
we should make IW&apos;s closed boolean volatile.  The added cost will&lt;br/&gt;
still be tiny, since we only call ensureOpen where it shouldn&apos;t&lt;br/&gt;
matter, and it may allow us to throw ACE instead of a cryptic&lt;br/&gt;
exception in some cases.&lt;/p&gt;</comment>
                    <comment id="13107895" author="mikemccand" created="Mon, 19 Sep 2011 16:16:22 +0100"  >&lt;p&gt;Patch, adding missing ensureOpens, adding volatile to IW&apos;s close/closing bools, and fixing the scary bug where we invoke del policy (and possibly delete file) on a closed writer.&lt;/p&gt;</comment>
                    <comment id="13157756" author="thetaphi" created="Sun, 27 Nov 2011 12:29:26 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12495086" name="LUCENE-3439.patch" size="20116" author="mikemccand" created="Mon, 19 Sep 2011 16:16:22 +0100" />
                    <attachment id="12494689" name="LUCENE-3439_test.patch" size="2564" author="rcmuir" created="Thu, 15 Sep 2011 21:29:25 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 15 Sep 2011 20:25:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2682</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24257</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>