<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:23 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3381/LUCENE-3381.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3381] Sandbox remaining contrib queries</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3381</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3271&quot; title=&quot;Move &amp;#39;good&amp;#39; contrib/queries classes to Queries module&quot;&gt;&lt;del&gt;LUCENE-3271&lt;/del&gt;&lt;/a&gt;, I moved the &apos;good&apos; queries from the queries contrib to new destinations (primarily the queries module).  The remnants now need to find their home.  As suggested in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3271&quot; title=&quot;Move &amp;#39;good&amp;#39; contrib/queries classes to Queries module&quot;&gt;&lt;del&gt;LUCENE-3271&lt;/del&gt;&lt;/a&gt;, these classes are not bad per se, just odd.  So lets create a sandbox contrib that they and other &apos;odd&apos; contrib classes can go to.  We can then decide their fate at another time.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12519255">LUCENE-3381</key>
            <summary>Sandbox remaining contrib queries</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="cmale">Chris Male</assignee>
                                <reporter username="cmale">Chris Male</reporter>
                        <labels>
                    </labels>
                <created>Thu, 18 Aug 2011 09:18:17 +0100</created>
                <updated>Fri, 10 May 2013 11:44:12 +0100</updated>
                    <resolved>Sat, 20 Aug 2011 05:58:31 +0100</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13086874" author="cmale" created="Thu, 18 Aug 2011 09:20:39 +0100"  >&lt;p&gt;Patch which does the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Establishes a sandbox contrib&lt;/li&gt;
	&lt;li&gt;Moves the queries from the queries contrib to the sandbox.  FuzzyLikeThisQuery has grown on me so I&apos;ve given it a clean and pushed it to the queries module.&lt;/li&gt;
	&lt;li&gt;Removes the queries contrib&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13086875" author="cmale" created="Thu, 18 Aug 2011 09:21:22 +0100"  >&lt;p&gt;Command for patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
svn move lucene/contrib/queries/src/java/org/apache/lucene/search/FuzzyLikeThisQuery.java modules/queries/src/java/org/apache/lucene/queries/FuzzyLikeThisQuery.java
svn move lucene/contrib/queries/src/test/org/apache/lucene/search/FuzzyLikeThisQueryTest.java modules/queries/src/test/org/apache/lucene/queries/FuzzyLikeThisQueryTest.java
svn move --parents lucene/contrib/queries/src/java/org/apache/lucene/search/* lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/
svn move --parents lucene/contrib/queries/lib/* lucene/contrib/sandbox/lib/
svn move --parents lucene/contrib/queries/src/test/org/apache/lucene/search/*  lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/
svn delete dev-tools/idea/lucene/contrib/queries
svn delete dev-tools/maven/lucene/contrib/queries
svn delete lucene/contrib/queries
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13086897" author="markh" created="Thu, 18 Aug 2011 09:55:44 +0100"  >&lt;blockquote&gt;&lt;p&gt;FuzzyLikeThisQuery has grown on me so I&apos;ve given it a clean and pushed it to the queries module&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have thousands of people using it daily in dozens of different installations so keen to avoid any significant changes/loss.&lt;/p&gt;</comment>
                    <comment id="13086899" author="rcmuir" created="Thu, 18 Aug 2011 10:00:44 +0100"  >&lt;p&gt;But this query has serious problems:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the fact it caches &apos;rewrittenQuery&apos; in the &lt;b&gt;QUERY&lt;/b&gt; itself, this means the Query is keeping IndexSearcher-dependent state in the Query: this is broken.&lt;/li&gt;
	&lt;li&gt;the static similarity, which at the moment must extend TFIDFSimilarity (does not work with other scoring systems)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sorry, I think these problems should be fixed first!&lt;/p&gt;</comment>
                    <comment id="13086908" author="cmale" created="Thu, 18 Aug 2011 10:14:33 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I have thousands of people using it daily in dozens of different installations so keen to avoid any significant changes/loss.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have no intention of removing it but as Robert has pointed out in a couple of issues there is huge scope for improvement which we cannot ignore.  I&apos;ll make sure to document any changes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the fact it caches &apos;rewrittenQuery&apos; in the QUERY itself, this means the Query is keeping IndexSearcher-dependent state in the Query: this is broken.&lt;/li&gt;
	&lt;li&gt;the static similarity, which at the moment must extend TFIDFSimilarity (does not work with other scoring systems)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good points.  The cached rewrittenQuery seems like an easy fix (albeit a change that should be documented).  I see your comments in code about averaging out statistics.  That seems like a bigger issue.  Moving away from a static similarity seems like its doable at this stage.  Is the agnostic scoring model support a showstopper?&lt;/p&gt;</comment>
                    <comment id="13086909" author="rcmuir" created="Thu, 18 Aug 2011 10:21:55 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Good points. The cached rewrittenQuery seems like an easy fix (albeit a change that should be documented).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well its a bug? We document that you can safely reuse Query, so if a system like Solr or ElasticSearch that caches queries caches this query, this stuff won&apos;t function correctly?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is the agnostic scoring model support a showstopper?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, in my opinion it is, we have to think this through.&lt;/p&gt;</comment>
                    <comment id="13086914" author="cmale" created="Thu, 18 Aug 2011 10:36:21 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Well its a bug? We document that you can safely reuse Query, so if a system like Solr or ElasticSearch that caches queries caches this query, this stuff won&apos;t function correctly?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes its a bug in that it doesn&apos;t conform to Query&apos;s requirements, but its a change in behaviour for this particular Query impl.  I&apos;m happy to document the change under the bugs section in CHANGES.txt so we cover both bases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, in my opinion it is, we have to think this through.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To sandbox it goes!&lt;/p&gt;

</comment>
                    <comment id="13086915" author="markh" created="Thu, 18 Aug 2011 10:42:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;Sorry, I think these problems should be fixed first!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I acknowledge those are issues to be addressed for more general use and (luckily) do not affect my existing usage of this class. I expect the query-caching issue can be fixed relatively simply. The scoring system issue gets interesting because this fuzzy functionality relies on tweaking IDF in particular. To work across different scoring systems generically I expect IDF-tweakage would need to be made a pluggable aspect of all these scoring strategies e.g. through a common interface. Messy.&lt;/p&gt;

&lt;p&gt;The point of my previous comment was to register that this was one of the queries languishing outside of core that was genuinely in active use. I imagined this would be  useful information if folks are in the process of cleaning out some of the &quot;dead wood&quot; (including relegation to a &quot;useless-but-stored-for-historical-purposes&quot; pile).  &lt;/p&gt;</comment>
                    <comment id="13086920" author="rcmuir" created="Thu, 18 Aug 2011 10:52:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;To work across different scoring systems generically I expect IDF-tweakage would need to be made a pluggable aspect of all these scoring strategies e.g. through a common interface. Messy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think think we need to do that?&lt;br/&gt;
I added a comment to the source code:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    // TODO: generalize this query (at least it should not reuse this static sim!
    // a better way might be to convert this into multitermquery rewrite methods.
    // the rewrite method can &apos;average&apos; the TermContext&apos;s term statistics (docfreq,totalTermFreq) 
    // provided to TermQuery, so that the general idea is agnostic to any scoring system...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think this is really that hard, nor messy? &lt;br/&gt;
Then this Query just invokes rewrite() to a BooleanQuery of ordinary fuzzyqueries, setting its custom rewrite methods (it looks like we need to implement 2 here, depending upon configuration) on each.&lt;/p&gt;

&lt;p&gt;The rewrite methods would average docfreq and totaltermfreq (the only two &quot;collection-wide&quot; term statistics lucene supports), and set these in the TermContexts that they pass to TermQuery. Then the concept works for all scoring systems.&lt;/p&gt;

&lt;p&gt;As a side benefit, this would give some performance benefits anyway since by doing this, the term rewrite will become single pass instead of doing wasted seeks per-segment * per-term.&lt;/p&gt;</comment>
                    <comment id="13086936" author="markh" created="Thu, 18 Aug 2011 11:31:59 +0100"  >&lt;p&gt;It&apos;s more nuanced than averaging IDF of variants (as discussed at length in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-329&quot; title=&quot;Fuzzy query scoring issues&quot;&gt;&lt;del&gt;LUCENE-329&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
To summarise: the original search term is the closest thing we have to the user&apos;s intent. If we average its IDF against all fuzzy variants it is most likely to dilute this value with a set of rare terms (most terms in the termEnum are e.g. typos) that happen to share some characters.&lt;br/&gt;
When sitting this sort of expanded fuzzy query alongside other search terms in a BooleanQuery (e.g. robert~ OR muir) we end up making the &quot;robert~&quot; branch of the query look comparatively rare compared to the straight &quot;muir&quot; term thanks to the IDF dilution from a hundred rare &quot;robert&quot; variations. In my view the correct fix is to use the root term&apos;s IDF only (assuming &quot;robert&quot; actually exists in the index otherwise we must drop back to the average of variants).&lt;/p&gt;

&lt;p&gt;That&apos;s the trick employed by FuzzyLikeThis that stops my customers complaining about &quot;bad fuzzy matches&quot;.&lt;/p&gt;</comment>
                    <comment id="13086987" author="cmale" created="Thu, 18 Aug 2011 13:31:03 +0100"  >&lt;p&gt;New patch that moves FuzzyLikeThisQuery into the sandbox.  DuplicateFilter also goes into the sandbox (incorrectly pushed to the queries module).&lt;/p&gt;

&lt;p&gt;Everything passes and is ready to go.&lt;/p&gt;

&lt;p&gt;I&apos;ll open an issue for the fixes to FuzzyLikeThisQuery.&lt;/p&gt;</comment>
                    <comment id="13086988" author="cmale" created="Thu, 18 Aug 2011 13:31:30 +0100"  >&lt;p&gt;Command for patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
svn move --parents lucene/contrib/queries/src/java/org/apache/lucene/search/* lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/
svn move --parents lucene/contrib/queries/src/test/org/apache/lucene/search/* lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/
svn move modules/queries/src/java/org/apache/lucene/queries/DuplicateFilter.java lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter.java
svn move modules/queries/src/test/org/apache/lucene/queries/DuplicateFilterTest.java lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/DuplicateFilterTest.java
svn move --parents lucene/contrib/queries/lib/* lucene/contrib/sandbox/lib/
svn delete dev-tools/idea/lucene/contrib/queries
svn delete dev-tools/maven/lucene/contrib/queries
svn delete lucene/contrib/queries
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13087027" author="rcmuir" created="Thu, 18 Aug 2011 15:20:29 +0100"  >&lt;blockquote&gt;
&lt;p&gt;It&apos;s more nuanced than averaging IDF of variants (as discussed at length in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-329&quot; title=&quot;Fuzzy query scoring issues&quot;&gt;&lt;del&gt;LUCENE-329&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Mark, yeah but when the term exists providing term B term A&apos;s docfreq is trivial.&lt;/p&gt;

&lt;p&gt;the averaging is the part thats a pain in the ass with a TopTermsRewrite &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13088130" author="cmale" created="Sat, 20 Aug 2011 05:58:31 +0100"  >&lt;p&gt;Committed revision 1159846.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12490793" name="LUCENE-3381.patch" size="44672" author="cmale" created="Thu, 18 Aug 2011 13:31:03 +0100" />
                    <attachment id="12490767" name="LUCENE-3381.patch" size="67575" author="cmale" created="Thu, 18 Aug 2011 09:20:39 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 18 Aug 2011 08:55:44 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2721</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24315</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>