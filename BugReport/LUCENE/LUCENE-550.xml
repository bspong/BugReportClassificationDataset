<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:01:48 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-550/LUCENE-550.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-550] InstantiatedIndex - faster but memory consuming index</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-550</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Represented as a coupled graph of class instances, this all-in-memory index store implementation delivers search results up to a 100 times faster than the file-centric RAMDirectory at the cost of greater RAM consumption.&lt;/p&gt;

&lt;p&gt;Performance seems to be a little bit better than log2n (binary search). No real data on that, just my eyes.&lt;/p&gt;

&lt;p&gt;Populated with a single document InstantiatedIndex is almost, but not quite, as fast as MemoryIndex.    &lt;/p&gt;

&lt;p&gt;At 20,000 document 10-50 characters long InstantiatedIndex outperforms RAMDirectory some 30x,&lt;br/&gt;
15x at 100 documents of 2000 charachters length,&lt;br/&gt;
and is linear to RAMDirectory at 10,000 documents of 2000 characters length.&lt;/p&gt;

&lt;p&gt;Mileage may vary depending on term saturation.&lt;/p&gt;

</description>
                <environment></environment>
            <key id="12332399">LUCENE-550</key>
            <summary>InstantiatedIndex - faster but memory consuming index</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="gsingers">Grant Ingersoll</assignee>
                                <reporter username="karl.wettin">Karl Wettin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Apr 2006 13:46:19 +0100</created>
                <updated>Thu, 13 Mar 2008 12:33:56 +0000</updated>
                    <resolved>Thu, 13 Mar 2008 12:33:56 +0000</resolved>
                            <version>2.0.0</version>
                                                <component>core/store</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12375373" author="yseeley@gmail.com" created="Thu, 20 Apr 2006 23:04:29 +0100"  >&lt;p&gt;Thanks Karl, it&apos;s interesting stuff...&lt;/p&gt;

&lt;p&gt;&amp;gt; You might notice that norms are float[] and not byte[]. That is me who refactored it to see if it would do&lt;br/&gt;
&amp;gt; any good. Bit shifting don&apos;t take many ticks, so I might just revert that. &lt;/p&gt;

&lt;p&gt;Since there are only 256 byte values, many scorers use a simple lookup table Similarity.getNormDecoder()&lt;br/&gt;
After I sped up norm decoding, a lookup table was only marginally faster anyway (see comments in SmallFloat class).  So I wouldn&apos;t expect float[] norms to be mesurably faster than byte[] norms in the context of a complete search.&lt;/p&gt;</comment>
                    <comment id="12375394" author="karl.wettin" created="Fri, 21 Apr 2006 00:30:22 +0100"  >&lt;p&gt;&amp;gt; &amp;gt; You might notice that norms are float[] and not byte[]. That is me who refactored it to see if it would do&lt;br/&gt;
&amp;gt; &amp;gt; any good. Bit shifting don&apos;t take many ticks, so I might just revert that.&lt;/p&gt;

&lt;p&gt;&amp;gt; Since there are only 256 byte values, many scorers use a simple lookup table Similarity.getNormDecoder()&lt;br/&gt;
&amp;gt; After I sped up norm decoding, a lookup table was only marginally faster anyway (see comments in SmallFloat &lt;br/&gt;
&amp;gt; class). So I wouldn&apos;t expect float[] norms to be mesurably faster than byte[] norms in the context of a complete&lt;br/&gt;
&amp;gt; search.&lt;/p&gt;

&lt;p&gt;The hypthesis is that instanciation and unnecessary data parsing is the bad guy. Converting bytes to floats fit that profile, so I moved it to the IO-classes (readFloat -&amp;gt; readByte). I relize that for the the norms alone, it is a marginal win, but if I find enough of these things it might show in the end.  Don&apos;t know if I&apos;ll find enough things to work with though. Been looking at getting ridth of things in the IndexReader as the information it returns in many situations already available in the information passed IndexReader, but I&apos;m afraid it might be a Pyrrhus victory as the Jit usually automatically &quot;caches&quot; things like that. There are more obvious places to save ticks, e.g. replacing collections with arrays.&lt;/p&gt;</comment>
                    <comment id="12375450" author="karl.wettin" created="Fri, 21 Apr 2006 08:36:14 +0100"  >&lt;p&gt;The whole Lucene core branch.&lt;/p&gt;

&lt;p&gt;I think I&apos;ve messed something up, queries with Directory-implementations are much slower than normal. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;See the class diagram to understand what I did.&lt;/p&gt;</comment>
                    <comment id="12375451" author="karl.wettin" created="Fri, 21 Apr 2006 08:37:41 +0100"  >&lt;p&gt;Class diagram over InstanciatedIndex&lt;/p&gt;</comment>
                    <comment id="12375453" author="karl.wettin" created="Fri, 21 Apr 2006 08:50:25 +0100"  >&lt;p&gt;Due to read and write locks, this is how one must use the extention:&lt;/p&gt;

&lt;p&gt;InstanciatedIndex ii = new InstanciatedIndex();&lt;/p&gt;

&lt;p&gt;IndexWriter iw = ii.new InstanciatedIndexWriter(analyzer, clear); // locks&lt;br/&gt;
iw.close(); // commits&lt;/p&gt;

&lt;p&gt;IndexReader ir = ii.new InstanciatedIndexReader();&lt;/p&gt;

&lt;p&gt;Searcher = ii.getSearcher();&lt;/p&gt;</comment>
                    <comment id="12375635" author="karl.wettin" created="Sat, 22 Apr 2006 05:11:50 +0100"  >&lt;p&gt;This is a class diagram that explains what it will look like when I&apos;m done.&lt;/p&gt;

&lt;p&gt;It is pretty much only the IndexReader that needs to be refactored.&lt;/p&gt;</comment>
                    <comment id="12378760" author="karl.wettin" created="Wed, 10 May 2006 05:46:57 +0100"  >&lt;p&gt;Some new statistics.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A corpus of 500 documents, 1-5K text per document.&lt;/li&gt;
	&lt;li&gt;Placed 150 000 term and boolean queries.&lt;/li&gt;
	&lt;li&gt;Retrieved the top &amp;lt;100 hits from each result.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Query alone is about 5x faster,&lt;br/&gt;
but 9x if you include the hits collection.&lt;/p&gt;

&lt;p&gt;I belive that span queries will be about 10x-20x faster as the skipTo() is really really optimized. There is a bug in my term position code, so I have not been able to messure it for real yet.&lt;/p&gt;

&lt;p&gt;Hope to have that working and an updated class diagram for you soon.&lt;/p&gt;</comment>
                    <comment id="12378776" author="karl.wettin" created="Wed, 10 May 2006 07:25:11 +0100"  >&lt;p&gt;Oups&lt;/p&gt;

&lt;p&gt;InstanciatedIndex:&lt;br/&gt;
Corpus creation took 14011 ms.&lt;br/&gt;
Term queries took 33608 ms.&lt;/p&gt;

&lt;p&gt;RAMDirectory:&lt;br/&gt;
Corpus creation took 9144 ms.&lt;br/&gt;
Term queries took 1123565 ms.&lt;/p&gt;

&lt;p&gt;That it 35x the speed. &lt;/p&gt;

&lt;p&gt;Something might be wrong. But my initial tests tells me that it is right. Will look in to this tomorrow. Need to sleep now.&lt;/p&gt;</comment>
                    <comment id="12379087" author="karl.wettin" created="Thu, 11 May 2006 23:32:09 +0100"  >&lt;p&gt;There is a minor norms bug. The value differst +-3 from the Directory norms. Other than that it seems to work great.&lt;/p&gt;

&lt;p&gt;Now about 40x faster than RAMDirectory.&lt;/p&gt;

&lt;p&gt;Stats for test: 500 documents. 1-5K text content.&lt;br/&gt;
10 000 * 5 spans&lt;br/&gt;
10 000 * 13 term and boolean term queries.&lt;br/&gt;
collected top 100 documents for each search results.&lt;/p&gt;

&lt;p&gt;InstanciatedIndex is 40x faster than the RAMDirectory.&lt;/p&gt;

&lt;p&gt;InstanciatedIndex running on Lucene 1.9-karl1&lt;br/&gt;
Corpus creation took 14903 ms.&lt;br/&gt;
Span queries took 12884 ms.&lt;br/&gt;
Term queries took 30221 ms.&lt;/p&gt;

&lt;p&gt;RAMDirectory run on Licene 1.9&lt;br/&gt;
Corpus creation took 9337 ms.&lt;br/&gt;
Span queries took 253412 ms.&lt;br/&gt;
Term queries took 1188492 ms.&lt;/p&gt;
</comment>
                    <comment id="12379124" author="cutting" created="Fri, 12 May 2006 02:29:11 +0100"  >&lt;p&gt;This looks very promising.  Unfortunately the code you provide makes many incompatible API changes (e.g., turning Term into an interface that has far fewer methods) removes lots of useful javadoc, etc.  So please don&apos;t expect it to be committed soon!&lt;/p&gt;

&lt;p&gt;A back-compatible way to add an interface is to add it above the old class.  So you might add a TermInteface, AbstractTerm, and TermImpl, then change term to extend TermImpl and deprecate it.&lt;/p&gt;

&lt;p&gt;Then there&apos;s also the question of whether you really must convert Term to an interface.  I would not undertake that change for aesthetic reasons.  Is it really required to achieve your goals?  You should generally try hard to minimize the size of your diffs and maximize the back-compatiblity.&lt;/p&gt;</comment>
                    <comment id="12379128" author="karl.wettin" created="Fri, 12 May 2006 02:45:40 +0100"  >&lt;p&gt;Doug Cutting commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-550&quot; title=&quot;InstantiatedIndex - faster but memory consuming index&quot;&gt;&lt;del&gt;LUCENE-550&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&amp;gt; This looks very promising.  Unfortunately the code you provide makes many incompatible API &lt;br/&gt;
&amp;gt; changes (e.g., turning Term into an interface that has far fewer methods) removes lots of &lt;br/&gt;
&amp;gt; useful javadoc, etc.  So please don&apos;t expect it to be committed soon!&lt;/p&gt;

&lt;p&gt;I agree, there is lots of work to be done on it. It was eaiser for me to think clear when everything was seperated. Basically there are only a few changes to the API that is needed:&lt;/p&gt;

&lt;p&gt;1. Document nor Term may be final.&lt;br/&gt;
2. Something other minor that I forgot about.&lt;/p&gt;

&lt;p&gt;It can all be fixed, but is nothing that I prioritize right now. If you feel it would be a nice thing for 2.0, tolk me what changes you are OK with and gave me at least two weeks notice I /might/ find time to back-factor the code.&lt;/p&gt;</comment>
                    <comment id="12379141" author="karl.wettin" created="Fri, 12 May 2006 05:21:10 +0100"  >&lt;p&gt;This is the diagram of InstanciatedIndex as of 1.9-karl1&lt;/p&gt;</comment>
                    <comment id="12413577" author="karl.wettin" created="Sat, 27 May 2006 19:42:01 +0100"  >&lt;p&gt;This update makes InstanciatedIndex compatible with Lucene, given that issue 580 and 581 is adopted.&lt;/p&gt;

&lt;p&gt;It depends on generics and concurrent locks from J2SE 5.0.&lt;/p&gt;

&lt;p&gt;Contains one update in Field:&lt;/p&gt;

&lt;p&gt;public setFieldData(Object fieldData)&lt;/p&gt;

&lt;p&gt;And one in Document:&lt;/p&gt;

&lt;p&gt;public List&amp;lt;Field&amp;gt; getFields() {&lt;br/&gt;
  return fields;&lt;br/&gt;
}&lt;/p&gt;</comment>
                    <comment id="12416133" author="karl.wettin" created="Wed, 14 Jun 2006 15:35:40 +0100"  >&lt;p&gt;ArrayBoundsOutOfIndex-bugfix.&lt;/p&gt;

&lt;p&gt;If eveything works as it should (I think so) then I&apos;m happy to report that a FuzzyQuery seems to be about 1500 (one thousand five hundred) times faster on this memory implementation than on a RAMDirectory. The speed is gained by not creating a new instance of each Term in a TermEnum.&lt;/p&gt;</comment>
                    <comment id="12416266" author="karl.wettin" created="Thu, 15 Jun 2006 06:08:33 +0100"  >&lt;p&gt;&amp;gt; If eveything works as it should &lt;/p&gt;

&lt;p&gt;I doesn&apos;t. I keep taking out the victories in advance. I&apos;ll try not to in the future. So forget about the 1500. I&apos;ll come with a new number soon enough.&lt;/p&gt;</comment>
                    <comment id="12416271" author="karl.wettin" created="Thu, 15 Jun 2006 07:23:39 +0100"  >&lt;p&gt;&amp;gt; I&apos;ll come with a new number soon enough.&lt;/p&gt;

&lt;p&gt;Right, it was 25% faster. So forget everthing I said about anything.&lt;/p&gt;</comment>
                    <comment id="12416583" author="karl.wettin" created="Sat, 17 Jun 2006 04:21:37 +0100"  >&lt;p&gt;There is a bug with phrase queries. Possible term positions. Low priority for me.&lt;/p&gt;</comment>
                    <comment id="12422359" author="karl.wettin" created="Thu, 20 Jul 2006 09:04:48 +0100"  >&lt;p&gt;To make this index work flawless (I hope), remove the if-statement around the following row in InstatiatedIndexWriter (row 477 or so):&lt;/p&gt;

&lt;p&gt;termDocumentInformation.termPositions.add(fieldSettings.position);&lt;/p&gt;

&lt;p&gt;This will fix the termposition bug noted in an earlier comment.&lt;/p&gt;

&lt;p&gt;I&apos;ll keep posting bugfixes as comments here, but when I work on it it&apos;s really in my branch of lucene 2.0.0, available here: &lt;a href=&quot;http://www.ginandtonique.org/trac/snigel/wiki/Lucene2-karl&quot; class=&quot;external-link&quot;&gt;http://www.ginandtonique.org/trac/snigel/wiki/Lucene2-karl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If someone feels that this layer is an interesting thing to add to Lucene, let me know what is required for commit and I&apos;ll make those changes. It still seems to be about 40 times (mean value on a &quot;nomal&quot; index with &quot;normal&quot; amount of terms. have seen 20x-200x) than RAMDirectory when comparing search and to retrieve documents time combined.&lt;/p&gt;</comment>
                    <comment id="12422363" author="karl.wettin" created="Thu, 20 Jul 2006 09:58:08 +0100"  >&lt;p&gt;A comment on memory usage: about 2x a RAMDirectory (900MB and 1800MB) on a 150,000 document corpus (when the corpus term count have been reached?) &lt;/p&gt;</comment>
                    <comment id="12422795" author="karl.wettin" created="Sat, 22 Jul 2006 00:40:29 +0100"  >&lt;p&gt;In order to find the norm-error I ported all test cases. I&apos;m sorry to report that 70 of them fails.&lt;/p&gt;

&lt;p&gt;So if anyone use this code, don&apos;t. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;Hopefully most of the problems share the same problem. I&apos;ll be at the code this weekend, and perhaps a few days next week if needed.&lt;/p&gt;</comment>
                    <comment id="12422843" author="karl.wettin" created="Sat, 22 Jul 2006 20:50:10 +0100"  >&lt;p&gt;New code. More backwards compatible. Just a very few changes required to the Lucene core. &lt;/p&gt;

&lt;p&gt;Now with test cases from distribution, but only search/* has been ported. Fails some (11 of 172) score and RMI related tests that I can not explain. Could really need some help with that&lt;/p&gt;

&lt;p&gt;Except for that this seems to work really great now. I&apos;ve been running this in a live environment for a few hours (some hundred thousand user queries) and it is &lt;b&gt;really&lt;/b&gt; fast.&lt;/p&gt;


&lt;p&gt;Output from failing tests:&lt;/p&gt;


&lt;p&gt;junit.framework.AssertionFailedError: expected:&amp;lt;3&amp;gt; but was:&amp;lt;0&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestPhraseQuery.testSlopScoring(TestPhraseQuery.java:298)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;junit.framework.AssertionFailedError: Using 10 documents per index:&lt;br/&gt;
	at org.apache.lucene.search.TestMultiSearcher.testNormalization(TestMultiSearcher.java:247)&lt;br/&gt;
	at org.apache.lucene.search.TestMultiSearcher.testNormalization10(TestMultiSearcher.java:220)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;

&lt;p&gt;------- testSimpleEqualScores1 -------&lt;br/&gt;
#0: 1.000000000 - d3&lt;br/&gt;
#1: 1.000000000 - d4&lt;br/&gt;
#2: 0.500000000 - d1&lt;br/&gt;
#3: 0.500000000 - d2&lt;/p&gt;

&lt;p&gt;junit.framework.AssertionFailedError: score #2 is not the same expected:&amp;lt;1.0&amp;gt; but was:&amp;lt;0.5&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores1(TestDisjunctionMaxQuery.java:142)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;

&lt;p&gt;------- testSimpleEqualScores2 -------&lt;br/&gt;
#0: 1.000000000 - d2&lt;br/&gt;
#1: 0.500000000 - d1&lt;br/&gt;
#2: 0.500000000 - d4&lt;/p&gt;

&lt;p&gt;junit.framework.AssertionFailedError: score #1 is not the same expected:&amp;lt;1.0&amp;gt; but was:&amp;lt;0.5&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores2(TestDisjunctionMaxQuery.java:166)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;

&lt;p&gt;------- testSimpleEqualScores3 -------&lt;br/&gt;
#0: 1.000000000 - d2&lt;br/&gt;
#1: 1.000000000 - d3&lt;br/&gt;
#2: 1.000000000 - d4&lt;br/&gt;
#3: 0.500000000 - d1&lt;/p&gt;

&lt;p&gt;junit.framework.AssertionFailedError: score #3 is not the same expected:&amp;lt;1.0&amp;gt; but was:&amp;lt;0.5&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestDisjunctionMaxQuery.testSimpleEqualScores3(TestDisjunctionMaxQuery.java:191)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;junit.framework.AssertionFailedError: A,B,D, only B in range expected:&amp;lt;1&amp;gt; but was:&amp;lt;2&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestRangeQuery.testExclusive(TestRangeQuery.java:39)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;junit.framework.AssertionFailedError: A,B,D - A and B in range expected:&amp;lt;2&amp;gt; but was:&amp;lt;5&amp;gt;&lt;br/&gt;
	at org.apache.lucene.search.TestRangeQuery.testInclusive(TestRangeQuery.java:63)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;junit.framework.AssertionFailedError: Using 10 documents per index:&lt;br/&gt;
	at org.apache.lucene.search.TestMultiSearcher.testNormalization(TestMultiSearcher.java:247)&lt;br/&gt;
	at org.apache.lucene.search.TestMultiSearcher.testNormalization10(TestMultiSearcher.java:220)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;java.rmi.server.ExportException: internal error: ObjID already in use&lt;br/&gt;
	at sun.rmi.transport.ObjectTable.putTarget(ObjectTable.java:197)&lt;br/&gt;
	at sun.rmi.transport.Transport.exportObject(Transport.java:90)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:231)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:398)&lt;br/&gt;
	at sun.rmi.transport.LiveRef.exportObject(LiveRef.java:131)&lt;br/&gt;
	at sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:195)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:107)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.&amp;lt;init&amp;gt;(RegistryImpl.java:93)&lt;br/&gt;
	at java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:198)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.startServer(TestSort.java:704)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.getRemote(TestSort.java:689)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.testRemoteSort(TestSort.java:410)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;java.rmi.server.ExportException: internal error: ObjID already in use&lt;br/&gt;
	at sun.rmi.transport.ObjectTable.putTarget(ObjectTable.java:197)&lt;br/&gt;
	at sun.rmi.transport.Transport.exportObject(Transport.java:90)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:231)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:398)&lt;br/&gt;
	at sun.rmi.transport.LiveRef.exportObject(LiveRef.java:131)&lt;br/&gt;
	at sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:195)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:107)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.&amp;lt;init&amp;gt;(RegistryImpl.java:93)&lt;br/&gt;
	at java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:198)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.startServer(TestSort.java:704)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.getRemote(TestSort.java:689)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.testRemoteCustomSort(TestSort.java:417)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;


&lt;p&gt;java.rmi.server.ExportException: internal error: ObjID already in use&lt;br/&gt;
	at sun.rmi.transport.ObjectTable.putTarget(ObjectTable.java:197)&lt;br/&gt;
	at sun.rmi.transport.Transport.exportObject(Transport.java:90)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:231)&lt;br/&gt;
	at sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:398)&lt;br/&gt;
	at sun.rmi.transport.LiveRef.exportObject(LiveRef.java:131)&lt;br/&gt;
	at sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:195)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:107)&lt;br/&gt;
	at sun.rmi.registry.RegistryImpl.&amp;lt;init&amp;gt;(RegistryImpl.java:93)&lt;br/&gt;
	at java.rmi.registry.LocateRegistry.createRegistry(LocateRegistry.java:198)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.startServer(TestSort.java:704)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.getRemote(TestSort.java:689)&lt;br/&gt;
	at org.apache.lucene.search.TestSort.testNormalizedScores(TestSort.java:440)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.junit2.JUnitStarter.main(JUnitStarter.java:32)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)&lt;br/&gt;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:90)&lt;/p&gt;</comment>
                    <comment id="12422897" author="karl.wettin" created="Sun, 23 Jul 2006 14:59:58 +0100"  >&lt;p&gt;Updated to match the current svn with Fieldable, et.c.&lt;/p&gt;

&lt;p&gt;All changes to Lucene core are now gathered in a small patch (de-finalized Document and Term) and one new class (InterfaceIndexWriter implemented by IndexWriter in patch) instead of attaching the whole trunk.&lt;/p&gt;

&lt;p&gt;Still fails a few score- and RMI-tests. &lt;/p&gt;</comment>
                    <comment id="12423710" author="karl.wettin" created="Wed, 26 Jul 2006 21:34:59 +0100"  >&lt;p&gt;Performance from live environemt:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;150,000 documents, average size is 2K.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Consumes 2x the memory of a RAMDirectory.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Average user query match 90 documents.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;RAMDirectory takes 60x more time to collect and instantiate the resulting documents.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I would very much apreciate if someone with knowledge of the scoring code could take a look at the seven final(tm) failing tests. Them failing is not a problem for me, but it would be nice if they passed. &lt;/p&gt;</comment>
                    <comment id="12423719" author="dejannenov" created="Wed, 26 Jul 2006 21:56:13 +0100"  >&lt;p&gt;Can we please get the class diagrams in PDF format - the PNGs are so tny - they are undreadable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12423720" author="karl.wettin" created="Wed, 26 Jul 2006 22:21:05 +0100"  >&lt;p&gt;&amp;gt; Can we please get the class diagrams in PDF format - &lt;br/&gt;
&amp;gt; the PNGs are so tny - they are undreadable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Shamless promotion:&lt;/p&gt;

&lt;p&gt;I&apos;m actually in the progress of porting all my old diagrams to &amp;lt;&lt;a href=&quot;http://www.appliedmodels.com/&quot; class=&quot;external-link&quot;&gt;http://www.appliedmodels.com/&lt;/a&gt;&amp;gt;, this fantastic MDA-tool a friend of mine just released to the public. So quite soon there will be new diagrams. Pehaps even PDF.&lt;/p&gt;

&lt;p&gt;Until then you&apos;re stuck to zooming &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12423731" author="dejannenov" created="Wed, 26 Jul 2006 23:53:29 +0100"  >&lt;p&gt;And whil ewe wait - may we please have highres PNGs - so that the zoomed-in versions are a little more readable?&lt;/p&gt;</comment>
                    <comment id="12451726" author="karl.wettin" created="Tue, 21 Nov 2006 18:05:16 +0000"  >&lt;p&gt;Here is what I just sent to Wolgang. I&apos;ve adapted his bench test case to also work with InstantiatedIndex. It is worth noticing this is a test with one document only, and the speed is not linear according to my previous tests. InstantiatedIndex is much more than 3x faster than RAMDirectory in a larger index. So this is really only to compare MemoryIndex with InstantiatedIndex, and not as a bench against RAMDirectory.&lt;/p&gt;

&lt;p&gt;RAMDirectory:&lt;/p&gt;

&lt;p&gt;secs = 95.159&lt;br/&gt;
queries/sec= 315.26184&lt;br/&gt;
MB/sec = 9.900338&lt;br/&gt;
Done benchmarking (without checking correctness).&lt;/p&gt;


&lt;p&gt;MemoryIndex:&lt;/p&gt;

&lt;p&gt;secs = 26.692&lt;br/&gt;
queries/sec= 1123.9323&lt;br/&gt;
MB/sec = 35.295456&lt;br/&gt;
Done benchmarking (without checking correctness).&lt;/p&gt;



&lt;p&gt;InstantiatedIndex:&lt;/p&gt;

&lt;p&gt;secs = 27.44&lt;br/&gt;
queries/sec= 1093.2944&lt;br/&gt;
MB/sec = 34.333317&lt;br/&gt;
Done benchmarking (without checking correctness).&lt;/p&gt;


&lt;p&gt;MemoryIndex is a bit faster than InstantiatedIndex. But I&apos;m aware of a couple of small optimizations I can do. &lt;/p&gt;</comment>
                    <comment id="12451730" author="whoschek" created="Tue, 21 Nov 2006 18:19:53 +0000"  >&lt;p&gt;What&apos;s the benchmark configuration? For example, is throughput bounded by indexing or querying?  Measuring N queries against a single preindexed document vs. 1 precompiled query against N documents? See the line&lt;/p&gt;

&lt;p&gt;boolean measureIndexing = false; // toggle this to measure query performance&lt;/p&gt;

&lt;p&gt;in my driver. If measuring indexing, what kind of analyzer / token filter chain is used? If measuring queries, what kind of query types are in the mix, with which relative frequencies? &lt;/p&gt;

&lt;p&gt;You may want to experiment with modifying/commenting/uncommenting various parts of the driver setup, for any given target scenario. Would it be possible to post the benchmark code, test data, queries for analysis?&lt;/p&gt;</comment>
                    <comment id="12451731" author="whoschek" created="Tue, 21 Nov 2006 18:22:23 +0000"  >&lt;p&gt;Other question: when running the driver in test mode (checking for equality of query results against RAMDirectory) does InstantiatedIndex pass all tests? That would be great!&lt;/p&gt;</comment>
                    <comment id="12451763" author="karl.wettin" created="Tue, 21 Nov 2006 20:41:38 +0000"  >&lt;p&gt;wolfgang hoschek &lt;span class=&quot;error&quot;&gt;&amp;#91;21/Nov/06 10:22 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; Other question: when running the driver in test mode (checking for equality of query&lt;br/&gt;
&amp;gt; results against RAMDirectory) does InstantiatedIndex pass all tests? That would be great! &lt;/p&gt;

&lt;p&gt;It sure does!&lt;/p&gt;

&lt;p&gt;xfiles = &lt;span class=&quot;error&quot;&gt;&amp;#91;./CHANGES.txt, ./LICENSE.txt&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;
	&lt;ol&gt;
		&lt;li&gt;
		&lt;ol&gt;
			&lt;li&gt;
			&lt;ol&gt;
				&lt;li&gt;
				&lt;ol&gt;
					&lt;li&gt;
					&lt;ol&gt;
						&lt;li&gt;
						&lt;ol&gt;
							&lt;li&gt;
							&lt;ol&gt;
								&lt;li&gt;
								&lt;ol&gt;
									&lt;li&gt;
									&lt;ol&gt;
										&lt;li&gt;
										&lt;ol&gt;
											&lt;li&gt;iteration=0&lt;/li&gt;
										&lt;/ol&gt;
										&lt;/li&gt;
									&lt;/ol&gt;
									&lt;/li&gt;
								&lt;/ol&gt;
								&lt;/li&gt;
							&lt;/ol&gt;
							&lt;/li&gt;
						&lt;/ol&gt;
						&lt;/li&gt;
					&lt;/ol&gt;
					&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/li&gt;
			&lt;/ol&gt;
			&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;
										&lt;ul&gt;
											&lt;li&gt;FILE=./CHANGES.txt&lt;br/&gt;
diff=-0.020341659, query=term, scoreII=0.020341659, scoreRAM=0.020341659&lt;br/&gt;
diff=-0.024093388, query=term*, scoreII=0.024093388, scoreRAM=0.024093388&lt;br/&gt;
diff=-0.025180675, query=term~, scoreII=0.025180675, scoreRAM=0.025180675&lt;br/&gt;
diff=-0.018685007, query=Apache, scoreII=0.018685007, scoreRAM=0.018685007&lt;br/&gt;
diff=-0.014089426, query=Apach~ AND Copy*, scoreII=0.014089426, scoreRAM=0.014089426&lt;/li&gt;
										&lt;/ul&gt;
										&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;
		&lt;ul&gt;
			&lt;li&gt;
			&lt;ul&gt;
				&lt;li&gt;
				&lt;ul&gt;
					&lt;li&gt;
					&lt;ul&gt;
						&lt;li&gt;
						&lt;ul&gt;
							&lt;li&gt;
							&lt;ul&gt;
								&lt;li&gt;
								&lt;ul&gt;
									&lt;li&gt;
									&lt;ul&gt;
										&lt;li&gt;
										&lt;ul&gt;
											&lt;li&gt;FILE=./LICENSE.txt&lt;br/&gt;
diff=0.0, query=term, scoreII=0.0, scoreRAM=0.0&lt;br/&gt;
diff=-0.027122213, query=term*, scoreII=0.027122213, scoreRAM=0.027122213&lt;br/&gt;
diff=-0.028767452, query=term~, scoreII=0.028767452, scoreRAM=0.028767452&lt;br/&gt;
diff=-0.023488527, query=Apache, scoreII=0.023488527, scoreRAM=0.023488527&lt;br/&gt;
diff=-0.043373547, query=Apach~ AND Copy*, scoreII=0.043373547, scoreRAM=0.043373547&lt;/li&gt;
										&lt;/ul&gt;
										&lt;/li&gt;
									&lt;/ul&gt;
									&lt;/li&gt;
								&lt;/ul&gt;
								&lt;/li&gt;
							&lt;/ul&gt;
							&lt;/li&gt;
						&lt;/ul&gt;
						&lt;/li&gt;
					&lt;/ul&gt;
					&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
			&lt;/ul&gt;
			&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;secs = 3.766&lt;br/&gt;
queries/sec= 2.655337&lt;br/&gt;
MB/sec = 0.083386995&lt;br/&gt;
No bug found. done.&lt;/p&gt;

&lt;p&gt;Process finished with exit code 0&lt;/p&gt;</comment>
                    <comment id="12451768" author="whoschek" created="Tue, 21 Nov 2006 20:50:09 +0000"  >&lt;p&gt;Ok. That means a basic test passes. For some more exhaustive tests, run all the queries in &lt;/p&gt;

&lt;p&gt;src/test/org/apache/lucene/index/memory/testqueries.txt&lt;/p&gt;

&lt;p&gt;against matching files such as &lt;/p&gt;

&lt;p&gt;    String[] files = listFiles(new String[] &lt;/p&gt;
{
      &quot;*.txt&quot;, //&quot;*.html&quot;, &quot;*.xml&quot;, &quot;xdocs/*.xml&quot;, 
      &quot;src/java/test/org/apache/lucene/queryParser/*.java&quot;,
      &quot;src/java/org/apache/lucene/index/memory/*.java&quot;,
    }
&lt;p&gt;);&lt;/p&gt;


&lt;p&gt;See testMany() for details. Repeat for various analyzer, stopword toLowerCase settings, such as &lt;/p&gt;

&lt;p&gt;    boolean toLowerCase = true;&lt;br/&gt;
//    boolean toLowerCase = false;&lt;br/&gt;
//    Set stopWords = null;&lt;br/&gt;
    Set stopWords = StopFilter.makeStopSet(StopAnalyzer.ENGLISH_STOP_WORDS);&lt;/p&gt;

&lt;p&gt;    Analyzer[] analyzers = new Analyzer[] &lt;/p&gt;
{ 
//        new SimpleAnalyzer(),
//        new StopAnalyzer(),
//        new StandardAnalyzer(),
        PatternAnalyzer.DEFAULT_ANALYZER,
//        new WhitespaceAnalyzer(),
//        new PatternAnalyzer(PatternAnalyzer.NON_WORD_PATTERN, false, null),
//        new PatternAnalyzer(PatternAnalyzer.NON_WORD_PATTERN, true, stopWords),        
//        new SnowballAnalyzer(&quot;English&quot;, StopAnalyzer.ENGLISH_STOP_WORDS),
    }
&lt;p&gt;;&lt;/p&gt;
</comment>
                    <comment id="12451770" author="whoschek" created="Tue, 21 Nov 2006 20:56:55 +0000"  >&lt;p&gt;&amp;gt; diff=-0.024093388, query=term*, scoreII=0.024093388, scoreRAM=0.024093388&lt;/p&gt;

&lt;p&gt;Actually, diff != 0 means the test fails, unless the diff is very small due too rounding error, say 10E-9. The driver should report a IllegalStateException(&quot;BUG DETECTED:&quot;&lt;/p&gt;</comment>
                    <comment id="12451777" author="karl.wettin" created="Tue, 21 Nov 2006 21:15:48 +0000"  >&lt;p&gt;&amp;gt; &amp;gt; diff=-0.024093388, query=term*, scoreII=0.024093388, scoreRAM=0.024093388&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Actually, diff != 0 means the test fails, unless the diff is very small due too rounding error, say 10E-9. &lt;br/&gt;
&amp;gt; The driver should report a IllegalStateException(&quot;BUG DETECTED:&quot;&lt;/p&gt;

&lt;p&gt;Right, that was a bug in my code. The diff /output/ was calculated on scoreMEM - scoreRAM (were scoreMEM is 0) and not scoreII - scoreRAM ; )&lt;/p&gt;</comment>
                    <comment id="12451780" author="karl.wettin" created="Tue, 21 Nov 2006 21:28:50 +0000"  >&lt;p&gt;wolfgang hoschek &lt;span class=&quot;error&quot;&gt;&amp;#91;21/Nov/06 12:50 PM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; Ok. That means a basic test passes. For some more exhaustive tests, run all the queries in&lt;/p&gt;

&lt;p&gt;All Lucene unit tests have been adapted to work with my alternate index. Everything but proximity queries pass. Have not looked in to why as I don&apos;t use them (yet). And I have written an in depth index comparator to make sure that an InstantiatedIndex equals a Directory implementation. Hence I have already verified that the index works as expected. &lt;/p&gt;

&lt;p&gt;Todays postings from me is more to show that InstantiatedIndex is /almost/ as fast as MemoryIndex and could thus be an interesting replacement, as as it handles more than one document it might even be preferable in some cases.&lt;/p&gt;

&lt;p&gt;I will however run your suggested tests tomorrow and report back. &lt;br/&gt;
And post the latest patches, including my adaptation of your unit test, in case you want to explore it by your self.&lt;/p&gt;</comment>
                    <comment id="12451817" author="whoschek" created="Tue, 21 Nov 2006 23:30:46 +0000"  >&lt;p&gt;&amp;gt; All Lucene unit tests have been adapted to work with my alternate index. Everything but proximity queries pass. &lt;/p&gt;

&lt;p&gt;Sounds like you&apos;re almost there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Regarding indexing performance with MemoryIndex: Performance is more than good enough. I&apos;ve observed and measured that often the bottleneck is not the MemoryIndex itself, but rather the Analyzer type (e.g. StandardAnalayzer) or the I/O for the input files or term lower casing (&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265809&lt;/a&gt;) or something else entirely.&lt;/p&gt;

&lt;p&gt;Regarding query performance with MemoryIndex: Some queries are more efficient than others. For example, fuzzy queries are much less efficient than wild card queries, which in turn are much less efficient than simple term queries. Such effects seem partly inherent due too the nature of the query type, partly a function of the chosen data structure (RAMDirectory, MemoryIndex, II, ...), and partly a consequence of the overall Lucene API design.&lt;/p&gt;

&lt;p&gt;The query mix found in testqueries.txt is more intended for correctness testing than benchmarking. Therein, certain query types dominate over others, and thus, conclusions about the performance of individual aspects cannot easily be drawn.&lt;/p&gt;

&lt;p&gt;Wolfgang.&lt;/p&gt;</comment>
                    <comment id="12451870" author="whoschek" created="Wed, 22 Nov 2006 08:10:55 +0000"  >&lt;p&gt;I&apos;ve now checked in a version of MemoryIndexTest  into contrib/memory that more easily allows to switch between measuring indexing or querying. Example output for measuring query throughput on simple term queries: ~500000 queries/sec on a MacBook Pro, jdk 1.5.0_06, server VM. As always, your mileage may vary.&lt;/p&gt;</comment>
                    <comment id="12451929" author="karl.wettin" created="Wed, 22 Nov 2006 13:22:11 +0000"  >&lt;p&gt;This is the current version of my local Lucene branch, including InstantiatedIndex. As I have not merged with the trunk for a while, it also features my locally patched version. It really is just a few small changes. Some classes are no longer final, plus I have introduced InterfaceIndexWriter and InterfaceIndexModifier.&lt;/p&gt;

&lt;p&gt;/lucene2karl/lucene2-apache-karl-patched&lt;br/&gt;
/lucene2karl/lucene2-karl/test &amp;lt;--- all (search) test cases adapted to run with instantiated index&lt;br/&gt;
/lucene2karl/lucene2-karl/index&lt;br/&gt;
/lucene2karl/lucene2-karl/instantiated&lt;br/&gt;
/lucene2karl/lucene2-karl/searchfork   &amp;lt;--- non important stuff&lt;br/&gt;
/lucene2karl/lucene2-karl/analysis   &amp;lt;--- just some stuff&lt;br/&gt;
/lucene2karl/lucene2-karl/core   &amp;lt;-- patches for the lucene trunk&lt;br/&gt;
/memoryindex   &amp;lt;---  stuff for wolfgang&lt;/p&gt;

&lt;p&gt;All tests pass, except remote, multi and parallell searchers.&lt;/p&gt;

&lt;p&gt;Jira admins: you are more than welcome to remove all old attachments, except images.&lt;/p&gt;</comment>
                    <comment id="12453642" author="karl.wettin" created="Mon, 27 Nov 2006 16:49:42 +0000"  >&lt;p&gt;&amp;gt; Jira admins: you are more than welcome to remove all old attachments, except images.&lt;/p&gt;

&lt;p&gt;oh, i had no clue my status was upgraded. cool. fixed it my self.&lt;/p&gt;</comment>
                    <comment id="12464287" author="cutting" created="Fri, 12 Jan 2007 18:16:15 +0000"  >&lt;p&gt;I don&apos;t see a patch file here.  Your proposal would be easier to evaluate as a patch file.  Also, a contribution like this will be easier to accept if your new classes are in the contrib tree.  Then, if they prove popular, they can move into the core.  Or perhaps folks will find them so obviously useful they&apos;ll want them in the core from the start, but contrib would require less convincing.&lt;/p&gt;</comment>
                    <comment id="12464386" author="karl.wettin" created="Sat, 13 Jan 2007 00:58:31 +0000"  >&lt;p&gt;Doug Cutting &lt;span class=&quot;error&quot;&gt;&amp;#91;12/Jan/07 10:16 AM&amp;#93;&lt;/span&gt; &lt;br/&gt;
&amp;gt; I don&apos;t see a patch file here. Your proposal would be easier to evaluate as a patch file.&lt;/p&gt;

&lt;p&gt;Attached!&lt;/p&gt;

&lt;p&gt;&amp;gt; easier to accept if your new classes are in the contrib tree. &lt;/p&gt;

&lt;p&gt;There are a couple of chages in the core, the rest has been moved to contrib/indexfacade and contrib/instantiated. There is some clean up to do: a couple of static tests in instantiated. And perhaps some common logging artifacts left from debugging.&lt;/p&gt;

&lt;p&gt;I&apos;m quite certain that both contrib/packages depends on java&amp;lt;1.5&amp;gt;. At least concurrency in instantiated. &lt;/p&gt;</comment>
                    <comment id="12464598" author="karl.wettin" created="Sun, 14 Jan 2007 17:04:28 +0000"  >&lt;p&gt;New patch has all assimilated test cases moved to a new non conflicting package.&lt;/p&gt;

&lt;p&gt;Also contains contrib/cache that depends on everything else.&lt;/p&gt;</comment>
                    <comment id="12464676" author="hossman" created="Mon, 15 Jan 2007 08:16:35 +0000"  >&lt;p&gt;I&apos;ve been trying to follow the work you&apos;ve been doing Karl, but i must admit a lot of it is over my head &amp;#8211; but since i&apos;ve got a long weekend and your patch now makes so few changes to the core i could acctually make sense of that part, so here are some comments on those changes...&lt;/p&gt;

&lt;p&gt;1) some of these changes seem to be duplicated in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-774&quot; title=&quot;TopDocs and TopFieldDocs does not implement equals and hashCode&quot;&gt;&lt;del&gt;LUCENE-774&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-775&quot; title=&quot;Searcher code creating Hits is somewhat messy&quot;&gt;&lt;del&gt;LUCENE-775&lt;/del&gt;&lt;/a&gt; ... just pointing that out for other people who might get confused.&lt;/p&gt;

&lt;p&gt;2) since the new ScoreDoc.docComparator and ScoreDoc.scoreComparator are public, they should have some javadocs clarifing what they are for.&lt;/p&gt;

&lt;p&gt;3) i don&apos;t think the Hits.setSearcher method you added is safe ... i believe that at a minimum hitDocs, first, last, and weight all need to be reset &amp;#8211; weight&apos;s a tricky one since the instance doesn&apos;t currently hang on to the orriginal query.&lt;/p&gt;

&lt;p&gt;4) I would personally prefer IndexWriterInterface and IndexModifierInterface over InterfaceIndexWriter and InterfaceIndexModifier &amp;#8211; if for no other reason then so they sort together .. but that&apos;s a minor nit.&lt;/p&gt;


&lt;p&gt;I&apos;ve only briefly looked at the new stuff in contrib, because I got lost ... there isn&apos;t any package or class level javadocs or a build.xml in either contrib.  A big thing i did notice is that the code in indexfacade puts things in the o.a.l.search and o.a.l.index packages, which is being discouraged for contribs (among other reasons it makes it confusing to understand where a class is coming form) ideally those classes should live under o.a.l.indexfacade.index and o.a.l.indexfacade.index (or maybe just o.a.l.facade - but you get the idea)&lt;/p&gt;
</comment>
                    <comment id="12464692" author="hossman" created="Mon, 15 Jan 2007 08:39:53 +0000"  >&lt;p&gt;I just realized that all of the tests in contrib/instantiated/src/test/java/org/apache/lucene/instantiated/assimilated/ are duplicates of tests from the core with a few line changes so they use an InstantiatedIndex to get a reader/writer/seracher etc.&lt;/p&gt;

&lt;p&gt;I think it would be &lt;b&gt;much&lt;/b&gt; better if we changed the orriginal versions of these tests to include an accessors for constructing/fetching those objects which could be subclassed by tests in your contrib &amp;#8211; that way any bugs found/fixed in those test classes and any additional test methods added to those classes would automatically be inherited by your versions (instead of winding up with duplicate cut/paste test code)&lt;/p&gt;</comment>
                    <comment id="12464707" author="hossman" created="Mon, 15 Jan 2007 09:35:29 +0000"  >&lt;p&gt;Karl: the trunk.diff i just attached fixes a small autoboxing dependency your patch introduced into the core (preventing compilation on java 1.4). I also added build.xml files to the new contrib dirs, rearanged the directory of the contribs so they match the default for contribs and the   the build.xml files could be simple.  Once i did this i discovered some unneccessary dependencies on commons-logging that i removed.  Then i ran the tests, and got some errors &amp;#8211; which are included in test-reports.zip so you can check them out.&lt;/p&gt;</comment>
                    <comment id="12464716" author="karl.wettin" created="Mon, 15 Jan 2007 09:51:12 +0000"  >&lt;p&gt;Thanks alot Hoss, for taking the time. I sure do appreciate it.&lt;/p&gt;

&lt;p&gt;I&apos;ll get back on your comments.&lt;/p&gt;</comment>
                    <comment id="12466341" author="karl.wettin" created="Sun, 21 Jan 2007 19:21:43 +0000"  >&lt;p&gt;New sunday, new code. &lt;/p&gt;

&lt;p&gt;Hoss Man &lt;span class=&quot;error&quot;&gt;&amp;#91;15/Jan/07 12:16 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; I&apos;ve only briefly looked at the new stuff in contrib, because I got lost ... there isn&apos;t&lt;br/&gt;
&amp;gt; any package or class level javadocs or a build.xml in either contrib.&lt;/p&gt;

&lt;p&gt;Tried to do something about the java docs. Also made a new fresh class diagram with some comments in it. I can make it PDF or XUL if prefered.&lt;/p&gt;

&lt;p&gt;That boxing error you fixed might be back. Where was it? Could not find it in the patch (all adding and no -+ fix) and it was too late to apply your patch on my local version..&lt;/p&gt;

&lt;p&gt;&amp;gt; Hoss Man &lt;span class=&quot;error&quot;&gt;&amp;#91;15/Jan/07 12:16 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; 1) some of these changes seem to be duplicated in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-774&quot; title=&quot;TopDocs and TopFieldDocs does not implement equals and hashCode&quot;&gt;&lt;del&gt;LUCENE-774&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-775&quot; title=&quot;Searcher code creating Hits is somewhat messy&quot;&gt;&lt;del&gt;LUCENE-775&lt;/del&gt;&lt;/a&gt; &lt;br/&gt;
&amp;gt; ... just pointing that out for other people who might get confused.&lt;/p&gt;

&lt;p&gt;Is it considered better practise to keep all my changes in this one huge issue? I thought it could be nice to pop in minor patches such as them. &lt;/p&gt;

&lt;p&gt;&amp;gt; 4) I would personally prefer.. &lt;br/&gt;
&amp;gt; but that&apos;s a minor nit.&lt;/p&gt;

&lt;p&gt;There has been a lot of refactoring of packages and class names as suggested. (I&apos;m still not happy with the notification listener classes.)&lt;/p&gt;

&lt;p&gt;A few new changes to the core:&lt;/p&gt;

&lt;p&gt;Lazy initialization of the fields collection in Document .&lt;/p&gt;

&lt;p&gt;Some definalization to allow decoration of IndexReader.&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/IndexReader-can-not-be-decorated-tf3041647.html#a8461125&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/IndexReader-can-not-be-decorated-tf3041647.html#a8461125&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&amp;gt; Hoss Man &lt;span class=&quot;error&quot;&gt;&amp;#91;15/Jan/07 12:16 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; 3) i don&apos;t think the Hits.setSearcher method you added is safe&lt;/p&gt;

&lt;p&gt;It smeared out on java-dev: &lt;a href=&quot;http://www.nabble.com/Decorative-cache-%28and-Hits.setSearcher%29-tf3009848.html#a8428139&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Decorative-cache-%28and-Hits.setSearcher%29-tf3009848.html#a8428139&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did not investigate this any further with test code, but I have identitfied lazy fields as a problem. Instead I&apos;m considering a supplementary decorated document cache on the IndexReader, and implementing a replacement for Hits.&lt;/p&gt;

&lt;p&gt;Hoss Man &lt;span class=&quot;error&quot;&gt;&amp;#91;15/Jan/07 12:39 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; I just realized that all of the tests in contrib/instantiated/src/test/java/org/apache/lucene/&lt;br/&gt;
&amp;gt; instantiated/assimilated/ are duplicates of tests from the core with a few line changes&lt;br/&gt;
&amp;gt; so they use an InstantiatedIndex to get a reader/writer/seracher etc. &lt;/p&gt;

&lt;p&gt;This is not a bad idea at all, but I will not have time to do it right anytime soon. It would be a simpler task if the facade was a part of the core, as this is just the thing it was built for &amp;#8211; unison index handling. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Hoss Man &lt;span class=&quot;error&quot;&gt;&amp;#91;15/Jan/07 01:35 AM&amp;#93;&lt;/span&gt;&lt;br/&gt;
&amp;gt; Then i ran the tests, and got some errors &amp;#8211; which are included in test-reports.zip so you can check them out.&lt;/p&gt;

&lt;p&gt;What tool do you recommend to inspect these reports?&lt;/p&gt;

&lt;p&gt;I know for a fact that remote searchable will fail. I hope for someone to show up, need it and fix it.&lt;/p&gt;</comment>
                    <comment id="12468035" author="karl.wettin" created="Sat, 27 Jan 2007 16:52:27 +0000"  >&lt;p&gt;Patch of the week.&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;CachedSearcher &amp;#8211; soft referenced hit collection-, TopDocs- and TopFieldDocs cache. Backed by NotifiableIndex.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Removed Hits cache due to uncertainty but introduced:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;CachedIndexReader &amp;#8211; soft referenced documents cache. Backed by NotifiableIndex.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TopDocs/TopFieldDocs- and IndexReader cache combined almost replace a fully cached Hits.&lt;/p&gt;

&lt;p&gt;The number of unit tests and detail of them is increasing.&lt;/p&gt;


&lt;p&gt;The plan is now to have the cached reader pre-loading documents to memory from an own thread when server load allows it. &lt;/p&gt;



&lt;p&gt;Also added some abstractation levers used by above:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;AutofreshedIndexReader &amp;#8211; always up to date with the index.&lt;/li&gt;
	&lt;li&gt;ReadOnlyIndexReader &amp;#8211; makes sure the user don&apos;t delete stuff with the decorated reader.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Had some problems with decorating the IndexModifierInterface against Directory in NotifiableIndex, so removed the Index.indexModifierFactory() and introduced a index facade backed version:&lt;/p&gt;

&lt;p&gt;org.apache.lucene.index.facade.IndexModifier(myIndex, analyzer, create)&lt;/p&gt;

&lt;p&gt;where all reader/writer creation is myIndex.indexReaderFactory() and indexWriterFactory();&lt;/p&gt;

&lt;p&gt;Makes the Notifiable code a bit simpler.&lt;/p&gt;
</comment>
                    <comment id="12468139" author="karl.wettin" created="Sun, 28 Jan 2007 18:22:40 +0000"  >&lt;p&gt;new diagram with lots of notes&lt;br/&gt;
(this is also available in the patch as an uxf-file for umlet)&lt;/p&gt;</comment>
                    <comment id="12468142" author="karl.wettin" created="Sun, 28 Jan 2007 18:34:34 +0000"  >&lt;p&gt;Refactored the Term-&amp;gt;Document relationships a bit for speed optimizations. It also resulted with getting all term frequency vector information except for offsets free of charge. More information on that in the class diagram.&lt;/p&gt;

&lt;p&gt;Removed a whole bunch of todo:s in the writer and reader.&lt;/p&gt;

&lt;p&gt;The current lock implementen is worthless. I need to read up on RentrentLock. Or should I perhaps use the lock Directory:s use?&lt;/p&gt;

&lt;p&gt;(And that class diagram is of course granted for ASF, my misstake.)&lt;/p&gt;</comment>
                    <comment id="12469972" author="karl.wettin" created="Sat, 3 Feb 2007 18:15:57 +0000"  >&lt;p&gt;Added support for contrib/memory MemoryIndex, so now it works with readers and writers as if it was any other index.&lt;/p&gt;

&lt;p&gt;Added a consumer level index implementation that handles cache, notifications, and all the stuff this issue is about:&lt;/p&gt;

&lt;p&gt;// This is the instace one is supposed to use for all access against the index in this JVM.&lt;br/&gt;
IndexFacade index = new IndexFacade(new RAMDirectoryIndex());&lt;/p&gt;

&lt;p&gt;// Accessors&lt;br/&gt;
IndexWriterInterface writer = index.indexWriterFactory(anayzler, true);&lt;br/&gt;
Document doc = new Document();&lt;br/&gt;
doc.add(...&lt;br/&gt;
writer.add(doc);&lt;br/&gt;
writer.close();&lt;br/&gt;
IndexReader deleter = index.indexReaderFactory();&lt;br/&gt;
index.getSearcher().search(...&lt;br/&gt;
index.getReader().doc(0)&lt;br/&gt;
deleter.close();&lt;br/&gt;
assertEquals(0, index.getReader().numDocs());&lt;/p&gt;

&lt;p&gt;public class IndexFacade {&lt;/p&gt;

&lt;p&gt;  /** wrapps any storage, optional cache settings */&lt;br/&gt;
  public IndexFacade(I index, CachedSearcher.HitCollectionCacheState hitCollectionCache, boolean topDocsCache, boolean topFieldsCache, boolean documentsCache) throws IOException {&lt;br/&gt;
  public CachedSearcher getSearcher() throws IOException {&lt;/p&gt;

&lt;p&gt;  /** The general consumer searcher to be used when querying this index. Always fresh. */&lt;br/&gt;
  public Searcher getSearcher() throws IOException {&lt;/p&gt;

&lt;p&gt;  /** The general consumer read only index reader to be used when inspecting this index. Always fresh. */&lt;br/&gt;
  public IndexReader getReader() throws IOException {&lt;/p&gt;

</comment>
                    <comment id="12472042" author="karl.wettin" created="Sat, 10 Feb 2007 21:30:55 +0000"  >&lt;p&gt;Can now be loaded from, and be persisted in an FSDirectory. &lt;/p&gt;

&lt;p&gt;The actual implementation is a bit more abtract than that though. It is not super nice yet, but all low level index comparator tests pass. &lt;/p&gt;

&lt;p&gt;Introduced functionallity to load an instantiated from any index reader (e.g. a FSDirectory)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  /**
   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; instantiated index that looks just like the index in a specific state as represented by a reader.
   * 
   * @param sourceIndexReader the source index &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; instantiated index will be copied from.
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the source index is not optimized, or when accesing the source.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; InstantiatedIndex(IndexReader sourceIndexReader) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also introduced class SimpleSychronizedIndex, a class that kind of works like unix command &quot;tee&quot;, makes sure that all changes to a main index (e.g. an instantiated index) also is applied to a mirror index (e.g. the fs directory loaded to the instantiated index at constructor time). &lt;/p&gt;

&lt;p&gt;Some class that handles these two things a single entity will probably be added soon.&lt;/p&gt;

&lt;p&gt;Basiacally this is replicating changes to a secondary index on commits. Thus it takes about twice the time to insert documents. Perhaps the secondary index should be updated in a secondary thread?&lt;/p&gt;
</comment>
                    <comment id="12472043" author="karl.wettin" created="Sat, 10 Feb 2007 21:32:49 +0000"  >&lt;p&gt;the last attachment is of course for ASF distribution. sorry.&lt;/p&gt;</comment>
                    <comment id="12472116" author="karl.wettin" created="Sun, 11 Feb 2007 17:21:37 +0000"  >&lt;p&gt;Introduced a method in instantiated index that appends the entire content to any other index.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/**
   * Adds the complete content of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; instantiated index on to any other index using an index writer.
   * &amp;lt;p/&amp;gt;
   * This can &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; instance be used &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
   * merging multiple instantiated indices
   * and periodically storing persistent snapshots in an FSDirectory.
   * &amp;lt;p/&amp;gt;
   * Non stored offsets are partially rebuilt. This can be improved quite a bit. See comments in code.
   * &amp;lt;p/&amp;gt;
   * The analyzer creates one complete token stream of all fields with the same name the first time it is requested,
   * and after that an empty &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each remaining. todo: &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is a problem?
   * &amp;lt;p/&amp;gt;
   * It can be buggy &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the same token appears as synonym to it self (position increment 0). not really something to worry about.. or?
   *
   * @param indexWriter represents the index on wich to add all the content of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; instantiated index.
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException when accessing parameter indexWriter
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void writeToIndex(IndexWriterInterface indexWriter) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12473886" author="karl.wettin" created="Sat, 17 Feb 2007 07:26:47 +0000"  >&lt;p&gt;Updated spell checker code&lt;/p&gt;</comment>
                    <comment id="12473887" author="karl.wettin" created="Sat, 17 Feb 2007 07:29:11 +0000"  >&lt;p&gt;UML class diagram of the adaptive spell checker with all java docs as comments&lt;/p&gt;</comment>
                    <comment id="12473892" author="karl.wettin" created="Sat, 17 Feb 2007 08:25:49 +0000"  >&lt;p&gt;(now proof read and all)&lt;br/&gt;
Package level java doc of the spell checker:&lt;/p&gt;

&lt;p&gt;A dictionary with weighted suggestions,&lt;br/&gt;
ordered by user activity,&lt;br/&gt;
backed by algorithmic suggestions.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;h1&amp;gt;What, where, when and how.&amp;lt;/h1&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;h2&amp;gt;Goal trees&amp;lt;/h2&amp;gt;&lt;br/&gt;
A user session could contain multiple quests for content.&lt;br/&gt;
For example,&lt;br/&gt;
first the user looks for the Apache licence,&lt;br/&gt;
spells it wrong, inspects different results,&lt;br/&gt;
and then the user searches for the author Ivan Goncharov.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
In this package we call them different goals.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
User activities are represented by a tree of QueryGoalNodes,&lt;br/&gt;
each describes a user query,&lt;br/&gt;
if the current query (goal node) was a suggestion from the system to a previous user query,&lt;br/&gt;
what search results was further inspected,&lt;br/&gt;
when it happend,&lt;br/&gt;
and for how long.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
The biggest task as a consumer when implementing this package&lt;br/&gt;
will be to keep track of what goal node the user came from,&lt;br/&gt;
so that the new queries (goal node) will become children to the parent.&lt;br/&gt;
Probably you add it as meta data to all actions,&lt;br/&gt;
e.g. in the &amp;lt;a href=&quot;?goalID=&amp;gt;, as &amp;lt;input type=hidden name=&quot;goalID&quot; value=&amp;gt;, et c,&lt;br/&gt;
and keep track of them in a Map&amp;lt;Integer, QueryGoalNode&amp;gt; in the user session.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
It is up to the QueryGoalTreeExtractor implementations to decide what&lt;br/&gt;
events in a session are parts of the same goal,&lt;br/&gt;
as we don&apos;t want to suggest the user to check out Goncharov&lt;br/&gt;
when they are looking for the Apache license.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
In the default query goal tree extractor,&lt;br/&gt;
nodes are parts of the same goal as their parent when:&lt;br/&gt;
&amp;lt;ul&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;The queries are the same.&amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;The user took a suggestion from the system.&amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;The current and the parent queries are similair enough.&amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;The queries was entered within short enough time.&amp;lt;/li&amp;gt;&lt;br/&gt;
&amp;lt;/ul&amp;gt;&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;h2&amp;gt;Adaptive training&amp;lt;/h2&amp;gt;&lt;br/&gt;
Adaptive means that the suggestions to a query&lt;br/&gt;
depends on how users previously have been acting.&lt;br/&gt;
This means that the dictionary could be tampered with quite easy&lt;br/&gt;
and you should therefore try to train only with data from trusted users.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
The default trainer implementation works like this:&lt;br/&gt;
&amp;lt;ul&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;If a user accepts the suggestion made by the system, then we increase the score for that suggestion. (positive&lt;br/&gt;
    adaptation)&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;If a user does not accept the suggestion made by the system, then we decrease the score for that suggestion.&lt;br/&gt;
    (negative adaptation)&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;&lt;br/&gt;
    If the goal tree is a single query, one query only (perhaps with multiple inspections)&lt;br/&gt;
    then we adapt negative once again.&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;&lt;br/&gt;
    Suggestions are the queries with inspections, ordered by the classification weight.&lt;br/&gt;
    All the queries in the goal witout inspections will be adpated positive with&lt;br/&gt;
    the query with inspections that has the shortest edit distance.&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;Suggests back from best goal to second best goal. homm -&amp;gt; heroes of might and magic -&amp;gt; homm&amp;lt;/li&amp;gt;&lt;br/&gt;
&amp;lt;/ul&amp;gt;&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;h2&amp;gt;Suggesting&amp;lt;/h2&amp;gt;&lt;br/&gt;
Suggestions are created by the suggester, that navigates a dictionary.&lt;br/&gt;
The default implementation works like this:&lt;br/&gt;
&amp;lt;ul&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;&lt;br/&gt;
    Returns highest scoring suggestion available,&lt;br/&gt;
    unless the score is lower than the suggestion supression threadshold.&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;&lt;br/&gt;
    If there are no suggestions available, the second level suggesters&lt;br/&gt;
    registred to the dictionary are used to produce the suggestions.&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
  &amp;lt;li&amp;gt;&lt;br/&gt;
    If the top scoring suggestion is same as the query,&lt;br/&gt;
    and the second best is not supressed below threadshold,&lt;br/&gt;
    change order&lt;br/&gt;
  &amp;lt;/li&amp;gt;&lt;br/&gt;
&amp;lt;/ul&amp;gt;&lt;br/&gt;
Ignoring a suggestion 50 times or so with a DefaultTrainer makes a score hit 0.05d.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;h2&amp;gt;Second level suggestion&amp;lt;/h2&amp;gt;&lt;br/&gt;
If the dictionary does not contain a suggestion for a given query,&lt;br/&gt;
it will be passed on to any available SecondLevelSuggester,&lt;br/&gt;
usually an algorithmic suggestion scheme&lt;br/&gt;
that hopefully can come up with a suggestion.&lt;br/&gt;
As a user accepts such a suggestion it will be trained&lt;br/&gt;
and become a part of the adaptive layer.&lt;br/&gt;
&amp;lt;h3&amp;gt;Token suggesters&amp;lt;/h3&amp;gt;&lt;br/&gt;
The lowest level of suggestion is single token suggestions,&lt;br/&gt;
and the default implementation is a refactor of the contrib/spellcheck.&lt;br/&gt;
&amp;lt;h3&amp;gt;TokenPhraseSuggester&amp;lt;/h3&amp;gt;&lt;br/&gt;
A layer on top of the single token suggesting that enables muti token (phrase) suggestions.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
For example, the user places the query &quot;thh best game&quot;.&lt;br/&gt;
The matrix of similar tokens are:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
  the best game&lt;br/&gt;
  tho rest fame&lt;br/&gt;
           lame&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;br/&gt;
These can be represented in a finite number of ways:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
  tho best game&lt;br/&gt;
  tho best fame&lt;br/&gt;
  tho best lame&lt;br/&gt;
  tho rest game&lt;br/&gt;
  tho rest fame&lt;br/&gt;
  tho rest lame&lt;br/&gt;
  the best game&lt;br/&gt;
  the best fame&lt;br/&gt;
  the best lame&lt;br/&gt;
  the rest game&lt;br/&gt;
  the rest fame&lt;br/&gt;
  the rest lame&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;br/&gt;
A query is created for each combination, in the default SpanNearQueries, to find valid suggestions.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
If any of the valid hits contains a TermPositionVector&lt;br/&gt;
it will be analyzed and suggest the query in the order of terms in the index.&lt;br/&gt;
E.g. query &quot;camel that broke the staw&quot; is suggested with &quot;straw that broke the camel&quot;&lt;br/&gt;
todo: if term positions available and stored, suggest that for cosmetic reasons.)&lt;/p&gt;


&lt;p&gt;&amp;lt;h1&amp;gt;Consumer interface example&amp;lt;/h1&amp;gt;&lt;br/&gt;
Code from the test cases. &lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
  private SuggestionFacade&amp;lt;R&amp;gt; suggestionFacade;&lt;/p&gt;

&lt;p&gt;  @Override&lt;br/&gt;
  protected void setUp() throws Exception &lt;/p&gt;
{
    suggestionFacade = = new SuggestionFacade&amp;lt;R&amp;gt;();
  }

&lt;p&gt;  public void testBasicTraining() throws Exception &lt;/p&gt;
{
    QueryGoalNode&amp;lt;R&amp;gt; node;

    node = new QueryGoalNode&amp;lt;R&amp;gt;(null, &quot;heroes of nmight and magic&quot;, 3);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of night and magic&quot;, 3);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of might and magic&quot;, 10);
    node.new Inspection(23, QueryGoalNode.GOAL);
    suggestionFacade.queueGoalTree(node.getRoot());

    node = new QueryGoalNode&amp;lt;R&amp;gt;(null, &quot;heroes of night and magic&quot;, 3);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of knight and magic&quot;, 7);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of might and magic&quot;, 20);
    node.new Inspection(23, QueryGoalNode.GOAL);
    suggestionFacade.queueGoalTree(node);

    node = new QueryGoalNode&amp;lt;R&amp;gt;(null, &quot;heroes of might and magic&quot;, 20, 1l);
    suggestionFacade.queueGoalTree(node);

    node = new QueryGoalNode&amp;lt;R&amp;gt;(null, &quot;heroes of night and magic&quot;, 7, 0l);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of light and magic&quot;, 14, 1l);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of might and magic&quot;, 2, 6l);
    node.new Inspection(23, QueryGoalNode.GOAL);
    node.new Inspection(23, QueryGoalNode.GOAL);
    suggestionFacade.queueGoalTree(node);

    node = new QueryGoalNode&amp;lt;R&amp;gt;(null, &quot;heroes of night and magic&quot;, 4, 0l);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of knight and magic&quot;, 17, 1l);
    node = new QueryGoalNode&amp;lt;R&amp;gt;(node, &quot;heroes of might and magic&quot;, 2, 2l);
    node.new Inspection(23, QueryGoalNode.GOAL);
    suggestionFacade.queueGoalTree(node);

    suggestionFacade.flush();

    assertEquals(&quot;heroes of might and magic&quot;, suggestionFacade.didYouMean(&quot;heroes of light and magic&quot;));
    assertEquals(&quot;heroes of might and magic&quot;, suggestionFacade.didYouMean(&quot;heroes of night and magic&quot;));
    assertEquals(&quot;heroes of might and magic&quot;, suggestionFacade.didYouMean(&quot;heroes ofnight andmagic&quot;));
  }
&lt;p&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
Notice the last assertation:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
  assertEquals(&quot;heroes of might and magic&quot;, suggestionFacade.didYouMean(&quot;heroes ofnight andmagic&quot;));&lt;br/&gt;
&amp;lt;/pre&amp;gt;&lt;br/&gt;
The dictionary will strip keys from puctuation and whitespace,&lt;br/&gt;
resulting in better support for de/compositions of words.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
Above example will be user session analyzing and adaptive only,&lt;br/&gt;
no algorithmic suggestions if the user types in something nobody miss spelled before.&lt;br/&gt;
Simply add one to the dictionary:&lt;br/&gt;
&amp;lt;pre&amp;gt;&lt;br/&gt;
  protected void setUp() throws Exception &lt;/p&gt;
{
    suggestionFacade = new SuggestionFacade&amp;lt;R&amp;gt;();

    // your primary index that suggestions must match.
    IndexFacade aprioriIndex = new IndexFacade(new RAMDirectoryIndex());
    String aprioriField = &quot;title&quot;;

    // build the ngram suggester
    IndexFacade ngramIndex = new IndexFacade(new RAMDirectoryIndex());
    NgramTokenSuggester ngramSuggester = new NgramTokenSuggester(ngramIndex);
    ngramSuggester.indexDictionary(new TermEnumIterator(aprioriIndex.getReader(), aprioriField));

    // the greater the better results but with a longer response time.
    int maxSuggestionsPerToken = 3;

    // add ngram suggester wrapped in a single token phrase suggester as second level suggester.
    suggestionFacade.getDictionary().getPrioritesBySecondLevelSuggester().put(new SecondLevelTokenPhraseSuggester(ngramSuggester, aprioriField, false, maxSuggestionsPerToken, new WhitespaceAnalyzer(), aprioriIndex), 1d);
  }
&lt;p&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
&amp;lt;h1&amp;gt;Persistence and memory usage.&amp;lt;/h1&amp;gt;&lt;br/&gt;
By default the dictionary is soft referenced,&lt;br/&gt;
meaning it will consume as much memory it can get,&lt;br/&gt;
and if some other application is in need of memory&lt;br/&gt;
low prioritized (priority is decided by the JVM) instances will be released.&lt;br/&gt;
&amp;lt;p/&amp;gt;&lt;br/&gt;
There is currently no persistence but java.io.Serliazlible available for the in the adaptive layer.&lt;br/&gt;
You need to implement your own Map&amp;lt;String, SuggestionList&amp;gt; that is persistent&lt;br/&gt;
and pass it to the constructor of your directory.&lt;/p&gt;</comment>
                    <comment id="12473924" author="karl.wettin" created="Sat, 17 Feb 2007 11:31:08 +0000"  >&lt;p&gt;I&apos;ll try to keep updated and built javadocs at this location:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ginandtonique.org/~kalle/javadocs/didyoumean/org/apache/lucene/search/didyoumean/package-summary.html&quot; class=&quot;external-link&quot;&gt;http://ginandtonique.org/~kalle/javadocs/didyoumean/org/apache/lucene/search/didyoumean/package-summary.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Sorry for flooding..)&lt;/p&gt;</comment>
                    <comment id="12474179" author="karl.wettin" created="Mon, 19 Feb 2007 14:20:29 +0000"  >&lt;p&gt;Added lots of documentation&lt;/p&gt;</comment>
                    <comment id="12474542" author="karl.wettin" created="Tue, 20 Feb 2007 20:32:14 +0000"  >&lt;p&gt;Support for deleteDocuments in IndexWriterInterface, InstantiatedIndex and NotifiableIndex.&lt;/p&gt;

&lt;p&gt;Somewhat hacky solution to pick up the deletions in NotifiableIndex, but it is a solution.&lt;/p&gt;</comment>
                    <comment id="12475792" author="karl.wettin" created="Sun, 25 Feb 2007 23:37:04 +0000"  >&lt;p&gt;New Patch. Mainly updates in contrib/didyoumean. Merged some core conflicts.&lt;/p&gt;

&lt;p&gt;TestGoalJuror now import 200,000 real user queries from a log containing session id, query, category, timestamp and number of hits, ordered by session id and time. &lt;/p&gt;

&lt;p&gt;This means that the trainer and suggester are not aware of if the user followed or ignored a suggestion from the system, what results was inspected, if the query contained a goal, et c. So it does not work as if trained from the start with the adaptive layer.&lt;/p&gt;

&lt;p&gt;Still, the suggester navigates the dictionary fairly well and misspelled queries will be suggested the correct suggestion, but many correct spelled phrases will recommend something silly.  As one start reporting user interaction to the suggester any silly recommendation should go away.&lt;/p&gt;

&lt;p&gt;In essence, it can only adapt the suggestions positive based on what the QueryGoalJuror says is a goal. Negative is only when a user don&apos;t take a suggestion. It could be solved with bootstrapping. Will mess with that later. &lt;/p&gt;</comment>
                    <comment id="12477611" author="karl.wettin" created="Sat, 3 Mar 2007 13:18:26 +0000"  >&lt;p&gt;Switched from java.util.PriorityQueue to org.apache.lucene.util.PriorityQueue, and made the latter &amp;lt;Generic&amp;gt;. &lt;/p&gt;

&lt;p&gt;Fixed some major bugs in the TermFreqVector inspection for the spell checker.&lt;/p&gt;

&lt;p&gt;Demonstrate in TestGoalJuror how to build an a priori corpus for the ngram token suggester based on user input by inverting the suggestion dictionary. That should probably be extracted to a helper class in the future. This makes it faster to query the a apriori, but it also means that what the system takes for grantent is correct comes from user input, and even if the correct data is what users point out as a real query goal, it does not have to be correct. Although, it makes the suggester much faster.&lt;/p&gt;
</comment>
                    <comment id="12477672" author="karl.wettin" created="Sat, 3 Mar 2007 19:56:30 +0000"  >&lt;p&gt;Removed the dependencies to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-626&quot; title=&quot;Extended spell checker with phrase support and adaptive user session analysis.&quot;&gt;LUCENE-626&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12480240" author="karl.wettin" created="Tue, 13 Mar 2007 02:22:09 +0000"  >&lt;p&gt;Patched contrib/benchmark to support InstantiatedIndex.&lt;/p&gt;

&lt;p&gt;Fixed a bug with mergeFactor.&lt;/p&gt;

&lt;p&gt;Reverted java 1.5&amp;lt;G&amp;gt; changes in PriorityQueue to (ClassCasting). (This is actually a spell checker thingy, but due to local dependencies the changes are located in this patch).&lt;/p&gt;

&lt;p&gt;Removed write locks. These had severe bugs and need to be reconsidered. Should be back in next patch. Using multiple InstantiatedIndex:es as segments on a MultiReader rather than updating the same index, this can be made completly lockless.&lt;/p&gt;






</comment>
                    <comment id="12480241" author="karl.wettin" created="Tue, 13 Mar 2007 02:35:35 +0000"  >&lt;p&gt;A note on, and output from contrib/benchmark:&lt;/p&gt;

&lt;p&gt;I&apos;m getting really poor results compared to my own test and live enviroment stats. At query time I expected maximum 1/6th time spent in InstantiatedIndex than RAMDirectory, but it turns out that in the benchmarker the speed is almost the same as RAMDirectory. Retrieving documents is only 1/5th of the speed rather than maximum 1/60th as expected.&lt;/p&gt;

&lt;p&gt;Investigated the code a bit and noticed that ReadTask creates a new instance of IndexReader and IndexSearcher for each query. Could this be the reason?&lt;/p&gt;

&lt;p&gt;Memory consumption is 3x of a RAMDirectory, but half of the memory is spent on keeping the Document instances in heap. Perhaps it would be interesting to use the same persistency for these as in the Directory implementations.&lt;/p&gt;

&lt;p&gt;The merge factor sweet spot is around 2500, where it turns out to be a little bit faster than the RAMDirectory sweet spot. At defualt 10 InstantiatedIndex consumes about 5x more time than a RAMDirectory. If I fix the locklessness as suggested in previous comment, it most probably will be much faster than a RAMDirectory at any setting.&lt;/p&gt;

&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The sweet spot for this implementation is at 2500.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p/&amp;gt;&lt;/li&gt;
	&lt;li&gt;Benchmark output:&lt;/li&gt;
	&lt;li&gt;&amp;lt;pre&amp;gt;&lt;/li&gt;
	&lt;li&gt;------------&amp;gt; Report sum by Prefix (MAddDocs) and Round (8 about 8 out of 160153)&lt;/li&gt;
	&lt;li&gt;Operation      round  mrg buf cmpnd   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000     0   10  10  true        1        20000         81,4      245,68   200 325 152    268 156 928&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000 -   1 1000  10  true -  -   1 -  -   20000 -  -   494,1 -  -  40,47 - 247 119 072 -  347 025 408&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000     2   10 100  true        1        20000        104,8      190,81   233 895 552    363 720 704&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000 -   3 2000 100  true -  -   1 -  -   20000 -  -   527,2 -  -  37,94 - 266 136 448 -  378 273 792&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000     4   10  10 false        1        20000        103,2      193,75   222 089 792    378 273 792&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000 -   5 3000  10 false -  -   1 -  -   20000 -  -   545,2 -  -  36,69 - 237 917 152 -  378 273 792&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000     6   10 100 false        1        20000        102,7      194,67   237 018 976    378 273 792&lt;/li&gt;
	&lt;li&gt;MAddDocs_20000 -   7 4000 100 false -  -   1 -  -   20000 -  -   535,8 -  -  37,33 - 309 680 640 -  501 968 896&lt;/li&gt;
	&lt;li&gt;&amp;lt;/pre&amp;gt;&lt;br/&gt;
   *&lt;/li&gt;
	&lt;li&gt;@see org.apache.lucene.index.IndexWriterInterface#setMergeFactor(int)&lt;br/&gt;
   */&lt;br/&gt;
  public void setMergeFactor(int mergeFactor) {&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I would not pay to much attention to the numbers below until I&apos;ve got the benchmarker under control, but here are the stats:&lt;/p&gt;

&lt;p&gt;Output from InstantiatedIndex:&lt;/p&gt;

&lt;p&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; ------------&amp;gt; Report Sum By (any) Name (19 about 160153 out of 160153)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Operation                       round mrg buf cmpnd   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Rounds_8                            0  10  10  true        1     25142792     19?842,0    1?267,15   291?055?680    377?163?776&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Populate -  -  -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -   20003 -  -   148,1 -  1?080,73 - 249?711?264 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CreateIndex                         -   -   -     -        8            1      1?142,9        0,01   178?670?624    322?181?120&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; MAddDocs_20000 -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -   20000 -  -   148,0 -  1?080,72 - 249?706?256 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; AddDoc                              -   -   -     -   160000            1        156,2    1?024,02   228?890?976    339?588?384&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Optimize -  -  -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -  -  - 1 -  - 8?000,0 -  -   0,00 - 249?679?056 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CloseIndex                          -   -   -     -        8            1      2?666,7        0,00   249?689?056    354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; OpenReader -  -  -  -  -  -  -  -   - - - - - -   - -  -  16 -  -  -  - 1 -   16?000,0 -  -   0,00 - 246?507?072 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SearchSameRdr_5000                  -   -   -     -        8         5000        806,6       49,59   250?121?728    354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CloseReader -  -  -  -  -  -  -  -  - - - - - -   - -  -  16 -  -  -  - 1 -   16?000,0 -  -   0,00 - 249?146?336 -  354?971?648&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; WarmNewRdr_50                       -   -   -     -        8      1000000  3?118?908,5        2,57   249?616?272    354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchNewRdr_500 -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -  -  500 -  -   806,5 -  -   4,96 - 252?762?128 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvNewRdr_300                   -   -   -     -        8       335500    135?891,9       19,75   250?484?240    354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvRetNewRdr_100 -  -  -  -  -  - - - - - -   - -  -   8 -  -  209216 -  267?326,0 -  -   6,26 - 245?991?776 -  354?926?592&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SearchSameRdr_5000_2500/sec_Par     -   -   -     -        8         5000      1?163,3       34,39   250?892?304    355?016?704&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; WarmNewRdr_50_25/sec_Par -  -  -  - - - - - - -   - -  -   8 -  - 1000000 -  507?872,0 -  -  15,75 - 250?855?648 -  355?016?704&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchNewRdr_50_25/sec_Par            -   -   -     -        8           50         25,5       15,69   254?289?584    355?016?704&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvNewRdr_300_150/sec_Par -  -  - - - - - -   - -  -   8 -  -  335500 -  177?807,2 -  -  15,10 - 251?699?584 -  355?016?704&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvRetNewRdr_100_50/sec_Par     -   -   -     -        8       232076    117?106,6       15,85   252?423?376    355?016?704&lt;/p&gt;


&lt;p&gt;Output from RAMDirectory:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; ------------&amp;gt; Report Sum By (any) Name (19 about 160153 out of 160153)&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Operation                       round mrg buf cmpnd   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Rounds_8                            0  10  10  true        1     25142792     36?177,3      694,99   119?427?680    182?538?240&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Populate -  -  -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -   20003 -  -   482,0 -  - 331,99 - 114?288?472 -  140?156?416&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CreateIndex                         -   -   -     -        8            1      2?666,7        0,00    48?867?204    124?752?384&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; MAddDocs_20000 -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -   20000 -  -   499,2 -  - 320,51 - 111?734?320 -  135?969?280&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; AddDoc                              -   -   -     -   160000            1        604,9      264,49    90?860?048    130?812?488&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; Optimize -  -  -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -  -  - 1 -  -  -  0,7 -  -  11,48 - 123?532?104 -  140?156?416&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CloseIndex                          -   -   -     -        8            1      8?000,0        0,00   114?288?472    140?156?416&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; OpenReader -  -  -  -  -  -  -  -   - - - - - -   - -  -  16 -  -  -  - 1 -  -   197,5 -  -   0,08 - 113?600?096 -  143?475?712&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SearchSameRdr_5000                  -   -   -     -        8         5000      1?209,4       33,07   115?720?920    143?314?944&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; CloseReader -  -  -  -  -  -  -  -  - - - - - -   - -  -  16 -  -  -  - 1 -   16?000,0 -  -   0,00 - 102?590?368 -  145?079?552&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; WarmNewRdr_50                       -   -   -     -        8      1000000     65?734,9      121,70   105?734?472    143?314?944&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchNewRdr_500 -  -  -  -  -  -  -  - - - - - -   - -  -   8 -  -  -  500 -  -   417,4 -  -   9,58 - 104?480?168 -  146?795?008&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvNewRdr_300                   -   -   -     -        8       335500    133?532,3       20,10   116?353?456    146?795?008&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvRetNewRdr_100 -  -  -  -  -  - - - - - -   - -  -   8 -  -  209216 -   60?686,3 -  -  27,58 - 124?211?040 -  146?795?008&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SearchSameRdr_5000_2500/sec_Par     -   -   -     -        8         5000      1?596,0       25,06   114?145?856    146?844?160&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; WarmNewRdr_50_25/sec_Par -  -  -  - - - - - - -   - -  -   8 -  - 1000000 -  105?678,9 -  -  75,70 - 104?830?320 -  146?844?160&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchNewRdr_50_25/sec_Par            -   -   -     -        8           50         25,5       15,70   107?417?728    146?844?160&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvNewRdr_300_150/sec_Par -  -  - - - - - -   - -  -   8 -  -  335500 -  178?635,6 -  -  15,02 - 116?779?312 -  146?835?968&lt;br/&gt;
     &lt;span class=&quot;error&quot;&gt;&amp;#91;java&amp;#93;&lt;/span&gt; SrchTrvRetNewRdr_100_50/sec_Par     -   -   -     -        8       232076    100?569,2       18,46   111?881?152    146?819?584&lt;/p&gt;

</comment>
                    <comment id="12480274" author="doronc" created="Tue, 13 Mar 2007 05:15:55 +0000"  >&lt;p&gt;That&apos;s a good point about the task-benchmark karl! &lt;/p&gt;

&lt;p&gt;All 4 ReaderTasks are reusing the reader if it is already open, but if it is not already open, each task opens a private one, and closes it after the task is done. &lt;/p&gt;

&lt;p&gt;I now see that the javadocs can be improved here - especially in the reader sub-tasks. I will update the documentation to clarify this point. &lt;/p&gt;

&lt;p&gt;Anyhow, for the running tasks to share a reader, the alg part of the .alg file should have something like this:&lt;/p&gt;

&lt;p&gt;  OpenReader&lt;/p&gt;

&lt;p&gt;  ReaderTaskA&lt;br/&gt;
  ReaderTaskB&lt;br/&gt;
  ReaderYaskC&lt;/p&gt;

&lt;p&gt;  CloseReader&lt;/p&gt;

&lt;p&gt;This way all three tasks would share the same, already open, reader.&lt;/p&gt;</comment>
                    <comment id="12481885" author="karl.wettin" created="Sat, 17 Mar 2007 20:11:10 +0000"  >&lt;p&gt;A graph showing performance of hit collection using InstantiatedIndex, RAMDirectory and FSDirectory.&lt;/p&gt;

&lt;p&gt;In essence, there is no great win in pure search time when there are more than 7000 documents. However, retreiving documents is still not associate with any cost what so ever, so in a 250000 sized index that use Lucene for persistency of fields, I still see a boost with 6-10x or so compared to RAMDirectory. &lt;/p&gt;

&lt;p&gt;documents in corpus \t  queries per second &lt;/p&gt;

&lt;p&gt;org.apache.lucene.store.instantiated.InstantiatedIndex@628704&lt;br/&gt;
	250	37530,00&lt;br/&gt;
	500	29610,00&lt;br/&gt;
	750	22612,50&lt;br/&gt;
	1000	19267,50&lt;br/&gt;
	1250	16027,50&lt;br/&gt;
	1500	14737,50&lt;br/&gt;
	1750	13230,00&lt;br/&gt;
	2000	12322,50&lt;br/&gt;
	2250	11482,50&lt;br/&gt;
	2500	10125,00&lt;br/&gt;
	2750	9802,50&lt;br/&gt;
	3000	8508,25&lt;br/&gt;
	3250	8469,80&lt;br/&gt;
	3500	7788,61&lt;br/&gt;
	3750	5207,29&lt;br/&gt;
	4000	5484,52&lt;br/&gt;
	4250	4912,50&lt;br/&gt;
	4500	4420,58&lt;br/&gt;
	4750	4006,49&lt;br/&gt;
	5000	4357,50&lt;br/&gt;
	5250	3886,67&lt;br/&gt;
	5500	3573,93&lt;br/&gt;
	5750	3236,76&lt;br/&gt;
	6000	3602,10&lt;br/&gt;
	6250	3420,00&lt;br/&gt;
	6500	3075,00&lt;br/&gt;
	6750	2805,00&lt;br/&gt;
	7000	2680,98&lt;br/&gt;
	7250	2908,55&lt;br/&gt;
	7500	2769,46&lt;br/&gt;
	7750	2644,86&lt;br/&gt;
	8000	2496,25&lt;br/&gt;
	8250	2377,50&lt;br/&gt;
	8500	2578,71&lt;br/&gt;
	8750	2390,11&lt;br/&gt;
	9000	2160,00&lt;br/&gt;
	9250	2037,96&lt;br/&gt;
	9500	1872,19&lt;br/&gt;
	9750	2041,38&lt;br/&gt;
	10000	1959,12&lt;br/&gt;
Created 10000 documents&lt;/p&gt;

&lt;p&gt;org.apache.lucene.index.facade.RAMDirectoryIndex@af993e&lt;br/&gt;
	250	4845,00&lt;br/&gt;
	500	3986,01&lt;br/&gt;
	750	4330,67&lt;br/&gt;
	1000	4682,82&lt;br/&gt;
	1250	4148,78&lt;br/&gt;
	1500	4847,65&lt;br/&gt;
	1750	4535,23&lt;br/&gt;
	2000	4192,50&lt;br/&gt;
	2250	4203,30&lt;br/&gt;
	2500	3695,65&lt;br/&gt;
	2750	3742,50&lt;br/&gt;
	3000	3485,76&lt;br/&gt;
	3250	3470,76&lt;br/&gt;
	3500	3525,00&lt;br/&gt;
	3750	2877,61&lt;br/&gt;
	4000	3221,78&lt;br/&gt;
	4250	2983,51&lt;br/&gt;
	4500	2982,02&lt;br/&gt;
	4750	2724,55&lt;br/&gt;
	5000	3092,86&lt;br/&gt;
	5250	2646,18&lt;br/&gt;
	5500	2940,00&lt;br/&gt;
	5750	2709,58&lt;br/&gt;
	6000	2423,30&lt;br/&gt;
	6250	2602,50&lt;br/&gt;
	6500	2305,39&lt;br/&gt;
	6750	2462,57&lt;br/&gt;
	7000	1815,00&lt;br/&gt;
	7250	2431,42&lt;br/&gt;
	7500	2171,74&lt;br/&gt;
	7750	2297,90&lt;br/&gt;
	8000	2134,30&lt;br/&gt;
	8250	2308,85&lt;br/&gt;
	8500	2038,98&lt;br/&gt;
	8750	2231,65&lt;br/&gt;
	9000	2097,90&lt;br/&gt;
	9250	2041,38&lt;br/&gt;
	9500	1819,77&lt;br/&gt;
	9750	2102,24&lt;br/&gt;
	10000	1876,87&lt;br/&gt;
Created 10000 documents&lt;/p&gt;


&lt;p&gt;org.apache.lucene.index.facade.FSDirectoryIndex@4112c0&lt;br/&gt;
	250	3448,28&lt;br/&gt;
	500	2422,50&lt;br/&gt;
	750	2677,50&lt;br/&gt;
	1000	2607,39&lt;br/&gt;
	1250	2241,92&lt;br/&gt;
	1500	2486,27&lt;br/&gt;
	1750	2472,53&lt;br/&gt;
	2000	1733,52&lt;br/&gt;
	2250	2325,00&lt;br/&gt;
	2500	2194,21&lt;br/&gt;
	2750	1969,55&lt;br/&gt;
	3000	2125,75&lt;br/&gt;
	3250	2009,00&lt;br/&gt;
	3500	1473,08&lt;br/&gt;
	3750	1858,14&lt;br/&gt;
	4000	1925,57&lt;br/&gt;
	4250	1671,66&lt;br/&gt;
	4500	1786,25&lt;br/&gt;
	4750	1694,15&lt;br/&gt;
	5000	1217,63&lt;br/&gt;
	5250	1595,11&lt;br/&gt;
	5500	1745,75&lt;br/&gt;
	5750	1526,18&lt;br/&gt;
	6000	1431,78&lt;br/&gt;
	6250	1524,66&lt;br/&gt;
	6500	1648,35&lt;br/&gt;
	6750	1544,23&lt;br/&gt;
	7000	1428,22&lt;br/&gt;
	7250	1487,29&lt;br/&gt;
	7500	1494,02&lt;br/&gt;
	7750	1106,13&lt;br/&gt;
	8000	1455,00&lt;br/&gt;
	8250	1284,86&lt;br/&gt;
	8500	1182,63&lt;br/&gt;
	8750	1292,33&lt;br/&gt;
	9000	1399,70&lt;br/&gt;
	9250	1000,00&lt;br/&gt;
	9500	1291,04&lt;br/&gt;
	9750	1359,56&lt;br/&gt;
	10000	1194,62&lt;br/&gt;
Created 10000 documents&lt;/p&gt;</comment>
                    <comment id="12481887" author="karl.wettin" created="Sat, 17 Mar 2007 20:34:24 +0000"  >&lt;p&gt;made graph more readable&lt;/p&gt;</comment>
                    <comment id="12481920" author="hibou" created="Sun, 18 Mar 2007 09:04:52 +0000"  >&lt;p&gt;This a very interesting benchmark graph ! Note that there is just a little mistake in there : the labels of the axes are switched.&lt;/p&gt;

&lt;p&gt;And you said that you still have lot of gain with 250 000 documents because retreiving cost. But if I have to made the choice of having everything in memory, I won&apos;t put the data of my own model into Lucene. I will keep them in memory while not transforming them into stored Lucene Document. I will just transform them for indexing purpose and just keep an ID in the Lucene store which will help me map the search result to my own model data. This will avoid the transformation Lucene-Document -&amp;gt; MyModel-Data.&lt;/p&gt;

&lt;p&gt;(after relooking at the UML diagram) : Unless you allow to put POJO objects in a Document ?&lt;/p&gt;</comment>
                    <comment id="12481952" author="karl.wettin" created="Sun, 18 Mar 2007 15:47:57 +0000"  >&lt;p&gt;&amp;gt; Nicolas Lalev&#233;e &lt;span class=&quot;error&quot;&gt;&amp;#91;18/Mar/07 02:04 AM&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; This a very interesting benchmark graph ! Note that there is just a little mistake in there : the labels of the axes are switched. &lt;/p&gt;

&lt;p&gt;The test is sort of crued, a set of queries with variable complexity that for each iteration is placed on a new IndexSearcher and IndexReader. Index is optimized at all measure points.&lt;/p&gt;

&lt;p&gt;&amp;gt; And you said that you still have lot of gain with 250 000 documents because&lt;br/&gt;
&amp;gt; retreiving cost. But if I have to made the choice of having everything in memory, &lt;br/&gt;
&amp;gt; I won&apos;t put the data of my own model into Lucene. I will keep them in memory&lt;br/&gt;
&amp;gt; while not transforming them into stored Lucene &amp;gt;Document. I will just transform &lt;br/&gt;
&amp;gt; them for indexing purpose and just keep an ID in the Lucene store which will &lt;br/&gt;
&amp;gt; help me map the search result to my own model data. This will avoid the &lt;br/&gt;
&amp;gt; transformation Lucene-Document -&amp;gt; MyModel-Data.&lt;/p&gt;

&lt;p&gt;I can only agree.&lt;/p&gt;

&lt;p&gt;&amp;gt;(after relooking at the UML diagram) : Unless you allow to put POJO objects in a Document ? &lt;/p&gt;

&lt;p&gt;That is the hypothesis. I&apos;ve actually been a bit baffled by the results I&apos;ve seen the last days while benchmarking. &lt;/p&gt;

&lt;p&gt;The application this was orginially built for (the one with 250 000 documents) is fairly busy, on average one query every 10ms 24/7. Peeks at one every 2ms. On the single machine setup with 4GB and Solaris the CPU went from 90% busy to 90% idle when switching from RAMDirectory to InstantiatedIndex. I can at this point not say if this is due to bad use of Lucene and compensating for that with a crazy solution. But I don&apos;t think so. I think I&apos;ve missed a bunch of benchmark factors.&lt;/p&gt;

&lt;p&gt;Since that project, and that was some time ago, I have not implemented any applications with a &quot;normal&quot; corpus using InstantiatedIndex. &lt;/p&gt;

&lt;p&gt;It is the backbone of the active cache (also availabe in this patch). I&apos;m sure people made similar things with MemoryIndex. For each batch of new documents inserted, I apply cached queries on the batch-index to detect if the new data would affect the results associated with the cached query. (The cache does other active things too.)&lt;/p&gt;

&lt;p&gt;In the didyoumean issue I use InstantiatedIndex as a speedy a priori index, a small index with feature selected text (common user queries known to be correct, very common phrases in document titles, et c) that is used to build ngrams for token suggestions, build phrase suggestions, rearrange term order in phrases, et c. As these documents are very small (a small phrase) it is some 10x-20x faster than a RAMDirectory at 50 000 documents.&lt;/p&gt;
</comment>
                    <comment id="12481953" author="karl.wettin" created="Sun, 18 Mar 2007 15:50:15 +0000"  >&lt;p&gt;x/y axis names updates&lt;/p&gt;</comment>
                    <comment id="12517713" author="karl.wettin" created="Sat, 4 Aug 2007 15:28:34 +0100"  >&lt;p&gt;This is a small and completely isolated version of InstantiatedIndex, the results of my &quot;last attempt&quot; thread:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/Last-attempt-tf4153815.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Last-attempt-tf4153815.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It requires no changes to the Lucene core but hogs a bit more RAM and probably depends on your JIT to avoid wasting CPU. So prior required definalization and generalization is replaced by aggregation (strategy pattern). I also had to remove all the polymorphic index handling  (IndexWriterInterface et c), and I have removed the IndexWriter in InstantiatedIndex. One now have to create a new InstantiatedIndex and pass down an IndexReader instead. So there is no appending allowed. Also, there are no locks no more, but that should not be needed anymore.&lt;/p&gt;

&lt;p&gt;The port of the complete test suite from Lucene to the unison index handling has been removed. Ie there are no real test cases that demonstrate this patch. Anything but term vectors and payloads should work great though. The code base is over a year old and these are new features I did not have time to implement or test. &lt;/p&gt;

&lt;p&gt;No new benchmarks. The greatest loss is the loss of features, not CPU and RAM. Perhaps it waste 15% more resources than the previous patch?&lt;/p&gt;

&lt;p&gt;As I personally enjoy the features removed in this patch, I will keep on running Lucene 2.0 and the old version, but this should be easier to understand and maintain if anyone else wants to take a look at it.&lt;/p&gt;</comment>
                    <comment id="12518291" author="gsingers" created="Wed, 8 Aug 2007 02:22:35 +0100"  >&lt;p&gt;Hey Karl,&lt;/p&gt;

&lt;p&gt;I started to look at this, but there are a few stoppers at this point for me:&lt;br/&gt;
1. No build file&lt;br/&gt;
2. Tests are virtually non-existent&lt;/p&gt;

&lt;p&gt;It could also use some documentation, especially on the how and why of the InstantiatedIndex.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Grant&lt;/p&gt;




</comment>
                    <comment id="12518484" author="karl.wettin" created="Wed, 8 Aug 2007 16:59:55 +0100"  >&lt;p&gt;Grant Ingersoll - 07/Aug/07 06:22 PM&lt;br/&gt;
&amp;gt; 1. No build file&lt;br/&gt;
&amp;gt; 2. Tests are virtually non-existent&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; It could also use some documentation, especially on the how and why of the InstantiatedIndex.&lt;/p&gt;

&lt;p&gt;I&apos;ll come up with some stuff asap. &lt;/p&gt;

&lt;p&gt;About tests, the new patch is more or less a redection of the previous patch. The latter contains more or less all tests assimilated to run on instantiated index. WIth the new patch there is no IndexWriter, so I will have to reassimilate it all.&lt;/p&gt;

&lt;p&gt;In the old patch there is a test case that compare two index readers - enumerating all parts of an a priori reader and a test reader comparing the values. It passed in the old patch, so I don&apos;t think there is any problem. I&apos;ll reintroduce it though. Do you think that would be enough, or do you want the assimilated tests back?&lt;/p&gt;

&lt;p&gt;Is the payload API fixed? There is a bunch of TODOs and warnings here and there in the code, the reason for me not implementing  it in this store.&lt;/p&gt;</comment>
                    <comment id="12518489" author="gsingers" created="Wed, 8 Aug 2007 17:16:33 +0100"  >&lt;p&gt;On the Payload question, it is still marked as experimental, but if your patch gets in before anyone changes it, the onus is on that person to make sure the change is functional, so I would think you are fine to assume the current payload is fixed for the time being.&lt;/p&gt;</comment>
                    <comment id="12518555" author="karl.wettin" created="Wed, 8 Aug 2007 22:25:14 +0100"  >&lt;p&gt;Added support for payloads&lt;br/&gt;
Reintroduced InstantiatedIndexWriter (no locks!)&lt;br/&gt;
Reintroduced TestIndicesEquals&lt;br/&gt;
Introduced build.xml&lt;br/&gt;
Introduced pom.xml (this file is missing java 1.5 setting)&lt;br/&gt;
Added some silly javadocs&lt;/p&gt;

&lt;p&gt;It also hit me that I could have a HashMap&amp;lt;Term, Integer&amp;gt; parallell to the List&amp;lt;Term&amp;gt; orderdTerms. The latter is currently beeing binarysearched in TermEnum, and a HashMap would make it much faster, especially as the index grows. Might speed things up alot.&lt;/p&gt;</comment>
                    <comment id="12518570" author="karl.wettin" created="Wed, 8 Aug 2007 23:59:35 +0100"  >
&lt;p&gt;&amp;gt; It also hit me that I could have a HashMap&amp;lt;Term, Integer&amp;gt; parallel to the &lt;br/&gt;
&amp;gt; List&amp;lt;Term&amp;gt; orderdTerms. The latter is currently beeing binarysearched &lt;br/&gt;
&amp;gt; in TermEnum, and a HashMap would make it much faster, especially as&lt;br/&gt;
&amp;gt; the index grows. &lt;/p&gt;

&lt;p&gt;Just looked in to this. There is some performance to gain, but not much. I&apos;ll do some benches later on and see if it was worth it.&lt;/p&gt;

&lt;p&gt;Most binary searches are placed in the IndexWriter, and I honestly don&apos;t care too much about make that part faster if it slows down searching or makes it hog more RAM.&lt;/p&gt;</comment>
                    <comment id="12520125" author="gsingers" created="Thu, 16 Aug 2007 01:17:46 +0100"  >&lt;p&gt;Should I wait on this until you figure this out?&lt;/p&gt;</comment>
                    <comment id="12520132" author="karl.wettin" created="Thu, 16 Aug 2007 02:43:47 +0100"  >&lt;p&gt;Grant Ingersoll - 15/Aug/07 05:17 PM&lt;br/&gt;
&amp;gt; Should I wait on this until you figure this out? &lt;/p&gt;

&lt;p&gt;Please don&apos;t. I&apos;m just thinking really lound.&lt;/p&gt;</comment>
                    <comment id="12520659" author="karl.wettin" created="Fri, 17 Aug 2007 21:24:25 +0100"  >&lt;p&gt;I just found a bug that I can not explain. &lt;/p&gt;

&lt;p&gt;While scoring this one specific phrase query in this one specific corpus of mine, the scorer calls TermPositions.nextPosition() more than TermPositions.freq() times. Never seen this error before, and it does not do this when running against a Directory. TestIndicesEquals does however pass, so it must be me that does not reset currentTermPosition counter, or something along that way.&lt;/p&gt;

&lt;p&gt;I have been debugging for hours and hours in the scorer code in order to understand the difference between II and Directory is, but I can&apos;t figure it out. Completely lost in this (read: any) scorer code.&lt;/p&gt;

&lt;p&gt;It sure is a show stopper if it sometimes does not work, so I&apos;ll try to find the bug. This is the first time I&apos;ve seen it though. I mean, I do use phrase queries in other places in conjunction with this store, and that makes it even more strange.&lt;/p&gt;

&lt;p&gt;I have tried to come up with an isolated test case, but I can&apos;t. I can however pass the corpus and code that produce this error to some specific person, but I&apos;m afraid I can&apos;t post it here.&lt;/p&gt;


&lt;p&gt;There is also a minor TermFreqVector bug that throws a NPE, solved in the next patch.&lt;/p&gt;

&lt;p&gt;Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 12&lt;br/&gt;
	at org.apache.lucene.store.instantiated.InstantiatedTermPositions.nextPosition(InstantiatedTermPositions.java:70)&lt;br/&gt;
	at org.apache.lucene.search.PhrasePositions.nextPosition(PhrasePositions.java:76)&lt;br/&gt;
	at org.apache.lucene.search.PhrasePositions.firstPosition(PhrasePositions.java:65)&lt;br/&gt;
	at org.apache.lucene.search.ExactPhraseScorer.phraseFreq(ExactPhraseScorer.java:34)&lt;br/&gt;
	at org.apache.lucene.search.PhraseScorer.doNext(PhraseScorer.java:94)&lt;br/&gt;
	at org.apache.lucene.search.PhraseScorer.next(PhraseScorer.java:81)&lt;br/&gt;
	at org.apache.lucene.search.DisjunctionSumScorer.initScorerDocQueue(DisjunctionSumScorer.java:105)&lt;br/&gt;
	at org.apache.lucene.search.DisjunctionSumScorer.next(DisjunctionSumScorer.java:144)&lt;br/&gt;
	at org.apache.lucene.search.BooleanScorer2.next(BooleanScorer2.java:360)&lt;br/&gt;
	at org.apache.lucene.search.DisjunctionSumScorer.initScorerDocQueue(DisjunctionSumScorer.java:105)&lt;br/&gt;
	at org.apache.lucene.search.DisjunctionSumScorer.next(DisjunctionSumScorer.java:144)&lt;br/&gt;
	at org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:327)&lt;br/&gt;
	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:146)&lt;br/&gt;
	at org.apache.lucene.search.Searcher.search(Searcher.java:118)&lt;br/&gt;
	at org.apache.lucene.search.Searcher.search(Searcher.java:97)&lt;/p&gt;</comment>
                    <comment id="12520694" author="karl.wettin" created="Fri, 17 Aug 2007 23:09:55 +0100"  >&lt;p&gt;Previously mentioned problems deloused. The phrase (term position) problem turned out to be the constructor InstantiatedIndex(IndexReader) that had a bug, ending up with a index not equal to one created via InstantiatedIndexWriter.&lt;/p&gt;

&lt;p&gt;I also did a bunch of tests on how much it would speed up by replacing the binary searches over lists with hash tables (maps). Gained perhaps 5% speed, but lost quite a bit of RAM, so I reverted those things.&lt;/p&gt;

&lt;p&gt;Do you want more test cases than the TestIndicesEquals?&lt;/p&gt;

&lt;p&gt;Payloads needs to be verified. I never really worked with them, and the Directory-centric test will not be ported easily.&lt;/p&gt;</comment>
                    <comment id="12529649" author="gsingers" created="Sat, 22 Sep 2007 13:52:06 +0100"  >&lt;p&gt;If I understand your test correctly, you have gone through and compared term by term, etc. (vectors, etc.)&lt;/p&gt;

&lt;p&gt;I would like to see payloads tested as well.&lt;/p&gt;

&lt;p&gt;I also think you need a package level javadoc that explains the use cases for this and the basics of using it.&lt;/p&gt;

&lt;p&gt;Also, I notice the caveat about no locking (in the javadocs for InstantiatedIndex) and I notice a TODO as well saying implement locking.  Thoughts on implementing it?&lt;/p&gt;</comment>
                    <comment id="12529734" author="karl.wettin" created="Sun, 23 Sep 2007 08:33:40 +0100"  >&lt;p&gt;Grant Ingersoll - 22/Sep/07 05:52 AM&lt;/p&gt;

&lt;p&gt;&amp;gt; I would like to see payloads tested as well.&lt;/p&gt;

&lt;p&gt;I&apos;m new to payloads and don&apos;t know what makes sense when it comes to populating the aprioi/test indices.  Any preferences? Or should I just randomly add some payloads to the positions of a couple of terms in a couple of documents?&lt;/p&gt;

&lt;p&gt;&amp;gt; package level javadoc&lt;/p&gt;

&lt;p&gt;Any comments on how to include graphics in the documentation? (I&apos;m a big fan of UML, you might have noticed there is quite a bit of ASCII class diagram stubs in the javadocs of fields that represent binary associations, association classes and qualifications.) Also, where should I store the XML used to render the graphics? Just pop it all in the src classpath?&lt;/p&gt;

&lt;p&gt;&amp;gt; I notice a TODO as well saying implement locking. Thoughts on implementing it?&lt;/p&gt;

&lt;p&gt;It used to be a ReentrantLock, but for some reason I can&apos;t seem to recall, this was a bad idea. There are TODO: lock and TODO: release lock tags left throughout the code. I should probably take a look at o.a.l.store.Lock.&lt;/p&gt;


&lt;p&gt;There are three more caveats I know of, but I&apos;m not certain how important they are to fix.&lt;/p&gt;

&lt;p&gt;IndexReader:&lt;/p&gt;

&lt;p&gt;  public Document document(int n, FieldSelector fieldSelector) throws IOException &lt;/p&gt;
{
    // todo: it does not make to much sense to use field selector using this implementation,
    // todo: so it simply ignores this and return everything.
    return document(n);
  }

&lt;p&gt;  public Collection getFieldNames(FieldOption fldOption) {&lt;br/&gt;
    if (fldOption != FieldOption.ALL) &lt;/p&gt;
{
      throw new IllegalArgumentException(&quot;Only FieldOption.ALL implemented.&quot;); // todo
    }


&lt;p&gt;IndexWriter.addDocument does not support readerValue and binaryValue.&lt;/p&gt;

&lt;p&gt;        if (field.isTokenized()) {&lt;br/&gt;
          int termCounter = 0;&lt;br/&gt;
          final TokenStream tokenStream;&lt;br/&gt;
          // todo readerValue(), binaryValue()&lt;br/&gt;
          if (field.tokenStreamValue() != null) {&lt;/p&gt;
</comment>
                    <comment id="12529763" author="hossman" created="Sun, 23 Sep 2007 22:26:33 +0100"  >&lt;p&gt;&amp;gt; Any comments on how to include graphics in the documentation? (I&apos;m a big fan of UML, &lt;br/&gt;
&amp;gt; you might have noticed there is quite a bit of ASCII class diagram stubs in the javadocs of &lt;br/&gt;
&amp;gt; fields that represent binary associations, association classes and qualifications.) Also, where &lt;br/&gt;
&amp;gt; should I store the XML used to render the graphics? Just pop it all in the src classpath?&lt;/p&gt;

&lt;p&gt;images that you want to embed in (or files you want to link to from) javadocs should live in a &quot;doc-files&quot; directory in the package....&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://java.sun.com/j2se/javadoc/writingdoccomments/#images&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/javadoc/writingdoccomments/#images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...iwould put the XML source for the image in there as well, and put a link to it in the javadocs as well.&lt;/p&gt;</comment>
                    <comment id="12530873" author="karl.wettin" created="Fri, 28 Sep 2007 00:49:01 +0100"  >&lt;p&gt;New in this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Payloads added to TestIndicesEquals&lt;/li&gt;
	&lt;li&gt;Package level java docs with UMLet class diagram&lt;/li&gt;
	&lt;li&gt;Some additional todo-tags in the code that shows what can be improved&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ve noticed that there are some differences in the behavior of IndexWriter and InstantiatedIndexWriter when a document containing multiple fields with the same name but different settings, such as:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; d.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Field(&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot; All work and no play makes Jack a dull boy&quot;&lt;/span&gt;, Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
 d.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Field(&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot; All work and no play makes Jack a dull boy&quot;&lt;/span&gt;, Field.Store.NO));
 d.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Field(&lt;span class=&quot;code-quote&quot;&gt;&quot;f&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot; All work and no play makes Jack a dull boy&quot;&lt;/span&gt;, Field.Store.YES, Field.Index.NO_NORMS, Field.TermVector.NO));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would this be considered an invalid document? Should there be a term vector or not? Or perhaps just term vector for the tokens in the first field?&lt;/p&gt;</comment>
                    <comment id="12530875" author="karl.wettin" created="Fri, 28 Sep 2007 00:50:56 +0100"  >&lt;p&gt;Oups, the patch is of course granted ASF licence.&lt;/p&gt;</comment>
                    <comment id="12533013" author="karl.wettin" created="Mon, 8 Oct 2007 01:24:49 +0100"  >&lt;p&gt;In this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Minor discrepancy in IndexReader#norms(String field, byte[] bytes, int offset) between SegmentReader and InstantiatedIndexReader fixed and demonstrated in TestIndicesEquals.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/norms%28String-field%2C-byte---bytes%2C-int-offset%29-tf4580460.html#a13075367&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/norms%28String-field%2C-byte---bytes%2C-int-offset%29-tf4580460.html#a13075367&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Updated maven pom and fixed some typos in documentation.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12535397" author="karl.wettin" created="Wed, 17 Oct 2007 04:17:49 +0100"  >&lt;p&gt;In this path:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;As the Segment-dito, non-mapper term vector methods returns null rather than throwing NPE when term vector is not available.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12536224" author="karl.wettin" created="Fri, 19 Oct 2007 15:00:19 +0100"  >&lt;p&gt;In this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;IndexReader.terms(Term) optimization, initial seek now jit-call away given the term exists, rather than using binary search.&lt;/li&gt;
	&lt;li&gt;A handful of minor optimizations&lt;/li&gt;
	&lt;li&gt;IndexReader.version() mimics Segment-dito&lt;/li&gt;
&lt;/ul&gt;


</comment>
                    <comment id="12536511" author="karl.wettin" created="Sun, 21 Oct 2007 16:44:38 +0100"  >&lt;p&gt;In this patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Replaced all List&amp;lt;T&amp;gt; with T[] as Array.binarySearch is 20% faster than Collections.binarySearch.&lt;/li&gt;
	&lt;li&gt;Ad hoc binarySearch using variable pivot increase speed of TermDocs.skipTo  20%-400%, courtesy of Olivier Chafik.&lt;/li&gt;
	&lt;li&gt;Default InstantiatedWriter.mergeFactor changed from 1 to 2500 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12550209" author="gsingers" created="Mon, 10 Dec 2007 22:11:56 +0000"  >&lt;blockquote&gt;
&lt;p&gt;courtesy of Olivier Chafik&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What does this mean?  He contributed the code personally or you got it from him?  In other words, do you have the authority to assign the ASF copyright for said code?&lt;/p&gt;

&lt;p&gt;FYI, the patch applies clean and compiles.  I still have some benchmarking to do, but would like to commit.&lt;/p&gt;</comment>
                    <comment id="12550215" author="karl.wettin" created="Mon, 10 Dec 2007 22:27:10 +0000"  >&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;Grant Ingersoll - 10/Dec/07 02:11 PM&lt;br/&gt;
&amp;gt; courtesy of Olivier Chafik&lt;br/&gt;
What does this mean? He contributed the code personally or you got it from him? In other words, do you have the authority to assign the ASF copyright for said code?&lt;/p&gt;
{/quote}

&lt;p&gt;Yes, &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ochafik.free.fr/blog/?p=106&quot; class=&quot;external-link&quot;&gt;http://ochafik.free.fr/blog/?p=106&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Karl Wettin dit: &lt;br/&gt;
20 October 2007 at 7:54 pm&lt;br/&gt;
Hi Olivier,&lt;/p&gt;

&lt;p&gt;I was just going nuts over the lack of offset and length in Collections.binarySearch. I was thinking that perhaps a subList would be OK, but it turns out that the overhead of AbstractList.subList (in my case an ArrayList) is huge. It takes 1/3 the time to search the complete subList owner of 5000 instanes compared to instantiate and binarySearch a subListIn(2500, 5000).&lt;/p&gt;

&lt;p&gt;Google suggested your blog post.&lt;/p&gt;

&lt;p&gt;I have based some non-released optimization in &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-550&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-550&lt;/a&gt; on your code. Would you mind donating it to the Apache Software Foundation? Lucene does not state author credits in source code, only in CHANGES.TXT.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-550&quot; title=&quot;InstantiatedIndex - faster but memory consuming index&quot;&gt;&lt;del&gt;LUCENE-550&lt;/del&gt;&lt;/a&gt; is an alternative RAM index store that is up to 100x faster than the standard RAMDirectory and it is built to support my machine learning projects such as &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-626&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-626&lt;/a&gt; and &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-1025&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-1025&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;zOlive dit: &lt;br/&gt;
21 October 2007 at 9:02 am&lt;br/&gt;
Hi Karl,&lt;/p&gt;

&lt;p&gt;Thanks for your message, I&apos;m happy to hear that someone actually made some use of this code !&lt;br/&gt;
Apart from the offset feature, the only specificity of my code is its relative speed for lookups in sorted integer lists, which I&apos;m unsure whether it&apos;s exactly your use case or not.&lt;br/&gt;
However, I will be more than pleased to contribute this tiny piece of code to Apache, and I must say I&apos;m a bit surprised that there isn&apos;t such a method in any of their projects yet (say, in Jakarta Commons - &lt;a href=&quot;http://commons.apache.org/collections/&quot; class=&quot;external-link&quot;&gt;http://commons.apache.org/collections/&lt;/a&gt;).&lt;br/&gt;
Where shall I post it to ?&lt;/p&gt;

&lt;p&gt;Karl Wettin dit: &lt;br/&gt;
21 October 2007 at 4:32 pm&lt;br/&gt;
Thanks!&lt;/p&gt;

&lt;p&gt;You don&apos;t need to post it anywhere, I have simply pasted it in this class of mine and adapted it to fit my needs.&lt;/p&gt;

&lt;p&gt;It is indeed an int[] (actually MyClass[].getInt()) I&apos;m seeking in, the variable pivot is most welcome.&lt;/p&gt;</comment>
                    <comment id="12558640" author="karl.wettin" created="Mon, 14 Jan 2008 15:47:55 +0000"  >&lt;p&gt;I was poking around in the javadocs of this and came to the conclution that InstantiatedIndexWriter is depricated code, that it is enough one can construct InstantiatedIndex using an optimized IndexReader. This makes all InstantiatedIndexes immutable. That makes the no-locks caveat to go away.&lt;/p&gt;

&lt;p&gt;Also, it is a hassle to make sure that InstantiatedIndexWriter work just as IndexWriter does.&lt;/p&gt;

&lt;p&gt;In the future, a segmented Directory-facade could be built on top of this, where each InstantiatedIndex is a segment created by IndexWriter flush. It would potentially be slower to populate this, but it would be compatible with everything. Adding more than one segement will requite merging and optimizing indices forth and back in RAMDirectories a but, but InstantiatedIndexes are usually quite small.&lt;/p&gt;

&lt;p&gt;It feels like much of that code is already there.&lt;/p&gt;

&lt;p&gt;On the matter of RAM consumption, using a profiler I recently noticed a 3.2MB directory of 3-5;3-3;3-5 ngrams with term vectors consumed something like 35MB RAM when loaded to an InstantiatedIndex.&lt;/p&gt;

</comment>
                    <comment id="12571846" author="gsingers" created="Sun, 24 Feb 2008 03:18:08 +0000"  >&lt;p&gt;Did zOlive ever post his code Jakarta Commons?  Without him actually doing it, I don&apos;t know that it is good enough legally to accept it.&lt;/p&gt;

&lt;p&gt;Also, is your last comment such that you think there is a new patch?&lt;/p&gt;</comment>
                    <comment id="12571948" author="karl.wettin" created="Sun, 24 Feb 2008 20:27:23 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Did zOlive ever post his code Jakarta Commons? Without him actually doing it, I don&apos;t know that it is good enough legally to accept it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He did not. Should I ask him to post the code as an ASL-tagged attachment to this issue? Or is commons a better place?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also, is your last comment such that you think there is a new patch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not anytime soon. They are only ideas that could make it a bit less ad hoc. But I&apos;m actually quite happy with the way it works now. The code has sucessfully been used in a handful of commercial projects.&lt;/p&gt;</comment>
                    <comment id="12571956" author="gsingers" created="Sun, 24 Feb 2008 21:08:14 +0000"  >


&lt;p&gt;Commons would be all right, since this is a contrib and it can have  &lt;br/&gt;
dependencies.  But putting it on this patch would be just as useful.   &lt;br/&gt;
Your call.  Putting it into Lucene makes it more likely that it will  &lt;br/&gt;
be addressed as part of this patch, and thus committed.  Going the  &lt;br/&gt;
Commons route is probably for the greater good, but we may not see it  &lt;br/&gt;
for a good long time, depending on their commit/release needs.&lt;/p&gt;



&lt;p&gt;OK.  Once we get the legal piece resolved, I am going to commit.&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;</comment>
                    <comment id="12572154" author="ochafik" created="Mon, 25 Feb 2008 18:38:31 +0000"  >&lt;p&gt;Here is an enhanced binarySearch method for int arrays, which I wrote and wish to donate to the ASF (for the Lucene project or any other purpose), following Karl Wettin&apos;s request.&lt;br/&gt;
This code was initially published on my blog : &lt;a href=&quot;http://ochafik.free.fr/blog/?p=106&quot; class=&quot;external-link&quot;&gt;http://ochafik.free.fr/blog/?p=106&lt;/a&gt;&lt;br/&gt;
Have fun with it !&lt;br/&gt;
&amp;#8211;&lt;br/&gt;
Olivier Chafik&lt;/p&gt;</comment>
                    <comment id="12576657" author="gsingers" created="Sat, 8 Mar 2008 23:36:57 +0000"  >&lt;p&gt;Cleaned up a few things, added CHANGES.txt, added ASL to a file.    I&apos;ll commit tomorrow, pending any more feedback.&lt;/p&gt;</comment>
                    <comment id="12576682" author="karl.wettin" created="Sun, 9 Mar 2008 03:09:22 +0000"  >&lt;p&gt;Added more javadocs.&lt;br/&gt;
The patch is not sticky enough for instantiated/docs/classdiagram.jpg.&lt;/p&gt;</comment>
                    <comment id="12576703" author="karl.wettin" created="Sun, 9 Mar 2008 04:44:11 +0000"  >&lt;p&gt;Some dull colors, rendered via PDF to PNG and then scaled to fit 1024x768. Also softscaled in package.html, but linked to when clicked on.&lt;/p&gt;</comment>
                    <comment id="12578271" author="gsingers" created="Thu, 13 Mar 2008 12:33:55 +0000"  >&lt;p&gt;Committed revision 636745.  Thanks Karl!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12343595">LUCENE-581</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12376423" name="BinarySearchUtils.Apache.java" size="10519" author="ochafik" created="Mon, 25 Feb 2008 18:38:31 +0000" />
                    <attachment id="12377472" name="classdiagram.png" size="62017" author="karl.wettin" created="Sun, 9 Mar 2008 04:44:11 +0000" />
                    <attachment id="12353601" name="HitCollectionBench.jpg" size="159918" author="karl.wettin" created="Sun, 18 Mar 2007 15:50:14 +0000" />
                    <attachment id="12368100" name="LUCENE-550_20071021_no_core_changes.txt" size="111243" author="karl.wettin" created="Sun, 21 Oct 2007 16:44:38 +0100" />
                    <attachment id="12377473" name="LUCENE-550.patch" size="116023" author="karl.wettin" created="Sun, 9 Mar 2008 04:44:11 +0000" />
                    <attachment id="12377470" name="LUCENE-550.patch" size="115145" author="karl.wettin" created="Sun, 9 Mar 2008 03:09:22 +0000" />
                    <attachment id="12377464" name="LUCENE-550.patch" size="115141" author="gsingers" created="Sat, 8 Mar 2008 23:36:57 +0000" />
                    <attachment id="12348943" name="test-reports.zip" size="92304" author="hossman" created="Mon, 15 Jan 2007 09:31:57 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 20 Apr 2006 22:04:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13200</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27177</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>