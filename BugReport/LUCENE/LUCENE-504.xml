<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-504/LUCENE-504.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-504] FuzzyQuery produces a &quot;java.lang.NegativeArraySizeException&quot; in PriorityQueue.initialize if I use Integer.MAX_VALUE as BooleanQuery.MaxClauseCount</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-504</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;PriorityQueue creates an &quot;java.lang.NegativeArraySizeException&quot; when initialized with Integer.MAX_VALUE, because Integer overflows. I think this could be a general problem with PriorityQueue. The Error occured when I set BooleanQuery.MaxClauseCount to Integer.MAX_VALUE and user a FuzzyQuery for searching.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12329613">LUCENE-504</key>
            <summary>FuzzyQuery produces a &quot;java.lang.NegativeArraySizeException&quot; in PriorityQueue.initialize if I use Integer.MAX_VALUE as BooleanQuery.MaxClauseCount</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="henss">Joerg Henss</reporter>
                        <labels>
                    </labels>
                <created>Wed, 1 Mar 2006 23:53:06 +0000</created>
                <updated>Wed, 25 Nov 2009 16:47:49 +0000</updated>
                    <resolved>Fri, 6 Nov 2009 20:15:43 +0000</resolved>
                            <version>1.9</version>
                                <fixVersion>3.0</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>4</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12368324" author="henss" created="Thu, 2 Mar 2006 02:59:14 +0000"  >&lt;p&gt;Simple test showing the error&lt;/p&gt;</comment>
                    <comment id="12414438" author="pborgerm" created="Fri, 2 Jun 2006 23:12:32 +0100"  >&lt;p&gt;Here the same problem, used a MultiFieldQueryParser in combination with fuzzy search which triggered the exception&lt;/p&gt;</comment>
                    <comment id="12415800" author="doronc" created="Mon, 12 Jun 2006 10:07:52 +0100"  >&lt;p&gt;LuceneFAQ item    &quot;Why am I getting a TooManyClauses exception?&quot;   &lt;br/&gt;
suggests:    &quot;use BooleanQuery.setMaxClauseCount(Integer.MAX_VALUE)&quot;. &lt;/p&gt;

&lt;p&gt;This would cause PriorityQueue to create an array of size maxint:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;SUN JRE throws an out-of-memory error.&lt;/li&gt;
	&lt;li&gt;IBM JRE throws a &quot;too large allocation&quot; runtime error.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seems that at least two fixes are required:&lt;br/&gt;
  + BooleanQuery - hard limit on value of maxClauseCount&lt;br/&gt;
  + PriorityQueue - hard limit on size of queue, since it is stored in memory.&lt;/p&gt;

&lt;p&gt;The attached would set 1,000,000 hard limit - defined in PriorityQueu  - I think the most intensive use of&lt;br/&gt;
priority queue is for docs/hits during search, and 1M docs seems sufficient, unless there are uses that I am not aware of.&lt;/p&gt;</comment>
                    <comment id="12415807" author="otis" created="Mon, 12 Jun 2006 11:29:42 +0100"  >&lt;p&gt;I imagine the limit will depend on how big of a heap you allow, no?  What happens if you increase the heap size drammatically with -XmxNNNm?&lt;/p&gt;</comment>
                    <comment id="12415825" author="doronc" created="Mon, 12 Jun 2006 15:28:03 +0100"  >&lt;p&gt;Yes this is correct - e.g. on a win32 machine with 2GB RAM, SUN 1.5 JRE would accept up to Xmx1470m and in that case you could set the limit on the queue  size to 355,638,512 - 17% of maxint, before getting an out of mem error.  &lt;/p&gt;

&lt;p&gt;For allowing the caller maximal flexibility (and responsibility), BooleanQuery could interpret the maxint as a hint saying &quot;maximal possible value&quot; and then silently modify it to maxint-1, thereby avoiding the negative array size issue in PriorityQueue (and possibly fail later with out of memory).&lt;/p&gt;

&lt;p&gt;Is this what you have in mind?&lt;/p&gt;</comment>
                    <comment id="12416168" author="nyh" created="Wed, 14 Jun 2006 18:45:47 +0100"  >&lt;p&gt;Hi Doron and Otis,&lt;/p&gt;

&lt;p&gt;My view is that this bug is a problem in FuzzyQuery, not in PriorityQueue or BooleanQuery. It is the caller&apos;s duty to create a priority queue with a sensible size, and it&apos;s not BooleanQuery&apos;s fault that other classes are using its getMaxClauseCount() wrongly. Moreover, changing PriorityQueue or BooleanQuery in the way Doron did, might potentially have side-effects because they are used in many places in Lucene. How do we know that nowhere in Lucene will we ever need a priority queue with a million elements?&lt;/p&gt;

&lt;p&gt;Therefore I suggest a different patch, changing only FuzzyQuery. &lt;/p&gt;

&lt;p&gt;he idea in the patch I&apos;m attaching is that while FuzzyQuery &lt;b&gt;is allowed to&lt;/b&gt; create BooleanQuery.getMaxClauseCount() clauses, it doesn&apos;t have to do so, and doesn&apos;t need to create a priority queue of that size when this number is huge. I added to FuzzyQuery its own maxClauseCount (with per-instance getter/setter methods)  and FuzzyQuery will never try to create more than this number of clauses, even if Boolean.getMaxClauseCount() is huge.&lt;/p&gt;

&lt;p&gt;I set FuzzyQuery&apos;s default maxClauseCount to 1024, for backward compatibility (this is what happens today when you use BooleanQuery&apos;s defaults). However, it is likely that a user will want to set this number much lower than that. In fact, the whole idea of the priority queue is that it may be enough to take only a small number the most similar terms, so setting a FuzzyQuery&apos;s maxClauseCount to 100 or even 10 makes sense to me. This new feature is an added benefit of my patch.&lt;/p&gt;

&lt;p&gt;My patch also includes Javadoc changes describing the new feature, and a new test case that failed before the fix, and succeeds after this patch. &lt;/p&gt;</comment>
                    <comment id="12416170" author="nyh" created="Wed, 14 Jun 2006 18:47:22 +0100"  >&lt;p&gt;This is my proposed patch described above.&lt;/p&gt;</comment>
                    <comment id="12418446" author="nyh" created="Thu, 29 Jun 2006 19:30:04 +0100"  >&lt;p&gt;Hi Otis, you did not comment on my patch (fuzzyquery.patch), which I think solves your objections to Doron&apos;s previous patch. Do you also see problems in this patchl, or would prefer a different approach to solving this issue?&lt;br/&gt;
If not, perhaps you can commit this patch?&lt;br/&gt;
Thanks in advance, Nadav.&lt;/p&gt;</comment>
                    <comment id="12419624" author="doronc" created="Fri, 7 Jul 2006 07:48:52 +0100"  >&lt;p&gt;I think it makes sense to separate here between efficiency and correctness.&lt;/p&gt;

&lt;p&gt;The proposed fix above deals with efficiency, and maybe it should become a new separate future issue, perhaps also considering a more lazy allocation of space by PriorityQueue.&lt;/p&gt;

&lt;p&gt;This issue is about correctness - setting max-clause &quot;by-the-book&quot; throws an exception - let&apos;s fix just that..&lt;/p&gt;

&lt;p&gt;Modifying PriorityQueue to be tolerant to maxint capacity is one possible solution, though perhaps an overkill.  &lt;/p&gt;

&lt;p&gt;A simpler way is for PriorityQueue to silently decrement its maxsize by 1 in case maxsize is requested to be maxint.&lt;/p&gt;</comment>
                    <comment id="12624345" author="markrmiller@gmail.com" created="Thu, 21 Aug 2008 12:55:09 +0100"  >&lt;p&gt;This really should be fixed. I agree with Nadav, the problem is with the Queries that use MaxClauses to build the priority queue - its just not good use of the queue.&lt;/p&gt;

&lt;p&gt;I also agree with Doron that its really two distinct issues though:&lt;/p&gt;

&lt;p&gt;1. FuzzyQuery et al should be using lazy allocation of some kind. It makes no sense to create an array that large for every multi term query, especially when we direct users to possibly use Integer.MAX_VALUE.&lt;/p&gt;

&lt;p&gt;2.  The FAQ should not say to use Integer.MAX_VALUE if its going to kak with FuzzyQuery. At a minimum, FuzzyQuery should not init the priority queue larger than Integer.MAX_VALUE-1.&lt;/p&gt;

&lt;p&gt;I suppose, that almost combines the 2 issues though - we are telling users to set the max clauses to a number that will force ridiculously wasteful memory allocation. Almost seems like both issues really need to be addressed together. Or maybe just the FAQ changed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12657602" author="george.papas" created="Wed, 17 Dec 2008 22:59:50 +0000"  >&lt;p&gt;Hi, &lt;/p&gt;

&lt;p&gt;This is still an issue in 2.4.0.  I know this is low priority, but has there been any more thinking about how to address this?&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
George.&lt;/p&gt;</comment>
                    <comment id="12731744" author="moebius" created="Thu, 16 Jul 2009 00:38:33 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;something along the line of &lt;br/&gt;
ScoreDoc[] results = searcher.search(query, MAX_NUMBER_OF_HITS).scoreDocs;&lt;br/&gt;
causes a viable crash. I would consider this a &quot;natural&quot; start when trying to write an own searcher (MAX_NUMBER_OF_HITS beeing Integer.MAX_VALUE) and without the sources attached &amp;amp; the (eclipse) debugger I would have never found the problem I&apos;d guess.&lt;br/&gt;
So please do something about this pitfall, if only adding a warning in the javadoc of i.e. Searcher.search(..., int n, ...)&lt;/p&gt;

&lt;p&gt;Thanks &lt;br/&gt;
Florian&lt;/p&gt;</comment>
                    <comment id="12772479" author="ivan.rozhnov" created="Mon, 2 Nov 2009 09:45:22 +0000"  >&lt;p&gt;Hi guys,&lt;/p&gt;

&lt;p&gt;It seems to me that problem is still opened. Can it be fixed with dynamic size of storage in PriorityQueue and couple of similar classes and using MaxClauseCount as top limit for size of such storage. It seems to be very weird to have preinitialized array of Max size in collection constructor.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Ivan&lt;/p&gt;</comment>
                    <comment id="12773001" author="mikemccand" created="Tue, 3 Nov 2009 10:20:45 +0000"  >&lt;p&gt;Since 3.0 is now on Java 1.5, can&apos;t we switch to Java&apos;s PriorityQueue?  Anyone want to cough up a patch?&lt;/p&gt;</comment>
                    <comment id="12773098" author="thetaphi" created="Tue, 3 Nov 2009 18:25:17 +0000"  >&lt;p&gt;We had a discussion about that in another issue. In general PriorityQueue of Java 1.5 does not have the features we need for Lucene (it dynamically grows, but the grow process is not controllable, making it unuseable for collecting TopDocs and so on). But I think for this special case, we could use Java 5&apos;s PQ.&lt;/p&gt;</comment>
                    <comment id="12773402" author="nyh" created="Wed, 4 Nov 2009 07:16:03 +0000"  >&lt;p&gt;Hi Uwe, I think that even though PriorityQueue doesn&apos;t have a size limit, it is easy to implement a size limit: after an add(), if size() becomes greater than the bound, you simply poll() to remove the lowest element (this poll() returns the old object which insertWithOverflow() is to return).&lt;/p&gt;

&lt;p&gt;However, I think it&apos;s a good idea to compare the performance of Java&apos;s PriorityQueue (used as in the paragraph above) . I&apos;m especially worried about the slowdown by the fact that adding a small element (below the current heap&apos;s head) in our code just does one comparison and returns, but in the usage I described above it actually modifies the heap twice (adds the element to the heap and then removes it).&lt;/p&gt;</comment>
                    <comment id="12773421" author="thetaphi" created="Wed, 4 Nov 2009 08:39:41 +0000"  >&lt;p&gt;Nadav:&lt;br/&gt;
I suggest to keep Lucene&apos;s PriorityQueue, because it is a very central and highly optimized part of Liucene. In Lucene 3.0 it is already generified, so it also fits perfectly into Java&apos;s Collection API. The only problem is that the name is now identical to one internal Java class, but we cannot change it without BW breaks.&lt;/p&gt;

&lt;p&gt;For this special issue, we should fix &lt;b&gt;only&lt;/b&gt; FuzzyQuery to use Java5&apos;s PQ, which dynamically grows when new elements are added. And we do not need the upper limit here, like you propsed.&lt;/p&gt;

&lt;p&gt;I will prepare a patch tomorrow in the ApacheCon hacking session.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;EDIT&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We need the upper limit here, but we can implement it like you proposed.&lt;/p&gt;</comment>
                    <comment id="12773569" author="thetaphi" created="Wed, 4 Nov 2009 17:11:22 +0000"  >&lt;p&gt;Here is a patch for this issue, using j.u.PriorityQueue. It currently does not limit the PQ&apos;s number of entries, it just only consumes maxClauseCount ones.&lt;/p&gt;

&lt;p&gt;All tests pass, but they are no real test of the PQ behaviour, as the current test cases do not test more terms than maxClauseCount. So the tests pass in all cases, independent how the compareTo method looks like, so the ordering is not important because the queue never gets full. I will add a test.&lt;/p&gt;

&lt;p&gt;I will also try to implement the max size, but for now, the patch shows, how the code could look like with j.u.PQ.&lt;/p&gt;</comment>
                    <comment id="12773652" author="thetaphi" created="Wed, 4 Nov 2009 21:48:18 +0000"  >&lt;p&gt;Here a patch, that fixes FuzzyQuery. It uses j.u.PQ and has a small optimization to not add ScoreTerms, that would never be seen in the first maxClauseCount terms (tracking a bottom value).&lt;/p&gt;

&lt;p&gt;It also adds an testcase, where the maxClauseCount is lowerd downto 2 and the FuzzyQuery would hit 3 terms, so one too much. This tests the algorithm to not add this entry to the PQ.&lt;/p&gt;

&lt;p&gt;Nadav: The solution you propsed for limiting the number of entries in the PQ does not work, as poll() removes the head element of the queue, not the bottom that falls out. There is no way to remove the bottom value in Java&apos;s PQ easily. So we should j.u.PQ only for this issue.&lt;/p&gt;</comment>
                    <comment id="12773807" author="nyh" created="Thu, 5 Nov 2009 06:55:22 +0000"  >&lt;p&gt;Uwe, you are right, I got confused... Sorry.&lt;/p&gt;</comment>
                    <comment id="12774361" author="thetaphi" created="Fri, 6 Nov 2009 18:42:34 +0000"  >&lt;p&gt;I think I take this one and commit it, is it ok? Thesolution seems to work quite good.&lt;/p&gt;</comment>
                    <comment id="12774392" author="thetaphi" created="Fri, 6 Nov 2009 20:15:43 +0000"  >&lt;p&gt;Committed revision: 833544&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12335329" name="BooleanQuery.java.diff" size="829" author="doronc" created="Mon, 12 Jun 2006 10:10:07 +0100" />
                    <attachment id="12335430" name="fuzzyquery.patch" size="5385" author="nyh" created="Wed, 14 Jun 2006 18:47:22 +0100" />
                    <attachment id="12424055" name="LUCENE-504.patch" size="6429" author="thetaphi" created="Wed, 4 Nov 2009 21:48:17 +0000" />
                    <attachment id="12424042" name="LUCENE-504.patch" size="3380" author="thetaphi" created="Wed, 4 Nov 2009 17:11:22 +0000" />
                    <attachment id="12335330" name="PriorityQueue.java.diff" size="895" author="doronc" created="Mon, 12 Jun 2006 10:10:07 +0100" />
                    <attachment id="12323567" name="TestFuzzyQueryError.java" size="2355" author="henss" created="Thu, 2 Mar 2006 02:59:14 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 2 Jun 2006 22:12:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13246</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27223</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>