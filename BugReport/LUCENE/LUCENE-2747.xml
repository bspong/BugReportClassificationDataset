<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:01:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2747/LUCENE-2747.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2747] Deprecate/remove language-specific tokenizers in favor of StandardTokenizer</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2747</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;As of Lucene 3.1, StandardTokenizer implements UAX#29 word boundary rules to provide language-neutral tokenization.  Lucene contains several language-specific tokenizers that should be replaced by UAX#29-based StandardTokenizer (deprecated in 3.1 and removed in 4.0).  The language-specific &lt;b&gt;analyzers&lt;/b&gt;, by contrast, should remain, because they contain language-specific post-tokenization filters.  The language-specific analyzers should switch to StandardTokenizer in 3.1.&lt;/p&gt;

&lt;p&gt;Some usages of language-specific tokenizers will need additional work beyond just replacing the tokenizer in the language-specific analyzer.  &lt;/p&gt;

&lt;p&gt;For example, PersianAnalyzer currently uses ArabicLetterTokenizer, and depends on the fact that this tokenizer breaks tokens on the ZWNJ character (zero-width non-joiner; U+200C), but in the UAX#29 word boundary rules, ZWNJ is not a word boundary.  Robert Muir has suggested using a char filter converting ZWNJ to spaces prior to StandardTokenizer in the converted PersianAnalyzer.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12479402">LUCENE-2747</key>
            <summary>Deprecate/remove language-specific tokenizers in favor of StandardTokenizer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="steve_rowe">Steve Rowe</reporter>
                        <labels>
                    </labels>
                <created>Mon, 8 Nov 2010 20:07:33 +0000</created>
                <updated>Wed, 30 Mar 2011 16:50:19 +0100</updated>
                    <resolved>Tue, 7 Dec 2010 19:52:05 +0000</resolved>
                            <version>3.1</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12929733" author="rcmuir" created="Mon, 8 Nov 2010 20:56:54 +0000"  >&lt;p&gt;here&apos;s a quick stab at a patch.&lt;/p&gt;

&lt;p&gt;I had to add at least minimal support to ReusableAnalyzerBase in case you want charfilters,&lt;br/&gt;
since it doesn&apos;t have any today.&lt;/p&gt;

&lt;p&gt;maybe there is a better way to do it though.&lt;/p&gt;</comment>
                    <comment id="12929737" author="thetaphi" created="Mon, 8 Nov 2010 21:08:11 +0000"  >&lt;p&gt;CharFilter must at least also implement read() to read one char. This is not needed by most tokenizers, but like that its incomplete. It does &lt;b&gt;not&lt;/b&gt; need to impl char[] without offset and count.&lt;/p&gt;

&lt;p&gt;Else looks fine for now in reusable.&lt;/p&gt;</comment>
                    <comment id="12929738" author="rcmuir" created="Mon, 8 Nov 2010 21:13:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;CharFilter must at least also implement read() to read one char. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats incorrect.&lt;br/&gt;
only read(char[] cbuf, int off, int len)  is abstract in Reader.&lt;br/&gt;
CharStream extends Reader, but only adds correctOffset.&lt;br/&gt;
CharFilter extends CharStream, but only delegates read(char[] cbuf, int off, int len) &lt;/p&gt;

&lt;p&gt;So implementing read() only adds useless code duplication here.&lt;/p&gt;</comment>
                    <comment id="12929826" author="thetaphi" created="Mon, 8 Nov 2010 23:48:31 +0000"  >&lt;p&gt;Ay, ay &quot;Code Dup Policeman&quot;.&lt;/p&gt;

&lt;p&gt;From perf standpoint for real FilterReaders in java.io that would be no-go, but here it&apos;s fine as Tokenizers always buffer. Also java.io&apos;s FilterReader are different and delegate this method, but not CharFilter.&lt;/p&gt;</comment>
                    <comment id="12929834" author="rcmuir" created="Mon, 8 Nov 2010 23:55:49 +0000"  >&lt;p&gt;Wait, thats an interesting point, any advantage to actually using &quot;real FilterReaders&quot; for this API?&lt;/p&gt;</comment>
                    <comment id="12929934" author="dmsmith555" created="Tue, 9 Nov 2010 04:20:39 +0000"  >&lt;p&gt;I&apos;m not too keen on this. For classics and ancient texts the standard analyzer is not as good as the simple analyzer. I think it is important to have a tokenizer that does not try to be too smart. I think it&apos;d be good to have a SimpleAnalyzer based upon UAX#29, too.&lt;/p&gt;

&lt;p&gt;Then I&apos;d be happy.&lt;/p&gt;</comment>
                    <comment id="12929936" author="steve_rowe" created="Tue, 9 Nov 2010 04:25:01 +0000"  >&lt;p&gt;Robert, your patch looks good - I have a couple of questions:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;You removed &lt;tt&gt;TestHindiFilters.testTokenizer()&lt;/tt&gt;, &lt;tt&gt;TestIndicTokenizer.testBasics()&lt;/tt&gt; and &lt;tt&gt;TestIndicTokenizer.testFormat()&lt;/tt&gt;, but these would be useful in &lt;tt&gt;TestStandardAnalyzer&lt;/tt&gt; and &lt;tt&gt;TestUAX29Tokenizer&lt;/tt&gt;, wouldn&apos;t they?&lt;/li&gt;
	&lt;li&gt;You did not remove &lt;tt&gt;ArabicLetterTokenizer&lt;/tt&gt; and &lt;tt&gt;IndicTokenizer&lt;/tt&gt;, presumably so that they can be used with Lucene 4.0+ when the supplied &lt;tt&gt;Version&lt;/tt&gt; is less than 3.1 &amp;#8211; good catch, I had forgotten this requirement &amp;#8211; but when can we actually get rid of these?  Since they will be staying, shouldn&apos;t their tests remain too, but using &lt;tt&gt;Version.LUCENE_30&lt;/tt&gt; instead of &lt;tt&gt;TEST_VERSION_CURRENT&lt;/tt&gt;?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12929945" author="steve_rowe" created="Tue, 9 Nov 2010 04:43:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m not too keen on this. For classics and ancient texts the standard analyzer is not as good as the simple analyzer. I think it is important to have a tokenizer that does not try to be too smart. I think it&apos;d be good to have a SimpleAnalyzer based upon UAX#29, too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;tt&gt;UAX29Tokenizer&lt;/tt&gt; could be combined with &lt;tt&gt;LowercaseFilter&lt;/tt&gt; to provide that, no?&lt;/p&gt;

&lt;p&gt;Robert is arguing in the reopened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2167&quot; title=&quot;Implement StandardTokenizer with the UAX#29 Standard&quot;&gt;&lt;del&gt;LUCENE-2167&lt;/del&gt;&lt;/a&gt; for &lt;tt&gt;StandardTokenizer&lt;/tt&gt; to be stripped down so that it only implements UAX#29 rules (i.e., dropping URL+Email recognition), so if that comes to pass, &lt;tt&gt;StandardAnalyzer&lt;/tt&gt; would just be UAX#29+lowercase+stopword (with English stopwords by default, but those can be overridden in the ctor) &amp;#8211; would that make you happy?&lt;/p&gt;</comment>
                    <comment id="12930024" author="rcmuir" created="Tue, 9 Nov 2010 09:15:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;You removed TestHindiFilters.testTokenizer(), TestIndicTokenizer.testBasics() and TestIndicTokenizer.testFormat(), but these would be useful in TestStandardAnalyzer and TestUAX29Tokenizer, wouldn&apos;t they?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;oh, i just deleted everything associated with that tokenizer...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You did not remove ArabicLetterTokenizer and IndicTokenizer, presumably so that they can be used with Lucene 4.0+ when the supplied Version is less than 3.1 - good catch, I had forgotten this requirement - but when can we actually get rid of these? Since they will be staying, shouldn&apos;t their tests remain too, but using Version.LUCENE_30 instead of TEST_VERSION_CURRENT?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;i removed the indictokenizer (unreleased) and deleted its tests.&lt;br/&gt;
but i kept and deprecated the arabic one, since we have released it.&lt;/p&gt;</comment>
                    <comment id="12930072" author="simonw" created="Tue, 9 Nov 2010 10:28:00 +0000"  >&lt;p&gt;I looked at the patch briefly and the charStream(Reader) extension looks good to me while I would make it protected and throw a IOException. Since this API is public and folks will use it in the wild we need to make sure we don&apos;t have to add the exception later or people creating Readers have to play tricks just because the interface has no IOException. About making it protected, do we need to call that in a non-protected context, maybe I miss something..&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Reader charStream(Reader reader) {
   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; reader;
 }

&lt;span class=&quot;code-comment&quot;&gt;// should be 
&lt;/span&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Reader charStream(Reader reader) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException{
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; reader;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12930073" author="rcmuir" created="Tue, 9 Nov 2010 10:34:22 +0000"  >&lt;p&gt;Simon: i agree with both those points... we should change the method signature.&lt;/p&gt;

&lt;p&gt;also i called it charStream (this is what Solr&apos;s analyzer calls it), but this is slightly confusing since the api is all Reader-based.&lt;br/&gt;
alternatively we could give this a different name, wrapReader or something... not sure, i didnt have any better ideas than charStream.&lt;/p&gt;
</comment>
                    <comment id="12930075" author="simonw" created="Tue, 9 Nov 2010 10:46:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;...alternatively we could give this a different name, wrapReader or something... not sure, i didnt have any better ideas than charStream.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;wrapReader seem to be to specific what about initReader?&lt;/p&gt;</comment>
                    <comment id="12930090" author="rcmuir" created="Tue, 9 Nov 2010 11:10:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m not too keen on this. For classics and ancient texts the standard analyzer is not as good as the simple analyzer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DM, can you elaborate here? &lt;/p&gt;

&lt;p&gt;Are you speaking of the existing StandardAnalyzer in previous releases, that doesn&apos;t properly deal with tokenizing diacritics, etc?&lt;br/&gt;
This is the reason these &quot;special&quot; tokenizers exist: to work around those bugs.&lt;br/&gt;
but StandardTokenizer now handles this stuff fine, and they are obselete.&lt;/p&gt;

&lt;p&gt;I&apos;m confused though, in previous releases how SimpleAnalyzer would ever be any better, since it would barf on these diacritics too,&lt;br/&gt;
it only emits tokens that are runs of Character.isLetter&lt;/p&gt;

&lt;p&gt;Or is there something else i&apos;m missing here?&lt;/p&gt;</comment>
                    <comment id="12930102" author="rcmuir" created="Tue, 9 Nov 2010 11:54:11 +0000"  >&lt;p&gt;here&apos;s an updated patch.&lt;/p&gt;

&lt;p&gt;in reality the previous patch was a problem: because initReader() was in the TokenStream components,&lt;br/&gt;
it caused code duplication in any Analyzer, as it had to specifiy its CharFilter twice: once in the createComponents for the initial Reader,&lt;br/&gt;
and once in the TokenStreamComponents implementation for reset(Reader).&lt;/p&gt;

&lt;p&gt;So i moved this to just be a method of ReusableAnalyzerBase.&lt;/p&gt;

&lt;p&gt;Also, i didn&apos;t apply the &apos;throws IOException&apos;. After re-thinking, there is no need to do this.&lt;br/&gt;
None of our CharFilters for example, throw IOExceptions in their ctors.&lt;br/&gt;
Even the Analyzer.tokenStream method cannot throw IOException.&lt;/p&gt;

&lt;p&gt;We shouldn&apos;t add &apos;throws X exception&apos; just because some arbitrary user class MIGHT throw it,&lt;br/&gt;
they might throw SQLException, or InvalidMidiDataException too.&lt;/p&gt;</comment>
                    <comment id="12930119" author="dmsmith555" created="Tue, 9 Nov 2010 13:54:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;DM, can you elaborate here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was a bit trigger happy with the comment. I should have looked at the code rather than the jira comments alone. The old StandardAnalyzer had a kitchen sink approach to tokenizations trying to do too much with &lt;b&gt;modern&lt;/b&gt; constructs, e.g. URLs, email addresses, acronyms.... It and SimpleAnalyzer would produce about the same stream on &quot;old&quot; English and some other texts, but the StandardAnalyzer was much slower. (I don&apos;t remember how slow, but it was obvious.)&lt;/p&gt;

&lt;p&gt;Both of these were weak when it came to non-English/non-Western texts. Thus I could take the language specific tokenizers, lists of stop words, stemmers and create variations of the SimpleAnalyzer that properly handled a particular language. (I created my own analyzers because I wanted to make stop words and stemming optional)&lt;/p&gt;

&lt;p&gt;In looking at the code in trunk (should have done that before making my comment), I see that UAX29Tokenizer is duplicated in the StandardAnalyzer&apos;s jflex and that ClassicAnalyzer is the old jflex. Also, the new StandardAnalyzer does a lot less.&lt;/p&gt;

&lt;p&gt;If I understand the suggestion of this and the other 2 issues, StandardAnalyzer will no longer handle modern constructs. As I see it this is what SimpleAnalyzer should be: Based on UAX29 and does little else. Thus my confusion. Is there a point to having SimpleAnalyzer? Shouldn&apos;t UAX29Tokenizer be moved to core? (What is core anyway?)&lt;/p&gt;

&lt;p&gt;And if I understand where this is going: Would there be a way to plugin ICUTokenizer as a replacement for UAX29Tokenizer into StandardTokenizer, such that all Analyzers using StandardTokenizer would get the alternate implementation?&lt;/p&gt;</comment>
                    <comment id="12930137" author="rcmuir" created="Tue, 9 Nov 2010 14:32:50 +0000"  >&lt;p&gt;DM, thanks, I see exactly where you are coming from.&lt;/p&gt;

&lt;p&gt;I see your point: previously it was much easier to take something like SimpleAnalyzer and &apos;adapt&apos; it to a given language based on things like unicode properties.&lt;br/&gt;
In fact thats exactly what we did in the cases here (Arabic, Persian, Hindi, etc)&lt;/p&gt;

&lt;p&gt;But now we can actually tokenize &quot;correctly&quot; for more languages with jflex, thanks to its improved unicode support, and its superior to these previous hacks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;to try to answer some of your questions (all my opinion):&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there a point to having SimpleAnalyzer&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess so, a lot of people can use this if they have english-only content and are probably happy with discard numbers etc... its not a big loss to me if it goes though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t UAX29Tokenizer be moved to core? (What is core anyway?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In trunk (4.x codeline) there is no core, contrib, or solr for analyzer components any more. they are all combined into modules/analysis.&lt;br/&gt;
In branch_3x (3.x codeline) we did not make this rather disruptive refactor: there UAX29Tokenizer is in fact in lucene core.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would there be a way to plugin ICUTokenizer as a replacement for UAX29Tokenizer into StandardTokenizer, such that all Analyzers using StandardTokenizer would get the alternate implementation?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Personally, i would prefer if we move towards a factory model where things like these supplied &quot;language analyzers&quot; are actually xml/json/properties snippets.&lt;br/&gt;
In other words, they are just example configurations that builds your analyzer, like solr does.&lt;br/&gt;
This is nice, because then you dont have to write code to easily customize how your analyzer works.&lt;/p&gt;

&lt;p&gt;I think we have been making slow steps towards this, just doing basic things like moving stopwords lists to .txt files.&lt;br/&gt;
But i think the next step would be &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2510&quot; title=&quot;migrate solr analysis factories to analyzers module&quot;&gt;&lt;del&gt;LUCENE-2510&lt;/del&gt;&lt;/a&gt;, where we have factories/config attribute parsers for all these analysis components already written.&lt;/p&gt;

&lt;p&gt;Then we could have support for declarative analyzer specification via xml/json/.properties/whatever, and move all these Analyzers to that.&lt;br/&gt;
I still think you should be able to code up your own analyzer, but in my opinion this is much easier and preferred for the ones we supply.&lt;/p&gt;

&lt;p&gt;Also i think this would solve a lot of analyzer-backwards-compat problems, because then our supplied analyzers are really just configuration file examples,&lt;br/&gt;
and we can change our examples however we want... someone can use their old config file (and hopefully old analysis module jar file!) to guarantee&lt;br/&gt;
the exact same behavior if they want.&lt;/p&gt;

&lt;p&gt;Finally, most of the benefits of ICUTokenizer are actually in the UAX29 support... the tokenizers are pretty close with some minor differences:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the jflex-based implementation is faster, and better in my opinion.&lt;/li&gt;
	&lt;li&gt;the ICU-based implementation allows tailoring, and supplies tailored tokenization for several complex scripts (jflex doesnt have this... yet)&lt;/li&gt;
	&lt;li&gt;the ICU-based implementation works with all of unicode, at the moment jflex is limited to the basic multilingual plane.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In my opinion the last 2 points will probably be eventually resolved... i could see our ICUTokenizer possibly becoming obselete down the road &lt;br/&gt;
by some better jflex support, though it would have to probably have hooks into ICU for the complex script support (so we get it for free from ICU)&lt;/p&gt;</comment>
                    <comment id="12930448" author="dmsmith555" created="Wed, 10 Nov 2010 02:22:25 +0000"  >&lt;p&gt;Robert, I think we are on the same wavelength. Thanks.&lt;/p&gt;

&lt;p&gt;I like the idea of declarative analyzers, too.&lt;/p&gt;

&lt;p&gt;Regarding the &quot;last 2 points&quot; has anyone given input to the JFlex team on these needs?&lt;/p&gt;</comment>
                    <comment id="12930470" author="steve_rowe" created="Wed, 10 Nov 2010 04:45:26 +0000"  >&lt;p&gt;DM, I&apos;m a committer on the JFlex team.  About the second to last point: when Robert said &quot;(jflex doesnt have this... yet)&quot; he meant the jflex-based implementation, not JFlex itself.&lt;/p&gt;

&lt;p&gt;About the last point, JFlex is shooting for level 1 compliance with &lt;a href=&quot;http://unicode.org/reports/tr18/&quot; class=&quot;external-link&quot;&gt;UTS#18 Unicode Regular Expressions&lt;/a&gt;, which requires conforming implementations to &quot;handle the full range of Unicode code points, including values from U+FFFF to U+10FFFF.&quot;&lt;/p&gt;</comment>
                    <comment id="12930578" author="dmsmith555" created="Wed, 10 Nov 2010 11:28:29 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t UAX29Tokenizer be moved to core? (What is core anyway?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In trunk (4.x codeline) there is no core, contrib, or solr for analyzer components any more. they are all combined into modules/analysis.&lt;br/&gt;
In branch_3x (3.x codeline) we did not make this rather disruptive refactor: there UAX29Tokenizer is in fact in lucene core.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I meant o.a.l.analysis.core. I&apos;d expect the &lt;b&gt;premier&lt;/b&gt; analyzers to be in core.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Is there a point to having SimpleAnalyzer&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess so, a lot of people can use this if they have english-only content and are probably happy with discard numbers etc... its not a big loss to me if it goes though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess I meant: Shouldn&apos;t the SimpleAnalyzer just be constructed the same as StandardAnalyzer with the addition of a Filter that pitch tokens that are not needed?&lt;br/&gt;
With the suggestion in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2167&quot; title=&quot;Implement StandardTokenizer with the UAX#29 Standard&quot;&gt;&lt;del&gt;LUCENE-2167&lt;/del&gt;&lt;/a&gt; to use UAX29Tokenizer for StandardAnalyzer, effectively deprecating EMAIL and URL and possibly adding some kind of PUNCTUATION (so that URLs/emails/acronyms... can be reconstructed, if someone desires), the StandardAnalyzer is about as simple as one could get and properly handle non-english/non-western languages. It just creates ALPHANUM,  NUM and PUNCTUATION (if added) that SimpleAnalyzer does not care about.&lt;/p&gt;</comment>
                    <comment id="12930580" author="rcmuir" created="Wed, 10 Nov 2010 11:41:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;I meant o.a.l.analysis.core. I&apos;d expect the premier analyzers to be in core.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess the package doesn&apos;t make a big difference to me, all the analyzers are in one place and the same.&lt;br/&gt;
its true we mixed the &quot;core&quot; analysis stuff with contrib and solr, but if there are warts with the contrib stuff,&lt;br/&gt;
we should be able to clean it up (I think this has been happening)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I guess I meant: Shouldn&apos;t the SimpleAnalyzer just be constructed the same as StandardAnalyzer with the addition of a Filter that pitch tokens that are not needed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so, this seems like a trap. Lots of people use StandardTokenizer without any filter... I don&apos;t think &lt;br/&gt;
it should emit trash (punctuation). if you want to do the other stuff, you can use ClassicTokenizer, or even &lt;br/&gt;
WhitespaceTokenizer and filter to your heart&apos;s content.&lt;/p&gt;</comment>
                    <comment id="12930585" author="dmsmith555" created="Wed, 10 Nov 2010 12:45:01 +0000"  >&lt;p&gt;Robert, Let me ask another way. How about implementing StandardTokenizer using jflex to be UAX29Tokenizer minus NUM and ALPHANUM?&lt;/p&gt;</comment>
                    <comment id="12930598" author="steve_rowe" created="Wed, 10 Nov 2010 14:06:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;How about implementing StandardTokenizer using jflex to be UAX29Tokenizer minus NUM and ALPHANUM?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DM, ALPHANUM is the only &quot;word&quot; token type - there is no ALPHA or WORD type - from the UAX29Tokenizer javadocs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tokens produced are of the following types:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&amp;lt;ALPHANUM&amp;gt;: A sequence of alphabetic and numeric characters&lt;/li&gt;
	&lt;li&gt;&amp;lt;NUM&amp;gt;: A number&lt;/li&gt;
	&lt;li&gt;&amp;lt;SOUTHEAST_ASIAN&amp;gt;: A sequence of characters from South and Southeast Asian languages, including Thai, Lao, Myanmar, and Khmer&lt;/li&gt;
	&lt;li&gt;&amp;lt;IDEOGRAPHIC&amp;gt;: A single CJKV ideographic character&lt;/li&gt;
	&lt;li&gt;&amp;lt;HIRAGANA&amp;gt;: A single hiragana character&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;So I guess you think that StandardAnalyzer should exclude tokens that have numeric characters in them?&lt;/p&gt;</comment>
                    <comment id="12930601" author="rcmuir" created="Wed, 10 Nov 2010 14:16:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;Robert, Let me ask another way. How about implementing StandardTokenizer using jflex to be UAX29Tokenizer minus NUM and ALPHANUM?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think, as i already commented, that it would be best if StandardTokenizer just implemented the UAX#29 algorithm.&lt;br/&gt;
its a great default and I dont think we should try to alter it.&lt;/p&gt;</comment>
                    <comment id="12930670" author="dmsmith" created="Wed, 10 Nov 2010 17:38:31 +0000"  >&lt;p&gt;Robert/Steven, I&apos;m sorry. I fat fingered the last post. I really need to take more care.&lt;br/&gt;
    s/Standard/Simple/;&lt;/p&gt;

&lt;p&gt;That is, SimpleAnalyzer is not appropriate for many languages. If it were based upon a variation of UAX29Tokenizer, but didn&apos;t handle NUM or ALPHANUM, but WORD instead, it would be the same type of token stream, just alpha words.&lt;/p&gt;

&lt;p&gt;Regarding compatibility: I think the results for English would be nearly, if not, identical. Western European would only be slightly off from identical. But for other languages it would be an improvement.&lt;/p&gt;

&lt;p&gt;At this point, I&apos;m content with what you guys are doing with non-English texts. Great job.&lt;/p&gt;</comment>
                    <comment id="12930674" author="steve_rowe" created="Wed, 10 Nov 2010 17:48:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;That is, SimpleAnalyzer is not appropriate for many languages. If it were based upon a variation of UAX29Tokenizer, but didn&apos;t handle NUM or ALPHANUM, but WORD instead, it would be the same type of token stream, just alpha words.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DM, if you want, I could help you convert UAX29Tokenizer in this way - I hang out on IRC #lucene and #lucene-dev a lot of the time.  I think you&apos;d want to call it something other than SimpleAnalyzer, though - maybe UAX29AlphabeticTokenizer?&lt;/p&gt;</comment>
                    <comment id="12930681" author="rcmuir" created="Wed, 10 Nov 2010 17:58:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;That is, SimpleAnalyzer is not appropriate for many languages. If it were based upon a variation of UAX29Tokenizer, but didn&apos;t handle NUM or ALPHANUM, but WORD instead, it would be the same type of token stream, just alpha words.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, now i understand you, and yes I agree...  My question is, should we even bother fixing it? Like would anyone who actually cares about unicode really want only some hacked subset of UAX#29 ?&lt;/p&gt;

&lt;p&gt;These simple ones like SimpleAnalyzer, WhitespaceAnalyzer, StopAnalyzer are all really bad for Unicode text in different ways, though Simple/Stop are bigger offenders i think, because they will separate a base character from its combining characters (in my opinion, this should always be avoided) and worse: they will break on these.&lt;/p&gt;

&lt;p&gt;But people using them are probably happy? e.g. you can do like Solr,  use whitespaceanalyzer and follow thru with something like WordDelimiterFilter and its mostly ok, depending upon options, except for cases like CJK where its a death trap.&lt;/p&gt;

&lt;p&gt;Personally i just don&apos;t use these things since I know the problems, but we could document &quot;this is simplistic and won&apos;t work well for many languages&quot; and keep them around for people that don&apos;t care?&lt;/p&gt;

&lt;p&gt;And yeah i suppose its confusing these really &quot;simple&quot; ones are in the .core package, but to me the package is meaningless, i was just trying to keep the analyzers arranged in some kind of order (e.g. pattern-based analysis in the .pattern package, etc).&lt;/p&gt;

&lt;p&gt;We could just as well call the package .basic or .simple or something else, its just a name.&lt;/p&gt;</comment>
                    <comment id="12930690" author="dmsmith" created="Wed, 10 Nov 2010 18:13:42 +0000"  >&lt;p&gt;Robert, I think&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&quot;core&quot; is a bad name that needs to be changed. It is misleading.&lt;/li&gt;
	&lt;li&gt;Documentation should be improved along the lines you suggest.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You mention a few broken Analyzers (and by implication related tokenizers and filters). I&apos;ve a question about LowerCaseFilter: Isn&apos;t it bad as well?&lt;/p&gt;</comment>
                    <comment id="12965066" author="rcmuir" created="Tue, 30 Nov 2010 01:34:23 +0000"  >&lt;p&gt;OK, i&apos;d like to move forward with this if there are no objections, it improves these analyzers by improving their multilingual&lt;br/&gt;
capabilities, allowing them to support numbers etc, and deprecates/removes useless custom code (only unreleased functionality is removed)&lt;/p&gt;

&lt;p&gt;We also add CharFilter support to the ReusableAnalyzerBase, which was missing before.&lt;/p&gt;

&lt;p&gt;DM: we can open a followup issue to improve the docs for the simplistic tokenizers as discussed here.&lt;/p&gt;</comment>
                    <comment id="12968922" author="rcmuir" created="Tue, 7 Dec 2010 19:52:05 +0000"  >&lt;p&gt;Committed revision 1043114, 1043181 (3x)&lt;/p&gt;</comment>
                    <comment id="13013435" author="gsingers" created="Wed, 30 Mar 2011 16:50:19 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12459153" name="LUCENE-2747.patch" size="15654" author="rcmuir" created="Tue, 9 Nov 2010 11:54:11 +0000" />
                    <attachment id="12459084" name="LUCENE-2747.patch" size="15364" author="rcmuir" created="Mon, 8 Nov 2010 20:56:54 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 8 Nov 2010 20:56:54 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11104</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24945</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>