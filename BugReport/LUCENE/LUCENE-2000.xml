<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2000/LUCENE-2000.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2000] Use covariant clone() return types</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2000</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;&lt;b&gt;Paul Cowan wrote in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1257&quot; title=&quot;Port to Java5&quot;&gt;&lt;del&gt;LUCENE-1257&lt;/del&gt;&lt;/a&gt;:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;OK, thought I&apos;d jump in and help out here with one of my Java 5 favourites. Haven&apos;t seen anyone discuss this, and don&apos;t believe any of the patches address this, so thought I&apos;d throw a patch out there (against SVN HEAD @ revision 827821) which uses Java 5 covariant return types for (almost) all of the Object#clone() implementations in core. &lt;br/&gt;
i.e. this:&lt;/p&gt;

&lt;p&gt;public Object clone() {&lt;br/&gt;
changes to:&lt;br/&gt;
public SpanNotQuery clone() {&lt;/p&gt;

&lt;p&gt;which lets us get rid of a whole bunch of now-unnecessary casts, so e.g.&lt;/p&gt;

&lt;p&gt;if (clone == null) clone = (SpanNotQuery) this.clone();&lt;br/&gt;
becomes&lt;br/&gt;
if (clone == null) clone = this.clone();&lt;/p&gt;

&lt;p&gt;Almost everything has been done and all downcasts removed, in core, with the exception of&lt;/p&gt;

&lt;p&gt;Some SpanQuery stuff, where it&apos;s assumed that it&apos;s safe to cast the clone() of a SpanQuery to a SpanQuery - this can&apos;t be made covariant without declaring &quot;abstract SpanQuery clone()&quot; in SpanQuery itself, which breaks those SpanQuerys that don&apos;t declare their own clone() &lt;br/&gt;
Some IndexReaders, e.g. DirectoryReader - we can&apos;t be more specific than changing .clone() to return IndexReader, because it returns the result of IndexReader.clone(boolean). We could use covariant types for THAT, which would work fine, but that didn&apos;t follow the pattern of the others so that could be a later commit. &lt;br/&gt;
Two changes were also made in contrib/, where not making the changes would have broken code by trying to widen IndexInput#clone() back out to returning Object, which is not permitted. contrib/ was otherwise left untouched.&lt;/p&gt;

&lt;p&gt;Let me know what you think, or if you have any other questions.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12438673">LUCENE-2000</key>
            <summary>Use covariant clone() return types</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="ryantxu">Ryan McKinley</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Oct 2009 09:45:54 +0100</created>
                <updated>Fri, 10 May 2013 11:42:53 +0100</updated>
                    <resolved>Wed, 28 Mar 2012 23:23:10 +0100</resolved>
                            <version>3.0</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12768141" author="thetaphi" created="Wed, 21 Oct 2009 10:01:38 +0100"  >&lt;p&gt;I moved this to an extra issue, because there is some discussion needed.&lt;/p&gt;

&lt;p&gt;I am strongly against this for various reasons:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Java 5 itsself does not override clone() with covariant return type (nowhere!). So e.g. String.clone() always returns jl.Object.&lt;/li&gt;
	&lt;li&gt;This is because of backwards problems (which are not easy to explain) &amp;#8211; it has something to do, if a subclass compiled against Java 1.4 version of Lucene overrides clone and calls super.clone(). Because of this, the JDK does not provide String.clone() retrurning String. javac does its best to prevent problems here, but for APIs that need to be backwards compatible, it should return Object as always.&lt;/li&gt;
	&lt;li&gt;Covariant clone return types need, that &lt;b&gt;all&lt;/b&gt; subclasses of a class, that originally implemented a covariant clone() also override it covariant to be consistent. And because of this you have consistency problems (see your IndexReader problem). This is not possible for backwards compatibility. Because of this, covariant clone should only be done for internal classes (package-private, private) or final classes. Another example of this problem is AttributeImpl which defines a clone() method. Subclasses would need to override this covariant clone() method. Custom Attributes compiled against Lucene 2.9 would fail to do this -&amp;gt; MethodNotFoundException (I tried it out, it breaks)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because of all this problems, I prefer to always cast the return value of clone(). This is not unsafe (and because of this you get no unchecked warning), because you always know how to cast the clone result. By the way: You still have to always clone() the super.clone() call, so you do not get any pros of using covariant return types.&lt;/p&gt;

&lt;p&gt;I do not want to start a flame war here, but we should not do this.&lt;/p&gt;</comment>
                    <comment id="12844130" author="earwin" created="Thu, 11 Mar 2010 16:54:21 +0000"  >&lt;p&gt;I believe we should do this at our next &quot;we&apos;re breaking backcompat&quot; release.&lt;br/&gt;
Any compile errors that could bring to clients are fixed like, exceptionally easy. And the code comes out cleaner -&amp;gt; we have way more callees of clone() than overrides.&lt;/p&gt;</comment>
                    <comment id="13240738" author="ryantxu" created="Wed, 28 Mar 2012 22:20:35 +0100"  >&lt;p&gt;updating to /trunk&lt;/p&gt;

&lt;p&gt;But if Uwe thinks this is a bad idea... i can accept that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13240763" author="thetaphi" created="Wed, 28 Mar 2012 22:50:13 +0100"  >&lt;p&gt;In Lucene trunk we break backwards, be free to change it! I am fine with it.&lt;/p&gt;

&lt;p&gt;(this is why I kept it open)&lt;/p&gt;</comment>
                    <comment id="13240787" author="ryantxu" created="Wed, 28 Mar 2012 23:23:10 +0100"  >&lt;p&gt;added to trunk in #1306626&lt;/p&gt;

&lt;p&gt;This won&apos;t be ported to 3.x&lt;/p&gt;</comment>
                    <comment id="13241364" author="mikemccand" created="Thu, 29 Mar 2012 17:26:08 +0100"  >&lt;p&gt;We now get a bunch of &quot;redundant cast&quot; warnings from this ... are there plans to fix that...?&lt;/p&gt;</comment>
                    <comment id="13241366" author="thetaphi" created="Thu, 29 Mar 2012 17:27:22 +0100"  >&lt;p&gt;We should fix this in trunk! I wanted to ask the same question!&lt;/p&gt;</comment>
                    <comment id="13241413" author="ryantxu" created="Thu, 29 Mar 2012 18:36:04 +0100"  >&lt;p&gt;I just checked in a bunch of stuff... kept removing things until:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ant compile | grep &lt;span class=&quot;code-quote&quot;&gt;&quot;redundant &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt;&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;was empty&lt;/p&gt;</comment>
                    <comment id="13241417" author="mikemccand" created="Thu, 29 Mar 2012 18:38:52 +0100"  >&lt;p&gt;Thanks Ryan!&lt;/p&gt;</comment>
                    <comment id="13438532" author="thetaphi" created="Tue, 21 Aug 2012 09:31:01 +0100"  >&lt;p&gt;Hi,&lt;br/&gt;
in revision 1375428 (trunk) and 1375429 (4.x), I also added a covariant override for IndexInput.clone(), removing tons of useless casts.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12392905">LUCENE-1257</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12520323" name="LUCENE-2000-clone_covariance.patch" size="43398" author="ryantxu" created="Wed, 28 Mar 2012 22:20:35 +0100" />
                    <attachment id="12422784" name="LUCENE-2000-clone_covariance.patch" size="51958" author="thetaphi" created="Wed, 21 Oct 2009 09:46:57 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 11 Mar 2010 16:54:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11773</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25725</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>