<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:01:02 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1658/LUCENE-1658.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1658] Absorb NIOFSDirectory into FSDirectory</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1658</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I think whether one uses java.io.* vs java.nio.* or eventually&lt;br/&gt;
java.nio2.*, or some other means, is an under-the-hood implementation&lt;br/&gt;
detail of FSDirectory and doesn&apos;t merit a whole separate class.&lt;/p&gt;

&lt;p&gt;I think FSDirectory should be the core class one uses when one&apos;s index&lt;br/&gt;
is in the filesystem.&lt;/p&gt;

&lt;p&gt;So, I&apos;d like to deprecate NIOFSDirectory, absorbing it into&lt;br/&gt;
FSDirectory, and add a setting &quot;useNIO&quot; to FSDirectory.  It should&lt;br/&gt;
default to &quot;true&quot; for non-Windows OSs, because it gives far better&lt;br/&gt;
concurrent performance on all platforms but Windows (due to known Sun&lt;br/&gt;
JRE issue &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265734&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265734&lt;/a&gt;).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12426251">LUCENE-1658</key>
            <summary>Absorb NIOFSDirectory into FSDirectory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sun, 24 May 2009 17:10:34 +0100</created>
                <updated>Thu, 2 May 2013 03:29:25 +0100</updated>
                    <resolved>Mon, 1 Jun 2009 19:35:01 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12712572" author="mikemccand" created="Sun, 24 May 2009 17:29:48 +0100"  >&lt;p&gt;Attached patch.  I plan to commit in a day or two.&lt;/p&gt;</comment>
                    <comment id="12712614" author="thetaphi" created="Sun, 24 May 2009 23:46:42 +0100"  >&lt;p&gt;Hi Mike,&lt;br/&gt;
maybe not use a boolean for the mode, instead an enum?&lt;/p&gt;</comment>
                    <comment id="12712615" author="earwin" created="Mon, 25 May 2009 00:07:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;enum&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;java 1.5, unless you&apos;re going to write it by hand&lt;/p&gt;

&lt;p&gt;Mike, are you going to absorb MMapDirectory into FSDirectory as well? It fits &quot;when one&apos;s index is in the filesystem&quot;.&lt;/p&gt;</comment>
                    <comment id="12712617" author="thetaphi" created="Mon, 25 May 2009 00:21:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;java 1.5, unless you&apos;re going to write it by hand&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Lucene has the o.a.l.utils.Parameter class for that, whih is used for e.g. Field.Store.&lt;/p&gt;</comment>
                    <comment id="12712679" author="mikemccand" created="Mon, 25 May 2009 11:09:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;maybe not use a boolean for the mode, instead an enum? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I&apos;ll switch to oal.Parameter enum emulator. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mike, are you going to absorb MMapDirectory into FSDirectory as well? It fits &quot;when one&apos;s index is in the filesystem&quot;. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent point &amp;#8211; I think that makes sense. I&apos;ll fold it in as well.&lt;/p&gt;</comment>
                    <comment id="12712696" author="earwin" created="Mon, 25 May 2009 12:23:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;Excellent point - I think that makes sense. I&apos;ll fold it in as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Doesn&apos;t make sense to me. :/ MMapD has different characteristics. It can also have it&apos;s own configurable properties, which are irrelevant for NIOFSD and FSD.&lt;/p&gt;

&lt;p&gt;For example, my version of MMapD uses MappedByteBuffer.load() on creating MMapIndexInput. That way the cost of loading stuff into memory is paid upfront on reopening the reader, instead of during first several searches.&lt;br/&gt;
If we want to publish this feature into trunk, we&apos;ll end up with additional parameter on MMapD constructor, that governs whether we want to preload mmapped files, or not.&lt;br/&gt;
Now imagine constructor for FSD-that-folds-it-all, which has &apos;type&apos;, and a boolean setting that&apos;s relevant only for one of the types.&lt;/p&gt;

&lt;p&gt;I also think of trying to use mmap for writing. If that proves to be beneficial, MMapD won&apos;t share much with FSD anymore.&lt;/p&gt;

&lt;p&gt;In the end, I&apos;m unsure if it&apos;s a good idea to fold anything into FSD at all. Too much different stuff in one class becons for spahetti code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I assume your initial aim is to provide users with best impl for current platform without making them think. What about static factory that chooses between several impls? We had static factory before, it stinked because you had to chose impl through system property, it pooled directories and we had no public constructors. But now we have public constructors &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; If one needs, he uses constructor directly. If one is lazy and wants us to choose for him he uses old API, that simply changes semantics a bit.&lt;/p&gt;</comment>
                    <comment id="12712715" author="thetaphi" created="Mon, 25 May 2009 14:13:07 +0100"  >&lt;blockquote&gt;&lt;p&gt;In the end, I&apos;m unsure if it&apos;s a good idea to fold anything into FSD at all. Too much different stuff in one class becons for spahetti code  I assume your initial aim is to provide users with best impl for current platform without making them think.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is my problem with the whole issue, too. For me, the three directory impl are too different, to be merged together. Especially if writing is also affected.&lt;/p&gt;

&lt;p&gt;Using an additional parameter in the ctor specifying the type of directory is almost the same like three classes with much cleaner code. The only thing you do not get is the automatic directory impl choosing for filesystem dirs. But the solution to this are static factories.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What about static factory that chooses between several impls? We had static factory before, it stinked because you had to chose impl through system property, it pooled directories and we had no public constructors. But now we have public constructors  If one needs, he uses constructor directly. If one is lazy and wants us to choose for him he uses old API, that simply changes semantics a bit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be great. As the separate public constructors and deprecation of FSDirectory.open() is new in 2.9, we can change it. Maybe an automatism behind open() if the System.property is unset would be good. Advanced users may still instantiate the directories using the public ctor.&lt;/p&gt;</comment>
                    <comment id="12712773" author="mikemccand" created="Mon, 25 May 2009 19:53:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;In the end, I&apos;m unsure if it&apos;s a good idea to fold anything into FSD at all.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, you convinced me: let&apos;s keep separate classes.&lt;/p&gt;

&lt;p&gt;But I&apos;d like to split the current FSDir into an abstract FSDir and a&lt;br/&gt;
subclass SimpleFSDir.  Then, we have three subclasses of FSDir&lt;br/&gt;
(Simple, NIO, MMap).  And strengthen the javadocs so SimpleFSDir&apos;s&lt;br/&gt;
concurrency limitations are clear.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I assume your initial aim is to provide users with best impl for current platform without making them think. What about static factory that chooses between several impls?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, that&apos;s my goal: there should be a single obvious way to ask for&lt;br/&gt;
a Directory that uses the file system, and that way should have good&lt;br/&gt;
defaults.&lt;/p&gt;

&lt;p&gt;FSDirectory is unfortunately the obvious way now, but it&apos;s usually a&lt;br/&gt;
poor choice.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For example, my version of MMapD uses MappedByteBuffer.load() on creating MMapIndexInput.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is this something you could share?  Sounds useful!  Likewise if you&lt;br/&gt;
extend MMapDir for writing...&lt;/p&gt;

&lt;p&gt;Does anyone have a strong sense of when MMapDir is / is not an&lt;br/&gt;
appropriate choice?  I&apos;ve seen some users report good performance, eg:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200603.mbox/%3C20060313025744.18818.qmail@station174.com%3E&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200603.mbox/%3C20060313025744.18818.qmail@station174.com%3E&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MMap eats into the virtual memory of the process, so on 32 bit JRE&lt;br/&gt;
that obviously a very real concern.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As the separate public constructors and deprecation of FSDirectory.open() is new in 2.9&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right we are free to change things still (hmm: a nice side effect of&lt;br/&gt;
NOT releasing very often; incentives aren&apos;t quite right...).&lt;/p&gt;

&lt;p&gt;But the old API was FSDirectory.getDirectory.&lt;/p&gt;

&lt;p&gt;I think we should add a static FSDirectory.create() that returns a&lt;br/&gt;
good default impl given your OS.&lt;/p&gt;</comment>
                    <comment id="12712785" author="mikemccand" created="Mon, 25 May 2009 20:59:44 +0100"  >&lt;p&gt;Attached patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I created SimpleFSDir (the renaming for FSDir), and left FSDir to&lt;br/&gt;
    be the base class (in 3.0 it will become abstract).  FSDir&lt;br/&gt;
    implements most methods, handles locking, etc., so the subclass&lt;br/&gt;
    will just have to implement openInput/createOutput.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added FSDir.open static methods; currently they simply choose&lt;br/&gt;
    NIOFSDir on non-Windows OS, and FSDir on Windows OS.  I was&lt;br/&gt;
    tempted to choose MMapDir on 64 bit Windows JRE, but it makes me&lt;br/&gt;
    nervous...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Strengthened javadocs&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Cutover most unit tests to FSDir.open&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12712930" author="earwin" created="Tue, 26 May 2009 10:59:41 +0100"  >&lt;p&gt;Yay for base class + three concrete impls (haven&apos;t yet looked at the patch).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I was tempted to choose MMapDir on 64 bit Windows JRE, but it makes me nervous...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not completely sure why, but MMap failed for me on Win32 some time ago&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is this something you could share? Sounds useful! Likewise if you extend MMapDir for writing...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s a one-liner. I can make a patch, but while it works better than vanilla MMapD, I&apos;m not yet sure it&apos;s the best approach. As for writing - okay, I&apos;ll tell you if it turns out to be anything good.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does anyone have a strong sense of when MMapDir is / is not an appropriate choice?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are a lot of variables. Just as you said, on 32bit systems you have to take care of address space. So, nice for small indexes, bad for big ones. But, mmap in Java cannot be explicitly closed, it is closed in finalizer, so even for a small index if you update really often, you can hit an OOM even though you have enough memory. MMapD failed for me on windows. But it is fast. It is absolutely, totally, uber-indespensible, if you have a 64bit system, fat index, memory to spare and require lots of fast searches.&lt;/p&gt;

&lt;p&gt;So, you can probably enable it for non-Win 64bit?&lt;/p&gt;</comment>
                    <comment id="12712952" author="mikemccand" created="Tue, 26 May 2009 11:41:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;Not completely sure why, but MMap failed for me on Win32 some time ago&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think on 32 bit JRE we shouldn&apos;t choose MMap in FSDir.open().&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s a one-liner. I can make a patch, but while it works better than vanilla MMapD, I&apos;m not yet sure it&apos;s the best approach. As for writing - okay, I&apos;ll tell you if it turns out to be anything good.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which way do you think &quot;prime all bytes up front on open&quot; should default?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a lot of variables. Just as you said, on 32bit systems you have to take care of address space. So, nice for small indexes, bad for big ones. But, mmap in Java cannot be explicitly closed, it is closed in finalizer, so even for a small index if you update really often, you can hit an OOM even though you have enough memory. MMapD failed for me on windows. But it is fast. It is absolutely, totally, uber-indespensible, if you have a 64bit system, fat index, memory to spare and require lots of fast searches.&lt;/p&gt;

&lt;p&gt;So, you can probably enable it for non-Win 64bit?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wait, are you saying Win 64 bit has problems w/ MMapDir?  (I thought you just said Win 32 bit, above).&lt;/p&gt;

&lt;p&gt;Is MMapDir fine w/ concurrency?  (I&apos;d assume so).  So, if you had the choice (ie, you&apos;re running in env w/ plenty of virtual mem), MMapDir would be preferred over NIOFSDir?&lt;/p&gt;

&lt;p&gt;On a 64 bit env that doesn&apos;t have that much RAM, MMapDir should fare no worse than NIOFSDir, right?  Ie both are competing for the same IO cache.  And so on a 64 bit JRE perhaps the default should always be MMAPDir.&lt;/p&gt;</comment>
                    <comment id="12712957" author="thetaphi" created="Tue, 26 May 2009 12:07:23 +0100"  >&lt;p&gt;From my experiences, MMap is always preferred, if you have 64 bit system. In this case, Java maps the file into address space like a swap file and often used parts are in real memory. So in my opinion, it is always preferable on 64 bit systems. If you have much RAM it is even better (because caching).&lt;br/&gt;
On Linux/Solaris you can see the used address space with TOP. I have a webserver with an about 7 GB big index using nmap. It is reopened very often, so the used address space sometimes goes up to &amp;gt;50 Gigabytes, but this is not a problem, as it is not real memory, its just like a &quot;swap file&quot;. The finalizer removes the mapped adress space fairly fast (dependent on usage/closing of old segements).&lt;br/&gt;
The index in this directory is really fast, especially, if you have lots of real RAM, that can be used for buffering. You can even load stored fields for thousands of documents very fast, uninversion is also fast.&lt;br/&gt;
Concurrency is no problem as the mapped file is handled like RAM.&lt;/p&gt;

&lt;p&gt;I always recommend users, who want to use lucene: Use 64 bit systems, -d64 JVM parameter (this enables Java in 64 bit on Solaris), a lot of RAM and MMapDirectory.&lt;/p&gt;</comment>
                    <comment id="12712997" author="earwin" created="Tue, 26 May 2009 14:07:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;Wait, are you saying Win 64 bit has problems w/ MMapDir? (I thought you just said Win 32 bit, above).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have no lucene experience with Win64, and so I extrapolated from 32bit (as I felt it was more of a Windows issue than anything else). Would be nice if someone actually tries.&lt;br/&gt;
If it works, then the rule sounds like - MMap for all 64bit systems, NIO for 32bit non-win, Simple for 32bit win.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is MMapDir fine w/ concurrency?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s cool with it if you have enough memory (no frequent paging occurs). I&apos;m not sure about NIOFS vs MMap on memory-constrained systems, if you&apos;re competing for disk cache.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Which way do you think &quot;prime all bytes up front on open&quot; should default?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This has a side-effect of pushing previous mmaps out of memory if you&apos;re memory-constrained. Thus, under certain usage conditions (frequent merging, or something like that + low memory) this feature theoretically could be a disadvantage.&lt;br/&gt;
For me it works well enough to be hardcoded to true &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If anybody&apos;s interested, I can also repost an alternative for MMapD - MemoryMirroredD, which wraps any given D and explicitly preloads files in non-chunked byte arrays. It&apos;s a bit faster than MMapD and MemoryD (for reading), but has certain disadvantages, like stressing your GC and throwing OOM on merges/optimize if you don&apos;t have enough heap (unlike MMapD that silently swaps out).&lt;/p&gt;</comment>
                    <comment id="12713128" author="mikemccand" created="Tue, 26 May 2009 18:25:47 +0100"  >&lt;p&gt;OK so I think FSDir.open should default to MMapDir on 64 bit machine,&lt;br/&gt;
NIOFSDir on non-windows machines, and SimpleFSDir on windows 32 bit&lt;br/&gt;
machines.  I&apos;ll rev the patch.&lt;/p&gt;

&lt;p&gt;Next question: does anyone know how to reliably determine if the&lt;br/&gt;
running JRE is 32 or 64 bit?  I found this:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://forums.java.net/jive/message.jspa?messageID=274406&quot; class=&quot;external-link&quot;&gt;http://forums.java.net/jive/message.jspa?messageID=274406&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;but I&apos;m worried about how portable that solution is...&lt;/p&gt;</comment>
                    <comment id="12713311" author="mikemccand" created="Tue, 26 May 2009 23:51:53 +0100"  >&lt;p&gt;Attached patch w/ new defaults.  I plan to commit in a day or two.&lt;/p&gt;</comment>
                    <comment id="12714784" author="thetaphi" created="Sat, 30 May 2009 23:17:47 +0100"  >&lt;p&gt;This issue has some more problems after committing.&lt;br/&gt;
And there are also inconsistencies.&lt;br/&gt;
I am working on a patch, that also un-deprecates FSDir.getDirectory() and removes FSDir.open() again. FSDir.getDirectory() will return the platform-optimal directory, if no system property specifying the directory is set. Also removes some duplicate code in the FSDir.IndexInput/Output by subclassing from SimpleFSDir.IndexInput (but mark deprecated).&lt;br/&gt;
My patch will remove the whole FSDir caching (so getDirectory will always return a new directory) and thus again &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt; comes in my mind: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt; currently has the problem, that it only works correct with FSDir.getDirectory() instances, but not with self-instantiated implementations.&lt;/p&gt;</comment>
                    <comment id="12714790" author="thetaphi" created="Sat, 30 May 2009 23:48:50 +0100"  >&lt;p&gt;This issue breaks some platforms (if FSDirectory.open() is used in some tests)!&lt;/p&gt;</comment>
                    <comment id="12714793" author="thetaphi" created="Sun, 31 May 2009 00:38:48 +0100"  >&lt;p&gt;This is a revised patch (on current trunk):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;FSDir.open() was removed, the logic was included into FSDir.getDirectory and this un-deprectated: If the system property is missing, the same like in Mikes open() happens: choosing the best impl for platform&lt;/li&gt;
	&lt;li&gt;Caching of FSDirs was completely removed&lt;/li&gt;
	&lt;li&gt;FSDir.IndexInput/Output (deprected) was removed (suplicate code) and simply replaced by (deprecated) subclasses of SimpleFSDir ones). This is OK for backwards compatibility.&lt;/li&gt;
	&lt;li&gt;protected/package-private ctors were removed, getDirectory uses now reflection to find the (File,LockFactory) ctor&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Some tests currently fail:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TestCompoundFile (do not know why)&lt;/li&gt;
	&lt;li&gt;TestLockFactory (test is obsolete, execption can only occur on cached dirs)&lt;/li&gt;
	&lt;li&gt;Sometimes reopen does not work because already closed (see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove the caching code completely (currently comented out)&lt;/li&gt;
	&lt;li&gt;Fix 1453, because if somebody uses a self-instantiated FSDir and not the default, the reopened dir would use the default again! So fix (maybe clone of FSDir, or &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt; is obsolete without caching?).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This patch also contains an overflow fix in MMapDir for files &amp;lt;2 GB but large. &quot;int*int&quot; should be written as &quot;(long)int*int&quot;, if the result maybe large (thanks Earwin!).&lt;/p&gt;</comment>
                    <comment id="12714795" author="thetaphi" created="Sun, 31 May 2009 00:59:23 +0100"  >&lt;p&gt;One comment:&lt;br/&gt;
The part with the reflection and the ctor may be non-backwards compatible, because if somebody overwrites the old FSDir and does not provide the wanted ctor (only the default one), it would fail. The default ctor would not even work, as the init() private internal method (used by the old getDirectory()) is no longer available.&lt;br/&gt;
But this is the same like in the discussion about backwards compatibility. In my opinion, for 2.9, we should make FSDir abstract, too. It is sooooooo seldom, that somebody may create a file based dir impl (nio.2 or what else? Or Earwins MemoryCopiedDir). But if somebody does this, he knows what he does and can fix the compilation errors easily!&lt;/p&gt;</comment>
                    <comment id="12714798" author="thetaphi" created="Sun, 31 May 2009 01:29:48 +0100"  >&lt;p&gt;New patch: Now only TestCompoundFile fails, some more imporvements.&lt;/p&gt;</comment>
                    <comment id="12714848" author="mikemccand" created="Sun, 31 May 2009 11:28:46 +0100"  >
&lt;p&gt;Ugh, I&apos;m sorry... I had run the tests only on OS X, Java 1.5, which is&lt;br/&gt;
not 64 bit by default (must specify -d64) &amp;#8211; I should have tested the&lt;br/&gt;
different OS&apos;s and JREs before committing.&lt;/p&gt;

&lt;p&gt;Thanks for jumping on this, Uwe and Earwin!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;FSDir.open() was removed, the logic was included into FSDir.getDirectory and this un-deprectated: If the system property is missing, the same like in Mikes open() happens: choosing the best impl for platform&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But: the removal of the cache is not back-compatible?  (I&apos;m not sure&lt;br/&gt;
how/whether anyone relies on that behavior).  And, we are wanting to&lt;br/&gt;
move away from that global System property in choosing the class for&lt;br/&gt;
your FSDir.  This is why I switched to open instead of back to&lt;br/&gt;
getDirectory.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Caching of FSDirs was completely removed&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this must wait until 3.0, ie when we remove all getDirectory&lt;br/&gt;
methods.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;FSDir.IndexInput/Output (deprected) was removed (suplicate code) and simply replaced by (deprecated) subclasses of SimpleFSDir ones). This is OK for backwards compatibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent!&lt;/p&gt;</comment>
                    <comment id="12714850" author="thetaphi" created="Sun, 31 May 2009 11:37:50 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Caching of FSDirs was completely removed&lt;/p&gt;

&lt;p&gt;I think this must wait until 3.0, ie when we remove all getDirectory&lt;br/&gt;
methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am currently playing with this. For the end-user it is not really needed, that directories are cached. Even if he gets a directory that it is cached, he can see it as a alone one. he can close it (because of refcounting and so on) and do everything, he can do with a single directory, too.&lt;/p&gt;

&lt;p&gt;So why is it not backwards compatible, when we remove caching? All tests pass here!&lt;/p&gt;

&lt;p&gt;More, the mixing of cached and uncached dirs bring more problems (I am currently investigating).&lt;/p&gt;

&lt;p&gt;I will supply a new patch shortly, with all other bugs fixed (there were more, e.g. with some tests in _TestHelper and so on). The move from FSDir to SimpleFSDir is more complicated than it seems. In my opinion, it would be a question, if &lt;b&gt;this&lt;/b&gt; move should wait until 3.0.&lt;/p&gt;</comment>
                    <comment id="12714851" author="mikemccand" created="Sun, 31 May 2009 11:47:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;I am currently playing with this. For the end-user it is not really needed, that directories are cached. Even if he gets a directory that it is cached, he can see it as a alone one. he can close it (because of refcounting and so on) and do everything, he can do with a single directory, too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The original purpose of the cache was to ensure each unique  directory in the filesystem alway mapped to a single instance of FSDir, so that you could synchronize on that instance and be certain that this is equivalent to synchronizing access to that underlying filesystem directory.&lt;/p&gt;

&lt;p&gt;Lucene had relied on this at one point, but no longer does.  I&apos;m not sure if any apps out there still rely on this, so it&apos;s dangerous to simply remove it, especially when we have another option (using a new method &quot;open&quot;) that won&apos;t break such apps.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;More, the mixing of cached and uncached dirs bring more problems (I am currently investigating).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We should get to the bottom of this, but these problems are pre-existing to this issue, right?  (One could already directly instantiate each directory).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The move from FSDir to SimpleFSDir is more complicated than it seems. In my opinion, it would be a question, if this move should wait until 3.0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As long as we preserve the old getDirectory, back-compatible, this change should have no impact on back-compatibility.&lt;/p&gt;

&lt;p&gt;Ie, it&apos;s only if you use the new FSDir.open() API that you get the new behavior.  I intentionally went and fixed tests to use FSDir.open so that we stress the new functionality, which then led us to discover tests making invalid assumptions, which we should then fix.&lt;/p&gt;</comment>
                    <comment id="12714853" author="thetaphi" created="Sun, 31 May 2009 12:05:38 +0100"  >&lt;p&gt;bq The original purpose of the cache was to ensure each unique directory in the filesystem alway mapped to a single instance of FSDir, so that you could synchronize on that instance and be certain that this is equivalent to synchronizing access to that underlying filesystem directory.&lt;/p&gt;

&lt;p&gt;In my opinion, the cached directories vs. instantiated directories have one big advantage:&lt;br/&gt;
They are forced to use the same locking mechanism. So if somebody creates a directory using one LockFactory, writes to the index and in a parallel thread uses another locking mechanism with a separate dir instance, he corrupts his index. So from that point of view, only have one directory instance per resource is a good thing (it does not work from different JVM processes, sure).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ie, it&apos;s only if you use the new FSDir.open() API that you get the new behavior. I intentionally went and fixed tests to use FSDir.open so that we stress the new functionality, which then led us to discover tests making invalid assumptions, which we should then fix.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is correct. For unit testing, I found out now, that it is much simplier to check, if all tests would also work with other platforms, if you set the FSDir system property when running the tests. With open() this is currently not possible.&lt;/p&gt;

&lt;p&gt;Maybe I un-comment-out the caching again, but let getDirectory still use the new behaviour, if the system property is not set. We could then in 3.0 just remove the caching, but let getDirectory() alive. I am not sure.&lt;/p&gt;

&lt;p&gt;In my opinion, this is not really a more serious bw-change than a small behaviour change, that can be written into CHANGES.txt. We have more serious ones.&lt;/p&gt;

&lt;p&gt;I would strongly tend to remove the cache at all and write a warning into CHANGES.txt.&lt;/p&gt;

&lt;p&gt;At all, I do not really think anybody has implemented an own subclass of FSDir. The current patch&apos;s bw-change is more, that the protected no-arg ctors no longer exist and are no longer used.&lt;/p&gt;</comment>
                    <comment id="12714855" author="mikemccand" created="Sun, 31 May 2009 12:21:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;In my opinion, the cached directories vs. instantiated directories have one big advantage:&lt;br/&gt;
They are forced to use the same locking mechanism. So if somebody creates a directory using one LockFactory, writes to the index and in a parallel thread uses another locking mechanism with a separate dir instance, he corrupts his index. So from that point of view, only have one directory instance per resource is a good thing (it does not work from different JVM processes, sure).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;

&lt;p&gt;But, I don&apos;t think this is a strong enough reason for Lucene to be&lt;br/&gt;
doing such magic under-the-hood, going forward.  This magic leads to&lt;br/&gt;
other problems (like &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;gt; Ie, it&apos;s only if you use the new FSDir.open() API that you get the new behavior. I intentionally went and fixed tests to use FSDir.open so that we stress the new functionality, which then led us to discover tests making invalid assumptions, which we should then fix.&lt;/p&gt;

&lt;p&gt;This is correct. For unit testing, I found out now, that it is much simplier to check, if all tests would also work with other platforms, if you set the FSDir system property when running the tests. With open() this is currently not possible.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent!&lt;/p&gt;

&lt;p&gt;Before committing we should confirm all tests pass if we temporarily&lt;br/&gt;
hardwire open to return each of the 3 FSDir impls.&lt;/p&gt;

&lt;p&gt;But I don&apos;t think this is reason enough to leave the global system&lt;br/&gt;
property in place for real usage of Lucene.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Maybe I un-comment-out the caching again, but let getDirectory still use the new behaviour, if the system property is not set. We could then in 3.0 just remove the caching, but let getDirectory() alive. I am not sure.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But you&apos;ve still unnecessarily broken back-compat with that.  By&lt;br/&gt;
making a new method (open), which does neither the magic singleton&lt;br/&gt;
caching nor the global system prop, back-compat users are guaranteed&lt;br/&gt;
to see no changes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In my opinion, this is not really a more serious bw-change than a small behaviour change, that can be written into CHANGES.txt. We have more serious ones.&lt;/p&gt;

&lt;p&gt;I would strongly tend to remove the cache at all and write a warning into CHANGES.txt.&lt;/p&gt;

&lt;p&gt;At all, I do not really think anybody has implemented an own subclass of FSDir. The current patch&apos;s bw-change is more, that the protected no-arg ctors no longer exist and are no longer used.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why take that chance unnecessarily?  What are we gaining by changing&lt;br/&gt;
getDirectory so much in place, vs switching to a new (open) API?  It&apos;s&lt;br/&gt;
entirely possible apps have subclassed FSDir, rely on the singleton&lt;br/&gt;
cache and rely on the global system prop.  Making a new API, and&lt;br/&gt;
deprecating in favor of that, won&apos;t affect back-compat users at all.&lt;/p&gt;</comment>
                    <comment id="12714864" author="thetaphi" created="Sun, 31 May 2009 15:00:36 +0100"  >&lt;p&gt;I am not so happy &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, but I work on it.&lt;/p&gt;

&lt;p&gt;Currently my problem is more a failure for the test in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt;. After reopening a DirectoryIndexReader, sometimes (not always) the directory is closed, even with the 1453-workaround.&lt;/p&gt;

&lt;p&gt;This failure depends on the random seed in testFSDirectoryReopen2() and is reproducible also with the current version of FSDirectory. It seems that 1453 is not completely fixed. I am looking now since 5 hourcs and cannot find the error, the code consists of a lot of printlns and so on. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;When I found out, what the problem is, I will perhaps open an additional issue, but it seems, that the problem has to do with the FSDirectory changes. Somewhere the directory is closed, although it should be stay open. But what I can say: The error is simplier to reproduce, if the directory is not cached!&lt;/p&gt;

&lt;p&gt;I have a lot of other fixes for the failing tests on some platforms, I will post a revised patch some time with getDirectory deprecated and open() again.&lt;/p&gt;

&lt;p&gt;One thing: For investigating this bug, I changed the IndexReader.open() methods to use a non-cached directory. I think we should do this in the final version, too (also for Indexwriter). So also replace FSDir.getDirectory() by open for all these ctors and opens() that get a String with the index directory. If we do not want to do this, I suggest to deprecate all these methods and tell the user to open the directory themselfes and pass Directory instances to Writer/Reader. This would help cleaning up the code immense later, because we can remove all these closeDirectory checks/pass-throughs everywhere, which are silly... This makes the code completely not-understandable. In my opinion, one should open/close the directory himself and close it after usage.&lt;/p&gt;</comment>
                    <comment id="12714865" author="mikemccand" created="Sun, 31 May 2009 15:15:28 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I am not so happy , but I work on it.&lt;/p&gt;

&lt;p&gt;I am looking now since 5 hourcs and cannot find the error, the code consists of a lot of printlns and so on. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can tag-team if you want &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Let me know if you want me to take over...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This failure depends on the random seed in testFSDirectoryReopen2() and is reproducible also with the current version of FSDirectory. It seems that 1453 is not completely fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yikes &amp;#8211; you mean there&apos;s a pre-existing issue with the fix in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt;, before this issue was committed?  I agree that code is very spooky, and I&apos;ll be very happy once we remove (in 3.0) the cache/refCounting done by FSDir.getDirectory....&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we do not want to do this, I suggest to deprecate all these methods and tell the user to open the directory themselfes and pass Directory instances to Writer/Reader&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this (deprecating the open methods that take File/String) best!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I have a lot of other fixes for the failing tests on some platforms, I will post a revised patch some time with getDirectory deprecated and open() again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK thanks.&lt;/p&gt;</comment>
                    <comment id="12714866" author="thetaphi" created="Sun, 31 May 2009 15:32:13 +0100"  >&lt;blockquote&gt;&lt;p&gt;Yikes - you mean there&apos;s a pre-existing issue with the fix in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1453&quot; title=&quot;When reopen returns a new IndexReader, both IndexReaders may now control the lifecycle of the underlying Directory which is managed by reference counting&quot;&gt;&lt;del&gt;LUCENE-1453&lt;/del&gt;&lt;/a&gt;, before this issue was committed? I agree that code is very spooky, and I&apos;ll be very happy once we remove (in 3.0) the cache/refCounting done by FSDir.getDirectory....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem is not really the caching/refcounting. The reopen code sometimes seems to close the directory, even than it should not. There is no difference if the directory is cached (and the number of opens() is tracked by refCount) or standalone. The problem is that SegmentReader&apos;s readNorms() hits AlreadyClosedException then...&lt;/p&gt;

&lt;p&gt;The interesting thing is that ou can more easy reproduce it with stand-alone dirs (because I removed the caching, you know). The 1453 fix is also needed for stand-alone dirs (so everytime codeDirectory=true), because, if they are closed during an error/whatever, the same happens. It does not happen so easy with cached dirs, because the old reader is normally closed after the new reopened one, so during the reopen, the refcount is big enough.&lt;/p&gt;

&lt;p&gt;In my opinion, the only good solution is to remove the whole directory-close stuff from readers/writers in 3.0, as said before. And this can be done by removing the string-type dir arguments from Reader/Writer. And: As these use currently FSDir.getDirectory() they should be changed to FSDir.open() or deprecated, I tend to the last one.&lt;/p&gt;</comment>
                    <comment id="12714869" author="thetaphi" created="Sun, 31 May 2009 15:39:34 +0100"  >&lt;p&gt;To conclude:&lt;br/&gt;
The error, I found is only relevant, if the string-type dir arguments to IndexReader are passed to FSDir.open() and are separate instances without refcounting. The reopen code sometimes closes the directory, although it should not, which leads to problems, if the directories are separate instances.&lt;br/&gt;
With cached dirs, its no problem. So if we deprecate the string directory arguments and inside that methods let FSDir.getDirectory() stay alive, we have no problem. In 3.0, one could then remove all this code like refcounting/changing dirs and the everywhere arguments closeDirectory in SegmentReader/DirectoryIndexReader/MultiSegmentReader/... Then 1453 is completely solved.&lt;/p&gt;</comment>
                    <comment id="12714890" author="thetaphi" created="Sun, 31 May 2009 17:06:01 +0100"  >&lt;p&gt;This patch fixes the failing tests and contains the other improvements.&lt;/p&gt;</comment>
                    <comment id="12714892" author="thetaphi" created="Sun, 31 May 2009 17:13:35 +0100"  >&lt;p&gt;Previous patch missed correct ctor for SimpleFSDir for reflection.&lt;/p&gt;</comment>
                    <comment id="12714897" author="mikemccand" created="Sun, 31 May 2009 17:39:11 +0100"  >&lt;p&gt;Patch looks good, thanks Uwe!&lt;/p&gt;

&lt;p&gt;I still see failures when I use MMapDir (some tests are assuming they&apos;ll always get an FSDir).&lt;/p&gt;

&lt;p&gt;I can tackle these if you haven&apos;t already?&lt;/p&gt;</comment>
                    <comment id="12714901" author="thetaphi" created="Sun, 31 May 2009 18:09:40 +0100"  >&lt;p&gt;I think I forgot them when I reverted my changes. Currently I am running the tests again with MMap and after that with NIO.&lt;/p&gt;</comment>
                    <comment id="12714902" author="thetaphi" created="Sun, 31 May 2009 18:15:01 +0100"  >&lt;p&gt;Oh shit, on windows, a very lot of tests are failing with MMap. Windows says, you cannot delete or modify files, which have a mapping, with Solaris it works without problems:&lt;br/&gt;
e.g. TestAtomicUpdates:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; C:\Projects\lucene\trunk\build\test\19.cfs&amp;#95;12.cfs (Der Vorgang ist&lt;br/&gt;
bei einer Datei mit einem ge&#246;ffneten Bereich, der einem Benutzer zugeordnet ist,&lt;br/&gt;
 nicht anwendbar)&lt;/p&gt;

&lt;p&gt;This is the problem on windows: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem is, that a memory mapped area is not released on close() in Java, it is released, when GC frees it.&lt;br/&gt;
So the problem may be that MMap can only be used for &lt;b&gt;reading&lt;/b&gt; indexes (so only read-only IndexReaders) on windows.&lt;/p&gt;

&lt;p&gt;What should we do, again disable MMap and only use NIOFSDir?&lt;/p&gt;</comment>
                    <comment id="12714921" author="mikemccand" created="Sun, 31 May 2009 21:15:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;a very lot of tests are failing with MMap.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It looks like all but one (see below) of the failures are &quot;innocent&quot;,&lt;br/&gt;
eg the test hits an exception while cleaning up (removing the index&lt;br/&gt;
directory it had created), or the test is trying to overwrite a file.&lt;/p&gt;

&lt;p&gt;I agree this will be a hassle for normal usage of Lucene, so let&apos;s&lt;br/&gt;
change the default on Win64 to SimpleFSDir (can&apos;t be NIOFSDir because&lt;br/&gt;
of another Sun bug).  So, for open(), on non-Windows 32 bit we use&lt;br/&gt;
NIOFSDir, on non-Windows 64 bit we use MMapDir, and on Windows 32 or&lt;br/&gt;
64 we use SimpleFSDir.  Crazy how many challenges there are with IO on&lt;br/&gt;
Windows from Java...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is the problem on windows: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sheesh that&apos;s alot of votes!&lt;/p&gt;

&lt;p&gt;Can you add that bug into the toplevel javadocs of FSDir explaining&lt;br/&gt;
why MMapDir is not a great choice on even Win64?&lt;/p&gt;

&lt;p&gt;There was one odd failure I noticed, on Win64 when running tests from&lt;br/&gt;
a mounted remote (CIFS) drive:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] Testcase: testIndexAndMerge(org.apache.lucene.index.TestDoc):	FAILED
    [junit] junit.framework.AssertionFailedError:
    [junit] 	at org.apache.lucene.index.FieldsWriter.addRawDocuments(FieldsWriter.java:249)
    [junit] 	at org.apache.lucene.index.SegmentMerger.mergeFields(SegmentMerger.java:350)
    [junit] 	at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:139)
    [junit] 	at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:116)
    [junit] 	at org.apache.lucene.index.TestDoc.merge(TestDoc.java:182)
    [junit] 	at org.apache.lucene.index.TestDoc.testIndexAndMerge(TestDoc.java:117)
    [junit] 	at org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:88)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I dug down and found that this test illegally opens SegmentReaders on&lt;br/&gt;
files that IndexWriter still has open for writing, and somehow this&lt;br/&gt;
causes problems when using an MMapDir.  I&apos;ll open a separate issue and&lt;br/&gt;
put details there.&lt;/p&gt;</comment>
                    <comment id="12714925" author="thetaphi" created="Sun, 31 May 2009 21:31:36 +0100"  >&lt;blockquote&gt;&lt;p&gt;I dug down and found that this test illegally opens SegmentReaders on files that IndexWriter still has open for writing, and somehow this causes problems when using an MMapDir. I&apos;ll open a separate issue and&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;put details there.&lt;/p&gt;

&lt;p&gt;This is a NIO bug in windows, I assume. In Google I found a report at sun about this, too. Mapped buffers from UNC-pathes have wrong bytes in their buffer.&lt;/p&gt;

&lt;p&gt;By the way, the other failing tests are easy to fix:&lt;br/&gt;
Some tests check, if the IndexInput throws an IOException when reading past eof. When doing this with a Byte buffer, the get() throws an BufferUnderflowException. It can be fixed like this in MMapIndexInputs:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; readByte() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; buffer.get();
      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (BufferUnderflowException e) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;read past eof&quot;&lt;/span&gt;);
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The other failures are harmless, but it would be good to fix them. I am working on that and then test extensive.&lt;/p&gt;

&lt;p&gt;The problem with not freeing the buffer can be fixed on windows using the bad hack with this sun.misc.Cleaner class and PrivilegedAction (described in the bug report), but this depends on Sun&apos;s internals and works only with Sun&apos;s JRE. And it may fail on some under-priviledged environments like web containers.&lt;/p&gt;

&lt;p&gt;But nevertheless, with this bad hack, my local version works now without any failing test on Win32 using MMap.&lt;/p&gt;</comment>
                    <comment id="12714931" author="thetaphi" created="Sun, 31 May 2009 22:49:14 +0100"  >&lt;p&gt;Atached is a patch that now works (at least on windows) for all three versions of FSDir. One additional test was fixed to SimpleFSDir (because it assumesan BufferedIndexInput).&lt;/p&gt;

&lt;p&gt;This patch contains the tweaked MMapDir that has the following features:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Throws correct IOExceptions on read past EOF&lt;/li&gt;
	&lt;li&gt;Is able to unmap the buffer when close is called (for cloned inputs nothing is done, this is similar to other FSDirs). This unmapping is an &quot;illegal and unsecure hack&quot; according to Sun, but I have seen other open source projects, that use it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The problems with unmapping are: It may fail on specific non-Sun VMs and may hit SecurityExceptions. If this happens, the close() call will throw an IOException. The good thing is: The virtual memory usage is lower and with small indexes, the 32 bit VMs do not hit OOMs, if buffers are not unmapped by GC early.&lt;/p&gt;

&lt;p&gt;What do you think? Should we supply this &quot;extended&quot; MMapDirectory?&lt;br/&gt;
Earwin, did you try this, too?&lt;/p&gt;

&lt;p&gt;All tests pass now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; JUHU!&lt;/p&gt;</comment>
                    <comment id="12714934" author="thetaphi" created="Sun, 31 May 2009 23:41:36 +0100"  >&lt;p&gt;Some cleanups with initOutput (remove duplicate code) and unneeded methods in MMapDir.&lt;br/&gt;
All tests pass. Will try tomorrow also on Solaris x64 with MMap.&lt;/p&gt;</comment>
                    <comment id="12714946" author="mikemccand" created="Mon, 1 Jun 2009 01:39:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;All tests pass now  JUHU!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It may fail on specific non-Sun VMs and may hit SecurityExceptions. If this happens, the close() call will throw an IOException.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should do the hack.  It seems better than nothing.&lt;/p&gt;

&lt;p&gt;But: I think we shouldn&apos;t throw an exception if the hack fails?  Ie, just fallback to relying on GC to eventually unmap?  (What MMapDir does today).&lt;/p&gt;

&lt;p&gt;And then we can make the default on Windows 64 be MMapDir again?&lt;/p&gt;

&lt;p&gt;Also, can you reference this bug from FSDir&apos;s/MMapDir&apos;s javadocs?&lt;/p&gt;</comment>
                    <comment id="12714949" author="mikemccand" created="Mon, 1 Jun 2009 01:54:46 +0100"  >&lt;p&gt;I&apos;m seeing this failure:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testcase: testIndexInputMethods(org.apache.lucene.store.TestMMapDirectory):	FAILED&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; FSDirectory has method public org.apache.lucene.store.IndexInput org.apache.lucene.store.FSDirectory.openInput(java.lang.String) throws java.io.IOException but MMapDirectory does not override&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; junit.framework.AssertionFailedError: FSDirectory has method public org.apache.lucene.store.IndexInput org.apache.lucene.store.FSDirectory.openInput(java.lang.String) throws java.io.IOException but MMapDirectory does not override&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.lucene.store.TestMMapDirectory.testIndexInputMethods(TestMMapDirectory.java:43)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.lucene.util.LuceneTestCase.runTest(LuceneTestCase.java:88)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should fix the test to make an exception...&lt;/p&gt;</comment>
                    <comment id="12714983" author="thetaphi" created="Mon, 1 Jun 2009 06:49:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should fix the test to make an exception...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I removed the test completely here, but forgot to include this into the patch. The test is now invalid with the new class hierarchy of FSDir. If FSDir gets abstract in 3.0, it is clear which methods need to be overridden and so on. The intention behind the test was, to check, if MMap does &lt;b&gt;not&lt;/b&gt; overwrite all FSDir Methods, and because of this one of the calls could falsely return the standard FSDir impl of IndexInput. After Lucene 3.0, this is not possible, as MMapDir does not extend SimpleFSDir.&lt;/p&gt;

&lt;p&gt;If we remove the test and then backwards-tag tests fail because of this, we could easily fix this by adding the method, simply calling super(). Or remove the test in backwards-tag, too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But: I think we shouldn&apos;t throw an exception if the hack fails? Ie, just fallback to relying on GC to eventually unmap? (What MMapDir does today).&lt;/p&gt;

&lt;p&gt;And then we can make the default on Windows 64 be MMapDir again?&lt;/p&gt;

&lt;p&gt;Also, can you reference this bug from FSDir&apos;s/MMapDir&apos;s javadocs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea. The problem is, if the hack fails, IndexReader may suddenly fail later on windows to delete files. Or was this only a problem in the tests. What happens, if e.g. IndexWriter wants to write a new segments.gen file and so on, but it is still mmapped? So I preferred to throw the IOException, but I can disable this easily.&lt;/p&gt;

&lt;p&gt;I would suggest to check on windows, if class sun.misc.Cleaner is available and if not, return SimpleFSDir. For Unix, it is enough to simply ignore the cleanup (throw no exception).&lt;/p&gt;</comment>
                    <comment id="12715008" author="earwin" created="Mon, 1 Jun 2009 08:48:52 +0100"  >&lt;p&gt;I told you, Java mmap doesn&apos;t work on Windows.&lt;br/&gt;
And please, don&apos;t use the unmap hack! If it doesn&apos;t work, it doesn&apos;t work. Let&apos;s for all windows versions use SimpleFSD.&lt;br/&gt;
Look, what are you going to do if you unmap a buffer and then access it by accident? Crash JVM?&lt;/p&gt;</comment>
                    <comment id="12715011" author="thetaphi" created="Mon, 1 Jun 2009 08:52:10 +0100"  >&lt;p&gt;The buffer is nulled directly after unmapping.&lt;/p&gt;</comment>
                    <comment id="12715015" author="thetaphi" created="Mon, 1 Jun 2009 09:08:04 +0100"  >&lt;p&gt;Here the patch with conditionalized MMapDirectory on windows. I am a bit nervous...&lt;br/&gt;
We should discuss it a little bit and commit it. But everybody should test it extensive before releasing!&lt;br/&gt;
Users still using FSDir.getDirectory would not be affected, so it would not break existing apps.&lt;/p&gt;</comment>
                    <comment id="12715016" author="earwin" created="Mon, 1 Jun 2009 09:14:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;The buffer is nulled directly after unmapping. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Really? Let me quote some code (MacOS, Java 1.6):&lt;/p&gt;

&lt;p&gt;unsafe.freeMemory(address);&lt;br/&gt;
address = 0;&lt;br/&gt;
Bits.unreserveMemory(capacity);&lt;/p&gt;

&lt;p&gt;Does windows version differ? What we see here is &apos;zeroing&apos;, not &apos;nulling&apos;. When doing get/set, buffer never checks for address to have sense, so the next access will yield a GPF &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
The guys from Sun explained the absence of unmap() in the original design - the only way of closing mapped buffer and not getting unpredictable behaviour is to introduce a synchronized isClosed check on each read/write operation, which kills the performance even if the sync method used is just a volatile variable.&lt;/p&gt;</comment>
                    <comment id="12715017" author="thetaphi" created="Mon, 1 Jun 2009 09:15:14 +0100"  >&lt;p&gt;Updated patch: I forgot to add a check, if the IndexInput was already closed.&lt;/p&gt;</comment>
                    <comment id="12715018" author="earwin" created="Mon, 1 Jun 2009 09:18:44 +0100"  >&lt;p&gt;Ah! You was referring to your code. It&apos;s not thread-safe still. Someone could access the closed buffer before it sees the now-null reference to it.&lt;br/&gt;
You also employ the hack on non-windows machines, that work quite well without it. What for?&lt;/p&gt;</comment>
                    <comment id="12715019" author="thetaphi" created="Mon, 1 Jun 2009 09:20:46 +0100"  >&lt;p&gt;I know this code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, its on every platform the same. For our MMapDirectory this is not a problem, as nobody can accidently read/write the buffer, because the reference to it is nulled in our code. The buffer member itsself is private, so nobody can access it from outside. So after closing the IndexInput, nothing can access the buffer.&lt;br/&gt;
This is what I meant with &quot;nulling&quot;.&lt;/p&gt;</comment>
                    <comment id="12715020" author="thetaphi" created="Mon, 1 Jun 2009 09:26:07 +0100"  >&lt;blockquote&gt;&lt;p&gt;You also employ the hack on non-windows machines, that work quite well without it. What for?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It uses less virtual memory &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ah! You was referring to your code. It&apos;s not thread-safe still. Someone could access the closed buffer before it sees the now-null reference to it. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For the thread-safety, youre correct. To solve this, we have to add the synchronized isClosed check on our side, which kills performance. I wanted to check, what happens, if somebody really accesses the buffer after unmapping, does it crash the JVM?&lt;/p&gt;</comment>
                    <comment id="12715026" author="earwin" created="Mon, 1 Jun 2009 09:42:41 +0100"  >&lt;p&gt;I tested on MacOS:&lt;/p&gt;

&lt;p&gt;Invalid memory access of location 8b55a000 rip=0110c367&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Here JVM quietly dies. non-null return code, all threads are killed, no diagnostic files created.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12715027" author="earwin" created="Mon, 1 Jun 2009 09:44:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;It uses less virtual memory &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;64bit systems have an abundance of said valuable resource. Why taint them with dangerous hacks for the sake of zero returns?&lt;/p&gt;</comment>
                    <comment id="12715033" author="thetaphi" created="Mon, 1 Jun 2009 10:23:21 +0100"  >&lt;p&gt;You are right, it is quite dangerous, if somebody e.g. closes an IndexReader in one thread and another thread still accesses it (this happens often).&lt;/p&gt;</comment>
                    <comment id="12715038" author="mikemccand" created="Mon, 1 Jun 2009 10:58:22 +0100"  >&lt;p&gt;OK the hack now scares me!&lt;/p&gt;

&lt;p&gt;Let&apos;s just return SimpleFSDir on all Windows?  And, note this bug in the FSDir &amp;amp; MMapDir javadocs.&lt;/p&gt;

&lt;p&gt;Also: I think we should fix the open logic so that on an unknown platform (not unix, not windows, not 64 bit), return SimpleFSDir?&lt;/p&gt;</comment>
                    <comment id="12715040" author="shaie" created="Mon, 1 Jun 2009 11:02:55 +0100"  >&lt;p&gt;I&apos;m a bit nervous about creating MMapDirectory automatically for any OS, not just Windows. Imagine a large index which is suddenly mapped to MMB w/o anyone intending to do so.&lt;/p&gt;

&lt;p&gt;I think that because of the memory implications of using MMapDir we should let apps explicitly create it, and not under the covers, because of OS parameter. I think that using MMapDir goes far beyond just OS, and hence why it&apos;s dangerous to create it under the covers.&lt;/p&gt;</comment>
                    <comment id="12715042" author="mikemccand" created="Mon, 1 Jun 2009 11:07:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;I removed the test completely here, but forgot to include this into the patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK that makes sense.  When you commit this, you can also just remove the test from the back-compat branch...&lt;/p&gt;

&lt;p&gt;The &quot;hack&quot; also saves transient disk space, on all systems, right?  Just because the file name link is deleted on Unix, the bytes are still consuming disk space.  So, Uwe in javadoc&apos;ing Sun&apos;s bug, can you note  that the bug causes higher transient disk usage?  Maybe we all should go vote for the bug... but it seems our votes will be in the noise.  I&apos;ll go add this bug to &lt;a href=&quot;http://wiki.apache.org/lucene-java/SunJavaBugs&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/lucene-java/SunJavaBugs&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12715049" author="thetaphi" created="Mon, 1 Jun 2009 11:26:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m a bit nervous about creating MMapDirectory automatically for any OS, not just Windows. Imagine a large index which is suddenly mapped to MMB w/o anyone intending to do so.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would not be a problem, because MMaped files does not &quot;consume&quot; real memory. If a part of the index is seen in &quot;real memory&quot; still is in the responsibility of the operating system. I have a mmaped index here that is updated very often. It leads to a lot of assigned address space in top for the process but does not affect system performance or swapping (sometimes beyond the physical limit of the machine (mem + swap). Memory mapping files does not consume RAM, it just consumes address space (this is why I changed the javadocs a little bit to clarify this).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The &quot;hack&quot; also saves transient disk space, on all systems, right? Just because the file name link is deleted on Unix, the bytes are still consuming disk space.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, this is why I let the fix enabled for any OS.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also: I think we should fix the open logic so that on an unknown platform (not unix, not windows, not 64 bit), return SimpleFSDir?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would not do this.&lt;/p&gt;

&lt;p&gt;NIO2 still has no solution for the problem. But they have a 64 bit buffer, so you could use it instead of many buffers. On the Amsterdam ApacheCon conference, this was part of the discussion with the guy from sun, but I forgot what the conclusion was! Maybe Oracle helps here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Maybe we should move this hack to contrib ( a class that extends MMapDirectory by adding a close method) with a big warning!&lt;/p&gt;</comment>
                    <comment id="12715057" author="earwin" created="Mon, 1 Jun 2009 11:58:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m a bit nervous about creating MMapDirectory automatically for any OS, not just Windows.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s almost okay for 64bit systems.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The &quot;hack&quot; also saves transient disk space, on all systems, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s a nice catch. Now I have some of the non-buggy-but-weird behaviour my app exhibits explained.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But they have a 64 bit buffer, so you could use it instead of many buffers.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;They don&apos;t. When NIO2 project was merged into OpenJDK, they left some stuff unmerged, including 64bit buffers. Currently they aren&apos;t present in OpenJDK and Java7 preview builds, and not even a rough estimate is given on whether they are going to make it through, and when.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we should move this hack to contrib ( a class that extends MMapDirectory by adding a close method) with a big warning!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I support this. The hack has some merits if carefully applied, but is outright too dangerous to ship it as default.&lt;/p&gt;</comment>
                    <comment id="12715061" author="shaie" created="Mon, 1 Jun 2009 12:09:04 +0100"  >&lt;p&gt;Perhaps I didn&apos;t phrase it well. I wasn&apos;t worried about memory consumption per sei, but the behavior. On a couple of projects I&apos;ve worked in, they were very reluctant to having packages allocate memory outside the JVM, and that&apos;s my understanding of memory mapped buffers. So what worries me is that by calling FSDir.get()/open(), I will unknowingly do that ...&lt;/p&gt;

&lt;p&gt;While creating SimpleFSDir/NIOFSDir has smaller effect, I think this is not the case with MMapDir. But if you decide to include MMapDir in that auto-create logic, I hope there will be a way to instantiate a specific FSDir, in case we&apos;ll have problems with that logic.&lt;/p&gt;</comment>
                    <comment id="12715063" author="earwin" created="Mon, 1 Jun 2009 12:14:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;On a couple of projects I&apos;ve worked in, they were very reluctant to having packages allocate memory outside the JVM, and that&apos;s my understanding of memory mapped buffers.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;mmap does not allocate memory. It allocates address space, and uses the same disk cache system already has.&lt;br/&gt;
For example, you can&apos;t cause OOM in your (or another co-existing) app with mmaps (except eating up your own address space on 32bit systems).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But if you decide to include MMapDir in that auto-create logic, I hope there will be a way to instantiate a specific FSDir, in case we&apos;ll have problems with that logic.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Public constructors for all D variants are a must, and for me they are the best that this patch has to offer &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12715074" author="mikemccand" created="Mon, 1 Jun 2009 13:30:12 +0100"  >&lt;p&gt;I&apos;m thinking MMapDirectory is too problematic to return by default from open(), because of the unexpected increase transient disk usage.&lt;/p&gt;

&lt;p&gt;I think we should add the hack to MMapDir, disabled by default, and add a setter to enable it (with javadocs clear about the warnings).  When used appropriately it can make MMapdir very usable, as a workaround until Sun fixes the bug.&lt;/p&gt;

&lt;p&gt;So I think we should:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Fix open to return NIOFSDir on all non-Windows plaforms, and SimpleFSDir on Windows&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Document the sun bug in MMapDir &amp;amp; FSDir&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Include hack in MMapDir, disabled by default&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12715079" author="thetaphi" created="Mon, 1 Jun 2009 14:05:44 +0100"  >&lt;p&gt;I am working on this, because I had the same idea. I added an method setUseUnmap(boolean) and getter to enable this. This method throws IAE if unmap is not supported on the platform.&lt;br/&gt;
I also reenabled the IOException on close(), if there was an error during unmapping.&lt;/p&gt;

&lt;p&gt;Just one additional question: Should I add an additional ctor to the three classes, only taking the dir name, this would then be conformant to FSDir.open()?&lt;/p&gt;</comment>
                    <comment id="12715083" author="thetaphi" created="Mon, 1 Jun 2009 14:34:31 +0100"  >&lt;p&gt;New patch with all suggestions, updated Javadocs, additional Ctors with path name only (like static open() method). I also corrected some deprecations and so on. MMapDirectory is no longer returned by open(), the logic is simple now: Windows -&amp;gt; Simple, other -&amp;gt; NIO&lt;/p&gt;

&lt;p&gt;If everybody is fine, I will commit later!&lt;/p&gt;</comment>
                    <comment id="12715105" author="mikemccand" created="Mon, 1 Jun 2009 15:54:44 +0100"  >&lt;p&gt;Looks good &amp;#8211; thanks Uwe &amp;#8211; a few small things:&lt;/p&gt;


&lt;ul&gt;
	&lt;li&gt;Can you remove the a/b from the &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1658&quot; title=&quot;Absorb NIOFSDirectory into FSDirectory&quot;&gt;&lt;del&gt;LUCENE-1658&lt;/del&gt;&lt;/a&gt; in CHANGES.txt?  (I&lt;br/&gt;
    think it may confuse the changes-to-html generation)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can you point out that MMapDirectory will consume transient disk&lt;br/&gt;
    space, regardless of platform, because of this sun bug?  Ie, this&lt;br/&gt;
    bug is not just a &quot;you can&apos;t delete the files on Windows&quot;&lt;br/&gt;
    problem; it&apos;s a problem for unix as well.  Maybe something like&lt;br/&gt;
    this:&lt;br/&gt;
    .&lt;br/&gt;
    Due to &amp;lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4724038&quot;&amp;gt;this bug&amp;lt;/a&amp;gt;&lt;br/&gt;
    in Sun&apos;s JRE, MMapDirectory&apos;s IndexInput.close is unable to close&lt;br/&gt;
    the underlying OS file handle.  Only when GC finally collects the&lt;br/&gt;
    underlying objects, which could be quite some time later, will the file&lt;br/&gt;
    handle be closed.&lt;br/&gt;
    .&lt;br/&gt;
    This will consume additional transient disk usage: on Windows,&lt;br/&gt;
    attempts to delete or overwrite the files will result in an&lt;br/&gt;
    exception; on other platforms, which typically have a &quot;delete on&lt;br/&gt;
    last close&quot; semantics, while such operations will succeed, the bytes&lt;br/&gt;
    are still consuming space on disk.  For many applications this&lt;br/&gt;
    limitation is not a problem (eg if you have plenty of disk space,&lt;br/&gt;
    and you don&apos;t rely on overwriting files on Windows) but it&apos;s still&lt;br/&gt;
    an important limitation to be aware of.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe don&apos;t make MMapDir.cleanUnmapping final, so subclasses could&lt;br/&gt;
    tweak it?  I&apos;m still nervous about throwing IOException from that&lt;br/&gt;
    method if the unmap fails, but if we make it non-final then we can&lt;br/&gt;
    leave the IOException as is and users can subclass it if need be.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can you embed the try/catch inside cleanMapping within { }&apos;s?  The&lt;br/&gt;
    run-on (if -&amp;gt; try) is confusing now.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12715110" author="thetaphi" created="Mon, 1 Jun 2009 16:12:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Maybe don&apos;t make MMapDir.cleanUnmapping final, so subclasses could tweak it? I&apos;m still nervous about throwing IOException from that method if the unmap fails, but if we make it non-final then we can leave the IOException as is and users can subclass it if need be. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I reactivated this exception (it was disabled before). In my opinion, we should enable it to notify the user on any problems (e.g. that he may must raise security privileges to enable it correctly). If the user hits an IOException, he can switch off the tweak easily. By the way, switching on the tweak throws IAE if the platform does not support it.&lt;/p&gt;

&lt;p&gt;cleanUnmapping is currently not really overrideable, because package-private. I can unfinal it and make protected, if needed (I wanted to hide this dangerous method from other usages, not that anyboy calls it for own ByteBuffers and crashes his JVM).&lt;/p&gt;

&lt;p&gt;I will do the other changes, no problem.&lt;/p&gt;</comment>
                    <comment id="12715124" author="mikemccand" created="Mon, 1 Jun 2009 16:28:48 +0100"  >&lt;p&gt;bq I reactivated this exception (it was disabled before). In my opinion, we should enable it to notify the user on any problems (e.g. that he may must raise security privileges to enable it correctly). If the user hits an IOException, he can switch off the tweak easily. By the way, switching on the tweak throws IAE if the platform does not support it.&lt;/p&gt;

&lt;p&gt;Yeah I agree it&apos;s good to be brittle, so one knows to raise security privileges.  But: how intermittent are the exceptions thrown from this code?  Is it a situation where it will always fail or always succeed?  In which case, I agree we can leave it as it is.&lt;/p&gt;</comment>
                    <comment id="12715170" author="thetaphi" created="Mon, 1 Jun 2009 18:49:26 +0100"  >&lt;p&gt;Attached a patch with all changes. I also reworked the exception part in the hack (use the correct PrivilegedException pass-through an init the cause of the IOException, so user knows, if e.g. the security settings were too low).&lt;/p&gt;

&lt;p&gt;I commit shortly.&lt;/p&gt;</comment>
                    <comment id="12715173" author="thetaphi" created="Mon, 1 Jun 2009 18:51:26 +0100"  >&lt;p&gt;hrrrrrm, outdated patch. Missing was the a/b in changes, no fixed.&lt;/p&gt;</comment>
                    <comment id="12715194" author="thetaphi" created="Mon, 1 Jun 2009 19:35:01 +0100"  >&lt;p&gt;Committed revision 780770&lt;/p&gt;</comment>
                    <comment id="12715222" author="shaie" created="Mon, 1 Jun 2009 20:58:55 +0100"  >&lt;p&gt;Uwe - I had code which did new FSDirectory(File, LockFactory), however that ctor is now protected, and my code does not compile. I didn&apos;t see any mentions about this in CHANGES. Since this break compat, I think we should either deprecate this ctor (revert it to public), or document in CHANGES under the &quot;changes to back-compat policy&quot;. Right?&lt;/p&gt;</comment>
                    <comment id="12715231" author="thetaphi" created="Mon, 1 Jun 2009 21:09:06 +0100"  >&lt;p&gt;This codeyou are mentioning was not yet released! So before 2.9 there was no ctor for FSDirectory that was public: &lt;a href=&quot;http://lucene.apache.org/java/2_4_1/api/core/org/apache/lucene/store/FSDirectory.html&quot; class=&quot;external-link&quot;&gt;http://lucene.apache.org/java/2_4_1/api/core/org/apache/lucene/store/FSDirectory.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But SimpleFSDirectory can be instantiated. FSDirectory will get abstract in 3.0 and is only the base class and factory anymore.&lt;/p&gt;</comment>
                    <comment id="12715237" author="shaie" created="Mon, 1 Jun 2009 21:17:26 +0100"  >&lt;p&gt;Ok. I did work against trunk, so that explains. Thanks ! (maybe we should start using @since in all future issues, to avoid the confusion)&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12408582">LUCENE-1453</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12426750">LUCENE-1668</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12409096" name="LUCENE-1658.patch" size="44026" author="mikemccand" created="Tue, 26 May 2009 23:51:53 +0100" />
                    <attachment id="12408963" name="LUCENE-1658.patch" size="43187" author="mikemccand" created="Mon, 25 May 2009 20:59:44 +0100" />
                    <attachment id="12408909" name="LUCENE-1658.patch" size="7512" author="mikemccand" created="Sun, 24 May 2009 17:29:48 +0100" />
                    <attachment id="12409485" name="LUCENE-1658-take2.patch" size="38955" author="thetaphi" created="Sun, 31 May 2009 01:29:48 +0100" />
                    <attachment id="12409484" name="LUCENE-1658-take2.patch" size="38229" author="thetaphi" created="Sun, 31 May 2009 00:38:48 +0100" />
                    <attachment id="12409580" name="LUCENE-1658-take3.patch" size="44788" author="thetaphi" created="Mon, 1 Jun 2009 18:51:26 +0100" />
                    <attachment id="12409559" name="LUCENE-1658-take3.patch" size="42006" author="thetaphi" created="Mon, 1 Jun 2009 14:34:31 +0100" />
                    <attachment id="12409545" name="LUCENE-1658-take3.patch" size="34388" author="thetaphi" created="Mon, 1 Jun 2009 09:15:14 +0100" />
                    <attachment id="12409514" name="LUCENE-1658-take3.patch" size="27843" author="thetaphi" created="Sun, 31 May 2009 23:41:36 +0100" />
                    <attachment id="12409512" name="LUCENE-1658-take3.patch" size="24836" author="thetaphi" created="Sun, 31 May 2009 22:49:14 +0100" />
                    <attachment id="12409506" name="LUCENE-1658-take3.patch" size="20293" author="thetaphi" created="Sun, 31 May 2009 17:13:35 +0100" />
                    <attachment id="12409505" name="LUCENE-1658-take3.patch" size="20440" author="thetaphi" created="Sun, 31 May 2009 17:06:01 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 24 May 2009 22:46:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12100</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26069</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>