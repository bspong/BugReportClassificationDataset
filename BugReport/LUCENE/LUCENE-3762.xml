<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3762/LUCENE-3762.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3762] Upgrade JUnit to 4.10, refactor state-machine of detecting setUp/tearDown call chaining.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3762</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Both Lucene and Solr use JUnit 4.7. I suggest we move forward and upgrade to JUnit 4.10 which provides several infrastructural changes (serializable Description objects, class-level rules, various tweaks). JUnit 4.10 also changes (or fixes, depends how you look at it) the order in which @Before/@After hooks and @Rules are applied. This makes the old state-machine in LuceneTestCase fail (because the order is changed).&lt;/p&gt;

&lt;p&gt;I rewrote the state machine and used a different, I think simpler, although Uwe may disagree &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, mechanism in which the hook methods setUp/ tearDown are still there, but they are empty at the top level and serve only to detect whether subclasses chain super.setUp/tearDown properly (if they override anything).&lt;/p&gt;

&lt;p&gt;In the long term, I would love to just get rid of public setup/teardown methods and make them private (so that they cannot be overriden or even seen by subclasses) but this will require changes to the runner itself.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12541867">LUCENE-3762</key>
            <summary>Upgrade JUnit to 4.10, refactor state-machine of detecting setUp/tearDown call chaining.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dweiss">Dawid Weiss</assignee>
                                <reporter username="dweiss">Dawid Weiss</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Feb 2012 19:42:41 +0000</created>
                <updated>Fri, 10 May 2013 11:43:12 +0100</updated>
                    <resolved>Wed, 15 Feb 2012 10:22:57 +0000</resolved>
                                            <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13203894" author="dweiss" created="Wed, 8 Feb 2012 19:44:51 +0000"  >&lt;p&gt;git patch (binary data updates) corresponding to this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dweiss/lucene_solr/commit/b0608e21abcaebb7d39c769689e3c0e987b741f9&quot; class=&quot;external-link&quot;&gt;https://github.com/dweiss/lucene_solr/commit/b0608e21abcaebb7d39c769689e3c0e987b741f9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All tests pass for me, but I would love if somebody else also tried (on a non-windows machine?).&lt;/p&gt;
</comment>
                    <comment id="13203931" author="rcmuir" created="Wed, 8 Feb 2012 20:16:08 +0000"  >&lt;p&gt;looks great, lets upgrade!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JUnit 4.10 also changes (or fixes, depends how you look at it) the order in which @Before/@After hooks and @Rules are applied.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does this mean if we assumeTrue(message, ...) inside a setUp() that we will now actually see the message? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                    <comment id="13203961" author="dweiss" created="Wed, 8 Feb 2012 20:42:08 +0000"  >&lt;p&gt;I just committed a test case that verifies this to GitHub. The message gets propagated properly to RunListeners (as testAssumptionFailure). I don&apos;t see anything in Lucene&apos;s test output when I run a test with such an assumption, but I guess it has to be possible (if nothing else, then by capturing that with a custom RunListener).&lt;/p&gt;</comment>
                    <comment id="13203970" author="dweiss" created="Wed, 8 Feb 2012 20:48:16 +0000"  >&lt;p&gt;Yes, it would be possible. Either at the runner level (worse) or by using a custom rule and not a TestWatcher subclass. What TestWatcher does is this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
			&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void evaluate() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Throwable {
				starting(description);
				&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
					base.evaluate();
					succeeded(description);
				} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AssumptionViolatedException e) {
					&lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
				} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {
					failed(t, description);
					&lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; t;
				} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
					finished(description);
				}
			}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so it effectively skips assumption-failed tests and they&apos;re not passed to LuceneTestCase. Doable, but I think worth a separate issue?&lt;/p&gt;</comment>
                    <comment id="13203975" author="rcmuir" created="Wed, 8 Feb 2012 20:55:53 +0000"  >&lt;p&gt;its definitely a separate issue... just curiousity!&lt;/p&gt;</comment>
                    <comment id="13203989" author="thetaphi" created="Wed, 8 Feb 2012 21:13:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;I rewrote the state machine and used a different, I think simpler, although Uwe may disagree &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, no, the state machine was Robert&apos;s work I only helped on improvements &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13204349" author="dweiss" created="Thu, 9 Feb 2012 08:15:42 +0000"  >&lt;p&gt;Just to clarify: I don&apos;t think the state machine was wrong, it just made assumptions that don&apos;t hold in JUnit4.10 (the order of calls). I decided to remove it because I think there is a cleaner way of ensuring setup/teardown was properly chained if overriden. &lt;/p&gt;

&lt;p&gt;I&apos;ll commit this one in to the trunk and we&apos;ll see if it breaks anything on Jenkins (I don&apos;t think it should, it doesn&apos;t locally).&lt;/p&gt;</comment>
                    <comment id="13204372" author="dweiss" created="Thu, 9 Feb 2012 08:58:13 +0000"  >&lt;p&gt;There are functional differences between TestWatcher (before) and TestWatchman (current) &amp;#8211; assumptions are no longer propagated as failures and the code in LTC.intercept() no longer applies:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void failed(Throwable e, Description description) {
      &lt;span class=&quot;code-comment&quot;&gt;// org.junit.internal.AssumptionViolatedException in older releases
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// org.junit.Assume.AssumptionViolatedException in recent ones
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (e.getClass().getName().endsWith(&lt;span class=&quot;code-quote&quot;&gt;&quot;AssumptionViolatedException&quot;&lt;/span&gt;)) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (e.getCause() &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; _TestIgnoredException)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll write tests to cover these and rewrite the interceptor explicitly as a @Rule so that we don&apos;t rely on JUnit&apos;s implementation with regard as to what is considered what.&lt;/p&gt;
</comment>
                    <comment id="13204404" author="dweiss" created="Thu, 9 Feb 2012 09:50:00 +0000"  >&lt;p&gt;An updated patch with more serious refactorings of LTC.&lt;/p&gt;</comment>
                    <comment id="13204406" author="dweiss" created="Thu, 9 Feb 2012 09:54:58 +0000"  >&lt;p&gt;If we&apos;re changing JUnit perhaps it&apos;s worth upgrading the infrastructure a bit to make things cleaner. I refactored all the hooks into a ruleset so that their nesting order is explicit:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Rule
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; TestRule ruleChain = RuleChain
    .outerRule(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RememberThreadRule())
    .around(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TestResultInterceptorRule())
    .around(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InternalSetupTeardownRule())
    .around(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SubclassSetupTeardownRule());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, subclasses (setup/teardown) run inside, surrounded by internal cleanups, surrounded by test result tracker, surrounded by current thread remembering. I also removed _TestIgnoredException in favor of a subclass of AssumptionIgnoredException - this removes some conditional checks and unwinding code.&lt;/p&gt;

&lt;p&gt;I added some tests to detect the expected behavior of LTC (what Robert mentioned); I would feel great if we check that all the expectations are covered before we commit this in &amp;#8211; if you can post a simple class along with: &quot;this should result in this and that&quot; I&apos;ll update the tests. There are examples of such expectations in the patch (static classes and tests inside TestSetupTeardownMethods class).&lt;/p&gt;</comment>
                    <comment id="13204410" author="dweiss" created="Thu, 9 Feb 2012 09:57:05 +0000"  >&lt;p&gt;Didn&apos;t run the tests yet, doing it in the background.&lt;/p&gt;</comment>
                    <comment id="13204419" author="dweiss" created="Thu, 9 Feb 2012 10:10:08 +0000"  >&lt;p&gt;All tests pass for me with this patch. I didn&apos;t attach a binary patch this time, the patched version is at github:&lt;br/&gt;
&lt;a href=&quot;https://github.com/dweiss/lucene_solr&quot; class=&quot;external-link&quot;&gt;https://github.com/dweiss/lucene_solr&lt;/a&gt; (junit4 branch).&lt;/p&gt;</comment>
                    <comment id="13205380" author="rcmuir" created="Fri, 10 Feb 2012 12:10:34 +0000"  >&lt;p&gt;about the assumes() etc from setup, in general exceptions/assumes, I think we would like them to be treated the same whether they happen in the actual test method body or setup or teardown?&lt;/p&gt;

&lt;p&gt;So like today, the buggy behavior is that if an assumption fails from a test method itself, we get a message to stderr:&lt;br/&gt;
NOTE: Assume failed in &apos;testFoo&apos; (ignored): Some message explaining why this is ok!&lt;/p&gt;

&lt;p&gt;But, if it fails in setup, we get no message at all!&lt;/p&gt;

&lt;p&gt;The reason I think it was hard was because of how the TestWatcher didn&apos;t get an event if it failed in setup, so we didnt have a clean way to &lt;br/&gt;
do this... but maybe its something we can fix in junit 4.8+ (doesn&apos;t need to be done on this issue!)&lt;/p&gt;</comment>
                    <comment id="13205494" author="dweiss" created="Fri, 10 Feb 2012 15:14:33 +0000"  >&lt;p&gt;This already works on the branch I think, but I will re-check. I advanced junit4 branch and integrated junit4 parallel balanced runner instead of the default ANT&apos;s junit and previous set of macros. The code for this patch lives under &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3762&quot; title=&quot;Upgrade JUnit to 4.10, refactor state-machine of detecting setUp/tearDown call chaining.&quot;&gt;&lt;del&gt;LUCENE-3762&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;ll look for corner cases tonight and commit this in. Alternatively we could set up a parallel jenkins build and commit this on a branch to see if everything is all right?&lt;/p&gt;</comment>
                    <comment id="13205818" author="dweiss" created="Fri, 10 Feb 2012 22:44:51 +0000"  >&lt;p&gt;Updated patch with tests of what&apos;s emitted and when.&lt;/p&gt;</comment>
                    <comment id="13205820" author="dweiss" created="Fri, 10 Feb 2012 22:47:32 +0000"  >&lt;p&gt;I checked assume/fail/error in combination with all the possible execution points. LuceneTestCase rule wrapper emits (as could be predicted) the right note for everything but:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;static initializers,&lt;/li&gt;
	&lt;li&gt;@BeforeClass&lt;/li&gt;
	&lt;li&gt;initializers (constructor)&lt;/li&gt;
	&lt;li&gt;@AfterClass&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These cases are handled outside of @Rule scope and should be handled by JUnit and propagated as failures to report listeners.&lt;/p&gt;</comment>
                    <comment id="13205822" author="dweiss" created="Fri, 10 Feb 2012 22:48:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does this mean if we assumeTrue(message, ...) inside a setUp() that we will now actually see the message? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, the answer to this is yes, you will.&lt;/p&gt;</comment>
                    <comment id="13205823" author="dweiss" created="Fri, 10 Feb 2012 22:49:38 +0000"  >&lt;p&gt;I plan to commit this in on Monday (so that I&apos;m at the computer in case something breaks) unless there are objections. &lt;/p&gt;</comment>
                    <comment id="13207628" author="dweiss" created="Tue, 14 Feb 2012 10:52:41 +0000"  >&lt;p&gt;I&apos;ve committed to the trunk and I have a backport of this but I started to wonder if it&apos;s a good idea to apply it on 3x &amp;#8211; this may cause issues with backport testing, if not anything else. Thoughts?&lt;/p&gt;</comment>
                    <comment id="13207642" author="dweiss" created="Tue, 14 Feb 2012 11:28:02 +0000"  >&lt;p&gt;Backport patch. This removes state machine from backport/LuceneTestCase so that backport tests can pass.&lt;/p&gt;</comment>
                    <comment id="13207656" author="rcmuir" created="Tue, 14 Feb 2012 12:06:52 +0000"  >&lt;p&gt;+1 for 3.x too. &lt;/p&gt;</comment>
                    <comment id="13208137" author="steve_rowe" created="Tue, 14 Feb 2012 23:53:11 +0000"  >&lt;p&gt;Dawid, today I&apos;ve seen the following test reproduction message (from Maven, but running Lucene/Solr tests under Maven has caused this before):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;NOTE: reproduce with: ant test -Dtestcase=UIMABaseAnalyzerTest -Dtestmethod=testRandomStrings(org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest) -Dtests.seed=2be0c24a1df9b25e:-42f203968285c6ed:5f8c85cdbae32724 -Dargs=&quot;-Dfile.encoding=Cp1252&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is, the parenthetical class name after the method in the &lt;tt&gt;-Dtestmethod=...&lt;/tt&gt; string doesn&apos;t work - you have to strip this out in order to actually use the given cmdline.&lt;/p&gt;

&lt;p&gt;Am I right in assuming that &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3762&quot; title=&quot;Upgrade JUnit to 4.10, refactor state-machine of detecting setUp/tearDown call chaining.&quot;&gt;&lt;del&gt;LUCENE-3762&lt;/del&gt;&lt;/a&gt; is the source of this behavior change?&lt;/p&gt;</comment>
                    <comment id="13208322" author="dweiss" created="Wed, 15 Feb 2012 09:55:04 +0000"  >&lt;p&gt;Good catch, Steve &amp;#8211; yes, I might have introduced it as part of the refactoring. JUnit has deprecated MethodRule in favor of TestRule and the latter one doesn&apos;t come with a FrameworkMethod... It&apos;s weird.&lt;/p&gt;

&lt;p&gt;I will reopen this issue and apply a fix.&lt;/p&gt;</comment>
                    <comment id="13208323" author="dweiss" created="Wed, 15 Feb 2012 09:55:21 +0000"  >&lt;p&gt;Reopening &amp;#8211; method names in reproduction report.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12514479" name="LUCENE-3762-backport.patch" size="50142" author="dweiss" created="Tue, 14 Feb 2012 11:28:02 +0000" />
                    <attachment id="12514169" name="LUCENE-3762.patch" size="43402" author="dweiss" created="Fri, 10 Feb 2012 22:44:51 +0000" />
                    <attachment id="12513936" name="LUCENE-3762.patch" size="35663" author="dweiss" created="Thu, 9 Feb 2012 09:50:00 +0000" />
                    <attachment id="12513852" name="LUCENE-3762.patch" size="1128764" author="dweiss" created="Wed, 8 Feb 2012 19:44:51 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 8 Feb 2012 20:16:08 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>227155</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23937</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>