<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:08:59 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-698/LUCENE-698.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-698] FilteredQuery ignores boost</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-698</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Filtered query ignores it&apos;s own boost.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12353911">LUCENE-698</key>
            <summary>FilteredQuery ignores boost</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Wed, 25 Oct 2006 05:21:57 +0100</created>
                <updated>Tue, 19 Jun 2007 09:14:49 +0100</updated>
                    <resolved>Thu, 31 May 2007 00:11:20 +0100</resolved>
                            <version>2.0.0</version>
                                <fixVersion>2.2</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12444570" author="yseeley@gmail.com" created="Wed, 25 Oct 2006 05:25:48 +0100"  >&lt;p&gt;I just commited hashCode() and equals() changes to take boost into account so that&lt;br/&gt;
generic tests in QueryUtils.check(query) can pass.&lt;/p&gt;

&lt;p&gt;One should arguably be able to set the boost on any query clause, so I&apos;m leaving this open since I think scoring probably ignores the boost too.&lt;/p&gt;</comment>
                    <comment id="12499622" author="michaelbusch" created="Mon, 28 May 2007 20:03:24 +0100"  >&lt;p&gt;With this patch FilteredQuery takes the boost into account for&lt;br/&gt;
scoring. It includes a test that fails with the trunk version&lt;br/&gt;
and passes with this patch.&lt;/p&gt;

&lt;p&gt;This patch also removes one test from TestSimpleExplanations:&lt;br/&gt;
testFQ7(). These tests check if the score and the value in the &lt;br/&gt;
explanation are the same. testFQ7() in particular verifies this&lt;br/&gt;
for a FilterQuery with a boost of 0. But with a boost of 0 the &lt;br/&gt;
score and the explanation has the value NaN, which makes&lt;br/&gt;
assertEquals() fail. So I believe this is a incorrect test case.&lt;br/&gt;
We just didn&apos;t notice it before because FilteredQuery did not&lt;br/&gt;
take the boost into account.&lt;/p&gt;

&lt;p&gt;All unit tests pass.&lt;/p&gt;</comment>
                    <comment id="12499652" author="hossman" created="Tue, 29 May 2007 02:07:20 +0100"  >&lt;p&gt;i think the test class and test case testFQ7 in particular are &quot;correct&quot; in the sense that they try to verify every conceivable permutation of stock query times has an explanation that matches it&apos;s score ... the problem may just be in the CheckHits.ExplanationAsserter class ... perhaps it should test if either the score or the explanation value are NaN before comparing them, and fail if only one is NaN or if neither is NaN but they are not equal)&lt;/p&gt;

&lt;p&gt;(after all: if the score is NaN, then the explanation should be NaN as well)&lt;/p&gt;</comment>
                    <comment id="12499658" author="michaelbusch" created="Tue, 29 May 2007 03:06:12 +0100"  >&lt;p&gt;&amp;gt; perhaps it should test if either the score or the explanation value are NaN &lt;br/&gt;
&amp;gt; before comparing them, and fail if only one is NaN or if neither is NaN but &lt;br/&gt;
&amp;gt; they are not equal)&lt;/p&gt;

&lt;p&gt;Thanks for reviewing, Hoss! You are right, we could do that and I was actually&lt;br/&gt;
thinking about it already. The problem is if I make this fix than testFQ7 fails&lt;br/&gt;
for TestSimpleExplanationsOfNonMatches because it is assumed that all&lt;br/&gt;
non matching docs have a score of 0.0. I can easily change that, so that non&lt;br/&gt;
matching docs can either have a score of 0.0 or NaN but I was not sure if we&lt;br/&gt;
want that, because other scoring bugs resulting in a score of NaN (which we &lt;br/&gt;
will hopefully never have) wouldn&apos;t be noticed then anymore.&lt;/p&gt;

&lt;p&gt;The reason why I argued that testFQ7 is an invalid test case is that it would&lt;br/&gt;
fail for any other query with a boost set to 0. Ironically we have this test&lt;br/&gt;
only for FilteredQuery, the only query class that ignores the boost, which&lt;br/&gt;
made it pass in the past.&lt;/p&gt;</comment>
                    <comment id="12499668" author="hossman" created="Tue, 29 May 2007 03:58:17 +0100"  >

&lt;p&gt;Ahhhh ... yes, looking back at the comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-557&quot; title=&quot;search vs explain - score discrepancies&quot;&gt;&lt;del&gt;LUCENE-557&lt;/del&gt;&lt;/a&gt; I remember now: I originally thought boosts of 0.0 were legal for all queries, and then discovered i was wrong, and removed a bunch of tests &amp;#8211; but i clearly missed this one because it wasn&apos;t failing.&lt;/p&gt;

&lt;p&gt;we should go ahead and remove the test ... but we should probably also fix FilteredQuery so that a boost of 0 produces some other result then just a NaN score (either an exception, or a score of 0) since as you say: NaN scores are bad.&lt;/p&gt;</comment>
                    <comment id="12499673" author="michaelbusch" created="Tue, 29 May 2007 04:50:24 +0100"  >&lt;p&gt;&amp;gt; but we should probably also fix FilteredQuery so that a boost of 0 &lt;br/&gt;
&amp;gt; produces some other result then just a NaN score (either an exception,&lt;br/&gt;
&amp;gt; or a score of 0) since as you say: NaN scores are bad.&lt;/p&gt;

&lt;p&gt;TermQuery actually behaves the same way. If boost is zero, then&lt;br/&gt;
sumOfSquaredWeights() returns zero as well, resulting in a&lt;br/&gt;
queryNorm of Infinity (due to a div by zero if DefaultSimilarity is &lt;br/&gt;
used). Then it multiplies boost and queryNorm and 0*Infinity=NaN.&lt;/p&gt;
</comment>
                    <comment id="12499674" author="michaelbusch" created="Tue, 29 May 2007 05:00:16 +0100"  >&lt;p&gt;Maybe Query.setBoost() should throw an IllegalArgumentException&lt;br/&gt;
in case the value is zero?&lt;/p&gt;</comment>
                    <comment id="12499675" author="hossman" created="Tue, 29 May 2007 05:03:24 +0100"  >&lt;p&gt;Hmmm.. didn&apos;t realize that. I withdrawal all previous comments.  patch seems fine to me.&lt;/p&gt;</comment>
                    <comment id="12499676" author="hossman" created="Tue, 29 May 2007 05:04:38 +0100"  >&lt;p&gt;whoops .. comment collision.&lt;/p&gt;

&lt;p&gt;i think the patch as it stands is fine for this issue .. but we may want another issue to hollisticly question NaN as a score.&lt;/p&gt;</comment>
                    <comment id="12499921" author="cutting" created="Tue, 29 May 2007 21:54:57 +0100"  >&lt;p&gt;&amp;gt; Maybe Query.setBoost() should throw an IllegalArgumentException in case the value is zero?&lt;/p&gt;

&lt;p&gt;FYI, Nutch uses Query.setBoost(0.0f) to add clauses which affect the set of results but not their ranking.  In particular, it uses this to automatically convert query clauses into filters, so that query clauses like &quot;lang:en&quot; can be implemented as cached filters.  Note that not all such clauses are so optimized.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc/lucene/nutch/trunk/src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java?view=markup&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewvc/lucene/nutch/trunk/src/java/org/apache/nutch/searcher/LuceneQueryOptimizer.java?view=markup&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12500252" author="michaelbusch" created="Wed, 30 May 2007 23:38:05 +0100"  >&lt;p&gt;&amp;gt; FYI, Nutch uses Query.setBoost(0.0f) to add clauses which affect the &lt;br/&gt;
&amp;gt; set of results but not their ranking. In particular, it uses this to &lt;br/&gt;
&amp;gt; automatically convert query clauses into filters, so that query &lt;br/&gt;
&amp;gt; clauses like &quot;lang:en&quot; can be implemented as cached filters. Note &lt;br/&gt;
&amp;gt; that not all such clauses are so optimized. &lt;/p&gt;

&lt;p&gt;Thanks for the hint, Doug. OK, I understand how you use boost=0.0f in&lt;br/&gt;
Nutch. Quite cool and elegant idea actually!&lt;/p&gt;

&lt;p&gt;I guess then throwing an IllegalArgumentException in case boost=0 would&lt;br/&gt;
break this. The question remains if we should fix the scorers to never&lt;br/&gt;
return NaN. Hmm, I&apos;m not completely sure how to do this. Maybe &lt;br/&gt;
DefaultSimilarity.queryNorm() should return 0 instead of Infinity in &lt;br/&gt;
case sumOfSquaredWeights is 0. But then with custom Similarity &lt;br/&gt;
implemenations we could still end up getting NaN.&lt;/p&gt;

&lt;p&gt;A different solution of course is to fix it in the scorers itself, to&lt;br/&gt;
return a score of 0 in case boost is 0. But then we&apos;d have to add &lt;br/&gt;
checks in the score() and explain() methods, which might be a &lt;br/&gt;
performance overhead.&lt;/p&gt;

&lt;p&gt;So I&apos;m not sure if we should &quot;fix&quot; this at all considering these &lt;br/&gt;
difficulties and the fact that nobody complained (I think?) about the &lt;br/&gt;
NaN so far.&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ll go ahead and commit &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-698&quot; title=&quot;FilteredQuery ignores boost&quot;&gt;&lt;del&gt;LUCENE-698&lt;/del&gt;&lt;/a&gt; since this NaN problem is a &lt;br/&gt;
separate issue and not only happing for the FilteredQuery.&lt;/p&gt;</comment>
                    <comment id="12500257" author="michaelbusch" created="Thu, 31 May 2007 00:11:20 +0100"  >&lt;p&gt;Patch committed.&lt;/p&gt;</comment>
                    <comment id="12500427" author="cutting" created="Thu, 31 May 2007 19:04:22 +0100"  >&lt;p&gt;&amp;gt; If boost is zero, then&lt;br/&gt;
&amp;gt; sumOfSquaredWeights() returns zero as well, resulting in a&lt;br/&gt;
&amp;gt; queryNorm of Infinity (due to a div by zero if DefaultSimilarity is&lt;br/&gt;
&amp;gt; used). Then it multiplies boost and queryNorm and 0*Infinity=NaN.&lt;/p&gt;

&lt;p&gt;The bug here to me seems that queryNorm is Infinity.  A boost of zero has a reasonable interpretation (don&apos;t influence scoring), but I don&apos;t see how a queryNorm of Infinity is ever useful.  So perhaps we can remove the NaN by modifying the default implementation of queryNorm to return 1.0 instead of Infinity when passed zero.  Would that cause any harm?&lt;/p&gt;</comment>
                    <comment id="12500437" author="yseeley@gmail.com" created="Thu, 31 May 2007 19:28:19 +0100"  >&lt;p&gt;&amp;gt; the default implementation of queryNorm to return 1.0 instead of Infinity when passed zero.&lt;/p&gt;

&lt;p&gt;That seems like it should be fine, esp since Similarity.queryNorm is only called at the top level when creating a weight.&lt;/p&gt;</comment>
                    <comment id="12500552" author="michaelbusch" created="Fri, 1 Jun 2007 02:56:07 +0100"  >&lt;p&gt;&amp;gt; So perhaps we can remove the NaN by modifying the default implementation of &lt;br/&gt;
&amp;gt; queryNorm to return 1.0 instead of Infinity when passed zero. Would that &lt;br/&gt;
&amp;gt; cause any harm?&lt;/p&gt;

&lt;p&gt;Yes I believe this should work, too. This would prevent the NaN score when&lt;br/&gt;
DefaultSimilarity is used. It will be the responsibility of people&lt;br/&gt;
who implement their own Similarity then to take care of this in a similar way.&lt;/p&gt;

&lt;p&gt;I&apos;ll open a new issue for fixing the DefaultSimilarity.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12358392" name="lucene-698.patch" size="5005" author="michaelbusch" created="Mon, 28 May 2007 20:03:24 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 28 May 2007 19:03:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13054</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27032</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>