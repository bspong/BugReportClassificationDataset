<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1609/LUCENE-1609.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1609] Eliminate synchronization contention on initial index reading in TermInfosReader ensureIndexIsRead </title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1609</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;synchronized method ensureIndexIsRead in TermInfosReader causes contention under heavy load&lt;/p&gt;

&lt;p&gt;Simple to reproduce: e.g. Under Solr, with all caches turned off, do a simple range search e.g. id:&lt;span class=&quot;error&quot;&gt;&amp;#91;0 TO 999999&amp;#93;&lt;/span&gt; on even a small index (in my case 28K docs) and under a load/stress test application, and later, examining the Thread dump (kill -3) , many threads are blocked on &apos;waiting for monitor entry&apos; to this method.&lt;/p&gt;

&lt;p&gt;Rather than using Double-Checked Locking which is known to have issues, this implementation uses a state pattern, where only one thread can move the object from IndexNotRead state to IndexRead, and in doing so alters the objects behavior, i.e. once the index is loaded, the index nolonger needs a synchronized method. &lt;/p&gt;

&lt;p&gt;In my particular test, this uncreased throughput at least 30 times.&lt;/p&gt;
</description>
                <environment>&lt;p&gt;Solr &lt;br/&gt;
Tomcat 5.5&lt;br/&gt;
Ubuntu 2.6.20-17-generic&lt;br/&gt;
Intel(R) Pentium(R) 4 CPU 2.80GHz, 2Gb RAM&lt;/p&gt;</environment>
            <key id="12423590">LUCENE-1609</key>
            <summary>Eliminate synchronization contention on initial index reading in TermInfosReader ensureIndexIsRead </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="rosher">Dan Rosher</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Apr 2009 16:27:47 +0100</created>
                <updated>Thu, 2 May 2013 03:29:25 +0100</updated>
                    <resolved>Thu, 23 Jul 2009 01:02:55 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12701973" author="thetaphi" created="Thu, 23 Apr 2009 17:00:38 +0100"  >&lt;p&gt;Are you sure, this works correct? If the indexState is changed in the synchronized block, another thread not synchronizing on the lock may still see the old indexState. At least, the indexState must be volatile, but this only works correct with Java 1.5 (and Lucene only needs Java 1.4 as requirement).&lt;/p&gt;</comment>
                    <comment id="12701986" author="earwin" created="Thu, 23 Apr 2009 17:36:50 +0100"  >&lt;p&gt;The problem is not with indexState not being volatile. You can unsafely publish objects that have no internal state, or their state is consistent enough for you under any memory visibility/reordering effects. See working example of it in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1607&quot; title=&quot;String.intern() faster alternative&quot;&gt;&lt;del&gt;LUCENE-1607&lt;/del&gt;&lt;/a&gt;, Yonik&apos;s hash for interning strings.&lt;/p&gt;

&lt;p&gt;The problem is that indexState guards indexTerms, indexInfos, indexPointers, which aren&apos;t volatile too and aren&apos;t guarded by the lock. It is possible that one thread does load these fields and then sets indexState = new IndexRead(), but another thread sees only the last write and dies with NPE.&lt;/p&gt;

&lt;p&gt;The thing I don&apos;t get, is why do we want lazy loading here at all? Is there any usage for TermInfosReader that prevents it from initializing in constructor?&lt;/p&gt;</comment>
                    <comment id="12701994" author="thetaphi" created="Thu, 23 Apr 2009 17:52:41 +0100"  >&lt;p&gt;You could fix this, if you put all these field into the state object, too (an abstract class instead of interface containing these variables) and cloning those on creating the new state. But then you have the mentioned problem, that one thread may exchange the state object to a IndexRead, but another one still sees the reference to the IndexNotRead object, not used any longer. As log as you not also sychronize the state object change or make it volatile in Java 1.5 it will still not work. That was, what I meant.&lt;br/&gt;
In my opinion, this is not fixable in any case with these type of state objects, yes?&lt;/p&gt;</comment>
                    <comment id="12702011" author="earwin" created="Thu, 23 Apr 2009 18:04:46 +0100"  >&lt;p&gt;You cannot put all these fields into state object, because you introduce state to it and it can no longer be unsafely published.&lt;/p&gt;

&lt;p&gt;&amp;gt; one thread may exchange the state object to a IndexRead, but another one still sees the reference to the IndexNotRead object&lt;br/&gt;
Nothing terrible here, a thread hitting stale IndexNotRead synchronizes and short-circuits in the beginning of the method. The problem is that seeing proper state object doesn&apos;t guarantee seeing fields it is supposed to guard &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Yes, it&apos;s not fixable here without volatile or proper synchronization. But I still have a feeling that lazy loading (and consequent synchronization) is not needed here at all.&lt;/p&gt;</comment>
                    <comment id="12702379" author="yseeley@gmail.com" created="Fri, 24 Apr 2009 15:16:52 +0100"  >&lt;p&gt;Re: why the lazy load&lt;br/&gt;
&lt;a href=&quot;http://www.lucidimagination.com/search/document/97e73361748808b/terminfosreader_lazy_term_index_reading#2a73aaca25d516ec&quot; class=&quot;external-link&quot;&gt;http://www.lucidimagination.com/search/document/97e73361748808b/terminfosreader_lazy_term_index_reading#2a73aaca25d516ec&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12702404" author="mikemccand" created="Fri, 24 Apr 2009 16:09:54 +0100"  >&lt;p&gt;If it&apos;s only for segment merging, couldn&apos;t we up front conditionalize the loading of the index?&lt;/p&gt;</comment>
                    <comment id="12705019" author="rosher" created="Fri, 1 May 2009 16:32:44 +0100"  >&lt;p&gt;I&apos;ve added the TermInfosReader object to the constructor of the IndexNotRead object so that it can be synchronised  on during readIndex, and then protect indexTerms, indexInfos, indexPointer&lt;/p&gt;</comment>
                    <comment id="12705138" author="mikemccand" created="Fri, 1 May 2009 22:56:17 +0100"  >&lt;p&gt;Could we instead change TermInfosReader (it&apos;s package private so that&apos;s OK) to take &quot;boolean loadIndex&quot;, and fix callers to thread down that argument?&lt;/p&gt;</comment>
                    <comment id="12705279" author="yseeley@gmail.com" created="Sat, 2 May 2009 14:33:18 +0100"  >&lt;blockquote&gt;&lt;p&gt;If it&apos;s only for segment merging, couldn&apos;t we up front conditionalize the loading of the index?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since the indexWriter now does deletes, doesn&apos;t it sometimes need the term index too?&lt;/p&gt;</comment>
                    <comment id="12705547" author="mikemccand" created="Mon, 4 May 2009 11:06:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;Since the indexWriter now does deletes, doesn&apos;t it sometimes need the term index too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, so when IW opens the SR in order to apply deletes it should request that the terms index be loaded?&lt;/p&gt;

&lt;p&gt;Though, because iW now internally pools open SR&apos;s (for NRT search), it&apos;s entirely possible that an SR already opened for merging is re-used when it&apos;s time to apply deletes (even in the NRT case).  To handle that we could add a package private method to load the terms index, which only IW would call (we do something similar with the doc stores).  IW&apos;s synchronization ensures only one thread would call the method.&lt;/p&gt;

&lt;p&gt;It would then not be necessary to check on every Term lookup whether the index was loaded.&lt;/p&gt;

&lt;p&gt;In general I prefer up-front initialization when possible.  Ie, when I call IndexReader.open, it should do as much initializing as it can instead of deferring initialization until the first query.&lt;/p&gt;</comment>
                    <comment id="12716118" author="jedws" created="Thu, 4 Jun 2009 02:03:15 +0100"  >&lt;p&gt;We get hit by this too. We&apos;d love to see a fix and we&apos;d agree that up-front initialisation would work for us.&lt;/p&gt;

&lt;p&gt;AFAICT there are a number of other potential subtle concurrency issues with &lt;tt&gt;TermInfosReader&lt;/tt&gt;:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;lack of &lt;tt&gt;final&lt;/tt&gt; on fields - a number of fields (&lt;tt&gt;directory&lt;/tt&gt;, &lt;tt&gt;segment&lt;/tt&gt;, &lt;tt&gt;fieldInfos&lt;/tt&gt;, &lt;tt&gt;origEnum&lt;/tt&gt;, &lt;tt&gt;enumerators&lt;/tt&gt; etc.) are never written to after construction and should be declared &lt;tt&gt;final&lt;/tt&gt; for better publication semantics&lt;/li&gt;
	&lt;li&gt;unsafe publication of &lt;tt&gt;indexDivisor&lt;/tt&gt; and &lt;tt&gt;totalIndexInterval&lt;/tt&gt; these fields are not written to under lock and in a worst-case could be unstable under use.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;close()&lt;/tt&gt; calls &lt;tt&gt;enumerators.set(null)&lt;/tt&gt; which only clears the value for the calling thread.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Making the &lt;tt&gt;TermInfosReader&lt;/tt&gt; more immutable would address some of these issues.&lt;/p&gt;

&lt;p&gt;As far as the root problem goes, uncontended synchronisation is generally &lt;em&gt;very fast&lt;/em&gt;, but significantly slows down once a lock becomes contended. The kind of pattern employed here (do something quite expensive but only once) is not an ideal use of synchronisation as it commonly leads to a contended lock, which remains a slow lock well after it is required&amp;#42;. That being said, it isn&apos;t easy to do correctly and performantly under 1.4. &lt;/p&gt;

&lt;p&gt;&amp;#42; An alternative approach is something like this &lt;a href=&quot;http://labs.atlassian.com/source/browse/CONCURRENT/trunk/src/main/java/com/atlassian/util/concurrent/LazyReference.java?r=2242&quot; class=&quot;external-link&quot;&gt;LazyReference&lt;/a&gt; class, although this kind of thing really requires Java5 for full value.&lt;/p&gt;</comment>
                    <comment id="12716232" author="mikemccand" created="Thu, 4 Jun 2009 11:50:29 +0100"  >&lt;p&gt;I agree, we need to fix this for 2.9.  I&apos;ll explore the &quot;initialize up front&quot; approach.&lt;/p&gt;</comment>
                    <comment id="12716376" author="yseeley@gmail.com" created="Thu, 4 Jun 2009 20:29:51 +0100"  >&lt;p&gt;It would be nice to fix, but I wonder how important it is (i.e. a must fix for 2.9 vs 3.0 where we can use Java5)&lt;br/&gt;
Wouldn&apos;t an application that hit contention on this very fast test, simply go on to hit a different contention point after this one is removed?&lt;/p&gt;

&lt;p&gt;A much better application fix is to simply limit the number of threads executing queries.&lt;/p&gt;</comment>
                    <comment id="12716593" author="mikemccand" created="Fri, 5 Jun 2009 13:19:22 +0100"  >&lt;p&gt;I agree we could ship 2.9 without this fix (in fact I think most of&lt;br/&gt;
the issues marked 2.9 could be postponed until 3.x), but...&lt;/p&gt;

&lt;p&gt;Because the ability of the JRE to downgrade an inflated lock back to a&lt;br/&gt;
lightweight lock seems to be very implementation/version dependent,&lt;br/&gt;
coupled with the fact that term info lookup is very frequently called&lt;br/&gt;
(especially for MultiTermQuery), makes me think this is indeed&lt;br/&gt;
something rather important to fix.&lt;/p&gt;

&lt;p&gt;And a nice side effect of up-front init is that it front-loads&lt;br/&gt;
initialization more, ie, the work is done in IndexReader.open instead&lt;br/&gt;
of the first query.  (Other things, like populating FieldCache,&lt;br/&gt;
loading norms, still happen on the first query of course...).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A much better application fix is to simply limit the number of threads executing queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well... if your hardware has concurrency, is it really the case that&lt;br/&gt;
Lucene never gets in the way?  I&apos;d love to see this confirmed&lt;br/&gt;
empirically.  Ie you should ideally be able to run as many threads as&lt;br/&gt;
will saturate your hardware, and see it scale properly.&lt;/p&gt;</comment>
                    <comment id="12718175" author="mikemccand" created="Wed, 10 Jun 2009 21:08:33 +0100"  >&lt;p&gt;Alas... the big problem with doing this up-front is the IndexReader.setTermIndexInterval, which relies on the fact that the index is loaded lazily.&lt;/p&gt;

&lt;p&gt;So, maybe we need to wait until 3.0 to do this up-front.&lt;/p&gt;

&lt;p&gt;But perhaps for this issue we should make it possible to pass in the termIndexInterval to IndexReader.open, and deprecate the current methods, and then in 3.0 we could switch to up-front loading.&lt;/p&gt;</comment>
                    <comment id="12727707" author="mikemccand" created="Mon, 6 Jul 2009 20:17:55 +0100"  >&lt;p&gt;Attached patch.  This addresses this issue and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1718&quot; title=&quot;IndexReader.setTermInfosIndexDivisor doesn&amp;#39;t carry over to reopened readers&quot;&gt;&lt;del&gt;LUCENE-1718&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I added 2 new static IndexReader.open expert methods that allow you to&lt;br/&gt;
pass in the TermInfos index divisor.  You can pass in -1 to disable&lt;br/&gt;
loading of the index entirely (eg, IndexWriter does this when merging&lt;br/&gt;
segments).  I also added the param to IndexWriter.getReader, so you&lt;br/&gt;
can get an NRT reader w/ subsampled index terms.&lt;/p&gt;

&lt;p&gt;This replaces the set/getTermInfosIndexDivisor methods (they are now&lt;br/&gt;
deprecated), ie you now must specify the divisor when opening the&lt;br/&gt;
reader.  If these methods are called, an UnsupportedOperationException&lt;br/&gt;
is thrown.  This is technically a break in back compat (previously you&lt;br/&gt;
could call it before the terms index was used, eg if no searches had&lt;br/&gt;
been run) but I think we should make an exception here.  Very few&lt;br/&gt;
users make use of these expert methods, and having these users switch&lt;br/&gt;
to specifying the index divisor up front is a small code change in&lt;br/&gt;
exchange for removing all synchronization from the terms dict.&lt;/p&gt;

&lt;p&gt;I also made all attrs in TermInfosReader final, and there is no longer&lt;br/&gt;
any synchronization.  To handle the case in IndexWriter, where a merge&lt;br/&gt;
first opens a segment (which does not need the index) and then an NRT&lt;br/&gt;
reader (or, applyDeletes) needs to share the same pooled reader and&lt;br/&gt;
needs the terms index, I added a PrivateTermsDict static class to&lt;br/&gt;
SegmentReader.  This class just wraps a no-index-loaded&lt;br/&gt;
TermInfosReader, which merging will use, and then can open a new&lt;br/&gt;
index-is-loaded TermInfosReader when/if needed.&lt;/p&gt;</comment>
                    <comment id="12729750" author="mikemccand" created="Fri, 10 Jul 2009 19:10:17 +0100"  >&lt;p&gt;Updated patch to resolve conflicts after &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1726&quot; title=&quot;IndexWriter.readerPool create new segmentReader outside of sync block&quot;&gt;&lt;del&gt;LUCENE-1726&lt;/del&gt;&lt;/a&gt;... I plan to commit soon.&lt;/p&gt;</comment>
                    <comment id="12734387" author="mikemccand" created="Thu, 23 Jul 2009 00:38:20 +0100"  >&lt;p&gt;Reopening to un-deprecate getTermInfosIndexDivisor.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12361886">SOLR-138</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12413144" name="LUCENE-1609.patch" size="44628" author="mikemccand" created="Fri, 10 Jul 2009 19:10:17 +0100" />
                    <attachment id="12412646" name="LUCENE-1609.patch" size="50776" author="mikemccand" created="Mon, 6 Jul 2009 20:17:55 +0100" />
                    <attachment id="12407009" name="LUCENE-1609.patch" size="3258" author="rosher" created="Fri, 1 May 2009 16:32:44 +0100" />
                    <attachment id="12406240" name="LUCENE-1609.patch" size="2949" author="rosher" created="Thu, 23 Apr 2009 16:29:45 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 23 Apr 2009 16:00:38 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12146</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26119</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>