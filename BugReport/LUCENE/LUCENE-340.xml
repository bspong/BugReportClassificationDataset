<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:11:57 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-340/LUCENE-340.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-340] [PATCH] Highlighter: Delegate output escaping to Formatter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-340</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Patch for jakarta-lucene-sandbox/contributions/highlighter&lt;br/&gt;
CVS version 3rd February 2005&lt;/p&gt;

&lt;p&gt;This patch allows the highlighter Formatter to control escaping of the non&lt;br/&gt;
highlighted text as well as the highlighting of the matching text.&lt;/p&gt;

&lt;p&gt;The example formatters highlight the matching text using XML/HTML tags. This&lt;br/&gt;
works fine if the plain text does not contain any characters that need to be&lt;br/&gt;
escaped for HTML output (i.e. &amp;lt;, &amp;amp;, and &quot;), however this cannot be guaranteed.&lt;br/&gt;
As the formatter controls the method of highlighting (in the examples this is&lt;br/&gt;
HTML, but it could be any other form of markup) it should also be responsible&lt;br/&gt;
for escaping the rest of the output.&lt;/p&gt;

&lt;p&gt;This patch adds a method, encodeText(String), to the Formatter interface. This&lt;br/&gt;
is a breaking change. This method is called from the Highlighter with the text&lt;br/&gt;
that is not passed to the formatter&apos;s highlightTerm method. &lt;br/&gt;
The SimpleHTMLFormatter has a public static method for performing simple HTML&lt;br/&gt;
escaping called htmlEncode. &lt;br/&gt;
The SimpleHTMLFormatter, GradientFormatter, and SpanGradientFormatter have been&lt;br/&gt;
updated to implement the encodeText method and call the htmlEncode method to&lt;br/&gt;
escape the output.&lt;/p&gt;

&lt;p&gt;For existing formatter to maintain exactly the same behaviour as before applying&lt;br/&gt;
this patch they would need to implement the encodeText method to return the&lt;br/&gt;
argument value without modification, e.g.:&lt;/p&gt;

&lt;p&gt;public String encodeText(String originalText)&lt;br/&gt;
{&lt;br/&gt;
  return originalText;&lt;br/&gt;
}&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: Windows XP&lt;br/&gt;
Platform: PC&lt;/p&gt;</environment>
            <key id="12314490">LUCENE-340</key>
            <summary>[PATCH] Highlighter: Delegate output escaping to Formatter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="nicko">Nicko Cadell</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Feb 2005 00:45:22 +0000</created>
                <updated>Thu, 2 Jun 2011 23:03:42 +0100</updated>
                    <resolved>Fri, 23 Sep 2005 21:10:04 +0100</resolved>
                                                            <component>core/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322163" author="nicko" created="Fri, 4 Feb 2005 00:47:18 +0000"  >&lt;p&gt;Created an attachment (id=14169)&lt;br/&gt;
Delegate output escaping to Formatter encodeText method&lt;/p&gt;</comment>
                    <comment id="12322164" author="markharw00d@yahoo.co.uk" created="Fri, 4 Feb 2005 02:24:59 +0000"  >&lt;p&gt;&amp;gt; This patch allows the highlighter Formatter to control escaping of the non&lt;br/&gt;
&amp;gt; highlighted text as well as the highlighting of the matching text.&lt;/p&gt;

&lt;p&gt;Thanks for this. I think the suggestion looks useful but I have a couple of&lt;br/&gt;
concerns. Not only do we break the Formatter interface, we also break the&lt;br/&gt;
behaviour for those upgrading. If people have applications which already escape&lt;br/&gt;
the content (eg before or after calling highlighter), when they upgrade to the&lt;br/&gt;
proposed new version their content will be double-escaped. They will also incur&lt;br/&gt;
 the additional performance overhead for encoding where it may not be required&lt;br/&gt;
(Note: could initialize htmlEncode&apos;s StringBuffer to at least plainText.length()) . &lt;br/&gt;
I guess we could add a flag to the html-based formatters which allows the user&lt;br/&gt;
to turn encoding on or off. Will the htmlEncode function you&apos;ve defined work for&lt;br/&gt;
more exotic character sets eg CKY?&lt;/p&gt;


&lt;p&gt;Cheers&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                    <comment id="12322165" author="markharw00d@yahoo.co.uk" created="Fri, 4 Feb 2005 02:26:42 +0000"  >&lt;p&gt;&amp;gt; This patch allows the highlighter Formatter to control escaping of the non&lt;br/&gt;
&amp;gt; highlighted text as well as the highlighting of the matching text.&lt;/p&gt;

&lt;p&gt;Thanks for this. I think the suggestion looks useful but I have a couple of&lt;br/&gt;
concerns. Not only do we break the Formatter interface, we also break the&lt;br/&gt;
behaviour for those upgrading. If people have applications which already escape&lt;br/&gt;
the content (eg before or after calling highlighter), when they upgrade to the&lt;br/&gt;
proposed new version their content will be double-escaped. They will also incur&lt;br/&gt;
 the additional performance overhead for encoding where it may not be required&lt;br/&gt;
(Note: could initialize htmlEncode&apos;s StringBuffer to at least plainText.length()) . &lt;br/&gt;
Either we could add a flag to the html-based formatters which allows the user to&lt;br/&gt;
turn encoding on or off or we could suggest they subclass to override&lt;br/&gt;
encodeText. Will the htmlEncode function you&apos;ve defined work for more exotic&lt;br/&gt;
character sets eg CKY?&lt;/p&gt;


&lt;p&gt;Cheers&lt;br/&gt;
Mark&lt;/p&gt;</comment>
                    <comment id="12322166" author="nicko" created="Fri, 4 Feb 2005 03:08:43 +0000"  >&lt;p&gt;(In reply to comment #3)&lt;br/&gt;
&amp;gt; Not only do we break the Formatter interface, we also break the&lt;br/&gt;
&amp;gt; behaviour for those upgrading. &lt;/p&gt;

&lt;p&gt;If you need to keep the Formatter interface stable then we can do this by adding&lt;br/&gt;
another interface that extends Formatter. The Highlighter can adapt its&lt;br/&gt;
behaviour depending on the actual instance supplied.&lt;/p&gt;

&lt;p&gt;Yes the patch does cause a behaviour change. The SimpleHTMLFormatter,&lt;br/&gt;
GradientFormatter, and SpanGradientFormatter will HTML encode their output where&lt;br/&gt;
previously they did not. If that behaviour is not acceptable then they can be&lt;br/&gt;
changed to implement the encodeText method such that it just passes back the &lt;br/&gt;
originalText, this would give exactly the same behaviour as with the current&lt;br/&gt;
version.&lt;/p&gt;


&lt;p&gt;&amp;gt; If people have applications which already escape&lt;br/&gt;
&amp;gt; the content (eg before or after calling highlighter), when they upgrade to the&lt;br/&gt;
&amp;gt; proposed new version their content will be double-escaped. &lt;/p&gt;

&lt;p&gt;I could not find a reliable way of escaping the text if the original search text&lt;br/&gt;
contained HTML content. If the text is HTML escaped before the TokenStream is&lt;br/&gt;
built then the highlighter is parsing a potentially different stream to the&lt;br/&gt;
original search. Also the TokenStream and the text must be kept in sync&lt;br/&gt;
otherwise the TokenGroup indexes are off. The text cannot be escaped after&lt;br/&gt;
highlighting because the original contains the same mark-up used to highlight&lt;br/&gt;
the matching tokens. It would be possible to get the SimpleHTMLFormatter to use&lt;br/&gt;
2 specific GUIDs to wrap the highlight tokens as it is unlikely that these would&lt;br/&gt;
also appear in the original text - these could then be replaced with the correct&lt;br/&gt;
tags after HTML escaping.&lt;/p&gt;


&lt;p&gt;&amp;gt; They will also incur&lt;br/&gt;
&amp;gt;  the additional performance overhead for encoding where it may not be required&lt;br/&gt;
&amp;gt; (Note: could initialize htmlEncode&apos;s StringBuffer to at least&lt;br/&gt;
plainText.length()) .&lt;/p&gt;

&lt;p&gt;That would certainly help.&lt;/p&gt;

&lt;p&gt;If we are going to break the Formatter interface how about changing the methods&lt;br/&gt;
to take a java.io.Writer or java.io.PrintWriter this would reduce the number of&lt;br/&gt;
temporary strings created?&lt;/p&gt;


&lt;p&gt;&amp;gt; Will the htmlEncode function you&apos;ve defined work for more exotic&lt;br/&gt;
&amp;gt; character sets eg CKY?&lt;/p&gt;

&lt;p&gt;No, it is a &apos;brain dead&apos; implementation.&lt;/p&gt;

&lt;p&gt;Commons Lang has an implementation that could be used: escapeHtml(String) in &lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/jakarta/commons/proper/lang/trunk/src/java/org/apache/commons/lang/StringEscapeUtils.java?rev=137958&amp;amp;view=markup&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewcvs.cgi/jakarta/commons/proper/lang/trunk/src/java/org/apache/commons/lang/StringEscapeUtils.java?rev=137958&amp;amp;view=markup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you really want to include something like that in with the Highlighter? Is&lt;br/&gt;
the Highlighter supposed to do HTML highlighting out of the box, or should it&lt;br/&gt;
just be a toolkit that makes it easy to do so.&lt;/p&gt;


&lt;p&gt;Nicko&lt;/p&gt;</comment>
                    <comment id="12322167" author="markharw00d@yahoo.co.uk" created="Fri, 4 Feb 2005 05:13:40 +0000"  >&lt;p&gt;How about keeping the existing Formatter interface and making the Highlighter &lt;br/&gt;
class encode then pass strings to the formatter. &lt;br/&gt;
The highlighter can have a new setEncoder() method to set a configurable &lt;br/&gt;
choice of Encoder implementation (with your simple one as the out-of-the-box &lt;br/&gt;
default implementation). This may be more optimised because the Highlighter is &lt;br/&gt;
in a position to pick and choose which sections of the text need encoding &lt;br/&gt;
(because it selects the best bits).&lt;br/&gt;
This centralized selection of encoder is probably a bit neater too.&lt;/p&gt;</comment>
                    <comment id="12322168" author="nicko" created="Fri, 4 Feb 2005 09:10:55 +0000"  >&lt;p&gt;(From update of attachment 14169)&lt;br/&gt;
Patch replaced by new patch to add separate Encoder.&lt;/p&gt;</comment>
                    <comment id="12322169" author="nicko" created="Fri, 4 Feb 2005 09:12:14 +0000"  >&lt;p&gt;Created an attachment (id=14174)&lt;br/&gt;
NewFile: Encoder Interface&lt;/p&gt;

&lt;p&gt;New Encoder interface&lt;/p&gt;</comment>
                    <comment id="12322170" author="nicko" created="Fri, 4 Feb 2005 09:13:06 +0000"  >&lt;p&gt;Created an attachment (id=14175)&lt;br/&gt;
NewFile: HTML Encoder&lt;/p&gt;

&lt;p&gt;Implementation of Encoder interface that does simple HTML output escaping&lt;/p&gt;</comment>
                    <comment id="12322171" author="nicko" created="Fri, 4 Feb 2005 09:16:39 +0000"  >&lt;p&gt;Created an attachment (id=14176)&lt;br/&gt;
NewFile: Default (no-op) Encoder&lt;/p&gt;

&lt;p&gt;Implementation of the Encoder interface that does not modify the output text&lt;/p&gt;</comment>
                    <comment id="12322172" author="nicko" created="Fri, 4 Feb 2005 09:18:32 +0000"  >&lt;p&gt;Created an attachment (id=14177)&lt;br/&gt;
Patch to update Highlighter to use an Encoder&lt;/p&gt;

&lt;p&gt;The Highlighter takes an optional Encoder through a new constructor. If not&lt;br/&gt;
specified the default value is to use the DefaultEncoder, which does not modify&lt;br/&gt;
the text.&lt;/p&gt;</comment>
                    <comment id="12322173" author="nicko" created="Fri, 4 Feb 2005 09:24:15 +0000"  >&lt;p&gt;I have updated the changes so that the existing interfaces are unchanged and the&lt;br/&gt;
current behaviour is preserved. When creating the Highlighter an Encoder object&lt;br/&gt;
can be passed to the constructor along with the current Formatter. The Encoder&lt;br/&gt;
will be used to escape any text that is output including the text that is passed&lt;br/&gt;
to the Formatter.&lt;/p&gt;

&lt;p&gt;The Encoder interface contains the encodeText(String) method.&lt;br/&gt;
The DefaultEncoder is an implementation of the Encoder interface that does not&lt;br/&gt;
modify the text, this is used by default to provider the current behaviour.&lt;br/&gt;
The SimpleHTMLEncoder is an implementation of the Encoder interface that&lt;br/&gt;
performs basic HTML output escaping on all the text.&lt;/p&gt;</comment>
                    <comment id="12322174" author="markharw00d@yahoo.co.uk" created="Fri, 4 Feb 2005 18:00:23 +0000"  >&lt;p&gt;Great stuff, thanks Nicko.&lt;/p&gt;

&lt;p&gt;I&apos;ll apply the patch as soon as I get the new SVN access sorted out.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312513" name="ASF.LICENSE.NOT.GRANTED--DefaultEncoder.java" size="927" author="nicko" created="Fri, 4 Feb 2005 09:16:39 +0000" />
                    <attachment id="12312511" name="ASF.LICENSE.NOT.GRANTED--Encoder.java" size="932" author="nicko" created="Fri, 4 Feb 2005 09:12:14 +0000" />
                    <attachment id="12312512" name="ASF.LICENSE.NOT.GRANTED--SimpleHTMLEncoder.java" size="1620" author="nicko" created="Fri, 4 Feb 2005 09:13:06 +0000" />
                    <attachment id="12312510" name="ASF.LICENSE.NOT.GRANTED--TextOutputEscaping.diff" size="6144" author="nicko" created="Fri, 4 Feb 2005 00:47:18 +0000" />
                    <attachment id="12312514" name="ASF.LICENSE.NOT.GRANTED--UpdateToUseEncoder.diff" size="3384" author="nicko" created="Fri, 4 Feb 2005 09:18:32 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>33389</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 4 Feb 2005 02:24:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13409</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27391</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>