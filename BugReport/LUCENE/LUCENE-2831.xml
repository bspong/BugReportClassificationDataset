<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:10:06 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2831/LUCENE-2831.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2831] Revise Weight#scorer &amp; Filter#getDocIdSet API to pass Readers context</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2831</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Spinoff from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2694&quot; title=&quot;MTQ rewrite + weight/scorer init should be single pass&quot;&gt;&lt;del&gt;LUCENE-2694&lt;/del&gt;&lt;/a&gt; - instead of passing a reader into Weight#scorer(IR, boolean, boolean) we should / could revise the API and pass in a struct that has parent reader, sub reader, ord of that sub. The ord mapping plus the context with its parent would make several issues way easier. See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2694&quot; title=&quot;MTQ rewrite + weight/scorer init should be single pass&quot;&gt;&lt;del&gt;LUCENE-2694&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2348&quot; title=&quot;DuplicateFilter incorrectly handles multiple calls to getDocIdSet for segment readers&quot;&gt;LUCENE-2348&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2829&quot; title=&quot;improve termquery &amp;quot;pk lookup&amp;quot; performance&quot;&gt;&lt;del&gt;LUCENE-2829&lt;/del&gt;&lt;/a&gt; to name some.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12493981">LUCENE-2831</key>
            <summary>Revise Weight#scorer &amp; Filter#getDocIdSet API to pass Readers context</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 23 Dec 2010 15:53:32 +0000</created>
                <updated>Fri, 10 May 2013 11:43:14 +0100</updated>
                    <resolved>Wed, 2 Feb 2011 22:34:49 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12974643" author="simonw" created="Thu, 23 Dec 2010 16:07:25 +0000"  >&lt;p&gt;here is an initial patch that cuts over the API to use a ReaderInfo struct. I upload that patch to get initial feedback for this rather massive change. Before i fix all JavaDoc etc. some others should review that first. The patch contains the following changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Cut over to use ReaderInfo in Weight#scorer, Weight#explain &amp;amp; Filter.getDocIdSet&lt;/li&gt;
	&lt;li&gt;Added ReaderInfo[] to IndexReader and its subclasses as well as IndexSearcher and Searcher which just forwards if applicable.&lt;/li&gt;
	&lt;li&gt;Fixed several, IMO legacy implementations in Solr code that still fixed the doc offset in explain&lt;/li&gt;
	&lt;li&gt;Removed all uses of SolrIndexReader#leaveReaders outside of SIR - IMO we can make those private to SIR now.&lt;/li&gt;
	&lt;li&gt;Added a DummySearcher to QueryWrapperFilter since it uses the subreader to obtain the weight from a query. That didn&apos;t work anymore since I assert now that&lt;br/&gt;
  the parent readers are identical in Weight#scorer&lt;/li&gt;
	&lt;li&gt;cut over IndexSearcher to use ReaderInfo instead of seq. subreader&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What is definitly missing here from my point of view is:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;sharpen the javadoc in weight, filter, and query to make clear how Weight, Rewrite &amp;amp; Scorer play together. For instance it should be clear that a query should only be executed against the same reader it was rewritten against.&lt;/li&gt;
	&lt;li&gt;possibly revise the getSeqSub &amp;amp; getSeqDocBase API in IR and maybe merge then in ReaderInfo&lt;/li&gt;
	&lt;li&gt;We should think about what we need in Scorer and Filter before we commit since this already changes the interface so we can do it here though. For instance could we include a &lt;em&gt;needsScoring&lt;/em&gt; flag in either Query#weight() or in the Weight#scorer() method. One other way would be to add those flags to the struct&lt;br/&gt;
that is passed in but that would mean that we can not simply bind them to the IR and use them from there.&lt;/li&gt;
	&lt;li&gt;maybe think about the name ReaderContext sounds also good instead  of ReaderInfo&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;comments welcome!!&lt;/p&gt;</comment>
                    <comment id="12974649" author="yseeley@gmail.com" created="Thu, 23 Dec 2010 16:17:53 +0000"  >&lt;p&gt;ReaderInfo (info about parents, and reader context in general) should not be kept on the IndexReader since a reader can be used in multiple contexts.  For example, the idea that a reader has a single parent is false.  This info should be keept at a higher level (like IndexSearcher) and passed down.&lt;/p&gt;</comment>
                    <comment id="12974658" author="yseeley@gmail.com" created="Thu, 23 Dec 2010 16:35:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;# Removed all uses of SolrIndexReader#leaveReaders outside of SIR - IMO we can make those private to SIR now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;SolrIndexReader could be removed altogether if this is solved correctly - it&apos;s only real purpose was really to solve this context problem.&lt;/p&gt;</comment>
                    <comment id="12974665" author="yseeley@gmail.com" created="Thu, 23 Dec 2010 17:05:30 +0000"  >&lt;p&gt;Remember that we may be dealing with a tree with a depth &amp;gt; 2, so If we want to preserve maximum information, we may want something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; class ReaderInfo {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; IndexReader reader;

    /** the reader info &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; reader&apos;s immediate parent, or &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; none */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ReaderInfo parent;

    /** the ord of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; reader in the parent */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ordInParent;

    /** the offset of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; reader in the parent */
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offsetInParent;

   /** the ord of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; reader in the top level reader */
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ord;

  /** the offset of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; reader in the top level reader */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12974704" author="yseeley@gmail.com" created="Thu, 23 Dec 2010 19:39:19 +0000"  >&lt;p&gt;Another thing to think about is if this should be unified with the very similar ReaderUtil.Slice&lt;/p&gt;</comment>
                    <comment id="12974715" author="mikemccand" created="Thu, 23 Dec 2010 20:00:07 +0000"  >&lt;p&gt;I like the full ReaderInfo!&lt;/p&gt;

&lt;p&gt;It holds details not only relative to top-level reader but also&lt;br/&gt;
relative to its immediate parent.  This way we don&apos;t lose any&lt;br/&gt;
information on the full tree structure (in case there are apps that&lt;br/&gt;
care).&lt;/p&gt;

&lt;p&gt;I think we should add the sub-ReaderInfos too, so the tree is&lt;br/&gt;
doubly-linked?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ReaderInfo (info about parents, and reader context in general) should not be kept on the IndexReader since a reader can be used in multiple contexts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually I think we can and should store this in IndexReader?&lt;/p&gt;

&lt;p&gt;But, only the top-level reader is allowed to hold ReaderInfo for all&lt;br/&gt;
subs it &lt;span class=&quot;error&quot;&gt;&amp;#91;recurisvely&amp;#93;&lt;/span&gt; contains.  Ie a given IR is not allowed to hold&lt;br/&gt;
&quot;its&quot; ReaderInfo, since it can in general have more than one&lt;br/&gt;
ReaderInfo if it belongs to multiple top-level readers.&lt;/p&gt;

&lt;p&gt;So eg IR would have a getTopReaderInfo(), to return its own top-level&lt;br/&gt;
ReaderInfo.  From there, eg, IS would walk the subs down to gather the&lt;br/&gt;
leaf ReaderInfo array that are the subs visited for searching.&lt;/p&gt;

&lt;p&gt;Man I wish we had done this back in 2.9 w/ the per-segment cutover,&lt;br/&gt;
instead of passing around naked readers this whole time!!&lt;/p&gt;</comment>
                    <comment id="12974726" author="yseeley@gmail.com" created="Thu, 23 Dec 2010 20:42:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should add the sub-ReaderInfos too, so the tree is&lt;br/&gt;
doubly-linked?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, sounds like a good idea.  Solr currently has this functionality via SolrIndexReader (all lucene readers in the tree are wrapped on every reopen), and every SolrIndexReader has the list of children, and a parent pointer.  So this is turning into the same thing, just with a parallel data structure (which mirrors the actual reader tree) instead of wrapping.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Actually I think we can and should store this in IndexReader?&lt;/p&gt;

&lt;p&gt;But, only the top-level reader is allowed to hold ReaderInfo for all&lt;br/&gt;
subs it &lt;span class=&quot;error&quot;&gt;&amp;#91;recurisvely&amp;#93;&lt;/span&gt; contains. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A top level reader may also be a sub-reader of another top level reader... so it doesn&apos;t seem&lt;br/&gt;
like we can make that restriction, and any ReaderInfo stored on an IndexReader would only be valid&lt;br/&gt;
in some contexts.  Think about simply trying to walk up to the top level reader, or using &quot;offset&quot;&lt;br/&gt;
or &quot;ord&apos; which vary depending on the top-level reader.&lt;/p&gt;

&lt;p&gt;And if that info is passed down to weight() and scorer() anyway, what&apos;s the point of storing it on IR?&lt;br/&gt;
I guess if we made the restriction that things that vary depending on top-level reader should be avoided&lt;br/&gt;
in ReaderInfo if obtained directly from an IndexReader, it would be OK.  But that&apos;s a severe and strange restriction.&lt;/p&gt;

&lt;p&gt;We can try approaching it from the other direction too... what is gained or made easier by storing ReaderInfo on IR?  What are the usecases?&lt;/p&gt;</comment>
                    <comment id="12974738" author="mikemccand" created="Thu, 23 Dec 2010 21:04:48 +0000"  >&lt;p&gt;I&apos;m confused &amp;#8211; there&apos;d be no restriction with this approach?  Ie it&lt;br/&gt;
would allow for a sub that&apos;s shared in different top readers.&lt;/p&gt;

&lt;p&gt;The IR has .getTopReaderInfo().  This returns a full ReaderInfo tree&lt;br/&gt;
for all subs under that top.  That info is stored, privately, in only&lt;br/&gt;
that top reader (not on the subs). When you call .getTopReaderInfo(),&lt;br/&gt;
no ReaderInfo is set on any of the subs.  Only that top reader holds&lt;br/&gt;
this tree.&lt;/p&gt;</comment>
                    <comment id="12975745" author="simonw" created="Wed, 29 Dec 2010 09:11:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m confused - there&apos;d be no restriction with this approach? Ie it would allow for a sub that&apos;s shared in different top readers.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think what yonik it saying it that you can not be sure that the topLevelReader is a TopLevelReader since it could have yet another parent.&lt;br/&gt;
This will always be true and essentially only well defined in the context of an IndexSearcher. IndexSearcher takes an arbitrary IndexReader as a topLevel and this will be the one for this IS context. The same IR could be a sub-reader in a different context though.&lt;/p&gt;

&lt;p&gt;I&apos;m tend to lean towards holding ReaderInfo on IndexSearcher rather than on IndexReader. It is really an information that 100% depends on a context which is given by IS. IS also defines the context for Query#weigth / createWeight and Weight ctors and with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2837&quot; title=&quot;Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher&quot;&gt;&lt;del&gt;LUCENE-2837&lt;/del&gt;&lt;/a&gt; we can eventually rely on the given Searcher is an IS. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another thing to think about is if this should be unified with the very similar ReaderUtil.Slice&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree this should be easy to obtain. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;SolrIndexReader could be removed altogether if this is solved correctly - it&apos;s only real purpose was really to solve this context problem.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah this makes sense. I didn&apos;t look into it too deep during the first patch. &lt;/p&gt;

&lt;p&gt;I think we should give Yoniks full ReaderInfo a go an create it only in IS. This might make some Solr classes go away too and reduce complexity. I will go ahead and work on a new patch soon.&lt;/p&gt;</comment>
                    <comment id="12976010" author="mikemccand" created="Thu, 30 Dec 2010 11:08:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;The same IR could be a sub-reader in a different context though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, but that&apos;s perfectly fine w/ the proposed API.&lt;/p&gt;

&lt;p&gt;Ie, any IR is able to be a top reader if you ask it to.  So you can&lt;br/&gt;
call IR.getTopReaderInfo(), and this will fill in the full tree as&lt;br/&gt;
seen by that top reader &lt;b&gt;only&lt;/b&gt;.  Meaning, the resulting tree is&lt;br/&gt;
&quot;private&quot; to that reader.  If you go and ask another reader for its&lt;br/&gt;
tree, a new tree (private to that reader&apos;s &quot;view&quot; (parent/child&lt;br/&gt;
relationships)) is computed.&lt;/p&gt;

&lt;p&gt;The API is fully general: it allows for readers that are shared by&lt;br/&gt;
more than one top reader.&lt;/p&gt;

&lt;p&gt;Really (as Yonik said before) this is a question of caching.  It&apos;s&lt;br/&gt;
gonna be the same tree, whether it&apos;s stored on IR or IS.  Yet, the&lt;br/&gt;
tree in no way depends on IS &amp;#8211; it&apos;s entirely a function of the&lt;br/&gt;
relationships b/w IR and its subs.  An app should be able to store the&lt;br/&gt;
top IR, and pull the tree from it on demand.  And init&apos;ing an IS from&lt;br/&gt;
an IR should continue to be cheap.&lt;/p&gt;

&lt;p&gt;Also, looking towards the future... at some point we will split apart&lt;br/&gt;
&quot;composite reader&quot; and &quot;atomic reader&quot;.  Ie, these really should be&lt;br/&gt;
separate classes, but today in Lucene they are one and the same and so&lt;br/&gt;
we have &quot;dynamic typing&quot; (you hit exceptions at runtime) instead of&lt;br/&gt;
static typing (compilation errors).  At some point we have to fix this&lt;br/&gt;
and make these two IRs separately classes.&lt;/p&gt;

&lt;p&gt;But to say that this API should be moved to IS instead of IR because&lt;br/&gt;
of this dynamic/static typing problem is a step in the wrong direction&lt;br/&gt;
&amp;#8211; ie once we split out these two IR classes we&apos;ll want to move the&lt;br/&gt;
the getTopReaderInfo API back to the &quot;composite&quot; IR.&lt;/p&gt;

&lt;p&gt;BTW we will have to somehow fix CachingWrapperFilter to behave&lt;br/&gt;
properly here.  Ie, it needs to know whether the cache key is purely&lt;br/&gt;
the sub-reader (as it is, always, today), or the combo of root reader&lt;br/&gt;
+ sub (as it is for eg DuplicateFilter).&lt;/p&gt;
</comment>
                    <comment id="12976013" author="mikemccand" created="Thu, 30 Dec 2010 11:13:24 +0000"  >&lt;p&gt;I like ReaderContext as the name instead of ReaderInfo... Info is too &quot;generic&quot;.&lt;/p&gt;</comment>
                    <comment id="12977382" author="simonw" created="Tue, 4 Jan 2011 18:07:51 +0000"  >&lt;p&gt;Attaching my current state. There is still one testcase failing in solr land that violates the hierarchy (TestFunctionQuery) or rather the contract between Query#weight() and Weight#scorer() in not using the correct leaf readers etc.&lt;/p&gt;

&lt;p&gt;I added 2 structs CompositeContext and AtomicContext which made it somewhat simpler IMO. Yet, I try to fix the solr problems as far as i can - if that is not possible without major changes i will remove the assert in TermWeight since all tests pass without it though.&lt;/p&gt;

&lt;p&gt;if someone finds the time to look at the Context impls - comments very welcome!&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12977719" author="mikemccand" created="Wed, 5 Jan 2011 10:37:09 +0000"  >&lt;p&gt;Looks good Simon!  Random comments...&lt;/p&gt;

&lt;p&gt;Maybe rename AtomicContext -&amp;gt; AtomicReaderContext?  And same for&lt;br/&gt;
CompositeContext?&lt;/p&gt;

&lt;p&gt;Should Filter.getDocIDSet take an AtomicReaderContext?  We don&apos;t have&lt;br/&gt;
to do that in this patch, though... this patch is a big enough first&lt;br/&gt;
step!&lt;/p&gt;

&lt;p&gt;Leafes -&amp;gt; Leaves&lt;/p&gt;

&lt;p&gt;Maybe IR.getTopReaderContext() instead of IR.topLevelReaderContext()?&lt;br/&gt;
(Or .getRootReaderContext()?).&lt;/p&gt;

&lt;p&gt;I agree this should eventually subsume&lt;br/&gt;
.getSequentialReaders... though, we probably should change IR base&lt;br/&gt;
method to return null not throw UOE, if so (until we succeed in&lt;br/&gt;
statically typing composite vs atomic readers...).&lt;/p&gt;

&lt;p&gt;I think we can change the expert IndexSearcher ctor that takes the&lt;br/&gt;
forced subReaders to instead take a root ReaderContext?  In fact,&lt;br/&gt;
maybe we can remove it altogether?  It was added to avoid the&lt;br/&gt;
&quot;relatively costly&quot; gatherSubReaders that IS does if you just pass it&lt;br/&gt;
an IR, but, we are now fixing that w/ this issue, by having IR cache&lt;br/&gt;
the root ReaderContext...&lt;/p&gt;

&lt;p&gt;If we did that could we go back to having QueryWrapperFilter just make&lt;br/&gt;
an IndexSearcher?&lt;/p&gt;

&lt;p&gt;Do we really need forceLeafs()?  Can&apos;t QueryWrapperFilter make a&lt;br/&gt;
MultiReader holding just its atomic IR and pass that to IS?  And then&lt;br/&gt;
we can remove the AtomicContext ctor that takes a &quot;naked&quot; atomic&lt;br/&gt;
reader?&lt;/p&gt;

&lt;p&gt;QueryWrapperFilter&apos;s WeightOnlyearcher should be WeightOnlySearcher.&lt;/p&gt;</comment>
                    <comment id="12977780" author="simonw" created="Wed, 5 Jan 2011 14:44:51 +0000"  >&lt;p&gt;next iteration, this time I think we are very close.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I renamed AtomicContext to AtomicReaderContext and likewise for CompositeContext&lt;/li&gt;
	&lt;li&gt;s/topLevelReaderContext/getTopReaderContext&lt;/li&gt;
	&lt;li&gt;updated to latest trunk and adopted the changes to IS in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2837&quot; title=&quot;Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher&quot;&gt;&lt;del&gt;LUCENE-2837&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Removed the dummy searcher in QueryWrapperFilter which now works just fine with a IS instance&lt;/li&gt;
	&lt;li&gt;added ReaderContext ctors to IS&lt;/li&gt;
	&lt;li&gt;replaced some members in IS in favor of AtomicReader[] leaves &amp;lt;--- leafs &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;s/leafs/leaves&lt;/li&gt;
	&lt;li&gt;Sharpened the JDocs in Weight - review please&lt;/li&gt;
	&lt;li&gt;added missing JDocs to IR, IS &amp;amp; ReaderContext + subs&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;
&lt;p&gt;Should Filter.getDocIDSet take an AtomicReaderContext? We don&apos;t have&lt;br/&gt;
to do that in this patch, though... this patch is a big enough first&lt;br/&gt;
step!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah I would like to do so, similar to Weight#scorer but currently mainly solr prevents us from this. There is also the functionqueries that still operate on IR instead of ReaderContext but maybe this is a good usecase to consolidate them move them into a module and get them out of core?!&lt;br/&gt;
Anyway, we should do this in a different issue - this has its purpose as you stated.&lt;br/&gt;
Likewise I would do issues for CachingWrapperFilter &amp;amp; DuplcateFilter though.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12977845" author="simonw" created="Wed, 5 Jan 2011 17:01:36 +0000"  >&lt;p&gt;Updated to trunk and fixed some variable naming s/info/context&lt;/p&gt;

&lt;p&gt;all tests pass&lt;/p&gt;</comment>
                    <comment id="12977872" author="yseeley@gmail.com" created="Wed, 5 Jan 2011 17:40:41 +0000"  >&lt;p&gt;I&apos;m browsing through this latest patch a bit...&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ReaderContextBuilder.numLeafes uses an AtomicInt, but ReaderUtil.Gather doesn&apos;t do any threading.&lt;/li&gt;
	&lt;li&gt;ReaderContext.leaves() is a method - shouldn&apos;t it just be a member for consistency?  I don&apos;t really understand the javadoc on that method either, since I don&apos;t see how I could walk the tree myself - there are no child pointers.&lt;/li&gt;
	&lt;li&gt;Is ReaderContext.isTopLevel redundant (i.e. it will always be equal to parent==null)?  Maybe the same thing for isAtomic and leaves==null?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12977878" author="simonw" created="Wed, 5 Jan 2011 17:53:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;ReaderContextBuilder.numLeafes uses an AtomicInt, but ReaderUtil.Gather doesn&apos;t do any threading.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;that way I can update it in the annonymous class - not do any threading doesn&apos;t really matter that operation is not time critical at all. Impl. detail IMO which is just convenient &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ReaderContext.leaves() is a method - shouldn&apos;t it just be a member for consistency? I don&apos;t really understand the javadoc on that method either, since I don&apos;t see how I could walk the tree myself - there are no child pointers.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;well they are in CompositeReaderContext but that jdoc is missleading. I added it to prevent a cast to check if there are leaves I don&apos;t see why this is problematic here though. I would rather add a children() method for consistency here though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is ReaderContext.isTopLevel redundant (i.e. it will always be equal to parent==null)? Maybe the same thing for isAtomic and leaves==null?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah we could do that but I would prefer the simple booleans since they are way more expressive and easier to understand.&lt;/p&gt;
</comment>
                    <comment id="12977888" author="mikemccand" created="Wed, 5 Jan 2011 18:10:42 +0000"  >&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;p&gt;There&apos;s a numLeafs in ReaderUtil still, and s/docbaseInParent/docBaseInParent.&lt;/p&gt;

&lt;p&gt;I think children() would be good.&lt;/p&gt;</comment>
                    <comment id="12977911" author="simonw" created="Wed, 5 Jan 2011 19:05:05 +0000"  >&lt;p&gt;fixed those little spelling issues &amp;amp; added a children() method to ReaderContext. I also revised the leaves() jdocs to be more clear now. &lt;/p&gt;

&lt;p&gt;I think we are good to go!&lt;/p&gt;</comment>
                    <comment id="12977912" author="mikemccand" created="Wed, 5 Jan 2011 19:14:21 +0000"  >&lt;p&gt;+1!&lt;/p&gt;

&lt;p&gt;But there&apos;s still a numLeafes in ReaderUtil &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12977913" author="simonw" created="Wed, 5 Jan 2011 19:19:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;But there&apos;s still a numLeafes in ReaderUtil &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;bloddy dyslexic german &lt;/p&gt;

&lt;p&gt;I&apos;ll go ahead and commit&lt;/p&gt;</comment>
                    <comment id="12977939" author="simonw" created="Wed, 5 Jan 2011 19:53:43 +0000"  >&lt;p&gt;final patch, fixed the leafes problem and added changes.txt entry. I commit shortly&lt;/p&gt;</comment>
                    <comment id="12977945" author="thetaphi" created="Wed, 5 Jan 2011 20:03:49 +0000"  >&lt;p&gt;Go ahead, looks good, +1&lt;/p&gt;

&lt;p&gt;If there are smaller issues, let&apos;s fix them later. The patch is quite big, so its better to commit now and let everybody use it! I was also thinking about using ReaderContext in Query.rewrite() for consistency.&lt;/p&gt;</comment>
                    <comment id="12977963" author="simonw" created="Wed, 5 Jan 2011 20:47:50 +0000"  >&lt;p&gt;committed in revision 1055636&lt;/p&gt;</comment>
                    <comment id="12978023" author="yseeley@gmail.com" created="Wed, 5 Jan 2011 23:02:49 +0000"  >&lt;p&gt;Regarding this assert in IndexSearcher:&lt;br/&gt;
    // TODO: eable this assert once SolrIndexReader and friends are refactored to use ReaderContext&lt;br/&gt;
    // We can&apos;t assert this here since SolrIndexReader will fail in some contexts - once solr is consistent we should be fine here&lt;br/&gt;
    // assert context.isTopLevel: &quot;IndexSearcher&apos;s ReaderContext must be topLevel for reader&quot; + context.reader;&lt;/p&gt;

&lt;p&gt;This is a bug in ReaderUtil.build() that when passed a segment reader, it sets isTopLevel to false.&lt;br/&gt;
You got bit by those extra booleans &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;When I hacked ReaderContext to just set isTopLevel to parent==null, all the solr tests passed w/ the assertion enabled.&lt;/p&gt;</comment>
                    <comment id="12978052" author="yseeley@gmail.com" created="Thu, 6 Jan 2011 00:03:52 +0000"  >&lt;p&gt;I see another related bug I think:&lt;br/&gt;
CompositeReaderContext does this:&lt;br/&gt;
      super(parent, reader, false, leaves != null, ordInParent, docbaseInParent);&lt;br/&gt;
It assumes that a reader is top level if it has leaves.&lt;/p&gt;</comment>
                    <comment id="12978061" author="simonw" created="Thu, 6 Jan 2011 00:48:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is a bug in ReaderUtil.build() that when passed a segment reader, it sets isTopLevel to false.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ah good catch! Thanks!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It assumes that a reader is top level if it has leaves.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;that one is actually intentional. if it is a CompositeReaderContext it must have leaves since it is composed of at least on other reader, right? Otherwise it should be an atomic reader or do I miss something?&lt;/p&gt;

&lt;p&gt;I have to admit that I didn&apos;t try to hard to get the Solr part running altogether. &lt;/p&gt;</comment>
                    <comment id="12978088" author="yseeley@gmail.com" created="Thu, 6 Jan 2011 02:14:46 +0000"  >&lt;p&gt;&amp;gt;    Should Filter.getDocIDSet take an AtomicReaderContext? We don&apos;t have&lt;br/&gt;
&amp;gt;    to do that in this patch, though... this patch is a big enough first&lt;br/&gt;
&amp;gt;    step!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yeah I would like to do so, similar to Weight#scorer but currently mainly solr prevents us from this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which part?  I was looking into migrating some SolrIndexSearcher to ReaderContext, and realized I needed the global base.&lt;br/&gt;
I clould walk up to calculate, but then I realized that AtomicReaderContext already has that!  So we should either change to AtomicReaderContext, or put a getBaseInTop() method on ReaderContext.&lt;/p&gt;</comment>
                    <comment id="12978096" author="yseeley@gmail.com" created="Thu, 6 Jan 2011 02:53:44 +0000"  >&lt;p&gt;Do we have any good MultiReader tests? &lt;br/&gt;
wrapUnderlyingReader() sort of does... but not enough to tell if someone accidentally used baseInParent as opposed to the global base.&lt;br/&gt;
Perhaps it should construct a MultiReader with an arbitrary but equivalent structure based on children and leaves?&lt;/p&gt;</comment>
                    <comment id="12978158" author="simonw" created="Thu, 6 Jan 2011 06:15:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;So we should either change to AtomicReaderContext, or put a getBaseInTop() method on ReaderContext.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We should move to AtomicReaderContext if possible. Would you want to open a new issue to migrate solr parts or should we do that in this one?&lt;br/&gt;
Similarly, Weight#scorer should also take a AtomicReaderContext if possible...&lt;/p&gt;</comment>
                    <comment id="12978422" author="yseeley@gmail.com" created="Thu, 6 Jan 2011 17:43:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;would you want to open a new issue to migrate solr parts or should we do that in this one&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This one is fine.  It makes sense to actual cutover from ReaderContext to AtomicReaderContext before migration away from SolrIndexReader.&lt;br/&gt;
But you previously indicated there was some issue in Solr that made that problematic?&lt;/p&gt;</comment>
                    <comment id="12978433" author="simonw" created="Thu, 6 Jan 2011 18:19:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;But you previously indicated there was some issue in Solr that made that problematic?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;actually for Filter that should be fine as far as I can see. I had some cases where non-atomic reader ctx where passed to scorer but maybe those where a different problem, I try to remember though. If you feel like it you can just go ahead and cut over to ARCxt on getDocIdSet() or I will do next week though. &lt;/p&gt;
</comment>
                    <comment id="12979060" author="yseeley@gmail.com" created="Sat, 8 Jan 2011 01:51:41 +0000"  >&lt;p&gt;Soooo, I took a quick shot at a high level migration of Filter.getDocIDSet to AtomicReaderContext - and after a few IDE crashes and other roadblocks + headaches, I went ahead with a bottom-up approach (as you can see from some of my commits).&lt;/p&gt;</comment>
                    <comment id="12979066" author="yseeley@gmail.com" created="Sat, 8 Jan 2011 02:05:49 +0000"  >&lt;p&gt;It seems we also need to migrate FieldComparator to use ReaderContext (eventually AtomicReaderContext)?&lt;/p&gt;</comment>
                    <comment id="12979118" author="mikemccand" created="Sat, 8 Jan 2011 12:19:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;It seems we also need to migrate FieldComparator to use ReaderContext (eventually AtomicReaderContext)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;And also Collector?&lt;/p&gt;</comment>
                    <comment id="12979561" author="simonw" created="Mon, 10 Jan 2011 12:16:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;And also Collector?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah I think that one can move to ARC too.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  ValueSource#getValues(IndexReader)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is another one&lt;/p&gt;</comment>
                    <comment id="12980009" author="simonw" created="Tue, 11 Jan 2011 08:55:30 +0000"  >&lt;p&gt;this patch cuts over Weight#scorer, Weight#explain &amp;amp; Filter#getDocIDSet to AtomicReaderContext. I also somewhat fixed IndexSearcher to handle concurrent execution correctly with respect to the actual context. Currently each sub searcher was its own context now we are just using IS as an executor of one leaf but still being aware of the entire context.&lt;/p&gt;

&lt;p&gt;All tests pass. I will commit soon if nobody objects&lt;/p&gt;</comment>
                    <comment id="12980067" author="mikemccand" created="Tue, 11 Jan 2011 11:45:11 +0000"  >&lt;p&gt;Awesome &amp;#8211; patch looks great!  I love the simplification to IndexSearcher for the sub-searchers, the fact that we no longer have to rebase since the provided context sends the docBase down.  This is cleaner, too (we no longer have to &quot;get a topLevel context&quot; for a sub reader).  Great!&lt;/p&gt;

&lt;p&gt;This will also make the cutover to statically typed readers (atomic vs composite) easier.&lt;/p&gt;</comment>
                    <comment id="12980135" author="simonw" created="Tue, 11 Jan 2011 15:07:43 +0000"  >&lt;p&gt;next transition iteration - this one cuts over Collector#setNextReader to Collector#setNextContext(AtomicReaderContext) and FieldComparator#setNextContext(AtomicReaderContext) respectively. I also replaced several SolrIndexReader uses to the use the new API rather than SolrIndexReader directly. There are just a handful of SolrIndexReader uses left which are mainly due to ValueSource#docValues(IR). This seems to be the last one left  - we are close!  If nobody objects I will commit soon.&lt;/p&gt;</comment>
                    <comment id="12980153" author="simonw" created="Tue, 11 Jan 2011 16:02:12 +0000"  >&lt;p&gt;renamed setNextContext back to setNextReader - its really just a reader with context&lt;/p&gt;</comment>
                    <comment id="12980192" author="mikemccand" created="Tue, 11 Jan 2011 17:22:34 +0000"  >&lt;p&gt;Simon &amp;#8211; heads up, I&apos;m renaming TermState.copy -&amp;gt; TermState.copyFrom in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2857&quot; title=&quot;Fix various problems with PulsingCodec&quot;&gt;&lt;del&gt;LUCENE-2857&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12980271" author="simonw" created="Tue, 11 Jan 2011 19:17:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Simon - heads up, I&apos;m renaming TermState.copy -&amp;gt; TermState.copyFrom in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2857&quot; title=&quot;Fix various problems with PulsingCodec&quot;&gt;&lt;del&gt;LUCENE-2857&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;this comment should be on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2694&quot; title=&quot;MTQ rewrite + weight/scorer init should be single pass&quot;&gt;&lt;del&gt;LUCENE-2694&lt;/del&gt;&lt;/a&gt;, right?!&lt;/p&gt;</comment>
                    <comment id="12980653" author="simonw" created="Wed, 12 Jan 2011 10:40:45 +0000"  >&lt;p&gt;this patch cuts over all function query stuff to AtomicReaderContext in solr &amp;amp; lucene. It also nukes SolrIndexReader entirely - yay!! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I thinks somebody should give this patch a glance though, especially from the solr perspective although all tests pass. &lt;/p&gt;

&lt;p&gt;I had to make the IndexSearcher(ReaderContext, AtomicContext...) ctor public which is ok I think and I added a new already deprecated method to ValueSource in lucene land to make transition easier.&lt;/p&gt;

&lt;p&gt;if nobody objects I will commit later today&lt;/p&gt;</comment>
                    <comment id="12980673" author="mikemccand" created="Wed, 12 Jan 2011 11:33:48 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Simon - heads up, I&apos;m renaming TermState.copy -&amp;gt; TermState.copyFrom in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2857&quot; title=&quot;Fix various problems with PulsingCodec&quot;&gt;&lt;del&gt;LUCENE-2857&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this comment should be on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2694&quot; title=&quot;MTQ rewrite + weight/scorer init should be single pass&quot;&gt;&lt;del&gt;LUCENE-2694&lt;/del&gt;&lt;/a&gt;, right?!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Duh, right.  But it looks like you got the message anyway &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12980956" author="simonw" created="Wed, 12 Jan 2011 21:50:19 +0000"  >&lt;p&gt;updated to trunk&lt;/p&gt;</comment>
                    <comment id="12981156" author="simonw" created="Thu, 13 Jan 2011 07:15:14 +0000"  >&lt;p&gt;I committed the latest patch in revision 1058431, I think we are done here - yay!&lt;/p&gt;</comment>
                    <comment id="12988923" author="rcmuir" created="Mon, 31 Jan 2011 22:08:36 +0000"  >&lt;p&gt;There are some issues here with IndexSearcher, mostly found with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt; (once we started randomly using the executor service in tests).&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;some recursion bugs in IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor)&lt;/li&gt;
	&lt;li&gt;i noticed problems with IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves), the varargs causes this ctor to become ambiguous with other ctors (such as ReaderContext, ExecutorService). I don&apos;t understand why this ctor needs to be public, i noticed Solr&apos;s QueryValueSource is the only thing using it, and I think instead that should be fixed.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12989177" author="simonw" created="Tue, 1 Feb 2011 12:34:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;some recursion bugs in IndexSearcher(IndexReader r, boolean closeReader, ExecutorService executor)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;what&apos;s the recursion bug here? I have no idea why we are passing &quot;this&quot; to the subs here - maybe to save a single instance?!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;i noticed problems with IndexSearcher(ReaderContext topLevel, AtomicReaderContext... leaves), the varargs causes this ctor to become ambiguous with other ctors (such as ReaderContext, ExecutorService). I don&apos;t understand why this ctor needs to be public, i noticed Solr&apos;s QueryValueSource is the only thing using it, and I think instead that should be fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;can we disambiguate by using ARC[] instead of ARC... ?&lt;/p&gt;</comment>
                    <comment id="12989229" author="mikemccand" created="Tue, 1 Feb 2011 14:57:35 +0000"  >&lt;p&gt;I think something like this patch is needed to fix the two &quot;recursion&quot; problems?  The thing is, I needed to comment out that assert!&lt;/p&gt;

&lt;p&gt;Simon can you check this?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12989266" author="simonw" created="Tue, 1 Feb 2011 16:14:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Simon can you check this? Thanks.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;this seems wrong since you don&apos;t maintain the actual hierarchy between parent and child. We need this for certain assertions down the road. Yet, what&apos;s problematic here is that it takes more than one leaf which kills the sematics of methods like IS#docFreq() as you figured out on IRC. If the parents reader is used for a searcher that only operates on partial leaves we have a problem. I think we need to shrapen that ctor to only take one sub and use the subs reader as the IS&apos;s reader. This should make the semantics clear. Ideally we should also make this ctor private one the users of it are &quot;fixed&quot;. But for now &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
IndexSearcher(ReaderContext ctx, AtomicReaderContext leaf)
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;should be fine ey?&lt;/p&gt;
</comment>
                    <comment id="12989270" author="mikemccand" created="Tue, 1 Feb 2011 16:25:16 +0000"  >&lt;p&gt;Patch to fix recursion, take 2.&lt;/p&gt;

&lt;p&gt;Still not sure about it... had to comment out a different assert &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12989307" author="mikemccand" created="Tue, 1 Feb 2011 18:13:58 +0000"  >&lt;p&gt;Another rev &amp;#8211; fixed QueryValueSource.  Since that class directly controls when it invokes weight.scorer, I think it&apos;s safe to just pass the top context?&lt;/p&gt;</comment>
                    <comment id="12989504" author="yseeley@gmail.com" created="Wed, 2 Feb 2011 03:40:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;fixed QueryValueSource. Since that class directly controls when it invokes weight.scorer, I think it&apos;s safe to just pass the top context?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep.  Note that it&apos;s fallback code in any case - the normal path is that it should have already been weighted and the weight will be found in the context.&lt;/p&gt;</comment>
                    <comment id="12989609" author="simonw" created="Wed, 2 Feb 2011 12:05:40 +0000"  >&lt;p&gt;here is a slightly different patch that makes the dangerous ctor private and uses the leaf&apos;s reader as the IS reader. I also put an assert into getTopReaderContext to assert that nobody pulls a toplevel context from the schizo IS.&lt;/p&gt;

&lt;p&gt;All tests pass with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12989641" author="mikemccand" created="Wed, 2 Feb 2011 14:12:16 +0000"  >&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;p&gt;But, can you change the new assert to say something like &quot;cannot access top context when IS is a leaf reader&quot; or something?  Right now if you trip that assert it&apos;s like not clear what&apos;s gone wrong...&lt;/p&gt;

&lt;p&gt;And I think either remove the jdoc on that method, or, clarify that it&apos;s only sugar when IS is not based on an leaf reader?&lt;/p&gt;

&lt;p&gt;I really don&apos;t like this schitzo IS though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Sometimes it&apos;s top reader sometimes it&apos;s leaf reader.  But, the schitzo IS&apos;s should never &quot;escape&quot; out of the top IS that has an ES.&lt;/p&gt;</comment>
                    <comment id="12989797" author="simonw" created="Wed, 2 Feb 2011 21:11:16 +0000"  >&lt;p&gt;I think we can really get rid of the sub searchers and do it all on the top level searcher. I just sketched something out how this should be done from my point of view. The executors should only specify the ARC slice they want to execute and use the top level searcher to do the searches.&lt;/p&gt;

&lt;p&gt;this patch is just for illustration purposes... Jdocs need to be fixed etc. &lt;/p&gt;

&lt;p&gt;I think if we do it that way the semantics are clear for IS.&lt;/p&gt;</comment>
                    <comment id="12989800" author="mikemccand" created="Wed, 2 Feb 2011 21:16:15 +0000"  >&lt;p&gt;Patch looks great!  No more schitzo sub searchers!&lt;/p&gt;

&lt;p&gt;+1 to commit&lt;/p&gt;</comment>
                    <comment id="12989822" author="simonw" created="Wed, 2 Feb 2011 22:07:24 +0000"  >&lt;p&gt;another iteration - fixed / added some javadocs and marked the LeafSlice experimental. I will wait a bit an commit later. All tests pass even with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12989838" author="simonw" created="Wed, 2 Feb 2011 22:34:49 +0000"  >&lt;p&gt;Committed revision 1066669.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12476949">LUCENE-2694</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12494206">LUCENE-2838</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12496496">LUCENE-2882</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12470074" name="LUCENE-2831-no_sub_searcher.patch" size="15725" author="simonw" created="Wed, 2 Feb 2011 22:07:24 +0000" />
                    <attachment id="12470071" name="LUCENE-2831-no_sub_searcher.patch" size="14046" author="simonw" created="Wed, 2 Feb 2011 21:11:16 +0000" />
                    <attachment id="12468172" name="LUCENE-2831-nuke-SolrIndexReader.patch" size="144356" author="simonw" created="Wed, 12 Jan 2011 21:50:18 +0000" />
                    <attachment id="12468117" name="LUCENE-2831-nuke-SolrIndexReader.patch" size="144165" author="simonw" created="Wed, 12 Jan 2011 10:40:45 +0000" />
                    <attachment id="12467574" name="LUCENE-2831.patch" size="173994" author="simonw" created="Wed, 5 Jan 2011 19:53:43 +0000" />
                    <attachment id="12467567" name="LUCENE-2831.patch" size="173314" author="simonw" created="Wed, 5 Jan 2011 19:05:05 +0000" />
                    <attachment id="12467556" name="LUCENE-2831.patch" size="172841" author="simonw" created="Wed, 5 Jan 2011 17:01:36 +0000" />
                    <attachment id="12467544" name="LUCENE-2831.patch" size="172039" author="simonw" created="Wed, 5 Jan 2011 14:44:51 +0000" />
                    <attachment id="12467446" name="LUCENE-2831.patch" size="165295" author="simonw" created="Tue, 4 Jan 2011 18:07:51 +0000" />
                    <attachment id="12466892" name="LUCENE-2831.patch" size="156137" author="simonw" created="Thu, 23 Dec 2010 16:07:25 +0000" />
                    <attachment id="12470036" name="LUCENE-2831-recursion.patch" size="2508" author="simonw" created="Wed, 2 Feb 2011 12:05:40 +0000" />
                    <attachment id="12469961" name="LUCENE-2831-recursion.patch" size="4493" author="mikemccand" created="Tue, 1 Feb 2011 18:13:57 +0000" />
                    <attachment id="12469938" name="LUCENE-2831-recursion.patch" size="3435" author="mikemccand" created="Tue, 1 Feb 2011 16:25:16 +0000" />
                    <attachment id="12469929" name="LUCENE-2831-recursion.patch" size="1096" author="mikemccand" created="Tue, 1 Feb 2011 14:57:35 +0000" />
                    <attachment id="12468020" name="LUCENE-2831_transition_to_atomicCtx.patch" size="78430" author="simonw" created="Tue, 11 Jan 2011 16:02:12 +0000" />
                    <attachment id="12468012" name="LUCENE-2831_transition_to_atomicCtx.patch" size="79446" author="simonw" created="Tue, 11 Jan 2011 15:07:43 +0000" />
                    <attachment id="12467986" name="LUCENE-2831_transition_to_atomicCtx.patch" size="105415" author="simonw" created="Tue, 11 Jan 2011 08:55:30 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>17.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 23 Dec 2010 16:17:53 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11029</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24861</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>