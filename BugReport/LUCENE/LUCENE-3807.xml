<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:33 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3807/LUCENE-3807.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3807] Cleanup suggester API</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3807</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently the suggester api and especially TermFreqIterator don&apos;t play that nice with BytesRef and other paradigms we use in lucene, further the java iterator pattern isn&apos;t that useful when it gets to work with TermsEnum, BytesRef etc. We should try to clean up this api step by step moving over to BytesRef including the Lookup class and its interface...&lt;/p&gt;</description>
                <environment></environment>
            <key id="12543351">LUCENE-3807</key>
            <summary>Cleanup suggester API</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Feb 2012 14:41:40 +0000</created>
                <updated>Fri, 10 May 2013 11:44:05 +0100</updated>
                    <resolved>Wed, 7 Mar 2012 20:40:43 +0000</resolved>
                            <version>3.6</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13211889" author="simonw" created="Mon, 20 Feb 2012 14:44:36 +0000"  >&lt;p&gt;here is a first patch extracting a BytesRefIterator as a common interface directly shared with TermsEnum as a first step. The semantics are taken from TermsEnum directly so nothing changes for TermsEnum and its consumers. The simple next method makes the most of the TermFreqIters trivial. &lt;/p&gt;

&lt;p&gt;comments welcome...&lt;/p&gt;</comment>
                    <comment id="13211890" author="dweiss" created="Mon, 20 Feb 2012 14:44:38 +0000"  >&lt;p&gt;+1.&lt;/p&gt;</comment>
                    <comment id="13211921" author="rcmuir" created="Mon, 20 Feb 2012 15:24:40 +0000"  >&lt;p&gt;I like the patch, but only one thing (its fine to commit it as-is though, we can solve this on another issue, i just couldnt help but notice)&lt;/p&gt;

&lt;p&gt;I don&apos;t think we should have the BufferedTermFreqIteratorWrapper/etc and the SortedTermFreqIterator marker interface needs to be fixed.&lt;/p&gt;

&lt;p&gt;Here are the problems:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Marker interface SortedTermFreqIterator doesn&apos;t tell you if its UTF-8 or UTF-16 order. Its implemented by two classes: SortedTermFreqIteratorWrapper,&lt;br/&gt;
which sorts in UTF-16 order, and HighFrequencyDictionary, which returns terms from the index (so UTF-8 order). The problem is that classes&lt;br/&gt;
that rely upon sorted order like JaSpell/TST are likely broken already. Fortunately FST/WFST always do their own sort.&lt;/li&gt;
	&lt;li&gt;Buffering in RAM is not ideal. Instead I think all of these classes should be using our Sort anyway which can spill to disk.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For now could we put the BytesRefList in the suggest package since its only used there? we might not need it after we clean up&lt;br/&gt;
this sorting stuff in some future issue.&lt;/p&gt;

&lt;p&gt;Also I don&apos;t think we should factor out the BytesRefIterator. I seriously think its a bad idea to tie our core index Terms enumeration API&lt;br/&gt;
with the spellcheck API at this time, it would make it hard to change in the future if we need, especially with spellcheck being... needing work &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13211926" author="rcmuir" created="Mon, 20 Feb 2012 15:30:01 +0000"  >&lt;p&gt;Again i just wanted to mention, i think its fine to commit as-is.&lt;/p&gt;

&lt;p&gt;Consider my comments thinking-out-loud.&lt;/p&gt;</comment>
                    <comment id="13212036" author="simonw" created="Mon, 20 Feb 2012 19:48:00 +0000"  >&lt;p&gt;I committed the patch to trunk and moved the BytesRefList to the suggest package (pkg private) for now. I keep this issue open as I have more iterations / patches. I will backport before I close this issue ie. batch port to 3.x all commits related to this issue.  commit revision is 1291418&lt;/p&gt;</comment>
                    <comment id="13212090" author="rcmuir" created="Mon, 20 Feb 2012 21:34:27 +0000"  >&lt;p&gt;I think we should go with a simpler solution for the Buffering/SortedIterator... this has caused a few recent test fails.&lt;/p&gt;

&lt;p&gt;(latest: &lt;a href=&quot;https://builds.apache.org/job/Lucene-Solr-tests-only-trunk/12476/&quot; class=&quot;external-link&quot;&gt;https://builds.apache.org/job/Lucene-Solr-tests-only-trunk/12476/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If we are going to replace it anyway with the Sort that spills to disk, cant we just use a simple treemap?&lt;/p&gt;</comment>
                    <comment id="13212130" author="simonw" created="Mon, 20 Feb 2012 22:01:59 +0000"  >&lt;p&gt;just drop it I will replace that stuff with on disk sort tomorrow anyway&lt;/p&gt;</comment>
                    <comment id="13212430" author="simonw" created="Tue, 21 Feb 2012 07:52:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should go with a simpler solution for the Buffering/SortedIterator... this has caused a few recent test fails.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;those failures have been fixed..&lt;/p&gt;</comment>
                    <comment id="13212522" author="simonw" created="Tue, 21 Feb 2012 11:56:57 +0000"  >&lt;p&gt;next patch...&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;cut over Lookup API to use CharSequence instead of string. this allows us to use CharsRef and saves object creation.&lt;/li&gt;
	&lt;li&gt;removed Sorted marker interface. BytesRefIterator has a getComparator() that can be null to indicate that there is no specified sort order. That way we can compare the Comparator&amp;lt;BytesRef&amp;gt; instance to see if the sort order matches what the impl expects.&lt;/li&gt;
	&lt;li&gt;added a IOException to Dictionary#getWordsIterator() removing tons of try/catch throw RTE&lt;/li&gt;
	&lt;li&gt;renamed freq to weight&lt;/li&gt;
	&lt;li&gt;weight (ie freq) now returns a long instead of a float discouraging floating point number as weights&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;next steps would be cleaning up the in-memory sorting stuff and use the sorter which goes to disk to do the actual sorting internally if needed&lt;/p&gt;

&lt;p&gt;comments welcome&lt;/p&gt;</comment>
                    <comment id="13212551" author="rcmuir" created="Tue, 21 Feb 2012 12:40:15 +0000"  >&lt;p&gt;I agree with removing IOException from getComparator.&lt;/p&gt;

&lt;p&gt;I agree also with moving weight to a long... though currently the e.g. solr integrations take floats as input,&lt;br/&gt;
so this really needs to be listed as a backwards break since it will directly affect users.&lt;/p&gt;

&lt;p&gt;I agree with removing the sorted marker interface: its not useful since you don&apos;t know the order.&lt;/p&gt;

&lt;p&gt;However, I don&apos;t think we should add the charsref methods... I think Bytes/Ints/CharsRef should have parallel &lt;br/&gt;
apis and someone can just call unicodeutil: in general these are reference classes not stringbuffers and &lt;br/&gt;
we shouldn&apos;t encourage abuse via sugar apis. I already have an issue open for fixing, cleaning up,&lt;br/&gt;
and making those APIs consistent.&lt;/p&gt;

&lt;p&gt;I don&apos;t think we should add a generics parameter V to Lookup, especially if LookupResult itself is still&lt;br/&gt;
wired to float. I do think suggesters should be able to return additional data but this needs more thought:&lt;br/&gt;
its necessary to actually get the additional data to them.&lt;/p&gt;</comment>
                    <comment id="13212636" author="rcmuir" created="Tue, 21 Feb 2012 15:02:27 +0000"  >&lt;p&gt;I found another bug (added test and committed fix in r1291826).&lt;br/&gt;
This would cause an exception in solr if someone called build but the field was empty.&lt;/p&gt;

&lt;p&gt;I think before proceeding with refactoring, we really need to beef up tests.&lt;br/&gt;
I&apos;ll help with this.&lt;/p&gt;</comment>
                    <comment id="13212718" author="simonw" created="Tue, 21 Feb 2012 16:42:31 +0000"  >&lt;p&gt;new patch cleaning up the api a little more according to roberts comments. I had some leftover CharsRef uses in there and I removed the generics on Lookup. This patch also removes all the additional methods on CharsRef and adds some randomization for CharSequences..&lt;/p&gt;</comment>
                    <comment id="13212719" author="simonw" created="Tue, 21 Feb 2012 16:43:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think before proceeding with refactoring, we really need to beef up tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will help too while I think the patch is ready... we can go with iterations?&lt;/p&gt;</comment>
                    <comment id="13212720" author="simonw" created="Tue, 21 Feb 2012 16:43:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;so this really needs to be listed as a backwards break since it will directly affect users.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will note this in the CHANGES once we are done&lt;/p&gt;</comment>
                    <comment id="13212740" author="rcmuir" created="Tue, 21 Feb 2012 17:06:17 +0000"  >&lt;p&gt;I like this latest patch!&lt;/p&gt;

&lt;p&gt;I didnt test it, but i think its fine to move forward. &lt;/p&gt;

&lt;p&gt;I just mainly want to address the issues of whole suggesters that are not tested &lt;br/&gt;
at all in this module (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3813&quot; title=&quot;add tests for JaSpell/TST/HighFrequencyDictionary to the suggest module&quot;&gt;LUCENE-3813&lt;/a&gt;) before we did too much more.&lt;/p&gt;</comment>
                    <comment id="13213477" author="dweiss" created="Wed, 22 Feb 2012 09:15:30 +0000"  >&lt;p&gt;Sorry for being late, work. I like the patch. Comments:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+    public Comparator&amp;lt;BytesRef&amp;gt; getComparator() {
+      return null;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows up in a number of places. I have mixed feelings about certain types having a comparator and others not having it, but it&apos;s minor.&lt;/p&gt;

&lt;p&gt;BufferingTermFreqIteratorWrapper is a nuisance (buffers in memory). It would be nicer to have a sort on disk if something doesn&apos;t support sorted iteration order.&lt;/p&gt;

&lt;p&gt;I also wonder float -&amp;gt; long = 4 -&amp;gt; 8 bytes... would this count as an incompatible API change (because what used to work for a given amount of RAM won&apos;t work anymore &amp;#8211; BufferingTermFreqIteratorWrapper again)?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+      if (l1 &amp;lt; l2) {
+        aStop = l1;
+      } else {
+        aStop = l2;
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if I remember correctly Math.min/max are intrinsics, so you can afford to be explicit &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Why not a specific covariant here?&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-  public Float get(String key) {
+  public Object get(CharSequence key) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This doesn&apos;t seem necessary (lookup accepts a CharSequence?).&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;@@ -199,7 +199,7 @@ public class LookupBenchmarkTest extends LuceneTestCase {
         public Integer call() throws Exception {
           int v = 0;
           for (String term : input) {
-            v += lookup.lookup(term, onlyMorePopular, num).size();
+            v += lookup.lookup(new CharsRef(term), onlyMorePopular, num).size();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I like the rest, including the CharSequenceish evilness of bytesToCharSequence &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13213519" author="simonw" created="Wed, 22 Feb 2012 10:48:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;This shows up in a number of places. I have mixed feelings about certain types having a comparator and others not having it, but it&apos;s minor.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;well this an indicator if we know something about the order or not. if you get null there is not order specified...&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;BufferingTermFreqIteratorWrapper is a nuisance (buffers in memory). It would be nicer to have a sort on disk if something doesn&apos;t support sorted iteration order.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;this is the ultimate goal... see my comment above (&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; next steps would be cleaning up the in-memory sorting stuff and use the sorter which goes to disk to do the actual sorting internally if needed &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;)&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I also wonder float -&amp;gt; long = 4 -&amp;gt; 8 bytes... would this count as an incompatible API change (because what used to work for a given amount of RAM won&apos;t work anymore &#8211; BufferingTermFreqIteratorWrapper again)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;see above&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if I remember correctly Math.min/max are intrinsics, so you can afford to be explicit &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I will upload a new patch - we use this in BytesRefComp too, I think its safe to fix&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This doesn&apos;t seem necessary (lookup accepts a CharSequence?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;right - leftover from an old iteration&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why not a specific covariant here?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;that would be Float get(String) or Float get(CharSequence) or... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="13213523" author="simonw" created="Wed, 22 Feb 2012 11:00:38 +0000"  >&lt;p&gt;updated patch with davids suggestions&lt;/p&gt;</comment>
                    <comment id="13220820" author="simonw" created="Fri, 2 Mar 2012 10:23:13 +0000"  >&lt;p&gt;following up on this, here is another patch. &lt;br/&gt;
I cleaned up the APIs even further removing get / add from Lookup which is not really used. TST and Jaspell still support add and get is still implemented on all others but its not part of the interface. The main thing that buggs me with add is that its inconsistent with build since it allows arbitrary output while build uses a Number. &lt;br/&gt;
Once we need this we can add it back to the interface. &lt;/p&gt;

&lt;p&gt;TST and Jaspell are now optimized to not necessarily create new Float objects all the time but share instances if the incoming weight allows it. I also create Number instances based on the range which might safe some more memory while minor IMO.&lt;/p&gt;

&lt;p&gt;LookupResult now also returns a long instead of a float to be consistent with the TermFreqIterator.&lt;/p&gt;

&lt;p&gt;SortedTermFreqIteratorWrapper is now based on the On-Disk sort. I extended the sorter impl a little to work with Comparator&amp;lt;BytesRef&amp;gt; and fixed the TODO by using BytesRefList with ByteBlockPool internally. WFSTCompletionLookup now also uses the SortedTFIteratorWrapper to remove duplicated code.&lt;/p&gt;</comment>
                    <comment id="13220842" author="simonw" created="Fri, 2 Mar 2012 11:27:40 +0000"  >&lt;p&gt;more cleanups... I made BytesRefSorter using BytesRefList (we should maybe rename to bytesrefarray) and in turn use BytesRefIterator instead of the stupid java iterator. So all those classes should be consistent now.&lt;/p&gt;</comment>
                    <comment id="13220926" author="dweiss" created="Fri, 2 Mar 2012 13:50:44 +0000"  >&lt;p&gt;I looked at your patch briefly, Simon. Random notes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;d change currentElement into lastElement or something like that. Otherwise it looks odd to me in the code, as in:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException(&lt;span class=&quot;code-quote&quot;&gt;&quot;index &quot;&lt;/span&gt; + pos
         + &lt;span class=&quot;code-quote&quot;&gt;&quot; must be less than the size: &quot;&lt;/span&gt; + currentElement);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;typo in &quot;orderdEntries&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m very likely paranoid but I&apos;d stick to just one class for storing these:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Number&lt;/span&gt; weightAsNumber(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; weight) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since these are objects the memory gain will most likely be obscured by object alignments and object overhead itself and the downside is that you&apos;re using an interface with all call sites that will very likely become megamorphic (so no chances to inline anything). I don&apos;t know if it&apos;s worth the effort.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I didn&apos;t have time to think much about changes to the functional logic; I don&apos;t think there were any (and if there were, they should be covered by tests?).&lt;/p&gt;</comment>
                    <comment id="13220991" author="simonw" created="Fri, 2 Mar 2012 15:30:16 +0000"  >&lt;p&gt;merged with trunk.&lt;/p&gt;

&lt;p&gt;I added a changes.txt to contrib and fixed the issues david raised. &lt;/p&gt;

&lt;p&gt;I think this is ready. once this is in I will backport this to 3x and close the issue&lt;/p&gt;</comment>
                    <comment id="13221000" author="rcmuir" created="Fri, 2 Mar 2012 15:41:28 +0000"  >&lt;p&gt;i did a quick review: looks good to me&lt;/p&gt;</comment>
                    <comment id="13221012" author="simonw" created="Fri, 2 Mar 2012 16:04:21 +0000"  >&lt;p&gt;committed to trunk.. I think we are ready to backport. I will do that in the next days&lt;/p&gt;</comment>
                    <comment id="13221207" author="rcmuir" created="Fri, 2 Mar 2012 19:53:11 +0000"  >&lt;p&gt;Somewhere along the line we got load(File), load(InputStream), store(File), store(InputStream)... can we improve this?&lt;/p&gt;

&lt;p&gt;I think its confusing when writing a new suggester to have all these hooks.&lt;/p&gt;

&lt;p&gt;load(File) takes a directory name, so a suggester is free to use multiple files (I am working on one that might use 2 files).&lt;br/&gt;
so then what is load(InputStream) ?!&lt;/p&gt;</comment>
                    <comment id="13221224" author="dweiss" created="Fri, 2 Mar 2012 20:04:09 +0000"  >&lt;p&gt;I added methods that used streams. They stored the underlying FST. I personally didn&apos;t like the &quot;must point to a directory&quot; approach. &lt;/p&gt;

&lt;p&gt;The File(dir) methods got inherited from the original Lookup interface I think. Those saving/reading from streams were not in the interface so they were specific to a concrete implementation. Don&apos;t know how it looks now.&lt;/p&gt;</comment>
                    <comment id="13221233" author="rcmuir" created="Fri, 2 Mar 2012 20:16:38 +0000"  >&lt;p&gt;Right I&apos;m not concerned about concrete impls. Concrete can do whatever it wants &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;In the actual lookup interface, load/store from stream was added underneath this issue:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://svn.apache.org/viewvc/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java?r1=1236012&amp;amp;r2=1291418&amp;amp;diff_format=h&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewvc/lucene/dev/trunk/modules/suggest/src/java/org/apache/lucene/search/suggest/Lookup.java?r1=1236012&amp;amp;r2=1291418&amp;amp;diff_format=h&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m not opposed to this change: but if we are going to require that implementations only use a single file,&lt;br/&gt;
then we should remove the File ones and just let caller deal with the inputstream... does that make sense?&lt;/p&gt;

&lt;p&gt;Currently its impossible to tell which one will be called!&lt;/p&gt;</comment>
                    <comment id="13221239" author="dweiss" created="Fri, 2 Mar 2012 20:24:13 +0000"  >&lt;p&gt;If you say you already have an implementation that could use more than one file then it&apos;d be silly to enforce a single file format. I agree too many options is not good, in particular it&apos;s painful for potential implementors.&lt;/p&gt;</comment>
                    <comment id="13221243" author="rcmuir" created="Fri, 2 Mar 2012 20:28:23 +0000"  >&lt;p&gt;Well I switched to a single file already, so ignore that implementation &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;But my concern is mostly about API confusion for implementing suggesters: if we require a single file then lets just have InputStream.&lt;br/&gt;
Otherwise, lets remove InputStream from Lookup, (of course a specific concrete Impl that only uses one file is still free to provide that)&lt;/p&gt;</comment>
                    <comment id="13221249" author="dweiss" created="Fri, 2 Mar 2012 20:32:52 +0000"  >&lt;p&gt;+1 for streams. They&apos;re a lot more flexible than Files.&lt;/p&gt;</comment>
                    <comment id="13221332" author="simonw" created="Fri, 2 Mar 2012 22:58:42 +0000"  >&lt;p&gt;the main reason why I moved this to the interface was that I needed to do some extra processing in the stream ie. calc a checksum and I wanted to write stuff directly to HDFS etc. I think we should go for streams or we pass in a lucene directory while I think unless really needed we should stick with a stream.&lt;/p&gt;</comment>
                    <comment id="13221352" author="simonw" created="Fri, 2 Mar 2012 23:37:09 +0000"  >&lt;p&gt;here is a patch that removes the file based store / load methods. Once thing I don&apos;t like about this is that we use one an the same file name in solr to store stuff. We could possibly fix this and make it bw compatible by pulling a file name from the factory for instance but even that is kind of flaky. Maybe somebody has a better idea.&lt;/p&gt;

&lt;p&gt;Yet I think one of the biggest issues here is  that we don&apos;t really have a header on the actual implementation. Ie you could simply load a FST from a FST suggester into WFST but the results would be bogus. I think we should add real headers to the files to fail early and give good error messages. &lt;/p&gt;</comment>
                    <comment id="13223741" author="simonw" created="Tue, 6 Mar 2012 22:29:11 +0000"  >&lt;p&gt;here is a patch against 3.x &lt;/p&gt;</comment>
                    <comment id="13224241" author="simonw" created="Wed, 7 Mar 2012 12:43:18 +0000"  >&lt;p&gt;here is a new patch removing the file based store / load methods and adding a fileName method to solrs factories to maintain compatibility. I will commit this soon.&lt;/p&gt;</comment>
                    <comment id="13224242" author="simonw" created="Wed, 7 Mar 2012 12:43:48 +0000"  >&lt;p&gt;backported committed patches to 3.x in rev 1297946&lt;/p&gt;</comment>
                    <comment id="13224691" author="simonw" created="Wed, 7 Mar 2012 20:40:43 +0000"  >&lt;p&gt;I committed the last patch to trunk and backported to 3x.&lt;/p&gt;

&lt;p&gt;thanks guys&lt;/p&gt;</comment>
                    <comment id="13224693" author="rcmuir" created="Wed, 7 Mar 2012 20:43:00 +0000"  >&lt;p&gt;Thanks Simon! hard work but I expect there is more.&lt;/p&gt;

&lt;p&gt;Hopefully this module will grow into something much bigger...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12517323" name="LUCENE-3807_3x.patch" size="184064" author="simonw" created="Tue, 6 Mar 2012 22:29:10 +0000" />
                    <attachment id="12517393" name="LUCENE-3807.patch" size="16404" author="simonw" created="Wed, 7 Mar 2012 12:43:18 +0000" />
                    <attachment id="12516903" name="LUCENE-3807.patch" size="12436" author="simonw" created="Fri, 2 Mar 2012 23:37:09 +0000" />
                    <attachment id="12516847" name="LUCENE-3807.patch" size="81721" author="simonw" created="Fri, 2 Mar 2012 15:30:16 +0000" />
                    <attachment id="12516818" name="LUCENE-3807.patch" size="76574" author="simonw" created="Fri, 2 Mar 2012 11:27:40 +0000" />
                    <attachment id="12516816" name="LUCENE-3807.patch" size="57297" author="simonw" created="Fri, 2 Mar 2012 10:23:13 +0000" />
                    <attachment id="12515574" name="LUCENE-3807.patch" size="69554" author="simonw" created="Wed, 22 Feb 2012 11:00:38 +0000" />
                    <attachment id="12515376" name="LUCENE-3807.patch" size="69151" author="simonw" created="Tue, 21 Feb 2012 16:42:31 +0000" />
                    <attachment id="12515345" name="LUCENE-3807.patch" size="64072" author="simonw" created="Tue, 21 Feb 2012 11:56:57 +0000" />
                    <attachment id="12515250" name="LUCENE-3807.patch" size="68618" author="simonw" created="Mon, 20 Feb 2012 14:44:36 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 20 Feb 2012 14:44:38 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>228598</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23892</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>