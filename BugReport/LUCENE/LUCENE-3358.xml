<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:18:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3358/LUCENE-3358.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3358] StandardTokenizer disposes of Hiragana combining mark dakuten instead of attaching it to the character it belongs to</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3358</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Lucene 3.3 (possibly 3.1 onwards) exhibits less than great behaviour for tokenising hiragana, if combining marks are in use.&lt;/p&gt;

&lt;p&gt;Here&apos;s a unit test:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    @Test
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testHiraganaWithCombiningMarkDakuten() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception
    {
        &lt;span class=&quot;code-comment&quot;&gt;// Hiragana &apos;S&apos; following by the combining mark dakuten
&lt;/span&gt;        TokenStream stream = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardTokenizer(Version.LUCENE_33, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(&lt;span class=&quot;code-quote&quot;&gt;&quot;\u3055\u3099&quot;&lt;/span&gt;));

        &lt;span class=&quot;code-comment&quot;&gt;// Should be kept together.
&lt;/span&gt;        List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; expectedTokens = Arrays.asList(&lt;span class=&quot;code-quote&quot;&gt;&quot;\u3055\u3099&quot;&lt;/span&gt;);
        List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; actualTokens = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt;();
        CharTermAttribute term = stream.addAttribute(CharTermAttribute.class);
        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (stream.incrementToken())
        {
            actualTokens.add(term.toString());
        }

        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;Wrong tokens&quot;&lt;/span&gt;, expectedTokens, actualTokens);

    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code fails with:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.AssertionError: Wrong tokens expected:&amp;lt;[&#12374;]&amp;gt; but was:&amp;lt;[&#12373;]&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems as if the tokeniser is throwing away the combining mark entirely.&lt;/p&gt;

&lt;p&gt;3.0&apos;s behaviour was also undesirable:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;java.lang.AssertionError: Wrong tokens expected:&amp;lt;[&#12374;]&amp;gt; but was:&amp;lt;[&#12373;, &#12441;]&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But at least the token was there, so it was possible to write a filter to work around the issue.&lt;/p&gt;

&lt;p&gt;Katakana seems to be avoiding this particular problem, because all katakana and combining marks found in a single run seem to be lumped into a single token (this is a problem in its own right, but I&apos;m not sure if it&apos;s really a bug.)&lt;/p&gt;</description>
                <environment></environment>
            <key id="12517748">LUCENE-3358</key>
            <summary>StandardTokenizer disposes of Hiragana combining mark dakuten instead of attaching it to the character it belongs to</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="trejkaz">Trejkaz</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Aug 2011 06:08:36 +0100</created>
                <updated>Sun, 27 Nov 2011 12:31:42 +0000</updated>
                    <resolved>Thu, 4 Aug 2011 22:07:16 +0100</resolved>
                            <version>3.3</version>
                                <fixVersion>3.4</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="13078689" author="rcmuir" created="Wed, 3 Aug 2011 11:47:42 +0100"  >&lt;p&gt;Remember, things in StandardTokenizer are only bugs if they differ from &lt;a href=&quot;http://unicode.org/cldr/utility/breaks.jsp&quot; class=&quot;external-link&quot;&gt;http://unicode.org/cldr/utility/breaks.jsp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But in the hiragana case, thats definitely a bug in the jflex grammar, because we shouldn&apos;t be splitting a base character from its combining mark here.&lt;/p&gt;</comment>
                    <comment id="13078726" author="rcmuir" created="Wed, 3 Aug 2011 13:53:24 +0100"  >&lt;p&gt;The rules are wrong here for Han also.&lt;/p&gt;</comment>
                    <comment id="13078728" author="rcmuir" created="Wed, 3 Aug 2011 13:57:09 +0100"  >&lt;p&gt;here&apos;s a patch: without re-generation or backwards compat yet.&lt;/p&gt;

&lt;p&gt;we should fix the URL+Email one also, and add backwards for both.&lt;/p&gt;</comment>
                    <comment id="13078878" author="steve_rowe" created="Wed, 3 Aug 2011 18:43:03 +0100"  >&lt;p&gt;+1 Robert&apos;s patch looks good.&lt;/p&gt;</comment>
                    <comment id="13079544" author="rcmuir" created="Thu, 4 Aug 2011 20:43:09 +0100"  >&lt;p&gt;Here&apos;s a patch with sophisticated backwards.&lt;/p&gt;

&lt;p&gt;I&apos;d like to commit this and open a followup issue for the URL+Email one, that one is more complicated and needs to first be ported to Standard&apos;s interface.&lt;/p&gt;</comment>
                    <comment id="13079578" author="steve_rowe" created="Thu, 4 Aug 2011 21:40:21 +0100"  >&lt;p&gt;+1 to commit.  &lt;/p&gt;

&lt;p&gt;I applied the patch, then ran &apos;ant jflex&apos; and &apos;ant test&apos; in &lt;tt&gt;modules/analysis/common/&lt;/tt&gt;.  All succeeded.&lt;/p&gt;</comment>
                    <comment id="13079595" author="rcmuir" created="Thu, 4 Aug 2011 22:07:16 +0100"  >&lt;p&gt;Thanks Trejkaz!&lt;/p&gt;

&lt;p&gt;i opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3361&quot; title=&quot;port url+email tokenizer to standardtokenizerinterface (or similar)&quot;&gt;&lt;del&gt;LUCENE-3361&lt;/del&gt;&lt;/a&gt; for the URL+email variant&lt;/p&gt;</comment>
                    <comment id="13079727" author="trejkaz" created="Fri, 5 Aug 2011 02:20:20 +0100"  >&lt;p&gt;Thanks for such a fast fix! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  (I will still wait for 3.4 because it will make backwards-compat much simpler.)&lt;/p&gt;

&lt;p&gt;I am aware of the Unicode word breaking rules and read the standard through, which is where I discovered that the non-breaking of Katakana was part of the standard (which is why I haven&apos;t filed it as a bug or improvement about that as well.)  It is very unfortunate that the Unicode Consortium somehow ended up with a rule which is, quite frankly, undesirable. When I brought the change up with Japanese users, they were 100% against that behaviour, so it&apos;s a wonder that the standard got past the Japanese without any objections (I am, of course, assuming that they actually consulted an expert in the language.)  But breaking it up as a separate filter isn&apos;t so hard.  It&apos;s only a single Unicode area with few combining marks, so the logic is not that difficult and StandardTokenizer even marks the token as katakana for us.&lt;/p&gt;</comment>
                    <comment id="13079747" author="rcmuir" created="Fri, 5 Aug 2011 03:13:05 +0100"  >&lt;blockquote&gt;
&lt;p&gt;It is very unfortunate that the Unicode Consortium somehow ended up with a rule which is, quite frankly, undesirable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not concerned about this, while your users may not like it, I think we should stick by the Standard for these reasons:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;its not desirable to deviate from the standard here, anyone can customize the behavior to do what they want.&lt;/li&gt;
	&lt;li&gt;its not shown that what you say is true, experiments have been done here (see below) and I would say as a default, what is happening here is just fine.&lt;/li&gt;
	&lt;li&gt;splitting this katakana up in some non-standard way leaves me with performance concerns of long postings lists for common terms.&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;For the Japanese collection (Table 4), it is not clear whether bigram generation should have
been done for both Kanji and Katakana characters (left part) or only for Kanji characters
(right part of Table 4). When using title-only queries, the Okapi model provided the best
mean average precision of 0.2972 (bigram on Kanji only) compared to 0.2873 when
generating bigrams on both Kanji and Katakana. This difference is rather small, and is even
smaller in the opposite direction for long queries (0.3510 vs. 0.3523). Based on these results
we cannot infer that for the Japanese language one indexing procedure is always significantly
better than another.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.111.6738&quot; class=&quot;external-link&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.111.6738&lt;/a&gt;&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12517959">LUCENE-3361</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12489386" name="LUCENE-3358.patch" size="83631" author="rcmuir" created="Thu, 4 Aug 2011 20:43:09 +0100" />
                    <attachment id="12489187" name="LUCENE-3358.patch" size="1949" author="rcmuir" created="Wed, 3 Aug 2011 13:57:09 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 3 Aug 2011 10:47:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2731</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24338</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>