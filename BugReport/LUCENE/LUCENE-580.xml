<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:19:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-580/LUCENE-580.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-580] Pre-analyzed fields</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-580</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Adds the possibility to set a TokenStream at Field constrution time, available as tokenStreamValue in addition to stringValue, readerValue and binaryValue.&lt;/p&gt;

&lt;p&gt;There might be some problems with mixing stored fields with the same name as a field with tokenStreamValue.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12343593">LUCENE-580</key>
            <summary>Pre-analyzed fields</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="karl.wettin">Karl Wettin</reporter>
                        <labels>
                    </labels>
                <created>Sat, 27 May 2006 13:56:43 +0100</created>
                <updated>Sun, 29 Apr 2007 20:28:24 +0100</updated>
                    <resolved>Sun, 29 Apr 2007 20:28:24 +0100</resolved>
                            <version>1.9</version>
                                                <component>modules/analysis</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12413562" author="karl.wettin" created="Sat, 27 May 2006 13:57:37 +0100"  >&lt;p&gt;Field.java.diff&lt;br/&gt;
DocumentWriter.java.diff&lt;/p&gt;</comment>
                    <comment id="12413563" author="karl.wettin" created="Sat, 27 May 2006 13:58:42 +0100"  >&lt;p&gt;The description should be &quot;This patch&quot;... and not &quot;This page&quot;...&lt;/p&gt;</comment>
                    <comment id="12465797" author="nyh" created="Thu, 18 Jan 2007 16:21:04 +0000"  >&lt;p&gt;This patch will be useful for users &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-755&quot; title=&quot;Payloads&quot;&gt;&lt;del&gt;LUCENE-755&lt;/del&gt;&lt;/a&gt;, the payloads patch. That patch adds &quot;payloads&quot; to tokens, but using it to add a few tokens with payloads in some field can be ugly because you need to split the code into two places: at one place you add the field, only text, and at another place you need to write a special analyzer which will work only on that field, recognize the specific tokens and add the payloads to them. This patch makes this easier, because when you add a field, you can add it pre-analyzed, already as a list of tokens, and these tokens will already have their special payloads in them.&lt;/p&gt;

&lt;p&gt;I have just a few comments on this patch:&lt;/p&gt;

&lt;p&gt;1. The description above suggests that it might not work if the same field name is used for two Field&apos;s, one stored and the other preanalyzed. I think it is important that this combination (as well as all other combinations) are supported. I actually use all these combinations in my code, and I don&apos;t see why it should cause problems.&lt;/p&gt;

&lt;p&gt;2. The patch has some strange changes in the comments, changing the word &quot;Index&quot; to &quot;NotificationService&quot;. I bet this wasn&apos;t intentional &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;3. The new Field constructor still has a &quot;Index&quot; paramter, taking TOKENIZED, UN_TOKENIZED or NO_NORMS (only NO is forbidden). I wonder, what&apos;s the difference between TOKENIZED and UN_TOKENIZED in this case? The NO_NORMS is a very useful case, because it allows you to do something not previously possible in Lucene (a tokenized field, but without norms). Perhaps this parameter should be better documented in the javadoc comment.&lt;/p&gt;

&lt;p&gt;4. In the new Field constructor&apos;s comment, the phrase &quot;if name or reader&quot; should be &quot;if name or tokenStream&quot;.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="12465811" author="karl.wettin" created="Thu, 18 Jan 2007 17:03:04 +0000"  >&lt;p&gt;Nadav Har&apos;El &lt;span class=&quot;error&quot;&gt;&amp;#91;18/Jan/07 08:21 AM&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; The description above suggests that it might not work if the same&lt;br/&gt;
&amp;gt; field name is used for two Field&apos;s, one stored and the other preanalyzed. &lt;br/&gt;
&amp;gt; I think it is important that this combination (as well as all other &lt;br/&gt;
&amp;gt; combinations) are supported. I actually use all these combinations in my&lt;br/&gt;
&amp;gt; code, and I don&apos;t see why it should cause problems.&lt;/p&gt;

&lt;p&gt;Actually, I can&apos;t remember why I thought there could be a problem, nor can I think of one now.  This code is from my pre-tests era, and it should could need some.&lt;/p&gt;

&lt;p&gt;If you like this  strategy, I think it would be more elegant passing a factory rather than the actual token stream.&lt;/p&gt;

&lt;p&gt;&amp;gt; The patch has some strange changes in the comments, changing the word&lt;br/&gt;
&amp;gt;  &quot;Index&quot; to &quot;NotificationService&quot;. I bet this wasn&apos;t intentional &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Hehe, that must be an old refactoring search and replace incident.&lt;/p&gt;
</comment>
                    <comment id="12491114" author="karl.wettin" created="Tue, 24 Apr 2007 03:25:29 +0100"  >&lt;p&gt;Michael, let me know if you start working on this. I would not mind a discussion on how the token stream supplier should look like. For one it should be an interface/class that supplies the token stream and not a TokenStream it self as it could only be read once. Or?&lt;/p&gt;</comment>
                    <comment id="12491127" author="karl.wettin" created="Tue, 24 Apr 2007 05:28:23 +0100"  >&lt;p&gt;Perhaps it would be nice if standard term vector, positions et c. was available for easy extraction? Pass a TokenStream to the constructor of the pre analyzed field, buffer it up in a LinkedHashMap, or something in that direction.&lt;/p&gt;</comment>
                    <comment id="12491543" author="karl.wettin" created="Wed, 25 Apr 2007 08:41:53 +0100"  >&lt;p&gt;An implementation suggestion. The project will not compile as there are two Fieldable implementations that does not implement the tokenStreamFactoryValue() method, LazyField and FieldForMerge. I suspect they could just return null values, but I leave it open as I&apos;m not sure.&lt;/p&gt;

&lt;p&gt;Patch contains:&lt;/p&gt;

&lt;p&gt;public interface TokenStreamFactory {&lt;br/&gt;
  public abstract TokenStream factory() throws IOException;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;/** Encapuslates a single instance of TokenStream that can be passed on ONCE. */&lt;br/&gt;
public class SimplePreAnalyzedField implements TokenStreamFactory {&lt;/p&gt;

&lt;p&gt;/** Caches an instance of TokenStream in a List, reassembled to a TokenStream for each call to factory() */&lt;br/&gt;
public class CachedPreAnalyzedField implements TokenStreamFactory {&lt;/p&gt;</comment>
                    <comment id="12491555" author="michaelbusch" created="Wed, 25 Apr 2007 09:21:29 +0100"  >&lt;p&gt;Hi Karl,&lt;/p&gt;

&lt;p&gt;thank you for your comments and your new patch! I actually updated you initial patch a couple of days ago to apply cleanly on the current trunk as I found it quite simple and straightforward. &lt;/p&gt;

&lt;p&gt;I have a question regarding the new patch: What kind of use cases do you have in mind with the cached field? I would think that a TokenStream will only be read once by the DocumentWriter? Currently you can add a field with a Reader, and as far as I know is it not guaranteed that a Reader supports reset(), which means it can only be read once, too. Thoughts?&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;</comment>
                    <comment id="12491557" author="karl.wettin" created="Wed, 25 Apr 2007 09:32:00 +0100"  >&lt;p&gt;25 apr 2007 kl. 10.23 skrev Michael Busch (JIRA):&lt;br/&gt;
&amp;gt; What kind of use cases do you have in mind with the cached field?&lt;/p&gt;

&lt;p&gt;I made the inital implementation for text mining purposes &amp;#8211; I needed the term vector prior to inserting the document to the index. Back then I analyzed, cached it up, did my secondary analysis of the vector, and finally reconstructed the token stream and passed it to the field. I think it would be easier to just pass a token stream to an extention of CachedPreAn.. that also features a termFreqVector(), termPosVector(), et c.&lt;/p&gt;

&lt;p&gt;Karl&lt;/p&gt;</comment>
                    <comment id="12492509" author="michaelbusch" created="Sat, 28 Apr 2007 19:41:23 +0100"  >&lt;p&gt;Karl,&lt;/p&gt;

&lt;p&gt;thanks again for your suggestions. I created a patch with a slightly different approach compared to your latest patch. Similar to java.io.Reader I added the public method reset() to TokenStream, which does nothing per default. Subclasses may or may not overwrite this method. I also added the new class CachingTokenFilter to the analysis package which does the same as your CachedPreAnalyzedField. Before the DocumentWriter consumes the TokenStream it calls reset() reposition the stream at the beginning.&lt;/p&gt;

&lt;p&gt;With this approach it is not neccessary anymore to introduce a TokenStreamFactory and the PreAnalyzedField classes, which is simpler and more consistent with the Analyzer API in my opinion. Yet it also allows to consume the Tokens of a stream more than once, which should satisfy your needs?&lt;/p&gt;

&lt;p&gt;Please let me know what you thing about this new patch. Maybe other committers could take a look as well, since this is an API change (well, extension) to two very common classes: TokenStream and Field.&lt;/p&gt;</comment>
                    <comment id="12492521" author="karl.wettin" created="Sat, 28 Apr 2007 23:07:10 +0100"  >&lt;p&gt;28 apr 2007 kl. 20.42 skrev Michael Busch (JIRA):&lt;br/&gt;
&amp;gt; Please let me know what you thing about this new patch.&lt;/p&gt;

&lt;p&gt;+1. Very clean.&lt;/p&gt;</comment>
                    <comment id="12492538" author="karl.wettin" created="Sun, 29 Apr 2007 03:50:59 +0100"  >&lt;p&gt;A patch that supports omitting norms.&lt;/p&gt;

&lt;p&gt; /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Create a tokenized and indexed field that is not stored, optionally with&lt;/li&gt;
	&lt;li&gt;storing term vectors.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param name The name of the field&lt;/li&gt;
	&lt;li&gt;@param tokenStream The reader with the content&lt;br/&gt;
+   * @param index Must be tokenized or no norms.&lt;/li&gt;
	&lt;li&gt;@param termVector Whether term vector should be stored&lt;/li&gt;
	&lt;li&gt;@throws NullPointerException if name or reader is &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;&lt;br/&gt;
   */ &lt;/li&gt;
&lt;/ul&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public Field(String name, TokenStream tokenStream, TermVector termVector) {&lt;br/&gt;
+ public Field(String name, TokenStream tokenStream, Index index, TermVector termVector) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    if (name == null)&lt;br/&gt;
      throw new NullPointerException(&quot;name cannot be null&quot;);&lt;br/&gt;
    if (tokenStream == null)&lt;br/&gt;
      throw new NullPointerException(&quot;tokenStream cannot be null&quot;);&lt;br/&gt;
+    if (index != Index.TOKENIZED &amp;amp;&amp;amp; index != Index.NO_NORMS) &lt;/p&gt;
{
+      throw new IllegalArgumentException(&quot;index must be either TOKENIZED or NO_NORMS&quot;);
+    }


&lt;p&gt;Also fixed some copy/paste related javadoc errors.&lt;/p&gt;</comment>
                    <comment id="12492540" author="michaelbusch" created="Sun, 29 Apr 2007 04:33:27 +0100"  >&lt;p&gt;I&apos;d like to keep the new Constructor consistent with the Constructor that takes a Reader argument. You can use Fieldable.setOmitNorms() to disable norms.&lt;/p&gt;</comment>
                    <comment id="12492542" author="karl.wettin" created="Sun, 29 Apr 2007 04:46:32 +0100"  >&lt;p&gt;How about two constructors?&lt;/p&gt;</comment>
                    <comment id="12492562" author="michaelbusch" created="Sun, 29 Apr 2007 12:01:33 +0100"  >&lt;p&gt;I hesitate to add even more constructors to Field, since it has already a bunch of them. And I don&apos;t see the value in the constructor you proposed, because the same can be achieved by using setOmitNorms(). I think it is a bit confusing to have the Index parameter with only two out of four allowed values in the constructor.&lt;/p&gt;</comment>
                    <comment id="12492594" author="michaelbusch" created="Sun, 29 Apr 2007 20:28:24 +0100"  >&lt;p&gt;I just committed this. Thanks a lot for your patches and the productive discussions, Karl!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12356471" name="lucene-580.patch" size="14908" author="karl.wettin" created="Sun, 29 Apr 2007 03:50:58 +0100" />
                    <attachment id="12356463" name="lucene-580.patch" size="21289" author="michaelbusch" created="Sat, 28 Apr 2007 19:41:23 +0100" />
                    <attachment id="12334647" name="preanalyze.tar" size="10240" author="karl.wettin" created="Sat, 27 May 2006 13:57:37 +0100" />
                    <attachment id="12356209" name="trunk.diff" size="12988" author="karl.wettin" created="Wed, 25 Apr 2007 08:41:53 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 18 Jan 2007 16:21:04 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13170</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27147</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>