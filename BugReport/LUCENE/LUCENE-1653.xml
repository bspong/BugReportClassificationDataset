<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:01:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1653/LUCENE-1653.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1653] Change DateTools to not create a Calendar in every call to dateToString or timeToString</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1653</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;DateTools creates a Calendar instance on every call to dateToString and timeToString. Specifically:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;timeToString calls Calendar.getInstance on every call.&lt;/li&gt;
	&lt;li&gt;dateToString calls timeToString(date.getTime()), which then instantiates a new Date(). I think we should change the order of the calls, or not have each call the other.&lt;/li&gt;
	&lt;li&gt;round(), which is called from timeToString (after creating a Calendar instance) creates another &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Calendar instance ...&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Seems that if we synchronize the methods and create the Calendar instance once (static), it should solve it.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12426059">LUCENE-1653</key>
            <summary>Change DateTools to not create a Calendar in every call to dateToString or timeToString</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Thu, 21 May 2009 21:54:57 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:25 +0100</updated>
                    <resolved>Thu, 28 May 2009 13:03:09 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12712522" author="shaie" created="Sun, 24 May 2009 08:38:15 +0100"  >&lt;p&gt;Had to mark all methods as synchronized, but I think creating a Calendar on every call has much more overhead. I removed the synchronization on the different DateFormats as a result.&lt;/p&gt;

&lt;p&gt;I ran all the tests that use DateTools and they pass (well ... I didn&apos;t really change any logic).&lt;/p&gt;</comment>
                    <comment id="12713092" author="shaie" created="Tue, 26 May 2009 17:36:08 +0100"  >&lt;p&gt;Don&apos;t mean to nag ... but can anybody review (and hopefully then commit) this? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12713098" author="markrmiller@gmail.com" created="Tue, 26 May 2009 17:43:24 +0100"  >&lt;p&gt;Why is this synchronized?&lt;/p&gt;

&lt;p&gt;+  public static synchronized Date round(Date date, Resolution resolution) &lt;/p&gt;
{
     return new Date(round(date.getTime(), resolution));
   }</comment>
                    <comment id="12713142" author="shaie" created="Tue, 26 May 2009 18:31:33 +0100"  >&lt;p&gt;round(long, Resolution) is synchronized and this one calls it, so I figured it cannot hurt to sync it too (sync on an already obtained lock should not have any overhead, or at least significant one). I can remove the sync if you think it matters.&lt;/p&gt;</comment>
                    <comment id="12713333" author="markrmiller@gmail.com" created="Wed, 27 May 2009 01:10:29 +0100"  >&lt;p&gt;Just asking - it just appeared unnecessary. Whats the reason for it? Its just going to get the lock anyway right? I&apos;d just lean towards leaving it out if it removes something (an extra synchronized keyword) and doesn&apos;t make a difference. No big deal, was just curious, nothing I&apos;ll argue about.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12713405" author="shaie" created="Wed, 27 May 2009 05:25:20 +0100"  >&lt;p&gt;What I had in mind when I synced it was: (1) consistency of the API - all the methods are synced, so you don&apos;t need to ask yourself why is method A synced and B not, and do I need to sync B and (2) if we leave it not synced and in the future its impl changes to not call round(), someone might forget to sync it.&lt;/p&gt;

&lt;p&gt;Anyway, those two are not so important. Since we&apos;re both on the fence, and you&apos;ll be the one committing it, I&apos;ll let you make the call &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;If you decide to remove the sync, I can either post a new patch, or you can apply the current one and remove the sync before committing. Again ... your call &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12713552" author="markrmiller@gmail.com" created="Wed, 27 May 2009 13:25:46 +0100"  >&lt;p&gt;Looks like a good change to me. Only downside I see is that round was not synced before, but now it is. Seems the benefits outweigh though - doesn&apos;t have to make the cal each time, and avoids double cal creation that happened when other methods called round. Anyone else have a comment before I commit?&lt;/p&gt;</comment>
                    <comment id="12713553" author="markrmiller@gmail.com" created="Wed, 27 May 2009 13:27:43 +0100"  >&lt;p&gt;add changes.txt&lt;/p&gt;</comment>
                    <comment id="12713954" author="markrmiller@gmail.com" created="Thu, 28 May 2009 13:03:09 +0100"  >&lt;p&gt;Thanks Shai!&lt;/p&gt;</comment>
                    <comment id="12725447" author="dsmiley" created="Tue, 30 Jun 2009 03:59:13 +0100"  >&lt;p&gt;I&apos;m looking through DateTools now and can&apos;t help but want to clean it up some.  One thing I see that is odd is the use of a Calendar in timeToString(long,resolution).  The first two lines look like this right now:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
calInstance.setTimeInMillis(round(time, resolution));
Date date = calInstance.getTime();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead, it can simply be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Date date = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Date(round(time, resolution));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Secondly... I think a good deal of logic can be cleaned up in the other methods instead of a bunch of if-else statements that is a bad code smell.  Most of the logic of 3 of those methods could be put into Resolution and be made tighter.&lt;/p&gt;</comment>
                    <comment id="12725456" author="shaie" created="Tue, 30 Jun 2009 04:40:09 +0100"  >&lt;p&gt;In 3.0 when we move to Java 5, we can make Resolution an enum, and then use a switch statement on passed in Resolution. But performance-wise I don&apos;t think it would make such a big difference, as we&apos;re already comparing instances, which should be relatively fast.&lt;/p&gt;

&lt;p&gt;How will moving the logic of timeToString, stringToDate and round to Resolution make the code tighter? Resolution would still need to check its instance type in order to execute the right code. Unless we subclass Resolution internally and have each subclass implement just the code section of these 3, that it needs?&lt;/p&gt;</comment>
                    <comment id="12728408" author="dsmiley" created="Wed, 8 Jul 2009 00:01:02 +0100"  >&lt;p&gt;Applying the attached patch shows the improvements to DateTools.java that I think should be done.  All logic that does anything at all is moved to instance methods of the inner class Resolution.  I argue this is more object-oriented.&lt;/p&gt;

&lt;p&gt;1. In cases where Resolution is an argument to the method, I can simply invoke the appropriate call on the Resolution object.  Formerly there was a big branch if/else.&lt;br/&gt;
2. Instead of &quot;synchronized&quot; being used seemingly everywhere, synchronized is used to sync on the object that is not threadsafe, be it a DateFormat or Calendar instance.&lt;br/&gt;
3. Since different DateFormat and Calendar instances are created per-Resolution, there is now less lock contention since threads using different resolutions will not use the same locks.&lt;br/&gt;
4. The old implementation of timeToString rounded the time before formatting it.  That&apos;s unnecessary since the format only includes the resolution desired.&lt;br/&gt;
5.round() now uses a switch statement that benefits from fall-through (no break).&lt;/p&gt;

&lt;p&gt;Another debatable improvement is putting the resolution instances into an array indexed by format length.  This would mean I could remove big-ish switch in lookupResolutionByLength() and avoid the length constants there... but I don&apos;t think that&apos;s a big deal.&lt;/p&gt;</comment>
                    <comment id="12728427" author="markrmiller@gmail.com" created="Wed, 8 Jul 2009 00:52:27 +0100"  >&lt;p&gt;Hey David,&lt;/p&gt;

&lt;p&gt;Thanks a lot for the patch!&lt;/p&gt;

&lt;p&gt;Can you attach it to a new issue though? It helps with tracking in CHANGES.txt and svn.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12412798" name="cleanerDateTools.patch" size="11196" author="dsmiley" created="Wed, 8 Jul 2009 00:01:02 +0100" />
                    <attachment id="12409157" name="LUCENE-1653.patch" size="8933" author="markrmiller@gmail.com" created="Wed, 27 May 2009 13:27:43 +0100" />
                    <attachment id="12408904" name="LUCENE-1653.patch" size="8566" author="shaie" created="Sun, 24 May 2009 08:38:15 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 26 May 2009 16:43:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12105</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26074</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>