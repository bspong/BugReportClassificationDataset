<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:10:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3191/LUCENE-3191.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3191] Add TopDocs.merge to merge multiple TopDocs</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3191</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;It&apos;s not easy today to merge TopDocs, eg produced by multiple shards,&lt;br/&gt;
supporting arbitrary Sort.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12509866">LUCENE-3191</key>
            <summary>Add TopDocs.merge to merge multiple TopDocs</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Jun 2011 20:48:37 +0100</created>
                <updated>Sat, 2 Jul 2011 03:40:11 +0100</updated>
                    <resolved>Tue, 28 Jun 2011 17:34:42 +0100</resolved>
                                            <fixVersion>3.3</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13047399" author="mikemccand" created="Fri, 10 Jun 2011 20:50:08 +0100"  >&lt;p&gt;Patch.&lt;/p&gt;

&lt;p&gt;The basic idea is simple (use PQ to find top N across all shards),&lt;br/&gt;
but, I had to add FieldComparator.compare(Comparable, Comparable).&lt;br/&gt;
Ie, the FieldComparator should be able to compare the Comparables&lt;br/&gt;
returned by its value method.&lt;/p&gt;</comment>
                    <comment id="13047416" author="thetaphi" created="Fri, 10 Jun 2011 21:07:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;The basic idea is simple (use PQ to find top N across all shards), but, I had to add FieldComparator.compare(Comparable, Comparable).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That makes no sense to me, because Comparable&amp;lt;?&amp;gt; can always compare against each other without a separate comparator. The old MultiSearcher did exactly do this. This is why it returns Comparable&amp;lt;?&amp;gt;. So instead FieldComparator.compare(a, b) just use a.compareTo(b). It&apos;s in the responsibility of the Comparator to return a correctly wrapped Comparable.&lt;/p&gt;

&lt;p&gt;There might only be a bug in RelevanceComparator: Its getValue() method returns a comparable that sorts in wrong order. We have no test for this, so it might never cause a test failure.&lt;/p&gt;</comment>
                    <comment id="13047440" author="mikemccand" created="Fri, 10 Jun 2011 21:44:36 +0100"  >&lt;p&gt;Uwe, you are right!  Now why didn&apos;t I think of that...&lt;/p&gt;

&lt;p&gt;The returned Comparable should be expected to properly compare itself to any other Comparable returned from FieldComparator.value... so I&apos;ll do that and then the patch is nice and small.  And no API change for 3.x.&lt;/p&gt;</comment>
                    <comment id="13047472" author="mikemccand" created="Fri, 10 Jun 2011 22:29:24 +0100"  >&lt;p&gt;So... I started down this path (relying on the returned Comparable&lt;br/&gt;
from .value to .compareTo themselves, instead of adding new .compare&lt;br/&gt;
method to FieldComp), but I&apos;m not sure I like it...&lt;/p&gt;

&lt;p&gt;I had to add a ReverseFloatComparable inside RelevanceComp, since it&lt;br/&gt;
sorts opposite natural Float sort order by default.&lt;/p&gt;

&lt;p&gt;But then what this means, for an app that wants to do some sharding,&lt;br/&gt;
suddenly a TopDocs might contain an instance of this class, whereas&lt;br/&gt;
now it contains plain Java objects (Float, Integer, etc.).&lt;/p&gt;

&lt;p&gt;I also don&apos;t like that this is splitting up the logic of how relevacne&lt;br/&gt;
scores compare to one another across two places (RelevanceComp and&lt;br/&gt;
this new ReverseFloatComparable).&lt;/p&gt;

&lt;p&gt;I think it&apos;d be better if we keep simple objects in the TopDocs, to&lt;br/&gt;
keep it easy for apps to serialize themselves (since we don&apos;t impl&lt;br/&gt;
Serializable anymore), and then the front end would invoke&lt;br/&gt;
RelevanceComparator locally to properly compare the floats.&lt;/p&gt;

&lt;p&gt;Ie, really FieldComp.value should never have returned Comparable, I&lt;br/&gt;
think?&lt;/p&gt;</comment>
                    <comment id="13047477" author="thetaphi" created="Fri, 10 Jun 2011 22:35:25 +0100"  >&lt;p&gt;This still confuses me:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There might only be a bug in RelevanceComparator: Its getValue() method returns a comparable that sorts in wrong order. We have no test for this, so it might never cause a test failure.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my opinion, it should return a negative Float object. But as far as I know, there was/is already some special case in the collectors merge code used to merge segment&apos;s results (FieldValueHitQueue.fillFields copys the values into the collected docs, but I am not sure if this is still used.&lt;/p&gt;

&lt;p&gt;The good old deprecated FieldDocSortedHitQueue in 3.x (what&apos;s the replacement?) contains this special case:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
  c = docA.fields[i].compareTo(docB.fields[i]);
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (type == SortField.SCORE) {
    c = -c;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In trunk it&apos;s gone, so we can maybe fix this stupidness. The Comparable returned by RelevanceComparator (used with SortField.SCORE) should simply be negative? Else we have to add this special case in your TopDocs.merge, too.&lt;/p&gt;</comment>
                    <comment id="13047479" author="thetaphi" created="Fri, 10 Jun 2011 22:36:46 +0100"  >&lt;p&gt;By the way, in current trunk the value() method in FieldComparator is obsolete and slows down search, if the field values are not needed. But of course, this patch makes use of it again, but we should correct it.&lt;/p&gt;</comment>
                    <comment id="13047748" author="thetaphi" created="Sat, 11 Jun 2011 00:09:18 +0100"  >&lt;p&gt;We had some discussions about cleaning this up in IRC: &lt;a href=&quot;http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-06-10#l235&quot; class=&quot;external-link&quot;&gt;http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-06-10#l235&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13047756" author="mikemccand" created="Sat, 11 Jun 2011 00:15:36 +0100"  >&lt;p&gt;New patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Changes .value from Comparator (which is trappy because you think&lt;br/&gt;
    you&apos;re free to .compareTo them) to parameterized type passed to&lt;br/&gt;
    FieldComparator.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Renames .compare -&amp;gt; .compareValues, which are now type checked w/&lt;br/&gt;
    generic.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Changes FieldDoc.fields from Comparable[] to Object[]&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Will need to work out how we backport this to 3.x; the change from&lt;br/&gt;
Comparable to Object is an API break, though... maybe not many apps&lt;br/&gt;
are using FieldDoc.field.&lt;/p&gt;</comment>
                    <comment id="13047769" author="mikemccand" created="Sat, 11 Jun 2011 00:40:23 +0100"  >&lt;p&gt;New patch, adds default impl for FC.compareValues to just cast to Comparable&amp;lt;T&amp;gt; and call .compareTo.  All but 2 places just use this default...&lt;/p&gt;</comment>
                    <comment id="13047781" author="thetaphi" created="Sat, 11 Jun 2011 00:50:17 +0100"  >&lt;p&gt;Looks fine, I am happy now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The RelevanceComparator should use simply to minimize unboxing:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compareValues(&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt; first, &lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt; second) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; second.compareTo(first); &lt;span class=&quot;code-comment&quot;&gt;// reverse!
&lt;/span&gt;+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will review more closely tomorrow!&lt;/p&gt;</comment>
                    <comment id="13047877" author="mikemccand" created="Sat, 11 Jun 2011 11:49:31 +0100"  >&lt;p&gt;Thanks Uwe; I&apos;ll fix that.&lt;/p&gt;</comment>
                    <comment id="13048380" author="mikemccand" created="Sun, 12 Jun 2011 18:32:17 +0100"  >&lt;p&gt;New patch, addresses feedback from Uwe (thanks!), and also adds&lt;br/&gt;
merging for TopGroups and SearchGroup to make distributed grouping&lt;br/&gt;
easy(ier).&lt;/p&gt;

&lt;p&gt;I think it&apos;s ready to commit!&lt;/p&gt;</comment>
                    <comment id="13049908" author="mikemccand" created="Wed, 15 Jun 2011 18:34:42 +0100"  >&lt;p&gt;For 3.x, I think we should make an exception to back-compat and break the API (changing FieldComp.value(..) to return &amp;lt;T&amp;gt; not Comparable; changing FieldDoc.fields from Comparable[] to Object[]).  I&apos;ll advertise the break in CHANGES.&lt;/p&gt;</comment>
                    <comment id="13049928" author="thetaphi" created="Wed, 15 Jun 2011 19:08:23 +0100"  >&lt;p&gt;I think this has less impact on users. Two user types:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;People using FieldDoc.fields[] would always cast the return type, so a simple recompile should be fine&lt;/li&gt;
	&lt;li&gt;People writing own FieldComparators must change return value of getValue() and maybe add generics (not required)&lt;/li&gt;
	&lt;li&gt;People that dont implement compareValue() will be also fine, as the default impl casts to Comparable and that will have the same behaviour&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The 3.x impl just have to fix FieldDocSortedHitQueue to use compareValue() and remove the negation for scores.&lt;/p&gt;</comment>
                    <comment id="13049929" author="mikemccand" created="Wed, 15 Jun 2011 19:08:56 +0100"  >&lt;p&gt;Patch for merging back to 3.x.&lt;/p&gt;</comment>
                    <comment id="13049932" author="thetaphi" created="Wed, 15 Jun 2011 19:17:13 +0100"  >&lt;p&gt;Patch looks good, let the BackwardsPoliceman think about some possibilities to lower the risk of breaking code. Of course nothing sophisticated...&lt;/p&gt;</comment>
                    <comment id="13049948" author="mikemccand" created="Wed, 15 Jun 2011 19:38:01 +0100"  >&lt;p&gt;Small further patch for trunk:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Simplifies the API by moving shardIndex onto ScoreDoc&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixes TopDocs.merge to return TopFieldDocs if the Sort != null&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;A couple FieldComparators must override compareValue because the&lt;br/&gt;
    values may be null.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13050478" author="mikemccand" created="Thu, 16 Jun 2011 16:07:17 +0100"  >&lt;p&gt;Thanks Uwe!&lt;/p&gt;</comment>
                    <comment id="13056252" author="rcmuir" created="Tue, 28 Jun 2011 03:08:50 +0100"  >&lt;p&gt;Reopening: this code in SlowCollatedStringComparator is totally broken:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  @Override
  public int compareValues(BytesRef first, BytesRef second) {
    if (first == null) {
      if (second == null) {
        return 0;
      }
      return -1;
    } else if (second == null) {
      return 1;
    } else {
      return collator.compare(first, second);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I haven&apos;t tracked this issue to understand whats going on here, but you cannot pass BytesRefs to collator.compare. If this code is ever reached (and looking at the test i wrote for this damn thing, its unclear if this code is even necessary?!), it &lt;b&gt;will&lt;/b&gt; throw ClassCastException:&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/1,5.0/docs/api/java/text/Collator.html#compare(java.lang.Object&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/1,5.0/docs/api/java/text/Collator.html#compare(java.lang.Object&lt;/a&gt;, java.lang.Object)&lt;/p&gt;</comment>
                    <comment id="13056336" author="thetaphi" created="Tue, 28 Jun 2011 07:32:33 +0100"  >&lt;p&gt;I looked at the code, it was ununderstandable why this thing was generified to BytesRef at all. As it compares String, getValue() and compareValue() should take Strings.&lt;/p&gt;

&lt;p&gt;And thats done in the patch, its even a little bit no so slow &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13056339" author="thetaphi" created="Tue, 28 Jun 2011 07:37:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;I haven&apos;t tracked this issue to understand whats going on here, but you cannot pass BytesRefs to collator.compare. If this code is ever reached (and looking at the test i wrote for this damn thing, its unclear if this code is even necessary?!)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The code is necessary once you &lt;del&gt;cross segments during compare&lt;/del&gt; merge TopDocs. &lt;del&gt;Maybe the index in the tests is so small that it never has multiple segments.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;The clover report shows that this is not the case, it even shows that compare does not use compareBottom():&lt;br/&gt;
&lt;a href=&quot;https://builds.apache.org/job/Lucene-trunk/clover/org/apache/lucene/search/SlowCollatedStringComparator.html&quot; class=&quot;external-link&quot;&gt;https://builds.apache.org/job/Lucene-trunk/clover/org/apache/lucene/search/SlowCollatedStringComparator.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;It never ever calls even compareBottom() so this index is really small. We should make it bigger to test correctly. The getValue() method is only called because the actual String (previously: BytesRef) values are placed in TopFieldDocs.&lt;/del&gt;&lt;/p&gt;</comment>
                    <comment id="13056361" author="thetaphi" created="Tue, 28 Jun 2011 08:26:13 +0100"  >&lt;p&gt;New patch that also checks the getValue/compareValues methods in the comparator.&lt;/p&gt;

&lt;p&gt;Sorry, my earlier comment about too small indexes was wrong. The indexes in fact have segments. The problem was that I was irritated by the former MultiSearcher code that used these compareValues() code. In trunk, only TopDocs.merge() does this.&lt;/p&gt;

&lt;p&gt;So I changed the test:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It does not use MatchAllDocsQuery, instead two TermRangeQueries with a random center point, so it splits the index into two parts. Each result is sorted and checked that its valid.&lt;/li&gt;
	&lt;li&gt;With the two result sets it calls TopDocs.merge() and again checks the result. This call will invoke the value methods and here the test fails as Robert said.&lt;/li&gt;
	&lt;li&gt;For each search call it does &lt;b&gt;not&lt;/b&gt; always set the maximum number of docs as PQ size (else compareBottom/setBottom) are not tested. It reduces the PQ size to a fraction of numDocs for all searches.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In general we should add similar tests to all custom comparators in Lucene&apos;s code, because the comparator can only be tested completely if you also check merging TopDocs.&lt;/p&gt;</comment>
                    <comment id="13056452" author="rcmuir" created="Tue, 28 Jun 2011 12:41:12 +0100"  >&lt;p&gt;ahh thank you!!! I was very confused at why this method was untested!&lt;/p&gt;</comment>
                    <comment id="13056500" author="mikemccand" created="Tue, 28 Jun 2011 14:23:06 +0100"  >&lt;p&gt;Thanks Uwe and Robert &amp;#8211; good catch!  Scary.&lt;/p&gt;

&lt;p&gt;Maybe, to better test TopDocs.merge, we could fix newSearcher (AssertingIndexSearcher) to, sometimes, break into N searches on the sub-searchers and then merge the results, from its search methods?&lt;/p&gt;</comment>
                    <comment id="13056616" author="thetaphi" created="Tue, 28 Jun 2011 17:34:42 +0100"  >&lt;p&gt;Committed fix trunk rev 1140713&lt;/p&gt;</comment>
                    <comment id="13056625" author="thetaphi" created="Tue, 28 Jun 2011 17:49:45 +0100"  >&lt;p&gt;Mike: This is a good idea, not sure if this could break scores, ranking and other things &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13056629" author="rcmuir" created="Tue, 28 Jun 2011 17:58:16 +0100"  >&lt;p&gt;also remember, when you call newSearcher, it optionally takes a default boolean parameter (maybeWrap, default=true).&lt;/p&gt;

&lt;p&gt;So tests sensitive to stuff like this can just pass false here... in general I think beefing up newSearcher with stuff like this is a good idea, so far adding logic here (randomly use executor, randomly use slowwrapper, etc) has always found some bugs... eventually&lt;/p&gt;</comment>
                    <comment id="13056631" author="mikemccand" created="Tue, 28 Jun 2011 18:00:54 +0100"  >&lt;p&gt;I added this to the TestIdeas wiki page.&lt;/p&gt;</comment>
                    <comment id="13056632" author="mikemccand" created="Tue, 28 Jun 2011 18:01:50 +0100"  >&lt;p&gt;This can be done w/o breaking scores &amp;#8211; we can create a top-level weight, and then search against the subs (this is how TestTopDocs works).&lt;/p&gt;</comment>
                    <comment id="13058901" author="rcmuir" created="Sat, 2 Jul 2011 03:40:11 +0100"  >&lt;p&gt;bulk close for 3.3&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12482694" name="LUCENE-3191-3x.patch" size="83489" author="mikemccand" created="Wed, 15 Jun 2011 19:08:56 +0100" />
                    <attachment id="12482698" name="LUCENE-3191.patch" size="13911" author="mikemccand" created="Wed, 15 Jun 2011 19:38:01 +0100" />
                    <attachment id="12482305" name="LUCENE-3191.patch" size="84425" author="mikemccand" created="Sun, 12 Jun 2011 18:32:17 +0100" />
                    <attachment id="12482117" name="LUCENE-3191.patch" size="50354" author="mikemccand" created="Sat, 11 Jun 2011 00:40:23 +0100" />
                    <attachment id="12482114" name="LUCENE-3191.patch" size="53701" author="mikemccand" created="Sat, 11 Jun 2011 00:15:36 +0100" />
                    <attachment id="12482091" name="LUCENE-3191.patch" size="40332" author="mikemccand" created="Fri, 10 Jun 2011 20:50:08 +0100" />
                    <attachment id="12484402" name="LUCENE-3191-SlowCollatorCompareFix.patch" size="3509" author="thetaphi" created="Tue, 28 Jun 2011 08:26:12 +0100" />
                    <attachment id="12484398" name="LUCENE-3191-SlowCollatorCompareFix.patch" size="1167" author="thetaphi" created="Tue, 28 Jun 2011 07:32:33 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 10 Jun 2011 20:07:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2098</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24506</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>