<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:03 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1187/LUCENE-1187.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1187] Things to be done now that Filter is independent from BitSet</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1187</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;(Aside: where is the documentation on how to mark up text in jira comments?)&lt;/p&gt;

&lt;p&gt;The following things are left over after &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;For Lucene 3.0  Filter.bits() will have to be removed.&lt;/p&gt;

&lt;p&gt;There is a CHECKME in IndexSearcher about using ConjunctionScorer to have the boolean behaviour of a Filter.&lt;/p&gt;

&lt;p&gt;I have not looked into Filter caching yet, but I suppose there will be some room for improvement there.&lt;br/&gt;
Iirc the current core has moved to use OpenBitSetFilter and that is probably what is being cached.&lt;br/&gt;
In some cases it might be better to cache a SortedVIntList instead.&lt;/p&gt;

&lt;p&gt;Boolean logic on DocIdSetIterator is already available for Scorers (that inherit from DocIdSetIterator) in the search package. This is currently implemented by ConjunctionScorer, DisjunctionSumScorer,&lt;br/&gt;
ReqOptSumScorer and ReqExclScorer.&lt;br/&gt;
Boolean logic on BitSets is available in contrib/misc and contrib/queries&lt;/p&gt;

&lt;p&gt;DisjunctionSumScorer calls score() on its subscorers before the score value actually needed.&lt;br/&gt;
This could be a reason to introduce a DisjunctionDocIdSetIterator, perhaps as a superclass of DisjunctionSumScorer.&lt;/p&gt;

&lt;p&gt;To fully implement non scoring queries a TermDocIdSetIterator will be needed, perhaps as a superclass of TermScorer.&lt;/p&gt;

&lt;p&gt;The javadocs in org.apache.lucene.search using matching vs non-zero score:&lt;br/&gt;
I&apos;ll investigate this soon, and provide a patch when necessary.&lt;/p&gt;

&lt;p&gt;An early version of the patches of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt; contained a class Matcher,&lt;br/&gt;
that differs from the current DocIdSet in that Matcher has an explain() method.&lt;br/&gt;
It remains to be seen whether such a Matcher could be useful between&lt;br/&gt;
DocIdSet and Scorer.&lt;/p&gt;

&lt;p&gt;The semantics of scorer.skipTo(scorer.doc()) was discussed briefly.&lt;br/&gt;
This was also discussed at another issue recently, so perhaps it is wortwhile to open a separate issue for this.&lt;/p&gt;

&lt;p&gt;Skipping on a SortedVIntList is done using linear search, this could be improved by adding multilevel skiplist info much like in the Lucene index for documents containing a term.&lt;/p&gt;

&lt;p&gt;One comment by me of 3 Dec 2008:&lt;/p&gt;

&lt;p&gt;A few complete (test) classes are deprecated, it might be good to add the target release for removal there.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12389380">LUCENE-1187</key>
            <summary>Things to be done now that Filter is independent from BitSet</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="paul.elschot@xs4all.nl">Paul Elschot</reporter>
                        <labels>
                    </labels>
                <created>Sat, 23 Feb 2008 10:33:04 +0000</created>
                <updated>Tue, 3 Jun 2008 20:08:51 +0100</updated>
                    <resolved>Fri, 23 May 2008 20:27:21 +0100</resolved>
                                            <fixVersion>2.4</fixVersion>
                                <component>core/search</component>
                <component>modules/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12571718" author="paul.elschot@xs4all.nl" created="Sat, 23 Feb 2008 10:36:45 +0000"  >&lt;p&gt;I did something wrong here, I wanted to review the text above before posting it.&lt;br/&gt;
I&apos;m sorry about that,  I&apos;ll just continue here, when it gets too messy, another jira issue can easily be opened.&lt;/p&gt;
</comment>
                    <comment id="12571719" author="paul.elschot@xs4all.nl" created="Sat, 23 Feb 2008 10:43:42 +0000"  >&lt;p&gt;Iirc the boolean logic on contrib/queries is defined in two places: ChainedFilter and BooleanFilter. Ideally these could me merged and their functions be implemented by the DocIdSetIterators underlying the current scorers used by BooleanScorer2 (Conjunction/Disjunction/ReqOpt/ReqExcl). See also the comments of Micheal Bush and Eks Dev at the end of Jan 2008 at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That&apos;s it for the moment. Sorry for the mess, at least it should save others from reviewing all the comments at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt;. I hope I have not missed anything...&lt;/p&gt;</comment>
                    <comment id="12571939" author="eksdev" created="Sun, 24 Feb 2008 20:16:48 +0000"  >&lt;p&gt;Paul, I think there is one CHEKME in DisjunctionSumScorer I have stumbled upon recently when I realized &lt;br/&gt;
(token1+ token2+) query works way faster than (token1 token2).setMinimumSholdMatch(2). It is not directly related to the &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt;, but just as a reminder. &lt;/p&gt;

&lt;p&gt;also I think there is a hard_to_detect_small_maybe_performance_bug in ConjuctionScorer, :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-comment&quot;&gt;// If first-time skip distance is any predictor of
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// scorer sparseness, then we should always &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; to skip first on
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// those scorers.
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// Keep last scorer in it&apos;s last place (it will be the first
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// to be skipped on), but reverse all of the others so that
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// they will be skipped on in order of original high skip.
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; end=(scorers.length-1)-1;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;(end&amp;gt;&amp;gt;1); i++) {
      Scorer tmp = scorers[i];
      scorers[i] = scorers[end-i];
      scorers[end-i] = tmp;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;It has not been detected so far as it has only performance implications (I think?), and it sometimes works and sometimes not, depending on number of scorers:&lt;/p&gt;

&lt;p&gt;to see what I am talking about, try this &quot;simulator&quot;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] scorers = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[7]; &lt;span class=&quot;code-comment&quot;&gt;//3 and 7 &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not work
&lt;/span&gt;   
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;scorers.length; i++) {
      scorers[i]=i;
    }
   
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(Arrays.toString(scorers));
   
   
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; end=(scorers.length-1)-1;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;(end&amp;gt;&amp;gt;1); i++) {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; tmp = scorers[i];
      scorers[i] = scorers[end-i];
      scorers[end-i] = tmp;
    }

    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(Arrays.toString(scorers));

  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;for 7 you get:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;0, 1, 2, 3, 4, 5, 6&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;5, 4, 2, 3, 1, 0, 6&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;instead of &lt;span class=&quot;error&quot;&gt;&amp;#91;5, 4, 3, 2, 1, 0, 6&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;and for 3&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;0, 1, 2&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;0, 1, 2&amp;#93;&lt;/span&gt; (should be &lt;span class=&quot;error&quot;&gt;&amp;#91;1, 0, 2&amp;#93;&lt;/span&gt;)&lt;/p&gt;
</comment>
                    <comment id="12571951" author="paul.elschot@xs4all.nl" created="Sun, 24 Feb 2008 20:42:22 +0000"  >&lt;p&gt;Eks, &lt;/p&gt;

&lt;p&gt;As both issues you mention are not related to filters, could you open a new issue for each of them?&lt;br/&gt;
For the first issue: iirc BooleanScorer2 will use a ConjunctionScorer in the case when all clauses are actually required in a disjunction, so normal usage via BooleanQuery should not have a performance problem there.&lt;br/&gt;
The second issue is beyond me at the moment.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12571979" author="yseeley@gmail.com" created="Sun, 24 Feb 2008 22:46:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;also I think there is a hard_to_detect_small_maybe_performance_bug in ConjuctionScorer &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yup, I introduced that feature + bug.  I just committed a fix that makes the code do what the comments say (no correctness implications, just perhaps minor performance).&lt;/p&gt;</comment>
                    <comment id="12572669" author="paul.elschot@xs4all.nl" created="Tue, 26 Feb 2008 21:30:02 +0000"  >&lt;p&gt;Attached javadocsZero2Match.patch that replaces the last few occurrences &apos;zero scoring&apos; in the java docs of org.apache.lucene.search by &apos;matching&apos;.&lt;/p&gt;</comment>
                    <comment id="12578525" author="markrmiller@gmail.com" created="Thu, 13 Mar 2008 22:54:15 +0000"  >&lt;p&gt;Test that now fails with ChainedFilter.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be &lt;span class=&quot;code-keyword&quot;&gt;cast&lt;/span&gt; to java.util.BitSet
	at org.apache.lucene.search.CachingWrapperFilter.bits(CachingWrapperFilter.java:55)
	at org.apache.lucene.misc.ChainedFilter.doChain(ChainedFilter.java:258)
	at org.apache.lucene.misc.ChainedFilter.bits(ChainedFilter.java:193)
	at org.apache.lucene.misc.ChainedFilter.bits(ChainedFilter.java:156)
	at org.apache.lucene.search.Filter.getDocIdSet(Filter.java:49)
	at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:141)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                    <comment id="12578626" author="michaelbusch" created="Fri, 14 Mar 2008 07:04:54 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Test that now fails with ChainedFilter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The reason apparently is that the core moved from BitSets to OpenBitSets,&lt;br/&gt;
whereas the contrib packages haven&apos;t.&lt;/p&gt;

&lt;p&gt;If we change the contrib packages to also use OpenBitSets, then this is &lt;br/&gt;
still not completely backwards compatible. For example, if a user upgrades&lt;br/&gt;
to 2.4, uses a ChainedFilter to combine a 2.4 core filter with their own &lt;br/&gt;
custom Filter that is based on 2.3 and thus uses a BitSet, then it won&apos;t&lt;br/&gt;
work. So a simple drop-in replacement with the new lucene jar would not&lt;br/&gt;
be possible, the user would have to change their own filters.&lt;/p&gt;

&lt;p&gt;Maybe we should introduce a DocIdSetFactory in the core? For &lt;br/&gt;
backwards compatibility a factory that produces BitSets can be used,&lt;br/&gt;
for speed one that creates OpenBitSets. Thoughts?&lt;/p&gt;</comment>
                    <comment id="12578656" author="eksdev" created="Fri, 14 Mar 2008 09:06:14 +0000"  >&lt;p&gt;Michael, &lt;br/&gt;
I do not think we need to add Factory (for this particular reason), DocIdSet type should not be assumed as we could come up with smart ways to select optimal Filter representation depending on doc-id distribution, size... &lt;/p&gt;

&lt;p&gt;The only problem we have with is that contrib classes, ChainedFilter and BooleanFilter assume BitSet. &lt;br/&gt;
And the solution for this would be to add just a few methods to the DocIdSet that are able to do AND/OR/NOT on DocIdSet[] using DocIdSetIterator()&lt;br/&gt;
e.g. &lt;br/&gt;
DocIdSet or(DocIdSet[], int minimumShouldMatch);&lt;br/&gt;
DocIdSet or(DocIdSet[]);&lt;/p&gt;


&lt;p&gt;Optimized code for these basic operations &lt;b&gt;already exists&lt;/b&gt;, can be copied from Conjunction/Disjunction/ReqOpt/ReqExcl Scorer classes by just simply stripping-off scoring part.&lt;/p&gt;

&lt;p&gt;with these utility methods in DocIdSet, rewriting ChainedFilter/BooleanFilter to work with DocIdSet (and that works on all implementations of Fileter/DocIdSet) is 10 minutes job... than, if needed this implementation can be  optimized to cover type specific cases. Imo, BoolenFilter is better bet, we do not need both of them.  &lt;/p&gt;

&lt;p&gt;Unfortunately I do not have time to play with it next 3-4 weeks, but should be no more than 2 days work (remember, we have difficult part already done in Scorers). Having so much code duplication is not something really good, but we can then later &quot;merge&quot; these somehow.&lt;/p&gt;</comment>
                    <comment id="12581281" author="paul.elschot@xs4all.nl" created="Sat, 22 Mar 2008 17:42:13 +0000"  >&lt;p&gt;I started adding getDocIdSet() to BooleanFilter of contrib/queries. When trying to collect the interim results into an OpenBitSet I soon needed OpenBitSet.conjunction(DocIdSetIterator), as well as similar disjunction() and exclusion() methods.&lt;/p&gt;

&lt;p&gt;Would it be ok to add such methods to Lucene&apos;s OpenBitSet, or would it be preferable to subclass OpenBitSet for this? At first sight I prefer subclassing, but I&apos;d like to hear some opinions on this before going further.&lt;/p&gt;</comment>
                    <comment id="12581295" author="paul.elschot@xs4all.nl" created="Sat, 22 Mar 2008 21:44:06 +0000"  >&lt;p&gt;The OpenBitSetDISI-20080322.patch illustrates my previous question.&lt;br/&gt;
DISI means DocIdSetIterator, for want of a better name.&lt;br/&gt;
The patch compiles, but is untested.&lt;/p&gt;</comment>
                    <comment id="12581299" author="paul.elschot@xs4all.nl" created="Sat, 22 Mar 2008 22:00:58 +0000"  >&lt;p&gt;For the record: the and() method in the patch misses a last statement: clear(index, size());&lt;/p&gt;
</comment>
                    <comment id="12582045" author="paul.elschot@xs4all.nl" created="Tue, 25 Mar 2008 19:48:11 +0000"  >&lt;p&gt;BooleanFilter20080325.patch contains a non BitSet version of BooleanFilter. The contrib/queries tests pass, and it includes a finished version of OpenBitSetDISI of a few days ago.&lt;br/&gt;
I&apos;ve also changed the indentation of all of BooleanFilter and added some minor refactorings. This makes the patch itself somewhat less easy to read, but I couldn&apos;t leave the indendation in different styles.&lt;/p&gt;</comment>
                    <comment id="12582063" author="paul.elschot@xs4all.nl" created="Tue, 25 Mar 2008 21:35:32 +0000"  >&lt;p&gt;All tests pass, except the one for ChainedFilter provided here by Mark Miller. Stay tuned.&lt;/p&gt;</comment>
                    <comment id="12582073" author="paul.elschot@xs4all.nl" created="Tue, 25 Mar 2008 22:31:18 +0000"  >&lt;p&gt;The Contrib20080325 also includes Mark Miller&apos;s test patch, and a non BitSet version of ChainedFilter. It passes the tests contrib/miscellaneous, no time left to run all tests.&lt;/p&gt;

&lt;p&gt;Contrib20080325.patch should supersede all patches currently here, except the javadoc patch.&lt;/p&gt;

&lt;p&gt;There are no type checks yet to use the inter OpenBitSet boolean operations directly, but at least it should work. Remember to profile before adding such optimisations, for sparse OpenBitSets this could well be competitive. Well, I&apos;d hope so.&lt;/p&gt;</comment>
                    <comment id="12582388" author="paul.elschot@xs4all.nl" created="Wed, 26 Mar 2008 18:23:26 +0000"  >&lt;p&gt;Contrib20080326.patch: supersedes the 20080325 version. Generally the same as yesterday, some extensions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fix a possible synchronisation issue by using a local int&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; array instead of an object int attribute,&lt;/li&gt;
	&lt;li&gt;return a SortedVIntList when it is definitely smaller than an OpenBitSet, the method doing this is protected.&lt;/li&gt;
	&lt;li&gt;all constructors in OpenBitSetDISI now also take a initial size argument&lt;br/&gt;
(still called maxSize, perhaps better renamed to initialSize).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both ChainedFilter and BooleanFilter should work normally, except perhaps using less memory because of the SortedVIntList.&lt;/p&gt;

&lt;p&gt;ChainedFilter still has the 1.1 ASL, it&apos;s probably time to upgrade it, but I did not change it in the patch.&lt;/p&gt;</comment>
                    <comment id="12582414" author="michaelbusch" created="Wed, 26 Mar 2008 20:02:51 +0000"  >&lt;p&gt;Thanks for your patches, Paul. I&apos;ll be traveling the next days, but I&apos;ll try to look at the patches next week.&lt;/p&gt;
</comment>
                    <comment id="12583287" author="paul.elschot@xs4all.nl" created="Sat, 29 Mar 2008 08:36:10 +0000"  >&lt;p&gt;One thing: I added the max size parameter to the OpenBitSetDISI ctor rather late, so there is probably some room to use more of the fast... bit access methods of OpenBitSet.&lt;/p&gt;</comment>
                    <comment id="12592672" author="paul.elschot@xs4all.nl" created="Sun, 27 Apr 2008 20:19:05 +0100"  >&lt;p&gt;Contrib20080427.patch is the same as the previous one from March, except for OpenBitSetDISI: added javadocs there and use fast... bit access methods consistently.&lt;/p&gt;</comment>
                    <comment id="12596546" author="markh" created="Tue, 13 May 2008 23:16:53 +0100"  >&lt;p&gt;Paul,&lt;br/&gt;
Good work.&lt;br/&gt;
Just tried the patch and ran some pre and post-patch benchmarks.&lt;/p&gt;

&lt;p&gt;I wanted to measure the overhead of :&lt;br/&gt;
   the new OpenBitSetDISI.inPlaceOr(DocIdSetIterator) &lt;br/&gt;
vs &lt;br/&gt;
  the previous scheme of BitSet.or(BitSet).&lt;/p&gt;

&lt;p&gt;My test was on the biggest index I have here which was 3 million Wikipedia docs. I had 2 cached TermFilters on very popular terms (500k docs in each) and was measuring the cost of combining these as 2 &quot;shoulds&quot; in a BooleanFilter.&lt;br/&gt;
The expectation was the new scheme would add some overhead in extra method calls.&lt;/p&gt;

&lt;p&gt;The average cost of iterating across BooleanFilter.getDocIdSet() was:&lt;/p&gt;

&lt;p&gt;old BitSet scheme: 78 milliseconds&lt;br/&gt;
new DISI scheme: 156 milliseconds.&lt;/p&gt;

&lt;p&gt;To address this I tried adding this optimisation into BooleanFilter...&lt;/p&gt;

&lt;p&gt;               DocIdSet dis = ((Filter)shouldFilters.get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).getDocIdSet(reader);&lt;br/&gt;
        	if(dis instanceof OpenBitSet)&lt;/p&gt;
        	{
        		res.or((OpenBitSet) dis); // go-faster method
        	}
&lt;p&gt;        	else&lt;/p&gt;
               {
        		res.inPlaceOr(getDISI(shouldFilters, i, reader)); //your patch code
               }
&lt;p&gt;Before I could benchmark this I had to amend TermsFilter to use OpenBitSet rather than plain old BitSet &lt;/p&gt;

&lt;p&gt;avg speed of your patch with OpenBitSet-enabled TermFilter :   100 milliseconds&lt;br/&gt;
avg speed of your patch with OpenBitSet-enabled TermFilter and above optimisation :   70 milliseconds&lt;/p&gt;

&lt;p&gt;I&apos;ll try and post a proper patch when I get more time to look at this...&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Mark&lt;/p&gt;




</comment>
                    <comment id="12596556" author="paul.elschot@xs4all.nl" created="Tue, 13 May 2008 23:54:47 +0100"  >&lt;p&gt;That sounds like the overhead of the DocIdSetIterator is never more than directly using an OpenBitSet in the dense cases that you tested so far (1 in 6 is more than 1 bit per byte).&lt;/p&gt;

&lt;p&gt;That means that a DocIdSetIterator should have acceptable performance in the sparse case when it uses a SortedVIntList underneath. Could you share some test results for sparse cases as well? I&apos;d expect it to outperform OpenBitSet even at CPU time when it is sparse enough.&lt;/p&gt;</comment>
                    <comment id="12598920" author="michaelbusch" created="Thu, 22 May 2008 07:30:39 +0100"  >&lt;p&gt;Good benchmarking, Mark.&lt;/p&gt;

&lt;p&gt;I&apos;m actually wondering about the performance of BooleanFilter, when used&lt;br/&gt;
with a mix of Filters where some use OpenBitSets and others use BitSets.&lt;/p&gt;

&lt;p&gt;This will happen when users upgrade to Lucene 2.4 (core filters use &lt;br/&gt;
OpenBitSets now) and keep using their own custom Filters that use&lt;br/&gt;
BitSets. &lt;/p&gt;

&lt;p&gt;Your patch, Paul, makes this combination possible, and thus guarantees&lt;br/&gt;
backwards-compatibility of BooleanFilter and ChainedFilter, which is &lt;br/&gt;
great! I&apos;m just wondering if those user might encounter bad performance&lt;br/&gt;
surprises?&lt;/p&gt;</comment>
                    <comment id="12598929" author="paul.elschot@xs4all.nl" created="Thu, 22 May 2008 08:08:12 +0100"  >&lt;p&gt;I would not expect bad performance problems mixing OpenBitSet and BitSet for Filters using this patch, although some performance may be lost. However, if a problem surfaces, the solution is to upgrade the existing Filter from BitSet to OpenBitSet, which amounts to the expected work after deprecation of BitSet in Filter.&lt;br/&gt;
A direct implementation of the bit manipulation operations on an OpenBitSet from a BitSet would probably be faster (taking the DocIdSetIterator out of the loop), but at the moment I see no good reason to implement that.&lt;/p&gt;</comment>
                    <comment id="12598931" author="michaelbusch" created="Thu, 22 May 2008 08:16:25 +0100"  >&lt;blockquote&gt;
&lt;p&gt;the solution is to upgrade the existing Filter from BitSet to OpenBitSet, which amounts to the expected work after deprecation of BitSet in Filter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;</comment>
                    <comment id="12598941" author="michaelbusch" created="Thu, 22 May 2008 09:15:49 +0100"  >&lt;p&gt;The patches look good to me, Paul!&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a new file that contains both your patches Contrib20080427.patch&lt;br/&gt;
and  javadocsZero2Match.patch. I also added the optimizations for OpenBitSets&lt;br/&gt;
that Mark suggested to BooleanFilter and ChainedFilter.&lt;br/&gt;
And I added the check (disi.doc() &amp;lt; size()) to OpenBitSetDISI.inPlaceOr() and&lt;br/&gt;
OpenBitSetDISI.inPlaceXor().&lt;/p&gt;

&lt;p&gt;All unit tests pass, however I think they don&apos;t cover all code paths now. We &lt;br/&gt;
should test both the ChainedFilter and the BooleanFilter on OpenBitSet-Filters &lt;br/&gt;
only as well as on combinations of different filters.&lt;/p&gt;

&lt;p&gt;Paul, maybe you can help me with adding those tests? Then I would go ahead&lt;br/&gt;
and commit this patch soon. Otherwise I probably won&apos;t have time before next&lt;br/&gt;
week.&lt;/p&gt;</comment>
                    <comment id="12599062" author="paul.elschot@xs4all.nl" created="Thu, 22 May 2008 16:53:25 +0100"  >&lt;p&gt;With the size tests added in OpenBitSetDISI, the javadocs of the changed methods could also be relaxed.&lt;/p&gt;

&lt;p&gt;The filter tests in the contrib modules misc and queries look fairly complete to me in their current state. Did I overlook anything there? I don&apos;t have a coverage test tool here.&lt;/p&gt;

</comment>
                    <comment id="12599232" author="michaelbusch" created="Thu, 22 May 2008 23:57:23 +0100"  >&lt;p&gt;I added a test helper class called OldBitSetFilterWrapper that helps to&lt;br/&gt;
test compatibility with old filters based on BitSets.&lt;/p&gt;

&lt;p&gt;I changed ChainedFilterTest and BooleanFilterTest to run all tests on&lt;br/&gt;
new (OpenBitSet) and old (BitSet) filters to test both different code paths&lt;br/&gt;
that we have for OpenBitSet and DocIdSetIterator.&lt;/p&gt;

&lt;p&gt;I verified with a code coverage tool that now all those paths are covered&lt;br/&gt;
and all tests pass.&lt;/p&gt;

&lt;p&gt;Would be nice if you could quickly review the patch, Paul. If you&apos;re ok&lt;br/&gt;
with it then I&apos;ll commit it tomorrow.&lt;/p&gt;</comment>
                    <comment id="12599295" author="paul.elschot@xs4all.nl" created="Fri, 23 May 2008 08:33:44 +0100"  >&lt;p&gt;Thanks for the backward compatibility additions in the tests.&lt;/p&gt;

&lt;p&gt;One nice little detail: the patch contains this in OldBitSetFilterWrapper:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;+      BitSet bits = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BitSet(reader.maxDoc());
+      DocIdSetIterator it = filter.getDocIdSet(reader).iterator();
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but I expected:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;BitSet bits = filter.bits(reader); &lt;span class=&quot;code-comment&quot;&gt;// use deprecated method&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On old filters both will versions will work, but the alternative makes it explicit that the filter must be an &apos;old&apos; one. &lt;br/&gt;
Using the deprecated method would have the advantage that it (the whole wrapper class in fact) would &lt;em&gt;have&lt;/em&gt; to be removed in 3.0.&lt;/p&gt;</comment>
                    <comment id="12599298" author="michaelbusch" created="Fri, 23 May 2008 08:44:10 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Using the deprecated method would have the advantage that it (the whole wrapper class in fact) would have to be removed in 3.0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for reviewing! You&apos;re right, I will change it to use the deprecated method and also deprecate the wrapper class itself.&lt;/p&gt;</comment>
                    <comment id="12599479" author="michaelbusch" created="Fri, 23 May 2008 20:27:20 +0100"  >&lt;p&gt;Committed with mentioned changes to OldBitSetFilterWrapper.&lt;/p&gt;

&lt;p&gt;Thanks Paul!&lt;/p&gt;</comment>
                    <comment id="12599481" author="paul.elschot@xs4all.nl" created="Fri, 23 May 2008 20:45:30 +0100"  >&lt;p&gt;I missed TermsFilter initially, so I had another look there. It could use sth like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;   /** Provide a SortedVIntList when it is definitely smaller than an OpenBitSet */
   &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; DocIdSet finalResult(OpenBitSetDISI result, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; maxDocs) {
       &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (result.cardinality() &amp;lt; (maxDocs / 9))
             ? (DocIdSet) &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SortedVIntList(result)
             : (DocIdSet) result;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that would leave three copies this finalResult method in the patch, which is just beyond my refactoring tolerance level.&lt;br/&gt;
Perhaps this method could move to a static method in the o.a.l.search.DocIdSet class under a better name, sth like defaultDocIdSet(), or into a new helper class o.a.l.util.DefaultDocIdSet, to prepare for the availability of better implementations in the future.&lt;/p&gt;
</comment>
                    <comment id="12599483" author="paul.elschot@xs4all.nl" created="Fri, 23 May 2008 20:47:15 +0100"  >&lt;p&gt;And in that case, the first argument could also be changed from OpenBitSetDISI to OpenBitSet.&lt;/p&gt;</comment>
                    <comment id="12599489" author="michaelbusch" created="Fri, 23 May 2008 21:11:14 +0100"  >&lt;p&gt;Do we actually know about the performance of SortedVIntList?&lt;/p&gt;

&lt;p&gt;I&apos;m a little worried, because it doesn&apos;t have a skip list.&lt;/p&gt;</comment>
                    <comment id="12599492" author="paul.elschot@xs4all.nl" created="Fri, 23 May 2008 21:15:47 +0100"  >&lt;p&gt;OpenBitSet does not have a skip list either, so I&apos;d expect SortedVIntList to be faster when the underlying set is sparse enough.&lt;/p&gt;

&lt;p&gt;As I missed the commit, I&apos;ll provide a patch for my latest comments in the next few days. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12599497" author="michaelbusch" created="Fri, 23 May 2008 21:29:52 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;ll provide a patch for my latest comments in the next few days&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good!&lt;/p&gt;</comment>
                    <comment id="12599709" author="paul.elschot@xs4all.nl" created="Sun, 25 May 2008 19:56:23 +0100"  >&lt;p&gt;While considering DefaultDocIdSet as a class, I thought that perhaps a better way would be to add a method to class Filter that takes the usual DocIdSet and provides the DocIdSet that should be used for caching, for example in CachingWrapperFilter. Sth like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class Filter {
  ... the &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; bits() deprecated method ... ;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DocIdSet getDocIdSet(IndexReader reader) {
    &lt;span class=&quot;code-comment&quot;&gt;// unchanged implementation &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; now. to become &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; later.
&lt;/span&gt;  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DocIdSet getDocIdSetForCache(IndexReader reader) {
    &lt;span class=&quot;code-comment&quot;&gt;// Use a &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; implementation here that provides a tradeoff &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; caching,
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// fairly compact when possible, but still fast.
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// For the moment &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; could be close to the code of the finalResult() method
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// mentioned above:
&lt;/span&gt;    DocIdSet result = getDocIdSet(reader);
   
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(result &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SortedVIntList)) 
                and (result.cardinality() &amp;lt; (reader.maxDoc() / 9))) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SortedVIntList(result);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(One minor problem with this is that DocIdSet does not have a cardinality() method&lt;br/&gt;
and that SortedVIntList does not have a constructor for a DocIdSet.)&lt;/p&gt;

&lt;p&gt;The question is: how about adding such a getDocIdSetForCache() method to Filter?&lt;br/&gt;
Or is there a better place for this functionality, for example in CachingWrapperFilter?&lt;/p&gt;</comment>
                    <comment id="12600798" author="paul.elschot@xs4all.nl" created="Thu, 29 May 2008 16:22:46 +0100"  >&lt;p&gt;As this has had some time so settle, I think the cache should decide what it wants to store.&lt;br/&gt;
That means I&apos;m in favour of changing CachingWrapperFilter to let it decide which DocIdSet implementation to cache, sth. like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; DocIdSet docIdSetToCache(DocIdSet dis) { ... }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where dis is the result of getDocIdSet(reader) on the wrapped Filter.&lt;br/&gt;
At the same time the protected finalResult() methods in the contrib code could be removed.&lt;/p&gt;

&lt;p&gt;Comments?&lt;/p&gt;</comment>
                    <comment id="12600829" author="michaelbusch" created="Thu, 29 May 2008 17:45:38 +0100"  >&lt;p&gt;Sounds good to me Paul.&lt;/p&gt;

&lt;p&gt;Could you open a separate issue and attach a patch?&lt;/p&gt;</comment>
                    <comment id="12600906" author="paul.elschot@xs4all.nl" created="Thu, 29 May 2008 21:11:49 +0100"  >&lt;p&gt;After the commit here, I&apos;m opening a new issue for filter caching.&lt;/p&gt;</comment>
                    <comment id="12602031" author="paul.elschot@xs4all.nl" created="Tue, 3 Jun 2008 20:08:51 +0100"  >&lt;p&gt;Just to be complete, the new issue for filter caching is &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1296&quot; title=&quot;Allow use of compact DocIdSet in CachingWrapperFilter&quot;&gt;&lt;del&gt;LUCENE-1296&lt;/del&gt;&lt;/a&gt; &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12378589" name="BooleanFilter20080325.patch" size="17485" author="paul.elschot@xs4all.nl" created="Tue, 25 Mar 2008 19:48:11 +0000" />
                    <attachment id="12377842" name="ChainedFilterAndCachingFilterTest.patch" size="2190" author="markrmiller@gmail.com" created="Thu, 13 Mar 2008 22:54:15 +0000" />
                    <attachment id="12378594" name="Contrib20080325.patch" size="26449" author="paul.elschot@xs4all.nl" created="Tue, 25 Mar 2008 22:31:18 +0000" />
                    <attachment id="12378654" name="Contrib20080326.patch" size="27431" author="paul.elschot@xs4all.nl" created="Wed, 26 Mar 2008 18:23:26 +0000" />
                    <attachment id="12380999" name="Contrib20080427.patch" size="28828" author="paul.elschot@xs4all.nl" created="Sun, 27 Apr 2008 20:19:05 +0100" />
                    <attachment id="12376550" name="javadocsZero2Match.patch" size="2410" author="paul.elschot@xs4all.nl" created="Tue, 26 Feb 2008 21:30:02 +0000" />
                    <attachment id="12382611" name="lucene-1187.patch" size="49172" author="michaelbusch" created="Thu, 22 May 2008 23:57:23 +0100" />
                    <attachment id="12382542" name="lucene-1187.patch" size="32771" author="michaelbusch" created="Thu, 22 May 2008 09:15:49 +0100" />
                    <attachment id="12378442" name="OpenBitSetDISI-20080322.patch" size="1979" author="paul.elschot@xs4all.nl" created="Sat, 22 Mar 2008 21:44:06 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>9.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 24 Feb 2008 20:16:48 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12558</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26542</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>