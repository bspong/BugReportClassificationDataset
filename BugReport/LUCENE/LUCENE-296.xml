<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:16:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-296/LUCENE-296.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-296] [PATCH] FuzzyTermEnum optimization and refactor</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-296</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I took a look at it to see if it could be improved.  I saw speed improvements of&lt;br/&gt;
20% - 40% by making a couple changes.  &lt;/p&gt;

&lt;p&gt;The patch is here: &lt;a href=&quot;http://www.hagerfamily.com/patches/FuzzyTermEnumOptimizePatch.txt&quot; class=&quot;external-link&quot;&gt;http://www.hagerfamily.com/patches/FuzzyTermEnumOptimizePatch.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Patch is based on the HEAD of the CVS tree as of Oct 22, 2004.&lt;/p&gt;

&lt;p&gt;What Changed?&lt;/p&gt;

&lt;p&gt;Since the word was discarded if the edit distance for the word was&lt;br/&gt;
above a certain threshold, I updated the distance algorithm to abort&lt;br/&gt;
if at any time during the calculation it is determined that the best&lt;br/&gt;
possible outcome of the edit distance algorithm is above this&lt;br/&gt;
threshold.  The source code has a great explanation.&lt;/p&gt;

&lt;p&gt;I also reduced the amount of floating point math, reduced the amount&lt;br/&gt;
of potential space the array takes in its first dimension, removed the&lt;br/&gt;
potential divide by 0 error when one term is an empty string, and&lt;br/&gt;
fixed a bug where an IllegalArgumentException was thrown if the class&lt;br/&gt;
was somehow initialized wrong, instead of looking at the arguments.&lt;/p&gt;

&lt;p&gt;The behavior is almost identical.  The exception is that similarity is&lt;br/&gt;
set to 0.0 when it is guaranteed to be below the minimum similarity.&lt;/p&gt;

&lt;p&gt;Results&lt;/p&gt;

&lt;p&gt;I saw the biggest improvement from longer words, which makes a sense.&lt;br/&gt;
My long word was &quot;bridgetown&quot; and I saw a 60% improvement on this.&lt;br/&gt;
The biggest improvement are for words that are farthest away from the&lt;br/&gt;
median length of the words in the index.  Short words (1-3 characters)&lt;br/&gt;
saw a 30% improvement.  Medium words saw a 10% improvement (5-7&lt;br/&gt;
characters).  These improvements are with the prefix set to 0.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: All&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
            <key id="12314446">LUCENE-296</key>
            <summary>[PATCH] FuzzyTermEnum optimization and refactor</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="java-dev@lucene.apache.org">Lucene Developers</assignee>
                                <reporter username="jhager@gmail.com">Jonathan Hager</reporter>
                        <labels>
                    </labels>
                <created>Tue, 26 Oct 2004 00:28:32 +0100</created>
                <updated>Thu, 2 Jun 2011 23:03:32 +0100</updated>
                    <resolved>Sat, 27 May 2006 02:38:40 +0100</resolved>
                                                            <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322001" author="daniel.naber@t-online.de" created="Wed, 27 Oct 2004 05:57:33 +0100"  >&lt;p&gt;The &quot;synchronized&quot; for the similarity() method should no be necessary, should &lt;br/&gt;
it? &lt;/p&gt;

&lt;p&gt;I tried modifying the value of TYPICAL_LONGEST_WORD_IN_INDEX (e.g. to 1 or to &lt;br/&gt;
100) and I didn&apos;t see any real difference. Are you sure this particular &lt;br/&gt;
optimization is useful? &lt;/p&gt;

&lt;p&gt;As I mentioned, the speedup of all changes together is 20-40% in my short &lt;br/&gt;
tests, so I&apos;m sure this patch will be committed sooner or later. &lt;/p&gt;
</comment>
                    <comment id="12322002" author="jhager@gmail.com" created="Wed, 27 Oct 2004 06:58:20 +0100"  >&lt;p&gt;The &quot;synchronized&quot; was added to the similarity() because it uses the d[][]&lt;br/&gt;
across calls to it.  If similarity() was called on the SAME FuzzyTermEnum object&lt;br/&gt;
by two different threads, the results could not be guaranteed.  How lucene uses&lt;br/&gt;
FuzzyTermEnum, this will never happen.  Currently, Lucene creates it and let&apos;s&lt;br/&gt;
it be garbage collected within a single method.  This is more defensive&lt;br/&gt;
programming than anything else.&lt;/p&gt;

&lt;p&gt;The TYPICAL_LONGEST_WORD_IN_INDEX is used in two different context.  The first&lt;br/&gt;
context is to initializing the d[][] to something smarter than &lt;span class=&quot;error&quot;&gt;&amp;#91;x&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.  It&lt;br/&gt;
should save very little time as d[][] will quickly grow to the appropriate size.&lt;br/&gt;
 The second context is to create a lookup table for the max distance, so that it&lt;br/&gt;
does not have to recalculate what the max distance is for every word.  The max&lt;br/&gt;
distance is a constant for every word of the same length.  I also only saw&lt;br/&gt;
marginal gain from this change.  &lt;/p&gt;

&lt;p&gt;I went back to estimate the acutal amount of time saved from this change in&lt;br/&gt;
isolation.  On a modern machine, it is less than 200ms for 10 million words (see&lt;br/&gt;
test below).  &lt;/p&gt;

&lt;p&gt;public class Scratch&lt;br/&gt;
{&lt;br/&gt;
  private static final int TYPICAL_LONGEST_WORD_IN_INDEX = 19;&lt;br/&gt;
  private static final float[] TYPICAL_WORD_LENGTH_DISTRIBUTION = &lt;/p&gt;
{
   0, 0.01f, 0.015f, 0.025f, 0.05f, 0.10f, 0.125f, 0.15f, 0.155f, 0.12f, 0.10f,
0.07f, 0.04f, 0.015f, 0.010f, 0.005f, 0.005f, 0.005f
  }
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;  private final int[] maxDistances = new int&lt;span class=&quot;error&quot;&gt;&amp;#91;TYPICAL_LONGEST_WORD_IN_INDEX&amp;#93;&lt;/span&gt;;&lt;/p&gt;

&lt;p&gt;  public Scratch()&lt;br/&gt;
  {&lt;br/&gt;
    for (int i = 0; i &amp;lt; maxDistances.length; i++)&lt;/p&gt;
    {
      maxDistances[i] = calculateMaxDistance(i);
    }
&lt;p&gt;  }&lt;/p&gt;

&lt;p&gt;  private final int getMaxDistance(int m)&lt;/p&gt;
{
    return (m &amp;lt; maxDistances.length) ? maxDistances[m] : calculateMaxDistance(m);
  }

&lt;p&gt;  private int calculateMaxDistance(int m)&lt;/p&gt;
{
    return (int) ((1-0.5) * (Math.min(7, m) + 0));
  }

&lt;p&gt;  public static void main(String[] args)&lt;br/&gt;
  {    &lt;br/&gt;
    long start = System.currentTimeMillis();&lt;br/&gt;
    Scratch s = new Scratch();&lt;br/&gt;
    final int totalNumberOfRuns = 10000000;&lt;br/&gt;
    for (int i = 0; i &amp;lt; TYPICAL_WORD_LENGTH_DISTRIBUTION.length; i++)&lt;br/&gt;
    {&lt;br/&gt;
      float v = TYPICAL_WORD_LENGTH_DISTRIBUTION&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
      final int runsForASingleLength = (int) (v * totalNumberOfRuns);&lt;br/&gt;
      //System.out.println(runsForASingleLength);&lt;br/&gt;
      for (int j=0; j &amp;lt; runsForASingleLength; j++) &lt;/p&gt;
{
        s.getMaxDistance(i);
      }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    long total = System.currentTimeMillis() - start;&lt;/p&gt;

&lt;p&gt;    System.out.println(&quot;Time to lookup the records (in ms): &quot; + total);&lt;/p&gt;

&lt;p&gt;    long start2 = System.currentTimeMillis();&lt;/p&gt;

&lt;p&gt;    for (int i = 0; i &amp;lt; TYPICAL_WORD_LENGTH_DISTRIBUTION.length; i++)&lt;br/&gt;
    {&lt;br/&gt;
      float v = TYPICAL_WORD_LENGTH_DISTRIBUTION&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;;&lt;br/&gt;
      final int runsForASingleLength = (int) (v * totalNumberOfRuns);&lt;br/&gt;
      for (int j=0; j &amp;lt; runsForASingleLength; j++) &lt;/p&gt;
{
        s.calculateMaxDistance(i);
      }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;     long total2 = System.currentTimeMillis() - start2;&lt;/p&gt;

&lt;p&gt;    System.out.println(&quot;Time to recalculate the records (in ms): &quot; + total2);&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;}&lt;/p&gt;</comment>
                    <comment id="12322003" author="goller@detego-software.de" created="Fri, 29 Oct 2004 00:21:32 +0100"  >&lt;p&gt;The following observation should not get lost:&lt;/p&gt;

&lt;p&gt;In his original mail Jonathan also mentioned that currently similarity&lt;br/&gt;
may be below 0.0f. A possible fix, if this should be fixed, would be to relate&lt;br/&gt;
the Levenstein distance to the maximum of the two length values instead of the&lt;br/&gt;
minimum.&lt;/p&gt;</comment>
                    <comment id="12322004" author="daniel.naber@t-online.de" created="Mon, 8 Nov 2004 07:39:53 +0000"  >&lt;p&gt;Thanks, your patch has now been applied. I didn&apos;t do anything about that &lt;br/&gt;
&quot;similarity can be less than 0&quot; issue. If anybody considers that a problem, &lt;br/&gt;
please let us know and open a separate issue. &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>31882</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 27 Oct 2004 04:57:33 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13453</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27435</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>