<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3801/LUCENE-3801.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3801] Generify FST shortestPaths() to take a comparator</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3801</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Not sure we should do this, it costs 5-10% performance for WFSTSuggester.&lt;br/&gt;
But maybe we can optimize something here, or maybe its just no big deal to us.&lt;/p&gt;

&lt;p&gt;Because in general, this could be pretty powerful, e.g. if you needed to store &lt;br/&gt;
some custom stuff in the suggester, you could use pairoutputs, or whatever.&lt;/p&gt;

&lt;p&gt;And the possibility we might need shortestPaths for other cool things... at the&lt;br/&gt;
least I just wanted to have the patch up here.&lt;/p&gt;

&lt;p&gt;I haven&apos;t tested this on pairoutputs... but i&apos;ve tested it with e.g. FloatOutputs&lt;br/&gt;
and other things and it works fine.&lt;/p&gt;

&lt;p&gt;I tried to minimize the generics violations, there is only 1 (cannot create generic array).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12543276">LUCENE-3801</key>
            <summary>Generify FST shortestPaths() to take a comparator</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sun, 19 Feb 2012 20:34:51 +0000</created>
                <updated>Fri, 10 May 2013 11:43:36 +0100</updated>
                    <resolved>Fri, 2 Mar 2012 15:18:07 +0000</resolved>
                            <version>3.6</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/FSTs</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13211541" author="rcmuir" created="Sun, 19 Feb 2012 20:35:31 +0000"  >&lt;p&gt;here&apos;s my patch, again for what its worth.&lt;/p&gt;</comment>
                    <comment id="13219852" author="rcmuir" created="Thu, 1 Mar 2012 06:50:56 +0000"  >&lt;p&gt;looking at the benchmarks again: I think there is an &quot;off-by-a-factor-of-one-thousand&quot; on the benchmark.&lt;/p&gt;

&lt;p&gt;I could not for the life of me figure out why these suggesters would have e.g. 220QPS, but I think instead&lt;br/&gt;
that the benchmark is wrong. So 200,000-210,000QPS compared to 220,000QPS really cannot matter!&lt;/p&gt;

&lt;p&gt;If the benchmark can really satisfy 50000 queries in 220 ms, thats no 226QPS!&lt;/p&gt;

&lt;p&gt;I&apos;ll come back with a PairOutputs test in a bit to confirm the functionality but I&apos;m not going to worry&lt;br/&gt;
about 5%/10% performance here, thats crazy.&lt;/p&gt;</comment>
                    <comment id="13220868" author="rcmuir" created="Fri, 2 Mar 2012 12:21:47 +0000"  >&lt;p&gt;updated patch with tests (which exposes a real problem!).&lt;/p&gt;

&lt;p&gt;I created &quot;paired&quot; versions (Pair&amp;lt;Long,Long&amp;gt; where its weight,output) of the two existing shortestPath tests: the simple one, and the random one. The simple one passes (somehow), but the random one triggers an assertion in shortestPaths&lt;/p&gt;

&lt;p&gt;Basically the issue is that the original impl has an optimization: when you pick some minimum path (say 5), you know there is sequence of all zeros leading to some final state, otherwise its not actually the minimum &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The code takes advantage of this and (fortunately) asserts that it finds this path of all NO_OUTPUTs. &lt;/p&gt;

&lt;p&gt;The problem is if you have a PairOutputs(weight,output), its only NO_OUTPUT if &lt;b&gt;both&lt;/b&gt; weight and output are also NO_OUTPUT, but this only holds true for the weight... the output has its own separately pushed minimums that don&apos;t necessarily correspond...&lt;/p&gt;
</comment>
                    <comment id="13220874" author="rcmuir" created="Fri, 2 Mar 2012 12:29:10 +0000"  >&lt;p&gt;I think this might not be hard to fix, consider my comparator:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// compares just the weight side of the pair
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Comparator&amp;lt;Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;&amp;gt; minPairWeightComparator = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Comparator&amp;lt;Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;&amp;gt; () {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; left, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt; right) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; left.output1.compareTo(right.output1);
  }  
};
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Instead of looking for a NO_OUTPUT path, I think we should instead express &quot;output == NO_OUTPUT&quot; as &quot;comparator.compare(previousOutput, outputs.add(previousOutput, output)) == 0&quot;,&lt;br/&gt;
Ill rerun benchmarks but i don&apos;t think this will hurt.&lt;/p&gt;</comment>
                    <comment id="13220883" author="rcmuir" created="Fri, 2 Mar 2012 12:45:49 +0000"  >&lt;p&gt;updated patch, instead of looking for &apos;output == 0&apos; using the &apos;previousOutput + output == previousOutput&apos; via the comparator.&lt;/p&gt;

&lt;p&gt;random test passes now&lt;/p&gt;</comment>
                    <comment id="13220902" author="rcmuir" created="Fri, 2 Mar 2012 13:10:18 +0000"  >&lt;p&gt;I think this patch is ready to commit, but the tricky FST math there (compare + add) does add some additional cost.&lt;/p&gt;

&lt;p&gt;Still, I think 180,000QPS versus 210,000QPS or whatever, who cares. Being able to separately have weights and outputs and&lt;br/&gt;
do shortest path operations on just the weight side (with any Outputs representation) is really powerful and I think we can&lt;br/&gt;
use it to improve our suggesters.&lt;/p&gt;

&lt;p&gt;Benchmarks are all in QPS with a top-N of 7 suggestions (50,000 inputs)&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;impl&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 2-4&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 6-9&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 100-200&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Jaspell&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;129,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;330,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;436,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;TST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;31,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;258,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;820,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;FST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;330,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;263,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;269,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;WFST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;209,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;606,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;781,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;WFST-Generic&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;179,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;521,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;708,000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I&apos;ll wait a bit in case someone wants to review or knows of ways to speed up the patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13220905" author="rcmuir" created="Fri, 2 Mar 2012 13:14:48 +0000"  >&lt;p&gt;Hmm actually, i think we can speed this up a little bit if we re-arrange stuff in the addIfCompetitive?&lt;br/&gt;
Currently this patch causes us to &apos;add twice&apos; (once for the A + B = A stuff, and then again in addIfCompetitive!)&lt;/p&gt;</comment>
                    <comment id="13220909" author="cm" created="Fri, 2 Mar 2012 13:21:43 +0000"  >&lt;p&gt;If it&apos;s possible to speed things up, that&apos;s great.  Regardless, I think the flexibility vs. speed trade-off you are proposing here is a very good idea.  Powerful stuff, indeed.  +1.&lt;/p&gt;</comment>
                    <comment id="13220915" author="rcmuir" created="Fri, 2 Mar 2012 13:33:27 +0000"  >&lt;p&gt;yeah as an example use case we could use Pair&amp;lt;weight,originalText&amp;gt; as an &apos;output&apos; but &lt;br/&gt;
store the kuromoji-generated readings as the input side for japanese text, we would&lt;br/&gt;
just analyze the japanese input to a reading at query-time too and I think it would work...&lt;/p&gt;</comment>
                    <comment id="13220919" author="cm" created="Fri, 2 Mar 2012 13:45:15 +0000"  >&lt;p&gt;Exactly.  If we match on normalized forms that also deal with the combined scripts users would use when they type in Japanese queries, i.e. &#12411;&#12387;k to get &#21271;&#28023;&#36947; (Hokkaido) suggested, I think we have a good starting point to build a Japanese query suggester/autocompleter.&lt;/p&gt;</comment>
                    <comment id="13220924" author="mikemccand" created="Fri, 2 Mar 2012 13:47:51 +0000"  >&lt;p&gt;I think instead of per-arc add (to find the NO_OUTPUT arc) you can just do comparator.compare(arc.output, NO_OUTPUT) == 0.&lt;/p&gt;

&lt;p&gt;Otherwise patch looks great!  I think the perf loss if acceptable...&lt;/p&gt;

&lt;p&gt;Very exciting!&lt;/p&gt;</comment>
                    <comment id="13220929" author="rcmuir" created="Fri, 2 Mar 2012 13:53:08 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think instead of per-arc add (to find the NO_OUTPUT arc) you can just do comparator.compare(arc.output, NO_OUTPUT) == 0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have no idea what I was thinking... this is why we have code reviews i guess &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Ill upload a new patch with new benchmarks.&lt;/p&gt;</comment>
                    <comment id="13220967" author="rcmuir" created="Fri, 2 Mar 2012 14:47:06 +0000"  >&lt;p&gt;updated patch with mike&apos;s idea.&lt;/p&gt;

&lt;p&gt;this wins some perf back:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;impl&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 2-4&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 6-9&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixes 100-200&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Jaspell&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;129,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;330,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;436,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;TST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;31,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;258,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;820,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;FST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;330,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;263,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;269,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;WFST&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;209,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;606,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;781,000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;WFST-Generic&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;190,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;550,000&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;765,000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I think this is ok... I&apos;ll commit soon.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12516841" name="LUCENE-3801.patch" size="23300" author="rcmuir" created="Fri, 2 Mar 2012 14:47:06 +0000" />
                    <attachment id="12516830" name="LUCENE-3801.patch" size="23504" author="rcmuir" created="Fri, 2 Mar 2012 12:45:49 +0000" />
                    <attachment id="12516824" name="LUCENE-3801.patch" size="22462" author="rcmuir" created="Fri, 2 Mar 2012 12:21:47 +0000" />
                    <attachment id="12515191" name="LUCENE-3801.patch" size="15013" author="rcmuir" created="Sun, 19 Feb 2012 20:35:31 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 2 Mar 2012 13:21:43 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>228523</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23898</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>