<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:59:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-969/LUCENE-969.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-969] Optimize the core tokenizers/analyzers &amp; deprecate Token.termText</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-969</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;There is some &quot;low hanging fruit&quot; for optimizing the core tokenizers&lt;br/&gt;
and analyzers:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Re-use a single Token instance during indexing instead of creating&lt;br/&gt;
    a new one for every term.  To do this, I added a new method &quot;Token&lt;br/&gt;
    next(Token result)&quot; (Doron&apos;s suggestion) which means TokenStream&lt;br/&gt;
    may use the &quot;Token result&quot; as the returned Token, but is not&lt;br/&gt;
    required to (ie, can still return an entirely different Token if&lt;br/&gt;
    that is more convenient).  I added default implementations for&lt;br/&gt;
    both next() methods in TokenStream.java so that a TokenStream can&lt;br/&gt;
    choose to implement only one of the next() methods.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use &quot;char[] termBuffer&quot; in Token instead of the &quot;String&lt;br/&gt;
    termText&quot;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;    Token now maintains a char[] termBuffer for holding the term&apos;s&lt;br/&gt;
    text.  Tokenizers &amp;amp; filters should retrieve this buffer and&lt;br/&gt;
    directly alter it to put the term text in or change the term&lt;br/&gt;
    text.&lt;/p&gt;

&lt;p&gt;    I only deprecated the termText() method.  I still allow the ctors&lt;br/&gt;
    that pass in String termText, as well as setTermText(String), but&lt;br/&gt;
    added a NOTE about performance cost of using these methods.  I&lt;br/&gt;
    think it&apos;s OK to keep these as convenience methods?&lt;/p&gt;

&lt;p&gt;    After the next release, when we can remove the deprecated API, we&lt;br/&gt;
    should clean up Token.java to no longer maintain &quot;either String or&lt;br/&gt;
    char[]&quot; (and the initTermBuffer() private method) and always use&lt;br/&gt;
    the char[] termBuffer instead.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Re-use TokenStream instances across Fields &amp;amp; Documents instead of&lt;br/&gt;
    creating a new one for each doc.  To do this I added an optional&lt;br/&gt;
    &quot;reusableTokenStream(...)&quot; to Analyzer which just defaults to&lt;br/&gt;
    calling tokenStream(...), and then I implemented this for the core&lt;br/&gt;
    analyzers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m using the patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-967&quot; title=&quot;Add &amp;quot;tokenize documents only&amp;quot; task to contrib/benchmark&quot;&gt;&lt;del&gt;LUCENE-967&lt;/del&gt;&lt;/a&gt; for benchmarking just&lt;br/&gt;
tokenization.&lt;/p&gt;

&lt;p&gt;The changes above give 21% speedup (742 seconds -&amp;gt; 585 seconds) for&lt;br/&gt;
LowerCaseTokenizer -&amp;gt; StopFilter -&amp;gt; PorterStemFilter chain, tokenizing&lt;br/&gt;
all of Wikipedia, on JDK 1.6 -server -Xmx1024M, Debian Linux, RAID 5&lt;br/&gt;
IO system (best of 2 runs).&lt;/p&gt;

&lt;p&gt;If I pre-break Wikipedia docs into 100 token docs then it&apos;s 37% faster&lt;br/&gt;
(1236 sec -&amp;gt; 774 sec), I think because of re-using TokenStreams across&lt;br/&gt;
docs.&lt;/p&gt;

&lt;p&gt;I&apos;m just running with this alg and recording the elapsed time:&lt;/p&gt;

&lt;p&gt;  analyzer=org.apache.lucene.analysis.LowercaseStopPorterAnalyzer&lt;br/&gt;
  doc.tokenize.log.step=50000&lt;br/&gt;
  docs.file=/lucene/wikifull.txt&lt;br/&gt;
  doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker&lt;br/&gt;
  doc.tokenized=true&lt;br/&gt;
  doc.maker.forever=false&lt;/p&gt;

&lt;p&gt;  {ReadTokens &amp;gt; : *&lt;/p&gt;

&lt;p&gt;See this thread for discussion leading up to this:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-dev/51283&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-dev/51283&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also fixed Token.toString() to work correctly when termBuffer is&lt;br/&gt;
used (and added unit test).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12374950">LUCENE-969</key>
            <summary>Optimize the core tokenizers/analyzers &amp; deprecate Token.termText</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Mon, 30 Jul 2007 13:40:22 +0100</created>
                <updated>Fri, 25 Jan 2008 03:24:02 +0000</updated>
                    <resolved>Sat, 11 Aug 2007 13:17:58 +0100</resolved>
                            <version>2.3</version>
                                <fixVersion>2.3</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12516374" author="mikemccand" created="Mon, 30 Jul 2007 13:42:00 +0100"  >&lt;p&gt;First-cut patch.  All tests pass.  I still need do fix some javadocs&lt;br/&gt;
but otherwise I think this is close...&lt;/p&gt;</comment>
                    <comment id="12516510" author="michaelbusch" created="Mon, 30 Jul 2007 21:11:25 +0100"  >&lt;p&gt;Hi Mike,&lt;/p&gt;

&lt;p&gt;this is just an idea to keep Token.java simpler, but I haven&apos;t really thought about all the consequences. So feel free to tell me that it&apos;s a bad idea &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Could you add a new class TermBuffer including the char[] array and your resize() logic that would implement CharSequence? Then you could get rid of the duplicate constructors and setters for String and char[], because String also implements CharSequence. And CharSequence has the method charAt(int index), so it should be almost as fast as directly accessing the char array in case the TermBuffer is used. You would need to change the existing constructors and setter to take a CharSequence object instead of a String, but this is not an API change as users can still pass in a String object. And then you would just need to add a new constructor with offset and length and a similiar setter. Thoughts?&lt;/p&gt;</comment>
                    <comment id="12516517" author="yseeley@gmail.com" created="Mon, 30 Jul 2007 21:50:41 +0100"  >&lt;p&gt;&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt; implement CharSequence&lt;br/&gt;
I think CharSequence is Java5&lt;/p&gt;</comment>
                    <comment id="12516524" author="steve_rowe" created="Mon, 30 Jul 2007 22:01:00 +0100"  >&lt;p&gt;CharSequence was introduced in 1.4: &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/CharSequence.html&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/lang/CharSequence.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12516670" author="mikemccand" created="Tue, 31 Jul 2007 11:21:42 +0100"  >&lt;p&gt;&amp;gt; Could you add a new class TermBuffer including the char[] array and&lt;br/&gt;
&amp;gt; your resize() logic that would implement CharSequence? Then you&lt;br/&gt;
&amp;gt; could get rid of the duplicate constructors and setters for String&lt;br/&gt;
&amp;gt; and char[], because String also implements CharSequence. And&lt;br/&gt;
&amp;gt; CharSequence has the method charAt(int index), so it should be&lt;br/&gt;
&amp;gt; almost as fast as directly accessing the char array in case the&lt;br/&gt;
&amp;gt; TermBuffer is used. You would need to change the existing&lt;br/&gt;
&amp;gt; constructors and setter to take a CharSequence object instead of a&lt;br/&gt;
&amp;gt; String, but this is not an API change as users can still pass in a&lt;br/&gt;
&amp;gt; String object. And then you would just need to add a new constructor&lt;br/&gt;
&amp;gt; with offset and length and a similiar setter. Thoughts?&lt;/p&gt;

&lt;p&gt;If I understand this, consumers of the Token API would need to&lt;br/&gt;
separately construct/reuse their own TermBuffer in order to then set&lt;br/&gt;
the Token to new text?  This could then slow down applications that&lt;br/&gt;
still need to make a new Token instance for every term in their&lt;br/&gt;
documents because now 2 class instances would be created for every&lt;br/&gt;
token.&lt;/p&gt;

&lt;p&gt;Also I don&apos;t think this would make the public API simpler?  People&lt;br/&gt;
already understand String and char[] as normal ways to represent text&lt;br/&gt;
content; if we add our own new class here that&apos;s another&lt;br/&gt;
Lucene-specific way to represent text content that people will have to&lt;br/&gt;
learn.&lt;/p&gt;

&lt;p&gt;Internally, Token looks more complex than it will be in the future,&lt;br/&gt;
just because we need the initTermBuffer() calls until we can remove&lt;br/&gt;
the deprecated attr (String termText) and method (termText()).&lt;/p&gt;

&lt;p&gt;I believe having String and char[] variants of text-processing APIs is&lt;br/&gt;
fairly common practice and is reasonable.  EG the PorterStemmer has 4&lt;br/&gt;
&quot;stem&quot; methods (one accepting String and 3 accepting char[] with or&lt;br/&gt;
without offset/length).&lt;/p&gt;</comment>
                    <comment id="12516792" author="michaelbusch" created="Tue, 31 Jul 2007 20:55:53 +0100"  >&lt;p&gt;&amp;gt; This could then slow down applications that still need to make a &lt;br/&gt;
&amp;gt; new Token instance for every term in their documents because now &lt;br/&gt;
&amp;gt; 2 class instances would be created for every token.&lt;/p&gt;

&lt;p&gt;Yes that&apos;s true. I was thinking that in the new optimized way, where&lt;br/&gt;
people reuse the same Token and char[] instance, this wouldn&apos;t harm&lt;br/&gt;
since TermBuffer would basically just be a wrapper around a char &lt;br/&gt;
array. But you are right, this would be an overhead in apps that &lt;br/&gt;
can&apos;t reuse the Tokens.&lt;/p&gt;

&lt;p&gt;&amp;gt; if we add our own new class here that&apos;s another&lt;br/&gt;
&amp;gt; Lucene-specific way to represent text content that people will have to&lt;br/&gt;
&amp;gt; learn.&lt;/p&gt;

&lt;p&gt;Agree. I was just thinking that the CharSequence approach would reduce the &lt;br/&gt;
number of setters and constructors, but you&apos;re right, we&apos;re going to remove &lt;br/&gt;
the ones that take Strings anyway in a future version. &lt;/p&gt;

&lt;p&gt;OK, the API of this patch looks good to me! +1&lt;br/&gt;
Thanks for your detailed answer!&lt;/p&gt;</comment>
                    <comment id="12517102" author="mikemccand" created="Wed, 1 Aug 2007 23:50:42 +0100"  >&lt;p&gt;Updated patch based on recent commits; fixed up the javadocs and a few&lt;br/&gt;
other small things.  I think this is ready to commit but I&apos;ll wait a&lt;br/&gt;
few days for more comments...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12362766" name="LUCENE-969.patch" size="59855" author="mikemccand" created="Mon, 30 Jul 2007 13:42:00 +0100" />
                    <attachment id="12363010" name="LUCENE-969.take2.patch" size="63547" author="mikemccand" created="Wed, 1 Aug 2007 23:50:41 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 30 Jul 2007 20:11:25 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12774</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26760</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>