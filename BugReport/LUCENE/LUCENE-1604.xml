<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:23 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1604/LUCENE-1604.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1604] Stop creating huge arrays to represent the absense of field norms</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1604</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Creating and keeping around huge arrays that hold a constant value is very inefficient both from a heap usage standpoint and from a localility of reference standpoint. It would be much more efficient to use null to represent a missing norms table.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12422812">LUCENE-1604</key>
            <summary>Stop creating huge arrays to represent the absense of field norms</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="svella">Shon Vella</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Apr 2009 18:22:06 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:22 +0100</updated>
                    <resolved>Tue, 28 Apr 2009 21:39:11 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12698839" author="svella" created="Tue, 14 Apr 2009 18:25:28 +0100"  >&lt;p&gt;This is similar to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-505&quot; title=&quot;MultiReader.norm() takes up too much memory: norms byte[] should be made into an Object&quot;&gt;&lt;del&gt;LUCENE-505&lt;/del&gt;&lt;/a&gt;, but applies to all readers, not just MultiReader and proposes a different, less complex solution. Attaching preliminary patch.&lt;/p&gt;</comment>
                    <comment id="12698840" author="svella" created="Tue, 14 Apr 2009 18:26:41 +0100"  >&lt;p&gt;Preliminary patch&lt;/p&gt;</comment>
                    <comment id="12698847" author="mikemccand" created="Tue, 14 Apr 2009 18:40:02 +0100"  >&lt;p&gt;I completely agree it&apos;s silly to make huge arrays instead of accepting null.  One turns off norms to avoid huge arrays getting allocated, in the first place.&lt;/p&gt;

&lt;p&gt;Unfortunately, this is a break in back compatibility, though I think in 3.0 this change would be OK.  Perhaps, we could commit it today, w/ a deprecated method exposed in IndexReader to &quot;allow null to be returned by getNorms()&quot;, which defaults to off (ie the current trunk behavior).  Then, in 3.0, we remove that method and hardwire to true.&lt;/p&gt;

&lt;p&gt;There is also a &lt;span class=&quot;error&quot;&gt;&amp;#91;presumably smallish&amp;#93;&lt;/span&gt; performance hit by adding the &quot;norms != null&quot; check inside TermScorer, for every hit, but I think that&apos;s an OK tradeoff.&lt;/p&gt;</comment>
                    <comment id="12698854" author="svella" created="Tue, 14 Apr 2009 18:53:55 +0100"  >&lt;p&gt;Will look at adding the option to turn on as time permits. Shouldn&apos;t be too hard except as it affects the unit tests - ferreting out all the tests that need to be duplicated with it on and with it off could get very tedious.&lt;/p&gt;</comment>
                    <comment id="12698869" author="earwin" created="Tue, 14 Apr 2009 19:26:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;There is also a &lt;span class=&quot;error&quot;&gt;&amp;#91;presumably smallish&amp;#93;&lt;/span&gt; performance hit by adding the &quot;norms != null&quot; check inside TermScorer, for every hit, but I think that&apos;s an OK tradeoff.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If guys at Java HotSpot Compiler are doing their homework, checking something != null before accessing something should come almost for free, because each access checks for null anyway.&lt;/p&gt;</comment>
                    <comment id="12698873" author="mikemccand" created="Tue, 14 Apr 2009 19:47:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;If guys at Java HotSpot Compiler are doing their homework, checking something != null before accessing something should come almost for free, because each access checks for null anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem is, depending on the result of the null check, we do very different things; I think we are relying on the CPU to correctly predict the branch, which I even wonder about since multiple threads could be running that code with the if going different ways.  And even a correct prediction there&apos;s still &lt;span class=&quot;error&quot;&gt;&amp;#91;small&amp;#93;&lt;/span&gt; added cost...&lt;/p&gt;</comment>
                    <comment id="12698874" author="mikemccand" created="Tue, 14 Apr 2009 19:49:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;ferreting out all the tests that need to be duplicated with it on and with it off could get very tedious.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think you need to dup all tests w/ on &amp;amp; off.  If you can get Lucene&apos;s tests to pass when &lt;span class=&quot;error&quot;&gt;&amp;#91;temporarily&amp;#93;&lt;/span&gt; hardwiring it to on (ie, allowed to return null), I think that&apos;s fine?  Then, for the duration up until 2.9, we&apos;re testing the &quot;off&quot; case, and when we flip it in 3.0, we&apos;re testing the &quot;on&quot; case.&lt;/p&gt;</comment>
                    <comment id="12698880" author="svella" created="Tue, 14 Apr 2009 20:04:58 +0100"  >&lt;p&gt;The check isn&apos;t for free because the HotSpot compiler doesn&apos;t check every reference for null, it just traps the resulting segmentation fault that dereferencing a null pointer causes. We could leverage this by not checking for null, but catch a null pointer exception, though I believe the extra overhead of a try/catch block would be more expensive than just checking.&lt;/p&gt;

&lt;p&gt;The performance hit is likely only in the case where it isn&apos;t equal null - in the equal null case you end up saving a multiply plus a memory reference that is likely going to cause many CPU cache faults over the coarse of a search long enough to matter, which together probably add up to more than the cost of the check.&lt;/p&gt;

&lt;p&gt;An alternate approach that would eliminate this overhead is to subclass the scorers that use norms and create an appropriate scorer that doesn&apos;t require the check. The drawback of this approach would be that it is harder to maintain.&lt;/p&gt;
</comment>
                    <comment id="12698886" author="earwin" created="Tue, 14 Apr 2009 20:24:25 +0100"  >&lt;p&gt;Yep, that was my blunder. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;An alternate approach that would eliminate this overhead is to subclass the scorers that use norms and create an appropriate scorer that doesn&apos;t require the check. The drawback of this approach would be that it is harder to maintain.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Somebody recently raised a topic on specialized Lucene, with classes generated from templates, hardwiring various choices. Guys at MG4J generate a custom indexReader for each possible combination of index settings. So the idea of separate scorers might be valid, if we&apos;re going optimization-freak way. (and we don&apos;t have to support them separately) &lt;/p&gt;

&lt;p&gt;By the way, why everything surrounding norms map is heavily synchronized? I haven&apos;t found a single write to the map outside of initialize().&lt;/p&gt;</comment>
                    <comment id="12698906" author="mikemccand" created="Tue, 14 Apr 2009 21:09:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;By the way, why everything surrounding norms map is heavily synchronized? I haven&apos;t found a single write to the map outside of initialize().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean the SegmentReader.Norm class?  It&apos;s so only one thread attempts to load norms at once.  And because cloned SegmentReaders share norms (incRef/decRef).  Also, the reader can change norms (setNorm) which requires copy-on-write if more than one clone is sharing the norms.  We&apos;ll need similar care for CSFs once they accept live changes, too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Somebody recently raised a topic on specialized Lucene&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, that&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1594&quot; title=&quot;Use source code specialization to maximize search performance&quot;&gt;&lt;del&gt;LUCENE-1594&lt;/del&gt;&lt;/a&gt;.  I&apos;ll fold the norms/nonorms code gen into there....&lt;/p&gt;

&lt;p&gt;Source code specialization gives sizable search performance gains w/ Lucene, but it&apos;ll be quite a while before it&apos;s committable.  Hopefully as we pull some of the optimizations there back into core (eg using random-access API to filter: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;), that gap shrinks.&lt;/p&gt;

&lt;p&gt;Let&apos;s proceed for now with the null check in single-source scorer.  I&apos;ll run some perf tests on it vs trunk, with the &quot;norms present&quot; case, to see where we stand.&lt;/p&gt;</comment>
                    <comment id="12699320" author="svella" created="Wed, 15 Apr 2009 20:15:50 +0100"  >&lt;p&gt;Patch updated to add method to enable/disable the disabling of fake norms&lt;/p&gt;</comment>
                    <comment id="12699607" author="mikemccand" created="Thu, 16 Apr 2009 10:48:27 +0100"  >&lt;p&gt;OK, patch looks good.  All tests pass, even if I temporarily default &quot;disableFakeNorms&quot; to true (but back-compat tests fail, which is expected and is why we won&apos;t flip the default until 3.0).  Thanks Shon!&lt;/p&gt;

&lt;p&gt;I still need to test perf cost of this change...&lt;/p&gt;</comment>
                    <comment id="12699674" author="svella" created="Thu, 16 Apr 2009 13:30:58 +0100"  >&lt;p&gt;Working on an update to the patch - MultiSegmentReader needs to set disableFakeNorms transitively to it&apos;s subReaders as well as to new subReaders on reopen.&lt;/p&gt;</comment>
                    <comment id="12699714" author="svella" created="Thu, 16 Apr 2009 15:15:33 +0100"  >&lt;p&gt;Setting disableFakeNorms transitively isn&apos;t really needed because MultiSegmentReader doesn&apos;t make any calls to the subreaders that would cause it to create it&apos;s own fake norms. We probably ought to preserve the flag on clone() and reopen() though, which is going to be a little messy because IndexReader doesn&apos;t really implement either so it would have to be handled at the root of each concrete class hierarchy that does implement those. Any thoughts on whether we need this or not?&lt;/p&gt;</comment>
                    <comment id="12699720" author="mikemccand" created="Thu, 16 Apr 2009 15:37:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;Setting disableFakeNorms transitively isn&apos;t really needed because MultiSegmentReader doesn&apos;t make any calls to the subreaders that would cause it to create it&apos;s own fake norms&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But since we score per-segment, TermScorer would ask each SegmentReader (in the MultiSegmentReader) for its norms?  So I think the sub readers need to know the setting.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Any thoughts on whether we need this or not?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we do need each class implementing clone() and reopen() to properly carryover this setting.&lt;/p&gt;</comment>
                    <comment id="12699872" author="svella" created="Thu, 16 Apr 2009 22:21:18 +0100"  >&lt;p&gt;What should the transitive behavior of MultiReader, FilterReader, and ParallelReader be? I&apos;m inclined to say they shouldn&apos;t pass through to their subordinate readers because they don&apos;t really &quot;own&quot; them. &lt;/p&gt;</comment>
                    <comment id="12699941" author="mikemccand" created="Fri, 17 Apr 2009 01:21:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m inclined to say they shouldn&apos;t pass through to their subordinate readers because they don&apos;t really &quot;own&quot; them.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;</comment>
                    <comment id="12702519" author="svella" created="Fri, 24 Apr 2009 21:07:09 +0100"  >&lt;p&gt;Updated patch that preserves disableNorms flag across clone and reopen() and applies flag transitively to MultiSegmentReader.&lt;/p&gt;</comment>
                    <comment id="12703101" author="mikemccand" created="Mon, 27 Apr 2009 13:32:49 +0100"  >
&lt;p&gt;I tested this change on a Wikipedia index, with query &quot;1&quot;, on a field&lt;br/&gt;
that has norms.&lt;/p&gt;

&lt;p&gt;On Linux, JDK 1.6.0_13, I can see no performance difference (both get&lt;br/&gt;
7.2 qps, best of 10 runs).&lt;/p&gt;

&lt;p&gt;On Mac OS X 10.5.6, I see some difference (13.0 vs 12.3, best of 10&lt;br/&gt;
runs), but given quirkiness I&apos;ve seen on OS X&apos;s results not matching&lt;br/&gt;
other platforms, I think we can disgregard this.&lt;/p&gt;

&lt;p&gt;Also, given the performance gain one sees when norms are disabled, I&lt;br/&gt;
think this is net/net a good change.&lt;/p&gt;

&lt;p&gt;We&apos;ll leave the default as false (for back compat), but this setting&lt;br/&gt;
is deprecated with a comment that in 3.0 it hardwires to true.&lt;/p&gt;</comment>
                    <comment id="12703103" author="mikemccand" created="Mon, 27 Apr 2009 13:38:10 +0100"  >&lt;p&gt;New patch attached:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Fixed contrib/instantiated &amp;amp; contrib/misc to pass if I change&lt;br/&gt;
    default for disableFakeNorms to true (which we will hardwire in&lt;br/&gt;
    3.0)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Tweaked javadocs&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removed unused imports&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added CHANGES.txt entry&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I still need to review the rest of the patch...&lt;/p&gt;

&lt;p&gt;With this patch, all tests pass with the default set to false&lt;br/&gt;
(back-compat).  If I temporarily set it to true, all tests now pass,&lt;br/&gt;
except back-compat (which is expected &amp;amp; fine).&lt;/p&gt;

&lt;p&gt;I had started down the path of having contrib/instantiated &quot;respect&quot;&lt;br/&gt;
the disableFakeNorms setting, but rapidly came to realize how little I&lt;br/&gt;
understand contrib/instantiated&apos;s code &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; So I fell back to fixing the&lt;br/&gt;
unit tests to accept null returns from the normal&lt;br/&gt;
IndexReader.norms(...).&lt;/p&gt;</comment>
                    <comment id="12703108" author="mikemccand" created="Mon, 27 Apr 2009 13:49:02 +0100"  >&lt;p&gt;Attached patch.&lt;/p&gt;

&lt;p&gt;I also added &quot;assert !getDisableFakeNorms();&quot; inside SegmentReader.fakeNorms().&lt;/p&gt;</comment>
                    <comment id="12703142" author="mikemccand" created="Mon, 27 Apr 2009 15:29:56 +0100"  >&lt;p&gt;OK patch looks good!  I plan to commit in a day or two.  Thanks Shon!&lt;/p&gt;</comment>
                    <comment id="12703818" author="mikemccand" created="Tue, 28 Apr 2009 21:39:11 +0100"  >&lt;p&gt;Thanks Shon!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12406521" name="LUCENE-1604.patch" size="26307" author="mikemccand" created="Mon, 27 Apr 2009 13:49:02 +0100" />
                    <attachment id="12406393" name="LUCENE-1604.patch" size="17366" author="svella" created="Fri, 24 Apr 2009 21:07:09 +0100" />
                    <attachment id="12405556" name="LUCENE-1604.patch" size="14170" author="svella" created="Wed, 15 Apr 2009 20:15:50 +0100" />
                    <attachment id="12405437" name="LUCENE-1604.patch" size="13201" author="svella" created="Tue, 14 Apr 2009 18:26:41 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 14 Apr 2009 17:40:02 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12151</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26124</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>