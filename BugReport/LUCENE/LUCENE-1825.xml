<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:29:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1825/LUCENE-1825.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1825] Incorrect usage of AttributeSource.addAttribute/getAttribute leads to failures when onlyUseNewAPI=true</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1825</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;when seting &quot;use only new API&quot; for TokenStream, i received the following exception:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   [junit] Caused by: java.lang.IllegalArgumentException: This AttributeSource does not have the attribute &apos;&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; org.apache.lucene.analysis.tokenattributes.TermAttribute&apos;.
    [junit] 	at org.apache.lucene.util.AttributeSource.getAttribute(AttributeSource.java:249)
    [junit] 	at org.apache.lucene.index.TermsHashPerField.start(TermsHashPerField.java:252)
    [junit] 	at org.apache.lucene.index.DocInverterPerField.processFields(DocInverterPerField.java:145)
    [junit] 	at org.apache.lucene.index.DocFieldProcessorPerThread.processDocument(DocFieldProcessorPerThread.java:244)
    [junit] 	at org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:772)
    [junit] 	at org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:755)
    [junit] 	at org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:2613)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, i can&apos;t actually see the culprit that caused this exception&lt;/p&gt;

&lt;p&gt;suggest that the IllegalArgumentException include &quot;getClass().getName()&quot; in order to be able to identify which TokenStream implementation actually caused this&lt;/p&gt;</description>
                <environment></environment>
            <key id="12433582">LUCENE-1825</key>
            <summary>Incorrect usage of AttributeSource.addAttribute/getAttribute leads to failures when onlyUseNewAPI=true</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="tsmith">Tim Smith</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Aug 2009 16:54:02 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:34 +0100</updated>
                    <resolved>Sat, 22 Aug 2009 13:05:48 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12745472" author="markrmiller@gmail.com" created="Thu, 20 Aug 2009 17:13:25 +0100"  >&lt;p&gt;Have a proposed patch? Doesn&apos;t look easy - I don&apos;t think AttributeSource is necessarily attached to any TokenStream - so you would have to trap it lower and rework the exception. I don&apos;t see the clean path for this myself. Though I certainly agree with its use.&lt;/p&gt;</comment>
                    <comment id="12745502" author="tsmith" created="Thu, 20 Aug 2009 18:07:30 +0100"  >&lt;p&gt;Looked a little closer on this and it looks like if the root TokenStream does not addAttribute() for all attributes expected by the indexer, this exception occurs&lt;/p&gt;

&lt;p&gt;I suppose if the Indexer called addAttribute() instead of getAttribute() this wouldn&apos;t happen (attributes not provided by TokenStream, but required by Indexer would be initialized at index time (and would remain &quot;empty&quot;))&lt;/p&gt;</comment>
                    <comment id="12745508" author="tsmith" created="Thu, 20 Aug 2009 18:14:21 +0100"  >&lt;p&gt;Updated getAttribute() on AttributeSource as follows to find the source of my pain:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * The caller must pass in a &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Attribute&amp;amp;gt; value. 
   * Returns the instance of the passed in Attribute contained in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; AttributeSource
   * 
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IllegalArgumentException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; AttributeSource does not contain the
   *         Attribute
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; AttributeImpl getAttribute(&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; attClass) {
    AttributeImpl att = (AttributeImpl) &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.attributes.get(attClass);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (att == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(getClass().getName() + &lt;span class=&quot;code-quote&quot;&gt;&quot; does not have the attribute &apos;&quot;&lt;/span&gt; + attClass + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos;.&quot;&lt;/span&gt;);
    }

    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; att;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I see that this could end up being an arbitrary &quot;org.apache.lucene.util.AttributeSource&quot; though if you aren&apos;t fully integrating the new api&lt;/p&gt;</comment>
                    <comment id="12745514" author="markrmiller@gmail.com" created="Thu, 20 Aug 2009 18:29:44 +0100"  >&lt;p&gt;Gotchya - in the summary it said you were looking for the TokenStream rather than the AttributeSource. I didn&apos;t follow that you could figure that out by knowing the AttributeSource impl name.&lt;/p&gt;</comment>
                    <comment id="12745623" author="thetaphi" created="Thu, 20 Aug 2009 21:41:41 +0100"  >&lt;p&gt;In principle you should always use addAttribute() when consuming a TokenStream, if the attribute is unknown, it will be created empty - no problem. MostLucene-internal code uses it in that way. getAttribute() is currently only used for very special cases (e.g. in tests, to check if an attribute was really added). But there seems to be one relict of getAttribute in the code. To fix this bug, I should replace the getAttribute() call in the indexer by addAttribute(). I will provide a patch for that.&lt;/p&gt;

&lt;p&gt;If you have an unknown TokenStream instance you will never know, which of the attributes are really used. If you want to optimize this, you could check before, if the attribute is really used and e.g. exclude some code paths with very complicated calculations based on these missing attributes.&lt;/p&gt;

&lt;p&gt;I will also add an JavaDoc comment for this. The &quot;more helpful&quot; error message is in my opinion not needed, because you cannot find out which of the filter/stream in the chain is missing the attribute, because all in the chain use the same Attribute instances.&lt;/p&gt;</comment>
                    <comment id="12745624" author="tsmith" created="Thu, 20 Aug 2009 21:44:41 +0100"  >&lt;p&gt;I agree that a &apos;more helpful&apos; error message may not be so helpful&lt;/p&gt;

&lt;p&gt;i refactored all my code to use the same &quot;new AttributeSource()&quot;  for all TokenStreams for the same Document anyway, so all it would tell me is &quot;AttributeSource&quot; missing parameter&lt;/p&gt;</comment>
                    <comment id="12745681" author="thetaphi" created="Thu, 20 Aug 2009 22:47:10 +0100"  >&lt;p&gt;Attached is a first patch, that fixes the wrong getAttribute() calss without checking, if the attribute is available.&lt;br/&gt;
For testing, I added a system property to LuceneTestCase &quot;TokenStream.onlyUseNewAPI&quot;, that can be set to true. When I have done this (and explicitely excluded some tests like the deprecated Tee/Sink test and the extra backwards test) using this switch, especially Highlighter fails because of assuming that all Attributes are always there. With onlyUseNewAPI=false, the tests pass, because the used Attribute Impl is Token, which implements all attributes.&lt;br/&gt;
There is still one test (TestMappingCharFilter) using TokenStream.next(), which I fix tomorrow to use incrementToken. I am currently thinking about testing all affected tests automatically two times with both settings. Maybe I add a special LuceneTestCase subclass, that runs all tests two times. All test depending on TokenStreams like the indexer should simply subclass this special class.&lt;br/&gt;
For the beginning, the system property is ON. I added it to common-build as true for testing. How do I pass the command line parameters from ant itsself to the underlying tests?&lt;/p&gt;</comment>
                    <comment id="12745892" author="thetaphi" created="Fri, 21 Aug 2009 11:41:22 +0100"  >&lt;p&gt;New patch that fixes also the two failing tests by setting onlyUseNewAPI to false for them.&lt;/p&gt;

&lt;p&gt;I will now create a new LuceneTestCase subclass, that tries tests with old and new api automatically.&lt;/p&gt;</comment>
                    <comment id="12745920" author="thetaphi" created="Fri, 21 Aug 2009 12:58:57 +0100"  >&lt;p&gt;Here is my idea for testing both apis of TokenStreams. All testcases that should tests both the backwards layer using Token instances and only the new API (this are &lt;b&gt;all&lt;/b&gt; analyzer tests, TestIndexWriter, highlighter and query parser test and a few more), should subclass this class instead of LuceneTestCase.&lt;/p&gt;</comment>
                    <comment id="12746000" author="thetaphi" created="Fri, 21 Aug 2009 15:55:13 +0100"  >&lt;p&gt;Here a new patch: The default LuceneTestCase uses onlyUseNewAPI=false (which is the default). Some tests were rewritten to use a special TestCase superclass (see previous file, but updated in this patch), that runs all tests two times with this flag enabled and disabled.&lt;/p&gt;

&lt;p&gt;I converted all core analyzer tests, DocumentsWriter and the likely failing highlighter, queryparser and memory index tests.&lt;/p&gt;</comment>
                    <comment id="12746426" author="thetaphi" created="Sat, 22 Aug 2009 09:03:34 +0100"  >&lt;p&gt;I will commit this later, if you like the possibility to run several tests two times with backwards layer enabled and not.&lt;/p&gt;</comment>
                    <comment id="12746442" author="thetaphi" created="Sat, 22 Aug 2009 13:02:28 +0100"  >&lt;p&gt;The new base test case has now support to only run the tests twice for a Set of test names. I will commit this now.&lt;/p&gt;</comment>
                    <comment id="12746443" author="thetaphi" created="Sat, 22 Aug 2009 13:05:48 +0100"  >&lt;p&gt;Committed Revision: 806844&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12417259" name="BaseTokenStreamTestCase.java" size="1899" author="thetaphi" created="Fri, 21 Aug 2009 12:58:57 +0100" />
                    <attachment id="12417359" name="LUCENE-1825.patch" size="31871" author="thetaphi" created="Sat, 22 Aug 2009 13:02:28 +0100" />
                    <attachment id="12417277" name="LUCENE-1825.patch" size="31634" author="thetaphi" created="Fri, 21 Aug 2009 15:55:13 +0100" />
                    <attachment id="12417249" name="LUCENE-1825.patch" size="12370" author="thetaphi" created="Fri, 21 Aug 2009 11:41:22 +0100" />
                    <attachment id="12417185" name="LUCENE-1825.patch" size="10576" author="thetaphi" created="Thu, 20 Aug 2009 22:47:10 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 20 Aug 2009 16:13:25 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11938</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25902</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>