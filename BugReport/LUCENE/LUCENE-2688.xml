<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2688/LUCENE-2688.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2688] NativeFSLockFactory throws an exception on Android 2.2 platform as java.lang.management package is not available on android.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2688</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;NativeFSLockFactory throws an exception on Android 2.2 platform as java.lang.management package is not available on android.&lt;br/&gt;
   Looks like FSDirectory defaults to NativeFSLockFactory, and this class refers to java.lang.management package to generate a unique lock. java.lang.management is not available in Android 2.2 and hence a runtime exception is raised. The workaround is to use another custom LockFactory or SimpleFSLockFactory, but Fixing NativeFSLockFactroy will help.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Surinder&lt;/p&gt;</description>
                <environment>&lt;p&gt;Android 2.2 Froyo Nexus One&lt;/p&gt;</environment>
            <key id="12475839">LUCENE-2688</key>
            <summary>NativeFSLockFactory throws an exception on Android 2.2 platform as java.lang.management package is not available on android.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="bbindra">Surinder Pal Singh Bindra</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Oct 2010 07:51:36 +0100</created>
                <updated>Wed, 1 Dec 2010 14:50:01 +0000</updated>
                    <resolved>Thu, 7 Oct 2010 10:13:21 +0100</resolved>
                            <version>3.0</version>
                <version>3.0.1</version>
                <version>3.0.2</version>
                                <fixVersion>2.9.4</fixVersion>
                <fixVersion>3.0.3</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12917925" author="mikemccand" created="Tue, 5 Oct 2010 10:50:12 +0100"  >&lt;p&gt;I agree we should fix this.  We want portability.  This is only used to try to create a unique lock name...&lt;/p&gt;

&lt;p&gt;Can we somehow load this dynamically?  Such that on JVMs that do not have it, we fallback?&lt;/p&gt;</comment>
                    <comment id="12917945" author="rcmuir" created="Tue, 5 Oct 2010 12:44:53 +0100"  >&lt;p&gt;I don&apos;t think this is a bug.&lt;/p&gt;

&lt;p&gt;We are talking about android... its not actually Java...&lt;/p&gt;</comment>
                    <comment id="12917951" author="shaie" created="Tue, 5 Oct 2010 13:20:13 +0100"  >&lt;p&gt;Isn&apos;t it part of Java 5? Is Android using a different JDK? I agree w/ Robert on one hand, but adding a try-catch and fallback seems reasonable in this case.&lt;/p&gt;

&lt;p&gt;I&apos;d only like to understand how is it that java.lang.management does not exist on Android, because that might indicate other classes don&apos;t exist as well, and thus fixing NativeFSLockFactory won&apos;t solve the real problem of running Lucene 3.x on Android.&lt;/p&gt;</comment>
                    <comment id="12917952" author="rcmuir" created="Tue, 5 Oct 2010 13:26:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d only like to understand how is it that java.lang.management does not exist on Android, because that might indicate other classes don&apos;t exist as well, and thus fixing NativeFSLockFactory won&apos;t solve the real problem of running Lucene 3.x on Android.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;exactly my point!&lt;/p&gt;

&lt;p&gt;android doesn&apos;t have all the java apis (only a subset: &lt;a href=&quot;http://developer.android.com/reference/packages.html&quot; class=&quot;external-link&quot;&gt;http://developer.android.com/reference/packages.html&lt;/a&gt;)&lt;br/&gt;
its not actually java...&lt;/p&gt;

&lt;p&gt;either we want lucene to fully work on it (which means we intentionally limit ourselves to the intersection of the &lt;br/&gt;
java apis and the android apis, install a simulator on hudson, ensure ant test passes, etc), or we don&apos;t.&lt;/p&gt;

&lt;p&gt;but i don&apos;t think we should degrade anything for it, in other words we shouldn&apos;t limit ourselves to its subset&lt;br/&gt;
if the damn thing isn&apos;t going to work anyway.&lt;/p&gt;</comment>
                    <comment id="12917953" author="mikemccand" created="Tue, 5 Oct 2010 13:34:31 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t think this is a bug.&lt;/p&gt;

&lt;p&gt;We are talking about android... its not actually Java...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree!&lt;/p&gt;

&lt;p&gt;This is not a bug, and we do not support Android (there&lt;br/&gt;
are many things besides this usage of j.l.management that cause&lt;br/&gt;
problems for Lucene on Android, right?).&lt;/p&gt;

&lt;p&gt;But, separately, I think when possible Lucene should use simpler code,&lt;br/&gt;
fewer APIs, etc., to minimize the risk of problems.&lt;/p&gt;

&lt;p&gt;This usage of j.l.management seems frivolous?  Can&apos;t we simply do a&lt;br/&gt;
better job seeding Random (eg with System.nanoTime()), instead?&lt;/p&gt;

&lt;p&gt;Or, make the usage of j.l.management dynamic?&lt;/p&gt;

&lt;p&gt;Note that this was added for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2421&quot; title=&quot;Hardening of NativeFSLock&quot;&gt;&lt;del&gt;LUCENE-2421&lt;/del&gt;&lt;/a&gt;, which was only to make&lt;br/&gt;
sure our tests don&apos;t make conflicting locks.  It seems very unlikely&lt;br/&gt;
a &quot;real&quot; app would hit this (the lock files live in the index dir).  Maybe&lt;br/&gt;
we can fix it for tests only (eg swap in different impl when tests are&lt;br/&gt;
running...)?&lt;/p&gt;</comment>
                    <comment id="12917954" author="rcmuir" created="Tue, 5 Oct 2010 13:37:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;Maybe we can fix it for tests only (eg swap in different impl when tests are running...)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the actual tests should use our real code, as for LuceneJUnitResultFormatter, yes, i think you are right.&lt;/p&gt;</comment>
                    <comment id="12917962" author="shaie" created="Tue, 5 Oct 2010 14:08:41 +0100"  >&lt;p&gt;I don&apos;t understand why does an Android app need to lock the index at all, and even if &amp;#8211; can&apos;t SimpleFS work?&lt;/p&gt;

&lt;p&gt;java.lang.management is perfectly legit, and is not an external dependency or anything. Luckily Android includes java.util.concurrent &amp;#8211; what if it didn&apos;t? Would we attempt to fix Lucene too (IndexReader wouldn&apos;t work, for example).&lt;/p&gt;

&lt;p&gt;I personally don&apos;t mind if we fix it though, to use nanoTime() or wrap with try-catch and fallback to using nanoTime() there.&lt;/p&gt;

&lt;p&gt;It&apos;s just a question of what do we want to say about Android support.&lt;/p&gt;</comment>
                    <comment id="12917966" author="thetaphi" created="Tue, 5 Oct 2010 14:23:08 +0100"  >&lt;p&gt;+1, it&apos;s &lt;b&gt;java.lang&lt;/b&gt;.management, which is even in the basic &quot;lang&quot; package. If Android does not have it, its a killer. On android, you can work around with SimpleFSLock. If we start to supply workarounds, we will get into a hell of supporting abstruse environments.&lt;/p&gt;</comment>
                    <comment id="12917973" author="rcmuir" created="Tue, 5 Oct 2010 14:32:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;Luckily Android includes java.util.concurrent - what if it didn&apos;t? Would we attempt to fix Lucene too (IndexReader wouldn&apos;t work, for example).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it goes much deeper than this, besides having the APIs, do they &lt;b&gt;actually work&lt;/b&gt; ?&lt;/p&gt;

&lt;p&gt;For example, with apache harmony (android uses its classlib!) &lt;br/&gt;
there was/is some work to actually make tests pass: &lt;a href=&quot;https://issues.apache.org/jira/browse/HARMONY-6640&quot; title=&quot;UTF8 decoder doesn&amp;#39;t properly decode supplementary characters&quot;&gt;&lt;del&gt;HARMONY-6640&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HARMONY-6648&quot; title=&quot;Character.codePointAt exception differences&quot;&gt;&lt;del&gt;HARMONY-6648&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HARMONY-6649&quot; title=&quot;String.toLowerCase/toUpperCase incorrect for supplementary characters&quot;&gt;&lt;del&gt;HARMONY-6649&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HARMONY-6650&quot; title=&quot;Character.getType(int) inconsistent with Character.getType(char): uses different version of unicode&quot;&gt;HARMONY-6650&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;fortunately the harmony developers were very helpful in getting things moving, &lt;br/&gt;
but my point is that unless the tests pass, its pointless to waste time looking at the APIs&lt;/p&gt;</comment>
                    <comment id="12918000" author="mikemccand" created="Tue, 5 Oct 2010 15:41:41 +0100"  >&lt;p&gt;I&apos;m not talking about Android support &amp;#8211; that&apos;s a much larger (and&lt;br/&gt;
more challenging) question.&lt;/p&gt;

&lt;p&gt;I&apos;m talking about relying on as few dependencies (including java APIs)&lt;br/&gt;
as possible, to reduce the chance of problems.  This philosophy&lt;br/&gt;
applies all across lucene sources, but especially to our very low&lt;br/&gt;
level APIs like locking.&lt;/p&gt;

&lt;p&gt;So... is/was j.l.management really the only way to solve this problem?&lt;br/&gt;
Wouldn&apos;t seeding with System.nanoTime also suffice?&lt;/p&gt;

&lt;p&gt;Hmm... maybe a better solution is to stop acquiring a test lock&lt;br/&gt;
altogether?  Only NativeFSLockFactory does this..., and it&apos;s actually&lt;br/&gt;
rather silly, because we acquireTestLock when .makeLock is called,&lt;br/&gt;
yet, the caller who called .makeLock will presumably shortly&lt;br/&gt;
thereafter call .obtain on that lock and will at that point see an&lt;br/&gt;
exception if there are issues with native locks on the current&lt;br/&gt;
filesystem.&lt;/p&gt;

&lt;p&gt;Note that we are only trying to generate a unique name for the &lt;b&gt;test&lt;/b&gt;&lt;br/&gt;
lock that the lock factory acquires to verify locking will work.  As&lt;br/&gt;
far as I know, no app has ever hard a problem with this, ie, this is a&lt;br/&gt;
test-only problem.  In fact, even reading through &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2421&quot; title=&quot;Hardening of NativeFSLock&quot;&gt;&lt;del&gt;LUCENE-2421&lt;/del&gt;&lt;/a&gt; again, I&lt;br/&gt;
don&apos;t get why our tests are running simultaneous tests sharing the&lt;br/&gt;
same lock directory?  Shai do you remember which specific tests cause&lt;br/&gt;
problems?  And if the test lock was a problem, why then was the real&lt;br/&gt;
lock not a problem?&lt;/p&gt;</comment>
                    <comment id="12918848" author="mikemccand" created="Thu, 7 Oct 2010 10:13:21 +0100"  >&lt;p&gt;This issue was fixed, as a side effect of fixing &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2689&quot; title=&quot;remove NativeFSLockFactory&amp;#39;s attempt to acquire a test lock&quot;&gt;&lt;del&gt;LUCENE-2689&lt;/del&gt;&lt;/a&gt;, which removed the acquireTestLock method (the only thing using j.l.management.*) entirely.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12475860">LUCENE-2689</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 5 Oct 2010 09:50:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11156</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25004</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>