<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:14:24 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-294/LUCENE-294.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-294] DisjunctionScorer</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-294</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This disjunction scorer can match a minimum nr. of docs, &lt;br/&gt;
it provides skipTo() and it uses skipTo() on the subscorers. &lt;br/&gt;
The score() method is abstract in DisjunctionScorer and implemented &lt;br/&gt;
in DisjunctionSumScorer as an example.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: Other&lt;/p&gt;</environment>
            <key id="12314444">LUCENE-294</key>
            <summary>DisjunctionScorer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="java-dev@lucene.apache.org">Lucene Developers</assignee>
                                <reporter username="paul.elschot@xs4all.nl">Paul Elschot</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 Oct 2004 02:13:45 +0100</created>
                <updated>Thu, 2 Jun 2011 23:03:19 +0100</updated>
                    <resolved>Sat, 27 May 2006 02:38:17 +0100</resolved>
                                                            <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12321945" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:14:39 +0100"  >&lt;p&gt;Created an attachment (id=13147)&lt;br/&gt;
DisjunctionScorer.java&lt;/p&gt;</comment>
                    <comment id="12321946" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:15:26 +0100"  >&lt;p&gt;Created an attachment (id=13148)&lt;br/&gt;
DisjunctionSumScorer.java&lt;/p&gt;</comment>
                    <comment id="12321947" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:16:47 +0100"  >&lt;p&gt;Created an attachment (id=13149)&lt;br/&gt;
DisjunctionSumCoordScorer.java&lt;/p&gt;</comment>
                    <comment id="12321948" author="cutting@apache.org" created="Wed, 27 Oct 2004 04:36:50 +0100"  >&lt;p&gt;This looks great to me!&lt;/p&gt;

&lt;p&gt;Have you had a chance to benchmark it against BooleanScorer?  I&apos;d expect it to&lt;br/&gt;
be faster with rare terms and slower with common terms.  Differences might not&lt;br/&gt;
be significant on small indexes.&lt;/p&gt;

&lt;p&gt;Also, have you thought about keeping track of which scorers matched, so that&lt;br/&gt;
this could implement boolean logic?  For example, if we kept an int or long&lt;br/&gt;
bitmask with bits for prohibited and/or required sub-scorers, then this could&lt;br/&gt;
fully replace BooleanQuery.&lt;/p&gt;</comment>
                    <comment id="12321949" author="paul.elschot@xs4all.nl" created="Wed, 27 Oct 2004 06:00:01 +0100"  >&lt;p&gt;I have not yet tested it on bigger indexes, sorry. &lt;br/&gt;
The thing is under development, currently it prepares &lt;br/&gt;
an array of scores for the abstract combineScores() method &lt;br/&gt;
with a Float.NaN for subscorers not at the current document. &lt;/p&gt;

&lt;p&gt;I don&apos;t see performance bottlenecks in the Java code, &lt;br/&gt;
but I know I can&apos;t predict a profiler... &lt;/p&gt;

&lt;p&gt;I expect it to be somewhat slower than BooleanScorer. &lt;br/&gt;
The main reason to implement it is that I need skipTo() &lt;br/&gt;
to allow very sparse filters. So sparse that the advantage &lt;br/&gt;
of skipTo() outweighs the disadvantage of the PriorityQueue. &lt;/p&gt;

&lt;p&gt;For required subscorers Lucene&apos;s ConjunctionScorer does well. &lt;br/&gt;
For prohibited subscorers I have a scorer for required/excluded, &lt;br/&gt;
which follows the required scorer and does skipTo() on the &lt;br/&gt;
excluded scorer. &lt;br/&gt;
For optional subscorers I&apos;m using a required/optional scorer, &lt;br/&gt;
which delays skipTo() on the optional subscorers until score() &lt;br/&gt;
is called. &lt;/p&gt;

&lt;p&gt;These four scorers (Conjunction, Disjunction, ReqExcl, ReqOpt) can &lt;br/&gt;
implement all boolean queries. They were designed for boolean &lt;br/&gt;
operators (AND, OR, NOT and an operator for required/optional) &lt;br/&gt;
so they don&apos;t fit directly on queries from Lucene&apos;s parser &lt;br/&gt;
where each clause can be required/prohibited/optional. &lt;/p&gt;

&lt;p&gt;I wouldn&apos;t mind contributing the required/optional scorer and the  &lt;br/&gt;
required/excluded scorer as well. &lt;/p&gt;
</comment>
                    <comment id="12321950" author="paul.elschot@xs4all.nl" created="Tue, 9 Nov 2004 04:45:07 +0000"  >&lt;p&gt;Created an attachment (id=13358)&lt;br/&gt;
A replacement for BooleanQuery using ao DisjunctionScorer.&lt;/p&gt;</comment>
                    <comment id="12321951" author="paul.elschot@xs4all.nl" created="Tue, 9 Nov 2004 04:58:28 +0000"  >&lt;p&gt;The tgz attachment can be extracted in the top directory of &lt;br/&gt;
a current lucene working copy. This will add new files and &lt;br/&gt;
overwrite some existing ones, see below. &lt;/p&gt;

&lt;p&gt;I tried this new code on an index of around 1.4 MB, &lt;br/&gt;
and saw no difference in performance. In case someone else &lt;br/&gt;
could report performance on something of more decent size &lt;br/&gt;
I&apos;d be happy to know how that went. &lt;/p&gt;


&lt;p&gt;New code, all under Apache Licence Version 2: &lt;/p&gt;

&lt;p&gt;Test for BooleanScorer2, with some example code &lt;br/&gt;
overriding QueryParser to construct queries with &lt;br/&gt;
BooleanQuery2: &lt;br/&gt;
src/test/org/apache/lucene/search/TestBoolean2.java &lt;/p&gt;

&lt;p&gt;As BooleanQuery, but directly using BooleanScorer2: &lt;br/&gt;
src/java/org/apache/lucene/search/BooleanQuery2.java &lt;/p&gt;

&lt;p&gt;Replacement for BooleanScorer, using the scorers below: &lt;br/&gt;
src/java/org/apache/lucene/search/BooleanScorer2.java &lt;/p&gt;

&lt;p&gt;Counterpart of ConjunctionScorer, allowing a minimal nr of matchers: &lt;br/&gt;
src/java/org/apache/lucene/search/DisjunctionSumScorer.java &lt;/p&gt;

&lt;p&gt;Helper for case of only prohibited subscorers: &lt;br/&gt;
src/java/org/apache/lucene/search/NonMatchingScorer.java &lt;/p&gt;

&lt;p&gt;Extension to Scorer to allow coordination factor over &lt;br/&gt;
multiple levels of subscorers: &lt;br/&gt;
src/java/org/apache/lucene/search/NrMatchersScorer.java &lt;/p&gt;

&lt;p&gt;For required and prohibited subscorers: &lt;br/&gt;
src/java/org/apache/lucene/search/ReqExclScorer.java &lt;/p&gt;

&lt;p&gt;For required and optional subscorers: &lt;br/&gt;
src/java/org/apache/lucene/search/ReqOptSumScorer.java &lt;/p&gt;

&lt;p&gt;Some &quot;Expert:&quot; annotations may still be needed in the javadocs. &lt;/p&gt;


&lt;p&gt;Changes to existing code, also APL 2: &lt;/p&gt;

&lt;p&gt;Redirect BooleanQuery to BooleanScorer2 for testing &lt;br/&gt;
with current Lucene tests. The tests pass with &lt;br/&gt;
this modification. Not recommended for other purposes: &lt;br/&gt;
src/java/org/apache/lucene/search/BooleanQuery.java &lt;/p&gt;

&lt;p&gt;Added some helping code for tests by TestBoolean2: &lt;br/&gt;
src/test/org/apache/lucene/search/CheckHits.java &lt;/p&gt;

&lt;p&gt;ConjunctionScorer: explicit imports, extend NrMatchersScorer: &lt;br/&gt;
src/java/org/apache/lucene/search/ConjunctionScorer.java &lt;/p&gt;


&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;
</comment>
                    <comment id="12321952" author="paul.elschot@xs4all.nl" created="Mon, 13 Dec 2004 03:29:03 +0000"  >&lt;p&gt;Created an attachment (id=13739)&lt;br/&gt;
The replacement for BooleanScorer built into BooleanQuery&lt;/p&gt;

&lt;p&gt;Adding BooleanScorer2 to Lucene, 12 Dec 2004.&lt;/p&gt;

&lt;p&gt;The previous version of 8 Nov 2004 also contained BooleanQuery2,&lt;br/&gt;
this is now merged into BooleanQuery.&lt;/p&gt;


&lt;p&gt;New code, all under Apache Licence Version2, mostly unchanged&lt;br/&gt;
from 8 November 2004:&lt;/p&gt;

&lt;p&gt;Note: some &quot;Expert:&quot; annotations may still be needed in the javadocs.&lt;/p&gt;

&lt;p&gt;Test for BooleanScorer, with some example code&lt;br/&gt;
using both 1.4 scorer and new BooleanScorer2:&lt;br/&gt;
src/test/org/apache/lucene/search/TestBoolean2.java&lt;/p&gt;

&lt;p&gt;Alternative for BooleanScorer, using the scorers below:&lt;br/&gt;
src/java/org/apache/lucene/search/BooleanScorer2.java&lt;/p&gt;

&lt;p&gt;Counterpart of ConjunctionScorer, allowing a minimal nr of matchers:&lt;br/&gt;
src/java/org/apache/lucene/search/DisjunctionSumScorer.java&lt;/p&gt;

&lt;p&gt;Helper for case of only prohibited subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/NonMatchingScorer.java&lt;/p&gt;

&lt;p&gt;Extension to Scorer to allow coordination factor over&lt;br/&gt;
multiple levels of subscorers, this could be merged&lt;br/&gt;
into the current Scorer with a default of 1 for nrMatchers():&lt;br/&gt;
src/java/org/apache/lucene/search/NrMatchersScorer.java&lt;/p&gt;

&lt;p&gt;For required and prohibited subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/ReqExclScorer.java&lt;/p&gt;

&lt;p&gt;For required and optional subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/ReqOptSumScorer.java&lt;/p&gt;


&lt;p&gt;Changes to existing code, all three changed from&lt;br/&gt;
the previous version of 8 November 2004: &lt;/p&gt;

&lt;p&gt;Redirect BooleanQuery to BooleanScorer2 under&lt;br/&gt;
control of static methods setUseScorer14 and getUseScorer14,&lt;br/&gt;
default using BooleanScorer2, as requested by Doug:&lt;br/&gt;
src/java/org/apache/lucene/search/BooleanQuery.java&lt;/p&gt;

&lt;p&gt;Added some helping code for tests by TestBoolean2,&lt;br/&gt;
This uses the setUseScorer14 method to test both versions:&lt;br/&gt;
src/test/org/apache/lucene/search/CheckHits.java&lt;/p&gt;

&lt;p&gt;ConjunctionScorer: explicit imports, extend NrMatchersScorer:&lt;br/&gt;
src/java/org/apache/lucene/search/ConjunctionScorer.java&lt;/p&gt;</comment>
                    <comment id="12321953" author="paul.elschot@xs4all.nl" created="Mon, 13 Dec 2004 03:32:40 +0000"  >&lt;p&gt;Correction to a small mistake: &lt;br/&gt;
The setUseScorer14 method is used in TestBoolean2.java &lt;br/&gt;
and not in CheckHits.java. &lt;/p&gt;</comment>
                    <comment id="12321954" author="goller@detego-software.de" created="Thu, 20 Jan 2005 04:55:40 +0000"  >&lt;p&gt;Hi Paul,&lt;/p&gt;

&lt;p&gt;I finally found time to look into your code in detail and I think&lt;br/&gt;
it&apos;s really excellent work. Before committing it, I have a few questions.&lt;/p&gt;

&lt;p&gt;*) In your source files you have included a copyright statement referring&lt;br/&gt;
to yourself. Of course you include the Apache License. However, I haven&apos;t seen&lt;br/&gt;
other source files in Lucene with similar copyright statements. I don&apos;t know the&lt;br/&gt;
legal consequences of that. Maybe someone else on the list knows more. The&lt;br/&gt;
simplest solution would be to substitute &quot;Copyright 2004 Paul Elschot&quot; with&lt;br/&gt;
&quot;Copyright 2004 The Apache Software Foundation&quot;. Would you agree?&lt;/p&gt;

&lt;p&gt;*) BooleanScorer2 extends NrMatchersScorer and nrMatchers() always returns 1. &lt;br/&gt;
Is there a reason for that? I think it should either only extend Scorer or&lt;br/&gt;
deliver the correct values. I opt for extending Scorer only.&lt;/p&gt;

&lt;p&gt;*) All NrMatchersScorers except for BooleanScorer2 and ConjunctionScorer don&apos;t&lt;br/&gt;
use a similarity implementation. They compute raw scores and nrMatches.&lt;br/&gt;
ConjunctionScorer is a hybrid. It uses coord-factors and is is used as&lt;br/&gt;
NrMatchersScorer. This could lead to incorrect results with Similarity&lt;br/&gt;
implementations other than DefaultSimilarity. A ConjunctionScorer used as&lt;br/&gt;
NrMathesScorer should compute raw scores, if used as standard Scorer it &lt;br/&gt;
should use coord-factors. How can we achieve this in an elegant way?&lt;/p&gt;

&lt;p&gt;Christoph&lt;/p&gt;</comment>
                    <comment id="12321955" author="cutting@apache.org" created="Thu, 20 Jan 2005 05:55:37 +0000"  >&lt;p&gt;Yes, copyright must be assigned to the Apache Software Foundation.&lt;/p&gt;

&lt;p&gt;Is that okay, Paul?&lt;/p&gt;</comment>
                    <comment id="12321956" author="paul.elschot@xs4all.nl" created="Thu, 20 Jan 2005 06:34:22 +0000"  >&lt;p&gt;(In reply to comment #10) &lt;br/&gt;
&amp;gt; Hi Paul, &lt;br/&gt;
&amp;gt;  &lt;br/&gt;
&amp;gt; I finally found time to look into your code in detail and I think &lt;br/&gt;
&amp;gt; it&apos;s really excellent work. Before committing it, I have a few questions. &lt;br/&gt;
&amp;gt;  &lt;br/&gt;
&amp;gt; *) In your source files you have included a copyright statement referring &lt;br/&gt;
&amp;gt; to yourself. Of course you include the Apache License. However, I haven&apos;t &lt;br/&gt;
seen &lt;br/&gt;
&amp;gt; other source files in Lucene with similar copyright statements. I don&apos;t know &lt;br/&gt;
the &lt;br/&gt;
&amp;gt; legal consequences of that. Maybe someone else on the list knows more. The &lt;br/&gt;
&amp;gt; simplest solution would be to substitute &quot;Copyright 2004 Paul Elschot&quot; with &lt;br/&gt;
&amp;gt; &quot;Copyright 2004 The Apache Software Foundation&quot;. Would you agree? &lt;/p&gt;

&lt;p&gt;The intention is to allow the Apache Software Foundation to take over the &lt;br/&gt;
copyright in case they want to.  &lt;br/&gt;
As I understand the Apache Licence, taking over the copyright is &lt;br/&gt;
allowed by the licence. So I used my own copyright, and it could be changed &lt;br/&gt;
when taken over into an Apache project. &lt;br/&gt;
However, the relevant documentation &lt;br/&gt;
&lt;a href=&quot;http://apache.org/dev/apply-license.html&quot; class=&quot;external-link&quot;&gt;http://apache.org/dev/apply-license.html&lt;/a&gt; &lt;br/&gt;
sais that contributed files should have the copyright &lt;br/&gt;
assigned to the Apache Software Foundation. &lt;br/&gt;
I&apos;ll try and do that the next time. &lt;br/&gt;
Could you change the copyright notices accordingly this time? &lt;/p&gt;

&lt;p&gt;&amp;gt; *) BooleanScorer2 extends NrMatchersScorer and nrMatchers() always returns 1.  &lt;br/&gt;
&amp;gt; Is there a reason for that? I think it should either only extend Scorer or &lt;br/&gt;
&amp;gt; deliver the correct values. I opt for extending Scorer only. &lt;/p&gt;

&lt;p&gt;The reason is that a BooleanQuery can be scored by a few cooperating &lt;br/&gt;
(nested) scorers, and that it should still be possible to compute the &lt;br/&gt;
coordination factor from the number of matching scorers of the originally &lt;br/&gt;
added clauses. &lt;/p&gt;

&lt;p&gt;By default nrMatchers() returns 1, and this is for the case when the scorer is &lt;br/&gt;
given to the BooleanScorer2 as a scorer of an added clause. &lt;br/&gt;
(At the moment these are wrapped in a NrMatchersScorer. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) &lt;br/&gt;
The cooperating scorers implementing the boolean behaviour &lt;br/&gt;
add these numbers for their subscorers to make it work in the same way &lt;br/&gt;
as scoring a single BooleanQuery. &lt;br/&gt;
The idea is is to either sum nrMatchers(), or to use nrMatchers() &lt;br/&gt;
for the coordination factor in the score and return 1 for nrMatchers(). &lt;br/&gt;
It might be worthwhile to add something like this in the javadocs. &lt;/p&gt;

&lt;p&gt;&amp;gt; *) All NrMatchersScorers except for BooleanScorer2 and ConjunctionScorer &lt;br/&gt;
don&apos;t &lt;br/&gt;
&amp;gt; use a similarity implementation. They compute raw scores and nrMatches. &lt;br/&gt;
&amp;gt; ConjunctionScorer is a hybrid. It uses coord-factors and is is used as &lt;br/&gt;
&amp;gt; NrMatchersScorer. This could lead to incorrect results with Similarity &lt;br/&gt;
&amp;gt; implementations other than DefaultSimilarity. A ConjunctionScorer used as &lt;br/&gt;
&amp;gt; NrMathesScorer should compute raw scores, if used as standard Scorer it  &lt;br/&gt;
&amp;gt; should use coord-factors. How can we achieve this in an elegant way? &lt;br/&gt;
&amp;gt;  &lt;br/&gt;
&amp;gt; Christoph &lt;/p&gt;

&lt;p&gt;Your&apos;re right that ConjunctionScorer has a double role here: &lt;br/&gt;
it can be used as a full replacement for BooleanScorer when all clauses  &lt;br/&gt;
are required, and it can also be used to score only the required &lt;br/&gt;
clauses combined with ReqOptScorer or ReqExclScorer for the other  &lt;br/&gt;
clauses. &lt;/p&gt;

&lt;p&gt;The implementation could only fail when ConjunctionScorer &lt;br/&gt;
provides a nrMatchers bigger than 1, and computes the coordination &lt;br/&gt;
factor into it&apos;s score. The implementation prevents &lt;br/&gt;
this by using a top level scorer that always returns 1 for nrMatchers, &lt;br/&gt;
and uses nrMatchers() of it&apos;s subscorers for the coordination factor. &lt;/p&gt;

&lt;p&gt;This is somewhat tricky, so I hope I got all the details right. &lt;/p&gt;

&lt;p&gt;It also means that the changed ConjunctionScorer should not multiply &lt;br/&gt;
a coordination factor into its score() value. I don&apos;t remember &lt;br/&gt;
whether or not it does that, but it shouldn&apos;t. &lt;/p&gt;

&lt;p&gt;One way to solve this would be to use another name for the changed &lt;br/&gt;
ConjunctionScorer, or to explicitly document that it should be &lt;br/&gt;
wrapped in a scorer that returns 1 for nrMatchers() when implementing &lt;br/&gt;
a full BooleanQuery. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Eschot. &lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; In case nrMatchers() is added to Scorer, this wrapping would not &lt;br/&gt;
be necessary, and it should be documented that it is expected that &lt;br/&gt;
the scorers for the clauses implement their own coordination factor &lt;br/&gt;
into their score and return 1 for nrMatchers(). &lt;br/&gt;
There may be a better way to implement this &apos;decoupling&apos; &lt;br/&gt;
of the coordination factor from the cooperating scorers enterely within &lt;br/&gt;
BooleanScorer2, for example by maintaining the &lt;br/&gt;
number of matching subscorers in the top level scorer, invisible &lt;br/&gt;
from the outside, and having all the cooperating scorers maintain &lt;br/&gt;
this attribute of the top level scorer instead of their own. &lt;/p&gt;

</comment>
                    <comment id="12321957" author="paul.elschot@xs4all.nl" created="Sat, 22 Jan 2005 21:07:20 +0000"  >&lt;p&gt;Created an attachment (id=14067)&lt;br/&gt;
A patch to the current BooleanQuery that forms the &quot;built into&quot;&lt;/p&gt;

&lt;p&gt;Using this patch instead of BooleanQuery.java from attachment 13739&lt;br/&gt;
also incorporates the intermediate javadoc addition to BooleanQuery.&lt;/p&gt;

&lt;p&gt;I think I can find some time in the coming weeks to remove the&lt;br/&gt;
NrMatchersScorer from attachment 13739.&lt;br/&gt;
So, in case this gets into the Lucene dev branch before that,&lt;br/&gt;
please avoid using NrMatchersScorer and the nrMatchers() method&lt;br/&gt;
it provides.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12321958" author="paul.elschot@xs4all.nl" created="Sun, 23 Jan 2005 07:25:08 +0000"  >&lt;p&gt;Created an attachment (id=14069)&lt;br/&gt;
Reworked BooleanScorer2 to drop NrMatchersScorer.&lt;/p&gt;

&lt;p&gt;Adding BooleanScorer2 to Lucene, 22 Jan 2005.&lt;/p&gt;

&lt;p&gt;The main difference with the previous patch of 12 Dec 2004&lt;br/&gt;
is that all counting of matching scorers is now done&lt;br/&gt;
locally in BooleanQuery2 using a wrapper and a few&lt;br/&gt;
inline subclasses.&lt;/p&gt;

&lt;p&gt;This allowed to get rid of NrMatchersScorer completely.&lt;br/&gt;
ConjunctionScorer is used as a summing scorer by passing&lt;br/&gt;
it a default similarity.&lt;/p&gt;

&lt;p&gt;The copyright is now assigned to the Apache Software Foundation.&lt;/p&gt;

&lt;p&gt;The implementation of explain() is still in its infancy.&lt;br/&gt;
Some &quot;Expert:&quot; annotations may still be needed in the javadocs.&lt;/p&gt;


&lt;p&gt;The code, all under Apache Licence Version 2:&lt;/p&gt;

&lt;p&gt;Test for BooleanScorer, with some example code&lt;br/&gt;
using both 1.4 scorer and new BooleanScorer2:&lt;br/&gt;
src/test/org/apache/lucene/search/TestBoolean2.java&lt;br/&gt;
(Functionality unchanged from 12 Dec 2004)&lt;/p&gt;

&lt;p&gt;Alternative for BooleanScorer, using the scorers below:&lt;br/&gt;
src/java/org/apache/lucene/search/BooleanScorer2.java&lt;br/&gt;
(Functionality changed heavily, see above).&lt;/p&gt;

&lt;p&gt;Counterpart of ConjunctionScorer, also allowing a&lt;br/&gt;
minimal nr of matchers:&lt;br/&gt;
src/java/org/apache/lucene/search/DisjunctionSumScorer.java&lt;br/&gt;
(Functionality unchanged from 12 Dec 2004, keeping&lt;br/&gt;
the nrMatchers() method but not implementing NrMatchersScorer.)&lt;/p&gt;

&lt;p&gt;Helper for case of only prohibited subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/NonMatchingScorer.java&lt;br/&gt;
I would suggest to also use this in other places instead of&lt;br/&gt;
a null Scorer, that&apos;s why it is in a separate java file.&lt;/p&gt;

&lt;p&gt;For required and prohibited subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/ReqExclScorer.java&lt;br/&gt;
(Functionality unchanged from 12 Dec 2004, except&lt;br/&gt;
for removing the nrMatchers() method.)&lt;/p&gt;

&lt;p&gt;For required and optional subscorers:&lt;br/&gt;
src/java/org/apache/lucene/search/ReqOptSumScorer.java&lt;br/&gt;
(Functionality unchanged from 12 Dec 2004, except&lt;br/&gt;
for removing the nrMatchers() method. The score()&lt;br/&gt;
method was simplified a bit.)&lt;/p&gt;


&lt;p&gt;Changes to existing code:&lt;/p&gt;

&lt;p&gt;Redirect BooleanQuery to BooleanScorer2 under&lt;br/&gt;
control of static methods setUseScorer14 and getUseScorer14,&lt;br/&gt;
default using BooleanScorer2, as requested by Doug:&lt;br/&gt;
src/java/org/apache/lucene/search/BooleanQuery.java&lt;br/&gt;
(Unchanged from the previous version of 12 Dec 2004)&lt;/p&gt;

&lt;p&gt;Added some helping code for tests by TestBoolean2,&lt;br/&gt;
This uses the setUseScorer14 method to test both versions:&lt;br/&gt;
src/test/org/apache/lucene/search/CheckHits.java&lt;br/&gt;
(Unchanged from the previous version of 12 Dec 2004)&lt;/p&gt;

&lt;p&gt;ConjunctionScorer is no more declared final,&lt;br/&gt;
and the imports are explicit:&lt;br/&gt;
src/java/org/apache/lucene/search/ConjunctionScorer.java&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12321959" author="goller@detego-software.de" created="Tue, 25 Jan 2005 04:24:12 +0000"  >&lt;p&gt;Eliminating NrMatchersScorer and putting all coord stuff into&lt;br/&gt;
Boolean2Scorer is very elegant. I committed your patch.&lt;/p&gt;

&lt;p&gt;Christoph&lt;/p&gt;</comment>
                    <comment id="12321960" author="paul.elschot@xs4all.nl" created="Fri, 28 Jan 2005 04:59:09 +0000"  >&lt;p&gt;Created an attachment (id=14116)&lt;br/&gt;
ReqExclScorer.java simplified&lt;/p&gt;

&lt;p&gt;This obsoletes the recently introduced ReqExclScorer.java .&lt;br/&gt;
It also defines the class package private instead of public.&lt;/p&gt;

&lt;p&gt;Defining the other scorers for BooleanScorer2 also package private&lt;br/&gt;
would be in line with the rest of the package.&lt;/p&gt;

&lt;p&gt;There is one thing left to do in BooleanScorer2: an implementation&lt;br/&gt;
of explain().&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12321961" author="paul.elschot@xs4all.nl" created="Tue, 1 Feb 2005 06:04:11 +0000"  >
&lt;p&gt;I&apos;m trying to get explain() to work in BooleanScorer2 and I stumbled &lt;br/&gt;
on the following. &lt;br/&gt;
In a first attempt to get explain() to work in BooleanScorer2, I need to call &lt;br/&gt;
TermScorer.explain() which gives a smaller result than TermWeight.explain(), &lt;br/&gt;
which also explains the query weight and the idf. &lt;/p&gt;

&lt;p&gt;The private TermWeight class in TermQuery.java has an explain() method &lt;br/&gt;
that calls TermScorer.explain() to explain the term frequency. &lt;/p&gt;

&lt;p&gt;I&apos;d like to move the explain() functionality from TermWeight to TermScorer to &lt;br/&gt;
fix this. However, a similar situation exists for MultiPhraseQuery, &lt;br/&gt;
PhrasePrefixQuery, PhraseQuery and SpanWeight, so that would be a lot of work. &lt;/p&gt;

&lt;p&gt;There are some alternatives: &lt;/p&gt;

&lt;p&gt;Keep the Weight close to each scorer in BooleanScorer2 which is also lot &lt;br/&gt;
of work. &lt;/p&gt;

&lt;p&gt;Use the existing BooleanScorer.explain() also for BooleanScorer2. &lt;br/&gt;
This is the current situation. &lt;/p&gt;

&lt;p&gt;I prefer the last option. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot. &lt;/p&gt;
</comment>
                    <comment id="12321962" author="paul.elschot@xs4all.nl" created="Thu, 26 May 2005 04:13:41 +0100"  >&lt;p&gt;I was about to close this bug, but then I saw that the &lt;br/&gt;
simplified ReqExclScorer.java of Jan 27 is not in the trunk. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;
</comment>
                </comments>
                    <attachments>
                    <attachment id="12312415" name="ASF.LICENSE.NOT.GRANTED--BooleanQuery2Patch2.tgz" size="11600" author="paul.elschot@xs4all.nl" created="Mon, 13 Dec 2004 03:29:03 +0000" />
                    <attachment id="12312417" name="ASF.LICENSE.NOT.GRANTED--BooleanQuery2Patch3.tgz" size="12150" author="paul.elschot@xs4all.nl" created="Sun, 23 Jan 2005 07:25:08 +0000" />
                    <attachment id="12312414" name="ASF.LICENSE.NOT.GRANTED--BooleanQuery2Patch.tgz" size="11407" author="paul.elschot@xs4all.nl" created="Tue, 9 Nov 2004 04:45:07 +0000" />
                    <attachment id="12312416" name="ASF.LICENSE.NOT.GRANTED--BooleanQueryPatch3.txt" size="3397" author="paul.elschot@xs4all.nl" created="Sat, 22 Jan 2005 21:07:20 +0000" />
                    <attachment id="12312411" name="ASF.LICENSE.NOT.GRANTED--DisjunctionScorer.java" size="8693" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:14:39 +0100" />
                    <attachment id="12312413" name="ASF.LICENSE.NOT.GRANTED--DisjunctionSumCoordScorer.java" size="1340" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:16:47 +0100" />
                    <attachment id="12312412" name="ASF.LICENSE.NOT.GRANTED--DisjunctionSumScorer.java" size="1248" author="paul.elschot@xs4all.nl" created="Wed, 20 Oct 2004 02:15:26 +0100" />
                    <attachment id="12312418" name="ASF.LICENSE.NOT.GRANTED--ReqExclScorer.java" size="4010" author="paul.elschot@xs4all.nl" created="Fri, 28 Jan 2005 04:59:09 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>31785</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 27 Oct 2004 03:36:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13455</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27437</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>