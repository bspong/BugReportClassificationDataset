<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3218/LUCENE-3218.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3218] Make CFS appendable  </title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3218</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently CFS is created once all files are written during a flush / merge. Once on disk the files are copied into the CFS format which is basically a unnecessary for some of the files. We can at any time write at least one file directly into the CFS which can save a reasonable amount of IO. For instance stored fields could be written directly during indexing and during a Codec Flush one of the written files can be appended directly. This optimization is a nice sideeffect for lucene indexing itself but more important for DocValues and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3216&quot; title=&quot;Store DocValues per segment instead of per field&quot;&gt;&lt;del&gt;LUCENE-3216&lt;/del&gt;&lt;/a&gt; we could transparently pack per field files into a single file only for docvalues without changing any code once &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3216&quot; title=&quot;Store DocValues per segment instead of per field&quot;&gt;&lt;del&gt;LUCENE-3216&lt;/del&gt;&lt;/a&gt; is resolved.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12510917">LUCENE-3218</key>
            <summary>Make CFS appendable  </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Jun 2011 08:52:31 +0100</created>
                <updated>Fri, 10 May 2013 11:42:50 +0100</updated>
                    <resolved>Fri, 4 Nov 2011 22:07:06 +0000</resolved>
                            <version>3.4</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13052152" author="simonw" created="Mon, 20 Jun 2011 19:50:45 +0100"  >&lt;p&gt;first sketch still some nocommits - this patch includes the latest patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3201&quot; title=&quot;improved compound file handling&quot;&gt;&lt;del&gt;LUCENE-3201&lt;/del&gt;&lt;/a&gt; which made the CFS part of directory. This patch adds write support to the CompoundFileDirectory. The CFWriter tries to write files directly to the CFS if possible like when no other file is currently open for writing it opens a stream directly on the CFS. Yet, this change also adds a new file to the CFS (.cfe) which only holds the entry table which makes all seeks unneeded (plays better with AppendingCodec).&lt;/p&gt;

&lt;p&gt;I currently don&apos;t use it during indexing since we decided after flush if we use CFS or not. Yet this might change with this optimization but I will leave this to another issue.&lt;/p&gt;
</comment>
                    <comment id="13052222" author="mikemccand" created="Mon, 20 Jun 2011 22:07:58 +0100"  >&lt;p&gt;Patch looks cool!&lt;/p&gt;

&lt;p&gt;So the CFW will take the first output opened against it and let it write&lt;br/&gt;
directly into the &quot;actual&quot; CFS file, and then if another file is&lt;br/&gt;
opened while that first one is still open, the 2nd file will write to&lt;br/&gt;
separate file and then will copy in on close.  We may want to delegate&lt;br/&gt;
the separate files too?  So that on close they copy themselves into&lt;br/&gt;
the CFS and remove the original?  This way IW won&apos;t have to separately&lt;br/&gt;
create CFS in the end.&lt;/p&gt;

&lt;p&gt;Somehow we need IW to add the biggest sub-file first...&lt;/p&gt;

&lt;p&gt;s/compund/compound&lt;/p&gt;

&lt;p&gt;CFW.close should assert currentOutput != null (and, if we delegate sep&lt;br/&gt;
entries, that they are also all closed)?&lt;/p&gt;

&lt;p&gt;You might need to sync the CompoundFileWriter.this.currentOutput test&lt;br/&gt;
/ setting to null?  Though... Lucene is always single threaded in&lt;br/&gt;
writing files for the same segment, today anyway.&lt;/p&gt;

&lt;p&gt;Can we make a separate createCompoundOutput?  (Ie, instaed of passing&lt;br/&gt;
OpenMode to openCompoundInput).  And: I&apos;m assuming a given compound&lt;br/&gt;
output can only be opened once, appended to / separate files copied&lt;br/&gt;
into, closed and then never opened again for writing?  (Ie, still&lt;br/&gt;
&quot;write once&quot; at the file level).&lt;/p&gt;</comment>
                    <comment id="13052468" author="simonw" created="Tue, 21 Jun 2011 11:46:14 +0100"  >&lt;p&gt;next iteration - seems close. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;moved CFW to o.a.l.store and made package private.&lt;/li&gt;
	&lt;li&gt;added createCompoundOutput to Directory instead of passing OpenMode&lt;/li&gt;
	&lt;li&gt;added write support to CompundFileDirectory&lt;/li&gt;
	&lt;li&gt;Separately written file are appended during close if possible (no other file is currently written directly to the CF). If files is locked append happens once that file is closed.&lt;/li&gt;
	&lt;li&gt;IW uses Directory methods only, addFile has been converted to Directory#copy&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;once thing which still bugs me is the setAbortCheck on CFDirectory.. I wonder if we can solve that differently, ideas?&lt;/p&gt;</comment>
                    <comment id="13052586" author="simonw" created="Tue, 21 Jun 2011 15:23:22 +0100"  >&lt;p&gt;updated patch NOW containing all files &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;sorry for the missing files in the last patch&lt;/p&gt;</comment>
                    <comment id="13052597" author="mikemccand" created="Tue, 21 Jun 2011 15:46:12 +0100"  >&lt;p&gt;Patch looks great!&lt;/p&gt;

&lt;p&gt;Can we name it createCompoundOutput?  Emphasizes that we are&lt;br/&gt;
write-once (this file shouldn&apos;t exist), and matches createOutput.&lt;/p&gt;

&lt;p&gt;On checkAbort... we could not send that to the CFW and instead call&lt;br/&gt;
checkAbort in the outer loops?  (Ie, where we .copy the files in).&lt;br/&gt;
The existing CFW already only checks once-per-file anyway...&lt;/p&gt;

&lt;p&gt;Maybe instead of asserts for the mis-use of the CFD API (eg no&lt;br/&gt;
entries, something is still open), we should make these real&lt;br/&gt;
exceptions (ie, thrown even when assertions are off)?&lt;/p&gt;

&lt;p&gt;This comment looks stale (in CFW.java)?:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;      // Close the output stream. Set the os to null before trying to
      // close so that if an exception occurs during the close, the
      // finally clause below will not attempt to close the stream
      // the second time.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;openCompoundOutput needs javadoc.&lt;/p&gt;

&lt;p&gt;CFD.createOutput&apos;s jdoc says Not Implememented but it is.&lt;/p&gt;

&lt;p&gt;The new test cases in TestCompoundFile names its file d.csf &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Column&lt;br/&gt;
stride fields lives on!!  Too many tlas...&lt;/p&gt;</comment>
                    <comment id="13052615" author="simonw" created="Tue, 21 Jun 2011 16:16:53 +0100"  >&lt;p&gt;final patch. &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fixed javadocs + several javadoc warnings&lt;/li&gt;
	&lt;li&gt;renamed openCompoundOutput to createCompoundOutput&lt;/li&gt;
	&lt;li&gt;fixed file extensions in test CSF LOL!!&lt;/li&gt;
	&lt;li&gt;copyFileEntry now deletes files that are separately written once copied into the CFS.&lt;/li&gt;
	&lt;li&gt;converted asserts to exceptions in CFW&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I plan to commit this today if nobody objects.&lt;/p&gt;</comment>
                    <comment id="13052633" author="simonw" created="Tue, 21 Jun 2011 16:54:23 +0100"  >&lt;p&gt;Committed in revision 1138063.&lt;br/&gt;
I will try to backport this to 3.x if possible&lt;/p&gt;</comment>
                    <comment id="13053140" author="simonw" created="Wed, 22 Jun 2011 10:16:26 +0100"  >&lt;p&gt;here is a patch against 3.x. I had to change one test in lucene/backwards and remove some tests from there which used the CFW / CFR.&lt;/p&gt;

&lt;p&gt;A review would be good here!&lt;/p&gt;</comment>
                    <comment id="13053152" author="rcmuir" created="Wed, 22 Jun 2011 11:26:12 +0100"  >&lt;p&gt;Hi Simon, currently this attached patch fails... not sure why yet.&lt;/p&gt;

&lt;p&gt;But I think we should resolve this tests issue before backporting&lt;/p&gt;</comment>
                    <comment id="13053172" author="simonw" created="Wed, 22 Jun 2011 11:53:45 +0100"  >&lt;p&gt;thank you robert, while this has actually been tested since its in the base class though its now cleaner. The test failure came from RAMDirectory simply overriding existing files. I added an explicit check for it.&lt;/p&gt;</comment>
                    <comment id="13053181" author="rcmuir" created="Wed, 22 Jun 2011 12:09:32 +0100"  >&lt;p&gt;Thanks Simon, I feel better now that we get our open-files-for-write tracking back.&lt;/p&gt;</comment>
                    <comment id="13053240" author="simonw" created="Wed, 22 Jun 2011 14:14:19 +0100"  >&lt;p&gt;backported to 3.x - thanks guys&lt;/p&gt;</comment>
                    <comment id="13086877" author="rcmuir" created="Thu, 18 Aug 2011 09:22:05 +0100"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3374&quot; title=&quot;move nrtcachingdir to core in 4.0&quot;&gt;&lt;del&gt;LUCENE-3374&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3380&quot; title=&quot;enable FileSwitchDirectory randomly in tests and fix compound-file/NoSuchDirectoryException bugs&quot;&gt;LUCENE-3380&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some serious traps here with how the CFE files are created for &quot;delegator&quot;-like Directory impls such as FileSwitchDirectory and NRTCachingDirectory.&lt;/p&gt;

&lt;p&gt;With such dirs that might have policies the writer is &quot;backdooring&quot; their decision about where files should go since it only has a reference to the &quot;sub&quot; directory.&lt;/p&gt;

&lt;p&gt;I think this is non-intuitive and we should do something to try to prevent surprises.&lt;/p&gt;</comment>
                    <comment id="13086896" author="rcmuir" created="Thu, 18 Aug 2011 09:55:03 +0100"  >&lt;p&gt;Can CFS reading/writing not take a parent directory, instead of:&lt;/p&gt;

&lt;p&gt;CompoundFileDirectory(Directory parent, ....)&lt;/p&gt;

&lt;p&gt;I think it should be&lt;br/&gt;
CompoundFileDirectory(IndexInput cfs, IndexInput cfe)&lt;/p&gt;

&lt;p&gt;And directory.createOutput etc should take &lt;b&gt;both&lt;/b&gt; filenames, this would remove this backdooring completely.&lt;/p&gt;</comment>
                    <comment id="13087700" author="mikemccand" created="Fri, 19 Aug 2011 14:20:01 +0100"  >&lt;p&gt;Maybe we can avoid making a separate _X.cfe file?&lt;/p&gt;

&lt;p&gt;We did this because previously the CFS stored the header in the front of the file (I think)?&lt;/p&gt;

&lt;p&gt;Could we, instead, put the header at the end of the file, but place a long pointer at the start of the file saying where the header is located (I&apos;d rather not rely on file.length())?  Then we could have a single (_X.cfs) file again and we can not use the Dir impl for delegation?&lt;/p&gt;</comment>
                    <comment id="13087702" author="simonw" created="Fri, 19 Aug 2011 14:30:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;We did this because previously the CFS stored the header in the front of the file (I think)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;is this really the problem here? I mean this problem is in FileSwitch / NRT Directory. The CFS uses a directory to write files, I would expect that if we use for instance NRT directory it gets the NRT directory instead of either of of its sub directories. its not really a CFS problem IMO and we should rather fix the actual directory rather than reverting the small optimization having the header in a separate file. i think we should prevent the seek if not absolutely necessary.&lt;/p&gt;</comment>
                    <comment id="13087704" author="creamyg" created="Fri, 19 Aug 2011 14:34:38 +0100"  >&lt;p&gt;I don&apos;t fully grok Robert&apos;s concern, but with regards to Mike&apos;s suggestion of&lt;br/&gt;
inlining the metadata: Why not put that file pointer at the very end of the&lt;br/&gt;
file?  So that the read-time sequence of actions is: seek to 8 bytes before the&lt;br/&gt;
end, read the file pointer, seek back to beginning of metadata.&lt;/p&gt;

&lt;p&gt;That way you don&apos;t need to seek backwards during writing, which IIRC used to&lt;br/&gt;
be an issue for Hadoop.&lt;/p&gt;</comment>
                    <comment id="13087712" author="rcmuir" created="Fri, 19 Aug 2011 14:48:02 +0100"  >&lt;p&gt;This is definitely not a bug in the directory, and its a serious issue (i think a blocker for release myself).&lt;/p&gt;

&lt;p&gt;I&apos;ll try to explain the issue again a little better than I did on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3380?focusedCommentId=13086872&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13086872&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-3380?focusedCommentId=13086872&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13086872&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just an example of the API problem, with FileSwitchDirectory.&lt;/p&gt;

&lt;p&gt;In Lucene we have FileSwitchDirectory which is a Directory that lets you &quot;switch&quot; between 2 different directory implementations based on file extension.&lt;br/&gt;
So conceptually it looks like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
FileSwitchDirectory &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Directory {
  Directory a;
  Directory b;
  Set extensions; &lt;span class=&quot;code-comment&quot;&gt;// these are the file extensions that go to &lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;, all other ones are handled by &lt;span class=&quot;code-quote&quot;&gt;&quot;b&quot;&lt;/span&gt;
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Imagine you configure this directory to put all &quot;*.cfs&quot; in &quot;a&quot;, and everything else in &quot;b&quot;.&lt;/p&gt;

&lt;p&gt;So when FileSwitchDirectory is asked where to put &quot;1.cfs&quot;, it forwards the request to &quot;a&quot;.&lt;/p&gt;

&lt;p&gt;But the &quot;1.cfe&quot; file is actually wrongly created in &quot;a&quot; also, causing FileNotFoundExceptions later when the file is to be read, because its in the wrong directory. This is because of how the compound file mechanism works now, it calls a.createOutput(&quot;1.cfe&quot;) instead of fileswitchdirectory.createOutput(&quot;1.cfe&quot;).&lt;/p&gt;

&lt;p&gt;So this is a serious problem for any Directories that delegate responsibility like this, not just the ones in Lucene.&lt;/p&gt;</comment>
                    <comment id="13087716" author="thetaphi" created="Fri, 19 Aug 2011 14:51:46 +0100"  >&lt;p&gt;Thanks Robert for explaining this again, I agree 100% with you, the current cfe/cfs discussion is really serious and the current impl is heavy broken.&lt;/p&gt;</comment>
                    <comment id="13087719" author="rcmuir" created="Fri, 19 Aug 2011 14:52:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Maybe we can avoid making a separate _X.cfe file?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, this sounds great (however it can be done, ideally with Marvin&apos;s idea to support appendable-only filesystems also), and would end the confusion here.&lt;/p&gt;</comment>
                    <comment id="13087723" author="thetaphi" created="Fri, 19 Aug 2011 14:58:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;i think we should prevent the seek if not absolutely necessary.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You have a very small optimization here that only affects opening the CFS.&lt;/p&gt;

&lt;p&gt;But because we need to fix the wrong behaviour in FileSwitch (and also NRTCaching dir, which is in my opinion more serious!!!!), FileSwitch and NRTCachingDir now use the default CompoundFileImpl. If you wrap MMapDir by FileSwitch or NRTCaching, the whole custom impl of the compound file in MMap that speeds up even further is obsolete, as not used (you can use the compound file with really no slowdown at all as we can map parts of the CFS file into memeory and need no offset calculations and can also save mapping costs).&lt;/p&gt;

&lt;p&gt;This is gone now, just because a one-time seek at opening time is prevented.&lt;/p&gt;</comment>
                    <comment id="13087724" author="rcmuir" created="Fri, 19 Aug 2011 15:01:46 +0100"  >&lt;p&gt;Right, the fix I applied is really a hack, but I didnt want to leave our codebase broken while we figure this out.&lt;/p&gt;

&lt;p&gt;Its not just a problem from a performance perspective, I think its just bad to make assumptions about how the inner directory works.&lt;br/&gt;
In this case with fileswitchdirectory etc, it really should be fully delegating this stuff down, and be clueless about how its implemented by the underlying sub directory.&lt;/p&gt;</comment>
                    <comment id="13087760" author="mikemccand" created="Fri, 19 Aug 2011 16:27:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Why not put that file pointer at the very end of the&lt;br/&gt;
file? So that the read-time sequence of actions is: seek to 8 bytes before the&lt;br/&gt;
end, read the file pointer, seek back to beginning of metadata.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would rather not rely on metadata (file length) when reading, only the contents of the file.&lt;/p&gt;

&lt;p&gt;I think append-only filesystems (eg HDFS) can make their own impl that uses the file length instead (like AppendingCodecc).&lt;/p&gt;</comment>
                    <comment id="13087769" author="rcmuir" created="Fri, 19 Aug 2011 16:42:24 +0100"  >&lt;p&gt;Anyone have opinions on 3.x? &lt;/p&gt;

&lt;p&gt;I think it might be wise to think about pulling these CFS changes (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3201&quot; title=&quot;improved compound file handling&quot;&gt;&lt;del&gt;LUCENE-3201&lt;/del&gt;&lt;/a&gt;, too) back from 3.x and instead&lt;br/&gt;
give things some time to settle in trunk?&lt;/p&gt;

&lt;p&gt;We could always then backport at a later release, but we got lucky here that we still haven&apos;t released anything.&lt;/p&gt;</comment>
                    <comment id="13087963" author="ab" created="Fri, 19 Aug 2011 21:54:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think append-only filesystems (eg HDFS) can make their own impl that uses the file length instead (like AppendingCodecc).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;AppendingCodec solves only one issue, that of postings and SegmentInfos. I&apos;m worried that adding seek+rewrite tricks in other places that are not under the control of Codec or under any other configurable implementation (such as CFS) will ultimately prevent the efficient use of Lucene on Hadoop. Unless we put those places under the control of a Codec (or some other configurable interface).&lt;/p&gt;</comment>
                    <comment id="13087972" author="thetaphi" created="Fri, 19 Aug 2011 22:04:31 +0100"  >&lt;p&gt;The trick with the latest updates to compound files is that the CompoundFileWriter/Reader is returned by the directory implementation - and this is broken and the discussion is about this.&lt;br/&gt;
So this would be the place, where you theoretically could completely make another CFS on-disk format or e.g. write the stuff to a ZIP file &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;See here: &lt;a href=&quot;https://builds.apache.org/job/Lucene-3.x/javadoc/core/org/apache/lucene/store/Directory.html#createCompoundOutput(java.lang.String)&quot; class=&quot;external-link&quot;&gt;https://builds.apache.org/job/Lucene-3.x/javadoc/core/org/apache/lucene/store/Directory.html#createCompoundOutput(java.lang.String)&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13087987" author="simonw" created="Fri, 19 Aug 2011 22:28:54 +0100"  >&lt;p&gt;personally I think we should try to be append only on general. So eventually this is about creating the cfe and cfs file from the &quot;right&quot; directory. What we could do to use the parent ie. FileSwitchDir etc. is add a protected method that allows passing the parent dir to the createCompoundOutput / openCompoundInput which is then in turn used to create the actual files. We can call this method from the public createCompoundOutput / openCompoundInput versions with &quot;this&quot; as the directory to create files. How does that sound? Lemme know if I miss something...&lt;/p&gt;</comment>
                    <comment id="13087993" author="rcmuir" created="Fri, 19 Aug 2011 22:34:51 +0100"  >&lt;p&gt;I disagree, we don&apos;t need to compensate for hadoop&apos;s problems.&lt;/p&gt;</comment>
                    <comment id="13087998" author="thetaphi" created="Fri, 19 Aug 2011 22:39:13 +0100"  >&lt;p&gt;If we want append only, we should also remove seek methods from IndexOutput... I DISAGREE, too!&lt;/p&gt;</comment>
                    <comment id="13088005" author="rcmuir" created="Fri, 19 Aug 2011 22:48:52 +0100"  >&lt;blockquote&gt;
&lt;p&gt;So eventually this is about creating the cfe and cfs file from the &quot;right&quot; directory.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s not the only issue: while that is the primary reason I reopened this issue I also have concerns about the API being complicated and non-intuitive.&lt;/p&gt;

&lt;p&gt;Making the API even more complicated because Filesystem X can only write WingDings or cannot seek doesn&apos;t seem to be a good solution to me.&lt;/p&gt;</comment>
                    <comment id="13088067" author="thetaphi" created="Sat, 20 Aug 2011 00:30:10 +0100"  >&lt;p&gt;When looking into the CompoundFileDirectory code I also found a small bug in version handling.&lt;br/&gt;
readEntries() reads the first VInt and uses it for version checking (if negative). This check has 2 problems:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if the VInt is smaller then FORMAT_CURRENT it should throw IndexTooNewException&lt;/li&gt;
	&lt;li&gt;the comparison should not be against FORMAT_CURRENT itsself (this constant should only be used for writing CFS files), it should compare against real version numbers. This would otherwise break on later additions of new formats.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13088166" author="rcmuir" created="Sat, 20 Aug 2011 10:05:17 +0100"  >&lt;p&gt;I think the situation here is too complicated already, we are discussing all kinds of complicated stuff and I dont think &quot;appendable&quot; CFS is worth any of this.&lt;/p&gt;

&lt;p&gt;I think we should back out these CFS changes for now.&lt;/p&gt;</comment>
                    <comment id="13088206" author="mikemccand" created="Sat, 20 Aug 2011 17:06:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should back out these CFS changes for now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Generally if we add a cool optimization and it turns out that optimization risks even just apparent index corruption and/or adds scary traps / confusing complexity to the API I think we should pull the change and iterate on the issue / branch until these problems are addressed?&lt;/p&gt;

&lt;p&gt;We had a similar experience with copyBytes, but that time it was real corruption.&lt;/p&gt;

&lt;p&gt;Optimizations aren&apos;t worth such risks I think, especially if it&apos;s only an index-time opto?&lt;/p&gt;</comment>
                    <comment id="13088321" author="simonw" created="Sun, 21 Aug 2011 07:13:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should back out these CFS changes for now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;-1 &lt;/p&gt;

&lt;p&gt;I think we are over reacting here, especially robert gets too crazy about this. Honestly I think CFS should be detached from directory and we should make it a delegating directory if at all. That way we would always operate on the right directory, can safely create two files and keep Directory itself clean. We can still add the ability to partially map a certain file (offset, length) into memory like we do now in the specialized CFS Dirs. This entire think is not a problem of appending at all IMO. &lt;/p&gt;

&lt;p&gt;how does that sound? I think this would solve all the problems we are having and keeps it appendable.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13088335" author="thetaphi" created="Sun, 21 Aug 2011 11:19:08 +0100"  >&lt;p&gt;Hi when thinking about the whole stuff one more time again, I may have a solution to again decouple CFS from the parent directory, so one can create any CFS using one single class (but perhaps the factory in directory is still an idea to make it customizable). There are several solutions, but most of them have customization problems:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The current approach was discussed already, nothing more to say&lt;/li&gt;
	&lt;li&gt;A possibility to make it possible for MMap to map certain parts of the file is to move the getIndexInputSlice up to the abstract Directory base class and make the default implementation the current CFIndexInput from the default CFS impl. This would be even backwards compatible. So the CFS impl can simply ask the parent directory it warps for a slice. The problem here is easy: Current CFS impl opens the CFS file exactly one time and consumes exactly one file handle. The slices work on the same file handle. If we move the slice handling up to the directory, the &quot;state&quot; is gone, so handling the all-the-time open CFS file cannot be managed anymore. When using a new file handle for each slice, we gain nothing (CFS is to reduce file handles).&lt;/li&gt;
	&lt;li&gt;Last night I had one idea that might fix this issue. Lets move the slice handling into the abstract IndexInput base class, again the default impl would simply use the current CFIndexInput to return a slice. In the case of MMapIndexInput it would simply return a remapped slice on the current file handle. The only thing that would change is that the RAF would kept open the wohle time (like MMapCFDirectory does), in contrast to curren, where th RAF is closed directly after mapping. This approach would allow it for the CFS impl to simply ask it parant directory for an IndexInput to handle the SFC file itsself and for each sub-slice ask this IndexInput for this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The last approach seems reasonable, but we need some more checks how to implement that. The last approach keeps both &quot;features&quot; of CFS:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;One OS file handle&lt;/li&gt;
	&lt;li&gt;possibility for certain directory implementations to return sliced IndexInputs in an optimal way. The current IndexInput have a clone method, in this case we would need a similar method, where you can give offset and length.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;On the other hand, we can remove the &quot;factory&quot; for CFS files from directory, we can go back to a simple new CFSDirectory(parentDirectory, cfsName).&lt;/p&gt;

&lt;p&gt;Does this sound reasonable?&lt;/p&gt;</comment>
                    <comment id="13088338" author="rcmuir" created="Sun, 21 Aug 2011 11:30:17 +0100"  >&lt;p&gt;None of this is reasonable.&lt;/p&gt;

&lt;p&gt;When something goes wrong with an optimization, and multiple people ask for you to back it out, back it out.&lt;/p&gt;

&lt;p&gt;then later we can discuss how to re-implement it.&lt;/p&gt;
</comment>
                    <comment id="13088344" author="thetaphi" created="Sun, 21 Aug 2011 11:47:27 +0100"  >&lt;p&gt;But we can still consider this as solutions to solve the issue later? I just dont want to make suggestions with lots of brainwork and sleepless nights involved, if it&apos;s not considered and just be backed out with &quot;None of this is reasonable.&quot;.&lt;/p&gt;</comment>
                    <comment id="13088359" author="mikemccand" created="Sun, 21 Aug 2011 14:09:31 +0100"  >&lt;p&gt;I think both Simon&apos;s and Uwe&apos;s ideas are good and should be explored!  With all these ideas we will find a clean way to get CFS reading/writing integrated into Directory.&lt;/p&gt;

&lt;p&gt;But I think that exploration should just be outside of trunk and 3.x, eg on a branch.  Once we iterate to a good point again we can commit it back to trunk, let it bake/age, then merge back to 3.x if it seems stable.&lt;/p&gt;</comment>
                    <comment id="13088379" author="markrmiller@gmail.com" created="Sun, 21 Aug 2011 15:40:41 +0100"  >&lt;p&gt;+1 on backing out of 3.x at least - this is our stable branch...I can&apos;t imagine this optimization belongs in our stable branch given all of this discussion...&lt;/p&gt;</comment>
                    <comment id="13088392" author="simonw" created="Sun, 21 Aug 2011 16:43:08 +0100"  >&lt;p&gt;its all yours do whatever you think needs to be done. have fun &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13088395" author="simonw" created="Sun, 21 Aug 2011 16:45:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;None of this is reasonable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;your unreasonable comments here are totally counter productive IMO. Just my $0.05 &lt;/p&gt;</comment>
                    <comment id="13088411" author="markrmiller@gmail.com" created="Sun, 21 Aug 2011 18:37:16 +0100"  >&lt;p&gt;Isn&apos;t there a lot of middle ground here? Why don&apos;t we just back out of 3.x for now and keep pushing towards a consensus implementation on trunk?&lt;/p&gt;</comment>
                    <comment id="13088640" author="simonw" created="Mon, 22 Aug 2011 13:11:05 +0100"  >&lt;p&gt;FYI - I backed out the changes from 3.x &lt;/p&gt;</comment>
                    <comment id="13088734" author="thetaphi" created="Mon, 22 Aug 2011 15:33:34 +0100"  >&lt;p&gt;Showuld we send an email to java-user as the index format in the stable branch changed by this (indexes with new CFS files can no longer be read)?&lt;/p&gt;</comment>
                    <comment id="13088796" author="simonw" created="Mon, 22 Aug 2011 17:17:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;Showuld we send an email to java-user as the index format in the stable branch changed by this (indexes with new CFS files can no longer be read)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will do&lt;/p&gt;</comment>
                    <comment id="13088799" author="simonw" created="Mon, 22 Aug 2011 17:21:58 +0100"  >&lt;p&gt;here is a rough patch against trunk that detaches CFDirectory from other dir impls but still extends Directory. all optimizations still remain while always the top-level directory is used to create / open the CFS. &lt;br/&gt;
I didn&apos;t follow uwes last approach since I could figure out when to close the RAF reference since like in the MMap case we want to forcefully unmap the file and therefor would also need to close the RAF reference in the base stream. I use a helper construct (IndexInputHandle - yes need to find a better name) that can only be pulled from another directory (protected). So this is private to the directory impls but solves our cases here nicely I think.&lt;/p&gt;

&lt;p&gt;still rough but its a start.&lt;/p&gt;</comment>
                    <comment id="13088826" author="thetaphi" created="Mon, 22 Aug 2011 18:12:47 +0100"  >&lt;p&gt;Hi Simon,&lt;/p&gt;

&lt;p&gt;thanks for taking care. This looks really nice and easier to understand. I agree, the problem with the RAF open file is hard to manage (especially when to close it).&lt;/p&gt;

&lt;p&gt;One small suggestion: Currently the CFS file is opened twice: One time to read the contents and a second time to read the actual files using the handle (and for new format to read the CFE file, but thats unavoidable - once we nuke old index support in Lucene 5, we can always open the cfe first and read the contents, but until then we need to do both). Why not open the IndexInputHandle at the beginning and then simply request a full slice for the directory initialization (or ideally only that part that contains the directory)? The slice can then be closed afterwards as before.&lt;/p&gt;

&lt;p&gt;So very cool work!&lt;br/&gt;
Greetings from Berkeley!&lt;/p&gt;</comment>
                    <comment id="13088838" author="rcmuir" created="Mon, 22 Aug 2011 18:39:07 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This looks really nice and easier to understand.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree! At a glance, it seems this design looks much better to and avoids the sneaky delegation problems.&lt;/p&gt;

&lt;p&gt;Only one minor thing glancing at the patch: in MockDirectoryWrapper, can we track that the handle is actually closed?&lt;/p&gt;</comment>
                    <comment id="13089343" author="simonw" created="Tue, 23 Aug 2011 09:21:55 +0100"  >&lt;p&gt;next iteration&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;removed 3.4 support for the current format (cfe file) in SI&lt;/li&gt;
	&lt;li&gt;regenerated the BW test indices (not in the patch)&lt;/li&gt;
	&lt;li&gt;add javadoc for IndexInputHandle&lt;/li&gt;
	&lt;li&gt;added IndexInputHandle#openFullSlice to get a slice spanning the entire file.&lt;/li&gt;
	&lt;li&gt;Track indexInputHandle instances in MockDirectoryWrapper to ensure they are closed.&lt;/li&gt;
	&lt;li&gt;Use the IndexInputHandle ie. the underlying file handle to create all streams in CFS (uwes suggestion - thanks for that)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I didn&apos;t include the generated indices for bw tests in the patch for size / readability. Yet, if you want to run the tests you need to generate them otherwise TestBackwardsCompatibility will fail.&lt;/p&gt;

&lt;p&gt;this seems close, the question is if we want to backport this to 3.x too?&lt;/p&gt;</comment>
                    <comment id="13089631" author="mikemccand" created="Tue, 23 Aug 2011 19:12:14 +0100"  >&lt;p&gt;This approach looks nice!  Maybe rename IndexInputHandle to&lt;br/&gt;
IndexInputProvider?  IndexInputSlicer?  SliceCreator?&lt;/p&gt;

&lt;p&gt;Maybe rename CSIndexInput -&amp;gt; SlicedIndexInput?&lt;/p&gt;

&lt;p&gt;In SimpleFSDir we may as well move that static Descriptor class out?&lt;br/&gt;
Rather than having to import it to itself.&lt;/p&gt;</comment>
                    <comment id="13089639" author="markrmiller@gmail.com" created="Tue, 23 Aug 2011 19:19:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;this seems close, the question is if we want to backport this to 3.x too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why don&apos;t we get it committed to trunk and let it chill for a while, let it hit random testing for a while, get used by adventurous users, and then make the decision?&lt;/p&gt;</comment>
                    <comment id="13089651" author="simonw" created="Tue, 23 Aug 2011 19:33:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why don&apos;t we get it committed to trunk and let it chill for a while, let it hit random testing for a while, get used by adventurous users, and then make the decision?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13089653" author="simonw" created="Tue, 23 Aug 2011 19:34:16 +0100"  >&lt;p&gt;I don&apos;t really like the name IndexInputHandle what about&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;IndexInputFactory&lt;/li&gt;
	&lt;li&gt;IndexInputProducer&lt;/li&gt;
	&lt;li&gt;IndexInputSlicer&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;more ideas?&lt;/p&gt;</comment>
                    <comment id="13090023" author="thetaphi" created="Wed, 24 Aug 2011 07:21:43 +0100"  >&lt;p&gt;I would also rename CFIndexInput to SliceIndexInput, it&apos;s private so does not matter, but wozuld be nice to have.&lt;/p&gt;

&lt;p&gt;Otherwise I agree with committing to trunk. As far as I see, the format did not change in trunk, so once we get this back into 3.x we are at the state pre-revert?&lt;/p&gt;</comment>
                    <comment id="13090084" author="simonw" created="Wed, 24 Aug 2011 09:28:20 +0100"  >&lt;p&gt;new patch, I renamed IndexInputHandle to IndexInputSlicer and made the createSlicer method public otherwise Directory impls outside of o.a.l.store can not delegate to it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I would also rename CFIndexInput to SliceIndexInput, it&apos;s private so does not matter, but wozuld be nice to have.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;done&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Otherwise I agree with committing to trunk. As far as I see, the format did not change in trunk, so once we get this back into 3.x we are at the state pre-revert?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes that&apos;s true.&lt;/p&gt;

&lt;p&gt;I think is ready to commit, if nobody objects I am going to commit this later today.&lt;/p&gt;</comment>
                    <comment id="13090320" author="simonw" created="Wed, 24 Aug 2011 17:05:53 +0100"  >&lt;p&gt;I committed this to trunk. I will leave this issue open until we decide to backport to 3.x.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13123107" author="rcmuir" created="Fri, 7 Oct 2011 20:33:25 +0100"  >&lt;p&gt;not a blocker, it was pulled from 3.x (and fixed in trunk)&lt;/p&gt;</comment>
                    <comment id="13144396" author="simonw" created="Fri, 4 Nov 2011 22:07:06 +0000"  >&lt;p&gt;I am closing this - we are not backporting this to 3.x and its committed &amp;amp; stable on trunk&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12510247">LUCENE-3201</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12510914">LUCENE-3216</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12483419" name="LUCENE-3218_3x.patch" size="103727" author="simonw" created="Wed, 22 Jun 2011 10:16:26 +0100" />
                    <attachment id="12491450" name="LUCENE-3218.patch" size="70260" author="simonw" created="Wed, 24 Aug 2011 09:28:20 +0100" />
                    <attachment id="12491323" name="LUCENE-3218.patch" size="70289" author="simonw" created="Tue, 23 Aug 2011 09:21:55 +0100" />
                    <attachment id="12491224" name="LUCENE-3218.patch" size="64698" author="simonw" created="Mon, 22 Aug 2011 17:21:58 +0100" />
                    <attachment id="12483298" name="LUCENE-3218.patch" size="106783" author="simonw" created="Tue, 21 Jun 2011 16:16:52 +0100" />
                    <attachment id="12483293" name="LUCENE-3218.patch" size="106903" author="simonw" created="Tue, 21 Jun 2011 15:23:22 +0100" />
                    <attachment id="12483263" name="LUCENE-3218.patch" size="85144" author="simonw" created="Tue, 21 Jun 2011 11:46:14 +0100" />
                    <attachment id="12483191" name="LUCENE-3218.patch" size="63748" author="simonw" created="Mon, 20 Jun 2011 19:50:45 +0100" />
                    <attachment id="12483427" name="LUCENE-3218_test_fix.patch" size="3309" author="simonw" created="Wed, 22 Jun 2011 11:53:45 +0100" />
                    <attachment id="12483423" name="LUCENE-3218_tests.patch" size="2646" author="rcmuir" created="Wed, 22 Jun 2011 11:26:12 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 20 Jun 2011 21:07:58 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2886</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24479</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>