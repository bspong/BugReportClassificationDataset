<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1712/LUCENE-1712.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1712] Set default precisionStep for NumericField and NumericRangeFilter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1712</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a spinoff from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1701&quot; title=&quot;Add NumericField, make plain text numeric parsers public in FieldCache, move trie parsers to FieldCache&quot;&gt;&lt;del&gt;LUCENE-1701&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A user using Numeric* should not need to understand what&apos;s&lt;br/&gt;
&quot;under the hood&quot; in order to do their indexing &amp;amp; searching.&lt;/p&gt;

&lt;p&gt;They should be able to simply:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
doc.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericField(&lt;span class=&quot;code-quote&quot;&gt;&quot;price&quot;&lt;/span&gt;, 15.50);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And have a decent default precisionStep selected for them.&lt;/p&gt;

&lt;p&gt;Actually, if we add ctors to NumericField for each of the supported&lt;br/&gt;
types (so the above code works), we can set the default per-type.  I&lt;br/&gt;
think we should do that?&lt;/p&gt;

&lt;p&gt;4 for int and 6 for long was proposed as good defaults.&lt;/p&gt;

&lt;p&gt;The default need not be &quot;perfect&quot;, as advanced users can always&lt;br/&gt;
optimize their precisionStep, and for users experiencing slow&lt;br/&gt;
RangeQuery performance, NumericRangeQuery with any of the defaults we&lt;br/&gt;
are discussing will be much faster.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12428609">LUCENE-1712</key>
            <summary>Set default precisionStep for NumericField and NumericRangeFilter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Jun 2009 22:05:59 +0100</created>
                <updated>Tue, 14 Jul 2009 10:18:25 +0100</updated>
                    <resolved>Tue, 14 Jul 2009 10:18:25 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12722831" author="thetaphi" created="Mon, 22 Jun 2009 22:12:14 +0100"  >&lt;p&gt;Should be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
doc.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericField(&lt;span class=&quot;code-quote&quot;&gt;&quot;price&quot;&lt;/span&gt;).setFloatValue(15.50f));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With a direct constructor, there would be the problem of missing data type information.&lt;/p&gt;</comment>
                    <comment id="12722835" author="mikemccand" created="Mon, 22 Jun 2009 22:19:30 +0100"  >&lt;blockquote&gt;&lt;p&gt;With a direct constructor, there would be the problem of missing data type information.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, what does that mean?&lt;/p&gt;</comment>
                    <comment id="12722839" author="thetaphi" created="Mon, 22 Jun 2009 22:27:06 +0100"  >&lt;p&gt;The methods setFloatValue() etc are for specifying the exact data type. If you would do it in the constructor, the resulting code would be very error-prone. e.g., new NumericField(&quot;price&quot;, 12.5): Does this mean 12.5 as double or float, is 15 alone meant as (in future) short, byte or int? OK users can add &quot;f&quot; in the float case to it, but this makes it very hard to prevent errors, because Java automatically casts all numeric types to each other suddenly. This is why I added these factories for NumericRangeQuery and the setters here.&lt;/p&gt;</comment>
                    <comment id="12722840" author="mikemccand" created="Mon, 22 Jun 2009 22:30:37 +0100"  >&lt;p&gt;OK, I agree it&apos;s dangerous to let javac auto cast.&lt;/p&gt;

&lt;p&gt;So, can we set an across the board default of 4?&lt;/p&gt;</comment>
                    <comment id="12722843" author="earwin" created="Mon, 22 Jun 2009 22:35:44 +0100"  >&lt;p&gt;Am I misunderstanding something or the problem still persists?&lt;br/&gt;
Even if you use a common default, what is your base type - int or long? Are floats converted to ints, or to longs?&lt;/p&gt;</comment>
                    <comment id="12722845" author="thetaphi" created="Mon, 22 Jun 2009 22:38:37 +0100"  >&lt;p&gt;I think this is simple, we just overload all ctors and factories and remove the precisionStep there. These methods use NumericUtils.DEFAULT_PRECISION_STEP = 4 then. But thee should be a clear not, to do also tests with other step values.&lt;/p&gt;

&lt;p&gt;additional variants:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;NumericField(name), NumericField(name,store,index)&lt;/li&gt;
	&lt;li&gt;NumericTokenStream()&lt;/li&gt;
	&lt;li&gt;NumericRangeQuery.newXxxRange(field, min, max,...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am currentlly not sure (I was thinking the whole time during including into core) to also make NumericRangeQuery work like the other two classes: generic Constructor without datatype and then set the range explicit:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericRangeQuery(fieldname[, precisionStep]).setFloatRange(....)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Not sure, in this case the API where similar and I have to override only one ctor for different construction parameters. My only problem is, that Queries are normally almost everywhere in Lucene static and unmodifable  (beyond boost).&lt;/p&gt;</comment>
                    <comment id="12722849" author="thetaphi" created="Mon, 22 Jun 2009 22:41:21 +0100"  >&lt;blockquote&gt;&lt;p&gt;Even if you use a common default, what is your base type - int or long? Are floats converted to ints, or to longs? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Float are indexed like ints and doubles like longs.&lt;/p&gt;

&lt;p&gt;The problem here is more that if you would specify the value direct in the constructor, you cannot for sure always give the right type (because Java auto-casts). This is why I have these setFloatValue(), setLongValue() and so on.&lt;/p&gt;</comment>
                    <comment id="12722851" author="earwin" created="Mon, 22 Jun 2009 22:45:41 +0100"  >&lt;p&gt;Aha! And each time you invoke setFloatValue/setDoubleValue it switches base type behind the scenes? Eeek.&lt;/p&gt;</comment>
                    <comment id="12722859" author="mikemccand" created="Mon, 22 Jun 2009 23:08:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;each time you invoke setFloatValue/setDoubleValue it switches base type behind the scenes?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that&apos;s an acceptable risk.  I suppose we could add checking to catch you but I don&apos;t think that&apos;s needed (we should document clearly that you can&apos;t &quot;mix types&quot;).&lt;/p&gt;</comment>
                    <comment id="12722878" author="hossman" created="Mon, 22 Jun 2009 23:53:42 +0100"  >&lt;p&gt;behind the scenes precision changes based on which set*Value() method is called smells really wrong.&lt;/p&gt;

&lt;p&gt;I&apos;m not overly familiar with NumericField, but i&apos;m i&apos;m understanding the current suggestion, wouldn&apos;t that mkae situations like this come up...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
NumericField a = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericField(&lt;span class=&quot;code-quote&quot;&gt;&quot;price&quot;&lt;/span&gt;, MY_CUSTOM_PRECISION_STEP, ...);
a.setFloatValue(23.4f); &lt;span class=&quot;code-comment&quot;&gt;// blows away my custom precision
&lt;/span&gt;
NumericField b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericField(&lt;span class=&quot;code-quote&quot;&gt;&quot;price&quot;&lt;/span&gt;, ...);
b.setPrecisionStep(MY_CUSTOM_PRECISION_STEP);
b.setFloatValue(23.4f); &lt;span class=&quot;code-comment&quot;&gt;// blows away my custom precision
&lt;/span&gt;
NumericField c = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NumericField(&lt;span class=&quot;code-quote&quot;&gt;&quot;price&quot;&lt;/span&gt;, ...);
c.setFloatValue(23.4f); 
c.setPrecisionStep(MY_CUSTOM_PRECISION_STEP); &lt;span class=&quot;code-comment&quot;&gt;// only way to get my value used&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...that seems sketchy, and really anoying if people try reusing NumericField instances.&lt;/p&gt;

&lt;p&gt;If the goal is to have good &quot;defaults&quot; based on type then why not just have a constant per type that people can refer to explicitly? if they don&apos;t know what number to pick ... as well as a true &quot;default&quot; if they pick nothing.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; DEFAULT_STEP = ...;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; SUGGESTED_INT_STEP = ...;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; SUGGESTED_FLOAT_STEP = ...;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;



</comment>
                    <comment id="12722993" author="thetaphi" created="Tue, 23 Jun 2009 08:35:52 +0100"  >&lt;p&gt;In my opinion, I would like to keep the precisionStep parameter required and give the 4 constants for each data type in NumericUtils.&lt;/p&gt;

&lt;p&gt;On the other hand 4 is a (maybe) good default, so I propose, that all ctors/factories getting a precisionStep default it to 4, if left out. precisionStep is a final variable in NumericTokenStream (and so in NumericField), because it does not make sense to change it. If &quot;field&quot; is final, also precisionStep should be final (one field must always use the same precision step). In principle Mike is right, the type is also fixed after first calling setXxxValue, so I could throw an IAE, if somebody calles a setter for a different datatype after the first one. A IllegalStateEx is thrown, when the value was not initialized and the docinverter tries to use the token stream.&lt;/p&gt;

&lt;p&gt;Here are two ideas to fix this the defaultPrecStep per type:&lt;/p&gt;

&lt;p&gt;1. Special value 0 as default precStep:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the no-precStep ctor sets the precStep in NumTokenStream to 0 (invalid value), if one is given it must be &amp;gt;0 and &amp;lt;=valsize&lt;/li&gt;
	&lt;li&gt;when delivering the tokens, NumTokenStream uses the default for this data type if precStep==0 and the given value in all other cases&lt;br/&gt;
In this case the precStep is still final in NumericTokenStream, with 0 means &quot;automatic&quot;.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;2. There is one other idea:&lt;br/&gt;
NumericField/-TokenStream could have a required ctor param type that can be NumericField.Type.INT,... In this case the default could be choosen very simple at the beginning. And it also fixes the data type. If somebody calls setDoubleValue but has initialized the TokenStream with NumericField.Type.INT, he will get an UOE.&lt;/p&gt;


&lt;p&gt;The javadocs should always clearly note, that one should check out a good precStep.&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
By the way: It is also a good idea to use valSize (32 or 64) as precisionStep in the case that you do not want to do range queries on the field (and use it only for sorting). RangeQueries would still work, but are as slow as conventional ones (current solr trunk contains this hint in its TrieField docs/schema)&lt;/p&gt;</comment>
                    <comment id="12722996" author="earwin" created="Tue, 23 Jun 2009 09:02:36 +0100"  >&lt;p&gt;Having half of your methods constantly fail with an exception depending on constructor parameter. That just screams - &quot;Split me into two classes!&quot;&lt;/p&gt;</comment>
                    <comment id="12723000" author="thetaphi" created="Tue, 23 Jun 2009 09:09:54 +0100"  >&lt;p&gt;Four classes! And with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1710&quot; title=&quot;Add byte/short to NumericUtils, NumericField and NumericRangeQuery&quot;&gt;LUCENE-1710&lt;/a&gt; there will be six! Not a good idea. 6 classes for NumericTokenStream, 6 for NumericField and maybe 6 for NumRangeQuery/Filter. brrrrr&lt;/p&gt;</comment>
                    <comment id="12723001" author="thetaphi" created="Tue, 23 Jun 2009 09:13:17 +0100"  >&lt;p&gt;...and unmaintainable. I merged the two classes from contrib because of this. It was just duplicate code with some small variances. Always a problem for copy/paste operations.&lt;/p&gt;</comment>
                    <comment id="12723031" author="mikemccand" created="Tue, 23 Jun 2009 11:33:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;I propose, that all ctors/factories getting a precisionStep default it to 4&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, with javadocs encouraging experimentation.&lt;/p&gt;

&lt;p&gt;I think the ideas to conditionalize the default according to type add&lt;br/&gt;
spooky complexity&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By the way: It is also a good idea to use valSize (32 or 64) as precisionStep in the case that you do not want to do range queries on the field (and use it only for sorting).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s be sure to call out this use-case in the javadocs!&lt;/p&gt;</comment>
                    <comment id="12723324" author="hossman" created="Tue, 23 Jun 2009 22:59:22 +0100"  >&lt;blockquote&gt;
&lt;p&gt;By the way: It is also a good idea to use valSize (32 or 64) as precisionStep in the case that you do not want to do range queries on the field (and use it only for sorting).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This screams out for additional (redundant) constants that are self documenting in their names...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; PRECISION_STEP_DEFAULT = 4; &lt;span class=&quot;code-comment&quot;&gt;// i think?
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; PRECISION_STEP_SUGGESTED_INT_RANGEANDSORT = ...; &lt;span class=&quot;code-comment&quot;&gt;// no idea what &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; should be
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; PRECISION_STEP_SUGGESTED_INT_SORTONLY = 32; &lt;span class=&quot;code-comment&quot;&gt;// i think?
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; PRECISION_STEP_SUGGESTED_FLOAT_RANGEANDSORT = ...; &lt;span class=&quot;code-comment&quot;&gt;// no idea what &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; should be
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; PRECISION_STEP_SUGGESTED_FLOAT_SORTONLY = 32; &lt;span class=&quot;code-comment&quot;&gt;// i think?
&lt;/span&gt;...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12729432" author="mikemccand" created="Thu, 9 Jul 2009 23:29:11 +0100"  >&lt;p&gt;How about we add PRECISION_STEP_DEFAULT=4, make that the default for all types, and then note in the javadocs the &quot;interesting&quot; values for precision step (ie for sorting only)?&lt;/p&gt;</comment>
                    <comment id="12729433" author="mikemccand" created="Thu, 9 Jul 2009 23:30:39 +0100"  >&lt;p&gt;I&apos;m assuming this one is yours Uwe!&lt;/p&gt;</comment>
                    <comment id="12730512" author="thetaphi" created="Mon, 13 Jul 2009 21:59:41 +0100"  >&lt;p&gt;Attached is a patch with the default precisionStep of 4. The javadocs of NumericRangeQuery list all possible and senseful values.&lt;/p&gt;

&lt;p&gt;This patch also contains some cleanup in NumericUtils (rename constants) and a lot of other JavaDocs fixes. It also changes the token types of the TokenStream (no difference between 32/64 bit vals needed) and adds a test for them.&lt;/p&gt;</comment>
                    <comment id="12730538" author="mikemccand" created="Mon, 13 Jul 2009 22:50:47 +0100"  >&lt;p&gt;Patch looks good Uwe!&lt;/p&gt;</comment>
                    <comment id="12730743" author="thetaphi" created="Tue, 14 Jul 2009 10:14:03 +0100"  >&lt;p&gt;Some updates:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove the limitation of the precisionStep to the value size (32 or 64). To index a non-trie-encoded numeric field, you can simply use Integer.MAX_VALUE or any other value&amp;gt;=64 as precStep. The lower limit of precStep is 1.&lt;/li&gt;
	&lt;li&gt;add a test for 64 bit values with recommended precStep=6&lt;/li&gt;
	&lt;li&gt;add simple test for unlimited precStep as above&lt;br/&gt;
I will commit this shortly.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12730746" author="thetaphi" created="Tue, 14 Jul 2009 10:18:24 +0100"  >&lt;p&gt;Committed revision: 793823&lt;/p&gt;

&lt;p&gt;Thanks Mike!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12413403" name="LUCENE-1712.patch" size="41960" author="thetaphi" created="Tue, 14 Jul 2009 10:14:03 +0100" />
                    <attachment id="12413342" name="LUCENE-1712.patch" size="30053" author="thetaphi" created="Mon, 13 Jul 2009 21:59:41 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 22 Jun 2009 21:12:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12047</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26014</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>