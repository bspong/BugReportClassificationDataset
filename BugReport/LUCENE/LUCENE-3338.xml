<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:59 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3338/LUCENE-3338.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3338] Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3338</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges.&lt;/p&gt;

&lt;p&gt;These two problems were found while developing &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1768&quot; title=&quot;NumericRange support for new query parser&quot;&gt;&lt;del&gt;LUCENE-1768&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12515205">LUCENE-3338</key>
            <summary>Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="adriano_crestani">Adriano Crestani</assignee>
                                <reporter username="viniciusbarros">Vinicius Barros</reporter>
                        <labels>
                    </labels>
                <created>Sun, 24 Jul 2011 22:58:00 +0100</created>
                <updated>Fri, 10 May 2013 11:43:05 +0100</updated>
                    <resolved>Mon, 1 Aug 2011 20:01:05 +0100</resolved>
                            <version>3.3</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/queryparser</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13070286" author="viniciusbarros" created="Mon, 25 Jul 2011 02:00:42 +0100"  >&lt;p&gt;The patch available includes week-8.patch attached to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1768&quot; title=&quot;NumericRange support for new query parser&quot;&gt;&lt;del&gt;LUCENE-1768&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open ranges now work on flexible standard query parser.&lt;/p&gt;

&lt;p&gt;Mixed include and exclude bounds are now supported on flexible standard query parser.&lt;/p&gt;

&lt;p&gt;Added junits to cover both problems.&lt;/p&gt;

&lt;p&gt;Added the same junit tests to classic query parser.&lt;/p&gt;

&lt;p&gt;I found something while creating junits for the mixed include and exclude bounds. [1 TO } will always return nothing. It seems the exclusive operator there will take precedence over the inclusive operator. I double checked, and the NumericRangeQuery is correct, so I suppose this is the expected behavour of NumericRangeQuery.&lt;/p&gt;</comment>
                    <comment id="13070467" author="thetaphi" created="Mon, 25 Jul 2011 13:41:42 +0100"  >&lt;blockquote&gt;&lt;p&gt;I found something while creating junits for the mixed include and exclude bounds. [1 TO } will always return nothing. It seems the exclusive operator there will take precedence over the inclusive operator. I double checked, and the NumericRangeQuery is correct, so I suppose this is the expected behavour of NumericRangeQuery.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is no such limitation in NRQ, can you show the issue with a NRQ-specific test case? Maybe its a problem of the test setup?&lt;/p&gt;

&lt;p&gt;I will for now commit the javadoc improvements and post a delta patch.&lt;/p&gt;</comment>
                    <comment id="13070482" author="thetaphi" created="Mon, 25 Jul 2011 14:05:50 +0100"  >&lt;p&gt;Here the merged patch.&lt;/p&gt;</comment>
                    <comment id="13070488" author="thetaphi" created="Mon, 25 Jul 2011 14:21:10 +0100"  >&lt;p&gt;Hi Vinicius, can you check, that the merged patch is fine?&lt;/p&gt;

&lt;p&gt;I have one question about the regened files: surround was not touched, so maybe it can be reverted? Which version of javacc did you use, because the files look different and seem to produce more warnings.&lt;/p&gt;

&lt;p&gt;Maybe we should check which versions are available and used and document this somewhere.&lt;/p&gt;</comment>
                    <comment id="13070493" author="thetaphi" created="Mon, 25 Jul 2011 14:30:37 +0100"  >&lt;p&gt;Hi Vinicius,&lt;/p&gt;

&lt;p&gt;I attached the same patch, with changes in surround QP reverted.&lt;/p&gt;</comment>
                    <comment id="13071501" author="viniciusbarros" created="Wed, 27 Jul 2011 05:10:11 +0100"  >&lt;p&gt;Hi Uwe,&lt;/p&gt;

&lt;p&gt;I used javacc-4.1. When I ran ant javacc by the first time and it didn&apos;t find it, it told me I should use javacc-4.1, so I installed it.&lt;/p&gt;</comment>
                    <comment id="13071502" author="viniciusbarros" created="Wed, 27 Jul 2011 05:11:17 +0100"  >&lt;p&gt;hi Uwe,&lt;/p&gt;

&lt;p&gt;I changed the patch to make the junit fail and you see the problem with [x TO x} matching nothing.&lt;/p&gt;</comment>
                    <comment id="13071615" author="thetaphi" created="Wed, 27 Jul 2011 10:21:12 +0100"  >&lt;p&gt;OK, now I understand:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I changed the patch to make the junit fail and you see the problem with [x TO x} matching nothing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seems that somehow the formatting of your original comment in JIRA was broken, I misunderstood and thought you mean half open ranges like: &lt;span class=&quot;error&quot;&gt;&amp;#91;x TO *&amp;#93;&lt;/span&gt; behaving different like [x TO *}, which is not the case (i am glad).&lt;/p&gt;

&lt;p&gt;This of course returns no results, because the upper bound explicitely excludes the lower bound, so its in fact a query where upper&amp;lt;lower bound, so returns nothing, this is not bug or limitation, its in my opinion correct:&lt;/p&gt;

&lt;p&gt;assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, true, 1);&lt;/p&gt;

&lt;p&gt;I would change that line to assert 0 results like in the next test with (true, false).&lt;/p&gt;</comment>
                    <comment id="13071618" author="thetaphi" created="Wed, 27 Jul 2011 10:24:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;I used javacc-4.1. When I ran ant javacc by the first time and it didn&apos;t find it, it told me I should use javacc-4.1, so I installed it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats fine, I just was confused about some changes, but this was caused by regenerating surround QP which i reverted.&lt;/p&gt;

&lt;p&gt;We may update once to a later version of javacc, but it still is not full Java5 generics compatible, so the warnings are expected, so for full compatibility we shoudl stay with 4.1 for now. I am thinking about a way to disable those for generated classes (using the regexes to add SuppressWarnings(&lt;/p&gt;
{&quot;unchecked&quot;,&quot;rawtypes&quot;}
&lt;p&gt;) in the build.xml).&lt;/p&gt;</comment>
                    <comment id="13072948" author="adriano_crestani" created="Fri, 29 Jul 2011 18:56:23 +0100"  >&lt;p&gt;Hi, I just reviewed the patch and it looks good.&lt;/p&gt;

&lt;p&gt;However, I have one question. It seems (haven&apos;t tested yet) that the user can enter &lt;span class=&quot;error&quot;&gt;&amp;#91;* TO *&amp;#93;&lt;/span&gt;, should we support it? If we support it, it basically means match all terms for that field. Isn&apos;t there any other query we could use to match all fields like (field:*)?&lt;/p&gt;

&lt;p&gt;I personally vote for disallowing this kind of range query.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                    <comment id="13072950" author="thetaphi" created="Fri, 29 Jul 2011 19:00:21 +0100"  >&lt;p&gt;Solr uses exactly this range query to achieve this effect. And its different than MatchAllDocsQuery!&lt;/p&gt;

&lt;p&gt;For numeric queries its no problem at all, for TermRange of course it is slow &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13073110" author="adriano_crestani" created="Sat, 30 Jul 2011 03:50:38 +0100"  >&lt;p&gt;Yes, it&apos;s different than MatchAllDocsQuery.&lt;/p&gt;

&lt;p&gt;Does WildcardQuery(&quot;field&quot;, &quot;*&quot;,...) work the same way as TermRangeQuery(&quot;field&quot;, null, null,...)? I mean, do they have the same performance?&lt;/p&gt;

&lt;p&gt;I just tested classic qp and it does support &lt;span class=&quot;error&quot;&gt;&amp;#91;* TO *&amp;#93;&lt;/span&gt;, so I think it&apos;s fine if we support the same on standard query parser. Just wondering weather we could somehow optimize it.&lt;/p&gt;</comment>
                    <comment id="13073129" author="sokolov" created="Sat, 30 Jul 2011 05:53:14 +0100"  >&lt;p&gt;I wondered that too, so I checked.  Both AutomatonQuery and TermRangeQuery special-case these to generate a simple TermsEnum, so the same. It makes sense to optimize:  this query could easily be generated by some app.&lt;/p&gt;

</comment>
                    <comment id="13073140" author="adriano_crestani" created="Sat, 30 Jul 2011 07:15:02 +0100"  >&lt;p&gt;Thanks for checking that Mike. I took a look at the code as well, makes more sense now. So no more extra optimization seems to be required then.&lt;/p&gt;</comment>
                    <comment id="13073143" author="adriano_crestani" created="Sat, 30 Jul 2011 08:09:33 +0100"  >&lt;p&gt;I merged this patch with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3343&quot; title=&quot;Comparison operators &amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;= and = support as RangeQuery syntax in QueryParser&quot;&gt;&lt;del&gt;LUCENE-3343&lt;/del&gt;&lt;/a&gt;, since this last one had a bug that the first one fixes.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3343&quot; title=&quot;Comparison operators &amp;gt;,&amp;gt;=,&amp;lt;,&amp;lt;= and = support as RangeQuery syntax in QueryParser&quot;&gt;&lt;del&gt;LUCENE-3343&lt;/del&gt;&lt;/a&gt; only was making TestQPHelper fail, since it was passing null to ParametricQueryNode. Instead, it&apos;s now passing &quot;*&quot;, which is later being treated by OpenRangeQueryNodeProcessor (from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3338&quot; title=&quot;Flexible query parser does not support open ranges and range queries with mixed inclusive and exclusive ranges&quot;&gt;&lt;del&gt;LUCENE-3338&lt;/del&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I added extra tests to TestNumericQueryParser and TestQPHelper to make sure we cover all possible cases.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I haven&apos;t changed changes.txt yet, since we are not sure whether these changes will be pushed to 3.x, it&apos;s my next task, to investigate that.&lt;/p&gt;

&lt;p&gt;I will wait one or two days before committing this patch.&lt;/p&gt;

&lt;p&gt;Uwe, raise your hand if you want me to hold the commit and sorry for taking over your JIRA &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13073148" author="thetaphi" created="Sat, 30 Jul 2011 09:10:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;I wondered that too, so I checked. Both AutomatonQuery and TermRangeQuery special-case these to generate a simple TermsEnum, so the same. It makes sense to optimize: this query could easily be generated by some app.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And for NumericRangeQuery this is even faster, as it will generate a query that only enumerates the lowest precision terms (all of them). For e.g. precisionStep 4 this would be 16 terms only &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; So no such optimization is needed for NRQ.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Uwe, raise your hand if you want me to hold the commit and sorry for taking over your JIRA &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s all fine to combine both commits! I had not looked in 3343 because I thought it&apos;s for the good old default QP... We should add changes at the end!&lt;/p&gt;</comment>
                    <comment id="13073664" author="adriano_crestani" created="Mon, 1 Aug 2011 20:00:19 +0100"  >&lt;p&gt;The last patch was just committed to the repository (rev 1152892)&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12431778">LUCENE-1768</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12515390">LUCENE-3343</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12488291" name="LUCENE_3338_and_3343_2011_07_30.patch" size="105994" author="adriano_crestani" created="Sat, 30 Jul 2011 08:09:33 +0100" />
                    <attachment id="12487703" name="week9-merged-nosurround.patch" size="75846" author="thetaphi" created="Mon, 25 Jul 2011 14:30:37 +0100" />
                    <attachment id="12487931" name="week9-merged-nosurround_with_failing_junit.patch" size="75846" author="viniciusbarros" created="Wed, 27 Jul 2011 05:11:17 +0100" />
                    <attachment id="12487699" name="week9-merged.patch" size="79778" author="thetaphi" created="Mon, 25 Jul 2011 14:15:42 +0100" />
                    <attachment id="12487659" name="week9.patch" size="106191" author="viniciusbarros" created="Mon, 25 Jul 2011 02:00:42 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 25 Jul 2011 12:41:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2744</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24358</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>