<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:19:37 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2906/LUCENE-2906.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2906] Filter to process output of ICUTokenizer and create overlapping bigrams for CJK </title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2906</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The ICUTokenizer produces unigrams for CJK. We would like to use the ICUTokenizer but have overlapping bigrams created for CJK as in the CJK Analyzer.  This filter would take the output of the ICUtokenizer, read the ScriptAttribute and for selected scripts (Han, Kana), would produce overlapping bigrams.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12497711">LUCENE-2906</key>
            <summary>Filter to process output of ICUTokenizer and create overlapping bigrams for CJK </summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="tburtonwest">Tom Burton-West</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Feb 2011 20:30:37 +0000</created>
                <updated>Fri, 10 May 2013 11:43:18 +0100</updated>
                    <resolved>Thu, 29 Dec 2011 05:24:36 +0000</resolved>
                                            <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                                                  <comments>
                    <comment id="12990739" author="rcmuir" created="Fri, 4 Feb 2011 21:01:00 +0000"  >&lt;p&gt;I&apos;ll take it, ive done the unibigram approach already (maybe we can just have it as a separate filter option), so the bigram should be easy.&lt;/p&gt;

&lt;p&gt;My original design, just lets you provide a BitSet of script codes. (this would be simple i think to parse from say a solr factory).&lt;/p&gt;

&lt;p&gt;I think its also useful to have an option, for whether the filter should only do this for &quot;joined&quot; text or not (based on offsets). For CJK i think it makes sense to enforce this, so that it won&apos;t bigram across sentence boundaries. But for say the Tibetan language, where you have a syllable separator, you would want to turn this off.&lt;/p&gt;

&lt;p&gt;Separately, if you want it to work &quot;just like&quot; CJKTokenizer, please be aware that by default, the unicode standard tokenizes Katakana to words (only hiragana and han are tokenized to codepoints). So in this case you would have to use a custom ruleset if you wanted katakana to be tokenized to codepoints instead of words, for later bigramming. I&apos;m not sure you want to do this though... (in truth CJKTokenizer bigrams ANYTHING out of ascii, including a lot of things it shouldnt).&lt;/p&gt;

&lt;p&gt;For hangul the same warning applies, but its more debatable, you might want to do this if you don&apos;t have a decompounder... but in my opinion this is past tokenization, and its the same problem you have with german, etc... the default tokenization is not &quot;wrong&quot;.&lt;/p&gt;

&lt;p&gt;In either case, if you decide to do that, it would be a pretty simple ruleset!&lt;/p&gt;

&lt;p&gt;Let me know if this makes sense to you.&lt;/p&gt;</comment>
                    <comment id="12990833" author="tburtonwest" created="Fri, 4 Feb 2011 23:39:55 +0000"  >&lt;p&gt;Sounds good to me.&lt;/p&gt;

&lt;p&gt;The option to limit to &quot;joined&quot; text also sounds very useful.&lt;/p&gt;

&lt;p&gt;Tom&lt;/p&gt;</comment>
                    <comment id="12991152" author="rcmuir" created="Sun, 6 Feb 2011 13:30:12 +0000"  >&lt;p&gt;here&apos;s a patch going in a slightly different direction (though we can still add some special icu-only stuff here).&lt;/p&gt;

&lt;p&gt;instead the patch synchronizes the token types of ICUTokenizer with StandardTokenizer, adds the necessarily types to both, and then adds the bigramming logic to standardfilter.&lt;/p&gt;

&lt;p&gt;this way, cjk works easily &quot;out of box&quot;, for all of unicode (e.g. supplementaries) and plays well with other languages. i deprecated cjktokenizer in the patch and pulled out its special full-width filter into a separate tokenfilter.&lt;/p&gt;</comment>
                    <comment id="12991169" author="dmsmith555" created="Sun, 6 Feb 2011 16:19:44 +0000"  >&lt;p&gt;Two questions:&lt;br/&gt;
How will this differ from the SmartChineseAnalyzer?&lt;br/&gt;
I doubt it but can this be in 3.1?&lt;/p&gt;</comment>
                    <comment id="12991186" author="rcmuir" created="Sun, 6 Feb 2011 17:43:23 +0000"  >&lt;blockquote&gt;
&lt;p&gt;How will this differ from the SmartChineseAnalyzer?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The SmartChineseAnalyzer is for Simplified Chinese only... this is about the &lt;br/&gt;
language-independent technique similar to what CJKAnalyzer does today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I doubt it but can this be in 3.1?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well i hate the way CJKAnalyzer treats things like supplementary characters (wrongly).&lt;br/&gt;
This is definitely a bug, and fixed here. Part of me wants to fix this as quickly as possible.&lt;/p&gt;

&lt;p&gt;At the same time though, I would prefer 3.2... otherwise I would feel like I am rushing things.&lt;/p&gt;

&lt;p&gt;I don&apos;t think 3.2 needs to come a year after 3.1... in fact since we have a stable branch I think its&lt;br/&gt;
stupid to make bugfix releases like 3.1.1 when we could just push out a new minor version (3.2) with&lt;br/&gt;
bugfixes instead. The whole branch is intended to be stable changes, so I think this is better use&lt;br/&gt;
of our time. But this is just my opinion, we can discuss it later on the list as one idea to promote &lt;br/&gt;
more rapid releases.&lt;/p&gt;</comment>
                    <comment id="12992622" author="rcmuir" created="Wed, 9 Feb 2011 17:59:37 +0000"  >&lt;p&gt;the prerequisite subtask is fixed, so we should be able to add this in 3.2 (supporting StandardTokenizer, UAX29URLEmailTokenizer, and ICUTokenizer) without having to change any of the tokenizers.&lt;/p&gt;

&lt;p&gt;I&apos;ll update the patch.&lt;/p&gt;</comment>
                    <comment id="13043556" author="rcmuir" created="Fri, 3 Jun 2011 17:40:46 +0100"  >&lt;p&gt;bulk move 3.2 -&amp;gt; 3.3&lt;/p&gt;</comment>
                    <comment id="13094902" author="tburtonwest" created="Wed, 31 Aug 2011 22:10:47 +0100"  >&lt;p&gt;Any chance this might get implemented for 3.4?&lt;/p&gt;</comment>
                    <comment id="13171318" author="rcmuir" created="Fri, 16 Dec 2011 23:51:12 +0000"  >&lt;p&gt;As much as I would like this to work as the patch does (where its automatic from StandardFilter), I think its bad because its something we then have to commit to/deal with for a while (e.g. backwards compat).&lt;/p&gt;

&lt;p&gt;So another idea is just to call it CJKFilter or something under the CJK package for now. We could still cutover CJKAnalyzer like the patch and then it finally works with supplementary characters too (which I think is really long needed).&lt;/p&gt;</comment>
                    <comment id="13171356" author="rcmuir" created="Sat, 17 Dec 2011 00:24:58 +0000"  >&lt;p&gt;sorry to take so long Tom... ill round this out tonight.&lt;/p&gt;</comment>
                    <comment id="13171445" author="rcmuir" created="Sat, 17 Dec 2011 03:55:51 +0000"  >&lt;p&gt;synced up to trunk... has a couple minor nocommits (mostly just some needed tests) I&apos;ll look at tomorrow morning.&lt;/p&gt;</comment>
                    <comment id="13176076" author="rcmuir" created="Tue, 27 Dec 2011 04:06:09 +0000"  >&lt;p&gt;patch removing all nocommits with additional tests.&lt;/p&gt;

&lt;p&gt;I think its ready to commit.&lt;/p&gt;</comment>
                    <comment id="13176200" author="rcmuir" created="Tue, 27 Dec 2011 15:04:09 +0000"  >&lt;p&gt;one new test and a tweak: so that this filter never calls input.incrementToken() after it already returned false.&lt;/p&gt;</comment>
                    <comment id="13176997" author="rcmuir" created="Thu, 29 Dec 2011 05:24:36 +0000"  >&lt;p&gt;Committed, maybe in the future we enable this for StandardFilter (for good CJK behavior by default), but for now it seems good enough to have separate filters that handle the corner cases and all of unicode.&lt;/p&gt;</comment>
                    <comment id="13177097" author="thetaphi" created="Thu, 29 Dec 2011 10:02:30 +0000"  >&lt;p&gt;Hi Robert,&lt;/p&gt;

&lt;p&gt;I had no time to review before, there is one small thing that should maybe fixed. Currently this finter relies on the fact that TypeAttribute strings are interned, as it compares by identity:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; type = typeAtt.type();
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (type == doHan || type == doHiragana || type == doKatakana || type == doHangul) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is documented nowhere that Strings in TypeAttribute need to be interned. We should maybe replace that check by a simple equals(). It seems that you already wanted to do that, as you added a sentinel value Object NO = new Object(). &lt;del&gt;With the above check this sentinel value is useless, a simple null would be enough&lt;/del&gt;. &lt;b&gt;EDIT:&lt;/b&gt; Sentinel value is also useful for not enabling bigramming is a Tokenizer sets &quot;null&quot; as TypeAttribute. When using equals() this sentinel makes real sense. The check is not costly. String.equals() already does an identity check for early exit, if the sentinel is used it will also quickly return false (if String.equals(sentinel) is used, it will return false on instanceof Check, if you call sentinel.equals(String) it will even be faster).&lt;/p&gt;

&lt;p&gt;So I would change this check to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; type = typeAtt.type();
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (doHan.equals(type) || doHiragana.equals(type) || doKatakana.equals(type) || doHangul.equals(type)) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(this is the fastest check, if the doXXX is the sentinel, it&apos;s default Object.equals() will return false. If its a string, String.equals() will return true on identity very quick, but if it&apos;s not interned it will be slower. So we loose nothing but dont require useless interned strings.&lt;/p&gt;</comment>
                    <comment id="13177101" author="thetaphi" created="Thu, 29 Dec 2011 10:26:25 +0000"  >&lt;p&gt;...alternatively, we could use a HashSet&amp;lt;String&amp;gt;. If the stringsin it are intered, the lookup is fast, too. The hashCode of Strings is precalculated in the String class. For four if checks it maybe not really different performance wise, but thats just another idea. The ctor would simply check the flags and add the type strings to the Set&amp;lt;String&amp;gt;.&lt;/p&gt;</comment>
                    <comment id="13177187" author="rcmuir" created="Thu, 29 Dec 2011 14:09:50 +0000"  >&lt;p&gt;Hi Uwe:&lt;/p&gt;

&lt;p&gt;Many filters in lucene currently do things like this, and have forever (including StandardFilter).&lt;br/&gt;
In my opinion its ok, as its documented this filter works with StandardTokenizer and ICUTokenizer which use&lt;br/&gt;
the interned types.&lt;/p&gt;

&lt;p&gt;So I would prefer if we discuss this on another issue.&lt;/p&gt;</comment>
                    <comment id="13177201" author="rcmuir" created="Thu, 29 Dec 2011 14:32:35 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3669&quot; title=&quot;Some tokenfilters rely upon interned Types&quot;&gt;LUCENE-3669&lt;/a&gt; for the broader interned-type issue&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12508682" name="LUCENE-2906.patch" size="56720" author="rcmuir" created="Tue, 27 Dec 2011 15:04:09 +0000" />
                    <attachment id="12508659" name="LUCENE-2906.patch" size="54904" author="rcmuir" created="Tue, 27 Dec 2011 04:06:09 +0000" />
                    <attachment id="12507766" name="LUCENE-2906.patch" size="50318" author="rcmuir" created="Sat, 17 Dec 2011 03:55:51 +0000" />
                    <attachment id="12470397" name="LUCENE-2906.patch" size="28088" author="rcmuir" created="Sun, 6 Feb 2011 13:30:12 +0000" />
                </attachments>
            <subtasks>
            <subtask id="12497978">LUCENE-2911</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 4 Feb 2011 21:01:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10962</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24786</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>