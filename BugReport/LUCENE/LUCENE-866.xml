<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-866/LUCENE-866.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-866] Multi-level skipping on posting lists</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-866</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;To accelerate posting list skips (TermDocs.skipTo(int)) Lucene uses skip lists. &lt;br/&gt;
The default skip interval is set to 16. If we want to skip e. g. 100 documents, &lt;br/&gt;
then it is not necessary to read 100 entries from the posting list, but only &lt;br/&gt;
100/16 = 6 skip list entries plus 100%16 = 4 entries from the posting list. This &lt;br/&gt;
speeds up conjunction (AND) and phrase queries significantly.&lt;/p&gt;

&lt;p&gt;However, the skip interval is always a compromise. If you have a very big index &lt;br/&gt;
with huge posting lists and you want to skip over lets say 100k documents, then &lt;br/&gt;
it is still necessary to read 100k/16 = 6250 entries from the skip list. For big &lt;br/&gt;
indexes the skip interval could be set to a higher value, but then after a big &lt;br/&gt;
skip a long scan to the target doc might be necessary.&lt;/p&gt;

&lt;p&gt;A solution for this compromise is to have multi-level skip lists that guarantee a &lt;br/&gt;
logarithmic amount of skips to any target in the posting list. This patch &lt;br/&gt;
implements such an approach in the following way:&lt;/p&gt;

&lt;p&gt;  Example for skipInterval = 3:&lt;br/&gt;
                                                      c            (skip level 2)&lt;br/&gt;
                  c                 c                 c            (skip level 1) &lt;br/&gt;
      x     x     x     x     x     x     x     x     x     x      (skip level 0)&lt;br/&gt;
  d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d d  (posting list)&lt;br/&gt;
      3     6     9     12    15    18    21    24    27    30     (df)&lt;/p&gt;

&lt;p&gt;  d - document&lt;br/&gt;
  x - skip data&lt;br/&gt;
  c - skip data with child pointer&lt;/p&gt;

&lt;p&gt;Skip level i contains every skipInterval-th entry from skip level i-1. Therefore the &lt;br/&gt;
number of entries on level i is: floor(df / ((skipInterval ^ (i + 1))).&lt;/p&gt;

&lt;p&gt;Each skip entry on a level i&amp;gt;0 contains a pointer to the corresponding skip entry in &lt;br/&gt;
list i-1. This guarantees a logarithmic amount of skips to find the target document.&lt;/p&gt;


&lt;p&gt;Implementations details:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I factored the skipping code out of SegmentMerger and SegmentTermDocs to&lt;br/&gt;
     simplify those classes. The two new classes AbstractSkipListReader and &lt;br/&gt;
	 AbstractSkipListWriter implement the skipping functionality.&lt;/li&gt;
	&lt;li&gt;While AbstractSkipListReader and Writer take care of writing and reading the&lt;br/&gt;
     multiple skip levels, they do not implement an actual skip data format. The two &lt;br/&gt;
	 new subclasses DefaultSkipListReader and Writer implement the skip data format &lt;br/&gt;
	 that is currently used in Lucene (with two file pointers for the freq and prox &lt;br/&gt;
	 file and with payload length information). I added this extra layer to be &lt;br/&gt;
	 prepared for flexible indexing and different posting list formats. &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;File format changes: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I added the new parameter &apos;maxSkipLevels&apos; to the term dictionary and increased the&lt;br/&gt;
     version of this file. If maxSkipLevels is set to one, then the format of the freq &lt;br/&gt;
	 file does not change at all, because we only have one skip level as before. For &lt;br/&gt;
	 backwards compatibility maxSkipLevels is set to one automatically if an index &lt;br/&gt;
	 without the new parameter is read. &lt;/li&gt;
	&lt;li&gt;In case maxSkipLevels &amp;gt; 1, then the frq file changes as follows:&lt;br/&gt;
     FreqFile (.frq) --&amp;gt; &amp;lt;TermFreqs, SkipData&amp;gt;^TermCount&lt;br/&gt;
	 SkipData        --&amp;gt; &amp;lt;&amp;lt;SkipLevelLength, SkipLevel&amp;gt;^(Min(maxSkipLevels, &lt;br/&gt;
	                       floor(log(DocFreq/log(skipInterval))) - 1)&amp;gt;, SkipLevel&amp;gt;&lt;br/&gt;
	 SkipLevel       --&amp;gt; &amp;lt;SkipDatum&amp;gt;&lt;sup&gt;DocFreq/(SkipInterval&lt;/sup&gt;(Level + 1))&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	 Remark: The length of the SkipLevel is not stored for level 0, because 1) it is not &lt;br/&gt;
	 needed, and 2) the format of this file does not change for maxSkipLevels=1 then.&lt;/p&gt;


&lt;p&gt;All unit tests pass with this patch.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12367718">LUCENE-866</key>
            <summary>Multi-level skipping on posting lists</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="michaelbusch">Michael Busch</reporter>
                        <labels>
                    </labels>
                <created>Sat, 21 Apr 2007 02:39:48 +0100</created>
                <updated>Thu, 2 May 2013 03:29:06 +0100</updated>
                    <resolved>Thu, 31 May 2007 08:49:22 +0100</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12490493" author="michaelbusch" created="Sat, 21 Apr 2007 02:43:10 +0100"  >&lt;p&gt;Attaching the first version of this patch.&lt;/p&gt;</comment>
                    <comment id="12490495" author="michaelbusch" created="Sat, 21 Apr 2007 03:21:22 +0100"  >&lt;p&gt;I ran a few performance tests with this patch. I built a rather big &lt;br/&gt;
index (about 1.2GB) using documents from Wikipedia and optimized the&lt;br/&gt;
index to get big posting lists.&lt;/p&gt;

&lt;p&gt;I compare query evaluation time with one-level skipping (old) and&lt;br/&gt;
multi-level skipping (new) and measure the amount of I/O by counting &lt;br/&gt;
the number of VInts read from disk. Each query runs several thousand&lt;br/&gt;
times.&lt;/p&gt;

&lt;p&gt;The following queries contain very frequent and very unique terms. &lt;br/&gt;
For these queries the speedup with multi-level skipping is &lt;br/&gt;
significant:&lt;/p&gt;

&lt;p&gt;   Query: +lucene +search +engine +library&lt;br/&gt;
   5 total matching documents&lt;br/&gt;
   VInt reads: old: 143268000, new: 3933000, -97.25479520897898%&lt;br/&gt;
   Time: old: 7234ms, new: 1157ms, -84.00608238871993%&lt;/p&gt;

&lt;p&gt;   Query: +apache +http +server&lt;br/&gt;
   181 total matching documents&lt;br/&gt;
   VInt reads: old: 155892000, new: 27849000, -82.13570933723346%&lt;br/&gt;
   Time: old: 10656ms, new: 5703ms, -46.48085585585586%&lt;/p&gt;


&lt;p&gt;Even though I/O is reduced for the next query, it runs a bit slower.&lt;br/&gt;
I believe the reason is that the same query runs several thousand&lt;br/&gt;
times, so the posting lists will be loaded into the file system&lt;br/&gt;
cache and the effect of less I/O is reduced, while the skipping&lt;br/&gt;
algorithm itself is a bit more complex:&lt;/p&gt;

&lt;p&gt;   Query: +multi +level +skipping&lt;br/&gt;
   13 total matching documents&lt;br/&gt;
   VInt reads: old: 42894000, new: 39096000, -8.854385228703315%&lt;br/&gt;
   Time: old: 3875ms, new: 3922ms, 1.2129032258064516%&lt;/p&gt;


&lt;p&gt;For the next query there is slightly more I/O necessary in the &lt;br/&gt;
multi-skipping case. This is because not many big skips can be made,&lt;br/&gt;
but more skipping data has to be read. The top 2 skip levels are &lt;br/&gt;
buffered in this first version of the patch and if no big skips&lt;br/&gt;
can be made than this buffering is overhead compared to the &lt;br/&gt;
single-level case:&lt;/p&gt;

&lt;p&gt;   Query: +beatles +yellow +submarine&lt;br/&gt;
   78 total matching documents&lt;br/&gt;
   VInt reads: old: 38460000, new: 38685000, 0.5850234009360374%&lt;br/&gt;
   Time: old: 3172ms, new: 3265ms, 2.9319041614123584%&lt;/p&gt;

&lt;p&gt;However, if I change the query a little bit, then the speed-up&lt;br/&gt;
is significant (due to the very frequent stop word &quot;the&quot;):&lt;/p&gt;

&lt;p&gt;   Query: +&quot;the beatles&quot; +yellow +submarine&lt;br/&gt;
   77 total matching documents&lt;br/&gt;
   VInt reads: old: 382307000, new: 262331000, -31.38210914265237%&lt;br/&gt;
   Time: old: 26703ms, new: 22828ms, -14.51147811107366%&lt;/p&gt;


&lt;p&gt;It would be interesting to run more sophisticated benchmarks.&lt;br/&gt;
To run the same query several times is not very realistic &lt;br/&gt;
because it reduces the effects of the I/O savings due to caching.&lt;/p&gt;

&lt;p&gt;I&apos;m not that familiar with the new benchmark stuff that has&lt;br/&gt;
been added recently, but I&apos;ll try to dig into that next week.&lt;/p&gt;</comment>
                    <comment id="12490496" author="yseeley@gmail.com" created="Sat, 21 Apr 2007 03:43:13 +0100"  >&lt;p&gt;Looks interesting!&lt;/p&gt;

&lt;p&gt;Have you done any performance testing?  I guess best case for this patch would be &quot;skip to a random doc&quot;, and worst case would be skipTo(currDoc+2) in a loop  (or a conjunction across terms that appear in almost all docs).&lt;/p&gt;

&lt;p&gt;I haven&apos;t dug into the code, but do you avoid storing extra levels when the docfreq is small?&lt;br/&gt;
What is the size cost for terms with docfreq=1?&lt;/p&gt;
</comment>
                    <comment id="12490497" author="michaelbusch" created="Sat, 21 Apr 2007 04:09:54 +0100"  >&lt;p&gt;&amp;gt; and worst case would be skipTo(currDoc+2) in a loop &lt;br/&gt;
&amp;gt; (or a conjunction across terms that appear in almost all docs).&lt;/p&gt;

&lt;p&gt;True that should be the worst case. A query with 3 stop words&lt;br/&gt;
takes about 2% longer:&lt;/p&gt;

&lt;p&gt;   Query: +the +and +a&lt;br/&gt;
   682737 total matching documents&lt;br/&gt;
   VInt reads: old: 481897700, new: 481416800, -0.09979296435737295%&lt;br/&gt;
   Time: old: 27812ms, new: 28406ms, 2.1357687329210413%&lt;/p&gt;

&lt;p&gt;Maybe a possible optimization could be to avoid using the higher levels&lt;br/&gt;
after a certain amount of small skips have been performed. I will try out if &lt;br/&gt;
this will improve things.&lt;/p&gt;

&lt;p&gt;&amp;gt; do you avoid storing extra levels when the docfreq is small?&lt;br/&gt;
&amp;gt; What is the size cost for terms with docfreq=1? &lt;/p&gt;

&lt;p&gt;I only store another level if it contains at least one SkipDatum.&lt;br/&gt;
So there is no overhead for terms with df=1.&lt;/p&gt;

&lt;p&gt;The .frq file in my index grew by 1.3% in the multi-level case&lt;br/&gt;
for an index with about 170MB.&lt;/p&gt;
</comment>
                    <comment id="12498903" author="michaelbusch" created="Fri, 25 May 2007 01:29:45 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-888&quot; title=&quot;Improve indexing performance by increasing internal buffer sizes&quot;&gt;&lt;del&gt;LUCENE-888&lt;/del&gt;&lt;/a&gt; will introduce the new method BufferedIndexInput.setBufferSize(). Since the length of the different skip levels is known I can set the buffer length before I clone the skip stream in this patch.&lt;/p&gt;</comment>
                    <comment id="12499236" author="michaelbusch" created="Fri, 25 May 2007 22:43:17 +0100"  >&lt;p&gt;I ran some more performance experiments to test the average speedup.&lt;br/&gt;
I used the same index (about 1.2GB, optimized, docs from wikipedia)&lt;br/&gt;
and created 50,000 random queries. Each query has 3 AND terms and &lt;br/&gt;
each term has a df &amp;gt; 100. &lt;/p&gt;

&lt;p&gt;Here are the results:&lt;/p&gt;

&lt;p&gt;old (one level skipping):&lt;br/&gt;
Time: 62141 ms.&lt;br/&gt;
VInt reads: 752430441&lt;/p&gt;

&lt;p&gt;new (multi level):&lt;br/&gt;
Time: 51969 ms.&lt;br/&gt;
VInt reads: 435504734&lt;/p&gt;

&lt;p&gt;This is a speedup of about 16% and i/o savings of 42%.&lt;/p&gt;

&lt;p&gt;Then I changed the algorithm a bit to not always start on the &lt;br/&gt;
highest skip level to find the next skip but to start at level 0&lt;br/&gt;
and walk up until the next skip point is greater than the target.&lt;br/&gt;
This speeds up things further so that the overall gain is about&lt;br/&gt;
20%:&lt;/p&gt;

&lt;p&gt;Time: 49500 ms.&lt;br/&gt;
Bytes read: 435504734&lt;/p&gt;

&lt;p&gt;This 20% speedup is for average AND queries. Certain queries&lt;br/&gt;
benefit even more from multi-level skipping as the results&lt;br/&gt;
show that I attached earlier.&lt;/p&gt;


&lt;p&gt;I will attach a new patch as soon as &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-888&quot; title=&quot;Improve indexing performance by increasing internal buffer sizes&quot;&gt;&lt;del&gt;LUCENE-888&lt;/del&gt;&lt;/a&gt; is committed.&lt;/p&gt;</comment>
                    <comment id="12499867" author="michaelbusch" created="Tue, 29 May 2007 19:12:47 +0100"  >&lt;p&gt;New version of the patch with the following changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Applies cleanly on current trunk&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Renamed AbstractSkipListReader and AbstractSkipListWriter&lt;br/&gt;
  to MultiLevelSkipListReader and MultiLevelSkipListWriter&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The skipTo() algorithm now starts with the lowest level&lt;br/&gt;
  and walks up until it finds the highest level that has a&lt;br/&gt;
  skip for the target. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Uses the new BufferedIndexInput.setBufferSize() method to&lt;br/&gt;
  reduce memory consumption in case skip levels occupy less&lt;br/&gt;
  space than BufferedIndexInput.BUFFER_SIZE (1024 bytes)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Only preload the top level into memory. That saves memory&lt;br/&gt;
  and almost doesn&apos;t affect performance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All unit tests pass.&lt;/p&gt;

&lt;p&gt;I think this patch is ready to commit now.&lt;/p&gt;</comment>
                    <comment id="12499931" author="paul.elschot@xs4all.nl" created="Tue, 29 May 2007 22:19:12 +0100"  >&lt;p&gt;Patch applies cleanly here.&lt;br/&gt;
All tests pass, except for org.apache.lucene.store.TestBufferedIndexInput:&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testsuite: org.apache.lucene.store.TestBufferedIndexInput&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 4, Failures: 0, Errors: 1, Time elapsed: 2.536 sec&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testcase: testSetBufferSize(org.apache.lucene.store.TestBufferedIndexInput):        Caused an ERROR&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; null&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.lang.NullPointerException&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.lucene.store.BufferedIndexInput.setBufferSize(BufferedIndexInput.java:52)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.lucene.store.TestBufferedIndexInput$MockFSDirectory.tweakBufferSizes(TestBufferedIndexInput.java:210)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;     at org.apache.lucene.store.TestBufferedIndexInput.testSetBufferSize(TestBufferedIndexInput.java:164)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt;&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Test org.apache.lucene.store.TestBufferedIndexInput FAILED&lt;/p&gt;

&lt;p&gt;It&apos;s possible that this is due to another diff in my working copy, but a quick look did&lt;br/&gt;
not reveal anything suspicious. In case I&apos;m the only one with this test failing, I&apos;ll dig deeper.&lt;/p&gt;
</comment>
                    <comment id="12499935" author="doronc" created="Tue, 29 May 2007 22:36:52 +0100"  >&lt;p&gt;On a clean checkout it applies cleanly and this test (and all others) pass.&lt;/p&gt;</comment>
                    <comment id="12499940" author="mikemccand" created="Tue, 29 May 2007 22:49:42 +0100"  >&lt;p&gt;Hmm &amp;#8211; that NullPointerException I think is from the assert I added for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-888&quot; title=&quot;Improve indexing performance by increasing internal buffer sizes&quot;&gt;&lt;del&gt;LUCENE-888&lt;/del&gt;&lt;/a&gt;.  I will fix.&lt;/p&gt;</comment>
                    <comment id="12500203" author="paul.elschot@xs4all.nl" created="Wed, 30 May 2007 19:15:17 +0100"  >&lt;p&gt;The last change to BufferedIndexInput indeed makes all core tests pass again here with this patch applied.&lt;/p&gt;</comment>
                    <comment id="12500207" author="michaelbusch" created="Wed, 30 May 2007 19:23:22 +0100"  >&lt;p&gt;Thanks for reviewing Paul and Doron, and thanks for fixing the NPE, Mike!!&lt;/p&gt;

&lt;p&gt;I&apos;m planning to commit this in a day or so.&lt;/p&gt;</comment>
                    <comment id="12500208" author="yseeley@gmail.com" created="Wed, 30 May 2007 19:25:00 +0100"  >&lt;p&gt;Nice job!  &lt;br/&gt;
Starting at the lowest level will probably improve the worst-case scenario for this patch (which wasn&apos;t nearly as bad as I expected in the first place).&lt;/p&gt;

&lt;p&gt;+1 to commit&lt;/p&gt;</comment>
                    <comment id="12500292" author="michaelbusch" created="Thu, 31 May 2007 07:06:07 +0100"  >&lt;p&gt;This patch updates the fileformats document. It also adds a comment &lt;br/&gt;
saying that SkipDelta is only written to the tis file when DocFreq is not &lt;br/&gt;
smaller than SkipInterval (as recently mentioned by Jeff in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-349&quot; title=&quot;Documentation for tii and tis files seems to be out of sync with code&quot;&gt;&lt;del&gt;LUCENE-349&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                    <comment id="12500308" author="michaelbusch" created="Thu, 31 May 2007 08:49:22 +0100"  >&lt;p&gt;Committed.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12370045">LUCENE-888</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12358590" name="fileformats.patch" size="5668" author="michaelbusch" created="Thu, 31 May 2007 07:06:07 +0100" />
                    <attachment id="12358448" name="lucene-866.patch" size="47458" author="michaelbusch" created="Tue, 29 May 2007 19:12:46 +0100" />
                    <attachment id="12355972" name="lucene-866.patch" size="46092" author="michaelbusch" created="Sat, 21 Apr 2007 02:43:10 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 21 Apr 2007 02:43:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12876</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26863</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>