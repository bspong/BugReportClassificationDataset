<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:59:36 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2824/LUCENE-2824.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2824] optimizations for bufferedindexinput</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2824</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;along the same lines as &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2816&quot; title=&quot;MMapDirectory speedups&quot;&gt;&lt;del&gt;LUCENE-2816&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the readVInt/readVLong/readShort/readInt/readLong are not optimal here since they defer to readByte. for example this means checking the buffer&apos;s bounds per-byte in readVint instead of per-vint.&lt;/li&gt;
	&lt;li&gt;its an easy win to speed this up, even for the vint case: its essentially always faster, the only slower case is 1024 single-byte vints in a row, in this case we would do a single extra bounds check (1025 instead of 1024)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12493628">LUCENE-2824</key>
            <summary>optimizations for bufferedindexinput</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sun, 19 Dec 2010 11:36:59 +0000</created>
                <updated>Wed, 30 Mar 2011 16:50:15 +0100</updated>
                    <resolved>Fri, 21 Jan 2011 04:17:55 +0000</resolved>
                            <version>3.1</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12972963" author="rcmuir" created="Sun, 19 Dec 2010 11:46:21 +0000"  >&lt;p&gt;here&apos;s the patch. i reverted my previous backwards break for the no-payloads optimization since this is actually faster overall.&lt;/p&gt;

&lt;p&gt;Here&apos;s standard codec (trunk). I&apos;ve run this benchmark about 5 times to be sure.&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS trunk&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS patch&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.41&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.36&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.57&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.47&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;31.56&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;31.63&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.66&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.67&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.23&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.14&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.61&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.69&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;unit, state&amp;#93;&lt;/span&gt;, 10, true)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.67&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.72&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25.61&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+nebraska +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;69.29&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;70.84&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.44&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.71&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;3.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.98&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.17&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;3.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+unit +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.34&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.70&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;4.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanFirst(unit, 5)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.27&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.35&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;10.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;the optimization is more important though for the methods like readInt (15% faster in my tests)&lt;/p&gt;</comment>
                    <comment id="12972965" author="thetaphi" created="Sun, 19 Dec 2010 11:52:37 +0000"  >&lt;p&gt;+1, Thats a good idea overall: Always optimize the general case (buffer is large enough), and fallback if not&lt;/p&gt;</comment>
                    <comment id="12972966" author="rcmuir" created="Sun, 19 Dec 2010 11:54:25 +0000"  >&lt;p&gt;sorry my math was off, the worst case is 4 extra checks (1028 total?)... but in general the buffer size default (1024)&lt;br/&gt;
is large enough that this helps.&lt;/p&gt;</comment>
                    <comment id="12972967" author="paul.elschot@xs4all.nl" created="Sun, 19 Dec 2010 11:58:11 +0000"  >&lt;p&gt;Did you also try to catch out of bounds exceptions instead of doing the bounds checks in the current patch?&lt;/p&gt;</comment>
                    <comment id="12972968" author="rcmuir" created="Sun, 19 Dec 2010 12:03:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;Did you also try to catch out of bounds exceptions instead of doing the bounds checks in the current patch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Paul, how can we do this? In the mmap case we can because the mmap getXXX will throw the bufferunderflow&lt;br/&gt;
and not actually read anything if there isn&apos;t enough bytes.&lt;/p&gt;

&lt;p&gt;But in this case I don&apos;t see how we can re-arrange the code to safely do this? &lt;br/&gt;
if you know, please let us know as I think this would be better too.&lt;/p&gt;</comment>
                    <comment id="12972969" author="thetaphi" created="Sun, 19 Dec 2010 12:04:37 +0000"  >&lt;p&gt;For the MMap case with &lt;b&gt;veeeery&lt;/b&gt; large arrays, the cost of exception instantiation with stack trace is really small. I think for small buffer sizes like 1024 the overhead would be immense. But we should check this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Another place where the checks were omitted and instead AIOOBE is catched is FieldCacheRangeFilter. This really helps there! But in that case FieldCache is always large &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12972971" author="rcmuir" created="Sun, 19 Dec 2010 12:13:17 +0000"  >&lt;p&gt;oh, i think i see your idea Paul... so in the special case when we refill() at the end of the file and we populate&lt;br/&gt;
less than the buffers length, we just have to copy to a shorter array so this will work?&lt;/p&gt;</comment>
                    <comment id="12972972" author="paul.elschot@xs4all.nl" created="Sun, 19 Dec 2010 12:13:31 +0000"  >&lt;p&gt;Using bounds check would be possible when the array size equals the buffered size. But indeed this need not normally be the case.&lt;br/&gt;
I&apos;ll take a closer look, it might be worthwhile to use a smaller array object when there is no more data available.&lt;/p&gt;</comment>
                    <comment id="12972973" author="paul.elschot@xs4all.nl" created="Sun, 19 Dec 2010 12:15:03 +0000"  >&lt;p&gt;You are obviously more familiar with the code than me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12972974" author="rcmuir" created="Sun, 19 Dec 2010 12:24:05 +0000"  >&lt;p&gt;well its slightly trickier to do it this way (e.g. slimming down the array in the very special case but restoring the fully sized one later in a future refill(), but potentially worthwhile... we should at least benchmark the exception idea, and see how it goes.&lt;/p&gt;</comment>
                    <comment id="12972975" author="thetaphi" created="Sun, 19 Dec 2010 12:26:18 +0000"  >&lt;p&gt;And as said in my above comment, for buffer sizes like 1024 or in that area (even for 16384 or like that), the overhead of throwing the AIOOBE would be much higher (as the JVM needs to generate stack trace!!!). I would simply don&apos;t even think about that &lt;b&gt;g&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;For MMap the idea is fine because we normally have &quot;buffer&quot; sizes of 2^31th, where the AIOOBE / BufferUnderflowEx is veeeeeeeeeeeery seldom.&lt;/p&gt;</comment>
                    <comment id="12972977" author="paul.elschot@xs4all.nl" created="Sun, 19 Dec 2010 12:42:44 +0000"  >&lt;p&gt;It&apos;s too long ago that I had to deal with this tradeoff myself, so I&apos;m taking a look here: &lt;a href=&quot;http://www.javaspecialists.eu/archive/Issue187.html&quot; class=&quot;external-link&quot;&gt;http://www.javaspecialists.eu/archive/Issue187.html&lt;/a&gt;&lt;br/&gt;
&quot;Cost of causing exceptions&quot; (2010-08-31).&lt;/p&gt;</comment>
                    <comment id="12972980" author="rcmuir" created="Sun, 19 Dec 2010 12:46:15 +0000"  >&lt;blockquote&gt;
&lt;p&gt;And as said in my above comment, for buffer sizes like 1024 or in that area (even for 16384 or like that), the overhead of throwing the AIOOBE would be much higher (as the JVM needs to generate stack trace!!!). I would simply don&apos;t even think about that g.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, i looked into this and I think I agree with Uwe.&lt;/p&gt;

&lt;p&gt;I&apos;m concerned about the JRE-specifics here too (cost of an exception, for example I ran all the tests on IKVM jvm the other day, &lt;br/&gt;
and a wierd one failed due to this:&lt;br/&gt;
&lt;a href=&quot;http://weblog.ikvm.net/CommentView.aspx?guid=062e4506-89c4-488e-9104-59c1ec80007b&quot; class=&quot;external-link&quot;&gt;http://weblog.ikvm.net/CommentView.aspx?guid=062e4506-89c4-488e-9104-59c1ec80007b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, I think the optimization here (reducing checks on average) is safe, but I&apos;m worried about going the exception route with&lt;br/&gt;
such a small buffer... even if we could tweak it out to perform better on a sun JRE,&lt;/p&gt;</comment>
                    <comment id="12972981" author="paul.elschot@xs4all.nl" created="Sun, 19 Dec 2010 13:07:34 +0000"  >&lt;p&gt;In case I understood the javaspecialists article correctly, it could be faster to use AIOOBE but only when -XX:-OmitStackTraceInFastThrow is not used in the sun/oracle jvm. For the first few hundreds of exceptions from the same piece of code however it would always be slower.&lt;/p&gt;

&lt;p&gt;Since this depends on the JVM I&apos;d rather keep the explicit bounds check in the code for now, and may be open a separate issue when it turns out to be faster to use AIOOBE.&lt;/p&gt;</comment>
                    <comment id="12973177" author="rcmuir" created="Mon, 20 Dec 2010 12:11:33 +0000"  >&lt;p&gt;Paul I agree with your sentiments, for this issue I&apos;d like to stick with this patch as just a small step (reducing bounds checks on average).&lt;/p&gt;

&lt;p&gt;In general, I think its probably the case we can improve our i/o (especially BufferedIndexInput) to be more efficient with&lt;br/&gt;
the int block codecs, don&apos;t hesitate to open more issues if there are ideas, I&apos;ve definitely been testing a lot of crazy things, but&lt;br/&gt;
the others didn&apos;t pan out &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="12973735" author="paul.elschot@xs4all.nl" created="Tue, 21 Dec 2010 16:20:45 +0000"  >&lt;p&gt;Do these performance comparison tests (posted on 19 December above) have a basic verification that each query returns the same result, for example a CRC on the matching docids and perhaps also a CRC on the score values?&lt;/p&gt;</comment>
                    <comment id="12973783" author="rcmuir" created="Tue, 21 Dec 2010 17:34:11 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Do these performance comparison tests (posted on 19 December above) have a basic verification that each query returns the same result, for example a CRC on the matching docids and perhaps also a CRC on the score values?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, the performance benchmark I used originally came from Mike, it builds on contrib/benchmark, you can see it here: &lt;a href=&quot;http://code.google.com/p/luceneutil/&quot; class=&quot;external-link&quot;&gt;http://code.google.com/p/luceneutil/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It verifies as you suggested, and in fact has found bugs before that our tests don&apos;t find... which frustrates me about our unit tests!&lt;/p&gt;</comment>
                    <comment id="12984326" author="mikemccand" created="Thu, 20 Jan 2011 18:40:45 +0000"  >&lt;p&gt;I&apos;m seeing excellent gains w/ this patch, on Linux 64bit Java 6 NIOFSDir:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS clean&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS robspec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanFirst(unit, 5)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.67&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15.62&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-6.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.87&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-2.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;unit, state&amp;#93;&lt;/span&gt;, 10, true)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.31&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.25&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-1.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;~3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.02&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;3.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.35&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.94&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;5.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.60&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.15&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;5.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.35&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.94&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;6.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.30&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.51&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;6.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+nebraska +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;161.71&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;174.23&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;7.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+unit +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.20&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctitle:.&lt;b&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Uu&amp;#93;&lt;/span&gt;nited.&lt;/b&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.93&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.25&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15.12&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.39&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;49.33&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;56.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;13.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.97&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;14.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25.95&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;30.12&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;16.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;22.72&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;26.88&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;18.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12.64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15.20&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;20.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctimesecnum:&lt;span class=&quot;error&quot;&gt;&amp;#91;10000 TO 60000&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.42&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.73&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;27.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;+1 to commit.&lt;/p&gt;</comment>
                    <comment id="12984558" author="rcmuir" created="Fri, 21 Jan 2011 04:17:55 +0000"  >&lt;p&gt;Committed revision 1061619, 1061622&lt;/p&gt;</comment>
                    <comment id="13013415" author="gsingers" created="Wed, 30 Mar 2011 16:50:15 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12466568" name="LUCENE-2824.patch" size="4819" author="rcmuir" created="Sun, 19 Dec 2010 11:46:21 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 19 Dec 2010 11:52:37 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11036</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24868</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>