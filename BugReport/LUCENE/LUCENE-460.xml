<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:10:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-460/LUCENE-460.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-460] hashCode improvements</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-460</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;It would be nice for all Query classes to implement hashCode and equals to enable them to be used as keys when caching.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12325152">LUCENE-460</key>
            <summary>hashCode improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Sun, 30 Oct 2005 23:36:01 +0000</created>
                <updated>Thu, 2 Jun 2011 23:03:32 +0100</updated>
                    <resolved>Thu, 6 Apr 2006 11:10:47 +0100</resolved>
                                                            <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12356325" author="yseeley@gmail.com" created="Mon, 31 Oct 2005 00:04:04 +0000"  >&lt;p&gt;A couple of guidelines off the top of my head...&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;hash codes should strive to be unique across the Query hierarchy, not just unique within one specific subclass.  For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes.&lt;/li&gt;
	&lt;li&gt;mix bits between different components that have any hashCode parts in common...&lt;br/&gt;
   for example RangeQuery will produce the same hashCode whenever lowerTerm==upperTerm.&lt;br/&gt;
   Also, field&lt;span class=&quot;error&quot;&gt;&amp;#91;x TO y&amp;#93;&lt;/span&gt; will produce the same hashCode for &lt;b&gt;any&lt;/b&gt; field since the fieldname parts of the&lt;br/&gt;
  terms will always cancel eachother out.  This will also cause the hashCode of field
{x TO x}
&lt;p&gt; to equal field:x&lt;br/&gt;
  The hashCode of FilteredQuery will also cause many collisions because the bits aren&apos;t mixed inbetween&lt;br/&gt;
   the query and the filter.&lt;br/&gt;
  Remember that every query as a boost component... never just xor two query hashCodes together.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;make things position dependent.&lt;br/&gt;
  Currently, field&lt;span class=&quot;error&quot;&gt;&amp;#91;x TO y&amp;#93;&lt;/span&gt; will produce the same hasCode as field&lt;span class=&quot;error&quot;&gt;&amp;#91;y TO x&amp;#93;&lt;/span&gt;... not particularly important for RangeQuery, but&lt;br/&gt;
   you get the idea. &lt;/li&gt;
	&lt;li&gt;don&apos;t be afraid of using &quot;&lt;ins&gt;&quot; instead of &quot;^&quot;.  They both take a single CPU cycle, but &quot;&lt;/ins&gt;&quot; is not quite so easily (accidentally) reversed.&lt;/li&gt;
	&lt;li&gt;flipping more than a single bit when hashing a boolean might be a good idea - it will make collisions harder.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.concentric.net/~Ttwang/tech/inthash.htm&quot; class=&quot;external-link&quot;&gt;http://www.concentric.net/~Ttwang/tech/inthash.htm&lt;/a&gt; is an interesting link on integer hash codes (what we are in effect doing when we combine multiple hash codes).  Esp interesting is the section &quot;Parallel Operations&quot;&lt;/p&gt;</comment>
                    <comment id="12356326" author="yseeley@gmail.com" created="Mon, 31 Oct 2005 00:07:52 +0000"  >&lt;p&gt;Oh, and preserve entropy by using reversible integer hash functions (see the previous link).&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;key ^= (key &amp;lt;&amp;lt; a) | (key &amp;gt;&amp;gt;&amp;gt; b); for a,b in (17,16) (16,17) (14,19) (19,14) (13,20) (20,13) (10,23) (23,10) (8,25) (25,8)&lt;/li&gt;
	&lt;li&gt;multiply by an odd&lt;/li&gt;
	&lt;li&gt;addition&lt;/li&gt;
	&lt;li&gt;xor&lt;/li&gt;
	&lt;li&gt;rotates&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12356327" author="lucenebugs@danielnaber.de" created="Mon, 31 Oct 2005 00:14:08 +0000"  >&lt;p&gt;&quot;Currently, field&lt;span class=&quot;error&quot;&gt;&amp;#91;x TO y&amp;#93;&lt;/span&gt; will produce the same hasCode as field&lt;span class=&quot;error&quot;&gt;&amp;#91;y TO x&amp;#93;&lt;/span&gt;... not particularly important for RangeQuery, but  you get the idea. &quot;&lt;/p&gt;

&lt;p&gt;Actually it is kind of important, because while &lt;span class=&quot;error&quot;&gt;&amp;#91;a TO z&amp;#93;&lt;/span&gt; will give hits &lt;span class=&quot;error&quot;&gt;&amp;#91;z TO a&amp;#93;&lt;/span&gt; won&apos;t.&lt;/p&gt;</comment>
                    <comment id="12356384" author="paul.elschot@xs4all.nl" created="Mon, 31 Oct 2005 16:51:42 +0000"  >&lt;p&gt;&amp;gt; &#160;- hash codes should strive to be unique across the Query hierarchy, not just unique within one specific&lt;br/&gt;
&amp;gt; subclass. For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes. &lt;/p&gt;

&lt;p&gt;This has the disadvantage that the structure information added by the query parser is lost in the hash.&lt;br/&gt;
In case a hash is needed over the query text before parsing, one can use precisely that.&lt;br/&gt;
What&apos;s the point of hash code uniqueness over subclasses?&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12356414" author="yseeley@gmail.com" created="Mon, 31 Oct 2005 23:01:04 +0000"  >&lt;p&gt;Paul, I&apos;m not sure I understand your point about &quot;structure information added by the query parser is lost in the hash&quot;.&lt;br/&gt;
Let me rephrase my statement in case you misunderstood me:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;hash codes should strive to avoid collisions across Query hierarchy, not just within one specific&lt;br/&gt;
     subclass. An example of hashCode implementations that don&apos;t do this are TermQuery(t) and SpanTermQuery(t) which will generate the exact same hash codes. &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; What&apos;s the point of hash code uniqueness over subclasses? &lt;/p&gt;

&lt;p&gt;The same point as hash code uniqueness (avoiding collisions) within a particular class - the more collisions you have, the more it will slow down hash based lookups.  Things should still work if all hashCodes mapped to the same number, but it would be dog slow.&lt;/p&gt;</comment>
                    <comment id="12356432" author="paul.elschot@xs4all.nl" created="Tue, 1 Nov 2005 04:22:19 +0000"  >&lt;p&gt;&amp;gt;  For example, TermQuery(t) and SpanTermQuery(t) will generate the exact same hash codes. &lt;/p&gt;

&lt;p&gt;I&apos;m sorry, I misread this as an example of what a hash code should be. You meant this&lt;br/&gt;
to be an example of what is wrong with current hashcodes...&lt;/p&gt;
</comment>
                    <comment id="12361200" author="yseeley@gmail.com" created="Sat, 24 Dec 2005 01:29:21 +0000"  >&lt;p&gt;Some people have asked where some of the magic constants come from in the hashCodes:&lt;/p&gt;

&lt;p&gt;&amp;gt; python -c &quot;import random;print hex(random.getrandbits(32))&lt;span class=&quot;error&quot;&gt;&amp;#91;:-1&amp;#93;&lt;/span&gt;&quot;&lt;br/&gt;
&amp;gt; Just a way of making some things unique.... let me know if you have a&lt;br/&gt;
&amp;gt; better idea on that.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; So those constants are just random numbers.  I thought about trying to pick magic numbers to maximize hamming distances, etc,&lt;br/&gt;
&amp;gt; but it&apos;s more work and more likely to mess things up if you get it wrong.  getClass().hashCode() would also work, but it would be &lt;br/&gt;
&amp;gt; slower.&lt;/p&gt;</comment>
                    <comment id="12373451" author="yseeley@gmail.com" created="Thu, 6 Apr 2006 11:10:47 +0100"  >&lt;p&gt;closing... I think I got most of these.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 31 Oct 2005 00:14:08 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13289</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27271</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>