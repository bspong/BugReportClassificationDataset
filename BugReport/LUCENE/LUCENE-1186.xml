<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1186/LUCENE-1186.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1186] [PATCH] Clear ThreadLocal instances in close()</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1186</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;As already found out in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-436&quot; title=&quot;[PATCH] TermInfosReader, SegmentTermEnum Out Of Memory Exception&quot;&gt;&lt;del&gt;LUCENE-436&lt;/del&gt;&lt;/a&gt;, there seems to be a garbage collection problem with ThreadLocals at certain constellations, resulting in an OutOfMemoryError.&lt;br/&gt;
The resolution there was to remove the reference to the ThreadLocal value when calling the close() method of the affected classes (see FieldsReader and TermInfosReader).&lt;br/&gt;
For Java &amp;lt; 5.0, this can effectively be done by calling threadLocal.set(null); for Java &amp;gt;= 5.0, we would call threadLocal.remove()&lt;/p&gt;

&lt;p&gt;Analogously, this should be done in &lt;b&gt;any&lt;/b&gt; class which creates ThreadLocal values&lt;/p&gt;

&lt;p&gt;Right now, two classes of the core API make use of ThreadLocals, but do not properly remove their references to the ThreadLocal value&lt;br/&gt;
1. org.apache.lucene.index.SegmentReader&lt;br/&gt;
2. org.apache.lucene.analysis.Analyzer&lt;/p&gt;

&lt;p&gt;For SegmentReader, I have attached a simple patch.&lt;br/&gt;
For Analyzer, there currently is no patch because Analyzer does not provide a close() method (future to-do?)&lt;/p&gt;
</description>
                <environment>&lt;p&gt;any&lt;/p&gt;</environment>
            <key id="12389301">LUCENE-1186</key>
            <summary>[PATCH] Clear ThreadLocal instances in close()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="ck@newsclub.de">Christian Kohlsch&#252;tter</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Feb 2008 10:54:48 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:06 +0100</updated>
                    <resolved>Mon, 2 Mar 2009 16:44:02 +0000</resolved>
                            <version>2.3</version>
                <version>2.3.1</version>
                <version>2.4</version>
                                <fixVersion>2.4.1</fixVersion>
                <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12571350" author="ck@newsclub.de" created="Fri, 22 Feb 2008 10:55:56 +0000"  >&lt;p&gt;Patch: Adds termVectorsLocal.set(null) to SegmentReader#close()&lt;/p&gt;</comment>
                    <comment id="12571523" author="otis" created="Fri, 22 Feb 2008 18:52:10 +0000"  >&lt;p&gt;Is there really a memory leak issue here?  I don&apos;t recall all the details of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-436&quot; title=&quot;[PATCH] TermInfosReader, SegmentTermEnum Out Of Memory Exception&quot;&gt;&lt;del&gt;LUCENE-436&lt;/del&gt;&lt;/a&gt;, but I think the problem was not with ThreadLocal...  Is there a way for you to demonstrate this memory issue?&lt;/p&gt;</comment>
                    <comment id="12572092" author="ck@newsclub.de" created="Mon, 25 Feb 2008 14:34:17 +0000"  >&lt;p&gt;This issue is rather a prophylactic one &amp;#8211; until now, I have not encountered an OutOfMemoryError or slowdown etc.&lt;/p&gt;

&lt;p&gt;However, I think it is a good practice to release all resources as soon as an object is not used anymore. For SegmentReader, this is the case when #close() is called. More, as noted in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-436&quot; title=&quot;[PATCH] TermInfosReader, SegmentTermEnum Out Of Memory Exception&quot;&gt;&lt;del&gt;LUCENE-436&lt;/del&gt;&lt;/a&gt;, some VMs (also recent ones) indeed seem to have problems when ThreadLocal values are not released, so I think it is not just a cosmetic issue.&lt;/p&gt;</comment>
                    <comment id="12677281" author="rviper" created="Fri, 27 Feb 2009 08:26:49 +0000"  >&lt;p&gt;i&apos;m using quartz schedules to trigger indexing tasks&lt;/p&gt;

&lt;p&gt;since the analyzer class is using a thread local -&amp;gt; should i reuse an analyzer (e.g singleton pattern) in this case (quartz job reusing threads (=tread pool) -&amp;gt; thread local data never gets freed)...)? &lt;/p&gt;

&lt;p&gt;Mem dump fragment (after out of memory):&lt;/p&gt;

&lt;p&gt;Class name Shallow Heap Retained HeapPercentage &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8070  QuartzScheduler_Worker-3 Thread       120  55.914.144    21,65% &lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;java.lang.ThreadLocal$ThreadLocalMap @ 0xdf32a20      24  55.913.760  21,65%&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &apos;- java.lang.ThreadLocal$ThreadLocalMap$Entry&lt;span class=&quot;error&quot;&gt;&amp;#91;16384&amp;#93;&lt;/span&gt; @ 0x163a61b8      65.552  55.913.736 21,65% &lt;br/&gt;
java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe090ca8  32 9.608 0,00% &lt;br/&gt;
java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe0f6b88     ....&lt;br/&gt;
java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe5d3df8   ....&lt;br/&gt;
  org.apache.lucene.analysis.StopAnalyzer$SavedStreams @ 0xe090cc8  24      9.560    0,00% &lt;br/&gt;
  org.apache.lucene.analysis.LowerCaseTokenizer @ 0xe090ce0           32   8.520    0,00% &lt;br/&gt;
  org.apache.lucene.analysis.CharArraySet @ 0xe090e30       24          968   0,00% &lt;br/&gt;
  org.apache.lucene.analysis.StopFilter @ 0xe090e18             24         24    0,00% &lt;br/&gt;
  org.apache.lucene.analysis.StopAnalyzer @ 0xe0911f8          24          24     0,00%&lt;br/&gt;
java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe629d80 ....&lt;br/&gt;
java.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xeb53510 ....&lt;br/&gt;
......&lt;br/&gt;
......&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;quartz overview (eclipse memory analysis):&lt;/p&gt;

&lt;p&gt;Class name    Shallow Heap | Retained Heap | Percentage &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8070  QuartzScheduler_Worker-3 Thread|          120 |    55.914.144 |     21,65% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7a50  QuartzScheduler_Worker-7 Thread|          120 |    30.684.056 |     11,88% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7710  QuartzScheduler_Worker-9 Thread|          120 |    19.464.024 |      7,54% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7ee8  QuartzScheduler_Worker-4 Thread|          120 |    14.813.640 |      5,74% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e78c8  QuartzScheduler_Worker-8 Thread|          120 |    11.154.576 |      4,32% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e81f8  QuartzScheduler_Worker-2 Thread|          120 |     8.403.544 |      3,25% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8380  QuartzScheduler_Worker-1 Thread|          120 |     8.334.552 |      3,23% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7d60  QuartzScheduler_Worker-5 Thread|          120 |     8.314.904 |      3,22% &lt;br/&gt;
org.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8508  QuartzScheduler_Worker-0 Thread|          120 |     8.267.376 |      3,20% &lt;/p&gt;
</comment>
                    <comment id="12677332" author="mikemccand" created="Fri, 27 Feb 2009 11:53:17 +0000"  >&lt;p&gt;Re-using a single analyzer should work around this...&lt;/p&gt;

&lt;p&gt;As of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1383&quot; title=&quot;Work around ThreadLocal&amp;#39;s &amp;quot;leak&amp;quot;&quot;&gt;&lt;del&gt;LUCENE-1383&lt;/del&gt;&lt;/a&gt;, we now have a CloseableThreadLocal, and we&apos;ve used&lt;br/&gt;
it instead of ThreadLocal in many places inside Lucene.&lt;/p&gt;

&lt;p&gt;However, Analyzer still uses ThreadLocal, because it doesn&apos;t have a&lt;br/&gt;
close() method.  I think we should simply add a close() method to&lt;br/&gt;
Analyzer, which then closes the ThreadLocal (attached patch).&lt;/p&gt;

&lt;p&gt;I plan to commit in a day or two, and back port to 2.4.1.&lt;/p&gt;</comment>
                    <comment id="12677338" author="mikemccand" created="Fri, 27 Feb 2009 12:05:57 +0000"  >&lt;p&gt;New patch, giving credit to Christian.  Thanks Christian!&lt;/p&gt;</comment>
                    <comment id="12677340" author="rviper" created="Fri, 27 Feb 2009 12:07:16 +0000"  >&lt;p&gt;great! thanks!&lt;br/&gt;
IMHO, some kind of IOC container for these lifecycle/caching challenges would make it more transparent - or setting some strategy for different environments&lt;/p&gt;</comment>
                    <comment id="12677376" author="mikemccand" created="Fri, 27 Feb 2009 14:17:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;IMHO, some kind of IOC container for these lifecycle/caching challenges would make it more transparent - or setting some strategy for different environments&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds interesting &amp;#8211; can you flesh out some concrete details so we can discuss it?  EG are you picturing a single opaque class instance that&apos;d hold all thread-local like state that Lucene needs to store, which could then be directly controlled by the app (ie, close()&apos;d when the app is done for now interacting with Lucene)?&lt;/p&gt;</comment>
                    <comment id="12677423" author="rviper" created="Fri, 27 Feb 2009 17:10:48 +0000"  >&lt;p&gt;you could use e.g. spring and specific spring-bean-scopes &lt;span class=&quot;error&quot;&gt;&amp;#91;spring isn&amp;#39;t the only choice ;-) &amp;#93;&lt;/span&gt;&lt;br/&gt;
(e.g. request/session scope for web apps, thread local scope (via org.springframework.aop.target.ThreadLocalTargetSource) for none-web apps), or even prototyp scope if nothing&lt;br/&gt;
should be reused&lt;/p&gt;

&lt;p&gt;the main problem however is that i do not know why ThreadLocal objects are used in lucene; i somewhere read about synchronization issues, but IMHO only the developer/user knows&lt;br/&gt;
if synchronization is really necessary; &lt;/p&gt;

&lt;p&gt;could you please explain to me why/when ThreadLocals are used?&lt;/p&gt;</comment>
                    <comment id="12677543" author="mikemccand" created="Fri, 27 Feb 2009 21:37:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;could you please explain to me why/when ThreadLocals are used?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Lucene largely uses them to avoid fine-grained synchronization.&lt;/p&gt;

&lt;p&gt;EG when you call IndexReader.document(int) we use ThreadLocal to store&lt;br/&gt;
a &quot;private&quot; clone for that thread.  Likewise for term vectors, for&lt;br/&gt;
caching terms info, and for analyzers to reuse TokenStream instances.&lt;/p&gt;</comment>
                    <comment id="12677584" author="rviper" created="Fri, 27 Feb 2009 22:55:15 +0000"  >&lt;p&gt;ok thanks!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1383&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1383&lt;/a&gt;&lt;br/&gt;
&quot;If closing all index readers and writers releases all Lucene thread locals it&apos;s great.&quot;&lt;/p&gt;

&lt;p&gt;-&amp;gt; is this true (only for SegmentReader)?&lt;/p&gt;

&lt;p&gt;another interesting thing for me: is there a reason for the ThreadLocals not being defined as static?&lt;/p&gt;</comment>
                    <comment id="12677600" author="mikemccand" created="Fri, 27 Feb 2009 23:21:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;-&amp;gt; is this true (only for SegmentReader)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s true, for all readers (Multi*Readers close the underlying SegmentReaders, which then close their ThreadLocals).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;is there a reason for the ThreadLocals not being defined as static?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well... if we made them static then we&apos;d have to further key (internally) on the SegmentReader, and then on closing the SegmentReader we&apos;d have to go and try to remove those entries somehow.&lt;/p&gt;</comment>
                    <comment id="12677601" author="rviper" created="Fri, 27 Feb 2009 23:44:42 +0000"  >&lt;p&gt;&quot;EG are you picturing a single opaque class instance that&apos;d hold all thread-local&quot;&lt;/p&gt;

&lt;p&gt;I think this would solve the problem. The real impl should be configureable via e.g. properties file (keep it simple) to further implement/change to a no-thread-local-at-all-policy if lucene is being used i an thread-pool environment (quartz, web requests,...), or an impl using spring beans, ... (two or three different strategies...)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12401107" name="LUCENE-1186.patch" size="2758" author="mikemccand" created="Fri, 27 Feb 2009 12:05:57 +0000" />
                    <attachment id="12401105" name="LUCENE-1186.patch" size="2704" author="mikemccand" created="Fri, 27 Feb 2009 11:53:16 +0000" />
                    <attachment id="12376218" name="LUCENE-1186-SegmentReader.patch" size="303" author="ck@newsclub.de" created="Fri, 22 Feb 2008 10:55:56 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 22 Feb 2008 18:52:10 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12559</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26543</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>