<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:30:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2751/LUCENE-2751.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2751] add LuceneTestCase.newSearcher()</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2751</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Most tests in the search package don&apos;t care about what kind of searcher they use.&lt;/p&gt;

&lt;p&gt;we should randomly use MultiSearcher or ParallelMultiSearcher sometimes in tests.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12479597">LUCENE-2751</key>
            <summary>add LuceneTestCase.newSearcher()</summary>
                <type id="6" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/requirement.png">Test</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Nov 2010 15:07:21 +0000</created>
                <updated>Wed, 30 Mar 2011 16:50:01 +0100</updated>
                    <resolved>Fri, 4 Feb 2011 12:47:05 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>general/build</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12930619" author="rcmuir" created="Wed, 10 Nov 2010 15:08:21 +0000"  >&lt;p&gt;really quick hacked-up patch for the core o.a.l.search tests.&lt;/p&gt;

&lt;p&gt;some tests fail.&lt;/p&gt;</comment>
                    <comment id="12930641" author="rcmuir" created="Wed, 10 Nov 2010 16:26:02 +0000"  >&lt;p&gt;As mentioned on the user list, we can do something like this here, &lt;br/&gt;
and fix all the bugs and corner cases (probably with a lot of hairiness)...&lt;/p&gt;

&lt;p&gt;or we could deprecate and remove MultiSearcher.&lt;/p&gt;</comment>
                    <comment id="12977541" author="mikemccand" created="Wed, 5 Jan 2011 00:03:10 +0000"  >&lt;p&gt;I think the attached patch fixes the thread safety issue w/ FieldCacheImpl.get &amp;#8211; I just made the non-noop validate methods of the *ValuesCreator sync&apos;d.&lt;/p&gt;</comment>
                    <comment id="12980484" author="yseeley@gmail.com" created="Wed, 12 Jan 2011 01:22:34 +0000"  >&lt;p&gt;Hmmm, it looks like the committed patch serializes loading of caches of multiple segments (for the same field?)&lt;br/&gt;
I had thought that the root of the problem was only when &quot;parser&quot; wasn&apos;t specified and the creator attempted to guess?  If so, it seems we could synchronize only when the parser was not originally specified.&lt;/p&gt;</comment>
                    <comment id="12980672" author="mikemccand" created="Wed, 12 Jan 2011 11:32:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmmm, it looks like the committed patch serializes loading of caches of multiple segments (for the same field?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ugh, you&apos;re right.  I had thought validate was &quot;only&quot; used after initial creation (eg, &quot;typically&quot; to add valid bits in), but in fact, create() calls validate().&lt;/p&gt;

&lt;p&gt;Yonik do you have a patch in mind to fix the root cause correctly?&lt;/p&gt;

&lt;p&gt;I have to say... the new FieldCache code is rather hairy.&lt;/p&gt;</comment>
                    <comment id="12980735" author="rcmuir" created="Wed, 12 Jan 2011 14:50:05 +0000"  >&lt;p&gt;We should be able to actually implement this issue now right?&lt;/p&gt;

&lt;p&gt;Implement LuceneTestCase.newSearcher(), and like the previous patch, sometimes use parallel in tests.&lt;br/&gt;
I think this would be preferred before we go optimizing synchronization, because otherwise how do we know if its correct?&lt;/p&gt;</comment>
                    <comment id="12980758" author="mikemccand" created="Wed, 12 Jan 2011 15:48:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think this would be preferred before we go optimizing synchronization, because otherwise how do we know if its correct?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12980808" author="rcmuir" created="Wed, 12 Jan 2011 17:11:25 +0000"  >&lt;p&gt;There is a downside to this whole issue of course... i think its going to be harder to reproduce test fails since we will be using more multithreading.&lt;/p&gt;

&lt;p&gt;But I think its a worthwhile tradeoff in being able to detect more thread-safety bugs.&lt;br/&gt;
If it becomes a huge hassle, we could always disable it by default or enable only with a flag or something like that.&lt;/p&gt;</comment>
                    <comment id="12981220" author="mikemccand" created="Thu, 13 Jan 2011 11:28:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;There is a downside to this whole issue of course... i think its going to be harder to reproduce test fails since we will be using more multithreading.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right.&lt;/p&gt;

&lt;p&gt;But I think this (losing reproducibility sometimes) is the lesser evil?  Ie, making sure we tease out thread safety bugs trumps reproducibility...&lt;/p&gt;</comment>
                    <comment id="12982328" author="rcmuir" created="Sun, 16 Jan 2011 16:15:07 +0000"  >&lt;p&gt;I&apos;d like to push this out from 3.1 also.&lt;/p&gt;

&lt;p&gt;Of the two problems i found, the concurrency issue only affected 4.0&apos;s fieldcache.&lt;br/&gt;
Additionally the combine() is now fixed and has an explicit test.&lt;/p&gt;</comment>
                    <comment id="12988510" author="yseeley@gmail.com" created="Sat, 29 Jan 2011 21:57:30 +0000"  >&lt;p&gt;Whew, this code is complex, and I don&apos;t really have a solution I like.&lt;/p&gt;

&lt;p&gt;Here&apos;s a patch to IntValuesCreator that&apos;s only for brainstorming purposes...&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;synchronize on the entry instead of the creator so more than one segment may be loaded concurrently.  This is needed to publish objects safely.&lt;/li&gt;
	&lt;li&gt;when guessing the parser, don&apos;t set it until it succeeds - basically split up setParserAndResetCounts() to set the counts first, but the parser last.&lt;/li&gt;
	&lt;li&gt;when setting/checking the parser, we need to synchronize on the creator&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also just realized that the mere act of checking the cache creates objects (see the base getCacheKey() ).&lt;/p&gt;</comment>
                    <comment id="12988798" author="rcmuir" created="Mon, 31 Jan 2011 17:04:59 +0000"  >&lt;p&gt;updated newSearcher tests pass for trunk.&lt;/p&gt;

&lt;p&gt;note, lots of tests will warn about leftover threads, because they still need to be fixed to close their IndexSearchers (i fixed a few, but not all yet)&lt;/p&gt;</comment>
                    <comment id="12988822" author="rcmuir" created="Mon, 31 Jan 2011 18:04:20 +0000"  >&lt;p&gt;updated patch with more tests fixed to close their searchers, some additional debugging, and a big nasty warning instead of 1 second join if you forget to close your searcher.&lt;/p&gt;</comment>
                    <comment id="12988851" author="rcmuir" created="Mon, 31 Jan 2011 19:14:40 +0000"  >&lt;p&gt;patch, with all tests fixed to close their searchers. tests are passing but there are two problems:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;see the nocommit in IndexSearcher, when it sets itself as its own child, this crazy recursive thing happens. I don&apos;t understand why this code is needed, it shouldn&apos;t set itself as its own child?&lt;/li&gt;
	&lt;li&gt;some tests in spans fail when they are run with multiple threads. don&apos;t know whats going on here:&lt;/li&gt;
&lt;/ol&gt;


&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;junit-sequential:
    [junit] Testsuite: org.apache.lucene.search.spans.TestSpansAdvanced2
    [junit] Tests run: 4, Failures: 2, Errors: 0, Time elapsed: 0.833 sec
    [junit]
    [junit] ------------- Standard Output ---------------
    [junit] 0 warning, expected score: 0.625, actual 0.23211958
    [junit] 0.23211958 = (MATCH) fieldWeight(TEXT:should in 1), product of:
    [junit]   1.0 = tf(phraseFreq=1.0)
    [junit]   0.37139133 = idf(TEXT:  should=14)
    [junit]   0.625 = fieldNorm(field=TEXT, doc=1)
    [junit]
    [junit] 0 warning, expected score: 1.0191123, actual 0.69635624
    [junit] 0.69635624 = (MATCH) sum of:
    [junit]   0.041781675 = (MATCH) weight(TEXT:should in 3), product of:
    [junit]     0.24494985 = queryWeight(TEXT:should), product of:
    [junit]       0.37139133 = idf(TEXT:  should=14)
    [junit]       0.6595465 = queryNorm
    [junit]     0.17057237 = (MATCH) fieldWeight(TEXT:should in 3), product of:
    [junit]       1.2247449 = tf(phraseFreq=1.5)
    [junit]       0.37139133 = idf(TEXT:  should=14)
    [junit]       0.375 = fieldNorm(field=TEXT, doc=3)
    [junit]   0.6545746 = (MATCH) weight(TEXT:we in 3), product of:
    [junit]     0.9695357 = queryWeight(TEXT:we), product of:
    [junit]       1.4700036 = idf(TEXT:  we=4)
    [junit]       0.6595465 = queryNorm
    [junit]     0.6751423 = (MATCH) fieldWeight(TEXT:we in 3), product of:
    [junit]       1.2247449 = tf(phraseFreq=1.5)
    [junit]       1.4700036 = idf(TEXT:  we=4)
    [junit]       0.375 = fieldNorm(field=TEXT, doc=3)
    [junit]
    [junit] ------------- ---------------- ---------------
    [junit] ------------- Standard Error -----------------
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSpansAdvanced2 -Dtestmethod=testSingleSpanQuery -Dtests.seed=5923986663359901096:-8292211890903536598
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSpansAdvanced2 -Dtestmethod=testMultipleDifferentSpanQueries -Dtests.seed=5923986663359901096:-2877104144909248514
    [junit] NOTE: test params are: codec=RandomCodecProvider: {TEXT=MockVariableIntBlock(baseBlockSize=59), ID=Pulsing(freqCutoff=12)}, locale=pl, timezone=Africa/Lubumbashi
    [junit] NOTE: all tests run in this JVM:
    [junit] [TestSpansAdvanced2]
    [junit] NOTE: Windows Vista 6.0 x86/Sun Microsystems Inc. 1.6.0_23 (32-bit)/cpus=4,threads=1,free=6497408,total=28114944
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testSingleSpanQuery(org.apache.lucene.search.spans.TestSpansAdvanced2):   FAILED
    [junit] expected:&amp;lt;0.625&amp;gt; but was:&amp;lt;0.2321195751428604&amp;gt;
    [junit] junit.framework.AssertionFailedError: expected:&amp;lt;0.625&amp;gt; but was:&amp;lt;0.2321195751428604&amp;gt;
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1183)
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1115)
    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced.assertHits(TestSpansAdvanced.java:172)
    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced2.testSingleSpanQuery(TestSpansAdvanced2.java:93)
    [junit]
    [junit]
    [junit] Testcase: testMultipleDifferentSpanQueries(org.apache.lucene.search.spans.TestSpansAdvanced2):      FAILED
    [junit] expected:&amp;lt;1.0191123485565186&amp;gt; but was:&amp;lt;0.6963562369346619&amp;gt;
    [junit] junit.framework.AssertionFailedError: expected:&amp;lt;1.0191123485565186&amp;gt; but was:&amp;lt;0.6963562369346619&amp;gt;
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1183)
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1115)
    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced.assertHits(TestSpansAdvanced.java:172)
    [junit]     at org.apache.lucene.search.spans.TestSpansAdvanced2.testMultipleDifferentSpanQueries(TestSpansAdvanced2.java:113)
    [junit]
    [junit]
    [junit] Test org.apache.lucene.search.spans.TestSpansAdvanced2 FAILED
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12988964" author="rcmuir" created="Mon, 31 Jan 2011 23:42:10 +0000"  >&lt;p&gt;adding 3.1, given the issues we found in trunk, i think we want to know this stuff works.&lt;/p&gt;</comment>
                    <comment id="12989839" author="simonw" created="Wed, 2 Feb 2011 22:35:36 +0000"  >&lt;p&gt;I just fixed the issues you have seen here on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2831&quot; title=&quot;Revise Weight#scorer &amp;amp; Filter#getDocIdSet API to pass Readers context&quot;&gt;&lt;del&gt;LUCENE-2831&lt;/del&gt;&lt;/a&gt; all tests pass with that latest patch here.&lt;/p&gt;</comment>
                    <comment id="12989846" author="rcmuir" created="Wed, 2 Feb 2011 22:52:00 +0000"  >&lt;p&gt;Thanks Simon! I&apos;ll commit this and take a look at backporting this monster to 3.x&lt;/p&gt;</comment>
                    <comment id="12989941" author="rcmuir" created="Thu, 3 Feb 2011 01:51:51 +0000"  >&lt;p&gt;It seems this uncovered some monsters in branch_3x (unless i severely screwed things up).&lt;/p&gt;

&lt;p&gt;Attached is a patch of my merge... there are problems: some tests totally hang (e.g. TestLazyProxSkipping), and if TestSort gets a parallel executor, testNormalizedScores fails:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] ------------- Standard Error -----------------
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestSort -Dtestmethod=testNormalizedScores -Dtests.seed=367124575585283127:1927326607030239825
    [junit] NOTE: test params are: locale=zh_SG, timezone=America/Tijuana
    [junit] NOTE: all tests run in this JVM:
    [junit] [TestSort]
    [junit] NOTE: Windows Vista 6.0 x86/Sun Microsystems Inc. 1.6.0_23 (32-bit)/cpus=4,threads=1,free=12557672,total=16252928
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testNormalizedScores(org.apache.lucene.search.TestSort):  FAILED
    [junit] expected:&amp;lt;1.6163856983184814&amp;gt; but was:&amp;lt;NaN&amp;gt;
    [junit] junit.framework.AssertionFailedError: expected:&amp;lt;1.6163856983184814&amp;gt; but was:&amp;lt;NaN&amp;gt;
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1045)
    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:977)
    [junit]     at org.apache.lucene.search.TestSort.assertSameValues(TestSort.java:1094)
    [junit]     at org.apache.lucene.search.TestSort.testNormalizedScores(TestSort.java:668)
    [junit]
    [junit]
    [junit] Test org.apache.lucene.search.TestSort FAILED
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Posting the patch of the merge so we can hopefully debug through these.&lt;/p&gt;</comment>
                    <comment id="12989944" author="rcmuir" created="Thu, 3 Feb 2011 02:28:55 +0000"  >&lt;p&gt;I fixed the hangs, it was due to a similar recursion bug that trunk had (IndexSearcher&lt;br/&gt;
setting itself as a sub).&lt;/p&gt;

&lt;p&gt;I committed the patch, but i added an @Ignore to the testNormalizeScores:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[junit] Testsuite: org.apache.lucene.search.TestSort
[junit] Tests run: 26, Failures: 0, Errors: 0, Time elapsed: 2.471 sec
[junit]
[junit] ------------- Standard Error -----------------
[junit] NOTE: Ignoring test method &apos;testNormalizedScores&apos;: Fix me! Fails if one of the subs is a threaded indexsearcher
[junit] ------------- ---------------- ---------------
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think we should get to the bottom of why this one fails... I&apos;ll keep the issue open.&lt;/p&gt;
</comment>
                    <comment id="12990221" author="simonw" created="Thu, 3 Feb 2011 18:31:36 +0000"  >&lt;p&gt;Robert, I committed a fix with revision 1066904 on 3x I think we should wait a bit and close this issue.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12990319" author="rcmuir" created="Thu, 3 Feb 2011 21:29:34 +0000"  >&lt;p&gt;I think we are good to resolve this? I expect/hope for random&lt;br/&gt;
fails in the future that we will content with on a case by case basis!&lt;/p&gt;

&lt;p&gt;Thanks for fixing it!&lt;/p&gt;</comment>
                    <comment id="12990546" author="simonw" created="Fri, 4 Feb 2011 12:47:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we are good to resolve this?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yeah - no failure during the night! Nice!&lt;/p&gt;</comment>
                    <comment id="13013338" author="gsingers" created="Wed, 30 Mar 2011 16:50:01 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12470097" name="LUCENE-2751_branch3x.patch" size="97354" author="rcmuir" created="Thu, 3 Feb 2011 01:51:51 +0000" />
                    <attachment id="12469847" name="LUCENE-2751.patch" size="111515" author="rcmuir" created="Mon, 31 Jan 2011 19:14:40 +0000" />
                    <attachment id="12469844" name="LUCENE-2751.patch" size="103910" author="rcmuir" created="Mon, 31 Jan 2011 18:04:20 +0000" />
                    <attachment id="12469833" name="LUCENE-2751.patch" size="99963" author="rcmuir" created="Mon, 31 Jan 2011 17:04:59 +0000" />
                    <attachment id="12469753" name="LUCENE-2751.patch" size="3036" author="yseeley@gmail.com" created="Sat, 29 Jan 2011 21:57:30 +0000" />
                    <attachment id="12467494" name="LUCENE-2751.patch" size="3807" author="mikemccand" created="Wed, 5 Jan 2011 00:03:10 +0000" />
                    <attachment id="12459245" name="LUCENE-2751.patch" size="80255" author="rcmuir" created="Wed, 10 Nov 2010 15:08:21 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Jan 2011 00:03:10 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11100</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24941</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>