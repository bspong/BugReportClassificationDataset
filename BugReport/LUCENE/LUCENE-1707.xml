<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:34 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1707/LUCENE-1707.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1707] Don&apos;t use ensureOpen() excessively in IndexReader and IndexWriter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1707</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;A spin off from here: &lt;a href=&quot;http://www.nabble.com/Excessive-use-of-ensureOpen()-td24127806.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Excessive-use-of-ensureOpen()-td24127806.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should stop calling this method when it&apos;s not necessary for any internal Lucene code. Currently, this code seems to hurt properly written apps, unnecessarily.&lt;/p&gt;

&lt;p&gt;Will post a patch soon&lt;/p&gt;</description>
                <environment></environment>
            <key id="12428497">LUCENE-1707</key>
            <summary>Don&apos;t use ensureOpen() excessively in IndexReader and IndexWriter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Sun, 21 Jun 2009 03:34:27 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:27 +0100</updated>
                    <resolved>Thu, 25 Jun 2009 20:55:10 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12723564" author="shaie" created="Wed, 24 Jun 2009 14:50:29 +0100"  >&lt;p&gt;Patch includes:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;remove all calls to ensureOpen in IndexReader and deprecated ensureOpen().&lt;/li&gt;
	&lt;li&gt;remove most of the calls to ensureOpen in IndexWriter (those that happen at the beginning of methods).&lt;/li&gt;
	&lt;li&gt;added isOpen to both IndexReader and IndexWriter.&lt;/li&gt;
	&lt;li&gt;deleted some test cases that checked this functionality.&lt;/li&gt;
	&lt;li&gt;fixed tag (removed test cases)&lt;/li&gt;
	&lt;li&gt;CHANGES&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All tests pass, except for TestRussianStem under contrib/analyzers. But that does not seem to be related to this patch, as it fails on a clean trunk checkout also. I think it has to do w/ encoding, but I don&apos;t know if I&apos;m the only one that experiences that.&lt;/p&gt;</comment>
                    <comment id="12723782" author="mikemccand" created="Wed, 24 Jun 2009 23:46:00 +0100"  >&lt;p&gt;I&apos;d actually rather not remove the ensureOpen calls (I think it&apos;s&lt;br/&gt;
better when the user sees an AlreadyClosedException than an NPE from&lt;br/&gt;
somewhere deeper in IndexReader), but instead change it to a best&lt;br/&gt;
effort impl (ie don&apos;t use volatile).&lt;/p&gt;

&lt;p&gt;I think for nearly all the methods where we have ensureOpen today, the&lt;br/&gt;
cost (once we stop checking volatile) is tiny (this coming from&lt;br/&gt;
someone who is normally a freak about performance!).&lt;/p&gt;</comment>
                    <comment id="12724055" author="shaie" created="Thu, 25 Jun 2009 12:49:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d actually rather not remove the ensureOpen calls (I think it&apos;s better when the user sees an AlreadyClosedException than an NPE from somewhere deeper in IndexReader), but instead change it to a best effort impl (ie don&apos;t use volatile). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree that it&apos;s better to see ACE than NPE. However, I thought we agreed that nearly all applications do not rely on ACE. And even if we make it super fast, I still don&apos;t see why for a properly written application, which knows it does not access a closed reader/writer we should check ensureOpen(). And, our merge code calls document() while reading from an IndexReader, which obviously cannot be close, so why check there?&lt;/p&gt;

&lt;p&gt;True, ACE helps developers of good apps, which &quot;forgot&quot; they closed the reader few lines above, track the problem faster ... But then this issue becomes just changing refCount to not volatile? And nothing to do on IndexWriter? If that was the intention, then I don&apos;t think an issue is needed, and a committer can just commit this one line change?&lt;/p&gt;</comment>
                    <comment id="12724090" author="mikemccand" created="Thu, 25 Jun 2009 14:47:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;However, I thought we agreed that nearly all applications do not rely on ACE&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s not that apps are relying on ACE, it&apos;s that the unlucky user who has problems is informed much more clearly that the problem is in their code and not a bug in Lucene.  It&apos;s a trap.&lt;/p&gt;

&lt;p&gt;In the past there were a good number of users posting with confusing exceptions coming out Lucene, thinking they had hit a bug.  These users spent time, others spent time reading it, answering it, etc.  Now, I haven&apos;t seen one of those emails in quite a while.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But then this issue becomes just changing refCount to not volatile? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should leave refCount volatile, but just assign false to a new write-once &quot;isOpen&quot; (that&apos;s not volatile) when refCount drops to false.&lt;/p&gt;</comment>
                    <comment id="12724103" author="shaie" created="Thu, 25 Jun 2009 15:17:00 +0100"  >&lt;p&gt;IndexReader already has a &apos;closed&apos; member which is set to true in close(). Why not use it?&lt;/p&gt;

&lt;p&gt;In fact, it&apos;s strange - close() decreases refCount and set &apos;closed&apos; to true, but if decRef() is called from another reader (it is a public method, so maybe even from an outside app), and refCount is 0, close() will call decRef() again, and fail on assert refCount &amp;gt; 0. Shouldn&apos;t that be fixed?&lt;/p&gt;</comment>
                    <comment id="12724112" author="mikemccand" created="Thu, 25 Jun 2009 15:51:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;IndexReader already has a &apos;closed&apos; member which is set to true in close(). Why not use it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh perfect let&apos;s use that!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In fact, it&apos;s strange - close() decreases refCount and set &apos;closed&apos; to true, but if decRef() is called from another reader (it is a public method, so maybe even from an outside app), and refCount is 0, close() will call decRef() again, and fail on assert refCount &amp;gt; 0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If decRef() is called and refCount is 0, doClose() (not close()) is called.  I think this is right?&lt;/p&gt;</comment>
                    <comment id="12724118" author="shaie" created="Thu, 25 Jun 2009 16:10:09 +0100"  >&lt;p&gt;I tried using closed, but TestIndexReaderReopen fails. It appears that closed is used mainly to not execute close() twice (i.e., after you call it once, calling it again will do nothing) on the same instance. Even after I set closed to false wherever it should be (wherever refCount is increased or set to greater than 0), and set it to true in decRef()&apos;s &quot;if (refCount == 1)&quot; section, the test fails. If I come up w/ isOpen, the test passes.&lt;/p&gt;

&lt;p&gt;I think it&apos;s because IndexWriter.ReadersPool closes a reader, and the test then attempts to close the reader again, then comparing the ref counts. So I&apos;m not sure closed can be used.&lt;/p&gt;</comment>
                    <comment id="12724121" author="shaie" created="Thu, 25 Jun 2009 16:16:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;If decRef() is called and refCount is 0, doClose() (not close()) is called. I think this is right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you call decRef() and then close(), it&apos;ll be wrong? I think the solution is to set closed = true in decRef() after doClose() has returned?&lt;/p&gt;</comment>
                    <comment id="12724127" author="mikemccand" created="Thu, 25 Jun 2009 16:33:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;So I&apos;m not sure closed can be used.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Woops, sorry closed cannot be used: it simply reflects whether the referrer who had opened the reader, has closed it.  So even once they&apos;ve closed it, the reader can stibe open because others are holding references.  We need a separate member that&apos;s set as soon as refCount hits 0.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you call decRef() and then close(), it&apos;ll be wrong? I think the solution is to set closed = true in decRef() after doClose() has returned?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But, if refCount hits 0 and closed is false then there&apos;s some bug lurking (in the app code or the Lucene code)?  Ie, someone did an extra decRef.  I&apos;d rather things fail then hide the bug in that case.&lt;/p&gt;</comment>
                    <comment id="12724131" author="shaie" created="Thu, 25 Jun 2009 16:39:50 +0100"  >&lt;blockquote&gt;&lt;p&gt;But, if refCount hits 0 and closed is false then there&apos;s some bug lurking (in the app code or the Lucene code)? Ie, someone did an extra decRef. I&apos;d rather things fail then hide the bug in that case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By that you&apos;re saying that calling decRef() and then close() is wrong, which I agree, but still possible. Why not protect against it, by setting closed=true in decRef() if refCount drops to 0? What good does &quot;not hiding that bug&quot; do?&lt;/p&gt;

&lt;p&gt;Currently the tests pass whether I protect against it or not, so our code works fine (no surprises here). But I just think that decRef() and close() are public, which doesn&apos;t prevent anyone from calling them in whatever order one wants &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;If you don&apos;t think it&apos;s necessary to protect against it, I&apos;ll post a patch w/o it.&lt;/p&gt;</comment>
                    <comment id="12724134" author="shaie" created="Thu, 25 Jun 2009 16:59:21 +0100"  >&lt;p&gt;Patch with protecting against decRef() and close(). Lines 28-30 include this particular change, so if you disapprove, just delete these lines (assuming everything else is good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                    <comment id="12724138" author="shaie" created="Thu, 25 Jun 2009 17:14:11 +0100"  >&lt;p&gt;I see all access to refCount is synchronized. Why is it volatile then? Just because of ensureOpen()?&lt;/p&gt;</comment>
                    <comment id="12724153" author="mikemccand" created="Thu, 25 Jun 2009 18:22:43 +0100"  >&lt;p&gt;Patch looks good; thanks Shai!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why is it volatile then? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good question.  Only the ctor (which I believe is fine) and ensureOpen() access it un-synchronized, so I think we should make it un-volatile; I&apos;ll change it before committing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What good does &quot;not hiding that bug&quot; do?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;EG, say we&apos;re working on SegmentReader an accidentally create a bug that sometimes over decRefs. By no longer throwing an exception on close (with this change) unit tests might happily pass when previously they would fail and the bug could go undetected for longer.  (Hopefully some tests would still catch the bug, but maybe not).  I think catching a bug sooner rather than later is better.&lt;/p&gt;

&lt;p&gt;Calling close many times is allowed (not a bug), and we handle that by only doing one decRef.  But too many calls to decRef is a real bug and I think we shouldn&apos;t mask/delay it.&lt;/p&gt;</comment>
                    <comment id="12724169" author="shaie" created="Thu, 25 Jun 2009 19:17:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;Patch looks good; thanks Shai! &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Note that decRef() sets closed=true if refCount = 0. This will protect against the other bug (calling close() then decRef() or vice versa). So if you don&apos;t want it there, we should remove it before committing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;so I think we should make it un-volatile; I&apos;ll change it before committing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we change refCount to not volatile, is this patch still needed? I.e., what&apos;s wrong w/ checking in ensureOpen if refCount &amp;lt;= 0, same as before?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But too many calls to decRef is a real bug and I think we shouldn&apos;t mask/delay it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would not be possible, since decRef() asserts refCount &amp;gt; 0 (and asserts are enabled in tests) and calls ensureOpen(). So calling decRef() twice in a raw would hit either an assert exception (tests) or ACE (assertions disabled). I think?&lt;/p&gt;</comment>
                    <comment id="12724186" author="mikemccand" created="Thu, 25 Jun 2009 19:47:50 +0100"  >&lt;blockquote&gt;&lt;p&gt;So calling decRef() twice in a raw would hit either an assert exception (tests) or ACE (assertions disabled). I think?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s say I open a reader, I incRef it once somewhere.... then the reader is passed around and some other code somewhere incorrectly calls decRef twice, then finally at the end I close the reader.&lt;/p&gt;

&lt;p&gt;Today, that trips an assertion, because you decRef&apos;d too many times, and one of them &quot;stole&quot; the ref you got from open.&lt;/p&gt;

&lt;p&gt;But with this change, we would not trip an assertion.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we change refCount to not volatile, is this patch still needed? I.e., what&apos;s wrong w/ checking in ensureOpen if refCount &amp;lt;= 0, same as before?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Duh, right, I think we in fact have nothing to do here...&lt;/p&gt;</comment>
                    <comment id="12724220" author="shaie" created="Thu, 25 Jun 2009 20:30:13 +0100"  >&lt;p&gt;Ok I won&apos;t argue about that - these are hypothetical things anyway &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Duh, right, I think we in fact have nothing to do here...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Except making refCount not volatile &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;BTW, Yonik has just sent an email to java-dev on the semantics of close(). Maybe, if things need to change, we can do it as part of this issue.&lt;/p&gt;</comment>
                    <comment id="12724237" author="mikemccand" created="Thu, 25 Jun 2009 20:55:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;Except making refCount not volatile&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I just committed that.  How crazy to have a one-line change &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Such contrast!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BTW, Yonik has just sent an email to java-dev on the semantics of close(). Maybe, if things need to change, we can do it as part of this issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s do that (&quot;don&apos;t allow double-closing&quot;) under a new issue?&lt;/p&gt;</comment>
                    <comment id="12724251" author="shaie" created="Thu, 25 Jun 2009 21:20:27 +0100"  >&lt;p&gt;Do you think that changing ensureOpen() to check &quot;if (refCount == 0)&quot; will speed things up a bit?&lt;/p&gt;</comment>
                    <comment id="12724254" author="mikemccand" created="Thu, 25 Jun 2009 21:25:26 +0100"  >&lt;p&gt;Alas I don&apos;t think we should do that.  Eg if an app over-decRef&apos;s and refCount becomes -1 but doesn&apos;t trip the assert because assertions are off, we want to still hit the ACE.&lt;/p&gt;</comment>
                    <comment id="12724256" author="yseeley@gmail.com" created="Thu, 25 Jun 2009 21:28:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;Do you think that changing ensureOpen() to check &quot;if (refCount == 0)&quot; will speed things up a bit? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Nope - not on any common CPUs.  There is normally a test instruction which sets a bunch of status flags - branching on those status flags for less-or-equal is the same exact cycle count as equal.&lt;/p&gt;</comment>
                    <comment id="12724283" author="yseeley@gmail.com" created="Thu, 25 Jun 2009 21:52:05 +0100"  >&lt;p&gt;I also just double-checked and confirmed that the macro-op fusion in intel&apos;s latest processors treats CMP followed by JNE/JE the same as if followed by JA/JAE/JB/JBE.&lt;/p&gt;</comment>
                    <comment id="12724291" author="shaie" created="Thu, 25 Jun 2009 22:04:30 +0100"  >&lt;blockquote&gt;&lt;p&gt;if an app over-decRef&apos;s and refCount becomes -1 but doesn&apos;t trip the assert&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Following assert we call ensureOpen, so I don&apos;t think refCount will ever be less than 0. Right?&lt;/p&gt;</comment>
                    <comment id="12724296" author="mikemccand" created="Thu, 25 Jun 2009 22:12:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Following assert we call ensureOpen, so I don&apos;t think refCount will ever be less than 0. Right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Heh, you are correct!  The only place where we change refCount, we also always call ensureOpen.  So there&apos;s &lt;span class=&quot;error&quot;&gt;&amp;#91;currently&amp;#93;&lt;/span&gt; no way for it to slip past zero without ensureOpen noticing.&lt;/p&gt;

&lt;p&gt;Still I&apos;d prefer to leave it, defensively, eg in case things ever change such that refCount could become negative.&lt;/p&gt;</comment>
                    <comment id="12724371" author="shaie" created="Fri, 26 Jun 2009 04:19:46 +0100"  >&lt;p&gt;sure, especially if == 0 and &amp;lt;= 0 perform the same in modern CPUs&lt;/p&gt;</comment>
                    <comment id="12726143" author="rcmuir" created="Wed, 1 Jul 2009 18:28:48 +0100"  >&lt;p&gt;Shai, I am curious: did you resolve your issue with TestRussianStem?&lt;/p&gt;

&lt;p&gt;Although I do not experience this problem, it is unclear why RussianAnalyzer exists when it appears to be a duplicate of snowball functionality (in contrib/snowball)&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/**
 * Russian stemming algorithm implementation (see http://snowball.sourceforge.net for detailed description).
 *
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12726343" author="shaie" created="Thu, 2 Jul 2009 07:14:16 +0100"  >&lt;p&gt;I haven&apos;t tried since then ... I think it&apos;s an encoding issue (one of the .txt files was checked out using incorrect encoding). I did change my SVN config file to add eol-style:native to a bunch of extensions, but I&apos;m not sure if that&apos;s related. Anyway, this seemed to happen after these changes.&lt;/p&gt;</comment>
                    <comment id="12726462" author="rcmuir" created="Thu, 2 Jul 2009 13:49:07 +0100"  >&lt;p&gt;my code was a little out of date. I am now experiencing this problem too. &lt;/p&gt;

&lt;p&gt;I think you hit the nail on the head: the related files: wordsUnicode.txt and stemsUnicode.txt are in UTF-16 encoding. this might be causing the issue, because EOL is very different in that encoding!&lt;/p&gt;</comment>
                    <comment id="12726475" author="shaie" created="Thu, 2 Jul 2009 14:31:08 +0100"  >&lt;p&gt;so do we need to change those back to not eol-style:native? I know Mike updated a lot of files recently to eol-style:native (I think one of those two was updated as well). Why doesn&apos;t Hudson encounter this problem? I&apos;ve commented out the .txt line in my SVN config. Previously I didn&apos;t have it, but I followed a page from Solr wiki (&lt;a href=&quot;http://wiki.apache.org/solr/CommitterInfo#head-849f78497222f424339b79417056f4e510349fcb&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/solr/CommitterInfo#head-849f78497222f424339b79417056f4e510349fcb&lt;/a&gt;) which recommended to put it.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to checkout again, though I&apos;m not sure if that will help. I think we need to revert the change that was done on r787424. I see that on r153431 (Feb 2005) the comment is &quot;change eol style to LF&quot; - maybe it was for a reason? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12726479" author="rcmuir" created="Thu, 2 Jul 2009 14:36:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why doesn&apos;t Hudson encounter this problem?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Forgive my ignorance, does hudson also run tests or just verify build? These files are only used in tests!&lt;/p&gt;

&lt;p&gt;I agree we should correct it, and perhaps to prevent other problems these files should be converted to UTF-8. &lt;/p&gt;

&lt;p&gt;For the record I am still confused about these java-code analyzers that implement snowball algorithms, why do they exist when the same functionality is in contrib/snowball? &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12411831" name="LUCENE-1707.patch" size="1260" author="shaie" created="Thu, 25 Jun 2009 16:59:21 +0100" />
                    <attachment id="12411647" name="LUCENE-1707.patch" size="42491" author="shaie" created="Wed, 24 Jun 2009 14:50:29 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 24 Jun 2009 22:46:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12051</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26019</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>