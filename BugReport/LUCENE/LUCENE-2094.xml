<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2094/LUCENE-2094.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2094] Prepare CharArraySet for Unicode 4.0</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2094</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;CharArraySet does lowercaseing if created with the correspondent flag. This causes that  String / char[] with uncode 4 chars which are in the set can not be retrieved in &quot;ignorecase&quot; mode.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12441571">LUCENE-2094</key>
            <summary>Prepare CharArraySet for Unicode 4.0</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Nov 2009 14:18:47 +0000</created>
                <updated>Thu, 7 Jan 2010 20:12:28 +0000</updated>
                    <resolved>Thu, 3 Dec 2009 10:33:37 +0000</resolved>
                            <version>3.0</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12781946" author="simonw" created="Tue, 24 Nov 2009 14:20:57 +0000"  >&lt;p&gt;This patch contains a testcase and a fixed CharArraySet. Yet this does not use Version to preserve compatibility. I bring this patch up to start the discussion how we should handle this particular case.&lt;br/&gt;
Using version would not be that much of an issue as all Analyzers using a CharArraySet do have the Version class already.&lt;/p&gt;</comment>
                    <comment id="12781950" author="rcmuir" created="Tue, 24 Nov 2009 14:27:55 +0000"  >&lt;p&gt;Hi simon, at a glance your patch is ok.&lt;/p&gt;

&lt;p&gt;I wonder though if we should try to consistently improve both this and LowerCaseFilter patch in the same way.&lt;br/&gt;
i have two ideas that might make it easier...? I am very inconsistent with these things myself so I guess we can try to make it consistent.&lt;/p&gt;

&lt;p&gt;1.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  
   &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0;i&amp;lt;len;i++) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toLowerCase(text1[off+i]) != text2[i])
        &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; codePointAt = &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.codePointAt(text1, off+i);
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toLowerCase(codePointAt) != &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.codePointAt(text2, i))
           &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(codePointAt &amp;gt;= &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.MIN_SUPPLEMENTARY_CODE_POINT){
          ++i;
         }
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wonder if instead loops like this should look like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i =0; i &amp;lt; len; ) {
  ...
  i += &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.charCount(codepoint);
 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2. I wonder if we should even add an if (supplementary) for things like lowercasing.&lt;br/&gt;
toLowerCase(ch) and toLowerCase(int) are most likely the same code anyway, &lt;br/&gt;
so we could just make the code easier to read.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; len; ) {
 i += &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toChars(arr, ... 
          &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.toLowerCase(
             &lt;span class=&quot;code-object&quot;&gt;Character&lt;/span&gt;.codePointAt(...)))
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12781958" author="thetaphi" created="Tue, 24 Nov 2009 14:40:05 +0000"  >&lt;p&gt;Maybe we put this into UnicodeUtils (handling of toLowerCase etc for char[]).&lt;/p&gt;</comment>
                    <comment id="12781959" author="simonw" created="Tue, 24 Nov 2009 14:40:09 +0000"  >&lt;p&gt;Robert, I tried to make it consistent to the LowerCaseFilter issues but I would vote +1 for both! This makes it much cleaner but we need to change the LowerCaseFilter one too!&lt;br/&gt;
I will quickly change my patch.&lt;/p&gt;</comment>
                    <comment id="12781960" author="simonw" created="Tue, 24 Nov 2009 14:42:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe we put this into UnicodeUtils (handling of toLowerCase etc for char[]). &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think calling those 3 methods should be fine without a utils method. We will see how it goes until the &quot;end&quot; of this whole issues I might change my mind.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12781962" author="rcmuir" created="Tue, 24 Nov 2009 14:45:35 +0000"  >&lt;p&gt;Simon definitely, it is not a problem with your patch...&lt;br/&gt;
Thinking we can fix both to be clean.&lt;/p&gt;

&lt;p&gt;btw, I have no idea if there is any performance difference between doing things this way.&lt;/p&gt;</comment>
                    <comment id="12781963" author="simonw" created="Tue, 24 Nov 2009 14:46:33 +0000"  >&lt;p&gt;Changed loop to use Charater.charCount()&lt;/p&gt;</comment>
                    <comment id="12781964" author="simonw" created="Tue, 24 Nov 2009 14:49:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;btw, I have no idea if there is any performance difference between doing things this way.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The change to charCount is pretty much the same as the if statement - this at least would not kill any performance.&lt;br/&gt;
The increment by 2 should also not be an issue. it is slightly slower than a ++ but this will be fine I guess.&lt;/p&gt;</comment>
                    <comment id="12781965" author="rcmuir" created="Tue, 24 Nov 2009 14:53:03 +0000"  >&lt;p&gt;simon yeah,&lt;/p&gt;

&lt;p&gt;I guess what I don&apos;t know, is if in the JDK Character.foo(int) is the same underlying stuff as Character.foo(char)&lt;br/&gt;
in trunk ICU there is not even char-based methods, it is all int, where its a trie lookup, with a special fast-path array for linear access to Latin-1&lt;/p&gt;</comment>
                    <comment id="12781969" author="simonw" created="Tue, 24 Nov 2009 15:00:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I guess what I don&apos;t know, is if in the JDK Character.foo(int) is the same underlying stuff as Character.foo(char)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The JDK version of toLowerCase(char) for instance casts to int and calls the overloaded method.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isLowerCase(&lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt; ch) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; isLowerCase((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)ch);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is the case all over the place as far as I can see.&lt;/p&gt;</comment>
                    <comment id="12781971" author="rcmuir" created="Tue, 24 Nov 2009 15:04:42 +0000"  >&lt;p&gt;Simon, yeah i just checked.&lt;br/&gt;
all the properties, behind the scenes are stored as int.&lt;br/&gt;
we shouldn&apos;t use any char-based methods pretending it will buy us any faster performance.&lt;br/&gt;
it will just make the code ugly and probably slower.&lt;/p&gt;

&lt;p&gt;slower meaning, the &quot;if&quot; itself in the lowercasefilter patch, it can now be removed.&lt;/p&gt;</comment>
                    <comment id="12781974" author="simonw" created="Tue, 24 Nov 2009 15:11:13 +0000"  >&lt;p&gt;Added some more tests including single highsurrogate chars.&lt;/p&gt;</comment>
                    <comment id="12781980" author="simonw" created="Tue, 24 Nov 2009 15:29:09 +0000"  >&lt;p&gt;question of the day - should we use Version or not &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="12781983" author="thetaphi" created="Tue, 24 Nov 2009 15:33:11 +0000"  >&lt;p&gt;It would not hurt, the Set is only used for analyzers that all take a version param... It is not really a public API.&lt;/p&gt;</comment>
                    <comment id="12781994" author="simonw" created="Tue, 24 Nov 2009 15:56:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;It would not hurt, the Set is only used for analyzers that all take a version param... It is not really a public API. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So the thing here is that lowercasing for supplementary characters does only apply to a hand ful of chars see this link &lt;a href=&quot;http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[&lt;span class=&quot;error&quot;&gt;&amp;#91;%3ACase_Sensitive%3DTrue%3A&amp;#93;&lt;/span&gt;%26[&quot; class=&quot;external-link&quot;&gt;http://unicode.org/cldr/utility/list-unicodeset.jsp?a=[&lt;span class=&quot;error&quot;&gt;&amp;#91;%3ACase_Sensitive%3DTrue%3A&amp;#93;&lt;/span&gt;%26[&lt;/a&gt;^&lt;span class=&quot;error&quot;&gt;&amp;#91;\u0000-\uFFFF&amp;#93;&lt;/span&gt;]]&amp;amp;esc=on&lt;br/&gt;
Those characters are from the Deseret Alphabet (mormons) which means we are introducing a &quot;pain in the neck&quot; Version flag into CharArraySet for about 40 chars which would be broken?! I don&apos;t see this here! Nothing personal related to the Deseret Alphabet or anyone who is using it but this seem a bit too much of a hassle. It would make the code very ugly though.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;

</comment>
                    <comment id="12781995" author="rcmuir" created="Tue, 24 Nov 2009 15:58:03 +0000"  >&lt;p&gt;Another option would be to list a back break in changes:&lt;/p&gt;

&lt;p&gt;if you are indexing Deseret language, you should reindex.&lt;/p&gt;

&lt;p&gt;we could remove the Version from LowerCaseFilter this way, too.&lt;br/&gt;
If you are indexing this language, things werent working right before so you surely wrote your own filters...?!&lt;/p&gt;</comment>
                    <comment id="12781998" author="simonw" created="Tue, 24 Nov 2009 16:01:07 +0000"  >&lt;p&gt;I would also break compat in LowerCaseFilter and bring out a large NOTE that if you index mormon you need to reindex.&lt;/p&gt;</comment>
                    <comment id="12782007" author="thetaphi" created="Tue, 24 Nov 2009 16:21:49 +0000"  >&lt;p&gt;+1 for breaking backwards for these chars. From the web: there are only 4 books written in this charset (the books of mormon, see &lt;a href=&quot;http://en.wikipedia.org/wiki/Deseret_alphabet&quot; class=&quot;external-link&quot;&gt;http://en.wikipedia.org/wiki/Deseret_alphabet&lt;/a&gt;, &lt;a href=&quot;http://www.omniglot.com/writing/deseret.htm&quot; class=&quot;external-link&quot;&gt;http://www.omniglot.com/writing/deseret.htm&lt;/a&gt;), so it is rather seldom. People affected by this will for sure have their own analyzers.&lt;/p&gt;</comment>
                    <comment id="12782009" author="rcmuir" created="Tue, 24 Nov 2009 16:25:01 +0000"  >&lt;p&gt;Simon, yeah. its tricky you know, like many suppl. char issues.&lt;/p&gt;

&lt;p&gt;even if we provide perfect backwards compatibility with what 3.0 did, if you care about these languages, you &lt;b&gt;WANT&lt;/b&gt; to reindex, because stuff wasn&apos;t working at all before.&lt;br/&gt;
and if you really care, you weren&apos;t using any of lucene&apos;s analysis components anyway (except maybe WhitespaceTokenizer).&lt;br/&gt;
For example, StandardAnalyzer currently discards these characters anyway.&lt;/p&gt;

&lt;p&gt;but we don&apos;t want to screw over CJK users where things might have been &quot;mostly&quot; working before, either.&lt;br/&gt;
In this case, CJK is completely unaffected, I think we should not use version here or in any other lowercasing fixes, including LowerCaseFilter itself.&lt;/p&gt;</comment>
                    <comment id="12783269" author="simonw" created="Sat, 28 Nov 2009 19:44:39 +0000"  >&lt;p&gt;This patch uses CharacterUtils and Version to preserve backwards compatibility. It has grown to a very large patch and changes a lot of stuff in core too. I&apos;m not sure if this is the best way to go with the limited usecase in mind. - Only Deseret language has upper / lowercase pairs which are not in the BMP. Yet this could change in the future - who knows that way we could get rid of the deprecated methodes little quicker...&lt;/p&gt;

&lt;p&gt;From a backwards policy perspective we should do it that way.&lt;/p&gt;
</comment>
                    <comment id="12783282" author="thetaphi" created="Sat, 28 Nov 2009 20:55:09 +0000"  >&lt;p&gt;Why do you use Version.LUCENE_CURRENT for all predefined stop word sets (ok, they do not need a match version, because they are already lowercased).&lt;/p&gt;

&lt;p&gt;In my opinion the whole stuff is only needed for chararrayssets, which are not already lowercased. So is there any chararrayset in lucene with predefined stop-words, that is not lowercased)?&lt;/p&gt;

&lt;p&gt;How about deprecating lowercasing at all and enforcing the stop lists to be lowercased before adding to an chararrayset? For current hard-coded sets, its no problem. And all File/Reader/... params to analyzers with lowercase could be deprecated and the user told to use the new ones which need already lowercased stop word sets.&lt;/p&gt;</comment>
                    <comment id="12783392" author="simonw" created="Sun, 29 Nov 2009 12:01:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why do you use Version.LUCENE_CURRENT for all predefined stop word sets (ok, they do not need a match version, because they are already lowercased). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;1. the do not ignore case at all so the version will not affect those sets.&lt;br/&gt;
2. they are private and we have the full control over the sets. The are all lowercased (as you figured correctly) and none of them contains any supplementary character.&lt;br/&gt;
3. The are static and private so passing any usersupplied version is not feasible.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In my opinion the whole stuff is only needed for chararrayssets, which are not already lowercased. So is there any chararrayset in lucene with predefined stop-words, that is not lowercased)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Either way, if the set is lowercased or not the lowercaseing is also applied to the values checked against the set.&lt;/p&gt;</comment>
                    <comment id="12783393" author="thetaphi" created="Sun, 29 Nov 2009 12:19:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;Either way, if the set is lowercased or not the lowercaseing is also applied to the values checked against the set.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the LowerCaseFilter is applied before the stopwords, there is no need for doing irgnore-case-checking.&lt;/p&gt;</comment>
                    <comment id="12783394" author="simonw" created="Sun, 29 Nov 2009 12:43:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;If the LowerCaseFilter is applied before the stopwords, there is no need for doing irgnore-case-checking.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no doubt! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But if you do not want your terms to be lowercased but you do not care if &quot;The&quot; is at has an uppercase &quot;T&quot; you want this behaviour. Yet, either way we go we need the version somehow to preserve bw. compat. &lt;/p&gt;

&lt;p&gt;We should rather think about breaking bw. compat for this particular language (deseret) but we have no idea what happens with unicode in the future. Its tough.&lt;/p&gt;
</comment>
                    <comment id="12783395" author="rcmuir" created="Sun, 29 Nov 2009 12:45:55 +0000"  >&lt;p&gt;Hi Simon,&lt;/p&gt;

&lt;p&gt;One thing I noticed is with this patch we get:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; StopFilter(Version matchVersion, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enablePositionIncrements, TokenStream input, Set&amp;lt;?&amp;gt; stopWords, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; ignoreCase)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know this is really not related to what you are doing here, but I wonder if instead StopFilter should look like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; StopFilter(Version matchVersion, TokenStream input, Set&amp;lt;?&amp;gt; stopWords, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; ignoreCase)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and use matchVersion to determine enablePositionIncrements. &lt;/p&gt;

&lt;p&gt;I think its already wierd how to create a stopfilter, you have to pass version to a static method getEnablePositionIncrementsVersionDefault. I don&apos;t think the user should have to pass Version twice:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StopFilter(Version.WHATEVER, StopFilter.getEnablePositionIncrementsVersionDefault(Version.WHATEVER), ...)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I guess i think this getEnablePositionIncrementsVersionDefault should be deprecated along with the ctors that take this boolean argument, and it should all be driven off a single Version argument for simplicity&lt;/p&gt;</comment>
                    <comment id="12783396" author="thetaphi" created="Sun, 29 Nov 2009 12:53:33 +0000"  >&lt;p&gt;Mike didn&apos;t want to add matchVersion to StopFilter at this time, but when we change this, we should remove this static method or deprecate it and not use it anymore in the code. Instead use only matchVersion everywhere and eliminate the enablePosIncr setting at all.&lt;/p&gt;</comment>
                    <comment id="12783399" author="rcmuir" created="Sun, 29 Nov 2009 12:58:52 +0000"  >&lt;p&gt;Uwe, yeah, that is what I was thinking. &lt;br/&gt;
I guess I think an alternate ctor that allows explicit control of this with a boolean is ok,&lt;br/&gt;
but I think if you want the &quot;defaults&quot; it should just be with Version.&lt;/p&gt;

&lt;p&gt;This really doesn&apos;t have a lot to do with Simon&apos;s patch but it becomes noticeable now.&lt;/p&gt;</comment>
                    <comment id="12783402" author="mikemccand" created="Sun, 29 Nov 2009 13:23:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;I guess i think this getEnablePositionIncrementsVersionDefault should be deprecated along with the ctors that take this boolean argument, and it should all be driven off a single Version argument for simplicity&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, I agree, let&apos;s also push Version down into StopFilter (to get posIncr setting).&lt;/p&gt;</comment>
                    <comment id="12783406" author="simonw" created="Sun, 29 Nov 2009 14:07:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;I guess i think this getEnablePositionIncrementsVersionDefault should be deprecated along with the ctors that take this boolean argument, and it should all be driven off a single Version argument for simplicity&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is one thing I thought about too - I did not change it to keep the noise as low as possible in the patch but if we want to do it we can do in this patch too. &lt;/p&gt;

&lt;p&gt;The question if we want to drop bw. compat and simply update CharArraySet to Unicode 4.0 seems to be more important. But IMO if we push Version to StopFilter we can also make CharArraySet using Version though.&lt;/p&gt;

&lt;p&gt;thoughts?&lt;/p&gt;</comment>
                    <comment id="12783409" author="thetaphi" created="Sun, 29 Nov 2009 14:18:55 +0000"  >&lt;p&gt;+1 for pushing version downto StopFilter (it is there already, but hidden in this getDefault() method! Its presence was justified by Lucene 2.9/3.0 migration. Now it should just take a matchVersion and no more setters inside StopFilter.&lt;/p&gt;

&lt;p&gt;The noise is the same, as all analyzers using stopfilter then need the version arg / need to be changed anyhow.&lt;/p&gt;</comment>
                    <comment id="12783410" author="rcmuir" created="Sun, 29 Nov 2009 14:22:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is one thing I thought about too - I did not change it to keep the noise as low as possible in the patch but if we want to do it we can do in this patch too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;well I think it will be noisy either way (updating all the analyzers, etc), but will make things a lot more consistent and easier to maintain...&lt;br/&gt;
if you do this then StopFilter takes version so it can be modified / bugfixed in the future in other ways too, with less noise.&lt;br/&gt;
I also think it will make it easier to write an analyzer.&lt;/p&gt;

&lt;p&gt;because even completely ignoring the unicode issue, with the current codebase:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
streams.source = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardTokenizer(matchVersion, reader);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardFilter(streams.source);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LowerCaseFilter(matchVersion, streams.result);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StopFilter(matchVersion, streams.result, stoptable);
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;reads a lot easier to me than&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
streams.source = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardTokenizer(matchVersion, reader);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardFilter(streams.source);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LowerCaseFilter(matchVersion, streams.result);
streams.result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),
                                      streams.result, stoptable);
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12783590" author="simonw" created="Mon, 30 Nov 2009 09:55:19 +0000"  >&lt;p&gt;I updated the patch to use Version in StopFilter. This seems to be reasonable though.&lt;/p&gt;</comment>
                    <comment id="12783743" author="simonw" created="Mon, 30 Nov 2009 17:06:51 +0000"  >&lt;p&gt;I hope we made it with this patch - don&apos;t want to keep this growing. &lt;br/&gt;
I fixed a problem in CharArraySet (equals / getHashCode) with limits which is also the reason why CharacterUtils now has a codePointAt(char[], offset, limit) method.&lt;br/&gt;
This patch also moves Version into StopFilter but exposes an expert ctor to set the posInc manually.&lt;/p&gt;

&lt;p&gt;happy reviewing&lt;/p&gt;</comment>
                    <comment id="12783756" author="thetaphi" created="Mon, 30 Nov 2009 17:32:52 +0000"  >&lt;p&gt;I take this one as communicated in private chat.&lt;/p&gt;</comment>
                    <comment id="12783757" author="thetaphi" created="Mon, 30 Nov 2009 17:35:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;This patch also moves Version into StopFilter but exposes an expert ctor to set the posInc manually. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As discussed before, please deprecate this. The posIncr stuff was deprecated everywhere else too (in 2.9 already).&lt;/p&gt;</comment>
                    <comment id="12783760" author="rcmuir" created="Mon, 30 Nov 2009 17:41:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;As discussed before, please deprecate this. The posIncr stuff was deprecated everywhere else too (in 2.9 already).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think i disagree, only because Solr StopFilterFactory allows the user to explicitly set this.&lt;/p&gt;</comment>
                    <comment id="12783761" author="simonw" created="Mon, 30 Nov 2009 17:48:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think i disagree, only because Solr StopFilterFactory allows the user to explicitly set this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As discussed before, please deprecate this. The posIncr stuff was deprecated everywhere else too (in 2.9 already).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Except of StopFilter, this class had a none-deprected  posInc constructor. I also thing this one should be accessible and not deprecated.&lt;/p&gt;</comment>
                    <comment id="12783762" author="rcmuir" created="Mon, 30 Nov 2009 17:50:00 +0000"  >&lt;p&gt;fwiw Solr uses .setEnablePositionIncrements method to accomplish this.&lt;/p&gt;

&lt;p&gt;So to me it doesn&apos;t matter, as there is a way to explicity do this, I think?&lt;/p&gt;</comment>
                    <comment id="12783765" author="thetaphi" created="Mon, 30 Nov 2009 17:55:19 +0000"  >&lt;p&gt;...Solr can also use the version to do this.&lt;/p&gt;

&lt;p&gt;We removed the posIncr ctors also for a lot of Analyzers (StandardAnalzer,...), so why not also remove (deprecate and remove in 4.0)  from StopFilter? There is another issue open, that says: Remove all per-instance setters and make all filters final (I think it was the hell issue). All parameters should be passed on ctor and that prferably using version. Alternate an ctor only taking booleans, but most of the were removed in 3.0. The only relict in core is StopFilter.&lt;/p&gt;

&lt;p&gt;So the ctor taking version should not make posIncr available and the other way round. If you want to control the falgs yourself, create an ctor with posIncr and smartjava5unicode switches (ugly).&lt;/p&gt;</comment>
                    <comment id="12783770" author="rcmuir" created="Mon, 30 Nov 2009 18:07:33 +0000"  >&lt;p&gt;Uwe, yeah as long as they have some way to do it.&lt;/p&gt;

&lt;p&gt;I guess I don&apos;t understand if users view this posInc flag / versioning thing as really itself an option, and the version use is just about having just a better default? Or if its considered a bug that posInc wasn&apos;t working before. I think there are some tradeoffs in behavior between the two and I&apos;m not sure one size fits all.&lt;/p&gt;

&lt;p&gt;its not clear from the Solr issue that added this option either.&lt;/p&gt;</comment>
                    <comment id="12783772" author="thetaphi" created="Mon, 30 Nov 2009 18:13:47 +0000"  >&lt;p&gt;It is recommeneded to turn it on. But if its off, it must be also disabled in the QueryParser. Becazuse of that QP now also have a version ctor.&lt;/p&gt;

&lt;p&gt;But you are right, Mike preserved the setPositionIncrement method in QP.&lt;/p&gt;

&lt;p&gt;At other places like in StandardAnalyzer there is no longer a posIncr setting, and that&apos;s good!&lt;/p&gt;</comment>
                    <comment id="12783773" author="thetaphi" created="Mon, 30 Nov 2009 18:18:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;its not clear from the Solr issue that added this option either.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because they wanted to preserve bw compatibility for old indexes. And at this time Version was not available. Newer versions of Solr should just add a property to their factories giving the version (or a global solr option automatically applied to the whole Solr installation; that how I do it in panFMP, my own Solr-like project).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Or if its considered a bug that posInc wasn&apos;t working before. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is a bug.&lt;/p&gt;</comment>
                    <comment id="12783784" author="yseeley@gmail.com" created="Mon, 30 Nov 2009 18:42:28 +0000"  >&lt;p&gt;Preserving gaps from stopword removal isn&apos;t always desirable... seems it should remain an option to enable/disable it.&lt;br/&gt;
No biggie if y&apos;all don&apos;t agree in Lucene land though - Solr&apos;s factory could just switch between alternate classes to enable/disable position increments.&lt;/p&gt;

&lt;p&gt;Solr&apos;s query parser (the one that just extends Lucene&apos;s QueryParser) always enables position increments.  That allows the true control to rest with the filters for specific fields.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It is recommeneded to turn it on. But if its off, it must be also disabled in the QueryParser.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why?  What undesirable things happen if the QueryParser has enablePositionIncrements(true) with a StopFilter that doesn&apos;t produce gaps?&lt;/p&gt;</comment>
                    <comment id="12783789" author="thetaphi" created="Mon, 30 Nov 2009 18:54:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why? What undesirable things happen if the QueryParser has enablePositionIncrements(true) with a StopFilter that doesn&apos;t produce gaps?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We coupled it to Version in 2.9. If you create the StopFilter with Version.LUCENE_29 it is enabled. If you pass this version to QP, it&apos;s enabled, too. Very simple?&lt;/p&gt;

&lt;p&gt;Solr should make Version a property to all factories and create all Filters/Parsers using that flag. Thats why we implemented Version (to get rid of all these strange boolean flags). Just use Version.valueOf(property) and use the result to create your filters. It is now implemented everywhere in Lucene Core and Contrib (Version.valueOf() would not work in 2.9, because Version extends Parameter there, but in 3.0 it&apos;s an enum)&lt;/p&gt;</comment>
                    <comment id="12783796" author="yseeley@gmail.com" created="Mon, 30 Nov 2009 19:07:54 +0000"  >&lt;p&gt;&amp;gt; &amp;gt; Why? What undesirable things happen if the QueryParser has enablePositionIncrements(true) with a StopFilter that doesn&apos;t produce gaps?&lt;/p&gt;

&lt;p&gt;&amp;gt; We coupled it to Version in 2.9. If you create the StopFilter with Version.LUCENE_29 it is enabled. If you pass this version to QP, it&apos;s enabled, too. Very simple?&lt;/p&gt;

&lt;p&gt;I&apos;m still failing to see why it shouldn&apos;t just always be enabled in the query parser.  Solr forces it to always be enabled.  Will this cause a bug in any scenarios?&lt;/p&gt;</comment>
                    <comment id="12783806" author="thetaphi" created="Mon, 30 Nov 2009 19:23:19 +0000"  >&lt;p&gt;Yes it causes. If you have an old index without posincr, the query parser would produce queries that do not work (we had this issue in 2.9.1 shortly before release, one of the reasons why it was delayed).&lt;/p&gt;

&lt;p&gt;The version flag is for backwards compatibility. If you do not reinex with a new Version constant you should use the old version constant everywhere and things will play happy together. Even solr users will have old indexes, and for them there should be a property to specify the version constant (using this valueOf of enums). Solr should then create all components that require a version (and since 3.0 &lt;b&gt;all&lt;/b&gt; analyzers need this) using this property. And then everything will play wonderful together (anayzers, query parser and so on).&lt;/p&gt;

&lt;p&gt;Also Highlighter had a problem with it (same issue with the QP problem in pre-2.9.1)!&lt;/p&gt;</comment>
                    <comment id="12783807" author="simonw" created="Mon, 30 Nov 2009 19:25:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m still failing to see why it shouldn&apos;t just always be enabled in the query parser. Solr forces it to always be enabled. Will this cause a bug in any scenarios?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it won&apos;t cause any bugs as far as I can see. The root cause for all this compatibility - we try hard to preserve bw compat with version all over the place. The reason for this setter is more or less some kind of &quot;expert convenience&quot; My personal feeling would be to make it always true / let version do it.&lt;/p&gt;
</comment>
                    <comment id="12783811" author="simonw" created="Mon, 30 Nov 2009 19:35:44 +0000"  >&lt;p&gt;Changed the StopFilter(..,posInc,..) ctor to private for convenience.&lt;/p&gt;
</comment>
                    <comment id="12783820" author="simonw" created="Mon, 30 Nov 2009 19:59:42 +0000"  >&lt;p&gt;updated patch to trunk - uwe on heavy committing&lt;/p&gt;</comment>
                    <comment id="12783829" author="yseeley@gmail.com" created="Mon, 30 Nov 2009 20:14:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yes it causes. If you have an old index without posincr, the query parser would produce queries that do not work&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, wait, is this because things like StandardAnalyzer changed the default?  Seems like that&apos;s where the back comat break should have been addressed (and it was)... water under the bridge at this point though.&lt;/p&gt;</comment>
                    <comment id="12783834" author="thetaphi" created="Mon, 30 Nov 2009 20:21:41 +0000"  >&lt;p&gt;No they did not break. If you use Version.LUCENE_24 in the ctor of StandardAnalyzer it behaves like in 2.4. Because of that we have Version! We preserver BW comp by &lt;b&gt;requiring&lt;/b&gt; a matchVersion parameter to &lt;b&gt;all&lt;/b&gt; ctors of Analyzers.&lt;/p&gt;

&lt;p&gt;In 2.9 the deprecated non-version ctors default to version 2.4 (from 3.0 on you &lt;b&gt;have to&lt;/b&gt; specify the version)&lt;/p&gt;

&lt;p&gt;If you use always Version.LUCENE_CURRENT then you have to reindex after each version upgrade.&lt;/p&gt;</comment>
                    <comment id="12783842" author="dmsmith" created="Mon, 30 Nov 2009 21:07:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you create the StopFilter with Version.LUCENE_29 it is enabled. If you pass this version to QP, it&apos;s enabled, too. Very simple?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. But, IMHO, this seems like advocating that a desired behavior be gained by a backward compatibility mechanism.&lt;/p&gt;

&lt;p&gt;I see two problems in using Version to enable position increments (or any other particular behavior):&lt;br/&gt;
a) If a prior behavior is desired now, one should not need to use a prior Version to get it.&lt;br/&gt;
b) Version codifies a particular combination of behavior. It does not allow for rolling one&apos;s combination.&lt;/p&gt;

&lt;p&gt;Make that 3 problems:&lt;br/&gt;
c) At some point a prior version&apos;s behavior will/should be removed.&lt;/p&gt;

&lt;p&gt;It seems like this was discussed at length for creating a Settings object. I&apos;d rather see Attribute/AttributeSources used for such a thing than Version.&lt;/p&gt;</comment>
                    <comment id="12783848" author="mikemccand" created="Mon, 30 Nov 2009 21:35:53 +0000"  >&lt;p&gt;I think if indeed there are valid reasons to have StopFilter throw away the holes, then, we shouldn&apos;t hide this setting behind Version.  Ie, we should keep the explicit setters / separate param to ctor.  So I think that&apos;s the question... is it a bug or a feature?&lt;/p&gt;
</comment>
                    <comment id="12783855" author="thetaphi" created="Mon, 30 Nov 2009 21:47:25 +0000"  >&lt;p&gt;I will commit the patc now and we can later think about undeprecating. Simon wants to go forward with other patches and there are heavy cahnges in it, so I need to do heavy committing.&lt;/p&gt;

&lt;p&gt;The discussion should have been here before 2.9, because most individual setters are now removed, this is the really only relict. All others are subsumed under version.&lt;/p&gt;</comment>
                    <comment id="12783861" author="thetaphi" created="Mon, 30 Nov 2009 21:52:07 +0000"  >&lt;p&gt;Committed revision: 885592&lt;/p&gt;

&lt;p&gt;I keep this open for further discussing. The Version ctor param is now everywhere and it is better than goiving a boolean to &lt;b&gt;every&lt;/b&gt; analyzer that uses StopFilter. And that was the reason for creating the Version constants in 2.9.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So I think that&apos;s the question... is it a bug or a feature?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is a bug.  Everybody should update the code and raise the version constant to 31.&lt;/p&gt;</comment>
                    <comment id="12783863" author="markrmiller@gmail.com" created="Mon, 30 Nov 2009 21:57:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;It is a bug. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It was never considered a bug before. It was well known - its in Lucene In Action that you can leave gaps if you&apos;d like to.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Committed revision: 885592&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sucks to rush a commit when an issue is under discussion. Easy to say we can come back to this, easy not to. I&apos;m against such heavy committing myself, without some consensus to do so. In the old days, there was a bias towards not committing.&lt;/p&gt;</comment>
                    <comment id="12783868" author="thetaphi" created="Mon, 30 Nov 2009 22:03:01 +0000"  >&lt;p&gt;Sorry, the commit is not the problem.&lt;/p&gt;

&lt;p&gt;We are discussing only about one line, if we deprecate the explicit boolean arg or not. The rest of the patch is not affected, Because of that I committed, because Robert and Simon want to go forward with other analyzer/unicode work.&lt;/p&gt;

&lt;p&gt;So this commit does not remove anything. And Version was introduced already in 2.9.&lt;/p&gt;</comment>
                    <comment id="12783871" author="rcmuir" created="Mon, 30 Nov 2009 22:06:23 +0000"  >&lt;p&gt;Hello, my proposal is still the same:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we use Version to control StopFilter&apos;s &lt;b&gt;default&lt;/b&gt; behavior&lt;/li&gt;
	&lt;li&gt;we deprecate the static getDefault... method and the setter&lt;/li&gt;
	&lt;li&gt;we add an explicit, even &quot;expert&quot; if  you want, ctor that still uses Version, but also has this boolean param.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;this would mean we do not have to have a boolean in all of our analyzers (it is just Version)&lt;br/&gt;
also that there is no setter behavior (i do not like these from a ts reusability perspective)&lt;br/&gt;
and finally that people still get to change to non-default behavior for this param if they want.&lt;/p&gt;

&lt;p&gt;I&apos;m sorry i havent been able to keep up with this today (busy), but if there&apos;s consensus I will create the patch, etc.&lt;br/&gt;
I think all we have to do is change one of Simon&apos;s ctors from private to public and add javadocs.&lt;/p&gt;</comment>
                    <comment id="12783872" author="markrmiller@gmail.com" created="Mon, 30 Nov 2009 22:07:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;We are discussing only about one line, if we deprecate the explicit boolean arg or not. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One line thats part of this patch. By committing, you remove incentive to deal with the issue as the patch works in line with this being a bug. Now its in the code, now everyone can go home and forget.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;because Robert and Simon want to go forward with other analyzer/unicode work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Whats the rush? They can do other work without this being in trunk today. Thats not a valid reason for any commit in my mind.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So this commit does not remove anything. And Version was introduced already in 2.9.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think it matters - where is the consensus to do this commit now after discussion around it (one line or not) started? I don&apos;t see it.&lt;/p&gt;</comment>
                    <comment id="12783878" author="markrmiller@gmail.com" created="Mon, 30 Nov 2009 22:12:21 +0000"  >&lt;p&gt;IMHO the strongest this should have happened is: you propose that the current discussion is not pertinent to committing this patch. You then ask what others think about committing and keeping it open. You then say, if no one objects, you will commit in a day or two. I&apos;m against quick commits like this.&lt;/p&gt;</comment>
                    <comment id="12783882" author="thetaphi" created="Mon, 30 Nov 2009 22:16:42 +0000"  >&lt;p&gt;The term &quot;heavy committing&quot; is just a joke, I did not do any real cuncontrolled heavy committing today, I just called it so, because the patch was very large and affected lot&apos;s of files. We are sorry; Robert, Simon and me were chatting private a lot in parallel and came to the opinion, that we should commit this first and then discuss about this one ctor more. Discussing in this JIRA issue is a pain because of long page loading time.&lt;/p&gt;

&lt;p&gt;The addition of Version to StopFilter was agreed already, the only thing was the deprecation of the boolean flag. Let&apos;s open another issue for it and solve it separate. We should have opened another issue for it already, but we merged/developed both patches (add matchVersion to CharArraySet and StopFilter), as always the same files were affected and because of that not so many patches can get out of sync.&lt;/p&gt;

&lt;p&gt;So I am sorry for lot&apos;s of commits today!&lt;/p&gt;</comment>
                    <comment id="12783895" author="thetaphi" created="Mon, 30 Nov 2009 22:28:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m against quick commits like this. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Revert?&lt;/p&gt;</comment>
                    <comment id="12783898" author="rcmuir" created="Mon, 30 Nov 2009 22:30:49 +0000"  >&lt;p&gt;attached is my proposal mentioned in the comments above.&lt;/p&gt;</comment>
                    <comment id="12783901" author="thetaphi" created="Mon, 30 Nov 2009 22:33:14 +0000"  >&lt;p&gt;That&apos;s much easier to discuss, everybody sees in one small patch whats happending. The other one was too big and unrelated. A new issue would have been better at all.&lt;/p&gt;</comment>
                    <comment id="12783904" author="mikemccand" created="Mon, 30 Nov 2009 22:34:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Robert, Simon and me were chatting private a lot in parallel and came to the opinion, that we should commit this first and then discuss about this one ctor more.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Really discussions like this should happen in public.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Discussing in this JIRA issue is a pain because of long page loading time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can carry it over to java-dev, in general.  I agree page load time gets annoying for big issues...&lt;/p&gt;</comment>
                    <comment id="12783906" author="rcmuir" created="Mon, 30 Nov 2009 22:36:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Really discussions like this should happen in public.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, what I asked Uwe was, if he could take this issue for me, since I will be busy at work this week and its holding Simon up.&lt;/p&gt;</comment>
                    <comment id="12783913" author="mikemccand" created="Mon, 30 Nov 2009 22:43:26 +0000"  >&lt;p&gt;I personally don&apos;t like that StopFilter can discard the holes.  It&lt;br/&gt;
loses information, that you can never get back, once indexed.&lt;/p&gt;

&lt;p&gt;That said, it&apos;s clearly not black &amp;amp; white &amp;#8211; enough people feel it&apos;s a&lt;br/&gt;
feature (not a bug), and should be preserved, so I think we should&lt;br/&gt;
preserve it as a standalone option.&lt;/p&gt;

&lt;p&gt;But I think we should keep the default as &quot;don&apos;t discard the holes&quot;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello, my proposal is still the same:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we use Version to control StopFilter&apos;s default behavior&lt;/li&gt;
	&lt;li&gt;we deprecate the static getDefault... method and the setter&lt;/li&gt;
	&lt;li&gt;we add an explicit, even &quot;expert&quot; if you want, ctor that still uses Version, but also has this boolean param.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think this is a good approach!&lt;/p&gt;</comment>
                    <comment id="12783915" author="thetaphi" created="Mon, 30 Nov 2009 22:45:34 +0000"  >&lt;p&gt;And Simon wanted to also work on the &quot;massive code duplication&quot; (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2034&quot; title=&quot;Massive Code Duplication in Contrib Analyzers - unifly the analyzer ctors&quot;&gt;&lt;del&gt;LUCENE-2034&lt;/del&gt;&lt;/a&gt;)  issue which would break this patch and vice versa. You never get these two patches to merge, because the code duplication issue does large refactoring of almost all analyzers. And xmas is coming, so we want to have a nice xmas present for all analyzer writers...&lt;/p&gt;</comment>
                    <comment id="12783917" author="rcmuir" created="Mon, 30 Nov 2009 22:47:01 +0000"  >&lt;p&gt;Mike, in my opinion the holes can have some impact on phrase queries.&lt;br/&gt;
Personally I think the situation is complex (and I hate to say but language dependent), but I think &quot;holes&quot; are a good default.&lt;/p&gt;

&lt;p&gt;But I should be able to change them explicitly, overriding the default.&lt;br/&gt;
The Version should allow us having the capability to change defaults (while still providing options), not just fix bugs&lt;/p&gt;

&lt;p&gt;if anyone has time to glance at the patch, let me know what you think. We don&apos;t have to deprecate the setter, thats just me being anal.&lt;/p&gt;</comment>
                    <comment id="12783920" author="thetaphi" created="Mon, 30 Nov 2009 22:57:45 +0000"  >&lt;p&gt;I like the patch if it solves this issue and we are all happy again. The updates to javadocs are also fine, the 2.9 thing was missing.&lt;/p&gt;

&lt;p&gt;The problem in this issue was, that some participants were not fully informed about the Version parameter at all and that it prevents from breaking backwards. My opinion is: Please also add matchVersion as a factory property for query parser and analyzers! Solr would profit from it, too. Fewer options and you can preserve your config file even after a major Solr update without breaking any existing indexes. That is the lesson out of this issue.&lt;/p&gt;

&lt;p&gt;Discussing about a separate get/set for this posIncr stuff is another discussion for a separate issue.&lt;/p&gt;</comment>
                    <comment id="12783921" author="mikemccand" created="Mon, 30 Nov 2009 22:58:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;The Version should allow us having the capability to change defaults (while still providing options), not just fix bugs&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, Version allows us to change defaults and fix bugs w/o breaking back compat.&lt;/p&gt;

&lt;p&gt;The patch looks good to me, and I think deprecating the setter makes sense &amp;#8211; being able to specify this on ctor is enough.&lt;/p&gt;</comment>
                    <comment id="12783922" author="mikemccand" created="Mon, 30 Nov 2009 23:00:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Mike, in my opinion the holes can have some impact on phrase queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But if the PhraseQuery is generated with QueryParser also preserving holes, then it works properly?&lt;/p&gt;</comment>
                    <comment id="12783924" author="rcmuir" created="Mon, 30 Nov 2009 23:05:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;But if the PhraseQuery is generated with QueryParser also preserving holes, then it works properly?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;what is &quot;properly&quot; ?&lt;/p&gt;

&lt;p&gt;If I search on english for &quot;book for sale&quot;, it will match &quot;books for sale&quot;&lt;br/&gt;
this is considered ok for english.&lt;/p&gt;

&lt;p&gt;If I am using persian analyzer, such a thing will not work, because the plural form of book (&#1705;&#1578;&#1575;&#1576;) is formed by adding an additional word afterwards (&#1705;&#1578;&#1575;&#1576; &#1607;&#1575;).&lt;/p&gt;

&lt;p&gt;So the way plural forms get &quot;stemmed&quot; to their singular form in persian is implemented with stopwords (&#1607;&#1575; is in the list). I think this is a clean simple approach, which is why I did it this way.&lt;/p&gt;

&lt;p&gt;For english, its attached to the word with an s... should we bump the posinc gap after stemmed words in english too?&lt;/p&gt;

&lt;p&gt;So you see, I think its dependent upon language and how you want the application to work.&lt;/p&gt;</comment>
                    <comment id="12783926" author="thetaphi" created="Mon, 30 Nov 2009 23:06:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;But if the PhraseQuery is generated with QueryParser also preserving holes, then it works properly?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I tested this before 2.9.1 (one reason why you had to respin).&lt;/p&gt;

&lt;p&gt;QueryParser also still has the get/set for posIncr but also takes the matchVersion. Here it is the other way round, the ctor uses the default with Version and you can change it by a setter later (which is still not deprecated and available in 3.0).&lt;/p&gt;

&lt;p&gt;In my opinion we should go that way (which is against Robert&apos;s opinion). The ctor taking two booleans is very bad...&lt;/p&gt;</comment>
                    <comment id="12783930" author="thetaphi" created="Mon, 30 Nov 2009 23:13:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;So the way plural forms get &quot;stemmed&quot; to their singular form in persian is implemented with stopwords (&#1607;&#1575; is in the list). I think this is a clean simple approach, which is why I did it this way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But if this is so, you should have initialized the stop filter in persian analyzer with a fixed &quot;false&quot;. Bt it also used StopFilter.getEnablePositionIncrementsVersionDefault() and used the version default. Should we fix this?&lt;/p&gt;</comment>
                    <comment id="12783932" author="rcmuir" created="Mon, 30 Nov 2009 23:18:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;But if this is so, you should have initialized the stop filter in persian analyzer with a fixed &quot;false&quot;. Bt it also used StopFilter.getEnablePositionIncrementsVersionDefault() and used the version default. Should we fix this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so. I think its up to the user to decide how they want the search to work, even in this example.&lt;br/&gt;
If they don&apos;t like the defaults for how phrasequery works, they can create an analyzer that uses the stopfilter differently.&lt;/p&gt;

&lt;p&gt;I don&apos;t think the issue is clear for any given language, I think it always depends on how your application works.&lt;br/&gt;
I mean we add a hole for &quot;the&quot; in english, but in bulgarian (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2062&quot; title=&quot;Bulgarian Analyzer&quot;&gt;&lt;del&gt;LUCENE-2062&lt;/del&gt;&lt;/a&gt;) this is a suffix attached to the end of a noun.&lt;br/&gt;
With arabic its always a prefix. I don&apos;t think we need to have options to add a posinc gap if we stem leading &#1575;&#1604; off an arabic word.&lt;/p&gt;

&lt;p&gt;I&apos;m just trying to show some examples of why a user might want to change the defaults.&lt;/p&gt;</comment>
                    <comment id="12783934" author="thetaphi" created="Mon, 30 Nov 2009 23:21:06 +0000"  >&lt;p&gt;A godd idea might be to use two StopFilters:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;One with the real stop words that use the Version-default setting for posIncr&lt;/li&gt;
	&lt;li&gt;One for the plural suffixes and so on, that should simply be removed. This StopFilter would use false for posIncr.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12783938" author="rcmuir" created="Mon, 30 Nov 2009 23:25:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;A godd idea might be to use two StopFilters: &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;in theory, but sometimes these terms are ambiguous, and the computer (especially a very simple analyzer) does not know which one it is, sometimes it can be both. &lt;/p&gt;

&lt;p&gt;sometimes its a real word too, but on average its better to ignore it.&lt;/p&gt;

&lt;p&gt;I don&apos;t think we need to go to this effort optimal phrasequeries either. A user who really cares can do this themself... and thats my whole point, they should be able to do something liek what you said, and explicitly say &apos;no i don&apos;t want posIncr for this stopfilter, but yes I&apos;ll take the real bugfixes, thanks&apos;&lt;/p&gt;</comment>
                    <comment id="12783954" author="mikemccand" created="Tue, 1 Dec 2009 00:11:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;So you see, I think its dependent upon language and how you want the application to work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, indeed, the issue is not simple &amp;#8211; thanks for the examples!&lt;/p&gt;</comment>
                    <comment id="12783959" author="thetaphi" created="Tue, 1 Dec 2009 00:27:59 +0000"  >&lt;p&gt;Before I go to bed, how about ctor vs get/set:&lt;br/&gt;
QueryParser currently only has a ctor taking matchVersion which sets the default. If somebody wants to change the default, he can later call setEnablePositionIncrements().&lt;br/&gt;
In my opinion, this is more clear than supplying both in one ctor (they are two params that seem to interact with each other, but they don&apos;t!). I would also prefer to initialize StopFilter with the defaults in the ctor, and later change it using setters.&lt;/p&gt;</comment>
                    <comment id="12783963" author="rcmuir" created="Tue, 1 Dec 2009 00:32:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;In my opinion, this is more clear than supplying both in one ctor (they are two params that seem to interact with each other, but they don&apos;t!). I would also prefer to initialize StopFilter with the defaults in the ctor, and later change it using setters.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;if this is better, then we need not do anything (except I still think we should fix up some minor unrelated javadocs problems i had in the patch). The setter is not deprecated currently.&lt;/p&gt;</comment>
                    <comment id="12783967" author="thetaphi" created="Tue, 1 Dec 2009 00:38:26 +0000"  >&lt;p&gt;Oh, you are right! All posIncr ctors are deprecated, the matchVersion ones bringing defaults are the new ones. And you can change this default later - prefect. Just more documentation! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;+1 from my side.&lt;/p&gt;</comment>
                    <comment id="12783974" author="rcmuir" created="Tue, 1 Dec 2009 01:06:41 +0000"  >&lt;p&gt;Uwe, the problem I think is still what DM/Mike said before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think if indeed there are valid reasons to have StopFilter throw away the holes, then, we shouldn&apos;t hide this setting behind Version. Ie, we should keep the explicit setters / separate param to ctor. So I think that&apos;s the question... is it a bug or a feature?&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                    <comment id="12784023" author="markrmiller@gmail.com" created="Tue, 1 Dec 2009 02:52:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Revert?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not from me. I don&apos;t think its a huge deal, certainly not something that requires a revert. I just worry some times about the pace of things - and that the more active one becomes, the more they/we should worry about allowing proper time for comments/objections when committing. I like how people have tended to err on the side of waiting for solid consensus myself. Its not a big issue here - but as we move away from that I think it will be. Its something that will spread as new users look at old users when determining how they act.&lt;/p&gt;

&lt;p&gt;The more heavy committing one does, the easier I think it is to just decide stuff and cram it in - personally (and I&apos;m just one voice).  The more you do, I think its also more important to allow brief time periods between saying what you are going to do and doing it (though that should always be done). Its easy to say, well we can just change it, or pull it out - but with lazy consensus and how the community works, I think thats conducive to worse code. Its much easier for someone to debate and have questions than it is to hound changes or code out of trunk. In my mind its better if the bottleneck is on the going in, as it has been, rather then shifting things to fixing whats in. Especially if there is debate in an issue still - whether it belongs there or not - I think there should be warning and consensus before a commit.&lt;/p&gt;

&lt;p&gt;I realize thats a bit of a tough sell based on this little issue alone - but its a general feeling I&apos;ve been having as lucene dev has really been ramping up in recent times. I think its important we stick to being conservative about waiting for consensus - giving others a chance to voice their opinion - no matter how sure you are about your decision. I think its an important example for new users, and an important characteristic of Lucene development.&lt;/p&gt;

&lt;p&gt;Thats just me though - I don&apos;t speak for anyone but myself.&lt;/p&gt;</comment>
                    <comment id="12784025" author="markrmiller@gmail.com" created="Tue, 1 Dec 2009 02:56:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;The term &quot;heavy committing&quot; is just a joke&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know, I wasn&apos;t using it very seriously myself &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So I am sorry for lot&apos;s of commits today!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No worries - I don&apos;t mean to frame anything is a way that you should have to apologize for. Lots of commits are still good from my point view! I just think there should be something of a warning before a commit in an issue that is being actively discussed. &lt;/p&gt;</comment>
                    <comment id="12784146" author="simonw" created="Tue, 1 Dec 2009 09:41:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sucks to rush a commit when an issue is under discussion. Easy to say we can come back to this, easy not to. I&apos;m against such heavy committing myself, without some consensus to do so. In the old days, there was a bias towards not committing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have to give uwe a bit of a backup for this. At least to my eyes there was a consensus on this patch and to the relation between the deprecation discussion and the patch. But I understand you feelings about this commit. I consider this as a misunderstanding caused by too much instant messaging. We should not consider IM as a consensus at all and I guess both of us have learned from this issue. I completely agree that we always should wait until the discussion has lead to a consensus on the list or in JIRA - otherwise it should always be a bias towards committing. &lt;/p&gt;

&lt;p&gt;I would like to open another issue for roberts patch. The reason for this is that I feel that issues like that get sidetracked quite often and its hard to follow once this happens. This would make discussions more clear and would help to prevent situations like this. &lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                    <comment id="12784153" author="mikemccand" created="Tue, 1 Dec 2009 10:06:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;I consider this as a misunderstanding caused by too much instant messaging.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We need to strive to keep technical discussions public, for this reason.  If you ever find yourself discussing technical direction of changes to Lucene, privately, kick yourself and others near you and then take it back to the list &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;You all probably felt that you reached consensus (over IM), but to the rest of us, it suddenly felt like you committed while we were still debating the approach.  Like Mark, I&apos;m certainly not saying anything bad was done, but, it&apos;s a dangerous precedent that &quot;consensus reached in private is then acted on in public without corresponding public consensus&quot;.&lt;/p&gt;

&lt;p&gt;Erring on the side of caution, moving more slowly, when consensus is iffy, is best.  Mark&apos;s original idea &amp;#8211; to separately open the question of &quot;hey let&apos;s commit this as it stands now and then debate the Version vs separate boolean separately&quot; would&apos;ve been a good approach, I think.&lt;/p&gt;

&lt;p&gt;Also, I think other Apache communities have public chats, where devs/contributors/users can hang out and discuss stuff, and it&apos;s well publicized that this is the standard place where things are discussed, anyone can join in, etc.  We could consider taking that step for Lucene?  Those of us who are online can then hang out.  I don&apos;t like that it&apos;s not archived/searchable (or... is it?  Anyone know what other communities do?  EG, is there a way to set up an IRC channel and have it archived?).  IM clearly is a nice, fast interactive way to discuss things, far better than email / appending to Jira issues.&lt;/p&gt;</comment>
                    <comment id="12784164" author="simonw" created="Tue, 1 Dec 2009 10:39:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;You all probably felt that you reached consensus (over IM), but to the rest of us, it suddenly felt like you committed while we were still debating the approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually this is almost what happened. We discussed over days and after this was committed I realized that most of the discussion was private. While this was discussed on JIRA the fact that we did so much IM wasn&apos;t that obvious to me and I guess this applies to Uwe too. I hope I made my point with saying this should not happen in the future though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could consider taking that step for Lucene? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I thing it would be an improvement in any way! +1 for this&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t like that it&apos;s not archived/searchable&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it is a good place to discuss things but results of the discussion should go to JIRA / mailing list. That way we have an archive for the decisions. I would not consider a IM discussion as a consensus as it always depends on the time of the day, people leaving the chat when they go offline etc.&lt;br/&gt;
Having a public &quot;realtime&quot; chat room for lucene would be nice as many discussions can move quicker - results and descisions must go to a official place where they can be archived. This would give others, not on the chat during the discussion, the possibility to join again.&lt;/p&gt;</comment>
                    <comment id="12784175" author="dmsmith" created="Tue, 1 Dec 2009 11:07:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;I would like to open another issue for roberts patch. The reason for this is that I feel that issues like that get sidetracked quite often and its hard to follow once this happens. This would make discussions more clear and would help to prevent situations like this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just my opinion:&lt;/p&gt;

&lt;p&gt;I don&apos;t like committing part of an issue. I think that when/if there is a point at which a commit is needed, for whatever reason, and there is more to do or to discuss, the issue needs to be split. I think a JIRA issue should be represented by a single commit.&lt;/p&gt;

&lt;p&gt;This issue pertains to making CharSetArray properly handle surrogates when lowercasing. The use case in Lucene are the stop word lists. These are used by the StopFilter, which has an ugliness that needed fixing.&lt;/p&gt;

&lt;p&gt;I understand that sometimes more than one thing gets done in an issue because it is to hard to manage as multiple issues. What I call a ripple effect. It appears that this is happening here.&lt;/p&gt;

&lt;p&gt;I think changes other than that should be another issue, a sub-issue, or a linked issue? As it stands, Robert&apos;s patch, having the same name as Simon&apos;s, makes it appear that it supersedes the prior with the same name. It is confusing without the context of reading the thread.&lt;/p&gt;</comment>
                    <comment id="12784182" author="dmsmith" created="Tue, 1 Dec 2009 11:20:34 +0000"  >&lt;p&gt;In reviewing Simon&apos;s latest patch, I see a lot of Version.LUCENE_CURRENT. For example, all the default stop word lists are created with LUCENE_CURRENT.&lt;/p&gt;

&lt;p&gt;By using LUCENE_CURRENT, it means that the most recent behavior should always be used. That might change in the future. If it does, then it would silently invalidate an index.&lt;/p&gt;

&lt;p&gt;Is this right? Seems to me that a specific version should be used.&lt;/p&gt;</comment>
                    <comment id="12784189" author="simonw" created="Tue, 1 Dec 2009 11:53:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think changes other than that should be another issue, a sub-issue, or a linked issue? As it stands, Robert&apos;s patch, having the same name as Simon&apos;s, makes it appear that it supersedes the prior with the same name. It is confusing without the context of reading the thread.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1  - I created &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2099&quot; title=&quot;Revise PositionIncrement in StopFilter / QueryParser&quot;&gt;LUCENE-2099&lt;/a&gt; for that purpose and added Roberts latest patch to it.&lt;br/&gt;
I will like those two in a second.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By using LUCENE_CURRENT, it means that the most recent behavior should always be used. That might change in the future. If it does, then it would silently invalidate an index.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This has many reasons. The most important one is that the version will not affect those sets as the pass false to ingoreCase and we have full control over the stopwords. But I agree this would be more &quot;secure&quot; if it would use Version.&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-31&quot; title=&quot;The JavaDoc is mixed up!&quot;&gt;&lt;del&gt;LUCENE-31&lt;/del&gt;&lt;/a&gt; just to make sure nobody changes the internal behavior of CharArraySet. I still would expect anybody changing the behavior of this class to revise their usage.&lt;/p&gt;</comment>
                    <comment id="12784190" author="simonw" created="Tue, 1 Dec 2009 11:53:52 +0000"  >&lt;p&gt;Linked followup issue &lt;/p&gt;</comment>
                    <comment id="12784248" author="simonw" created="Tue, 1 Dec 2009 14:43:07 +0000"  >&lt;p&gt;I have created separate issues for the outstanding discussions. I suggest to close this issue and move the discussions to the new issues &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2101&quot; title=&quot;Default Stopwords should use specific Version in CharArraySet construtor&quot;&gt;LUCENE-2101&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2099&quot; title=&quot;Revise PositionIncrement in StopFilter / QueryParser&quot;&gt;LUCENE-2099&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;throughts?&lt;/p&gt;</comment>
                    <comment id="12785254" author="simonw" created="Thu, 3 Dec 2009 10:33:37 +0000"  >&lt;p&gt;Since nobody commented on the proposal to close this issue I will close it now.&lt;br/&gt;
Issues for remaining discussions are available.&lt;/p&gt;</comment>
                    <comment id="12797740" author="yseeley@gmail.com" created="Thu, 7 Jan 2010 18:57:04 +0000"  >&lt;p&gt;I obviously haven&apos;t had the chance to keep up with changes in Lucene... but as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2195&quot; title=&quot;Speedup CharArraySet if set is empty&quot;&gt;&lt;del&gt;LUCENE-2195&lt;/del&gt;&lt;/a&gt; that caught my eye, I was looking at StopFilter.&lt;br/&gt;
In the past, pains were made to keep creation fast - if you passed a CharArraySet, it would be directly used.  It now looks like a new set is created each time (actually two - a CharArraySet and then an UnmodifiableCharArraySet).  This new behavior also no longer matches the javadoc for the constructor.&lt;/p&gt;

&lt;p&gt;It looks like it was committed as part of this issue, but I can&apos;t find any comments here about either the need to make a copy or the need to make a unmodifiable set.&lt;/p&gt;</comment>
                    <comment id="12797758" author="simonw" created="Thu, 7 Jan 2010 19:29:25 +0000"  >&lt;p&gt;Hi Yonik,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It looks like it was committed as part of this issue, but I can&apos;t find any comments here about either the need to make a copy or the need to make a unmodifiable set.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I try to help you to reconstruct the whole thing a bit. UnmodifiableCharArraySet was introduces with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1688&quot; title=&quot;Deprecating StopAnalyzer ENGLISH_STOP_WORDS - General replacement with an immutable Set&quot;&gt;&lt;del&gt;LUCENE-1688&lt;/del&gt;&lt;/a&gt; as far as I recall to replace the static string array (stopwords) in StopAnalyzer. &lt;br/&gt;
During the refactoring / improvements in contrib/analyzers we decided to make analyzers and tokenfilters immutable and use chararrayset whereever we can. To prevent provided set from being modified while they are in use in a filter the given set is copied and wrapped in an immutable instance of chararrayset. At the same time (still ongoing) we try to convert every set which is likely to be used in a TokenFilter into a charArraySet.  Wordlistloader is not done yet but on the list, the plan is to change the return values from HashSet&amp;lt;?&amp;gt; into Set&amp;lt;?&amp;gt; and create CharArraySet instances internally. &lt;br/&gt;
With &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2034&quot; title=&quot;Massive Code Duplication in Contrib Analyzers - unifly the analyzer ctors&quot;&gt;&lt;del&gt;LUCENE-2034&lt;/del&gt;&lt;/a&gt; we introduced StopwordAnalyzerBase which also uses the UnmodifiableCharArraySet with a copy of the given set.&lt;br/&gt;
The copy of a charArraySet is very fast even for large sets and the creation of a unmodifiableCharArraySet from a CharArraySet instance is basically just an object creation. The background is, again to prevent any modification to those sets while they are in use.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This new behavior also no longer matches the javadoc for the constructor. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree we should adjust the javadoc for ctors expecting stopwords to reflect the behavior.&lt;/p&gt;
</comment>
                    <comment id="12797763" author="rcmuir" created="Thu, 7 Jan 2010 19:34:45 +0000"  >&lt;p&gt;Simon, I think yonik refers to this code in stopfilter itself:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; StopFilter(Version matchVersion, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enablePositionIncrements, TokenStream input, Set&amp;lt;?&amp;gt; stopWords, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; ignoreCase){
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(input);
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.stopWords = CharArraySet.unmodifiableSet(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CharArraySet(matchVersion, stopWords, ignoreCase));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;it seems to me that if you pass a charArraySet to stopfilter, no matter what, you get an expensive copy with &quot;new&quot;...?&lt;/p&gt;</comment>
                    <comment id="12797772" author="simonw" created="Thu, 7 Jan 2010 19:52:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;Simon, I think yonik refers to this code in stopfilter itself: &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks god jira lets me edit my comments &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
My X60 was too small to spot the comment about charArraySet and ingoreCase. This is absolutely true - this issue introduced this change and it should 100% use CharArraySet.copy instead of constructing a new CharArraySet&lt;/p&gt;

&lt;p&gt;I will create a new issue and upload a patch.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12444957">LUCENE-2197</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12442097">LUCENE-2101</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12427774">LUCENE-1689</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12442078">LUCENE-2099</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12426458" name="LUCENE-2094.patch" size="3837" author="rcmuir" created="Mon, 30 Nov 2009 22:30:49 +0000" />
                    <attachment id="12426444" name="LUCENE-2094.patch" size="119936" author="simonw" created="Mon, 30 Nov 2009 19:59:42 +0000" />
                    <attachment id="12426442" name="LUCENE-2094.patch" size="119936" author="simonw" created="Mon, 30 Nov 2009 19:35:43 +0000" />
                    <attachment id="12426425" name="LUCENE-2094.patch" size="121469" author="simonw" created="Mon, 30 Nov 2009 17:06:51 +0000" />
                    <attachment id="12426394" name="LUCENE-2094.patch" size="84460" author="simonw" created="Mon, 30 Nov 2009 09:55:19 +0000" />
                    <attachment id="12426331" name="LUCENE-2094.patch" size="82951" author="simonw" created="Sat, 28 Nov 2009 19:44:39 +0000" />
                    <attachment id="12425971" name="LUCENE-2094.txt" size="5062" author="simonw" created="Tue, 24 Nov 2009 15:11:13 +0000" />
                    <attachment id="12425970" name="LUCENE-2094.txt" size="3646" author="simonw" created="Tue, 24 Nov 2009 14:46:33 +0000" />
                    <attachment id="12425967" name="LUCENE-2094.txt" size="3776" author="simonw" created="Tue, 24 Nov 2009 14:20:57 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>9.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 24 Nov 2009 14:27:55 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11685</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25631</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>