<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-730/LUCENE-730.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-730] Restore top level disjunction performance</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-730</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This patch restores the performance of top level disjunctions. &lt;br/&gt;
The introduction of BooleanScorer2 had impacted this as reported&lt;br/&gt;
on java-user on 21 Nov 2006 by Stanislav Jordanov.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12357055">LUCENE-730</key>
            <summary>Restore top level disjunction performance</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="paul.elschot@xs4all.nl">Paul Elschot</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Nov 2006 20:32:32 +0000</created>
                <updated>Tue, 19 Jun 2007 09:14:49 +0100</updated>
                    <resolved>Mon, 28 May 2007 20:34:27 +0100</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12453697" author="paul.elschot@xs4all.nl" created="Mon, 27 Nov 2006 20:37:45 +0000"  >&lt;p&gt;This patches BooleanScorer2 to use BooleanScorer in the score(HitCollector) method.&lt;br/&gt;
This also patches BooleanScorer to accept a minimum number of optional matchers.&lt;/p&gt;

&lt;p&gt;The patch also disables some test code: the use of checkSkipTo in QueryUtils&lt;br/&gt;
caused a test failure in TestBoolean2 with the above changes. I think this&lt;br/&gt;
could be expected because of the changed document scoring order&lt;br/&gt;
for top level disjunction queries.&lt;br/&gt;
At the moment I don&apos;t know how to resolve this.&lt;/p&gt;

&lt;p&gt;With the complete patch, all tests pass here.&lt;/p&gt;</comment>
                    <comment id="12488889" author="otis" created="Sat, 14 Apr 2007 22:44:24 +0100"  >&lt;p&gt;Just a quick note that I contacted Stanislav Jordanov about Paul&apos;s patch here.  Stanislav only used BooleanScorer.setUseScorer14() and that restored performance for him, but he did not try this patch (and won&apos;t be doing that as he&apos;s not working with Lucene at the moment).&lt;/p&gt;</comment>
                    <comment id="12489199" author="otis" created="Mon, 16 Apr 2007 20:15:44 +0100"  >&lt;p&gt;Paul, what is special about the number 32 here (BooleanScorer2):&lt;/p&gt;

&lt;p&gt;+    if ((requiredScorers.size() == 0) &amp;amp;&amp;amp;&lt;br/&gt;
+        prohibitedScorers.size() &amp;lt; 32) {&lt;br/&gt;
+      // fall back to BooleanScorer, scores documents somewhat out of order&lt;br/&gt;
+      BooleanScorer bs = new BooleanScorer(getSimilarity(), minNrShouldMatch);&lt;/p&gt;

&lt;p&gt;Why can we use BooleanScorer if there are less than 32 prohibited clauses, but not otherwise?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12489206" author="yseeley@gmail.com" created="Mon, 16 Apr 2007 20:32:07 +0100"  >&lt;p&gt;32 is the max number of required + prohibited clauses in the orig BooleanScorer (because it uses an int as a bitfield for each document in the current id range being considered).&lt;/p&gt;</comment>
                    <comment id="12489229" author="paul.elschot@xs4all.nl" created="Mon, 16 Apr 2007 22:01:10 +0100"  >&lt;p&gt;Further to Yonik&apos;s answer, I have not done any tests with prohibited scorers comparing BooleanScorer and BooleanScorer2.&lt;/p&gt;

&lt;p&gt;It is quite possible that using skipTo() on any prohibited scorer (via BooleanScorer2) is generally faster than using BooleanScorer. Prohibited clauses in queries are quite seldom, so it is going to be difficult to find out whether a smaller value than 32 would be generally optimal.&lt;/p&gt;

</comment>
                    <comment id="12489559" author="otis" created="Tue, 17 Apr 2007 23:04:05 +0100"  >&lt;p&gt;I&apos;ve committed this (changed a few minor things in the patch)...without benchmarking BS vs. BS2 with &amp;lt; 32 prohibited clauses.&lt;/p&gt;

&lt;p&gt;Hm, if I exposed that 32 as a static setter method, then one could easily benchmark and compare BS vs. BS2 with Doron&apos;s contrib/benchmark.&lt;/p&gt;</comment>
                    <comment id="12498818" author="michaelbusch" created="Thu, 24 May 2007 21:39:22 +0100"  >&lt;p&gt;As discussed on java-dev the default behavior of BooleanScorer should be to return the documents in order, because there are people who rely in their apps on that. Docs out of order should only be allowed if BooleanQuery.setUseScorer14(true) is set explicitly.&lt;/p&gt;</comment>
                    <comment id="12498896" author="michaelbusch" created="Fri, 25 May 2007 01:11:15 +0100"  >&lt;p&gt;With this patch the old BooleanScorer is only used if BooleanQuery.setUseScorer14(true) is set. It also enables the tests in QueryUtils again that check if the docs are returned in order.&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="12499293" author="paul.elschot@xs4all.nl" created="Sat, 26 May 2007 08:45:08 +0100"  >&lt;p&gt;The patch applies cleanly here, all core tests pass.&lt;br/&gt;
And I like the allowDocsOutOfOrder approach.&lt;/p&gt;</comment>
                    <comment id="12499320" author="michaelbusch" created="Sat, 26 May 2007 17:14:32 +0100"  >&lt;p&gt;Thanks for reviewing, Paul!&lt;/p&gt;

&lt;p&gt;I will commit this soon if nobody objects...&lt;/p&gt;</comment>
                    <comment id="12499344" author="paul.elschot@xs4all.nl" created="Sat, 26 May 2007 20:17:54 +0100"  >&lt;p&gt;No objection, only some remarks.&lt;/p&gt;

&lt;p&gt;One bigger issue:&lt;/p&gt;

&lt;p&gt;The latest patch defaults to docs in order above performance,&lt;br/&gt;
but my personal taste is to have performance by default.&lt;/p&gt;

&lt;p&gt;And some smaller ones:&lt;/p&gt;

&lt;p&gt;One could still adapt QueryUtills to take the possibility&lt;br/&gt;
of docs out of order into account.&lt;/p&gt;

&lt;p&gt;Some performance tests with prohibited scorers could still&lt;br/&gt;
be needed to find out which of the boolean scorers does better&lt;br/&gt;
on them.&lt;/p&gt;</comment>
                    <comment id="12499362" author="doronc" created="Sat, 26 May 2007 23:38:42 +0100"  >&lt;p&gt;Two comments: &lt;/p&gt;

&lt;p&gt;With this patch the class BooleanWeight is not&lt;br/&gt;
in (direct) use anymore - it is extended by &lt;br/&gt;
BooleanWeight2 and then only the latter is used, &lt;br/&gt;
and creates either Scorer2 or Scorer. We could &lt;br/&gt;
get rid of BolleanWeight2, and have a single &lt;br/&gt;
class BooleanWeight.&lt;/p&gt;

&lt;p&gt;Javadocs for useScorer14 methods:&lt;br/&gt;
  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Indicates that 1.4 BooleanScorer should be used.&lt;/li&gt;
	&lt;li&gt;Being static, This setting is system wide.&lt;/li&gt;
	&lt;li&gt;Scoring in 1.4 mode may be faster.&lt;/li&gt;
	&lt;li&gt;But note that unlike the default behavior, it does&lt;/li&gt;
	&lt;li&gt;not guarantee that docs are collected in docid&lt;/li&gt;
	&lt;li&gt;order. In other words, with this setting,&lt;/li&gt;
	&lt;li&gt;{@link HitCollector#collect(int,float)}
&lt;p&gt; might be&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;invoked first for docid N and only later for docid N-1.&lt;br/&gt;
   */&lt;br/&gt;
  public static void setUseScorer14(boolean use14) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Whether 1.4 BooleanScorer should be used.&lt;/li&gt;
	&lt;li&gt;@see #setUseScorer14(boolean)&lt;br/&gt;
   */&lt;br/&gt;
  public static boolean getUseScorer14() {&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12499365" author="hossman" created="Sun, 27 May 2007 00:42:22 +0100"  >
&lt;p&gt;&amp;gt; The latest patch defaults to docs in order above performance,&lt;br/&gt;
&amp;gt; but my personal taste is to have performance by default.&lt;/p&gt;

&lt;p&gt;I think it makes more sense to &quot;default&quot; to the most consistent rigidly defined behavior (docs in order), since that behavior will work (by definition) for any caller regardless of whether the caller expects the docs in order or not.&lt;/p&gt;

&lt;p&gt;people who find performance lacking can then assess their needs and make a conscious choice to change the setting, and see if it actually improves performance in their use cases.&lt;/p&gt;

&lt;p&gt;(ie: &quot;avoid premature optimization&quot; and all that)&lt;/p&gt;</comment>
                    <comment id="12499371" author="michaelbusch" created="Sun, 27 May 2007 02:58:38 +0100"  >&lt;p&gt;&amp;gt; The latest patch defaults to docs in order above performance,&lt;br/&gt;
&amp;gt; but my personal taste is to have performance by default.&lt;/p&gt;

&lt;p&gt;I agree with Hoss here. IMO allowing docs out of order is a big&lt;br/&gt;
API change. I think if people switch to 2.2 they just want it&lt;br/&gt;
to work as before without having to add special settings. If &lt;br/&gt;
they need better performance for certain types of queries and &lt;br/&gt;
they know that their application can deal with docs out of order&lt;br/&gt;
they can enable the faster scoring. &lt;br/&gt;
So my vote is +1 for docs in order by default.&lt;/p&gt;

&lt;p&gt;&amp;gt; Some performance tests with prohibited scorers could still&lt;br/&gt;
&amp;gt; be needed to find out which of the boolean scorers does better&lt;br/&gt;
&amp;gt; on them. &lt;/p&gt;

&lt;p&gt;That&apos;d be helpful. However, I&apos;m currently working on some other&lt;br/&gt;
issues. Maybe you or others would have some time to run those&lt;br/&gt;
tests?&lt;/p&gt;</comment>
                    <comment id="12499372" author="michaelbusch" created="Sun, 27 May 2007 03:00:37 +0100"  >&lt;p&gt;&amp;gt; With this patch the class BooleanWeight is not&lt;br/&gt;
&amp;gt; in (direct) use anymore - it is extended by &lt;br/&gt;
&amp;gt; BooleanWeight2 and then only the latter is used, &lt;br/&gt;
&amp;gt; and creates either Scorer2 or Scorer. We could &lt;br/&gt;
&amp;gt; get rid of BolleanWeight2, and have a single &lt;br/&gt;
&amp;gt; class BooleanWeight.&lt;/p&gt;

&lt;p&gt;Agree. Will do.&lt;/p&gt;

&lt;p&gt;&amp;gt; Javadocs for useScorer14 methods:&lt;/p&gt;

&lt;p&gt;This is good! Thanks Doron, I will add the javadocs&lt;br/&gt;
to my patch.&lt;/p&gt;</comment>
                    <comment id="12499375" author="michaelbusch" created="Sun, 27 May 2007 03:08:25 +0100"  >&lt;p&gt;New patch with the following changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removes BooleanWeight2&lt;/li&gt;
	&lt;li&gt;Javadocs for useScorer14 methods provided by Doron&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12499400" author="paul.elschot@xs4all.nl" created="Sun, 27 May 2007 09:49:18 +0100"  >&lt;p&gt;(Is the patch reversed? It did not apply at the first attempt,&lt;br/&gt;
probably because my working copy is not the same as the trunk.)&lt;br/&gt;
After ant clean, the boolean tests still pass here:&lt;br/&gt;
ant -Dtestcase=&apos;TestBool*&apos; test-core&lt;/p&gt;

&lt;p&gt;A slight improvement for the javadocs of BooleanQuery.java.&lt;br/&gt;
In the javadocs of the scorer() method it is indicated that a BooleanScorer2&lt;br/&gt;
will always be used, so it is better to mention here that BooleanScorer2&lt;br/&gt;
delegates to a 1.4 scorer in some cases:&lt;/p&gt;

&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Indicates that BooleanScorer2 will delegate&lt;/li&gt;
	&lt;li&gt;the scoring to a 1.4 BooleanScorer&lt;/li&gt;
	&lt;li&gt;for most queries without required clauses.&lt;/li&gt;
	&lt;li&gt;Being static, this setting is system wide.&lt;/li&gt;
	&lt;li&gt;Scoring in 1.4 mode may be faster.&lt;/li&gt;
	&lt;li&gt;But note that unlike the default behavior, it does&lt;/li&gt;
	&lt;li&gt;not guarantee that docs are collected in docid&lt;/li&gt;
	&lt;li&gt;order. In other words, with this setting,&lt;/li&gt;
	&lt;li&gt;{@link HitCollector#collect(int,float)}
&lt;p&gt; might be&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;invoked first for docid N and only later for docid N-1.&lt;br/&gt;
   */&lt;br/&gt;
  public static void setUseScorer14(boolean use14) 
{
    useScorer14 = use14;
  }&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12499415" author="michaelbusch" created="Sun, 27 May 2007 18:08:13 +0100"  >&lt;p&gt;&amp;gt; A slight improvement for the javadocs of BooleanQuery.java.&lt;br/&gt;
&amp;gt; In the javadocs of the scorer() method it is indicated that a BooleanScorer2&lt;br/&gt;
&amp;gt; will always be used, so it is better to mention here that BooleanScorer2&lt;br/&gt;
&amp;gt; delegates to a 1.4 scorer in some cases:&lt;/p&gt;

&lt;p&gt;Maybe we should just deprecate the useScorer14 methods and add new methods&lt;br/&gt;
allowDocsOutOfOrder. That should be easier to understand for the users. &lt;br/&gt;
And probably most users don&apos;t know (or don&apos;t care about) the differences&lt;br/&gt;
between BooleanScorer and BooleanScorer2 anyway.&lt;/p&gt;</comment>
                    <comment id="12499438" author="michaelbusch" created="Sun, 27 May 2007 20:20:07 +0100"  >&lt;p&gt;New patch that deprecates the useScorer14 methods and adds new&lt;br/&gt;
methods:&lt;/p&gt;

&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Indicates whether hit docs may be collected out of docid&lt;/li&gt;
	&lt;li&gt;order. In other words, with this setting,&lt;/li&gt;
	&lt;li&gt;{@link HitCollector#collect(int,float)}
&lt;p&gt; might be&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;invoked first for docid N and only later for docid N-1.&lt;/li&gt;
	&lt;li&gt;Being static, this setting is system wide.&lt;/li&gt;
	&lt;li&gt;If docs out of order are allowed scoring might be faster&lt;/li&gt;
	&lt;li&gt;for certain queries (disjunction queries with less than&lt;/li&gt;
	&lt;li&gt;32 prohibited terms). This setting has no effect for&lt;/li&gt;
	&lt;li&gt;other queries.&lt;br/&gt;
   */&lt;br/&gt;
  public static void setAllowDocsOutOfOrder(boolean allow);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Whether hit docs may be collected out of docid order.&lt;/li&gt;
	&lt;li&gt;@see #setAllowDocsOutOfOrder(boolean)&lt;br/&gt;
   */&lt;br/&gt;
  public static boolean getAllowDocsOutOfOrder();&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I think this is easier to understand for the users because it &lt;br/&gt;
tells them what they need to know (docs in or out of order) &lt;br/&gt;
and hides technical details (BooleanScorer vs. BooleanScorer2).&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="12499627" author="michaelbusch" created="Mon, 28 May 2007 20:34:27 +0100"  >&lt;p&gt;I just committed the latest patch. Thanks everyone!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12358337" name="lucene-730.patch" size="11661" author="michaelbusch" created="Sun, 27 May 2007 20:20:07 +0100" />
                    <attachment id="12358322" name="lucene-730.patch" size="8848" author="michaelbusch" created="Sun, 27 May 2007 03:08:24 +0100" />
                    <attachment id="12358175" name="lucene-730.patch" size="5531" author="michaelbusch" created="Fri, 25 May 2007 01:11:15 +0100" />
                    <attachment id="12345859" name="TopLevelDisjunction20061127.patch" size="5685" author="paul.elschot@xs4all.nl" created="Mon, 27 Nov 2006 20:37:45 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 14 Apr 2007 21:44:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13022</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27000</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>