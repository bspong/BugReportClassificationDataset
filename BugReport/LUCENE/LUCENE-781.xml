<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:53 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-781/LUCENE-781.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-781] NPE in MultiReader.isCurrent() and getVersion()</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-781</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I&apos;m attaching a fix for the NPE in MultiReader.isCurrent() plus a testcase. For getVersion(), we should throw a better exception that NPE. I will commit unless someone objects or has a better idea.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12361031">LUCENE-781</key>
            <summary>NPE in MultiReader.isCurrent() and getVersion()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="lucenebugs@danielnaber.de">Daniel Naber</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Jan 2007 21:37:38 +0000</created>
                <updated>Thu, 26 Jul 2007 23:52:51 +0100</updated>
                    <resolved>Thu, 26 Jul 2007 23:52:51 +0100</resolved>
                                                            <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12466636" author="doronc" created="Tue, 23 Jan 2007 03:35:52 +0000"  >&lt;p&gt;I checked - the fix is working and code seems right.&lt;/p&gt;

&lt;p&gt;While we are looking at this, there are a few more IndexReader methods &lt;br/&gt;
which are not implemented by MultiReader.&lt;/p&gt;

&lt;p&gt;These 3 methods seems ok:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;document(int)&lt;br/&gt;
  would work because IndexReader would send to document(int,FieldSelector) &lt;br/&gt;
  which is implemented in MultiReader.&lt;/li&gt;
	&lt;li&gt;termDocs(Term),&lt;/li&gt;
	&lt;li&gt;termPositions(Term)&lt;br/&gt;
  would both work because IndexReader implementations goes to termDocs() or &lt;br/&gt;
  to termPositions(), which both are implemented in MultiReader.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;These 3 methods should probably be fixed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;isOptimized()&lt;br/&gt;
  would fail - similar to isCurrent()&lt;/li&gt;
	&lt;li&gt;setNorm(int, String, float)&lt;br/&gt;
  would fail too, similar reason.&lt;/li&gt;
	&lt;li&gt;directory()&lt;br/&gt;
  would not fail, but fall to return the directory of reader&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;, &lt;br/&gt;
  is this a correct behavior?&lt;br/&gt;
  this is because MultiReader() (constructor) calls super with reader&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; - &lt;br/&gt;
  again, I am not sure, is this correct? (why allowing to create &lt;br/&gt;
  a multi-reader with no readers at all?)&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12466841" author="lucenebugs@danielnaber.de" created="Tue, 23 Jan 2007 22:04:19 +0000"  >&lt;p&gt;Thanks for your feedback. I have committed my patch (but moved the testcase to TestMultiReader instead of TestMultiSearcher) and will try to address the other issues you found in the next few days. Thus I&apos;m not closing this issue yet.&lt;/p&gt;</comment>
                    <comment id="12466843" author="hossman" created="Tue, 23 Jan 2007 22:11:35 +0000"  >&lt;p&gt;i haven&apos;t looked atthe patch, but i&apos;m a little confused by the issue summary ... for the benefit of people who might encounter this NPE and find this bug when searching, can we clarify under what circumstances MultiReader has this problem.&lt;/p&gt;

&lt;p&gt;after all: a MultiReader is returned by Indexreader.open anytime the index has more then one segment right? ... i can&apos;t imagine that &lt;b&gt;no one&lt;/b&gt; using a multisegment index has ever tried calling isCurrent() before.&lt;/p&gt;

&lt;p&gt;is this specific to some special use case (or is the reason we&apos;re just now noticing the problem because it&apos;s a bug recently introduced in the trunk?)&lt;/p&gt;</comment>
                    <comment id="12466849" author="lucenebugs@danielnaber.de" created="Tue, 23 Jan 2007 22:43:49 +0000"  >&lt;p&gt;Hoss, you&apos;re right, this breaks MultiReader, I will revert the patch. Funny that the test cases didn&apos;t notice that. Maybe because they use such a small amount of documents that they never need a MultiReader? The NPE happens when one constructs the MultiReader with its only public constructor, MultiReader(IndexReader[] subReaders). This construtor is never used in Lucene, not even in the test cases.&lt;/p&gt;</comment>
                    <comment id="12466852" author="doronc" created="Tue, 23 Jan 2007 23:04:31 +0000"  >&lt;p&gt;I thought it would not break MultiReader, just do unnecessary work for that method...?&lt;/p&gt;

&lt;p&gt;Same new test (using that (readers[]) constructor) would fail also in previous versions. &lt;/p&gt;

&lt;p&gt;I think main difference is that for the MultiReader created inside IndexReader, (1) all readers share the same directory, and (2) it maintains a SegmentsInfos read from that single directory. &lt;/p&gt;

&lt;p&gt;Now this is not the case for the other (but still valid &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) usage of MultiReader - because there is no single directory (well, not necessarily) and hence no SegmentInfos for the MultiReader. &lt;/p&gt;

&lt;p&gt;So it seems a possible fix would be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;define a boolean e.g. isWholeIndex predicate in MultiReader&lt;/li&gt;
	&lt;li&gt;would be true when constructed with a non null dir and a non null segmentInfos&lt;/li&gt;
	&lt;li&gt;base operation upon it:&lt;/li&gt;
	&lt;li&gt;if isWholeIndex call super.isCurrent() otherwise do the (multi) logic in current fix.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12466927" author="hossman" created="Wed, 24 Jan 2007 07:13:32 +0000"  >&lt;p&gt;i wasn&apos;t suggesting that the patch was flawed &amp;#8211; just trying to clarify what circumstances would cause an &quot;NPE in MultiReader.isCurrent() and getVersion()&quot;&lt;/p&gt;

&lt;p&gt;it sounds like my comment has spawned a seperate issue...&lt;/p&gt;

&lt;p&gt;if there are currently no tests for a multi-directory MultiReader then there certainly should be &amp;#8211; if the methods mentioned in this issue all currently throw an Exception on a multi-directory MultiReader we should either: a) define what the meaning of those methods is in that case, and implement them accordingly; or b) make those methods throw UnsupportedOperationException (or somethign similar) in thta case.&lt;/p&gt;


&lt;p&gt;...either way, i&apos;d still like clarification as to the orriginal point of this issue ... what was the bug?  what would trigger the NPE?&lt;/p&gt;</comment>
                    <comment id="12466930" author="doronc" created="Wed, 24 Jan 2007 07:32:20 +0000"  >&lt;p&gt;&amp;gt; ...either way, i&apos;d still like clarification as to the orriginal point of this &lt;br/&gt;
&amp;gt; issue ... what was the bug? what would trigger the NPE? &lt;/p&gt;

&lt;p&gt;It is triggers by having two ways to construct a MultiReader:&lt;br/&gt;
(1) as IndexReader does it for the regular (multi segment) index&lt;br/&gt;
      MultiReader(Directory directory, SegmentInfos sis, boolean closeDirectory, IndexReader[] subReaders)&lt;br/&gt;
(2) as anyone can use it, for aggregating results from any indexes:&lt;br/&gt;
     MultiReader(IndexReader[] subReaders)&lt;/p&gt;

&lt;p&gt;In (1) all readers use the same directory, and there is a single SegnentInfos.&lt;br/&gt;
This is the standard, tested way.&lt;/p&gt;

&lt;p&gt;In (2) there is no single dir and no single SegmentInfos. &lt;br/&gt;
This is the &quot;general&quot;, less tested way.&lt;br/&gt;
In this option, dir (of the multiReader) is initialized to that of subReader&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;. &lt;br/&gt;
This seems spooky to me.&lt;br/&gt;
Also in this option, SegmentInfos in null.&lt;br/&gt;
It makes sense, since readers can be anything - but this is the cause for the NPE.&lt;/p&gt;

&lt;p&gt;BTW, after (being surprised by) your first comment on this, I checked in 1.9.1 - the test (of case (2)) fails there as well.&lt;/p&gt;</comment>
                    <comment id="12467655" author="hossman" created="Thu, 25 Jan 2007 22:08:09 +0000"  >&lt;p&gt;so the fundamental issue is two radically different use cases of MultiReader &amp;#8211; and these methods really only have meaning when talking about a single directory.&lt;/p&gt;

&lt;p&gt;if getVersion, isCurrent and isOptimized, have &lt;b&gt;never&lt;/b&gt; worked with a MultiReader constructed using &quot;new MultiReader(IndexReader[])&quot; then throwing UnsupportedOperationException definitely seems like the best course of action ... the semantics of those methods don&apos;t really make sense on a multi-directory index.&lt;/p&gt;

&lt;p&gt;for setNorm we should be able to loop over the sub readers and call setNorm on each right?&lt;/p&gt;

&lt;p&gt;the 50 thousand dollar question is should directory() be modified to throw UnsupportedOperationException even though it doesn&apos;t currently throw an NPE ? ... i think it should.  I think the MultiReader(IndexReader[]) constructor should allways call super(null) &amp;#8211;  anyone currently relying on MultiReader.directory() it to return the directory of the &quot;first&quot; IndexReader should be able to easily change their code.  if we want to make it really easy we could provide a MultiReader.getSubReader(int n) method.&lt;/p&gt;</comment>
                    <comment id="12467667" author="doronc" created="Thu, 25 Jan 2007 22:36:54 +0000"  >&lt;p&gt;I agree, except for isCurrent() - why not iterating the readers only for case 2? After all it seems like a useful API also in this case.&lt;/p&gt;</comment>
                    <comment id="12467681" author="hossman" created="Thu, 25 Jan 2007 22:56:29 +0000"  >&lt;p&gt;let&apos;s say we do implement isCurrent for a multi directory MultiReader as a loop over teh sub readers that returns true if all of them return true.   If a client calls MultiReader.isCurrent() and gets back &quot;false&quot; ... what do they do with that information?&lt;/p&gt;

&lt;p&gt;That information only seems usefull if they know how the MultiReader was built - if they know it was built from multiple readers, then can allways do that loop themselves.  if they don&apos;t know how the MultiReader was constructed then can&apos;t attempt to reopen it so what&apos;s the point of knowing wether it&apos;s up to date?&lt;/p&gt;

&lt;p&gt;(argueable the app may just want to provide monitoring info about the low level index: but if that&apos;s the case the app should probably get that info at the level where it knows it&apos;s open a Reader across multiple directories)&lt;/p&gt;

&lt;p&gt;In general: if it&apos;s never worked, then we aren&apos;t under any burden to make it work if there isnt&apos; a clear meaning for the value.&lt;/p&gt;</comment>
                    <comment id="12467953" author="doronc" created="Fri, 26 Jan 2007 23:03:37 +0000"  >&lt;p&gt;One could write an application that groups readers to multiReaders in more than 1 level, i.e. r1,r2,r3 grouped to rr1,   r4,r5,r6 grouped to rr2,   rr1,rr2 grouped to rrr.    If rrr.isCurrent() throws unsupported, the application needs to question recursively. &lt;/p&gt;

&lt;p&gt;I am not aware of such an application, so you could argue this is only theoretic, still it demonstrates a strength of Lucene.  Also, here too, as argued above, even if the answer is false (not current), the application would need to apply the same recursive logic to reopen the non-current reader and reconstruct the multi-reader. &lt;/p&gt;

&lt;p&gt;So I agree it is valid to throw unsupported.&lt;/p&gt;

&lt;p&gt;Just that it feels a bit uncomfortable to throw unsupported for existing API of a method with well defined meaning that is quite easy to implement (relying on that anyhow it was never implemented correctly). &lt;/p&gt;</comment>
                    <comment id="12467957" author="hossman" created="Fri, 26 Jan 2007 23:18:09 +0000"  >&lt;p&gt;Lemme put it this way: I&apos;d rather write a new IndexReaderUtils class, with a static isMultiReaderCurrent(MultiReader) method that uses instanceOf to recursively walk all fo the sub indexes then to make MultiReader.isCurrent() do that ... because then people using hte method are clear about what the value of that boolean means.&lt;/p&gt;

&lt;p&gt;&amp;gt; Just that it feels a bit uncomfortable to throw unsupported for existing API of a method with&lt;br/&gt;
&amp;gt; well defined meaning that is quite easy to implement (relying on that anyhow it was never&lt;br/&gt;
&amp;gt; implemented correctly).&lt;/p&gt;

&lt;p&gt;I agree, it feels dirty ... but it feels safer too.&lt;/p&gt;

&lt;p&gt;i certainly won&apos;t obejct if someone commits a recursive method for isCurrent &amp;#8211; it&apos;s just not my prefrence.   I would object to a recursive isOptimized ... that one really doens&apos;t make sense at all for a multi-directory MultiReader ... in theory it should allways return false since by definition the index is not a single segment, but if you do that, so code could try to optimize it.&lt;/p&gt;
</comment>
                    <comment id="12468420" author="lucenebugs@danielnaber.de" created="Mon, 29 Jan 2007 21:36:51 +0000"  >&lt;p&gt;updated patch&lt;/p&gt;</comment>
                    <comment id="12468421" author="lucenebugs@danielnaber.de" created="Mon, 29 Jan 2007 21:38:12 +0000"  >&lt;p&gt;updated patch&lt;/p&gt;</comment>
                    <comment id="12468424" author="lucenebugs@danielnaber.de" created="Mon, 29 Jan 2007 21:53:18 +0000"  >&lt;p&gt;I&apos;ve attached an updated patch that now throws an exception for isCurrent() and that does the same for the other methods which Doron noted not to work with the public constructor either. Except doSetNorm() which seems to work okay without any patch.&lt;/p&gt;</comment>
                    <comment id="12468436" author="hossman" created="Mon, 29 Jan 2007 23:11:02 +0000"  >&lt;p&gt;comments based on cursory read of latest patch(es)...&lt;/p&gt;

&lt;p&gt;1) I still think the IndexReader[] constructor should &lt;b&gt;allways&lt;/b&gt; call super(null) ... the current behavior could mask future problems if/when new methods get added to IndexReader.&lt;br/&gt;
2) what about MultiReader.directory() ? ... shoulnd&apos;t that throw Unsupported if false == hasSegmentInfos ?&lt;/p&gt;

&lt;p&gt;#2 is a good example of why i believe in #1 ... &lt;/p&gt;</comment>
                    <comment id="12514823" author="michaelbusch" created="Tue, 24 Jul 2007 02:32:57 +0100"  >&lt;p&gt;I think the cleanest solution here is it to separate MultiReader into two&lt;br/&gt;
classes: MultiSegmentReader (package-protected) and MultiReader&lt;br/&gt;
(public) that extends MultiSegmentReader. &lt;br/&gt;
This would also help to implement &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-743&quot; title=&quot;IndexReader.reopen()&quot;&gt;&lt;del&gt;LUCENE-743&lt;/del&gt;&lt;/a&gt; cleaner.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach a patch here soon.&lt;/p&gt;</comment>
                    <comment id="12514838" author="michaelbusch" created="Tue, 24 Jul 2007 05:01:43 +0100"  >&lt;p&gt;This patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Adds the new class MultiSegmentReader which contains almost&lt;br/&gt;
     all code from MultiReader, except the public constructor.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Makes MultiTermEnum, MultiTermDocs and MultiTermPositions&lt;br/&gt;
     inner, static classes of MultiSegmentReader.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Adds the method isCurrent() to MultiReader, which recursively&lt;br/&gt;
     checks if all subreaders are up to date.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;MultiReader now throws UnsupportedOperationException when&lt;br/&gt;
     isOptimized() or getVersion() is called.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Enables the isCurrent() test in TestMultiReader that was&lt;br/&gt;
     disabled due to this issue.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="12514961" author="cutting" created="Tue, 24 Jul 2007 14:12:51 +0100"  >&lt;p&gt;&amp;gt; MultiSegmentReader (package-protected) and MultiReader (public) that extends MultiSegmentReader&lt;/p&gt;

&lt;p&gt;Hmm.  I&apos;ve never much liked having a non-public class as a base class for a public class.  But I can&apos;t think of a good reason, except that it makes the javadoc a bit odd, since the non-public class is named there, when normally everything shown in javadoc is public.&lt;/p&gt;</comment>
                    <comment id="12515057" author="michaelbusch" created="Tue, 24 Jul 2007 19:27:46 +0100"  >&lt;p&gt;&amp;gt; except that it makes the javadoc a bit odd, since the non-public class &lt;br/&gt;
&amp;gt; is named there, when normally everything shown in javadoc is public.&lt;/p&gt;

&lt;p&gt;Is it?? I looked into the javadocs built with this patch and I can&apos;t see&lt;br/&gt;
the name MultiSegmentReader. It looks like before, as if MultiReader &lt;br/&gt;
would still extend IndexReader:&lt;br/&gt;
&lt;a href=&quot;http://people.apache.org/~buschmi/lucene-781/api/org/apache/lucene/index/MultiReader.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~buschmi/lucene-781/api/org/apache/lucene/index/MultiReader.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12515384" author="michaelbusch" created="Wed, 25 Jul 2007 19:52:35 +0100"  >&lt;p&gt;If there are no objections against separating MultiReader into two classes&lt;br/&gt;
I would like to commit my patch in a day or two. I think the javadocs look &lt;br/&gt;
fine, the class MultiSegmentReader does not appear there.&lt;/p&gt;

&lt;p&gt;One thing I&apos;m not sure about: Should MultiReader throw an &lt;br/&gt;
UnsupportedOperationException or simply return false when isOptimized() is &lt;br/&gt;
called?&lt;/p&gt;</comment>
                    <comment id="12515387" author="yseeley@gmail.com" created="Wed, 25 Jul 2007 20:11:48 +0100"  >&lt;p&gt;Returning false for isOptimized() seems fine.&lt;/p&gt;</comment>
                    <comment id="12515797" author="cutting" created="Thu, 26 Jul 2007 18:33:21 +0100"  >&lt;p&gt;&amp;gt; I looked into the javadocs built with this patch and I can&apos;t see the name MultiSegmentReader.&lt;/p&gt;

&lt;p&gt;Great!  They&apos;ve improved javadoc since I last tried that.  I remove my reservations.  +1&lt;/p&gt;</comment>
                    <comment id="12515898" author="michaelbusch" created="Thu, 26 Jul 2007 23:52:51 +0100"  >&lt;p&gt;Committed. &lt;/p&gt;

&lt;p&gt;MultiSegmentReader.isOptimized() now always returns false.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12364925">LUCENE-832</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12362394" name="lucene-781.patch" size="32893" author="michaelbusch" created="Tue, 24 Jul 2007 05:01:43 +0100" />
                    <attachment id="12349858" name="multireader.diff" size="3762" author="lucenebugs@danielnaber.de" created="Mon, 29 Jan 2007 21:36:51 +0000" />
                    <attachment id="12349401" name="multireader.diff" size="1056" author="lucenebugs@danielnaber.de" created="Mon, 22 Jan 2007 21:39:09 +0000" />
                    <attachment id="12349859" name="multireader_test.diff" size="1871" author="lucenebugs@danielnaber.de" created="Mon, 29 Jan 2007 21:38:12 +0000" />
                    <attachment id="12349400" name="multireader_test.diff" size="2043" author="lucenebugs@danielnaber.de" created="Mon, 22 Jan 2007 21:38:34 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Jan 2007 03:35:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12972</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26949</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>