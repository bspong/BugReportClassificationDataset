<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:11:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2402/LUCENE-2402.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2402] Add an explicit method to invoke IndexDeletionPolicy</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2402</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Today, if one uses an IDP which holds onto segments, such as SnapshotDeletionPolicy, or any other IDP in the tests, those segments are left in the index even if the IDP no longer references them, until IW.commit() is called (and actually does something). I&apos;d like to add a specific method to IW which will invoke the IDP&apos;s logic and get rid of the unused segments w/o forcing the user to call IW.commit(). There are a couple of reasons for that:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Segments take up sometimes valuable HD space, and the application may wish to reclaim that space immediately. In some scenarios, the index is updated once in several hours (or even days), and waiting until then may not be acceptable.&lt;/li&gt;
	&lt;li&gt;I think it&apos;s a cleaner solution than waiting for the next commit() to happen. One can still wait for it if one wants, but otherwise it will give you the ability to immediately get rid of those segments.&lt;/li&gt;
	&lt;li&gt;TestSnapshotDeletionPolicy includes this code, which only strengthens (IMO) the need for such method:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// Add one more document to force writer to commit a
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; segment, so deletion policy has a chance to
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// delete again:
&lt;/span&gt;Document doc = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Document();
doc.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Field(&lt;span class=&quot;code-quote&quot;&gt;&quot;content&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;aaa&quot;&lt;/span&gt;, Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));
writer.addDocument(doc);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If IW had an explicit method, that code would not need to exist there at all ...&lt;/p&gt;

&lt;p&gt;Here comes the fun part - naming the baby:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;invokeDeletionPolicy &amp;#8211; describes exactly what is going to happen. However, if the user did not set IDP at all (relying on default, which I think many do), users won&apos;t understand what is it.&lt;/li&gt;
	&lt;li&gt;deleteUnusedSegments - more user-friendly, assuming users understand what &apos;segments&apos; are.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BTW, IW already has deleteUnusedFiles() which only tries to delete unreferenced files that failed to delete before (such as on Windows, due to e.g. open readers). Perhaps instead of inventing a new name, we can change IW.deleteUnusedFiles to call IndexFileDeleter.checkpoint (instead of deletePendingFiles) which deletes those files + calls IDP.onCommit().&lt;/p&gt;</description>
                <environment></environment>
            <key id="12462394">LUCENE-2402</key>
            <summary>Add an explicit method to invoke IndexDeletionPolicy</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="shaie">Shai Erera</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Apr 2010 07:23:59 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:12 +0100</updated>
                    <resolved>Wed, 5 May 2010 19:35:02 +0100</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12858426" author="earwin" created="Mon, 19 Apr 2010 10:14:15 +0100"  >&lt;p&gt;Lets reuse IW.deleteUnusedFiles() ?&lt;br/&gt;
No need to multiply confusion )&lt;/p&gt;</comment>
                    <comment id="12858738" author="mikemccand" created="Tue, 20 Apr 2010 02:07:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;Lets reuse IW.deleteUnusedFiles() ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12859222" author="shaie" created="Wed, 21 Apr 2010 07:06:56 +0100"  >&lt;p&gt;Patch changes deleteUnusedFiles to call IFD.checkpoint and also adds a testDeleteUnusedFiles2 to TestIndexWriter.&lt;/p&gt;

&lt;p&gt;Currently, TestIndexWriterReader.testDuringAddIndexes fails, if deleteUnusedFiles is coded like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void deleteUnusedFiles() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  deleter.checkpoint(segmentInfos, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The failure happens in CommitPoint&apos;s ctor in the assert statement which verifies the SegmentInos does not have external Directory. When I debug-traced the test, it passed and so I concluded it&apos;s a concurrency issue (and indeed testDuringAddIndexes spawns several threads.&lt;/p&gt;

&lt;p&gt;addIndexesNoOptimize does change SegmentInfos as it adds indexes, however at the end it &apos;fixes&apos; their Directory reference. I wondered how is regular commit() works when addIndexesNoOptimize is called, but couldn&apos;t find any synchronization block where one blocks the other. Eventually, I&apos;ve changed deleteUnusedFiles to this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void deleteUnusedFiles() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (commitLock) {
    deleter.checkpoint(rollbackSegmentInfos, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
    &lt;span class=&quot;code-comment&quot;&gt;// deleter.checkpoint((SegmentInfos) segmentInfos.clone(), &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/span&gt;  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ve tried to sync on commitLock (which seems good anyway), but the test kept failing. Even cloning SI did not work because it might have changed just before the clone. Only when passing rollbackSI to checkpoint does the test pass. But I&apos;m not sure if that&apos;s the right solution, as when I debug-traced it and put a break point just before the call to checkpoint, SI included one segment w/ a different name than rollbackSI ...&lt;/p&gt;

&lt;p&gt;BTW, the test fails on DirReader.doClose, where it checks if writer != null and then calls deleteUnusedFiles. So I guess it&apos;s a NRT problem only.&lt;/p&gt;

&lt;p&gt;In general, that that addIndexesNoOptimize messes w/ SI seems dangerous to me, because that&apos;s undocumented and unprotected - e.g. if someone extends IW and adds some logic which requires reading SI ... I&apos;m not sure how to solve it, but that seems unrelated to that issue (probably much more complicated to solve).&lt;/p&gt;</comment>
                    <comment id="12859369" author="mikemccand" created="Wed, 21 Apr 2010 15:28:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;The failure happens in CommitPoint&apos;s ctor in the assert statement which verifies the SegmentInos does not have external Directory.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Urgh.... indeed we must protect against one thread doing addIndexes&lt;br/&gt;
and another thread calling deleteUnusedFiles.&lt;/p&gt;

&lt;p&gt;The way things work today (and I agree we should fix this) is&lt;br/&gt;
addIndexes* immediately modify the in memory segments to include&lt;br/&gt;
foreign (external Dir) segments, then proceed to target these foreign&lt;br/&gt;
segments by merging them away.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;ve tried to sync on commitLock (which seems good anyway), but the test kept failing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This isn&apos;t strictly necessary, I think?  The two ops (ongoing commit&lt;br/&gt;
&amp;#8211; takes time since fync can be so slow &amp;#8211; and deleting unused files)&lt;br/&gt;
are orthogonal.  They both invoke IDP/IFD, but this is still protected&lt;br/&gt;
(sync&apos;d on IW)...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Only when passing rollbackSI to checkpoint does the test pass.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In fact this is the right track, I think...  rollbackSI is a clone of&lt;br/&gt;
the last committed segments, whereas the &quot;live&quot; segments contains all&lt;br/&gt;
uncommitted stuff that&apos;s happened since.  We really should not be&lt;br/&gt;
treating these pending changes as if they were a commit point... so&lt;br/&gt;
using rollbackSI makes sense.&lt;/p&gt;

&lt;p&gt;But, the problem is, IFD.checkpoint will hold a new commit point when&lt;br/&gt;
you pass isCommit=true, which is no good.  I think we need to open up&lt;br/&gt;
a new package private method in IFD, eg &quot;revisitPolicy&quot; or some such, which&lt;br/&gt;
just does:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (infoStream != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
  message(&lt;span class=&quot;code-quote&quot;&gt;&quot;now visit...&quot;&lt;/span&gt;);
}
deletePendingFiles();
policy.onCommit(commits);
deleteCommits();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ie, most of what IFD.checkpoint does when isCommit=true, minus the&lt;br/&gt;
incRef (which has already been done, in the past, for this segments)&lt;br/&gt;
and the commits.add of a new commit point.&lt;/p&gt;

&lt;p&gt;Invoking IDP.onCommit still isn&apos;t quite right (no new commit was done)&lt;br/&gt;
but I think it&apos;s OK for now?  (Adding some kind of &quot;visit&quot; method&lt;br/&gt;
feels like overkill...).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BTW, the test fails on DirReader.doClose, where it checks if writer != null and then calls deleteUnusedFiles. So I guess it&apos;s a NRT problem only.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm the problem should be wider than just NRT.  Any time one thread&lt;br/&gt;
calls deleteUnusedFiles while another is doing addIndexes*, this bug&lt;br/&gt;
should be hit-able.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In general, that that addIndexesNoOptimize messes w/ SI seems dangerous to me, because that&apos;s undocumented and unprotected&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.&lt;/p&gt;

&lt;p&gt;I&apos;d love to &lt;span class=&quot;error&quot;&gt;&amp;#91;eventually&amp;#93;&lt;/span&gt; change addIndexes*, so that it does all its&lt;br/&gt;
work &quot;privately&quot; and only in the end atomically &quot;checks in&quot; the&lt;br/&gt;
(not-foreign) segments it produced.  It gets tricky, though, since&lt;br/&gt;
&quot;normal&quot; segment merging, and flushing, is still ongoing, and we&apos;d not&lt;br/&gt;
want to do redundant merging work.&lt;/p&gt;

&lt;p&gt;This also messes up NRT, ie, if you open an NRT reader during an&lt;br/&gt;
addIndexes*, you can see some segments already added and some now &amp;#8211;&lt;br/&gt;
ie NRT violates the advertised atomicity of addIndexes* (the javadocs&lt;br/&gt;
note this).&lt;/p&gt;

&lt;p&gt;I think we really need to factor IW apart:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Indexer (add/update/delete), also flushes new segments&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Keeper of the segments file (exposes API to make atomic changes to&lt;br/&gt;
    segments file, does commits, interacts w/ IDP/IFD)&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Merger (normal merging, optimize, expungeDeletes, addIndexes)&lt;/li&gt;
&lt;/ol&gt;


&lt;ol&gt;
	&lt;li&gt;Reader pool&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12859377" author="shaie" created="Wed, 21 Apr 2010 15:44:08 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we need to open up a new package private method in IFD, eg &quot;revisitPolicy&quot; or some such&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So maybe reuse deletePendingFiles? I.e. this method does not accept anything, and so seems that revisitPolicy won&apos;t (just pass on to IDP its &apos;commits&apos; member). IFD is anyway an internal API ... I&apos;ll give it a try. deletePendingFiles would just do what it does, then in the end call policy.onCommit(commits) and deleteCommits() ... what do you think? And then IW does not need to change.&lt;/p&gt;</comment>
                    <comment id="12859381" author="mikemccand" created="Wed, 21 Apr 2010 15:53:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;So maybe reuse deletePendingFiles?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm I think this is too much?  EG we call that on every checkpoint call... so this&apos;d mean the IDP gets 2 onCommit calls per commit (one &quot;fake&quot; one and one &quot;real&quot;)?&lt;/p&gt;

&lt;p&gt;I think it&apos;s better if the &quot;fake&quot; onCommit only arrives when IW.deleteUnusedFiles is invoked?&lt;/p&gt;</comment>
                    <comment id="12859389" author="shaie" created="Wed, 21 Apr 2010 16:14:14 +0100"  >&lt;p&gt;Ok I understand. About the name, revisitPolicy is not exactly accurate (I think?) because it also deletes the pending files (and not just revisit the policy). Unless IW.deleteUnusedFiles will invoke both deletePendingFiles and revisitPolicy ... the latter will just do&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (commits.size() &amp;gt; 0) {
  policy.onCommit(commits);
  deleteCommits();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                    <comment id="12859393" author="mikemccand" created="Wed, 21 Apr 2010 16:21:16 +0100"  >&lt;p&gt;+1, I think that&apos;s a good approach.&lt;/p&gt;</comment>
                    <comment id="12859397" author="shaie" created="Wed, 21 Apr 2010 16:41:24 +0100"  >&lt;p&gt;Adds revisitPolicy to IFD (package-private) and also calls it from IW.deleteUnusedFiles. All tests pass&lt;/p&gt;</comment>
                    <comment id="12859403" author="mikemccand" created="Wed, 21 Apr 2010 16:55:05 +0100"  >&lt;p&gt;Patch looks good Shai!&lt;/p&gt;

&lt;p&gt;But you can remove the &quot; ...&quot; in the message output &amp;#8211; I had put into my code thinking there may be details we put instead of that &quot;...&quot;, but, I think there are no further details.&lt;/p&gt;</comment>
                    <comment id="12859418" author="shaie" created="Wed, 21 Apr 2010 17:20:48 +0100"  >&lt;p&gt;ok I&apos;ll remove them before commit. Will commit this later - giving chance for more people to review.&lt;/p&gt;</comment>
                    <comment id="12859642" author="shaie" created="Thu, 22 Apr 2010 04:46:00 +0100"  >&lt;p&gt;Committed revision 936605.&lt;/p&gt;</comment>
                    <comment id="12864419" author="shaie" created="Wed, 5 May 2010 18:34:41 +0100"  >&lt;p&gt;Backport to 3.1&lt;/p&gt;</comment>
                    <comment id="12864439" author="shaie" created="Wed, 5 May 2010 19:35:02 +0100"  >&lt;p&gt;Committed revision 941417.&lt;/p&gt;</comment>
                    <comment id="13013399" author="gsingers" created="Wed, 30 Mar 2011 16:50:12 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12442442" name="LUCENE-2402.patch" size="4865" author="shaie" created="Wed, 21 Apr 2010 16:41:24 +0100" />
                    <attachment id="12442400" name="LUCENE-2402.patch" size="3812" author="shaie" created="Wed, 21 Apr 2010 07:06:56 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 19 Apr 2010 09:14:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11400</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25289</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>