<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:25 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-762/LUCENE-762.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-762] [PATCH] Efficiently retrieve sizes of field values</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-762</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Sometimes an application would like to know how large a document is before retrieving it.  This can be important for memory management or choosing between algorithms, especially in cases where documents might be very large.&lt;/p&gt;

&lt;p&gt;This patch extends the existing FieldSelector mechanism with two new FieldSelectorResults:  SIZE and SIZE_AND_BREAK.  SIZE creates fields on the retrieved document that store field sizes instead of actual values.  SIZE_AND_BREAK is especially efficient if one field comprises the bulk of the document size (e.g., the body field) and can thus be used as a reasonable size approximation.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12359483">LUCENE-762</key>
            <summary>[PATCH] Efficiently retrieve sizes of field values</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="gsingers">Grant Ingersoll</assignee>
                                <reporter username="manawiz">Chuck Williams</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Dec 2006 10:52:10 +0000</created>
                <updated>Fri, 9 Feb 2007 03:19:26 +0000</updated>
                    <resolved>Fri, 9 Feb 2007 03:19:26 +0000</resolved>
                            <version>2.1</version>
                                                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12461382" author="gsingers" created="Fri, 29 Dec 2006 14:51:51 +0000"  >&lt;p&gt;Hi Chuck,&lt;/p&gt;

&lt;p&gt;I haven&apos;t applied this yet, but it looks good.  My only hesitation, and this is no reflection on how you have implemented it, but the if-then-else structure around line 104 is starting to get ugly.  I can imagine it growing and growing as more cases are handled.  I was wondering if maybe we should convert to a map lookup approach.  In Java 1.5 the map would be something like: &lt;br/&gt;
Map&amp;lt;FieldSelectorResult, FieldSelectorFunctor&amp;gt;&lt;/p&gt;

&lt;p&gt;where the Functor does the work of what is in the clause of each of the different cases&lt;br/&gt;
then, the if-else structure could be replaced by&lt;br/&gt;
FieldSelectorFunctor functor = map.get(FieldSelectorResult);&lt;br/&gt;
if (functor != null)&lt;br/&gt;
{&lt;br/&gt;
    functor.apply(doc, fi, binary, compressed, tokenize);&lt;br/&gt;
}&lt;br/&gt;
else&lt;br/&gt;
{&lt;br/&gt;
    skipField(binary, compressed)&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;The constructor/static would be responsible for instantiating the Map.  The Functors could be implemented as inner classes (although this can lead to a bunch of inner classes too)&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                    <comment id="12461460" author="manawiz" created="Sat, 30 Dec 2006 00:03:54 +0000"  >&lt;p&gt;Hi Grant,&lt;/p&gt;

&lt;p&gt;Maybe even better would be to have an appropriate method on FieldSelectorResult.  E.g.:&lt;/p&gt;

&lt;p&gt;FieldSelectorResult.readField(doc, fieldsStream, fi, binary, compressed, tokenized)&lt;/p&gt;

&lt;p&gt;This would eliminate the tests or map lookup in performance-critical code.&lt;/p&gt;



</comment>
                    <comment id="12466885" author="gsingers" created="Wed, 24 Jan 2007 02:33:12 +0000"  >&lt;p&gt;This would also eliminate the need to change FieldsReader for every new FieldSelectorResult that we want.  The downside is that it would most likely involve some reworking of FieldSelectorResult.  This probably isn&apos;t a big deal, since the FieldSelector stuff hasn&apos;t been released yet and has been noted to be experimental, but it has been on trunk for a while, so it is in use, I&apos;m sure.  I think Solr has incorporated it, but I am not sure.&lt;/p&gt;

&lt;p&gt;Patch that incorporates your existing patch and this new approach to follow soon.&lt;/p&gt;</comment>
                    <comment id="12466887" author="gsingers" created="Wed, 24 Jan 2007 02:43:20 +0000"  >&lt;p&gt;Hmm, I forgot to mention that FieldInfo is package local.  This complicates things a little bit, but I could expand the proposed method to pass in the appropriate FieldInfo properties, which seems to be name and omitNorms, but that doesn&apos;t seem quite right b/c we may want other FieldInfo later.  I suppose I could copy the info into a holding structure, but that seems like a waste.  Another option is to make FieldInfo public and label it as Expert Use/Internal Use only.  It exposes some of the implementation details, but not all and wouldn&apos;t be meaningful to most people, I guess. &lt;/p&gt;

&lt;p&gt;Any strong opinions on making FieldInfo public?&lt;/p&gt;</comment>
                    <comment id="12466904" author="manawiz" created="Wed, 24 Jan 2007 05:07:59 +0000"  >&lt;p&gt;I use FieldInfo heavily and many other package-level API&apos;s, but put my classes into Lucene packages to do this.  To bad Java doesn&apos;t have intermediate access levels between public and package, e.g., open to this package and it&apos;s subpackages.&lt;/p&gt;

&lt;p&gt;Maybe move FIeldSelector and FieldSelectorResult out of org.apache.lucene.document and into org.apache.lucene.index as they are deeply integrated with FieldsReader?  They don&apos;t have any package-level API&apos;s at present.&lt;/p&gt;</comment>
                    <comment id="12469326" author="gsingers" created="Thu, 1 Feb 2007 03:57:45 +0000"  >&lt;p&gt;I agree, Chuck, I sometimes wish you could have JAR level access or something like that.  Off topic, but doesn&apos;t C++ have a friend operator (not that I&apos;m wishing for the C++ days) that lets you do these kind of things.&lt;/p&gt;

&lt;p&gt;I originally put FieldSelector in the Document package b/c I felt it was more closely associated with Documents and Fields than the Index package.  Now, I guess, since the FieldsReader is in Index, I can see a strong argument for that location.&lt;/p&gt;

&lt;p&gt;Anyway, I thought of an alternative that should keep everyone happy:&lt;br/&gt;
Create a new Interface named FieldInfoAccessor which provides get methods for the properties on FieldInfo, which will implement the interface.  Pass that to FieldSelectorResult.readField method instead of FieldInfo and proceed as stated above.  &lt;/p&gt;

&lt;p&gt;The only sticking point I am now having is what to do with the Lazy Fields, since they require the ThreadLocal in FieldsReader.  I guess I would have to pass in the cloneable Fields Reader and the threadlocal, but that doesn&apos;t seem quite right either.  Any thoughts?  Moving the FieldSelector stuff into index package wouldn&apos;t address this, I don&apos;t think.  Maybe a brilliant thought will occur to me in the morning.&lt;/p&gt;</comment>
                    <comment id="12471571" author="gsingers" created="Fri, 9 Feb 2007 03:19:26 +0000"  >&lt;p&gt;I have committed the original patch.  All tests pass.  In the end, I could not find a way I felt comfortable with for getting rid of the if-then-else clause in FieldsReader.  I did add a TODO item there to remind us to go back and take a look at it again later.&lt;/p&gt;

&lt;p&gt;Since the if clauses are ordered according to their most common usages (I think), I don&apos;t think there will be much of a performance issue w/ the current approach.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12347968" name="SizeFieldSelector.patch" size="7192" author="manawiz" created="Thu, 28 Dec 2006 10:53:18 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 29 Dec 2006 14:51:51 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12990</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26968</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>