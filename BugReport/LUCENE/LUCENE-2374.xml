<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:44 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2374/LUCENE-2374.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2374] Add reflection API to AttributeSource/AttributeImpl</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2374</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;AttributeSource/TokenStream inspection in Solr needs to have some insight into the contents of AttributeImpls. As &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2302&quot; title=&quot;Replacement for TermAttribute+Impl with extended capabilities (byte[] support, CharSequence, Appendable)&quot;&gt;&lt;del&gt;LUCENE-2302&lt;/del&gt;&lt;/a&gt; has some problems with toString() &lt;span class=&quot;error&quot;&gt;&amp;#91;which is not structured and conflicts with CharSequence&amp;#39;s definition for CharTermAttribute&amp;#93;&lt;/span&gt;, I propose an simple API that get a default implementation in AttributeImpl (just like toString() current):&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Iterator&amp;lt;Map.Entry&amp;lt;String,?&amp;gt;&amp;gt; AttributeImpl.contentsIterator() returns an iterator (for most attributes its a singleton) of a key-value pair, e.g. &quot;term&quot;&lt;del&gt;&amp;gt;&quot;foobar&quot;,&quot;startOffset&quot;&lt;/del&gt;&amp;gt;Integer.valueOf(0),...&lt;/li&gt;
	&lt;li&gt;AttributeSource gets the same method, it just concat the iterators of each getAttributeImplsIterator() AttributeImpl&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No backwards problems occur, as the default toString() method will work like before (it just gets iterator and lists), but we simply remove the documentation for the format. (Char)TermAttribute gets a special impl fo toString() according to CharSequence and a corresponding iterator.&lt;/p&gt;

&lt;p&gt;I also want to remove the abstract hashCode() and equals() methods from AttributeImpl, as they are not needed and just create work for the implementor.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12461318">LUCENE-2374</key>
            <summary>Add reflection API to AttributeSource/AttributeImpl</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Apr 2010 00:07:45 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:26 +0100</updated>
                    <resolved>Wed, 19 Jan 2011 22:41:41 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12870174" author="thetaphi" created="Fri, 21 May 2010 22:29:14 +0100"  >&lt;p&gt;CharTermAtttribute is also in 3.1.&lt;/p&gt;</comment>
                    <comment id="12982334" author="rcmuir" created="Sun, 16 Jan 2011 16:43:31 +0000"  >&lt;p&gt;What are your thoughts here Uwe?&lt;/p&gt;

&lt;p&gt;Should we fix for 3.1 or leave till 3.2?&lt;/p&gt;

&lt;p&gt;It does seem good if we could possibly fix for 3.1 due to the fact toString() was the only&lt;br/&gt;
real introspection we had before?&lt;/p&gt;

&lt;p&gt;But at the same time, Solr&apos;s analysis.jsp etc doesn&apos;t introspect attributes outside of the&lt;br/&gt;
original 6 in Token anyway, so maybe we could delay?&lt;/p&gt;

</comment>
                    <comment id="12982335" author="thetaphi" created="Sun, 16 Jan 2011 16:56:16 +0000"  >&lt;p&gt;Oh, I forgot about that one! Wanted to fix this. I am currently away from my computer, can we discuss tomorrow?&lt;/p&gt;

&lt;p&gt;I really wanted to fix this, sorry.&lt;/p&gt;</comment>
                    <comment id="12982429" author="thetaphi" created="Sun, 16 Jan 2011 23:41:08 +0000"  >&lt;p&gt;I will work tomorrow on a patch with sophisticated backwards for 3.x and merge to trunk without sophisticated things &lt;b&gt;g&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;I changed my mind a little bit: I would simplify the whole thing: AttributeSource and AttributeImpl should have a simple method:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void addToMap(Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,?&amp;gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The default code would simply look like AttributeImpl.toString() now and add all non-static fields to the impl - special attributes like CharTermAttribute would have special handling. The default toString() &lt;span class=&quot;error&quot;&gt;&amp;#91;if not overridden&amp;#93;&lt;/span&gt; would simply call this method, too and pass a Fake-Map to the addToMap() method to populate a StringBuilder in Map.put() [to not automatically create a real Map always).&lt;/p&gt;

&lt;p&gt;Code in analysis.jsp would simply pass a map (e.g. a LinkedHashMap to preserve order) and then print it out. The values in the map are native types / or CharSequence for (Char)TermAttribute.&lt;/p&gt;

&lt;p&gt;The only problem with this aproach would be that the attribute keys must be unique - an idea would be to prefix them with the attribute name.&lt;/p&gt;

&lt;p&gt;I will also remove the abstract equals() and hashCode() in AttributeImpl - the attribute API does not rely on them to be implemented - this simplyfies implementation of attributes, because equals/hashCode are never used. In 4.0 I would remove this from all custom attributes.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                    <comment id="12982437" author="earwin" created="Mon, 17 Jan 2011 00:15:23 +0000"  >&lt;p&gt;Nice. Except maybe introduce a simple interface instead of the Map&amp;lt;String, ?&amp;gt; ?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; AttributeReflector { &lt;span class=&quot;code-comment&quot;&gt;// Name is crap, should be changed
&lt;/span&gt;  void reflect(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; key, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; value);
}

void reflectWith(AttributeReflector reflector);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You have no need for fake maps then, both in toString(), and in user code.&lt;/p&gt;</comment>
                    <comment id="12982439" author="thetaphi" created="Mon, 17 Jan 2011 00:17:51 +0000"  >&lt;p&gt;I had the same idea and I am coding it currently.&lt;/p&gt;</comment>
                    <comment id="12982440" author="earwin" created="Mon, 17 Jan 2011 00:36:12 +0000"  >&lt;p&gt;Another step in the same direction then. Instead of&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The only problem with this aproach would be that the attribute keys must be unique - an idea would be to prefix them with the attribute name.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let us define interface as - void reflect(Class&amp;lt;?&amp;gt; attributeClass, String key, Object value) ?&lt;br/&gt;
If the client code then wants to call toString() on attributeClass and concat with key - it&apos;s free to do so. If it wants to be more creative - it can.&lt;/p&gt;</comment>
                    <comment id="12982672" author="thetaphi" created="Mon, 17 Jan 2011 15:44:00 +0000"  >&lt;p&gt;Here a first patch with the proposed API (thanks Earwin).&lt;/p&gt;

&lt;p&gt;The patch is for 3.x, as it contains already the sophisticated(TM) backwards compatibility layer (see javadocs).&lt;/p&gt;

&lt;p&gt;Still missing:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove obsolete toString in contrib/queryparser&lt;/li&gt;
	&lt;li&gt;Test for sophisticated bw&lt;/li&gt;
	&lt;li&gt;Tests for API in general&lt;/li&gt;
	&lt;li&gt;an AttributeChecker test class that checks basic Attribute features and its implementation (copyTo, reflectAsString,...)&lt;/li&gt;
	&lt;li&gt;Solr changes to make use of this API in analysis.jsp and the other TokenStream component&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                    <comment id="12982918" author="thetaphi" created="Mon, 17 Jan 2011 23:43:43 +0000"  >&lt;p&gt;New patch with analysis.jsp fixed (also &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2315&quot; title=&quot;analysis.jsp &amp;quot;highlight matches&amp;quot; no longer works&quot;&gt;&lt;del&gt;SOLR-2315&lt;/del&gt;&lt;/a&gt;):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;highlighting works again&lt;/li&gt;
	&lt;li&gt;only attributes are shown that exist at the step of analysis&lt;/li&gt;
	&lt;li&gt;attribute names changed a little bit, because it uses the ones from reflection api&lt;/li&gt;
	&lt;li&gt;Attribute class name shown in mouse hover&lt;/li&gt;
	&lt;li&gt;start/endOffset now in two different lines (no chance to do it other without another special case)&lt;/li&gt;
	&lt;li&gt;payloads are no longer printed as text, because it used default platform encoding (new String(byte[]))!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I also added some example screenshots!&lt;/p&gt;</comment>
                    <comment id="12982921" author="rcmuir" created="Mon, 17 Jan 2011 23:50:14 +0000"  >&lt;p&gt;+1, this looks great.&lt;/p&gt;

&lt;p&gt;i think its really important to show all the attributes in analysis.jsp, e.g. KeywordAttribute.&lt;/p&gt;</comment>
                    <comment id="12982931" author="simonw" created="Tue, 18 Jan 2011 00:11:42 +0000"  >&lt;p&gt;nice work uwe!! +1 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12983194" author="thetaphi" created="Tue, 18 Jan 2011 13:58:59 +0000"  >&lt;p&gt;Next patch - Converted deprecated AnalysisRequestHandler and (Field|Document)AnalysisRequestHandler:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Token are now correctly ordered by position not endOffset (this is identical to analysis.jsp)&lt;/li&gt;
	&lt;li&gt;Moved over to AttributeSource&lt;/li&gt;
	&lt;li&gt;support for custom attributes&lt;/li&gt;
	&lt;li&gt;fixed payloads to display as hex like in analysis.jsp (maybe this should be fixed in future to support Payload instances directly in ResponseWriter)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will now concentrate on contrib/queryparser, Lucene reflection tests and javadocs in Lucene core&lt;/p&gt;</comment>
                    <comment id="12983195" author="thetaphi" created="Tue, 18 Jan 2011 14:01:04 +0000"  >&lt;p&gt;In my opinion, there is lots of code duplication in unmainainable analysis.jsp. I think we should open a new issue to remove it and replace by an XSL or alternatively make its internal functionality backed by FieldAnalysisReuqestHandler.&lt;/p&gt;</comment>
                    <comment id="12983224" author="markrmiller@gmail.com" created="Tue, 18 Jan 2011 15:20:02 +0000"  >&lt;p&gt;Agreed Uwe.&lt;/p&gt;</comment>
                    <comment id="12983429" author="thetaphi" created="Tue, 18 Jan 2011 23:14:11 +0000"  >&lt;p&gt;Final patch for 3.x:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added some tests for reflection API&lt;/li&gt;
	&lt;li&gt;Added test for sophisticated backwards layer&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will commit this tomorrow and forward-port to trunk.&lt;/p&gt;

&lt;p&gt;Contrib/queryparsers attributes are not yet compatible with reflection, as the toString() there has wrong format (throws UOE). I will open a separate issue to fix that, this is not a serious problem at the moment, as attribute reflection is not needed there.&lt;/p&gt;</comment>
                    <comment id="12983444" author="thetaphi" created="Tue, 18 Jan 2011 23:44:10 +0000"  >&lt;p&gt;Also converted contrib/queryparser. The problematic thing was that these attributes use an xml-like toString() and so the backwards layer is enabled. So I simply added the reflectWith() method to not use reflection like for toString. But for consistence, in trunk, we should remove toString() and reflectWith().&lt;/p&gt;

&lt;p&gt;Will commit tomorrow, as said before.&lt;/p&gt;</comment>
                    <comment id="12983668" author="thetaphi" created="Wed, 19 Jan 2011 12:03:18 +0000"  >&lt;p&gt;Minor upgrades in backwards compatibility layer and javadocs.&lt;br/&gt;
Will commit this now.&lt;/p&gt;</comment>
                    <comment id="12983671" author="thetaphi" created="Wed, 19 Jan 2011 12:27:48 +0000"  >&lt;p&gt;Committed 3.x revision: 1060784&lt;/p&gt;

&lt;p&gt;Will now port to trunk without backwards layer.&lt;/p&gt;</comment>
                    <comment id="12983781" author="thetaphi" created="Wed, 19 Jan 2011 16:28:17 +0000"  >&lt;p&gt;First preview of trunk patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed useless equals() and hashCode() from internal attributes&lt;/li&gt;
	&lt;li&gt;Removed backwards layer from previous patch / contrib-qp needs no special handling anymore&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Solr:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removed deprecated AnalysisRequestHandler instead of fixing it - still test need to be cleaned up&lt;/li&gt;
	&lt;li&gt;(Field|Document)AnalysisRequestHandler now works primarily on BytesRef, especially for highlighting&lt;/li&gt;
	&lt;li&gt;Using BytesRef to wrap Payloads to easy print them as hex using BytesRef.toString()&lt;/li&gt;
	&lt;li&gt;There is still one analysis test failing: as NumericTermAttribute does not support cloning, analysis does not work and test fails. I will now open another issue to fix this (make NumericTermAttribute decoupled from outer TokenStream).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12983787" author="thetaphi" created="Wed, 19 Jan 2011 16:42:03 +0000"  >&lt;p&gt;Further TODOs:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;User TermsHash to collect the match set in AnalysisRequestHandlerBase&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12983867" author="thetaphi" created="Wed, 19 Jan 2011 19:57:15 +0000"  >&lt;p&gt;Hopefully final patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;minor changes for resolved NumericTermAttribute clone issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2875&quot; title=&quot;NumericTokenStream.NumericTermAttribute does not support cloning -&amp;gt; Solr analysis request handlers fail&quot;&gt;&lt;del&gt;LUCENE-2875&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;removed leftover AnalysisRequestHandler in clustering tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will commit this tomorrow if no-one objects!&lt;/p&gt;</comment>
                    <comment id="12983913" author="thetaphi" created="Wed, 19 Jan 2011 22:37:58 +0000"  >&lt;p&gt;Final trunk patch, will commit now.&lt;/p&gt;</comment>
                    <comment id="12983915" author="thetaphi" created="Wed, 19 Jan 2011 22:41:41 +0000"  >&lt;p&gt;Committed trunk revision: 1061039&lt;/p&gt;</comment>
                    <comment id="13013481" author="gsingers" created="Wed, 30 Mar 2011 16:50:26 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12496024">LUCENE-2875</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12495652">SOLR-2315</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12458401">LUCENE-2302</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12468749" name="LUCENE-2374-3x.patch" size="83034" author="thetaphi" created="Wed, 19 Jan 2011 12:03:18 +0000" />
                    <attachment id="12468701" name="LUCENE-2374-3x.patch" size="80646" author="thetaphi" created="Tue, 18 Jan 2011 23:44:10 +0000" />
                    <attachment id="12468697" name="LUCENE-2374-3x.patch" size="63629" author="thetaphi" created="Tue, 18 Jan 2011 23:14:11 +0000" />
                    <attachment id="12468647" name="LUCENE-2374-3x.patch" size="53613" author="thetaphi" created="Tue, 18 Jan 2011 13:58:59 +0000" />
                    <attachment id="12468606" name="LUCENE-2374-3x.patch" size="33486" author="thetaphi" created="Mon, 17 Jan 2011 23:43:43 +0000" />
                    <attachment id="12468562" name="LUCENE-2374-3x.patch" size="18502" author="thetaphi" created="Mon, 17 Jan 2011 15:44:00 +0000" />
                    <attachment id="12468790" name="LUCENE-2374.patch" size="79844" author="thetaphi" created="Wed, 19 Jan 2011 22:37:58 +0000" />
                    <attachment id="12468783" name="LUCENE-2374.patch" size="79491" author="thetaphi" created="Wed, 19 Jan 2011 19:57:15 +0000" />
                    <attachment id="12468767" name="LUCENE-2374.patch" size="78763" author="thetaphi" created="Wed, 19 Jan 2011 16:28:17 +0000" />
                    <attachment id="12468607" name="shot1.png" size="166656" author="thetaphi" created="Mon, 17 Jan 2011 23:43:43 +0000" />
                    <attachment id="12468608" name="shot2.png" size="144201" author="thetaphi" created="Mon, 17 Jan 2011 23:43:43 +0000" />
                    <attachment id="12468609" name="shot3.png" size="137139" author="thetaphi" created="Mon, 17 Jan 2011 23:44:07 +0000" />
                    <attachment id="12468610" name="shot4.png" size="140551" author="thetaphi" created="Mon, 17 Jan 2011 23:44:07 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 16 Jan 2011 16:43:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11425</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25316</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>