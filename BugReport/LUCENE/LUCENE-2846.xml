<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:06 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2846/LUCENE-2846.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2846] omitTF is viral, but omitNorms is anti-viral.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2846</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;omitTF is viral. if you add document 1 with field &quot;foo&quot; as omitTF, then document 2 has field &quot;foo&quot; without omitTF, they are both treated as omitTF.&lt;/p&gt;

&lt;p&gt;but omitNorms is the opposite. if you have a million documents with field &quot;foo&quot; with omitNorms, then you add just one document without omitting norms, &lt;br/&gt;
now you suddenly have a million &apos;real norms&apos;.&lt;/p&gt;

&lt;p&gt;I think it would be good for omitNorms to be viral too, just for consistency, and also to prevent huge byte[]&apos;s.&lt;br/&gt;
but another option is to make omitTF anti-viral, which is more &quot;schemaless&quot; i guess.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12494518">LUCENE-2846</key>
            <summary>omitTF is viral, but omitNorms is anti-viral.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Jan 2011 19:31:17 +0000</created>
                <updated>Fri, 10 May 2013 11:43:17 +0100</updated>
                    <resolved>Thu, 13 Jan 2011 00:20:11 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12976947" author="mikemccand" created="Mon, 3 Jan 2011 20:38:28 +0000"  >&lt;p&gt;+1 for omitNorms to be viral.&lt;/p&gt;</comment>
                    <comment id="12979315" author="rcmuir" created="Sun, 9 Jan 2011 12:51:52 +0000"  >&lt;p&gt;here&apos;s an initial patch hacked up by mike and I... also removed the &quot;multireader norms&quot; method that &lt;br/&gt;
takes a byte[]+offset from IndexReader.&lt;/p&gt;

&lt;p&gt;one oddity is that MultiNorms.norms() always returns a filled byte[] here for non-atomic readers (never null).&lt;br/&gt;
But i think this is ok for MultiNorms, its not used in searching (only for SlowMultiReaderWrapper etc)&lt;/p&gt;

&lt;p&gt;i think somehow it would be good to have more tests that test &quot;doesnt have field&quot; versus &quot;omits norms&quot;,&lt;br/&gt;
and also (likely not in this is issue) we should think about IR&apos;s norm-setting methods.&lt;/p&gt;

&lt;p&gt;I don&apos;t like that these use Similarity.getDefault(): it seems we could require you to pass in the Sim for the float case.&lt;br/&gt;
I also don&apos;t like that we expose a public setNorm that takes a byte value either!&lt;/p&gt;

&lt;p&gt;Long-term we should look at pulling this norm-encoding stuff out of Sim... the Sim should just be dealing with floats,&lt;br/&gt;
this encoding stuff belongs somewhere else.&lt;/p&gt;</comment>
                    <comment id="12979331" author="rcmuir" created="Sun, 9 Jan 2011 14:03:10 +0000"  >&lt;p&gt;an alternative to totally clear up the faking here that mike thought of:&lt;/p&gt;

&lt;p&gt;If we can somehow differentiate between omitNorms (null), and &apos;doesnt have field&apos; (say, exception),&lt;br/&gt;
we wouldn&apos;t need to fake. In multinorms we could then safely return null if any reader returns null,&lt;br/&gt;
but throw an exception if all readers throw an exception.&lt;/p&gt;</comment>
                    <comment id="12979373" author="rcmuir" created="Sun, 9 Jan 2011 17:21:08 +0000"  >&lt;p&gt;here&apos;s an updated patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The IR.setNorm(float) is also removed, forcing the user to use the correct similarity versus us using the wrong one (the static)&lt;/li&gt;
	&lt;li&gt;MultiNorms doesn&apos;t fake norms anymore, instead it handles the case of non-existent field versus omitted norms.&lt;/li&gt;
	&lt;li&gt;When a document doesnt have a field, its (undefined) norms are written as zero bytes instead of Similarity.getDefault().encodeNorm(1f).&lt;/li&gt;
	&lt;li&gt;All uses of Similarity.get/setDefault are now gone in lucene core, except for in IndexSearcher and IndexWriterConfig.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12979375" author="rcmuir" created="Sun, 9 Jan 2011 17:38:17 +0000"  >&lt;p&gt;sorry i had a piece of backwards logic in MultiNorms.&lt;/p&gt;

&lt;p&gt;of course all tests pass either way, which is why we need a good mixed-schema test (with RIW) &lt;br/&gt;
for this issue before it can go in (no matter what we do)&lt;/p&gt;</comment>
                    <comment id="12980146" author="rcmuir" created="Tue, 11 Jan 2011 15:42:18 +0000"  >&lt;p&gt;ok here&apos;s the final patch: with a reasonably good test and docs.&lt;/p&gt;

&lt;p&gt;I think this one is ready to commit: gets rid of fake norms and use of the static Similarity.getDefault()&lt;/p&gt;</comment>
                    <comment id="12980147" author="rcmuir" created="Tue, 11 Jan 2011 15:46:12 +0000"  >&lt;p&gt;For branch 3.x, i would like to deprecate the IndexReader.setNorm(float) based method, so its no surprise when its removed here.&lt;/p&gt;

&lt;p&gt;here was the changes entry (so i would insert some text like this in the deprecation): &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;LUCENE-2846: Remove the deprecated IndexReader.setNorm(int, String, float).
  This method was only syntactic sugar for setNorm(int, String, byte), but
  using the global Similarity.getDefault().encodeNormValue.  Use the byte-based
  method instead to ensure that the norm is encoded with your Similarity.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12980156" author="gsingers" created="Tue, 11 Jan 2011 16:09:33 +0000"  >&lt;p&gt;I get the comparison to omitTF, but this functionality has been around a long time.  Why does it have to be all or nothing?  Couldn&apos;t we investigate a sparse data structure to be used instead?  We use the current dense approach when a high percentage contain norms and the sparse when less have that amount?  I&apos;m not sure what that data structure is just yet, but over in Mahout we have sparse and dense vectors and we have primitive collections that could be useful.&lt;/p&gt;</comment>
                    <comment id="12980164" author="rcmuir" created="Tue, 11 Jan 2011 16:24:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;I get the comparison to omitTF, but this functionality has been around a long time.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you explain what functionality you are losing with this patch?&lt;/p&gt;</comment>
                    <comment id="12980171" author="mikemccand" created="Tue, 11 Jan 2011 16:39:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Couldn&apos;t we investigate a sparse data structure to be used instead?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be very interesting to explore.  The fact that norms are dense, on disk and in memory, can cause horrific problems like your index taking much much more disk space and RAM on optimize/big merge finishing.&lt;/p&gt;

&lt;p&gt;But I think that&apos;s orthogonal to the improvements here?  Ie this issue removes fake norms, invalid uses of default Sim, etc.&lt;/p&gt;

&lt;p&gt;Also, I would worry about the lookup cost of sparse vectors in RAM &amp;#8211; looking up the norm per doc is a severe hotspot on Lucene.&lt;/p&gt;</comment>
                    <comment id="12980241" author="rcmuir" created="Tue, 11 Jan 2011 18:35:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;But I think that&apos;s orthogonal to the improvements here? Ie this issue removes fake norms, invalid uses of default Sim, etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, after talking to Grant, I think his comments are on the larger issues of norms... I am totally not trying to address&lt;br/&gt;
this here. This one is just about cleaning up things that are &quot;buggy&quot;, especially using Similarity.getDefault when we shouldn&apos;t.&lt;/p&gt;

&lt;p&gt;The scope of this one (even though its just cleanup) is large enough I think... I&apos;d like to proceed with this unless there are&lt;br/&gt;
any objections. We can address real improvements to norms somewhere else, and hopefully this will help make that easier.&lt;/p&gt;</comment>
                    <comment id="12981037" author="rcmuir" created="Thu, 13 Jan 2011 00:20:11 +0000"  >&lt;p&gt;Committed revision 1058367.&lt;/p&gt;

&lt;p&gt;I deprecated the dangerous setNorm(float) method in 3.x in revision 1058370,&lt;br/&gt;
instead pointing at setNorm(byte) and using Similarity.encodeNormValue(),&lt;br/&gt;
so you can ensure your Similarity is always used (not Similarity.getDefault)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12468016" name="LUCENE-2846.patch" size="59722" author="rcmuir" created="Tue, 11 Jan 2011 15:42:18 +0000" />
                    <attachment id="12467843" name="LUCENE-2846.patch" size="58088" author="rcmuir" created="Sun, 9 Jan 2011 17:38:17 +0000" />
                    <attachment id="12467842" name="LUCENE-2846.patch" size="58027" author="rcmuir" created="Sun, 9 Jan 2011 17:21:08 +0000" />
                    <attachment id="12467832" name="LUCENE-2846.patch" size="30952" author="rcmuir" created="Sun, 9 Jan 2011 12:51:52 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 3 Jan 2011 20:38:28 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11015</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24846</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>