<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:59:05 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-488/LUCENE-488.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-488] adding docs with large (binary) fields of 5mb causes OOM regardless of heap size</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-488</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;as reported by George Washington in a message to java-user@lucene.apache.org with subect &quot;Storing large text or binary source documents in the index and memory usage&quot; arround 2006-01-21 there seems to be a problem with adding docs containing really large fields.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach a test case in a moment, note that (for me) regardless of how big i make my heap size, and regardless of what value I set  MIN_MB to, once it starts trying to make documents of containing 5mb of data, it can only add 9 before it rolls over and dies.&lt;/p&gt;

&lt;p&gt;here&apos;s the output from the code as i will attach in a moment...&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testsuite: org.apache.lucene.document.TestBigBinary&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 78.656 sec&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; ------------- Standard Output ---------------&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; NOTE: directory will not be cleaned up automatically...&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Dir: /tmp/org.apache.lucene.document.TestBigBinary.97856146.100iters.4mb&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; iters completed: 100&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; totalBytes Allocated: 419430400&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; NOTE: directory will not be cleaned up automatically...&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Dir: /tmp/org.apache.lucene.document.TestBigBinary.97856146.100iters.5mb&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; iters completed: 9&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; totalBytes Allocated: 52428800&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; ------------- ---------------- ---------------&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testcase: testBigBinaryFields(org.apache.lucene.document.TestBigBinary):    Caused an ERROR&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Java heap space&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.lang.OutOfMemoryError: Java heap space&lt;/p&gt;


&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Test org.apache.lucene.document.TestBigBinary FAILED&lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux asimov 2.6.6.hoss1 #1 SMP Tue Jul 6 16:31:01 PDT 2004 i686 GNU/Linux&lt;/p&gt;</environment>
            <key id="12327932">LUCENE-488</key>
            <summary>adding docs with large (binary) fields of 5mb causes OOM regardless of heap size</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="hossman">Hoss Man</reporter>
                        <labels>
                    </labels>
                <created>Sat, 21 Jan 2006 11:35:06 +0000</created>
                <updated>Mon, 31 Dec 2007 10:56:32 +0000</updated>
                    <resolved>Mon, 31 Dec 2007 10:56:32 +0000</resolved>
                            <version>1.9</version>
                                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12363499" author="hossman" created="Sat, 21 Jan 2006 11:37:33 +0000"  >&lt;p&gt;two things i forgot to mention before...&lt;/p&gt;

&lt;p&gt;1) It seems i can as many 4mb documents as my heart desires, but once i go up to 5 all hell breaks loose.&lt;/p&gt;

&lt;p&gt;2) I didn&apos;t try playing with the various IndexWriter options to see what affect they had on the breaking point.&lt;/p&gt;</comment>
                    <comment id="12363524" author="lucenebugs@danielnaber.de" created="Sun, 22 Jan 2006 05:15:47 +0000"  >&lt;p&gt;writer.setMaxBufferedDocs(5); solves to OOM error, at least for binary stuff that&apos;s 5MB. So with writer.setMaxBufferedDocs(1) you can probably add documents that are almost as big as your JVM maximum memory I guess.&lt;/p&gt;</comment>
                    <comment id="12363568" author="lucenebugs@danielnaber.de" created="Sun, 22 Jan 2006 22:35:23 +0000"  >&lt;p&gt;writer.setMaxBufferedDocs(1) was a bad idea, it doesn&apos;t work because of an off-by-one bug. writer.setMaxBufferedDocs(2) should work, but I had to stop the unit test because it&apos;s too slow because of the many disk accesses. Other things to try:&lt;/p&gt;

&lt;p&gt;-get stack trace of OOM (requires java 1.5)&lt;br/&gt;
-use writer.setUseCompoundFile(false) and look at the index directory after the crash&lt;br/&gt;
-use writer.setInfoStream(System.out) to get some (not much) more output from Lucene&lt;/p&gt;

&lt;p&gt;BTW, this seems to affect all big stored fields, not just binary fields.&lt;/p&gt;

&lt;p&gt;(Please reply here in the issue tracker, not on the mailing list. This way things can be properly tracked).&lt;/p&gt;</comment>
                    <comment id="12363628" author="georgew" created="Mon, 23 Jan 2006 17:58:56 +0000"  >&lt;p&gt;Daniel, a combination of :&lt;/p&gt;

&lt;p&gt;      iwriter.setMaxBufferedDocs(2);&lt;br/&gt;
      iwriter.setMergeFactor(2);&lt;br/&gt;
      iwriter.setUseCompoundFile(false);&lt;/p&gt;

&lt;p&gt;seems to help. I still get OOM errors but only with several larger docs (&amp;gt;10MB),  in succession, a significant improvement from the 5MB docs limit.&lt;br/&gt;
Perhaps this issue should be kept open so that a more satisfactory solution is found.&lt;br/&gt;
Thank you for your help.&lt;/p&gt;</comment>
                    <comment id="12555078" author="doronc" created="Mon, 31 Dec 2007 10:56:32 +0000"  >&lt;p&gt;This problem was resolved by &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-843&quot; title=&quot;improve how IndexWriter uses RAM to buffer added documents&quot;&gt;&lt;del&gt;LUCENE-843&lt;/del&gt;&lt;/a&gt;, after which stored fields are written directly into the directory (therefore not consuming aggregated RAM). &lt;/p&gt;

&lt;p&gt;It is interesting that the test provided here was allocating a new byte buffer of 2 - 10 MB for each added doc. This by itself couldeventually lead to OOMs because as the program ran longer it was becoming harder to alocate consecutive chunks of those sizes.  Enhancing binary fields with offset and length &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  would allow applications to reuse the input byte array and allocate less of those.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12322210" name="TestBigBinary.java" size="2274" author="hossman" created="Sat, 21 Jan 2006 11:37:33 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 22 Jan 2006 05:15:47 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13261</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27238</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>