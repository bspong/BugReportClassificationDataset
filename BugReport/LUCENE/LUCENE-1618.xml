<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1618/LUCENE-1618.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1618] Allow setting the IndexWriter docstore to be a different directory</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1618</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Add an IndexWriter.setDocStoreDirectory method that allows doc&lt;br/&gt;
stores to be placed in a different directory than the IW default&lt;br/&gt;
dir.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12423931">LUCENE-1618</key>
            <summary>Allow setting the IndexWriter docstore to be a different directory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="jasonrutherglen">Jason Rutherglen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 27 Apr 2009 21:17:49 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:23 +0100</updated>
                    <resolved>Fri, 1 May 2009 23:12:50 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="1209600">336h</timeoriginalestimate>
                    <timeestimate seconds="1209600">336h</timeestimate>
                                  <comments>
                    <comment id="12703363" author="yseeley@gmail.com" created="Mon, 27 Apr 2009 21:53:37 +0100"  >&lt;p&gt;I can see how this would potentially be useful for realtime... but it seems like only IndexWriter could eventually fix the situation of having the docstore on disk and the rest of a segment in RAM.  Which means that this API shouldn&apos;t be public?&lt;/p&gt;</comment>
                    <comment id="12703370" author="mikemccand" created="Mon, 27 Apr 2009 22:00:54 +0100"  >&lt;p&gt;Yeah I also think this should be an &quot;under the hood&quot; (done only by NRT) optimization inside IndexWriter.&lt;/p&gt;

&lt;p&gt;The only possible non-NRT case I can think of is when users make temporary indices in RAM, it&apos;s possible one would want to write the docStore files to an FSDirectory (because they are so large) but keep postings, norms, deletes, etc in RAM.  But going down that road opens up a can of worms... eg does segments_N somehow have to keep track of which dir has which parts of a segment?  Suddenly IndexReader must also know to look in different dirs for different parts of a segment, etc.&lt;/p&gt;

&lt;p&gt;it might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir, so IndexWriter/IndexReader still see a single Directory API.&lt;/p&gt;</comment>
                    <comment id="12703375" author="jasonrutherglen" created="Mon, 27 Apr 2009 22:08:18 +0100"  >&lt;blockquote&gt;
&lt;p&gt;non-NRT case I can think of is when users make temporary indices in RAM&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, and there could be others we don&apos;t know about.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea.  I&apos;ll try that method first.  If this one works out, then the API will be public?&lt;/p&gt;</comment>
                    <comment id="12703384" author="tsmith" created="Mon, 27 Apr 2009 22:17:48 +0100"  >&lt;p&gt;Would also further suggest that this Directory implementation would take one or more directories to store documents, along with one or more directories to store the index itself&lt;/p&gt;

&lt;p&gt;one of the directories should be explicitly marked for &quot;reading&quot; for each use&lt;/p&gt;

&lt;p&gt;this allows creating a Directory instance that will:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;store documents to disk (reading from disk during searches)&lt;/li&gt;
	&lt;li&gt;write index to disk and ram (reading from RAM during searches)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12703388" author="mikemccand" created="Mon, 27 Apr 2009 22:23:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;&amp;gt; it might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir&lt;/p&gt;

&lt;p&gt;Good idea. I&apos;ll try that method first. If this one works out, then the API will be public?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which API would be public?&lt;/p&gt;

&lt;p&gt;If this (call it &quot;FileSwitchDirectory&quot; for now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ) works then we would not add any API to IndexWriter (ie it&apos;s either or)?  But FileSwitchDirectory would be public &amp;amp; &quot;expert&quot;.&lt;/p&gt;

&lt;p&gt;One downside to this approach is it&apos;s brittle &amp;#8211; whenever we change file extensions you&apos;d have to &quot;know&quot; to fix this Directory.  Or maybe we make the Directory specialized to only storing the doc stores in the FSDir, then whenever we change file formats we would fix this directory?  But in the future, with custom codecs, things could be named whatever... hmmm.  Lacking clarity.&lt;/p&gt;</comment>
                    <comment id="12703406" author="eksdev" created="Mon, 27 Apr 2009 22:46:12 +0100"  >&lt;p&gt;Maybe, &lt;br/&gt;
FileSwitchDirectory should have possibility to get file list/extensions that should be loaded into RAM... making it maintenance free, pushing this decision to end user... if, and when we decide to support users in it, we could than maintain static list at separate place . Kind of separate execution and configuration&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;think&lt;/b&gt; I saw something similar Ning Lee made quite a while ago, from hadoop camp (indexing on hadoop something...). But cannot remember what was it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


</comment>
                    <comment id="12703415" author="mikemccand" created="Mon, 27 Apr 2009 23:06:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;Would also further suggest that this Directory implementation would take one or more directories to store documents, along with one or more directories to store the index itself&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean an opened IndexOutput would write its output to two (or more) different places?  So you could &quot;write through&quot; a RAMDir down to an FSDir?  (This way both the RAMDir and FSDir have a copy of the index).&lt;/p&gt;</comment>
                    <comment id="12703416" author="mikemccand" created="Mon, 27 Apr 2009 23:08:04 +0100"  >&lt;blockquote&gt;
&lt;p&gt;ileSwitchDirectory should have possibility to get file list/extensions that should be loaded into RAM... making it maintenance free, pushing this decision to end user... if, and when we decide to support users in it, we could than maintain static list at separate place . Kind of separate execution and configuration&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;With flexible indexing, presumably one could use their codec to ask it for the &quot;doc store extensions&quot; vs the &quot;postings extensions&quot;, etc., and pass to this configurable FileSwitchDirectory.&lt;/p&gt;</comment>
                    <comment id="12703630" author="tsmith" created="Tue, 28 Apr 2009 14:01:36 +0100"  >&lt;blockquote&gt;
&lt;p&gt;You mean an opened IndexOutput would write its output to two (or more) different places? So you could &quot;write through&quot; a RAMDir down to an FSDir? (This way both the RAMDir and FSDir have a copy of the index).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, so if you register more than one directory for &quot;index files&quot;, then the IndexOutput for the directory would dispatch to an IndexOutput for both sub directories&lt;br/&gt;
then, the IndexInput would only be opened on the &quot;primary&quot; directory (for instance, the RAM directory)&lt;/p&gt;

&lt;p&gt;This will allow extremely fast searches, with the persistence of a backing FSDirectory&lt;/p&gt;

&lt;p&gt;coupled with then having a set of directories for the &quot;Stored Documents&quot;, then allows:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;RAM directory search speed&lt;/li&gt;
	&lt;li&gt;All changes persisted to disk&lt;/li&gt;
	&lt;li&gt;Documents Stored (and retrieved from disk) (or optionally retrieved from RAM)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12703651" author="mikemccand" created="Tue, 28 Apr 2009 15:08:48 +0100"  >&lt;p&gt;Neat.  This is sounding like one cool Directory...&lt;/p&gt;</comment>
                    <comment id="12703656" author="earwin" created="Tue, 28 Apr 2009 15:34:29 +0100"  >&lt;blockquote&gt;&lt;p&gt;You mean an opened IndexOutput would write its output to two (or more) different places?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Except the best way is to write directly to FSDir.IndexOutput, and when it is closed, read back into memory.&lt;br/&gt;
That way, if FSDir.IO hits an exception while writing, you don&apos;t have to jump through the hoops to keep your RAMDir in consistent state (we had real troubles when some files were &apos;written&apos; to RAMDir, but failed to persist in FSDir).&lt;br/&gt;
Also, when reading the file back you already know it&apos;s exact size and can allocate appropriate buffer, saving on resizings (my draft impl) / chunking (lucene&apos;s current impl) overhead.&lt;/p&gt;</comment>
                    <comment id="12703658" author="yseeley@gmail.com" created="Tue, 28 Apr 2009 15:42:24 +0100"  >&lt;p&gt;As it relates to near real time, the search speed of the RAM directory in relation to FSDirectory seems unimportant (what is this diff anyway?) - the FSDirectory will be much larger and that is where the bulk of the search time will be.&lt;/p&gt;

&lt;p&gt;It seems like the main benefit of RAMDirectory for NRT is faster creation time (no need to create on-disk files, write them, then sync them), right?  Actually the sync is only needed if a new segments file will be written... but there still may be synchronous metadata operations for open-write-close of a file, depending on the FS?&lt;/p&gt;</comment>
                    <comment id="12703666" author="earwin" created="Tue, 28 Apr 2009 15:58:46 +0100"  >&lt;blockquote&gt;&lt;p&gt;what is this diff anyway?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s not a diff, I gave a sample of write-through ram directory Tim and Mike were speaking about.&lt;/p&gt;</comment>
                    <comment id="12703676" author="yseeley@gmail.com" created="Tue, 28 Apr 2009 16:26:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;That&apos;s not a diff&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, by &quot;diff&quot; I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS.&lt;/p&gt;</comment>
                    <comment id="12703683" author="mikemccand" created="Tue, 28 Apr 2009 16:39:36 +0100"  >&lt;blockquote&gt;&lt;p&gt;by &quot;diff&quot; I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s a good question &amp;#8211; I haven&apos;t tested it directly.  I&apos;d love to know too...&lt;/p&gt;

&lt;p&gt;For an NRT writer using RAMDir for recently flushed tiny segments (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt;), the gains are more about the speed of reading/writing many tiny files.  Probably we should try &lt;span class=&quot;error&quot;&gt;&amp;#91;somehow&amp;#93;&lt;/span&gt; to test this case, to see if &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt; is even a worthwhile optimization.&lt;/p&gt;</comment>
                    <comment id="12703684" author="earwin" created="Tue, 28 Apr 2009 16:40:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;Sorry, by &quot;diff&quot; I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ah! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; It exists. Ranked by speed, directories are FSDirectory (native/sys calls), MMapDirectory (native), RAMDirectory (chunked), MemCachedDirectory (raw array access). But for the purporses of searching a small amount of freshly-indexed docs this difference is miniscule at best, me thinks.&lt;/p&gt;</comment>
                    <comment id="12703850" author="jasonrutherglen" created="Tue, 28 Apr 2009 22:58:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;For an NRT writer using RAMDir for recently flushed tiny&lt;br/&gt;
segments (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt;), the gains are more about the speed of&lt;br/&gt;
reading/writing many tiny files. Probably we should try&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;somehow&amp;#93;&lt;/span&gt; to test this case, to see if &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt; is even a&lt;br/&gt;
worthwhile optimization.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True a test would be good, how many files per second would it&lt;br/&gt;
produce?&lt;/p&gt;

&lt;p&gt;When testing the realtime and the .del files (which are created&lt;br/&gt;
numerously before &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1516&quot; title=&quot;Integrate IndexReader with IndexWriter &quot;&gt;&lt;del&gt;LUCENE-1516&lt;/del&gt;&lt;/a&gt;) the slowdown was quite dramatic&lt;br/&gt;
as it&apos;s not a sequential write which means the disk head can&lt;br/&gt;
move each time. That coupled with merges going on which&lt;br/&gt;
completely ties up the IO I think it&apos;s hard for small file&lt;br/&gt;
writes to not slow down with a rapidly updating index. &lt;/p&gt;

&lt;p&gt;An index that is being updated rapidly presumably would be&lt;br/&gt;
performing merges more often to remove deletes. &lt;/p&gt;</comment>
                    <comment id="12703855" author="jasonrutherglen" created="Tue, 28 Apr 2009 23:12:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;One downside to this approach is it&apos;s brittle - whenever&lt;br/&gt;
we change file extensions you&apos;d have to &quot;know&quot; to fix this&lt;br/&gt;
Directory.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, I don&apos;t think we can expect the user to pass in the&lt;br/&gt;
correct FileSwitchDirectory (with the attendant file&lt;br/&gt;
extensions), we can make the particular implementation of&lt;br/&gt;
Directory we use to solve this problem internal to IW. Meaning&lt;br/&gt;
the writer can pass through the real directory calls to FSD, and&lt;br/&gt;
handle the RAMDir calls on it&apos;s own. &lt;/p&gt;</comment>
                    <comment id="12703935" author="jasonrutherglen" created="Wed, 29 Apr 2009 02:15:02 +0100"  >&lt;p&gt;Implementation of the FileSwitchDirectory. It&apos;s nice this works&lt;br/&gt;
so elegantly with the existing Lucene APIs.&lt;/p&gt;

&lt;p&gt;The test case makes sure the fdt and fdx files are written to&lt;br/&gt;
the fsdirectory based on the files extensions. I feel that&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt; will depend on this and I&apos;ll implement &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
with this patch in mind. I&apos;m not sure how we insure there are no&lt;br/&gt;
file name collisions between the real dir and FSD? Because IW is&lt;br/&gt;
managing the creation of the segment names I don&apos;t think we&lt;br/&gt;
need to worry about this.&lt;/p&gt;


</comment>
                    <comment id="12704049" author="mikemccand" created="Wed, 29 Apr 2009 10:40:15 +0100"  >&lt;p&gt;Patch looks good Jason!&lt;/p&gt;

&lt;p&gt;Can you add copyright header &amp;amp; CHANGES.txt entry, and remove some noise (eg TestIndexWriterReader.java)?&lt;/p&gt;

&lt;p&gt;Also: I think you should allow any Directory instance as primary/secondary?  (You&apos;re hardwiring to RAMDir/FSDir now).  I realize NRT&apos;s use of this will be a RAMDir/FSDir, but I think this dir can be generic.  Can you also implement listAll()?&lt;/p&gt;

&lt;p&gt;Finally: maybe for the &quot;tee&quot; (IndexOutput &quot;writes through&quot; two Dirs, suggested above) functionality, we should create a different Directory impl?&lt;/p&gt;</comment>
                    <comment id="12704439" author="jasonrutherglen" created="Thu, 30 Apr 2009 02:53:04 +0100"  >&lt;ul&gt;
	&lt;li&gt;Copyright added&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;CHANGES.txt added&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Cleaned up&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;RAMDir specific stuff removed from FSD&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;maybe for the &quot;tee&quot; (IndexOutput &quot;writes through&quot; two&lt;br/&gt;
Dirs, suggested above) functionality, we should create a&lt;br/&gt;
different Directory impl?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think a different directory impl makes sense, the&lt;br/&gt;
functionality of FileSwitchDirectory is fairly specific.&lt;/p&gt;</comment>
                    <comment id="12704975" author="mikemccand" created="Fri, 1 May 2009 13:32:50 +0100"  >&lt;p&gt;New patch attached w/ minor fixes: added more detail in CHANGES entry; renamed &quot;real&quot; and &quot;other&quot; dir to &quot;primary&quot; and &quot;secondary&quot; dir; tweaked javadocs.  I plan to commit later today.&lt;/p&gt;

&lt;p&gt;Once this is in, Jason can you update &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt; to use this class?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12705150" author="mikemccand" created="Fri, 1 May 2009 23:12:50 +0100"  >&lt;p&gt;Thanks Jason!&lt;/p&gt;</comment>
                    <comment id="12705483" author="jasonrutherglen" created="Mon, 4 May 2009 06:12:26 +0100"  >&lt;p&gt;Added getter methods to FSD for the underlying directories&lt;/p&gt;</comment>
                    <comment id="12705548" author="mikemccand" created="Mon, 4 May 2009 11:17:01 +0100"  >&lt;p&gt;OK thanks Jason, I just committed that (w/ small change to listAll to directly allocate the String[]).&lt;/p&gt;</comment>
                    <comment id="12707070" author="jasonrutherglen" created="Thu, 7 May 2009 21:00:48 +0100"  >&lt;p&gt;Added fileExists checking in getDirectory before asking&lt;br/&gt;
regarding the extension. This is useful when IndexFileDeleter&lt;br/&gt;
uses FSD as a way to combine directories in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1313&quot; title=&quot;Near Realtime Search (using a built in RAMDirectory)&quot;&gt;&lt;del&gt;LUCENE-1313&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12707284" author="mikemccand" created="Fri, 8 May 2009 10:10:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;Added fileExists checking in getDirectory&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Jason, why is this needed?  Why is the mapping based on extension insufficient?&lt;/p&gt;</comment>
                    <comment id="12707403" author="jasonrutherglen" created="Fri, 8 May 2009 17:24:32 +0100"  >&lt;p&gt;One example of the use case is when IndexFileDeleter needs to&lt;br/&gt;
access the directory&apos;s files as is without extension&lt;br/&gt;
interpretation. A .fdt file that was written directly to the&lt;br/&gt;
primary directory (not through FSD) would fit this case. When&lt;br/&gt;
IFD tries to access the .fdt file (using the current code) FSD&lt;br/&gt;
says it&apos;s not there (because it thinks it&apos;s in the secondary&lt;br/&gt;
dir). &lt;/p&gt;

&lt;p&gt;Maybe we need a different type of FSD for this case?&lt;/p&gt;</comment>
                    <comment id="12707438" author="mikemccand" created="Fri, 8 May 2009 18:35:35 +0100"  >&lt;p&gt;I think if one is directly writing a file to the primary directory (not through FSD) then one should/could also delete directly from that directory?  I don&apos;t think we should be putting the magic inside FSD.&lt;/p&gt;</comment>
                    <comment id="12707474" author="jasonrutherglen" created="Fri, 8 May 2009 20:06:48 +0100"  >&lt;p&gt;Well, it was implemented this way to accommodate not passing two&lt;br/&gt;
directories around (such as to IFD). So that methods such as&lt;br/&gt;
Dir.list would work properly. It seems that we want an&lt;br/&gt;
alternative to FSD that only combines directories?&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12398783">LUCENE-1313</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12407568" name="LUCENE-1618.patch" size="711" author="jasonrutherglen" created="Thu, 7 May 2009 21:00:48 +0100" />
                    <attachment id="12407128" name="LUCENE-1618.patch" size="1088" author="jasonrutherglen" created="Mon, 4 May 2009 06:12:26 +0100" />
                    <attachment id="12407003" name="LUCENE-1618.patch" size="8570" author="mikemccand" created="Fri, 1 May 2009 13:32:50 +0100" />
                    <attachment id="12406864" name="LUCENE-1618.patch" size="8035" author="jasonrutherglen" created="Thu, 30 Apr 2009 02:53:03 +0100" />
                    <attachment id="12406724" name="LUCENE-1618.patch" size="5803" author="jasonrutherglen" created="Wed, 29 Apr 2009 02:15:02 +0100" />
                    <attachment id="12406644" name="MemoryCachedDirectory.java" size="7630" author="earwin" created="Tue, 28 Apr 2009 15:37:03 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 27 Apr 2009 20:53:37 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12139</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26110</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>