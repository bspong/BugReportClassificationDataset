<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2126/LUCENE-2126.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2126] Split up IndexInput and IndexOutput into DataInput and DataOutput</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2126</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I&apos;d like to introduce the two new classes DataInput and DataOutput&lt;br/&gt;
that contain all methods from IndexInput and IndexOutput that actually&lt;br/&gt;
decode or encode data, such as readByte()/writeByte(),&lt;br/&gt;
readVInt()/writeVInt().&lt;/p&gt;

&lt;p&gt;Methods like getFilePointer(), seek(), close(), etc., which are not&lt;br/&gt;
related to data encoding, but to files as input/output source stay in&lt;br/&gt;
IndexInput/IndexOutput.&lt;/p&gt;

&lt;p&gt;This patch also changes ByteSliceReader/ByteSliceWriter to extend&lt;br/&gt;
DataInput/DataOutput. Previously ByteSliceReader implemented the&lt;br/&gt;
methods that stay in IndexInput by throwing RuntimeExceptions.&lt;/p&gt;

&lt;p&gt;See also &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2125&quot; title=&quot;Ability to store and retrieve attributes in the inverted index&quot;&gt;LUCENE-2125&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12442611">LUCENE-2126</key>
            <summary>Split up IndexInput and IndexOutput into DataInput and DataOutput</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="michaelbusch">Michael Busch</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Dec 2009 09:20:16 +0000</created>
                <updated>Fri, 10 May 2013 11:44:09 +0100</updated>
                    <resolved>Wed, 31 Mar 2010 00:43:29 +0100</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12786830" author="michaelbusch" created="Mon, 7 Dec 2009 09:26:14 +0000"  >&lt;p&gt;Btw: Please let me know if you prefer other class names. The java.io package also has interfaces with the same names DataInput and DataOutput, maybe that&apos;s confusing?&lt;/p&gt;</comment>
                    <comment id="12786832" author="mikemccand" created="Mon, 7 Dec 2009 09:27:21 +0000"  >&lt;p&gt;This sounds great!  If/as we move to the intblock codecs, I wonder if we could put bulk int[] block reading/writing (like pfordelta) into DataInput/Output.&lt;/p&gt;</comment>
                    <comment id="12786833" author="michaelbusch" created="Mon, 7 Dec 2009 09:31:49 +0000"  >&lt;p&gt;+1!&lt;/p&gt;</comment>
                    <comment id="12786959" author="creamyg" created="Mon, 7 Dec 2009 15:54:52 +0000"  >&lt;p&gt;FWIW, this approach is sort of the inverse of where we&apos;ve gone with Lucy.  &lt;/p&gt;

&lt;p&gt;In Lucy, low-level unbuffered IO operations are abstracted into FileHandle,&lt;br/&gt;
which is either a thin wrapper around a POSIX file descriptor (e.g.&lt;br/&gt;
FSFileHandle under unixen), or a simulation thereof (e.g. FSFileHandle under&lt;br/&gt;
Windows, RAMFileHandle).  &lt;/p&gt;

&lt;p&gt;Then there are InStream and OutStream, which would be analogous to DataInput&lt;br/&gt;
and DataOutput, in that they have all the Lucy-specific encoding/decoding&lt;br/&gt;
methods.  However, instead of requiring that subclasses implement the&lt;br/&gt;
low-level IO operations, InStream &quot;has a&quot; FileHandle and OutStream &quot;has a&quot;&lt;br/&gt;
FileHandle.&lt;/p&gt;

&lt;p&gt;The advantage of breaking out FileHandle as a separate class is that if e.g.&lt;br/&gt;
you extend InStream by adding on PFOR encoding, you automatically get the&lt;br/&gt;
benefit for all IO implementations.  I think that under the&lt;br/&gt;
DataInput/DataOutput model, that extension technique will only be available to&lt;br/&gt;
core devs of Lucene, no?&lt;/p&gt;

&lt;p&gt;More info: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCY-58&quot; title=&quot;FileHandle&quot;&gt;&lt;del&gt;LUCY-58&lt;/del&gt;&lt;/a&gt; FileHandle&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCY-63&quot; title=&quot;InStream and OutStream&quot;&gt;&lt;del&gt;LUCY-63&lt;/del&gt;&lt;/a&gt; InStream and OutStream&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12787180" author="michaelbusch" created="Mon, 7 Dec 2009 22:39:03 +0000"  >&lt;p&gt;Thanks for the input, Marvin.&lt;/p&gt;

&lt;p&gt;I can see the advantages of what you&apos;re proposing. With this patch it&apos;d only be possible to benefit in all IndexInput/IndexOutput implementations from a new encoding/decoding method if you add it to the DataInput/Output class directly, which is only possible by changing the classes in Lucene, not from outside.&lt;/p&gt;

&lt;p&gt;The problem here, as so often, is backwards-compat. This patch here has no problems in that regard, as we just move the methods into new superclasses. If we&apos;d want to implement what Lucy is doing, we&apos;d have to deprecate all encoding/decoding methods in IndexInput/Output and add them to DataInput/Output. Then a DataInput would not be the superclass of IndexInput, but rather &lt;b&gt;have&lt;/b&gt; an IndexInput. All users who call any of the encoding/decoding methods directly on IndexInput/Output would have to change their code to use the new classes. &lt;/p&gt;

&lt;p&gt;So I can certainly see the benefits, the question now is if they&apos;re at the moment important enough to justify dealing with the backwards-compat hassle?&lt;/p&gt;</comment>
                    <comment id="12787876" author="creamyg" created="Wed, 9 Dec 2009 02:10:01 +0000"  >&lt;p&gt;I spent a long time today trying to understand why DataInput and &lt;br/&gt;
DataOutput are justified so that I could formulate an intelligent reply, &lt;br/&gt;
but I had to give up. :\ Please carry on.&lt;/p&gt;</comment>
                    <comment id="12788001" author="michaelbusch" created="Wed, 9 Dec 2009 09:47:18 +0000"  >&lt;p&gt;The main reason why I&apos;d like to separate DataInput/Output from IndexInput/Output now is &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2125&quot; title=&quot;Ability to store and retrieve attributes in the inverted index&quot;&gt;LUCENE-2125&lt;/a&gt;. Users should be able to implement methods that serialize/deserialize attributes into/from a postinglist. These methods should only be able to call the read/write methods (which this issue moves to DataInput/Output), but not methods like close(), seek() etc.. &lt;/p&gt;

&lt;p&gt;Thanks for spending time reviewing this and giving feedback from Lucy land, Marvin!&lt;br/&gt;
I think I will go ahead and commit this, and once we see a need to allow users to extend DataInput/Output outside of Lucene we can go ahead and make the additional changes that are mentioned in your in my comments here.&lt;/p&gt;

&lt;p&gt;So I will commit this tomorrow if nobody objects.&lt;/p&gt;</comment>
                    <comment id="12788098" author="creamyg" created="Wed, 9 Dec 2009 14:08:24 +0000"  >&lt;p&gt;&amp;gt; These methods should only be able to call the read/write methods (which this&lt;br/&gt;
&amp;gt; issue moves to DataInput/Output), but not methods like close(), seek() etc..&lt;/p&gt;

&lt;p&gt;Ah, so that&apos;s what it is.  &lt;/p&gt;

&lt;p&gt;In that case, let me vote my (non-binding) -1.  I don&apos;t believe that the&lt;br/&gt;
enforcement of such a restriction justifies the complexity cost of adding a&lt;br/&gt;
new class to the public API.&lt;/p&gt;

&lt;p&gt;First, adding yet another class to the hierarchy steepens the learning curve&lt;br/&gt;
for users and contributors.  If you aren&apos;t in the rarefied echelon of&lt;br/&gt;
exceptional brilliance occupied by people named Michael who work for IBM &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;,&lt;br/&gt;
the gradual accumulation of complexity in the Lucene code base matters.  Inch&lt;br/&gt;
by inch, things move out of reach.&lt;/p&gt;

&lt;p&gt;Second, changing things now for what seems to me like a minor reason makes it&lt;br/&gt;
harder to refactor the class hierarchy in the future when other, more&lt;br/&gt;
important reasons are inevitably discovered.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2125&quot; title=&quot;Ability to store and retrieve attributes in the inverted index&quot;&gt;LUCENE-2125&lt;/a&gt;, I recommend two possible options. &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Do nothing and assume that the sort of advanced user who writes a posting&lt;br/&gt;
    codec won&apos;t do something incredibly stupid like call indexInput.close().&lt;/li&gt;
	&lt;li&gt;Add a note to the docs for writing posting codecs indicating which sort of&lt;br/&gt;
    of IO methods you ought not to call.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&amp;gt; once we see a need to allow users to extend DataInput/Output outside of&lt;br/&gt;
&amp;gt; Lucene we can go ahead and make the additional changes that are mentioned in&lt;br/&gt;
&amp;gt; your in my comments here.&lt;/p&gt;

&lt;p&gt;In Lucy, there are three tiers of IO usage:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;For low-level IO, use FileHandle.&lt;/li&gt;
	&lt;li&gt;For most applications, use InStream&apos;s encoder/decoder methods.&lt;/li&gt;
	&lt;li&gt;For performance-critical inner-loop material (e.g. posting decoders,&lt;br/&gt;
      SortCollector), access the raw memory-mapped IO buffer using&lt;br/&gt;
      InStream_Buf()/InStream_Advance_Buf() and use static inline functions &lt;br/&gt;
      such as NumUtil_decode_c32 (which does no bounds checking) from&lt;br/&gt;
      Lucy::Util::NumberUtils.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;While you can extend InStream to add a codec, that&apos;s not generally the best&lt;br/&gt;
way to go about it, because adding a method to InStream requires that all of&lt;br/&gt;
your users both use your InStream class and use a subclassed Folder which&lt;br/&gt;
overrides the Folder_Open_In() factory method (analogous to &lt;br/&gt;
Directory.openInput()).  Better is to use the extension point provided by&lt;br/&gt;
InStream_Buf()/InStream_Advance_Buf() and write a utility function which&lt;br/&gt;
accepts an InStream as an argument.&lt;/p&gt;

&lt;p&gt;I don&apos;t expect and am not advocating that Lucene adopt the same IO hierarchy&lt;br/&gt;
as Lucy, but I wanted to provide an example of other reasons why you might&lt;br/&gt;
change things.  (What I&apos;d really like to see is for Lucene to come up with&lt;br/&gt;
something &lt;b&gt;better&lt;/b&gt; than the Lucy IO hierarchy.)  &lt;/p&gt;

&lt;p&gt;One of the reasons Lucene has so many backwards compatibility headaches is&lt;br/&gt;
because the public APIs are so extensive and thus constitute such an elaborate&lt;br/&gt;
set of backwards compatibility promises.  IMO, DataInput and DataOutput do &lt;br/&gt;
not offer sufficient benefit to compensate for the increased intricacy they add &lt;br/&gt;
to that backwards compatibility contract.&lt;/p&gt;</comment>
                    <comment id="12789834" author="michaelbusch" created="Sun, 13 Dec 2009 01:20:52 +0000"  >&lt;p&gt;I disagree with you here: introducing DataInput/Output makes IMO the API actually easier for the &quot;normal&quot; user to understand.&lt;/p&gt;

&lt;p&gt;I would think that most users don&apos;t implement IndexInput/Output extensions, but simply use the out-of-the-box Directory implementations, which provide IndexInput/Output impls. Also, most users probably don&apos;t even call the IndexInput/Output APIs directly. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do nothing and assume that the sort of advanced user who writes a posting&lt;br/&gt;
codec won&apos;t do something incredibly stupid like call indexInput.close().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Writing a posting code is much more advanced compared to using 2125&apos;s features. Ideally, a user who simply wants to store some specific information in the posting list, such as a boost, a part-of-speech identifier, another VInt, etc. should with 2125 only have to implement a new attribute including the serialize()/deserialize() methods. People who want to do that don&apos;t need to know anything about Lucene&apos;s API layer. They only need to know the APIs that DataInput/Output provide and will not get confused with methods like seek() or close(). For the standard user who only wants to write such an attribute it should not matter how Lucene&apos;s IO structure looks like - so even if we make changes that go into Lucy&apos;s direction in the future (IndexInput/Output owning a filehandle vs. the need to extend them) the serialize()/deserialize() methods of attribute would still work with DataInput/Output.&lt;/p&gt;

&lt;p&gt;I bet that a lot of people who used the payload feature before took a ByteArrayOutputStream together with DataOutputStream (which implements Java&apos;s DataOutput) to populate the payload byte array. With 2125 Lucene will provide an API that is similar to use, but more efficient as it remove the byte[] array indirection and overhead.&lt;/p&gt;

&lt;p&gt;I&apos;m still +1 for this change. Others?&lt;/p&gt;</comment>
                    <comment id="12789850" author="shaie" created="Sun, 13 Dec 2009 06:50:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I bet that a lot of people who used the payload feature before took a ByteArrayOutputStream together with DataOutputStream &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I actually use ByteBuffer which has similar methods. That&apos;s good though if you know the size of the needed byte[] up front. Otherwise, you either code the extension of growing the ByteBuffer, or use DataOutputStream(ByteArrayOutputStream).&lt;/p&gt;

&lt;p&gt;Michael, I read through the patch (briefly though), and I was confused by the names DataInput/Ouput. Initially, when I read this issue, I thought you mean that IndexInput/Output should implement Java&apos;s DataInput/Output, but now I see you created two new such classes. So first, can we perhaps name them otherwise, like LuceneInput/Output or something similar, to not confuse w/ Java&apos;s? Second, why not have them implement Java&apos;s DataInput/Output, and add on top of them additional methods, like readVInt(), readVLong() etc.? You can keep the abstracts LuceneInput/Output to provide the common implementation.&lt;/p&gt;

&lt;p&gt;BTW, a small optimization that I think can be made in the classes is to introduce an internal ByteBuffer of size 8. In the methods like readInt(), you can read 4 bytes into the buffer, calling readBytes(buf.array(), 0, 4), and then buf.getInt(). That will save 4 calls to readByte(). Same will go for long, and the write variants. Doesn&apos;t work though w/ readVInt(), because we need to read 1-byte at-a-time to decode. Maybe if the use of these is usually through BufferedIndexInput/Output this does not matter much, but it will still save 2/4 method calls.&lt;/p&gt;</comment>
                    <comment id="12789895" author="creamyg" created="Sun, 13 Dec 2009 14:19:02 +0000"  >&lt;p&gt;&amp;gt; I disagree with you here: introducing DataInput/Output makes IMO the API&lt;br/&gt;
&amp;gt; actually easier for the &quot;normal&quot; user to understand.&lt;br/&gt;
&amp;gt; &lt;br/&gt;
&amp;gt; I would think that most users don&apos;t implement IndexInput/Output extensions,&lt;br/&gt;
&amp;gt; but simply use the out-of-the-box Directory implementations, which provide&lt;br/&gt;
&amp;gt; IndexInput/Output impls. Also, most users probably don&apos;t even call the&lt;br/&gt;
&amp;gt; IndexInput/Output APIs directly. &lt;/p&gt;

&lt;p&gt;I agree with everything you say in the second paragraph, but I don&apos;t see how&lt;br/&gt;
any of that supports the assertion you make in the first paragraph.&lt;/p&gt;

&lt;p&gt;Lucene&apos;s file system has a directory class, named &quot;Directory&quot;, and a pair of&lt;br/&gt;
classes which representing files, named &quot;IndexInput&quot; and &quot;IndexOutput&quot;.&lt;br/&gt;
Directories and files.  Easy to understand.&lt;/p&gt;

&lt;p&gt;All common IO systems have entities which represent data streaming to/from a&lt;br/&gt;
file.  They might be called &quot;file handles&quot;, &quot;file descriptors&quot;, &quot;readers&quot; and &lt;br/&gt;
&quot;writers&quot;, &quot;streams&quot;, or whatever, but they&apos;re all basically the same thing.&lt;/p&gt;

&lt;p&gt;What this patch does is fragment the pair of classes that representing file&lt;br/&gt;
IO... why?&lt;/p&gt;

&lt;p&gt;What does a &quot;normal&quot; user do with a file?&lt;/p&gt;

&lt;p&gt;   Step 1: Open the file.&lt;br/&gt;
   Step 2: Write data to the file.&lt;br/&gt;
   Step 3: Close the file.&lt;/p&gt;

&lt;p&gt;Then, later...&lt;/p&gt;

&lt;p&gt;   Step 1: Open the file.&lt;br/&gt;
   Step 2: Read data from the file.&lt;br/&gt;
   Step 3: Close the file.&lt;/p&gt;

&lt;p&gt;You&apos;re saying that Lucene&apos;s file abstraction is easier to understand if you&lt;br/&gt;
break that up?&lt;/p&gt;

&lt;p&gt;I grokked your first rationale &amp;#8211; that you don&apos;t want people to be able to&lt;br/&gt;
call close() on an IndexInput that they&apos;re essentially borrowing for a bit.&lt;br/&gt;
OK, I think it&apos;s overkill to create an entire class to thwart something nobody&lt;br/&gt;
was going to do anyway, but at least I understand why you might want to do&lt;br/&gt;
that.&lt;/p&gt;

&lt;p&gt;But the idea that this strange fragmentation of the IO hierarchy makes things&lt;br/&gt;
&lt;b&gt;easier&lt;/b&gt; &amp;#8211; I don&apos;t get it at all.  And I certainly don&apos;t see how it&apos;s such an &lt;br/&gt;
improvement over what exists now that it justifies a change to the public API.&lt;/p&gt;</comment>
                    <comment id="12789901" author="markrmiller@gmail.com" created="Sun, 13 Dec 2009 15:18:35 +0000"  >&lt;p&gt;&amp;gt; I disagree with you here: introducing DataInput/Output makes IMO the API&lt;br/&gt;
&amp;gt; actually easier for the &quot;normal&quot; user to understand.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt; I agree with everything you say in the second paragraph, but I don&apos;t see how&lt;br/&gt;
&amp;gt;&amp;gt; any of that supports the assertion you make in the first paragraph.&lt;/p&gt;

&lt;p&gt;Presumably, because the &quot;normal&quot; user won&apos;t touch/see the IndexInput/Output classes, but more likely may deal with DataInput/Output - and those classes&lt;br/&gt;
being limited to what actually makes sense to use for them (only exposing methods they should use) - thats easier for them.&lt;/p&gt;

&lt;p&gt;I was leaning towards Marvin&apos;s arguments - it really seems that documentation should be enough to steer users against doing something stupid - there is no&lt;br/&gt;
doubt that writing attributes into the posting list is a fairly advanced operation (though more &quot;normal&quot; than using IndexInput/Output). On the other hand though, &lt;br/&gt;
I&apos;m not really sold on the downsides longer term either. The complexity argument is a bit over blown. If you understand anything down to the level of these classes, &lt;br/&gt;
this is a ridiculously simple change. The backcompat argument is not very persuasive either - not only does it look like a slim chance of any future issues - at this &lt;br/&gt;
level we are fairly loose about back compat when something comes up. I think advanced users have already realized, the more you dig into Lucene&apos;s guts, the &lt;br/&gt;
more likely you won&apos;t be able to count on jar drop in. Thats just the way things have gone. I don&apos;t see a looming concrete issue myself anyway. And if there is a&lt;br/&gt;
hidden one, I don&apos;t think anyone is going to get in a ruffle about it.&lt;/p&gt;

&lt;p&gt;So net/net, I&apos;m +1. Seems worth it to me to be able to give a user 2125 the correct API.&lt;/p&gt;

&lt;p&gt;I could go either way on the name change. Not a fan of LuceneInput/Output though.&lt;/p&gt;</comment>
                    <comment id="12789944" author="michaelbusch" created="Sun, 13 Dec 2009 21:02:09 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What does a &quot;normal&quot; user do with a file?&lt;/p&gt;

&lt;p&gt;   Step 1: Open the file.&lt;br/&gt;
   Step 2: Write data to the file.&lt;br/&gt;
   Step 3: Close the file.&lt;/p&gt;

&lt;p&gt;Then, later...&lt;/p&gt;

&lt;p&gt;   Step 1: Open the file.&lt;br/&gt;
   Step 2: Read data from the file.&lt;br/&gt;
   Step 3: Close the file.&lt;/p&gt;

&lt;p&gt;You&apos;re saying that Lucene&apos;s file abstraction is easier to understand if you&lt;br/&gt;
break that up?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, I&apos;m saying &quot;normal&quot; users do not work directly with files, so they won&apos;t do any of your steps above. They don&apos;t need to know those I/O related classes (except Directory).&lt;/p&gt;

&lt;p&gt;DataInput/Output is about encoding/decoding of data, which is all a user of 2125 needs to worry about. The user doesn&apos;t have to know that the attribute is first serialized into byte slices in TermsHashPerField and then written into the file(s) the actual codec defines.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But the idea that this strange fragmentation of the IO hierarchy makes things&lt;br/&gt;
easier - I don&apos;t get it at all. And I certainly don&apos;t see how it&apos;s such an&lt;br/&gt;
improvement over what exists now that it justifies a change to the public API.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It makes it easier for a 2125 user. It does not make it harder for someone &quot;advanced&quot; who&apos;s dealing with IndexInput/Output already.&lt;/p&gt;

&lt;p&gt;It makes it also cleaner - look e.g. at ByteSliceReader/Writer: those classes just currently throw RuntimeExceptions in the methods that this patch leaves in IndexInput/Output. Why? Because they&apos;re not dealing with file I/O, but with data (de)serialization.&lt;/p&gt;</comment>
                    <comment id="12789946" author="michaelbusch" created="Sun, 13 Dec 2009 21:19:21 +0000"  >&lt;blockquote&gt;
&lt;p&gt;So first, can we perhaps name them otherwise, like LuceneInput/Output or something similar, to not confuse w/ Java&apos;s?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, I was a bit concerned about confusion first too. But I&apos;m, like Mark, not really liking LuceneInput/Output. I&apos;d personally be ok with keeping DataInput/Output. But maybe we can come up with something better? Man, naming is always so hard... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Second, why not have them implement Java&apos;s DataInput/Output, and add on top of them additional methods, like readVInt(), readVLong() etc.?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I considered that, but Java&apos;s interfaces dictate what string encoding to use:&lt;br/&gt;
(From java.io.DataInput&apos;s javadocs)&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Implementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;E.g. DataInput defines readChar(), which we&apos;d have to implement. But in IndexInput we deprecated readChars(), because we don&apos;t want to use modified UTF-8 anymore.&lt;/p&gt;</comment>
                    <comment id="12795964" author="michaelbusch" created="Sun, 3 Jan 2010 10:42:32 +0000"  >&lt;p&gt;There has been silence here, so I hope everyone is ok with this change now?&lt;/p&gt;

&lt;p&gt;I&apos;ll commit this in a day or two if nobody objects!&lt;/p&gt;</comment>
                    <comment id="12837979" author="michaelbusch" created="Wed, 24 Feb 2010 19:49:04 +0000"  >&lt;p&gt;Updated patch to trunk.&lt;/p&gt;

&lt;p&gt;I&apos;ll have to make a change to the backwards-tests too, because moving the copyBytes() method from IndexOutput to DataOutput and changing its parameter from IndexInput to DataInput breaks drop-in compatibility. &lt;/p&gt;</comment>
                    <comment id="12851347" author="mikemccand" created="Tue, 30 Mar 2010 11:52:30 +0100"  >&lt;p&gt;Michael will this land on flex or on trunk?  Is it ready?  I&apos;m trying to wrapup flex &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12851451" author="michaelbusch" created="Tue, 30 Mar 2010 17:11:01 +0100"  >&lt;p&gt;I&apos;ll try to commit tonight to flex, but it&apos;ll probably be tomorrow (I think I have to update the patch, cause there were some changes to IndexInput/Output).  If you want to merge flex into trunk sooner I can also just commit this afterwards to trunk.&lt;/p&gt;</comment>
                    <comment id="12851658" author="michaelbusch" created="Wed, 31 Mar 2010 00:43:29 +0100"  >&lt;p&gt;Committed revision 929340.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12436899" name="lucene-2126.patch" size="31494" author="michaelbusch" created="Wed, 24 Feb 2010 19:49:04 +0000" />
                    <attachment id="12427149" name="lucene-2126.patch" size="30395" author="michaelbusch" created="Mon, 7 Dec 2009 09:26:14 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 7 Dec 2009 09:27:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11654</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25599</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>