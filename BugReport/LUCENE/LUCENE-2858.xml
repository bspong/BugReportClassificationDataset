<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:24:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2858/LUCENE-2858.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2858] Separate SegmentReaders (and other atomic readers) from composite IndexReaders</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2858</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;With current trunk, whenever you open an IndexReader on a directory you get back a DirectoryReader which is a composite reader. The interface of IndexReader has now lots of methods that simply throw UOE (in fact more than 50% of all methods that are commonly used ones are unuseable now). This confuses users and makes the API hard to understand.&lt;/p&gt;

&lt;p&gt;This issue should split &quot;atomic readers&quot; from &quot;reader collections&quot; with a separate API. After that, you are no longer able, to get TermsEnum without wrapping from those composite readers. We currently have helper classes for wrapping (SlowMultiReaderWrapper - please rename, the name is really ugly; or Multi*), those should be retrofitted to implement the correct classes (SlowMultiReaderWrapper would be an atomic reader but takes a composite reader as ctor param, maybe it could also simply take a List&amp;lt;AtomicReader&amp;gt;). In my opinion, maybe composite readers could implement some collection APIs and also have the ReaderUtil method directly built in (possibly as a &quot;view&quot; in the util.Collection sense). In general composite readers do not really need to look like the previous IndexReaders, they could simply be a &quot;collection&quot; of SegmentReaders with some functionality like reopen.&lt;/p&gt;

&lt;p&gt;On the other side, atomic readers do not need reopen logic anymore? When a segment changes, you need a new atomic reader? - maybe because of deletions thats not the best idea, but we should investigate. Maybe make the whole reopen logic simplier to use (ast least on the collection reader level).&lt;/p&gt;

&lt;p&gt;We should decide about good names, i have no preference at the moment.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12495275">LUCENE-2858</key>
            <summary>Separate SegmentReaders (and other atomic readers) from composite IndexReaders</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Jan 2011 17:56:42 +0000</created>
                <updated>Fri, 10 May 2013 11:43:30 +0100</updated>
                    <resolved>Mon, 30 Jan 2012 23:38:42 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                                                  <comments>
                    <comment id="12980215" author="mikemccand" created="Tue, 11 Jan 2011 18:00:34 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;We very much need this now &amp;#8211; it should be strongly (statically) typed, whether you are using an AtomicIndexReader vs CompositeIndexReader.&lt;/p&gt;

&lt;p&gt;And I agree CompositeIndexReader should feel more like a Collection than what IR is today.&lt;/p&gt;</comment>
                    <comment id="12980216" author="rcmuir" created="Tue, 11 Jan 2011 18:02:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;(SlowMultiReaderWrapper - please rename, the name is really ugly; or Multi*)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My problem with Multi* is that this makes things sound cool and powerful.&lt;br/&gt;
If they are really slow transition mechanisms, I prefer Slow* as it will actually discourage their use.&lt;/p&gt;

&lt;p&gt;But I agree with this issue in general and it would be great for it to be cleaned up.&lt;/p&gt;</comment>
                    <comment id="12980388" author="earwin" created="Tue, 11 Jan 2011 22:30:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;On the other side, atomic readers do not need reopen logic anymore? When a segment changes, you need a new atomic reader?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is a freakload of places that &quot;upgrade&quot; SegmentReader in various ways, with deletions guilty only for the part of the cases. I&apos;ll try getting back to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2355&quot; title=&quot;Refactor Directory/Multi/SegmentReader creation/reopening/cloning/closing&quot;&gt;LUCENE-2355&lt;/a&gt; at the end of the week.&lt;/p&gt;</comment>
                    <comment id="12982057" author="thetaphi" created="Sat, 15 Jan 2011 10:26:14 +0000"  >&lt;p&gt;Any comments about removing write access from IndexReaders? I think setNorms() will be removed soon, but how about the others like deleteDocument()? I would propose to also make all IndexReaders simply &lt;b&gt;readers&lt;/b&gt; not writers?&lt;/p&gt;</comment>
                    <comment id="12982102" author="rcmuir" created="Sat, 15 Jan 2011 14:30:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think setNorms() will be removed soon&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why do you think this?&lt;/p&gt;

&lt;p&gt;On the norms cleanup issue, i only removed setNorm(float), because its completely useless.&lt;br/&gt;
All it did was call Similarity.getDefault().encode(float) + setNorm(byte).&lt;/p&gt;</comment>
                    <comment id="12982107" author="thetaphi" created="Sat, 15 Jan 2011 14:50:22 +0000"  >&lt;p&gt;I was talking about replacing norms by CSF, maybe It&apos;s just not soon.&lt;/p&gt;</comment>
                    <comment id="12982115" author="rcmuir" created="Sat, 15 Jan 2011 15:18:05 +0000"  >&lt;p&gt;Ah, ok. sorry i was confused. Still, i think we would need this method (somewhere) even &lt;br/&gt;
with CSF, so that people can change the norms and they instantly take effect for searches.&lt;/p&gt;</comment>
                    <comment id="12982126" author="earwin" created="Sat, 15 Jan 2011 16:34:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Any comments about removing write access from IndexReaders? I think setNorms() will be removed soon, but how about the others like deleteDocument()? I would propose to also make all IndexReaders simply readers not writers? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Voting with all my extremities - yes!!&lt;/p&gt;</comment>
                    <comment id="12982132" author="earwin" created="Sat, 15 Jan 2011 16:49:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Still, i think we would need this method (somewhere) even with CSF, so that people can change the norms and they instantly take effect for searches.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This still puzzles me. I can strain my imagination, and get people who just need to change norms without reindexing.&lt;br/&gt;
But doing this and &lt;b&gt;requiring&lt;/b&gt; instant turnaround? Kid me not &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12982134" author="mikemccand" created="Sat, 15 Jan 2011 16:57:44 +0000"  >&lt;p&gt;I don&apos;t think we should remove setNorm/deleteDocuments, even from the composite reader class.&lt;/p&gt;

&lt;p&gt;Deleting docs from IR has advantages over deleting from IW: the change is &quot;live&quot; to any searches running on that IR; you get an immediate count of how many docs were deleted; you can delete by docID.&lt;/p&gt;

&lt;p&gt;setNorm is also useful in that it can be use to boost docs (globally), live, if that reader is being used for searching.  When/if we cutover norms -&amp;gt; doc values we&apos;ll have to decide what to do about setNorm...&lt;/p&gt;

&lt;p&gt;At a higher level, for this &quot;strong typing of atomic vs composite IRs&quot;, we shouldn&apos;t try to change functionality &amp;#8211; let&apos;s just do a rote refactoring, such that methods that now throw UOE on IR are moved to the atomic reader only.&lt;/p&gt;

&lt;p&gt;Separately we can think about whether existing functions should be dropped...&lt;/p&gt;</comment>
                    <comment id="12982152" author="creamyg" created="Sat, 15 Jan 2011 19:07:30 +0000"  >&lt;p&gt;&amp;gt; Deleting docs from IR has advantages over deleting from IW: the change is&lt;br/&gt;
&amp;gt; &quot;live&quot; to any searches running on that IR; you get an immediate count of how&lt;br/&gt;
&amp;gt; many docs were deleted; you can delete by docID.&lt;/p&gt;

&lt;p&gt;Alternate plan:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Move responsibility for deletions to a pluggable DeletionsReader&lt;br/&gt;
    subcomponent of SegmentReader.&lt;/li&gt;
	&lt;li&gt;Have the default DeletionsReader be read-only.&lt;/li&gt;
	&lt;li&gt;People who need the esoteric functionality described above can use a&lt;br/&gt;
    subclass of DeletionsReader.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12982166" author="earwin" created="Sat, 15 Jan 2011 20:52:04 +0000"  >&lt;p&gt;APIs have to be there still. All that commity, segment-deletery, mutabley stuff (that spans both atomic and composite readers).&lt;br/&gt;
So, while your plan is viable, it won&apos;t remove that much cruft.&lt;/p&gt;</comment>
                    <comment id="13169760" author="thetaphi" created="Wed, 14 Dec 2011 22:35:13 +0000"  >&lt;p&gt;I try to do this now, Robert will help.&lt;/p&gt;

&lt;p&gt;Most crap is removed form IndexReader, so this should be easy now. We should use AtomicIndexReader and CompositeIndexReader.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;IndexReader base class only contains the methods that can actually be implemented in &lt;b&gt;every&lt;/b&gt; reader.&lt;/li&gt;
	&lt;li&gt;The current BaseMultiReader (pkg-private) would be the later CompositeIndexReader&lt;/li&gt;
	&lt;li&gt;AtomicIndexReader is also abstract, SegmentReader and SlowMultiReaderWrapper would implement it.&lt;/li&gt;
	&lt;li&gt;The static open methods should maybe in a separate class or the abstract IndexReader base with the limited API, but they would return CompositeIndexReader&lt;/li&gt;
	&lt;li&gt;FilterIndexReader could be split in two classes, but a FilterMultiReader makes no sense &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; FilterIndexReader will be FilterAtomicIndexReader (also the superclass of SlowMultiReaderWrapper)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13188005" author="simonw" created="Tue, 17 Jan 2012 21:19:26 +0000"  >&lt;p&gt;uwe are you gonna work on this?&lt;/p&gt;</comment>
                    <comment id="13188076" author="thetaphi" created="Tue, 17 Jan 2012 22:30:02 +0000"  >&lt;p&gt;I will hopefully start this weekend. I just have a schedule currently that has no slots left for that.&lt;/p&gt;

&lt;p&gt;Robert and I wanted to start a branch soon, maybe I simply do that as first step soon!&lt;/p&gt;</comment>
                    <comment id="13190456" author="thetaphi" created="Sat, 21 Jan 2012 16:19:07 +0000"  >&lt;p&gt;Simon: Just to inform you, I am working on this. Currently I have a heavy broken checkout that does no longer compile at all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Working, working, working... It&apos;s a mess!&lt;/p&gt;

&lt;p&gt;Once I have something intially compiling for core (not tests), I will create a branch!&lt;/p&gt;</comment>
                    <comment id="13190559" author="thetaphi" created="Sat, 21 Jan 2012 23:50:54 +0000"  >&lt;p&gt;I created the branch at &lt;a href=&quot;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene2858&quot; class=&quot;external-link&quot;&gt;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene2858&lt;/a&gt; and committed my first steps:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add CompositeIndexReader and AtomicIndexReader&lt;/li&gt;
	&lt;li&gt;Moved methods around, still not yet finished (see below)&lt;/li&gt;
	&lt;li&gt;DirectoryReader is public now and is returned by IR.open() and IW.getReader()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TODO:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;IR.openIfChanged makes no sense for any reader other than DirectoryReader, let&apos;s move it also there&lt;/li&gt;
	&lt;li&gt;isCurrent and getVersion() is also useless for atomic readers and composite readers except DR&lt;/li&gt;
	&lt;li&gt;The strange generics in ReaderContext caused by the final field will go away, when changing reader field to aaccessor method returning the correct type (by return type overloading).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Comments welcome and also heavy committing.&lt;/p&gt;</comment>
                    <comment id="13190662" author="thetaphi" created="Sun, 22 Jan 2012 12:56:20 +0000"  >&lt;p&gt;Some TODOs fixed:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;del&gt;The strange generics in ReaderContext caused by the final field will go away, when changing reader field to aaccessor method returning the correct type (by return type overloading).&lt;/del&gt;&lt;/li&gt;
	&lt;li&gt;Some refactoring done on docFreq()&lt;/li&gt;
	&lt;li&gt;Moved the ReaderContext impls to the corresponding abstract reader class: CompositeReaderContext -&amp;gt; CompositeIndexReader, AtomicReaderContext -&amp;gt; AtomicIndexReader&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13190663" author="thetaphi" created="Sun, 22 Jan 2012 12:59:40 +0000"  >&lt;p&gt;More TODOs:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Rename SlowMultiReaderWrapper -&amp;gt; SlowCompositeReaderWrapper (as its not only for MultiReaders, also other CompositeIndexReaders like DirectoryReader. Name is not in line with our current naming&lt;/li&gt;
	&lt;li&gt;All version/commit/reopen stuff should go into DirectoryReader, its useless for the abstract IR interfaces&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13195757" author="thetaphi" created="Sun, 29 Jan 2012 14:17:28 +0000"  >&lt;p&gt;I now fixed the branch&apos;s test-framework and all remaining TODOs about the API.&lt;/p&gt;

&lt;p&gt;Now the horrible stupid slave-work to port all test starts. I assume the API is now fixed, as nobody complained after one week.&lt;/p&gt;</comment>
                    <comment id="13195768" author="yseeley@gmail.com" created="Sun, 29 Jan 2012 15:38:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;SlowMultiReaderWrapper - please rename, the name is really ugly; or Multi*&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, the Slow* is misleading as it makes it seem like there&apos;s a faster way you should be doing it.&lt;br/&gt;
CompositeReaderWrapper should be fine.  And no, it doesn&apos;t sound too &quot;cool&quot; for the hypothetical developers who use that as a criteria when coding &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Other possibilities include AtomicReaderEmulator, AtomicEmulatorReader, CompositeAsAtomicReader, etc&lt;/p&gt;</comment>
                    <comment id="13195868" author="rcmuir" created="Sun, 29 Jan 2012 22:58:17 +0000"  >&lt;p&gt;Can we please do some eclipse-renames like:&lt;/p&gt;

&lt;p&gt;AtomicIndexReader -&amp;gt; AtomicReader&lt;br/&gt;
AtomicIndexReader.AtomicReaderContext -&amp;gt; AtomicReader.Context&lt;/p&gt;

&lt;p&gt;The verbosity of the api is killing me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13195873" author="mikemccand" created="Sun, 29 Jan 2012 23:06:58 +0000"  >&lt;p&gt;+1 for those names.&lt;/p&gt;</comment>
                    <comment id="13195876" author="thetaphi" created="Sun, 29 Jan 2012 23:25:45 +0000"  >&lt;p&gt;Jaja, will fix this...&lt;/p&gt;</comment>
                    <comment id="13195904" author="thetaphi" created="Mon, 30 Jan 2012 01:27:50 +0000"  >&lt;p&gt;I renamed the enclosing classes and also removed the public ctors from ReaderContexts (to prevent stupid things already reported on mailing lists).&lt;/p&gt;

&lt;p&gt;The renameing of ReaderContexts all to the same name Context, but with different enclosing class is a refactoring, Eclipse cannot do (it creates invalid code). It seems only NetBeans can do this, I will try to find a solution. The problem is that Eclipse always tries to import the inner class, what causes conflicts.&lt;/p&gt;

&lt;p&gt;Finally, e.g. the method getDocIdSet should look like getDocIdSet(AtomicReader.Context,...) &lt;span class=&quot;error&quot;&gt;&amp;#91;only importing AtomicReader&amp;#93;&lt;/span&gt;, but Eclipse always tries to use Context &lt;span class=&quot;error&quot;&gt;&amp;#91;and import oal.AtomicReader.Context&amp;#93;&lt;/span&gt;. At the end we should have abstract IndexReader.Context, AtomicReader.Context, CompositeReader.Context.&lt;/p&gt;

&lt;p&gt;Will go to bed now.&lt;/p&gt;</comment>
                    <comment id="13196024" author="thetaphi" created="Mon, 30 Jan 2012 10:08:52 +0000"  >&lt;p&gt;After sleeping one more night about it, the easiest and most simple way to remove the stupid verbosity in imports:&lt;/p&gt;

&lt;p&gt;I will move the ReaderContexts out of their enclosing class and make a top-level class without ctor out of it. Then import statements look nice. The RCs are now so important for search, so they should be on its own.&lt;/p&gt;</comment>
                    <comment id="13196479" author="thetaphi" created="Mon, 30 Jan 2012 22:21:04 +0000"  >&lt;p&gt;Here the final patch. Thanks for the good work and lots of help from Robert and Mike.&lt;/p&gt;

&lt;p&gt;As this patch contains heavy changes, we will commit it as soon as possible so work can go on. It would be nice, if you would not commit anything until this is done.&lt;/p&gt;

&lt;p&gt;There are some minor issues open:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;DirectoryReader is final and has only static factory methods. It is not possible to subclass it in any way. The problem is mainly Solr, as Solr accesses directory(), IndexCommits,... and therefore cannot work on abstract IndexReader anymore. This should be changed, by e.g. handling reopening in the IRFactory, also versions, commits,... Currently its not possible to implement any other IRFactory that returns something else.&lt;/li&gt;
	&lt;li&gt;The PayloadProcessorProvider has a broken API, this should be fixed. The current patch mimics the old behaviour, but not 100%.&lt;/li&gt;
	&lt;li&gt;ParallelReader is now atomic. We should add a sugar wrapper method to allow synchronized composite readers (with same segment sizes) to be aligned with MultiReaders or wrapped by Slow.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The remaining issues will be fixed in later issues!&lt;/p&gt;</comment>
                    <comment id="13196496" author="thetaphi" created="Mon, 30 Jan 2012 22:37:01 +0000"  >&lt;p&gt;Patch with nocommits removed.&lt;/p&gt;</comment>
                    <comment id="13196518" author="rcmuir" created="Mon, 30 Jan 2012 23:02:43 +0000"  >&lt;p&gt;Thanks for all the work here Uwe! I think its a great step forward. &lt;br/&gt;
The previous situation where half the methods were UOE is really unreleasable.&lt;/p&gt;</comment>
                    <comment id="13196542" author="thetaphi" created="Mon, 30 Jan 2012 23:38:42 +0000"  >&lt;p&gt;Committed trunk revision: 1238085&lt;/p&gt;</comment>
                    <comment id="13196561" author="mikemccand" created="Tue, 31 Jan 2012 00:01:54 +0000"  >&lt;p&gt;Nice work guys!&lt;/p&gt;</comment>
                    <comment id="13196580" author="thetaphi" created="Tue, 31 Jan 2012 00:32:54 +0000"  >&lt;p&gt;Patch that adds FC insanity checking for slow wrappers back. Will commit now.&lt;/p&gt;</comment>
                    <comment id="13196583" author="thetaphi" created="Tue, 31 Jan 2012 00:37:11 +0000"  >&lt;p&gt;Committed trunk revision: 1238112&lt;/p&gt;</comment>
                    <comment id="13197134" author="rcmuir" created="Tue, 31 Jan 2012 19:16:57 +0000"  >&lt;p&gt;I think somehow ensureOpen is broken here in some situations (possibly slowmultireaderwrapper):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;ant test -Dtestcase=TestReaderClosed -Dtestmethod=test -Dtests.seed=42907a63342da06b:-1490dd5f0d0f26d9:-7e3c360ea2d32539 -Dargs=&quot;-Dfile.encoding=UTF-8&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="13197184" author="thetaphi" created="Tue, 31 Jan 2012 20:21:04 +0000"  >&lt;p&gt;Hi Robert, this patch fixes the problem:&lt;/p&gt;

&lt;p&gt;SlowMultiReaderWrapper creates the fields and liveDocs on its ctor (as its expensive) and reuses. This is no problem, but the test did something very bad: It closed not the slow reader but the wrapped DirectoryReader. As fields() was not delegated to the DR or MultiFields with DR, Slow returned its own cached instance. Slow&apos;s ensureOpen was not throwing Ex, as it was still open.&lt;/p&gt;

&lt;p&gt;Theoretically, Slow* should incRef the underlying indexreader and decRef on close(). But that would require, that you close the SlowReader after wrapping.&lt;/p&gt;

&lt;p&gt;The current solution is not optimal but makes it easy to wrap without explicitely closing the slow wrapper.&lt;/p&gt;

&lt;p&gt;The fix was to call in.ensureOpen() in slow before the cached instance was returned.&lt;/p&gt;</comment>
                    <comment id="13197187" author="thetaphi" created="Tue, 31 Jan 2012 20:24:09 +0000"  >&lt;p&gt;Committed fix in revision: 1238788&lt;br/&gt;
I removed the extra in.ensureOpen() for hasDeletions(), as this was only a null-check.&lt;/p&gt;</comment>
                    <comment id="13287563" author="mikemccand" created="Fri, 1 Jun 2012 18:48:43 +0100"  >&lt;p&gt;Not entirely sure why but it looks like the commits here slowed down our NRT reopen latency.  If you look at the nightly bench graph: &lt;a href=&quot;http://people.apache.org/~mikemccand/lucenebench/nrt.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~mikemccand/lucenebench/nrt.html&lt;/a&gt; and click + drag from Jan 2012 to today, annotation R shows we increased from ~46 msec NRT reopen latency to ~50 msec ... could just be hotspot being upset...&lt;/p&gt;</comment>
                    <comment id="13288129" author="mikemccand" created="Sun, 3 Jun 2012 10:59:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;Not entirely sure why but it looks like the commits here slowed down our NRT reopen latency.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, sorry, I was wrong about this!&lt;/p&gt;

&lt;p&gt;I went back and re-ran the NRTPerfTest and isolated the slowdown to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3728&quot; title=&quot;better handling of files inside/outside CFS by codec&quot;&gt;&lt;del&gt;LUCENE-3728&lt;/del&gt;&lt;/a&gt; (also committed on the same day)... it was because we lost the SegmentInfo.sizeInBytes caching... but then in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-4055&quot; title=&quot;Refactor SegmentInfo / FieldInfo to make them extensible&quot;&gt;&lt;del&gt;LUCENE-4055&lt;/del&gt;&lt;/a&gt; we got it back and we got the performance back ... so all&apos;s well that ends well &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13288133" author="thetaphi" created="Sun, 3 Jun 2012 11:16:03 +0100"  >&lt;p&gt;Thanks Mike for taking care. For me this looked crazy, because refactoring like this should not change perf.&lt;/p&gt;

&lt;p&gt;This explains the change back  after 4055, I thought un-compressed oops responsible for the speedup.&lt;/p&gt;</comment>
                    <comment id="13288135" author="mikemccand" created="Sun, 3 Jun 2012 11:19:42 +0100"  >&lt;blockquote&gt;&lt;p&gt;This explains the change back after 4055, I thought un-compressed oops responsible for the speedup.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s what I thought too (and I was very confused that uncompressed oops would improve things)!  But &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-4055&quot; title=&quot;Refactor SegmentInfo / FieldInfo to make them extensible&quot;&gt;&lt;del&gt;LUCENE-4055&lt;/del&gt;&lt;/a&gt; landed on the same day I turned off uncompressed oops... so I think all mysteries are now explained.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310051">
                <name>Supercedes</name>
                                                <inwardlinks description="is superceded by">
                            <issuelink>
            <issuekey id="12540522">LUCENE-3733</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12512508" name="LUCENE-2858-FCinsanity.patch" size="10713" author="thetaphi" created="Tue, 31 Jan 2012 00:32:54 +0000" />
                    <attachment id="12512621" name="LUCENE-2858-FixSlowEnsureOpen.patch" size="1390" author="thetaphi" created="Tue, 31 Jan 2012 20:21:04 +0000" />
                    <attachment id="12512486" name="LUCENE-2858.patch" size="740970" author="thetaphi" created="Mon, 30 Jan 2012 22:37:01 +0000" />
                    <attachment id="12512480" name="LUCENE-2858.patch" size="741224" author="thetaphi" created="Mon, 30 Jan 2012 22:21:04 +0000" />
                </attachments>
            <subtasks>
            <subtask id="12539341">LUCENE-3716</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 11 Jan 2011 18:00:34 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2900</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24834</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>