<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:03:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-532/LUCENE-532.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-532] [PATCH] Indexing on Hadoop distributed file system</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-532</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;In my current project we needed a way to create very large Lucene indexes on Hadoop distributed file system. When we tried to do it directly on DFS using Nutch FsDirectory class - we immediately found that indexing fails because DfsIndexOutput.seek() method throws UnsupportedOperationException. The reason for this behavior is clear - DFS does not support random updates and so seek() method can&apos;t be supported (at least not easily).&lt;/p&gt;

&lt;p&gt;Well, if we can&apos;t support random updates - the question is: do we really need them? Search in the Lucene code revealed 2 places which call IndexOutput.seek() method: one is in TermInfosWriter and another one in CompoundFileWriter. As we weren&apos;t planning to use CompoundFileWriter - the only place that concerned us was in TermInfosWriter.&lt;/p&gt;

&lt;p&gt;TermInfosWriter uses IndexOutput.seek() in its close() method to write total number of terms in the file back into the beginning of the file. It was very simple to change file format a little bit and write number of terms into last 8 bytes of the file instead of writing them into beginning of file. The only other place that should be fixed in order for this to work is in SegmentTermEnum constructor - to read this piece of information at position = file length - 8.&lt;/p&gt;

&lt;p&gt;With this format hack - we were able to use FsDirectory to write index directly to DFS without any problems. Well - we still don&apos;t index directly to DFS for performance reasons, but at least we can build small local indexes and merge them into the main index on DFS without copying big main index back and forth. &lt;/p&gt;
</description>
                <environment></environment>
            <key id="12330762">LUCENE-532</key>
            <summary>[PATCH] Indexing on Hadoop distributed file system</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="ibolotin">Igor Bolotin</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Mar 2006 09:22:33 +0100</created>
                <updated>Fri, 10 May 2013 11:42:46 +0100</updated>
                    <resolved>Sun, 20 Nov 2011 21:50:47 +0000</resolved>
                            <version>1.9</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12372043" author="ibolotin" created="Tue, 28 Mar 2006 09:24:13 +0100"  >&lt;p&gt;Two patch files are attached&lt;/p&gt;</comment>
                    <comment id="12372044" author="cutting" created="Tue, 28 Mar 2006 09:52:58 +0100"  >&lt;p&gt;Instead of changing the value to -1 we should not write a size value in the header at all.  We can change the format number and use that to determine where to read the size.  Does that make sense?&lt;/p&gt;

&lt;p&gt;Also, please submit patches as a single &apos;svn diff&apos; from the top of the lucene tree.  &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="12372048" author="ibolotin" created="Tue, 28 Mar 2006 10:36:15 +0100"  >&lt;p&gt;Attached is new patch which is using format number to determine where to read the size as discussed.&lt;br/&gt;
Thanks!&lt;/p&gt;
</comment>
                    <comment id="12424276" author="otis" created="Sat, 29 Jul 2006 06:17:21 +0100"  >&lt;p&gt;This actually looks like a good and patch that doesn&apos;t break any tests.  I&apos;ll commit it in the coming days, as it looks like it should be backwards compatible... except CFS won&apos;t be supported unless somebody patches that, too (I tried quickly and soon got unit tests to fail &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                    <comment id="12433852" author="brogar" created="Mon, 11 Sep 2006 14:19:45 +0100"  >&lt;p&gt;Don&apos;t mean to resurrect old issues, but we&apos;re having the same problem here indexing to DFS and I&apos;ve applied the patch and it works for us. Wondering if I&apos;m missing something, or if this is being addressed somewhere else in trunk that I haven&apos;t found.&lt;/p&gt;</comment>
                    <comment id="12435583" author="otis" created="Mon, 18 Sep 2006 22:40:31 +0100"  >&lt;p&gt;I&apos;m hesitant to commit without the CFS support.  It looks like more and more people are using CFS indexes.&lt;/p&gt;</comment>
                    <comment id="12448770" author="mikemccand" created="Fri, 10 Nov 2006 15:21:13 +0000"  >&lt;p&gt;I think this is the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-532&quot; title=&quot;[PATCH] Indexing on Hadoop distributed file system&quot;&gt;&lt;del&gt;LUCENE-532&lt;/del&gt;&lt;/a&gt; (I just marked that one as a dup).&lt;/p&gt;

&lt;p&gt;But there was one difference: does HDFS allow writing to the same file (eg &quot;segments&quot;) more than once?  I thought it did not because it&apos;s &quot;write once&quot;?  Do we need to not do that (write to the same file more than once) to work with HDFS (lock-less gets us closer)?&lt;/p&gt;</comment>
                    <comment id="12448774" author="mikemccand" created="Fri, 10 Nov 2006 15:24:37 +0000"  >&lt;p&gt;Sorry, I meant &quot;dup of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-704&quot; title=&quot;Lucene should have a &amp;quot;write once&amp;quot; mode&quot;&gt;&lt;del&gt;LUCENE-704&lt;/del&gt;&lt;/a&gt; &quot; above.&lt;/p&gt;</comment>
                    <comment id="12448780" author="mikemccand" created="Fri, 10 Nov 2006 15:43:57 +0000"  >&lt;p&gt;Also: I like the idea of never doing &quot;seek&quot; when writing.  The less functionality we rely on from the filesystem, the more portable Lucene will be.  Since Lucene is so wonderfully simple, never using &quot;seek&quot; during write is in fact very feasible.&lt;/p&gt;

&lt;p&gt;I think to do this we need to change the CFS file format, so that the offsets are stored at the end of the file.  We actually can&apos;t pre-compute where the offsets will be because we can&apos;t make assumptions about how the file position changes when bytes are written: this is implementation specific.  For example, if the Directory implementation does on-the-fly compression, then the file position will not be the number of bytes written.  So I think we have to write at the end of the file.&lt;/p&gt;

&lt;p&gt;Any opinions or other suggestions?&lt;/p&gt;</comment>
                    <comment id="12448877" author="ab" created="Fri, 10 Nov 2006 22:21:30 +0000"  >&lt;p&gt;Hadoop cannot (yet) change file position when writing. All files are write-once, i.e. once they are closed they are pretty much immutable. They are also append-only - writing uses a subclass of OutputStream.&lt;/p&gt;</comment>
                    <comment id="12448989" author="mikemccand" created="Sat, 11 Nov 2006 16:02:46 +0000"  >&lt;p&gt;Alas, in trying to change the CFS format so that file offsets are stored at the end of the file, when implementing the corresponding changes to CompoundFileReader, I discovered that this approach isn&apos;t viable.  I had been thinking the reader would look at the file length, subtract numEntry*sizeof(long), seek to there, and then read the offsets (longs).  The problem is: we can&apos;t know sizeof(long) since this is dependent on the actual storage implementation, ie, for the same reasoning above.  Ie we can&apos;t assume a byte = 1 file position, always.&lt;/p&gt;

&lt;p&gt;So, then, the only solution I can think of (to avoid seek during write) would be to write to a separate file, for each *.cfs file, that contains the file offsets corresponding to the cfs file.  Eg, if we have _1.cfs we would also have _1.cfsx which holds the file offsets.   This is sort of costly if we care about # files (it doubles the number of files in the simple case of a bunch of segments w/ no deletes/separate norms).&lt;/p&gt;

&lt;p&gt;Yonik had actually mentioned in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-704&quot; title=&quot;Lucene should have a &amp;quot;write once&amp;quot; mode&quot;&gt;&lt;del&gt;LUCENE-704&lt;/del&gt;&lt;/a&gt; that fixing CFS writing to not use seek was not very important, ie, it would be OK to not use compound files with HDFS as the store.&lt;/p&gt;

&lt;p&gt;Does anyone see a better approach?&lt;/p&gt;</comment>
                    <comment id="12449424" author="kevinoliver" created="Mon, 13 Nov 2006 17:24:41 +0000"  >&lt;p&gt;Here are some diffs on how to remove seeks from CompoundFileWriter (this is against an older version of Lucene, 1.4.2 I think, but the general idea is the same). There&apos;s also a test too. &lt;/p&gt;</comment>
                    <comment id="12449446" author="mikemccand" created="Mon, 13 Nov 2006 18:58:53 +0000"  >&lt;p&gt;Thank you for the patch &amp;amp; unit test!&lt;/p&gt;

&lt;p&gt;This is actually the same approach that I started with.  But I ruled&lt;br/&gt;
it out because I don&apos;t think it&apos;s safe to do arithmetic (ie, adding&lt;br/&gt;
lengths to compute positions) on file positions.&lt;/p&gt;

&lt;p&gt;Meaning, one can imagine a Directory implementation that&apos;s doing some&lt;br/&gt;
kind of compression where on writing N bytes the file position does&lt;br/&gt;
not in fact advance by N bytes.  Or maybe an implementation that must&lt;br/&gt;
escape certain bytes, or it&apos;s writing to XML or using some kind of&lt;br/&gt;
alternate coding system, or something along these lines.  I don&apos;t know&lt;br/&gt;
if such Directory implementations exist today, but, I don&apos;t want to&lt;br/&gt;
break them if they do nor preclude them in the future.&lt;/p&gt;

&lt;p&gt;And so the only value you should ever pass to &quot;seek()&quot; is a value you&lt;br/&gt;
previously obtained by calling &quot;getFilePosition()&quot;.  The current&lt;br/&gt;
javadocs for these methods seem to imply this.&lt;/p&gt;

&lt;p&gt;However, on looking into this question further ... I do see that there&lt;br/&gt;
are places now where Lucene already does arithmetic on file positions.&lt;br/&gt;
For example in accessing a *.fdx file or *.tdx file we assume we can&lt;br/&gt;
find a given entry at FORMAT_SIZE + 8 * index file position.&lt;/p&gt;

&lt;p&gt;Maybe it is OK to make the definition of Directory.seek() stricter, by&lt;br/&gt;
requiring that in fact the position we pass to seek is always the same&lt;br/&gt;
as &quot;the number of bytes written&quot;, thereby allowing us to do arithmetic&lt;br/&gt;
based on bytes/length and call seek with such values?  I&apos;m nervous&lt;br/&gt;
about making this API change.&lt;/p&gt;

&lt;p&gt;I think this is the open question.  Does anyone have any input to help&lt;br/&gt;
answer this question?&lt;/p&gt;

&lt;p&gt;Lucene currently makes this assumption, albeit in a fairly contained&lt;br/&gt;
way I think (most other calls to seek seem to be values previously&lt;br/&gt;
obtained by getFilePosition()).&lt;/p&gt;</comment>
                    <comment id="12558412" author="gsingers" created="Sun, 13 Jan 2008 15:25:32 +0000"  >&lt;p&gt;Anyone have a follow up on this?  Seems like Hadoop based indexing would be a nice feature.  It sounds like there was a lot of support for this, but it was never committed.  Is this still an issue?&lt;/p&gt;</comment>
                    <comment id="12558432" author="michaelbusch" created="Sun, 13 Jan 2008 18:09:49 +0000"  >&lt;p&gt;I think &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-783&quot; title=&quot;Store all metadata in human-readable segments file&quot;&gt;&lt;del&gt;LUCENE-783&lt;/del&gt;&lt;/a&gt; (move all file headers to segments file) would solve this issue nicely. Then there would not be the need to call seek() in CFSWriter and TermInfosWriter anymore. I&apos;d love to work on 783, but not sure if time permits in the near future.&lt;/p&gt;</comment>
                    <comment id="12628025" author="ningli" created="Wed, 3 Sep 2008 16:29:03 +0100"  >&lt;p&gt;Is the use of seek and write in ChecksumIndexOutput making Lucene less likely to support all sequential write (i.e. no seek write)? ChecksumIndexOutput is currently used by SegmentInfos.&lt;/p&gt;</comment>
                    <comment id="12986934" author="shaie" created="Wed, 26 Jan 2011 09:57:45 +0000"  >&lt;p&gt;I see some progress in that direction was made under &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2373&quot; title=&quot;Create a Codec to work with streaming and append-only filesystems&quot;&gt;&lt;del&gt;LUCENE-2373&lt;/del&gt;&lt;/a&gt; but am not sure if this Codec is a generic one (i.e. can support any file we write today) or tailored for StandardTermDict. It&apos;d be great if Lucene can support append-only FS !&lt;/p&gt;</comment>
                    <comment id="13153886" author="rcmuir" created="Sun, 20 Nov 2011 21:50:47 +0000"  >&lt;p&gt;This is fixed by &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2373&quot; title=&quot;Create a Codec to work with streaming and append-only filesystems&quot;&gt;&lt;del&gt;LUCENE-2373&lt;/del&gt;&lt;/a&gt;, just set your codec to AppendingCodec.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12344900" name="cfs-patch.txt" size="8356" author="kevinoliver" created="Mon, 13 Nov 2006 17:24:41 +0000" />
                    <attachment id="12324643" name="indexOnDFS.patch" size="2030" author="ibolotin" created="Tue, 28 Mar 2006 10:36:14 +0100" />
                    <attachment id="12324628" name="SegmentTermEnum.patch" size="635" author="ibolotin" created="Tue, 28 Mar 2006 09:25:48 +0100" />
                    <attachment id="12324627" name="TermInfosWriter.patch" size="889" author="ibolotin" created="Tue, 28 Mar 2006 09:25:48 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 28 Mar 2006 08:52:58 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13218</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27195</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>