<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:57:20 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1061/LUCENE-1061.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1061] Adding a factory to QueryParser to instantiate query instances</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1061</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;With the new efforts with Payload and scoring functions, it would be nice to plugin custom query implementations while using the same QueryParser.&lt;br/&gt;
Included is a patch with some refactoring the QueryParser to take a factory that produces query instances.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12382824">LUCENE-1061</key>
            <summary>Adding a factory to QueryParser to instantiate query instances</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="john.wang@gmail.com">John Wang</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Nov 2007 21:10:51 +0000</created>
                <updated>Sat, 11 Oct 2008 13:49:34 +0100</updated>
                    <resolved>Sat, 30 Aug 2008 18:14:26 +0100</resolved>
                            <version>2.3</version>
                                <fixVersion>2.4</fixVersion>
                                <component>core/queryparser</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12543694" author="john.wang@gmail.com" created="Mon, 19 Nov 2007 21:12:29 +0000"  >&lt;p&gt;This patch introduces a new file: QueryBuilder which is just a factory for instantiating query objects.&lt;/p&gt;

&lt;p&gt;And the class QueryParser is modified to use use the factory to build the final query.&lt;/p&gt;

&lt;p&gt;This is backward compatible.&lt;/p&gt;</comment>
                    <comment id="12546353" author="michaelbusch" created="Wed, 28 Nov 2007 19:02:05 +0000"  >&lt;p&gt;Yonik,&lt;/p&gt;

&lt;p&gt;I remember that we talked briefly about a QueryFactory in Atlanta and &lt;br/&gt;
you had some cool ideas. Maybe you could mention them here?&lt;/p&gt;</comment>
                    <comment id="12626051" author="mikemccand" created="Wed, 27 Aug 2008 11:08:30 +0100"  >&lt;p&gt;This looks useful &amp;#8211; Michael or Yonik, what do you think?&lt;/p&gt;</comment>
                    <comment id="12626055" author="ehatcher" created="Wed, 27 Aug 2008 11:28:51 +0100"  >&lt;p&gt;What&apos;s wrong with just subclassing QueryParser and overriding the desired methods?   Either way someone wanting to provide custom Query implementations will be writing effectively the same code, just with more indirection with this method.&lt;/p&gt;</comment>
                    <comment id="12626081" author="mikemccand" created="Wed, 27 Aug 2008 12:29:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;What&apos;s wrong with just subclassing QueryParser and overriding the desired methods?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think subclassing would work fine too, as long as we fix QueryParser so that instead of doing things like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  TermQuery q = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermQuery(...);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;it would do:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  q = newTermQuery(...);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then define a newTermQuery(...) method which a subclass could then override.  Is that what you have in mind Erik?  John does this sound OK?&lt;/p&gt;</comment>
                    <comment id="12626083" author="creamyg" created="Wed, 27 Aug 2008 12:44:12 +0100"  >&lt;p&gt;&amp;gt; What&apos;s wrong with just subclassing QueryParser and overriding the desired methods?&lt;/p&gt;

&lt;p&gt;For what it&apos;s worth, I find the idea of a separate class appealing from an API documentation design standpoint.  This usage of QueryParser is relatively arcane. Hiding all these methods away in a separate class means less clutter and less effort for most people scanning through the API docs of an important, commonly used class.&lt;/p&gt;</comment>
                    <comment id="12626086" author="shaie" created="Wed, 27 Aug 2008 13:05:28 +0100"  >&lt;p&gt;I think the idea of sub-classing makes more sense when you&apos;re talking about a QueryParser. The parser includes, mainly, two logics - parsing a query into query &quot;segments&quot; or &quot;nodes&quot; and then creating the appropriate Lucene Query instance for each sengment/node.&lt;br/&gt;
By modifying QueryParser so that it uses protected callback methods for creating the appropriate Query instance for different node types, you get a very clean and elegant query parsing solution.&lt;br/&gt;
All sub-classes can share the same parsing rules (which generally don&apos;t change), and just instantiating their own TermQuery or PrefixQuery instances.&lt;/p&gt;

&lt;p&gt;Wouldn&apos;t you need to do that anyway with the Query factory? I mean, what if I want to create all the query types like the default implementation, but change the PrefixQuery instance to something I wrote? Wouldn&apos;t I need to extend the default query factory? Sounds exactly like extending QueryParser to me.&lt;/p&gt;

&lt;p&gt;I recently implemented a query parser for a different query syntax than Lucene&apos;s, but I still wanted to create Lucene Query objects. The parser includes different protected callback methods like getTermQuery, getPhraseQuery, getPrefixQuery etc, providing a default implementation to each of course. It parses the query into &quot;nodes&quot; and then invoke the appropriate callback method per node (i.e., for a phrase node, it invokes getPhraseQuery).&lt;br/&gt;
We have several sub-classes which extend this parser to provide their own implementation for various node types (for example, this approach allows you to remove any &quot;prefix&quot; or &quot;wildcard&quot; nodes from the query, without touching the parser).&lt;/p&gt;</comment>
                    <comment id="12626253" author="yseeley@gmail.com" created="Wed, 27 Aug 2008 19:58:42 +0100"  >&lt;p&gt;In this specific instance I think subclassing of QueryParser is the right way to go, and avoids introducing another class.  People are going to want more customizations than just changing the types of created subclauses, and will need to subclass for these other types of changes anyway.&lt;/p&gt;</comment>
                    <comment id="12626345" author="mikemccand" created="Wed, 27 Aug 2008 23:25:44 +0100"  >&lt;p&gt;OK then let&apos;s take the subclassing approach; I&apos;ll rework the patch.&lt;/p&gt;</comment>
                    <comment id="12626357" author="mikemccand" created="Thu, 28 Aug 2008 00:20:07 +0100"  >&lt;p&gt;OK reworked patch to subclass.  I plan to commit in a day or two.&lt;/p&gt;</comment>
                    <comment id="12626499" author="ehatcher" created="Thu, 28 Aug 2008 10:21:46 +0100"  >&lt;p&gt;Michael - you are a machine!&lt;/p&gt;

&lt;p&gt;+1 to the subclassing approach and your general patch.&lt;/p&gt;

&lt;p&gt;What might be even more interesting is to make the newXXX methods return Query instead of a specific type.  I&apos;m not sure if that would work in all cases (surely not for BooleanQuery), but might for most of &apos;em.&lt;/p&gt;

&lt;p&gt;For example, what if newTermQuery(Term term) returned a Query instead of a TermQuery?   That&apos;d add a fair bit more flexibility, as long as none of the calling code needed a specific type of Query.&lt;/p&gt;

&lt;p&gt;The hoops we jump through because we&apos;re in Java.... sheesh.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12626507" author="mikemccand" created="Thu, 28 Aug 2008 10:59:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;The hoops we jump through because we&apos;re in Java.... sheesh.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Alas, yes... maybe we should all switch to Erlang!  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What might be even more interesting is to make the newXXX methods return Query instead of a specific type. I&apos;m not sure if that would work in all cases (surely not for BooleanQuery), but might for most of &apos;em.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I was able to do this with many of them &amp;#8211; attached new patch.  Only PhraseQuery, MultiPhraseQuery, BooleanQuery/Clause required strong typing.  All others now return Query.&lt;/p&gt;</comment>
                    <comment id="12626638" author="john.wang@gmail.com" created="Thu, 28 Aug 2008 17:29:16 +0100"  >&lt;p&gt;This looks great! Either subclassing or using a factory pattern works well in this case. Great job and thanks!&lt;/p&gt;</comment>
                    <comment id="12627221" author="mikemccand" created="Sat, 30 Aug 2008 18:14:26 +0100"  >&lt;p&gt;Committed revision 690535.  Thanks John!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                <outwardlinks description="duplicates">
                            <issuelink>
            <issuekey id="12314494">LUCENE-344</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12389078" name="LUCENE-1061.patch" size="16119" author="mikemccand" created="Thu, 28 Aug 2008 10:59:39 +0100" />
                    <attachment id="12389055" name="LUCENE-1061.patch" size="16157" author="mikemccand" created="Thu, 28 Aug 2008 00:20:07 +0100" />
                    <attachment id="12369822" name="lucene_patch.txt" size="5925" author="john.wang@gmail.com" created="Mon, 19 Nov 2007 21:12:29 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 28 Nov 2007 19:02:05 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12684</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26668</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>