<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:25 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3426/LUCENE-3426.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3426] optimizer for n-gram PhraseQuery</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3426</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;If 2-gram is used and the length of query string is 4, for example q=&quot;ABCD&quot;, QueryParser generates (when autoGeneratePhraseQueries is true) PhraseQuery(&quot;AB BC CD&quot;) with slop 0. But it can be optimized PhraseQuery(&quot;AB CD&quot;) with appropriate positions.&lt;/p&gt;

&lt;p&gt;The idea came from the Japanese paper &quot;N.M-gram: Implementation of Inverted Index Using N-gram with Hash Values&quot; by Mikio Hirabayashi, et al. (The main theme of the paper is different from the idea that I&apos;m using here, though)&lt;/p&gt;</description>
                <environment></environment>
            <key id="12522647">LUCENE-3426</key>
            <summary>optimizer for n-gram PhraseQuery</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="koji">Koji Sekiguchi</assignee>
                                <reporter username="koji">Koji Sekiguchi</reporter>
                        <labels>
                    </labels>
                <created>Sat, 10 Sep 2011 15:31:44 +0100</created>
                <updated>Sat, 21 Jan 2012 23:57:14 +0000</updated>
                    <resolved>Wed, 14 Sep 2011 14:07:37 +0100</resolved>
                            <version>2.9.4</version>
                <version>3.0.3</version>
                <version>3.1</version>
                <version>3.2</version>
                <version>3.3</version>
                <version>3.4</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13102057" author="koji" created="Sat, 10 Sep 2011 15:38:13 +0100"  >&lt;p&gt;First draft. The patch doesn&apos;t include test yet.&lt;/p&gt;

&lt;p&gt;I added optimizeForNgram() methods in the patch that will remove &quot;redundant&quot; terms and positions.&lt;/p&gt;

&lt;p&gt;Optimizing PhraseQuery will change score.&lt;/p&gt;</comment>
                    <comment id="13102189" author="koji" created="Sun, 11 Sep 2011 02:19:18 +0100"  >&lt;p&gt;I added test code.&lt;/p&gt;</comment>
                    <comment id="13102205" author="koji" created="Sun, 11 Sep 2011 03:46:46 +0100"  >&lt;p&gt;The result of speed up is:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;n-gram/query length&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;normal(ms)&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;optimized(ms)&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;speed up&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;bi-gram/4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21,766&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16,641&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;30.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;bi-gram/6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;29,865&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21,518&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;38.8%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;tri-gram/5&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8,188&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6,140&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;33.4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;tri-gram/6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9,001&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5,925&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;51.9%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                    <comment id="13102271" author="rcmuir" created="Sun, 11 Sep 2011 13:58:43 +0100"  >&lt;p&gt;Hi Koji, I wonder if instead it would be cleaner as a subclass of PhraseQuery (NGramPhraseQuery or similar),&lt;br/&gt;
that rewrites to the (possibly optimized) PhraseQuery in rewrite(). For example, it would build an optimized &lt;br/&gt;
PhraseQuery when slop = 0, and there are enough terms to optimize, otherwise it would build a &quot;normal&quot; phrasequery.&lt;/p&gt;

&lt;p&gt;Then the optimization would be easy to apply, the user just uses NGramPhraseQuery instead of PhraseQuery.&lt;br/&gt;
for example, from QueryParser:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  @Override
  protected PhraseQuery newPhraseQuery() {
    return new NGramPhraseQuery();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13102391" author="koji" created="Mon, 12 Sep 2011 01:47:53 +0100"  >&lt;p&gt;I like the idea of introducing the newly created class! Here is the new patch.&lt;/p&gt;</comment>
                    <comment id="13102393" author="rcmuir" created="Mon, 12 Sep 2011 02:02:24 +0100"  >&lt;p&gt;I think I like it better too... though I wonder if its possible to keep the original NGramPhraseQuery unmodified?&lt;br/&gt;
this way its not changed by Query.rewrite(), and if a user reuses the query (which we document they can do), they could then call add() again and everything works.&lt;/p&gt;

&lt;p&gt;Also, somewhat related to the issue might be &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2660&quot; title=&quot;omitPositions improvements&quot;&gt;SOLR-2660&lt;/a&gt;. We don&apos;t have to commit that patch, but we could separate&lt;br/&gt;
out the queryparser refactoring to make it easier for such an optimization to be &quot;automatic&quot; in solr, because it allows&lt;br/&gt;
SolrQueryParser to delegate creation of Phrase/MultiPhraseQuery to the FieldType.&lt;/p&gt;
</comment>
                    <comment id="13102401" author="koji" created="Mon, 12 Sep 2011 02:34:41 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I think I like it better too... though I wonder if its possible to keep the original NGramPhraseQuery unmodified?&lt;br/&gt;
this way its not changed by Query.rewrite(), and if a user reuses the query (which we document they can do), they could then call add() again and everything works.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I wonder it that too. Here is the new patch. This time I added assertSame()/NotSame() to check the rewritten Query to test code.&lt;/p&gt;</comment>
                    <comment id="13102405" author="koji" created="Mon, 12 Sep 2011 02:47:56 +0100"  >&lt;p&gt;For automatic in Solr, I wonder if we could move the feature to n-gram tokenizers, and we could have something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;fieldType name=&lt;span class=&quot;code-quote&quot;&gt;&quot;text_cjk&quot;&lt;/span&gt; class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.TextField&quot;&lt;/span&gt; positionIncrementGap=&lt;span class=&quot;code-quote&quot;&gt;&quot;100&quot;&lt;/span&gt;
           autoGeneratePhraseQueries=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;&amp;gt;
  &amp;lt;analyzer type=&lt;span class=&quot;code-quote&quot;&gt;&quot;index&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CJKTokenizerFactory&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/analyzer&amp;gt;
  &amp;lt;analyzer type=&lt;span class=&quot;code-quote&quot;&gt;&quot;query&quot;&lt;/span&gt;&amp;gt;
    &amp;lt;tokenizer class=&lt;span class=&quot;code-quote&quot;&gt;&quot;solr.CJKTokenizerFactory&quot;&lt;/span&gt; optimizePhraseQuery=&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&quot;&lt;/span&gt;/&amp;gt;
  &amp;lt;/analyzer&amp;gt;
&amp;lt;/fieldType&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13102406" author="rcmuir" created="Mon, 12 Sep 2011 03:00:02 +0100"  >&lt;p&gt;Well if we apply the refactoring part of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2660&quot; title=&quot;omitPositions improvements&quot;&gt;SOLR-2660&lt;/a&gt; (we can split out into a separate issue), we could add such a thing as an attribute to the fieldType?&lt;/p&gt;

&lt;p&gt;I like the way your patch looks now! A couple more questions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;doesn&apos;t the optimization also apply to MultiPhraseQuery? If so, NGramPhraseQuery could extend MultiPhraseQuery and just rewrite to the correct one (MultiPhrase or Phrase depending upon the situation after optimization)&lt;/li&gt;
	&lt;li&gt;what about hashCode/equals? Although the same results will be returned, scoring will differ, maybe it NGramPhraseQuery should implement these?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13102408" author="koji" created="Mon, 12 Sep 2011 03:10:51 +0100"  >&lt;p&gt;I&apos;m not sure it could apply MutiPhraseQuery. Let me take more time.&lt;/p&gt;

&lt;p&gt;Considering hashCode/equals is good point. I&apos;ll see.&lt;/p&gt;</comment>
                    <comment id="13103737" author="koji" created="Tue, 13 Sep 2011 17:38:01 +0100"  >&lt;p&gt;New patch. I added equals/hashCode in the patch.&lt;/p&gt;

&lt;p&gt;I think it is too complex to apply optimization to MultiPhraseQuery, so I&apos;d like to stick with PhraseQuery in the patch.&lt;/p&gt;</comment>
                    <comment id="13103750" author="rcmuir" created="Tue, 13 Sep 2011 17:55:47 +0100"  >&lt;p&gt;I think I agree Koji, the patch looks good.&lt;/p&gt;

&lt;p&gt;Though we should be able to keep PhraseQuery&apos;s internal members &apos;private&apos; since NGramPhraseQuery now uses getter methods to access positions, terms, slop ?&lt;/p&gt;</comment>
                    <comment id="13103775" author="mikemccand" created="Tue, 13 Sep 2011 18:16:47 +0100"  >&lt;p&gt;Patch looks great!  What a nice opto &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13104071" author="koji" created="Wed, 14 Sep 2011 00:11:21 +0100"  >&lt;p&gt;Thank you for your continuous review the patch, Robert! Here is the new patch. Now I don&apos;t touch the existing PhraseQuery as I use getter methods.&lt;/p&gt;

&lt;p&gt;I think this is ready to commit.&lt;/p&gt;</comment>
                    <comment id="13104474" author="koji" created="Wed, 14 Sep 2011 14:07:37 +0100"  >&lt;p&gt;trunk: Committed revision 1170586.&lt;br/&gt;
3x: Committed revision 1170593.&lt;/p&gt;</comment>
                    <comment id="13157744" author="thetaphi" created="Sun, 27 Nov 2011 12:29:24 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                    <comment id="13190550" author="billnbell" created="Sat, 21 Jan 2012 23:03:43 +0000"  >&lt;p&gt;Is this automatic in SOLR? Or do we need to add a feature to support his in SOLR?&lt;/p&gt;</comment>
                    <comment id="13190560" author="koji" created="Sat, 21 Jan 2012 23:57:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is this automatic in SOLR?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No. I&apos;ve opened &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-3055&quot; title=&quot;Use NGramPhraseQuery in Solr&quot;&gt;SOLR-3055&lt;/a&gt;.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12494342" name="LUCENE-3426.patch" size="7840" author="koji" created="Wed, 14 Sep 2011 00:11:21 +0100" />
                    <attachment id="12494258" name="LUCENE-3426.patch" size="8002" author="koji" created="Tue, 13 Sep 2011 17:38:01 +0100" />
                    <attachment id="12493980" name="LUCENE-3426.patch" size="6698" author="koji" created="Mon, 12 Sep 2011 02:34:41 +0100" />
                    <attachment id="12493977" name="LUCENE-3426.patch" size="7346" author="koji" created="Mon, 12 Sep 2011 01:47:53 +0100" />
                    <attachment id="12493934" name="LUCENE-3426.patch" size="4459" author="koji" created="Sun, 11 Sep 2011 02:19:18 +0100" />
                    <attachment id="12493910" name="LUCENE-3426.patch" size="2535" author="koji" created="Sat, 10 Sep 2011 15:38:13 +0100" />
                    <attachment id="12493981" name="PerfTest.java" size="5252" author="koji" created="Mon, 12 Sep 2011 02:48:27 +0100" />
                    <attachment id="12493940" name="PerfTest.java" size="4785" author="koji" created="Sun, 11 Sep 2011 03:47:31 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 11 Sep 2011 12:58:43 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2690</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24270</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>