<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:04 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1591/LUCENE-1591.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1591] Enable bzip compression in benchmark</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1591</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;bzip compression can aid the benchmark package by not requiring extracting bzip files (such as enwiki) in order to index them. The plan is to add a config parameter bzip.compression=true/false and in the relevant tasks either decompress the input file or compress the output file using the bzip streams.&lt;br/&gt;
It will add a dependency on ant.jar which contains two classes similar to GZIPOutputStream and GZIPInputStream which compress/decompress files using the bzip algorithm.&lt;/p&gt;

&lt;p&gt;bzip is known to be superior in its compression performance to the gzip algorithm (~20% better compression), although it does the compression/decompression a bit slower.&lt;/p&gt;

&lt;p&gt;I wil post a patch which adds this parameter and implement it in LineDocMaker, EnwikiDocMaker and WriteLineDoc task. Maybe even add the capability to DocMaker or some of the super classes, so it can be inherited by all sub-classes.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12422385">LUCENE-1591</key>
            <summary>Enable bzip compression in benchmark</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Apr 2009 18:44:16 +0100</created>
                <updated>Thu, 29 Mar 2012 18:51:28 +0100</updated>
                    <resolved>Mon, 31 Jan 2011 19:23:47 +0000</resolved>
                                            <fixVersion>2.9</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/benchmark</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12697143" author="mikemccand" created="Wed, 8 Apr 2009 19:38:24 +0100"  >&lt;p&gt;I&apos;m hitting this, when trying to convert the 20090306 Wikipedia export to a line file:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-0&quot;&lt;/span&gt; java.lang.ArrayIndexOutOfBoundsException: 2048
	at org.apache.xerces.impl.io.UTF8Reader.read(Unknown Source)
	at org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)
	at org.apache.xerces.impl.XMLEntityScanner.scanContent(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanContent(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.lucene.benchmark.byTask.feeds.EnwikiDocMaker$Parser.run(EnwikiDocMaker.java:77)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:619)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://marc.info/?l=xerces-j-user&amp;amp;m=120452263925040&amp;amp;w=2&quot; class=&quot;external-link&quot;&gt;http://marc.info/?l=xerces-j-user&amp;amp;m=120452263925040&amp;amp;w=2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It sounds likely an upgrade to xerces 2.9.1 will fix it.  I&apos;m testing it now... if it fixes the issue, I&apos;ll commit the upgrade to contrib/benchmark.&lt;/p&gt;</comment>
                    <comment id="12697164" author="mikemccand" created="Wed, 8 Apr 2009 20:46:20 +0100"  >&lt;p&gt;So, after upgrading to xerces 2.9.1, I then hit this error:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt; 
Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-0&quot;&lt;/span&gt; java.lang.RuntimeException: org.apache.xerces.impl.io.MalformedByteSequenceException: Invalid &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; 2 of 4-&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; UTF-8 sequence.
	at org.apache.lucene.benchmark.byTask.feeds.EnwikiDocMaker$Parser.run(EnwikiDocMaker.java:101)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:619)
Caused by: org.apache.xerces.impl.io.MalformedByteSequenceException: Invalid &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; 2 of 4-&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; UTF-8 sequence.
	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.lucene.benchmark.byTask.feeds.EnwikiDocMaker$Parser.run(EnwikiDocMaker.java:77)
	... 1 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;It appears I&apos;m hitting &lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt; which, hideously, is still&lt;br/&gt;
open. Worse, we are already doing the suggested workaround at the&lt;br/&gt;
bottom of the issue. Hmm.&lt;/p&gt;</comment>
                    <comment id="12697233" author="mikemccand" created="Wed, 8 Apr 2009 22:49:17 +0100"  >&lt;p&gt;After some iterations on &lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt;, I managed to apply the original patch on that issue (thank you Robert!), which indeed allows me to process all of Wikipedia&apos;s XML export.  I&apos;ll commit a recompiled xerces 2.9.1 jar with that patch shortly.&lt;/p&gt;</comment>
                    <comment id="12698069" author="shaie" created="Sat, 11 Apr 2009 11:47:38 +0100"  >&lt;p&gt;I wonder why does EnwikiDocMaker extend LineDocMaker? The latter assumes the input is given in lines, while the former assumes an XML format ... so why the inheritance?&lt;/p&gt;

&lt;p&gt;This affects EnwikiDocMaker today when LDM.openFile() instantiates a BufferedReader, which is never used by EDM. Is it because of DocState? Perhaps some of the logic in LDM can be pulled up to BasicDocMaker, or a new abstract DocStateDocMaker?&lt;br/&gt;
If there is a good reason, then maybe introduce a protected member useReader and set it to false in EDM? Or override openFile() in EDM and not instantiate the reader?&lt;/p&gt;

&lt;p&gt;Also, somewhat unrelated to this issue, but I found two issues in LDM:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;In makeDocument(), if the read line is null, then we first call openFile() and then check &apos;forever&apos; (and possibly throw a NoMoreDataException). Should we first check forever, and only if it&apos;s true call openFile()?&lt;/li&gt;
	&lt;li&gt;resetInputs() reads the docs.file property and throws an exception if it&apos;s not set. Shouldn&apos;t this code belong to setConfig?&lt;br/&gt;
I can include those two in the patch as well.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12698074" author="mikemccand" created="Sat, 11 Apr 2009 12:45:08 +0100"  >&lt;blockquote&gt;&lt;p&gt;I wonder why does EnwikiDocMaker extend LineDocMaker? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not sure... I agree it&apos;d be cleaner to not subclass LineDocMaker, and factor out DocState into BasicDocMaker.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should we first check forever, and only if it&apos;s true call openFile()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, let&apos;s fix that!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;resetInputs() reads the docs.file property and throws an exception if it&apos;s not set. Shouldn&apos;t this code belong to setConfig?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it should, but I vaguely remember some odd reason why I put it in resetInputs... try moving it and see?&lt;/p&gt;</comment>
                    <comment id="12698077" author="shaie" created="Sat, 11 Apr 2009 12:59:56 +0100"  >&lt;p&gt;resetInputs() is called from PerfRunData&apos;s ctor (as is setConfig), but also from ResetInputsTask. Unless it is possible to change the file name in the middle of execution, I see no reason why not move it to setConfig.&lt;/p&gt;

&lt;p&gt;I&apos;ll move it to setConfig and also switch to throw IllegalArgEx, insteas of RuntimeEx.&lt;/p&gt;

&lt;p&gt;Another change I&apos;d like to do is remove the while(true) in makeDoc. All it does is read 1 line and breaks, unless that line is null in which case it reopens the file and reads a line again. I think that in that case, which will happen only after all docs were consumed, and if forever is set to true, we can just call makeDoc again, and avoid the 1-instruction loop in every makeDoc call.&lt;/p&gt;</comment>
                    <comment id="12698079" author="mikemccand" created="Sat, 11 Apr 2009 13:19:09 +0100"  >&lt;p&gt;OK sounds good!&lt;/p&gt;</comment>
                    <comment id="12698161" author="shaie" created="Sun, 12 Apr 2009 04:20:00 +0100"  >&lt;p&gt;Before I post a patch I wanted to test reading the 20090306 enwiki dump and write it as a one line document, all using the bz2 in/out streams. After 9 hours and 2881000 documents (!!!), I&apos;ve hit the following exception:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-1&quot;&lt;/span&gt; java.lang.ArrayIndexOutOfBoundsException
	at org.apache.xerces.impl.io.UTF8Reader.read(Unknown Source)
	at org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)
	at org.apache.xerces.impl.XMLEntityScanner.scanContent(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanContent(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
	at org.apache.lucene.benchmark.byTask.feeds.EnwikiDocMaker$Parser.run(EnwikiDocMaker.java:76)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.run(&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.java:810)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same exception like Mike hit, only from a different method. I&apos;m using the latest xerces jar Mike put. I&apos;m beginning to think this enwiki dump is jinxed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ll post the patch shortly and run on the 20070527 version to verify.&lt;/p&gt;</comment>
                    <comment id="12698163" author="shaie" created="Sun, 12 Apr 2009 04:26:28 +0100"  >&lt;p&gt;The patch touches LineDocMaker, EnwikiDocMaker and WriteLineDocTask.&lt;br/&gt;
Also, put ant-1.7.1 in benchmark/lib&lt;/p&gt;</comment>
                    <comment id="12698191" author="thetaphi" created="Sun, 12 Apr 2009 09:33:29 +0100"  >&lt;p&gt;Do you know &lt;a href=&quot;http://commons.apache.org/compress/&quot; class=&quot;external-link&quot;&gt;http://commons.apache.org/compress/&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;It is a commons project that replicates the internals from ANT and othe projects for general usage. It is not yet released, but available as snapshot jars. TIKA uses it, too. It also contains BZIPInputStream. I would prefer this instead of polluting the classpath with a full ant distribution.&lt;/p&gt;</comment>
                    <comment id="12698194" author="mikemccand" created="Sun, 12 Apr 2009 10:09:33 +0100"  >&lt;p&gt;Odd &amp;#8211; with that patched xerces JAR I was able to parse the full XML.  Is it possible your bunzipping code is messing up the XML?&lt;/p&gt;

&lt;p&gt;Shai, why did it take 9 hours to get to that exception?  Is bunzip that slow?  That seems crazy.  (Or are you running tests on a snail-of-a-machine? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;

&lt;p&gt;Can you run only your bunzip code and confirm it produces an XML file that&apos;s identical to what bunzip2 from the command line produces?  (And measure how long it takes vs the command line).&lt;/p&gt;</comment>
                    <comment id="12698211" author="shaie" created="Sun, 12 Apr 2009 12:30:08 +0100"  >&lt;p&gt;That&apos;s the way I wrap FIS with BZIP:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (doBzipCompression) {
        &lt;span class=&quot;code-comment&quot;&gt;// According to CBZip2InputStream&apos;s documentation, we should first
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// consume the first two file header chars (&apos;B&apos; and &apos;Z&apos;), as well as 
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// wrap the underlying stream with a BufferedInputStream, since CBZip2IS
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// uses the read() method exclusively.
&lt;/span&gt;        fileIS = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferedInputStream(fileIS, READER_BUFFER_BYTES);
        fileIS.read(); fileIS.read();
        fileIS = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CBZip2InputStream(fileIS);
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Is it possible your bunzipping code is messing up the XML?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I successfully read the file and compressed it with Java&apos;s GZIP classes, however I did not attempt to parse the XML itself. Did you run EnwikiDocMaker on the actual XML or the bz2 archive?&lt;br/&gt;
The 20070527 run should end soon (I hope - it reached 2.2M documents, so if it doesn&apos;t fail, I guess that bzip wrapping is very unlikely to affect the XML parsing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Shai, why did it take 9 hours to get to that exception? Is bunzip that slow? That seems crazy. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I run the test on my TP 60, which is not a snail-of-a-machine, but definitely not a strong server. You can download the patch and the jar and try it out on your machine.&lt;br/&gt;
But yes, I did notice bzip is very slow compared to gzip, however it has better compression ration. I do want to measure the times though, to give more accurate numbers, but in order to do that I need to finish a successful run first.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can you run only your bunzip code and confirm it ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would have done that, but the output XML is 17GB, and doing it twice is not an option on my TP. That&apos;s why I wanted this bzip thing in the first place &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;ll try to do that with the 20070527 version, which hopefully will be ~half the size ... &lt;/p&gt;</comment>
                    <comment id="12698216" author="mikemccand" created="Sun, 12 Apr 2009 12:55:06 +0100"  >&lt;blockquote&gt;&lt;p&gt;Did you run EnwikiDocMaker on the actual XML or the bz2 archive?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I downloaded the bz2 2008036 Wikipedia export, ran bunzip2 on the command line, then had to patch Xerces JAR to get it to parse the XML successfully.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I run the test on my TP 60, which is not a snail-of-a-machine, but definitely not a strong server. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm &amp;#8211; I wonder how long bunzip2 would take on the TP 60.  Time to upgrade &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Get yourself an X25 SSD!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I would have done that, but the output XML is 17GB, and doing it twice is not an option on my TP. That&apos;s why I wanted this bzip thing in the first place &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh OK &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698217" author="shaie" created="Sun, 12 Apr 2009 13:11:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;I downloaded the bz2 2008036&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m almost sure its a typo, but just to verify - did download the 20090306 (enwiki-20090306-pages-articles.xml.bz2), or 2008036?&lt;/p&gt;

&lt;p&gt;Anyway, I think I&apos;ve found a problem. In the javadocs, they document that the IS version uses the readByte() exclusively, but don&apos;t say anything regarding their OS version. I read the code and noticed it always calls write() and never uses the array version.&lt;br/&gt;
So I wrapped the FOS with a BOS (bufSize=64k) and then with BZOS. I did a short test, reading 2000 records from the 20070527 file, before and after the change:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Num Docs &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Before &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; After &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; %tg&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 2000 &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 106s &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 30s &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;72&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;I think that if that improvement is stable, than the 9 hours run should drop to ~3 hours, which seems right. I didn&apos;t measure the time to unzip the file using WinRAR (the first time I tried it), but it was a couple of hours run.&lt;/p&gt;

&lt;p&gt;Once the current run will complete, I&apos;ll kick off a new one with that code change and note the time difference. I&apos;m eager to see it speeds up, but I want to complete a successful run before &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698218" author="shaie" created="Sun, 12 Apr 2009 13:19:47 +0100"  >&lt;p&gt;Another thing I noticed is that WriteLineDocTask calls flush() after every document it writes. Any reason to do it? We use BufferedWriter, and calling flush() after every document is a bit expensive, I think.&lt;br/&gt;
I quickly measured the same 2000 documents run and it finished in 28 seconds, 7% improvement compared to the &apos;after&apos; run and 74% improvement compared to the &apos;before&apos;.&lt;br/&gt;
So if there&apos;s a good reason, we can keep it - the performance gain is not that high, but otherwise I think we should remove it, and count on PerfTask.close() being called at the end of the run (perhaps the absence of close() was the reason to call flush() in the first place?).&lt;/p&gt;</comment>
                    <comment id="12698223" author="mikemccand" created="Sun, 12 Apr 2009 15:45:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m almost sure its a typo, but just to verify - did download the 20090306 (enwiki-20090306-pages-articles.xml.bz2), or 2008036?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry I meant 20090306.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I did a short test, reading 2000 records from the 20070527 file, before and after the change:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another thing I noticed is that WriteLineDocTask calls flush() after every document it writes. Any reason to do it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm that should not be needed; I&apos;d say remove it?  But, implement close() to actually close the stream?&lt;/p&gt;</comment>
                    <comment id="12698227" author="shaie" created="Sun, 12 Apr 2009 16:11:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;But, implement close() to actually close the stream?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Already did, I had to because otherwise the bzip file wasn&apos;t sealed properly (that&apos;s why I started the other thread about tracking task resources). It already exists in the attached patch.&lt;/p&gt;

&lt;p&gt;I&apos;m finishing a run with the updated code (wrapping w/ BOS), so once that finishes, I&apos;ll post an updated patch and some numbers.&lt;/p&gt;</comment>
                    <comment id="12698259" author="mikemccand" created="Sun, 12 Apr 2009 20:26:18 +0100"  >&lt;blockquote&gt;&lt;p&gt;Already did, I had to because otherwise the bzip file wasn&apos;t sealed properly (that&apos;s why I started the other thread about tracking task resources). It already exists in the attached patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh yeah right, I already forgot.  Feels so long ago &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698265" author="shaie" created="Sun, 12 Apr 2009 20:55:30 +0100"  >&lt;p&gt;Here some numbers:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Reading the enwiki bz2 file with CBZip2InputStream, wrapped as a BufferedReader and reading one line at a time took &lt;b&gt;28m&lt;/b&gt;. Unzipping with WinRAR took about &lt;b&gt;~30m&lt;/b&gt; (this includes also writing the uncompressed data to disk). So in that respect, the code does not fall short of other bunzip tools (at least not WinRAR).&lt;/li&gt;
	&lt;li&gt;Before the change, the time to read the compressed data, parse and write to a one-line file, compressed took 7h (3.1M documents were read). After the change (wrapping with BOS and removing flush()) it took 2h, so significant improvement here.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Overall, I think the performance of the BZIP classes is reasonable. Most of the time spent in the algorithm is in compressing the data, which is usually a process done only once. The result is a 2.5GB enwiki file compressed to a 2.31GB one-line file (8.5GB uncompressed content).&lt;/p&gt;

&lt;p&gt;I compared the time it takes to read 100k lines from the compressed and un-compressed one-line file: compressed-2.26m, un-compressed-1.36m (&lt;font color=&quot;red&quot;&gt;-66%&lt;/font&gt;). The difference is significant, however I&apos;m not sure how much is it from the overall process (i.e., reading the documents and indexing them). On my machine it would take 1.1 hours to read the data, but I&apos;m sure it will take more to index it, and the indexing time is the same whether we read the data from a bzip archive or not.&lt;/p&gt;

&lt;p&gt;I&apos;ll attach the patch shortly, and I think overall this is a good addition. It is off by default, and configurable, so if someone doesn&apos;t care about disk space, he can always run the indexing algorithm on an un-compressed one-line file.&lt;/p&gt;</comment>
                    <comment id="12698268" author="shaie" created="Sun, 12 Apr 2009 21:06:57 +0100"  >&lt;p&gt;Patch includes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Wrapping the FileOutputStream with a BufferedOutputStream.&lt;/li&gt;
	&lt;li&gt;Removing the calls to flush().&lt;/li&gt;
	&lt;li&gt;Enhancement to EnwikiDocMaker&apos;s startElement and endElement - instead of calling String.equals on the qualified name and compare on 5 different strings, I added a static map from String to Integer and a static method getElementType which returns an int. I then changed those methods to do a &apos;switch&apos; on the type. I haven&apos;t measured the perf. gain, but it&apos;s clear it should improve things ...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There is an open question regarding the ant-1.7.1.jar dependency. Uwe mentioned the commons Compress project, which handles the bzip format (as well as others). I took a look and found no place to download a jar, as well as this looks like a &apos;young&apos; project, with very little documentation. This is not to say the code is of low quality or not be trusted, it&apos;s just that I prefer the ant dependency, at least until this project matures enough. And anyway I guess everyone who uses Lucene has Ant in his system, so this doesn&apos;t look like a major dependency.&lt;/p&gt;

&lt;p&gt;However, if you think otherwise, then we should get a jar from there (checking out the code and building it manually is the only way I see, but please correct me if I&apos;m wrong) and adapt the code to use it, do perf. measurements again etc.&lt;/p&gt;</comment>
                    <comment id="12698314" author="shaie" created="Mon, 13 Apr 2009 04:35:02 +0100"  >&lt;p&gt;BTW, the enhancements to EnwikiDocMaker yielded another 2% improvement to the process of converting the enwiki file to a one-line file. Just a FYI.&lt;br/&gt;
I basically wait with 1595 (refactoring to benchmark) until this one is committed, so the sooner the better &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698360" author="mikemccand" created="Mon, 13 Apr 2009 11:07:54 +0100"  >&lt;p&gt;Should we consider using compress form Apache commons (from Uwe&apos;s comment &lt;a href=&quot;#action_12698191&quot;&gt;above&lt;/a&gt;) instead of full ant jar?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I basically wait with 1595 (refactoring to benchmark) until this one is committed, so the sooner the better&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does this issue depend on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1595&quot; title=&quot;Split DocMaker into ContentSource and DocMaker&quot;&gt;&lt;del&gt;LUCENE-1595&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                    <comment id="12698362" author="thetaphi" created="Mon, 13 Apr 2009 11:11:28 +0100"  >&lt;p&gt;The problem is, that the project is currently moving to commons top-level. The SVN pathes changed, but website was not updated and so on. The snapshot jars are not accessible at the moment.&lt;br/&gt;
I could quickly build a JAR and attach it here. To get the code running, you only have to change the package imports. Ideally one would use the Factory to create the decompressor (and then he do not need to skip the 2 bytes with &quot;BZ&quot;).&lt;br/&gt;
Uwe&lt;/p&gt;</comment>
                    <comment id="12698363" author="shaie" created="Mon, 13 Apr 2009 11:19:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;Does this issue depend on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1595&quot; title=&quot;Split DocMaker into ContentSource and DocMaker&quot;&gt;&lt;del&gt;LUCENE-1595&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, the other way around. Well ... it&apos;s not an actual dependency, just that 1595 will touch a lot of files, and I want to minimize the noise of working on two issues that touch the same files (1595 will touch all the files this one touches) simultaneously. It&apos;s just a matter of convenience ...&lt;/p&gt;

&lt;p&gt;Besides, I don&apos;t see what else can be done as part of this issue. The performance is reasonable, the code is quite simple. The patch includes some more enhancements to those files that is unrelated to bzip per sei, but are still required.&lt;/p&gt;

&lt;p&gt;BTW, I successfully executed indexLineFile.alg on the 20070527 one-line bz2 file and the overall indexing process ended in 1h, which seems reasonable to me.&lt;/p&gt;

&lt;p&gt;Regarding Apache Compress, I asked the same question, so it&apos;s not fair to return it with a question &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. I don&apos;t think we should decide that now. It can be changed in 1595 if we think Compress is the better approach. Personally I prefer the ant jar, even though I realize it&apos;s adding a large dependency for just 3-4 classes ...&lt;/p&gt;</comment>
                    <comment id="12698365" author="shaie" created="Mon, 13 Apr 2009 11:21:09 +0100"  >&lt;p&gt;Uwe, if you can attach the jar here, I can make the necessary code changes and run some tests again. We can the decide based on whether it&apos;s working with the Compress classes or not.&lt;/p&gt;</comment>
                    <comment id="12698366" author="thetaphi" created="Mon, 13 Apr 2009 11:29:12 +0100"  >&lt;p&gt;Here the latest snapshot build of commons compress. All test passed through &quot;mvn install&quot; run.&lt;br/&gt;
About the initial &quot;BZh&quot; bytes. In the javadocs still stands, that they should be read before opening the strea, But the examples on the website and the BZip2Decompressor code is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void init() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; == in) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;No InputStream&quot;&lt;/span&gt;);
        }
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (in.available() == 0) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Empty InputStream&quot;&lt;/span&gt;);
        }
        checkMagicChar(&apos;B&apos;, &lt;span class=&quot;code-quote&quot;&gt;&quot;first&quot;&lt;/span&gt;);
        checkMagicChar(&apos;Z&apos;, &lt;span class=&quot;code-quote&quot;&gt;&quot;second&quot;&lt;/span&gt;);
        checkMagicChar(&apos;h&apos;, &lt;span class=&quot;code-quote&quot;&gt;&quot;third&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I think, the reading of the initial two bytes can be left out. If something is wrong, this class should throw an IOException.&lt;/p&gt;

&lt;p&gt;Here some usage: &lt;a href=&quot;http://wiki.apache.org/commons/Compress&quot; class=&quot;external-link&quot;&gt;http://wiki.apache.org/commons/Compress&lt;/a&gt; (this shows, that decompressing a bzip2 file does not need to skip the header),&lt;br/&gt;
here the javadocs: &lt;a href=&quot;http://commons.apache.org/compress/apidocs/index.html&quot; class=&quot;external-link&quot;&gt;http://commons.apache.org/compress/apidocs/index.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12698376" author="shaie" created="Mon, 13 Apr 2009 12:52:28 +0100"  >&lt;p&gt;Ok I&apos;m convinced. I moved to commons-compress and it works great. The jar is smaller and it does add the logical dependency. Since this project is still young we should expect changes, which is good since it means we can actually improve the In(Out) compressing streams to use more efficient methods, such as read(byte[]) and write(byte[]).&lt;/p&gt;</comment>
                    <comment id="12698381" author="mikemccand" created="Mon, 13 Apr 2009 13:19:33 +0100"  >&lt;p&gt;Patch looks good!&lt;/p&gt;

&lt;p&gt;Could you add a test case that eg writes a bzip&apos;d line file, then reads it back &amp;amp; indexes it, or something along those lines?&lt;/p&gt;

&lt;p&gt;Also: should we make &quot;use bzip&quot; pay attention to suffix when defaulting itself?  Ie if I explicitly specify &quot;bzip.compression&quot; then listen to me, but if I didn&apos;t specify it and my line file source ends with .bz2, default it to true?  (And likewise for WriteLineDoc)?&lt;/p&gt;</comment>
                    <comment id="12698404" author="thetaphi" created="Mon, 13 Apr 2009 15:55:42 +0100"  >&lt;p&gt;I created my first bug report for Compress handling the inconsistency in javadocs and the compressor part with the Bzip2 header (compression does not add header, decompression needs header): &lt;a href=&quot;https://issues.apache.org/jira/browse/COMPRESS-69&quot; title=&quot;Inconsistent handling of BZ2-Header after redesign&quot;&gt;&lt;del&gt;COMPRESS-69&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12698420" author="shaie" created="Mon, 13 Apr 2009 17:08:18 +0100"  >&lt;p&gt;argh, you bit me here - I planned to do so myself &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
for some reason their OutputStream has the file headers commented out with a comment saying &quot;this is added by the caller&quot;, however their InputStream reads them ... strange. Anyway, once that&apos;s fixed and we upgrade to a proper jar, the unit test I am working on now will fail, and it will remind us to remove writing the headers in WriteLineDocTask.&lt;/p&gt;

&lt;p&gt;Mike - I am working on the unit test as well as defaulting by extension. I hope a patch will be available sometime later today.&lt;/p&gt;</comment>
                    <comment id="12698422" author="thetaphi" created="Mon, 13 Apr 2009 17:11:18 +0100"  >&lt;p&gt;It is fixed &lt;b&gt;now&lt;/b&gt;, including the JavaDocs: &lt;a href=&quot;https://issues.apache.org/jira/browse/COMPRESS-69&quot; title=&quot;Inconsistent handling of BZ2-Header after redesign&quot;&gt;&lt;del&gt;COMPRESS-69&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12698430" author="shaie" created="Mon, 13 Apr 2009 17:35:38 +0100"  >&lt;p&gt;I updated the code from SVN, but I still see wrong javadocs. In the class javadocs, for both classes, first line still says &quot;(without file headers)&quot;. Also, Bzip2TestCase has a xtestBzipCreation() - the &apos;x&apos; prevents this test from running as JUnit - is that intentional? I removed the &apos;x&apos; and the test passes.&lt;/p&gt;</comment>
                    <comment id="12698433" author="thetaphi" created="Mon, 13 Apr 2009 17:44:30 +0100"  >&lt;p&gt;I added as comment to &lt;a href=&quot;https://issues.apache.org/jira/browse/COMPRESS-69&quot; title=&quot;Inconsistent handling of BZ2-Header after redesign&quot;&gt;&lt;del&gt;COMPRESS-69&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;you forgot to enable the test again... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He disabled the test (he added the de/encode test directly after opening the issue because of my comment of a missing test) because it failed until he had a solution.&lt;/p&gt;</comment>
                    <comment id="12698460" author="thetaphi" created="Mon, 13 Apr 2009 18:53:46 +0100"  >&lt;p&gt;Now it&apos;s really fixed: compression and decompression are working similar, test case enabled, and javadocs fixed. That was really fast issue fixing, congratulations to COMPRESS &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698482" author="shaie" created="Mon, 13 Apr 2009 19:35:45 +0100"  >&lt;p&gt;Great !&lt;br/&gt;
Uwe, can you please update the jar in this issue? I will make sure the test passes with it.&lt;/p&gt;</comment>
                    <comment id="12698493" author="thetaphi" created="Mon, 13 Apr 2009 19:49:04 +0100"  >&lt;p&gt;Here is it. I thought you had checked it out, too, and created a JAR yourself. I have not done anything other. It&apos;s the (renamed) JAR file from the &quot;target&quot; dir after &quot;mvn install&quot;.&lt;/p&gt;</comment>
                    <comment id="12698533" author="shaie" created="Mon, 13 Apr 2009 20:57:16 +0100"  >&lt;p&gt;Sorry about that. I didn&apos;t know what to do with the pom.xml. Given your comment above, I&apos;ll install maven and use it next time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12698553" author="shaie" created="Mon, 13 Apr 2009 22:16:49 +0100"  >&lt;p&gt;Patch includes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;BenchmarkTestCase (currently just sets the working directory, but can be added functionality in the future).&lt;/li&gt;
	&lt;li&gt;LineDocMakerTest&lt;/li&gt;
	&lt;li&gt;WriteLineDocTaskTest&lt;/li&gt;
	&lt;li&gt;Update code according to the latest commons-compress.jar (i.e., not read/write file header chars).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12698715" author="mikemccand" created="Tue, 14 Apr 2009 10:41:05 +0100"  >&lt;p&gt;I had some trouble w/ the patch...&lt;/p&gt;

&lt;p&gt;First, I had to edit contrib/benchmark&apos;s build.xml to add the compress JAR onto the classpath (things wouldn&apos;t compile otherwise).&lt;/p&gt;

&lt;p&gt;Then I see failures in TestPerfTasksParse, eg:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] java.lang.Exception: Error: cannot understand algorithm!
    [junit] 	at org.apache.lucene.benchmark.byTask.Benchmark.&amp;lt;init&amp;gt;(Benchmark.java:63)
    [junit] 	at org.apache.lucene.benchmark.byTask.TestPerfTasksParse.doTestAllTasksSimpleParse(TestPerfTasksParse.java:171)
    [junit] 	at org.apache.lucene.benchmark.byTask.TestPerfTasksParse.testAllTasksSimpleParse(TestPerfTasksParse.java:140)
    [junit] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    [junit] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    [junit] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    [junit] 	at java.lang.reflect.Method.invoke(Method.java:597)
    [junit] 	at junit.framework.TestCase.runTest(TestCase.java:164)
    [junit] 	at junit.framework.TestCase.runBare(TestCase.java:130)
    [junit] 	at junit.framework.TestResult$1.protect(TestResult.java:106)
    [junit] 	at junit.framework.TestResult.runProtected(TestResult.java:124)
    [junit] 	at junit.framework.TestResult.run(TestResult.java:109)
    [junit] 	at junit.framework.TestCase.run(TestCase.java:120)
    [junit] 	at junit.framework.TestSuite.runTest(TestSuite.java:230)
    [junit] 	at junit.framework.TestSuite.run(TestSuite.java:225)
    [junit] 	at org.junit.internal.runners.OldTestClassRunner.run(OldTestClassRunner.java:35)
    [junit] 	at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:32)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:421)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:912)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:766)
    [junit] Caused by: java.lang.reflect.InvocationTargetException
    [junit] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
    [junit] 	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
    [junit] 	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
    [junit] 	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
    [junit] 	at org.apache.lucene.benchmark.byTask.utils.Algorithm.&amp;lt;init&amp;gt;(Algorithm.java:69)
    [junit] 	at org.apache.lucene.benchmark.byTask.Benchmark.&amp;lt;init&amp;gt;(Benchmark.java:61)
    [junit] 	... 19 more
    [junit] Caused by: java.lang.IllegalArgumentException: line.file.out must be set
    [junit] 	at org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTask.&amp;lt;init&amp;gt;(WriteLineDocTask.java:73)
    [junit] 	... 25 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the new LineDocMakerTest fails with this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] Testcase: testBZip2WithBzipCompressionDisabled(org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest):	FAILED
    [junit] expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;
    [junit] junit.framework.AssertionFailedError: expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;
    [junit] 	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.doIndexAndSearchTest(LineDocMakerTest.java:96)
    [junit] 	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.testBZip2WithBzipCompressionDisabled(LineDocMakerTest.java:119)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WriteLineDocTest shows a similar failure.  Not sure what&apos;s up...&lt;/p&gt;</comment>
                    <comment id="12698725" author="shaie" created="Tue, 14 Apr 2009 11:16:40 +0100"  >&lt;p&gt;That&apos;s strange ...&lt;br/&gt;
About the build.xml, I think the problem lies in line 110, where the classpath defines explicit jars. I changed it to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &amp;lt;path id=&lt;span class=&quot;code-quote&quot;&gt;&quot;classpath&quot;&lt;/span&gt;&amp;gt;
        &amp;lt;pathelement path=&lt;span class=&quot;code-quote&quot;&gt;&quot;${common.dir}/build/classes/java&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;pathelement path=&lt;span class=&quot;code-quote&quot;&gt;&quot;${common.dir}/build/classes/demo&quot;&lt;/span&gt;/&amp;gt;
        &amp;lt;pathelement path=&lt;span class=&quot;code-quote&quot;&gt;&quot;${common.dir}/build/contrib/highlighter/classes/java&quot;&lt;/span&gt;/&amp;gt;
    	&amp;lt;fileset dir=&lt;span class=&quot;code-quote&quot;&gt;&quot;lib&quot;&lt;/span&gt;&amp;gt;
    		&amp;lt;include name=&lt;span class=&quot;code-quote&quot;&gt;&quot;**/*.jar&quot;&lt;/span&gt;/&amp;gt;
    	&amp;lt;/fileset&amp;gt;
    &amp;lt;/path&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and it compiled successfully. I think this change is good since it will prevent such problems in the future (in case more dependencies will be added).&lt;/p&gt;

&lt;p&gt;About the test failures - they pass for me in eclipse however fail in Ant. I believe I know the reason - previously, WriteLineDocTask&apos;s ctor logic was in its setUp method. I moved it to ctor since setUp is called for every document, and the initialization there did not seem right to me. The &quot;line.file.out&apos; property is indeed mandatory, and hence the exception.&lt;br/&gt;
The reason it doesn&apos;t fail in eclipse is because this task is not explicitly defined in findTasks(), and I don&apos;t have the &quot;tasks.dir&quot; env variable defined. As soon as I add this line:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
tsks.add(  &lt;span class=&quot;code-quote&quot;&gt;&quot; WriteLineDoc             &quot;&lt;/span&gt;  );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to findTasks(), the test fails.&lt;/p&gt;

&lt;p&gt;I see several ways to solve it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Make line.file.doc optional, and if not set create ByteArrayOutputStream, instead of FileOutputStream. This can also help the tests not create unnecessary files.&lt;/li&gt;
	&lt;li&gt;Move the logic back to setup while checking a boolean if we&apos;ve been initialized yet. I don&apos;t like it very much - I think setup and teardown should be reseved for per-doLogic call.&lt;/li&gt;
	&lt;li&gt;Add INDENT+&quot;line.file.out=test/line.file&quot; + NEW_LINE to TestPerfTasksParse.propPart. I don&apos;t like it too since propPart is reserved for properties that are common for all tasks.&lt;br/&gt;
I like (1) most.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12698730" author="mikemccand" created="Tue, 14 Apr 2009 11:43:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think this change is good since it will prevent such problems in the future (in case more dependencies will be added).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds good.&lt;/p&gt;

&lt;p&gt;I agree WriteLineDocTask should pull its config in ctor, not setUp.&lt;/p&gt;

&lt;p&gt;But: I don&apos;t think WriteLineDocTask should be created when it&apos;s not going to be used, ie the TestPerfTasksParse.doTestAllTasksSimpleParse seems wrong?&lt;/p&gt;</comment>
                    <comment id="12698740" author="shaie" created="Tue, 14 Apr 2009 12:30:25 +0100"  >&lt;p&gt;Not sure what you mean. The test does use any Task, just attempts to parse algorithm texts with those tasks defined. Do you suggest we exclude WriteLineDocTask from the test?&lt;br/&gt;
Perhaps we can wrap the new Benchmark() call with a try-catch on IAE and log such tests but don&apos;t fail? That way, if a certain task has mandatory properties, it shouldn&apos;t fail the test ...&lt;br/&gt;
Another option is to define for each tested task mandatory properties, in addition to the common ones used for all tasks ...&lt;/p&gt;

&lt;p&gt;Unless I misunderstand you, I don&apos;t see why this test is wrong.&lt;/p&gt;</comment>
                    <comment id="12698743" author="mikemccand" created="Tue, 14 Apr 2009 12:44:22 +0100"  >&lt;p&gt;The test seems to assume you can take any Task in the source tree, and make an alg that simply creates that task.&lt;/p&gt;

&lt;p&gt;I think that assumption is in fact wrong, because tasks like WriteLineDocTask indeed require certain configuration (line.file.out) be set, and the test can&apos;t know that.  Other tasks in the future will presumably hit the same issue.&lt;/p&gt;

&lt;p&gt;Also, thinking about the test, I think it doesn&apos;t add much value?  Elsewhere we heavily test that the .alg parser works properly.  And all this test does is take every task, and stick it in either &quot;XXX&quot;,  &quot;[ XXX ] : 2&quot;  or &quot;&lt;/p&gt;
{ XXX }
&lt;p&gt; : 3&quot;, parse it, and verify it parsed properly.&lt;/p&gt;

&lt;p&gt;I think we should simply turn those three tests off?  Or, if that seems to drastic, simply skipping WriteLineDocTask seems OK too?&lt;/p&gt;</comment>
                    <comment id="12698753" author="shaie" created="Tue, 14 Apr 2009 13:25:58 +0100"  >&lt;p&gt;We can turn them off, or wrap new Benchmark with try-catch Exception, logging a failed task. Alternatively, we can add an &apos;exclude&apos; list which will define tasks that should be discarded by the test, and add WriteLineDocTask to it.&lt;/p&gt;

&lt;p&gt;However, if you think those are useless, i.e. we test .alg parsing elsewhere (and I agree these tests don&apos;t add much value), then I agree we should remove them, rather than working hard to mask the test&apos;s limitations.&lt;/p&gt;</comment>
                    <comment id="12698794" author="mikemccand" created="Tue, 14 Apr 2009 15:52:38 +0100"  >&lt;p&gt;OK, let&apos;s just remove them.  Can you post new patch?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12698830" author="shaie" created="Tue, 14 Apr 2009 17:57:23 +0100"  >&lt;p&gt;All benchmark tests pass. Note: when you apply the patch, make sure you include the latest commons-compress jar Uwe uploaded.&lt;/p&gt;</comment>
                    <comment id="12698841" author="mikemccand" created="Tue, 14 Apr 2009 18:27:36 +0100"  >&lt;p&gt;Hmm I&apos;m still hitting some errors, eg:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[junit] Testcase: testRegularFileWithBZipCompressionEnabled(org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest):	FAILED
[junit] expected:&amp;lt;3&amp;gt; but was:&amp;lt;1&amp;gt;
[junit] junit.framework.AssertionFailedError: expected:&amp;lt;3&amp;gt; but was:&amp;lt;1&amp;gt;
[junit] 	at org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.doReadTest(WriteLineDocTaskTest.java:87)
[junit] 	at org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testRegularFileWithBZipCompressionEnabled(WriteLineDocTaskTest.java:144)
[junit] 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[junit] Testcase: testBZip2WithBzipCompressionDisabled(org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest):	FAILED
[junit] expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;
[junit] junit.framework.AssertionFailedError: expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;
[junit] 	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.doIndexAndSearchTest(LineDocMakerTest.java:96)
[junit] 	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.testBZip2WithBzipCompressionDisabled(LineDocMakerTest.java:119)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12698893" author="shaie" created="Tue, 14 Apr 2009 20:38:48 +0100"  >&lt;p&gt;That&apos;s strange ... I did the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Checkout trunk to a new project.&lt;/li&gt;
	&lt;li&gt;Download latest commons-compress jar Uwe added.&lt;/li&gt;
	&lt;li&gt;Applied the patch.&lt;/li&gt;
	&lt;li&gt;Ran &quot;ant test&quot;.&lt;br/&gt;
The result is: BUILD SUCCESSFUL and I see those two test cases pass ... I also ran all tests from eclipse, they pass too.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;testRegularFileWithBZipCompressionEnabled simulates an attempt to read a bz2 file as a regular file. The very first readLine() should throw a MalformedException or something ... that&apos;s what the test is counting on. It seems that in your case this line succeeds, reading something, and then fails on String.split(), since probably it didn&apos;t read something meaningful. I don&apos;t understand why this would happen though ....&lt;br/&gt;
Can you run this test alone, w/o the rest? Perhaps debug-trace it? The test does not delete the in/output file before and after the test, but relies on FileInputStream(String/File) ctor which is supposed to re-create the file, even if it exists. Could it be that in your case it doesn&apos;t happen?&lt;/p&gt;

&lt;p&gt;I assume the second exception is thrown for the same reason. Following the steps I&apos;ve done above to apply the patch, I don&apos;t understand why the test fails on your machine ...&lt;/p&gt;</comment>
                    <comment id="12698919" author="mikemccand" created="Tue, 14 Apr 2009 21:45:00 +0100"  >&lt;p&gt;So, for LineDocMakerTest.testBZip2WithBzipCompressionDisabled, indeed LineDocMaker opens the binary file, but then no exception is hit: it looks for a tab delimeter, and when it can&apos;t find one, sets body/title/date to &quot;&quot; and adds the doc anyway.&lt;/p&gt;

&lt;p&gt;In your case you hit some exception &amp;#8211; can you e.printStackTrace(System.out) and post back what exception that is?  Maybe somehow your bzip2 is putting a tab in the binary but mine&apos;s not?&lt;/p&gt;</comment>
                    <comment id="12698925" author="shaie" created="Tue, 14 Apr 2009 21:55:39 +0100"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
sun.io.MalformedInputException
	at sun.io.ByteToCharUTF8.convert(ByteToCharUTF8.java:262)
	at sun.nio.cs.StreamDecoder$ConverterSD.convertInto(StreamDecoder.java:314)
	at sun.nio.cs.StreamDecoder$ConverterSD.implRead(StreamDecoder.java:364)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:250)
	at java.io.InputStreamReader.read(InputStreamReader.java:212)
	at java.io.BufferedReader.fill(BufferedReader.java:157)
	at java.io.BufferedReader.readLine(BufferedReader.java:320)
	at java.io.BufferedReader.readLine(BufferedReader.java:383)
	at org.apache.lucene.benchmark.byTask.feeds.LineDocMaker.makeDocument(LineDocMaker.java:187)
	at org.apache.lucene.benchmark.byTask.tasks.AddDocTask.setup(AddDocTask.java:61)
	at org.apache.lucene.benchmark.byTask.tasks.PerfTask.runAndMaybeStats(PerfTask.java:92)
	at org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doSerialTasks(TaskSequence.java:148)
	at org.apache.lucene.benchmark.byTask.tasks.TaskSequence.doLogic(TaskSequence.java:129)
	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.doIndexAndSearchTest(LineDocMakerTest.java:92)
	at org.apache.lucene.benchmark.byTask.feeds.LineDocMakerTest.testBZip2WithBzipCompressionDisabled(LineDocMakerTest.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:79)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:618)
	at junit.framework.TestCase.runTest(TestCase.java:164)
	at junit.framework.TestCase.runBare(TestCase.java:130)
	at junit.framework.TestResult$1.protect(TestResult.java:106)
	at junit.framework.TestResult.runProtected(TestResult.java:124)
	at junit.framework.TestResult.run(TestResult.java:109)
	at junit.framework.TestCase.run(TestCase.java:120)
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:460)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:673)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:386)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12698930" author="shaie" created="Tue, 14 Apr 2009 22:05:58 +0100"  >&lt;p&gt;A long shot - can you please print the line read in makeDocument? Could it be that the line is not null, but 0 length (or contains just whitespaces)? I just thought that we&apos;re running on two different OSs (I run on Windows and you on Linux/Mac?) and perhaps on your OS the first readLine() succeeds, reading a blank line or something, and the second will fail, attempting to read the actual information?&lt;br/&gt;
Weird though ... &lt;/p&gt;</comment>
                    <comment id="12698943" author="mikemccand" created="Tue, 14 Apr 2009 22:22:15 +0100"  >&lt;p&gt;Here&apos;s the line I see, nice and binary (copy/past lost the exact chars I&apos;m sure...): BZh91AY&amp;amp;SY@9J&lt;/p&gt;</comment>
                    <comment id="12698946" author="mikemccand" created="Tue, 14 Apr 2009 22:25:39 +0100"  >&lt;p&gt;Yeah I&apos;m on OS X Leopard.  I just tested on a Debian linux derivative and also see the test failing.  Weird.  Not quite &quot;write once run anywhere&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12699024" author="shaie" created="Wed, 15 Apr 2009 03:06:49 +0100"  >&lt;p&gt;Well ... that worries me ... when I open the bz2 file (with notepad++), I see the same line, but on my machine, readLine() fails with that MIE. It&apos;s as if on my machine the readLine() call attempts to fill the buffer of BR, and then hits the exception, while on your machine it just stops in the middle.&lt;/p&gt;

&lt;p&gt;So I wonder how to fix it - LineDocMaker&apos;s logic is ok - makeDocument() just reads lines.. There&apos;s no point adding code which tries to compensate on any OS specific weridness. Perhaps we can change the &apos;else&apos; part (which assigns title, body, date to &quot;&quot;) to throw a RuntimeException (or MIE) in that case, since obviously this shouldn&apos;t happen and if it does - it&apos;s really a bug in the file format?&lt;/p&gt;

&lt;p&gt;Or, I can just remove the test ... but I think the above suggestion makes sense, and will solve it. Mike, if you agree, can you quickly apply that to your env. and note if the test fails? (it must fail, but I just want to be sure).&lt;/p&gt;</comment>
                    <comment id="12699175" author="mikemccand" created="Wed, 15 Apr 2009 13:55:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike, if you agree, can you quickly apply that to your env. and note if the test fails?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean confirm the test passes on adding the RuntimeException on the else clause, right?&lt;/p&gt;

&lt;p&gt;Yes, indeed the test passes with this change.  And I like the change (making LineDocMaker more brittle on receiving a malformed line).  So let&apos;s go forward with that?&lt;/p&gt;</comment>
                    <comment id="12699233" author="shaie" created="Wed, 15 Apr 2009 16:05:27 +0100"  >&lt;p&gt;Let&apos;s try with this one. Changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Added testInvalidFormat to LineDocMakerTest&lt;/li&gt;
	&lt;li&gt;Changed LineDocMaker to throw RuntimeException in case a line does not have two TABs.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12699409" author="mikemccand" created="Wed, 15 Apr 2009 22:45:06 +0100"  >&lt;p&gt;I&apos;m still seeing the one WriteLineDocTest failure:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] Testcase: testRegularFileWithBZipCompressionEnabled(org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest):	FAILED
    [junit] expected:&amp;lt;3&amp;gt; but was:&amp;lt;1&amp;gt;
    [junit] junit.framework.AssertionFailedError: expected:&amp;lt;3&amp;gt; but was:&amp;lt;1&amp;gt;
    [junit] 	at org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.doReadTest(WriteLineDocTaskTest.java:87)
    [junit] 	at org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest.testRegularFileWithBZipCompressionEnabled(WriteLineDocTaskTest.java:144)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think it&apos;s a similar issue &amp;#8211; the doReadTest must hit an exception in readline() on your OS, but not mine.&lt;/p&gt;</comment>
                    <comment id="12699505" author="shaie" created="Thu, 16 Apr 2009 04:16:10 +0100"  >&lt;p&gt;I removed this test from WriteLineDocTaskTest, since it doesn&apos;t really belong there. It tested that if WLDT created a bz2 file, an attempt to read it as regular would fail. But reading is not part of WLDT&apos;s logic, and that test case belongs (and already exists) in LDM test.&lt;/p&gt;

&lt;p&gt;I&apos;m tempted to say &quot;this patch should be fine&quot;, but given the history of this issue and the OS weird-ness I&apos;m being careful &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12699604" author="mikemccand" created="Thu, 16 Apr 2009 10:46:01 +0100"  >&lt;p&gt;All tests pass!  And patch looks good.  I&apos;ll commit shortly.  Thanks Shai!&lt;/p&gt;</comment>
                    <comment id="12699620" author="shaie" created="Thu, 16 Apr 2009 11:12:53 +0100"  >&lt;p&gt;Mike, did you commit the commons-compress jar too?&lt;/p&gt;</comment>
                    <comment id="12699643" author="mikemccand" created="Thu, 16 Apr 2009 12:29:04 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike, did you commit the commons-compress jar too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Woops, forgot, and now fixed &amp;#8211; thanks for catching that!&lt;/p&gt;</comment>
                    <comment id="12700349" author="jasonrutherglen" created="Fri, 17 Apr 2009 23:12:43 +0100"  >&lt;p&gt;Related to the new xerces-2.9.1-patched-&lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt;.jar in&lt;br/&gt;
contrib/benchmark I get a&lt;br/&gt;
&quot;java.lang.UnsupportedClassVersionError: Bad version number in&lt;br/&gt;
.class file&quot; message when building. &lt;/p&gt;

&lt;p&gt;Can you please verify?&lt;/p&gt;

&lt;p&gt;Environment: Java(TM) 2 Runtime Environment, Standard Edition&lt;br/&gt;
(build 1.5.0_16-b06-284) Java HotSpot(TM) Client VM (build&lt;br/&gt;
1.5.0_16-133, mixed mode, sharing)&lt;/p&gt;</comment>
                    <comment id="12700415" author="shaie" created="Sat, 18 Apr 2009 03:39:46 +0100"  >&lt;p&gt;Hmmm ... Mike built that file from the xerces project, after patching it with &lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt;. I don&apos;t know though which JRE he used to build it. Can you please post the full stack trace (mostly interested in the .class file with the problem and the major/minor version it reports).&lt;/p&gt;

&lt;p&gt;I use 1.5 as well and don&apos;t experience this error. I &quot;cd benchmark&quot; then &quot;ant jar&quot; and it finished successfully.&lt;/p&gt;</comment>
                    <comment id="12700460" author="mikemccand" created="Sat, 18 Apr 2009 12:13:27 +0100"  >&lt;p&gt;For the record, here&apos;s the patch I had applied to XercesJ 2.9.1 sources:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
--- UTF8Reader.java	2006-11-23 00:36:53.000000000 +0100
+++ /home/rainman/lucene/xerces-2_9_0/src/org/apache/xerces/impl/io/UTF8Reader.java	2008-04-04 00:40:58.000000000 +0200
@@ -534,6 +534,16 @@
                     invalidByte(4, 4, b2);
                 }
 
+                &lt;span class=&quot;code-comment&quot;&gt;// check &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; output buffer is large enough to hold 2 surrogate chars
&lt;/span&gt;+                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( out + 1 &amp;gt;= offset + length ){
+                    fBuffer[0] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)b0;
+                    fBuffer[1] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)b1;
+                    fBuffer[2] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)b2;
+                    fBuffer[3] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)b3;
+                    fOffset = 4;
+                    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; out - offset;
+		}
+
                 &lt;span class=&quot;code-comment&quot;&gt;// decode bytes into surrogate characters
&lt;/span&gt;                 &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; uuuuu = ((b0 &amp;lt;&amp;lt; 2) &amp;amp; 0x001C) | ((b1 &amp;gt;&amp;gt; 4) &amp;amp; 0x0003);
                 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (uuuuu &amp;gt; 0x10) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12700461" author="mikemccand" created="Sat, 18 Apr 2009 12:17:14 +0100"  >&lt;p&gt;I just committed a JDK 1.4 build of the patched XercesJ jar (I think I had used 1.5 previously, though I don&apos;t understand why Jason was having trouble using it).&lt;/p&gt;

&lt;p&gt;Jason can you try with this new JAR?&lt;/p&gt;</comment>
                    <comment id="12711985" author="thetaphi" created="Fri, 22 May 2009 09:02:11 +0100"  >&lt;p&gt;Commons-Compress 1.0 is now released, we should use the official JAR file:&lt;br/&gt;
&lt;a href=&quot;http://commons.apache.org/compress/download_compress.cgi&quot; class=&quot;external-link&quot;&gt;http://commons.apache.org/compress/download_compress.cgi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Should I update and test compilation?&lt;/p&gt;</comment>
                    <comment id="12712002" author="mikemccand" created="Fri, 22 May 2009 10:27:43 +0100"  >&lt;p&gt;Excellent!  Yes I think so?&lt;/p&gt;</comment>
                    <comment id="12712019" author="thetaphi" created="Fri, 22 May 2009 11:33:18 +0100"  >&lt;p&gt;I replaced the dev version by 1.0 and it compiled fine. All tests fine. But I did not test the enwiki (takes too long), but according to the changelog of compress, there were no changes in Bzip code.&lt;br/&gt;
I commit shortly.&lt;/p&gt;</comment>
                    <comment id="12712020" author="thetaphi" created="Fri, 22 May 2009 11:39:39 +0100"  >&lt;p&gt;Committed revision 777458.&lt;/p&gt;</comment>
                    <comment id="12727661" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 19:10:10 +0100"  >&lt;p&gt;some java 1.5 code got in with this patch&lt;/p&gt;</comment>
                    <comment id="12727664" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 19:14:48 +0100"  >&lt;p&gt;Looks like this spread a little in the docmaker/contentsource breakup issue as well. This patch takes care of both (a few Integer.valueOfs).&lt;/p&gt;</comment>
                    <comment id="12727668" author="mikemccand" created="Mon, 6 Jul 2009 19:19:17 +0100"  >&lt;p&gt;Thank Mark!&lt;/p&gt;</comment>
                    <comment id="12727710" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 20:20:50 +0100"  >&lt;p&gt;committed&lt;/p&gt;</comment>
                    <comment id="12988827" author="mikemccand" created="Mon, 31 Jan 2011 18:18:07 +0000"  >&lt;p&gt;Alas, horribly, I&apos;m hitting this bug again, with the 2.10.0 Xerces JAR currently checked in.&lt;/p&gt;

&lt;p&gt;I downloaded the latest XML dump from Wikipedia (en), enwiki-20110115-pages-articles.xml, and after ~2.8M docs I hit this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;     [java] 592.4 sec --&amp;gt; main Wrote 2807000 line docs
     [java] 592.51 sec --&amp;gt; main Wrote 2808000 line docs
     [java] 592.59 sec --&amp;gt; main Wrote 2809000 line docs
     [java] 592.78 sec --&amp;gt; main Wrote 2810000 line docs
     [java] Exception in thread &quot;Thread-0&quot; java.lang.RuntimeException: org.apache.xerces.impl.io.MalformedByteSequenceException: Invalid byte 2 of 4-byte UTF-8 sequence.
     [java] 	at org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource$Parser.run(EnwikiContentSource.java:197)
     [java] 	at java.lang.Thread.run(Thread.java:619)
     [java] Caused by: org.apache.xerces.impl.io.MalformedByteSequenceException: Invalid byte 2 of 4-byte UTF-8 sequence.
     [java] 	at org.apache.xerces.util.ErrorHandlerWrapper.createSAXParseException(Unknown Source)
     [java] 	at org.apache.xerces.util.ErrorHandlerWrapper.fatalError(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLErrorReporter.reportError(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl$FragmentContentDispatcher.dispatch(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanDocument(Unknown Source)
     [java] 	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
     [java] 	at org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
     [java] 	at org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
     [java] 	at org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
     [java] 	at org.apache.lucene.benchmark.byTask.feeds.EnwikiContentSource$Parser.run(EnwikiContentSource.java:174)
     [java] 	... 1 more
     [java] Caused by: org.apache.xerces.impl.io.MalformedByteSequenceException: Invalid byte 2 of 4-byte UTF-8 sequence.
     [java] 	at org.apache.xerces.impl.io.UTF8Reader.invalidByte(Unknown Source)
     [java] 	at org.apache.xerces.impl.io.UTF8Reader.read(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLEntityScanner.load(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLEntityScanner.scanContent(Unknown Source)
     [java] 	at org.apache.xerces.impl.XMLDocumentFragmentScannerImpl.scanContent(Unknown Source)
     [java] 	... 8 more
     [java] ####################
     [java] ###  D O N E !!! ###
     [java] ####################
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I went back to the old patched Xerces JAR, and it got past that point just fine...&lt;/p&gt;</comment>
                    <comment id="12988829" author="mikemccand" created="Mon, 31 Jan 2011 18:22:17 +0000"  >&lt;p&gt;I think we should just rollback to the old (patched) JAR for 3.1/4.0?&lt;/p&gt;</comment>
                    <comment id="12988847" author="mikemccand" created="Mon, 31 Jan 2011 19:12:15 +0000"  >&lt;p&gt;I also tested the latest Xerces release (2.11) and it hits the same exception as above.&lt;/p&gt;

&lt;p&gt;Feel free to go vote for &lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I&apos;ll just revert to our patched JAR (based on Xerces 2.9.1).&lt;/p&gt;</comment>
                    <comment id="13013276" author="gsingers" created="Wed, 30 Mar 2011 16:49:51 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                    <comment id="13241428" author="mikemccand" created="Thu, 29 Mar 2012 18:51:27 +0100"  >&lt;p&gt;Note that enwiki-20110115-pages-articles.xml.bz2 also hits &lt;a href=&quot;https://issues.apache.org/jira/browse/XERCESJ-1257&quot; title=&quot;buffer overflow in UTF8Reader for characters out of BMP&quot;&gt;XERCESJ-1257&lt;/a&gt; ...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12405336" name="commons-compress-dev20090413.jar" size="140505" author="thetaphi" created="Mon, 13 Apr 2009 19:49:04 +0100" />
                    <attachment id="12405309" name="commons-compress-dev20090413.jar" size="140471" author="thetaphi" created="Mon, 13 Apr 2009 11:29:12 +0100" />
                    <attachment id="12412638" name="LUCENE-1591.patch" size="1796" author="markrmiller@gmail.com" created="Mon, 6 Jul 2009 19:14:48 +0100" />
                    <attachment id="12405611" name="LUCENE-1591.patch" size="47723" author="shaie" created="Thu, 16 Apr 2009 04:16:10 +0100" />
                    <attachment id="12405535" name="LUCENE-1591.patch" size="48284" author="shaie" created="Wed, 15 Apr 2009 16:05:27 +0100" />
                    <attachment id="12405435" name="LUCENE-1591.patch" size="45734" author="shaie" created="Tue, 14 Apr 2009 17:57:23 +0100" />
                    <attachment id="12405354" name="LUCENE-1591.patch" size="36079" author="shaie" created="Mon, 13 Apr 2009 22:16:49 +0100" />
                    <attachment id="12405311" name="LUCENE-1591.patch" size="21399" author="shaie" created="Mon, 13 Apr 2009 12:52:27 +0100" />
                    <attachment id="12405284" name="LUCENE-1591.patch" size="20899" author="shaie" created="Sun, 12 Apr 2009 21:06:57 +0100" />
                    <attachment id="12405251" name="LUCENE-1591.patch" size="14997" author="shaie" created="Sun, 12 Apr 2009 04:26:27 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 8 Apr 2009 18:38:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12164</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26137</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>