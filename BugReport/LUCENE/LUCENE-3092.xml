<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:27:25 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3092/LUCENE-3092.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3092] NRTCachingDirectory, to buffer small segments in a RAMDir</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3092</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I created this simply Directory impl, whose goal is reduce IO&lt;br/&gt;
contention in a frequent reopen NRT use case.&lt;/p&gt;

&lt;p&gt;The idea is, when reopening quickly, but not indexing that much&lt;br/&gt;
content, you wind up with many small files created with time, that can&lt;br/&gt;
possibly stress the IO system eg if merges, searching are also&lt;br/&gt;
fighting for IO.&lt;/p&gt;

&lt;p&gt;So, NRTCachingDirectory puts these newly created files into a RAMDir,&lt;br/&gt;
and only when they are merged into a too-large segment, does it then&lt;br/&gt;
write-through to the real (delegate) directory.&lt;/p&gt;

&lt;p&gt;This lets you spend some RAM to reduce I0.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12507048">LUCENE-3092</key>
            <summary>NRTCachingDirectory, to buffer small segments in a RAMDir</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Thu, 12 May 2011 23:14:06 +0100</created>
                <updated>Fri, 3 Jun 2011 17:37:11 +0100</updated>
                    <resolved>Tue, 17 May 2011 19:02:26 +0100</resolved>
                                            <fixVersion>3.2</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13032710" author="mikemccand" created="Thu, 12 May 2011 23:16:15 +0100"  >&lt;p&gt;Patch.&lt;/p&gt;

&lt;p&gt;The patch add NRTCachingDir in core, but if/when we commit this I&lt;br/&gt;
think we should put it in contrib/module instead.  I think it&apos;s&lt;br/&gt;
working correctly &amp;#8211; commit works fine (it flushes all cached files to&lt;br/&gt;
the real dir on sync), but it needs a test case and I&apos;m not going to&lt;br/&gt;
have time in the near future to do that so I wanted to open this issue&lt;br/&gt;
to get it out there....&lt;/p&gt;</comment>
                    <comment id="13032718" author="thetaphi" created="Thu, 12 May 2011 23:30:01 +0100"  >&lt;p&gt;I don&apos;t completely understand how this works. Is the getMergeScheduler() method intended to be used to set the MergeScheduler on the IndexWriter this directory is opened for? Why only support CMS?&lt;/p&gt;</comment>
                    <comment id="13032721" author="thetaphi" created="Thu, 12 May 2011 23:32:13 +0100"  >&lt;p&gt;Sorry false alarm, haven&apos;t seen the JavaDocs (it&apos;s a patch, java code is not highlighted...). Still not understanding how it works, maybe it&apos;s too late.&lt;/p&gt;</comment>
                    <comment id="13032732" author="mikemccand" created="Thu, 12 May 2011 23:50:33 +0100"  >&lt;p&gt;Yeah you should ask this dir for the merge scheduler... we could also fix it to delegate to any other merge scheduler (eg that you pass in), I think.&lt;/p&gt;

&lt;p&gt;Basically the dir just needs some way to &quot;know&quot; when a merge kicks off, so it can associate the thread doing that merge w/ the size of the merge.&lt;/p&gt;

&lt;p&gt;Maybe there&apos;s a cleaner way &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13032813" author="cmale" created="Fri, 13 May 2011 04:24:55 +0100"  >&lt;p&gt;Having not looked into the patch, what about some sort of event listener idea? The Directory can register that its interested in listening to merge events and the event can be fired when a merge is started.  I can see alot of extensions maybe wanting to track when merges happen.&lt;/p&gt;</comment>
                    <comment id="13032821" author="cmale" created="Fri, 13 May 2011 05:32:07 +0100"  >&lt;p&gt;Patch which roughly does what I suggested.  Just a proof-of-concept since everything is currently tied to CMS (when it should work with any MS).&lt;/p&gt;

&lt;p&gt;Introduces a MergeEvent and MergeListener.  MergeEvents are fired by CMS before and after merge is done.  NRTCachingDirectory implements MergeListener and does it stuff on firing of the Events.&lt;/p&gt;

&lt;p&gt;There are dangers with calling listeners in a finally block but as I say, just a POC.&lt;/p&gt;</comment>
                    <comment id="13032828" author="thetaphi" created="Fri, 13 May 2011 05:52:21 +0100"  >&lt;p&gt;Could we not simply use IOContext? When IOContext is used on opening IndexOutput, we know some &quot;metadata&quot; and can act accordingly.&lt;/p&gt;</comment>
                    <comment id="13032841" author="earwin" created="Fri, 13 May 2011 07:33:43 +0100"  >&lt;p&gt;&lt;b&gt;highfive Uwe&lt;/b&gt; was going to suggest the very same thing.&lt;br/&gt;
IOContext can include expected size. NRTCD will do its magic, other dirs may prealloc.&lt;/p&gt;</comment>
                    <comment id="13032850" author="cmale" created="Fri, 13 May 2011 07:58:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;IOContext can include expected size.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While I appreciate the idea, isn&apos;t that a little inflexible? Okay so this Directory needs to know size, but another implementation might need to know other details (at this stage I don&apos;t know what, just thinking long term).  So then we expand IOContext again?&lt;/p&gt;

&lt;p&gt;For a Directory, using IOContext maybe makes sense, but wouldn&apos;t it be useful to be able to announce that a merge is going to happen, and let whatevers interested, in this case a Directory, do what it needs to do?&lt;/p&gt;</comment>
                    <comment id="13032909" author="simonw" created="Fri, 13 May 2011 09:34:46 +0100"  >&lt;p&gt;First, nice idea mike! The way you are collection merge info is very very scary man &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; so I tend to agree that we could make good use of IOContext here but at the same time I think the merge event system chris is proposing is very much needed IMO. Stuff like FlushPolicy could take information about concurrent merges and hold of flushes for a little while if memory allows it etc. If we are not using it here I think we should open another issue for that. &lt;/p&gt;</comment>
                    <comment id="13032936" author="earwin" created="Fri, 13 May 2011 10:59:56 +0100"  >&lt;p&gt;Chris, I don&apos;t like the idea of expanding IOContext again and again, but this case seems in line with intended purporse - give Directory implementation hints as to what we&apos;re going to do with it.&lt;/p&gt;

&lt;p&gt;I don&apos;t like events either. They look fragile and binding them to threads is a WTF. With all our pausing/unpausing magic there&apos;s no guarantee merge will end on the same thread it started on.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Stuff like FlushPolicy could take information about concurrent merges and hold of flushes for a little while if memory allows it etc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Coordinating access to shared resource (IO subsystem) with events is very awkward. Ok, your FlushPolicy receives events from MergePolicy and holds flushes during merge. &lt;em&gt;Now, when a flush is in progress, should FlushPolicy notify MergePolicy so it can hold its merges?&lt;/em&gt;&lt;br/&gt;
It goes downhill from there. What if FP and MP fire events simultaneously? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; What should other listeners do?&lt;/p&gt;

&lt;p&gt;Try looking at a bigger picture. Merges are not your problem. Neither are flushes. Your problem is that several threads try to take their dump on disk simultaneously (for whatever reason, you don&apos;t really care). So what we need is an arbitration mechanism for Directory writes. A mechanism located presumably @ Directory level (eg, we don&apos;t need to throttle anything when writing to RAMDir).&lt;/p&gt;

&lt;p&gt;One possible implementation is that we add a constructor parameter to FSDirectory specifying desired level of IO parallelism, and then it keeps track of its IndexOutputs and stalls writes selectively. We can also add &apos;expectedWriteSize&apos; to IOContext, so the Directory may favor shorter writes over bigger ones. Instead of &apos;expectedWriteSize&apos; we can use &apos;priority&apos;.&lt;/p&gt;</comment>
                    <comment id="13032947" author="cmale" created="Fri, 13 May 2011 11:30:44 +0100"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t like events either. They look fragile and binding them to threads is a WTF. With all our pausing/unpausing magic there&apos;s no guarantee merge will end on the same thread it started on.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re absolutely right that tying them to threads is not a good idea, but I couldn&apos;t disagree more that this is an issue with an Event model.  Yes we should be wary of what information we make available in Events (I only added Threads to the Events in my patch because I was showing a simple alternative to Mike&apos;s initial impl).  But to say Events are fragile and therefore we shouldn&apos;t pursue a listener pattern seems a big leap.  Many large applications use event listeners and I don&apos;t think they&apos;re wrong.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It goes downhill from there. What if FP and MP fire events simultaneously?  What should other listeners do?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point.  Again, those are issues we need to resolve (one way applications tend to address this is event queues).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Try looking at a bigger picture. Merges are not your problem. Neither are flushes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re right, neither merges nor flushes are the problem.  We have a series of components in Lucene; Directories, IndexWriter, MergeScheduler etc, and we have some crosscutting concerns such as merges themselves.  We should strive to decouple these components where possible and think big picture.&lt;/p&gt;

&lt;p&gt;I agree with your suggestions for how we can solve the problem here now for NRTCachingDirectory, but I think we can do better for the longer term.&lt;/p&gt;
</comment>
                    <comment id="13032989" author="earwin" created="Fri, 13 May 2011 13:34:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;but I couldn&apos;t disagree more that this is an issue with an Event model&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are no issues with event model itself. It&apos;s just that this model is badly suitable for this issue&apos;s usecase.&lt;br/&gt;
Event listeners are good. Using them to emulate what is essentially a mutex - is ugly and fragile as hell.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We have a series of components in Lucene; Directories, IndexWriter, MergeScheduler etc, and we have some crosscutting concerns such as merges themselves.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My point is that for many concerns they shouldn&apos;t necessarily be crosscutting.&lt;br/&gt;
Eg - Directory can support IO priorities/throttling, so it doesn&apos;t have to know about merges or flushes.&lt;br/&gt;
Many OSes have have special APIs that allow IO prioritization, do they know about merges, or Lucene at all? No.&lt;/p&gt;</comment>
                    <comment id="13032990" author="mikemccand" created="Fri, 13 May 2011 13:35:56 +0100"  >&lt;p&gt;I agree it&apos;s scary/sneaky how this Dir impl associates threads w/&lt;br/&gt;
merge sizes... using IOCtx or events or something else would be&lt;br/&gt;
better.&lt;/p&gt;

&lt;p&gt;IOCtx would be a nice fit for this... because then we take all thread&lt;br/&gt;
association out of the picture.  The IOCtx should reference the&lt;br/&gt;
OneMerge (if in fact this file is being opened because of a merge)?&lt;br/&gt;
Then this impl can look at that to make its decision, and there&apos;s no&lt;br/&gt;
more coupling of this dir iml to the merge scheduler.&lt;/p&gt;

&lt;p&gt;Should we open a separate issue for the events listener?  Actually&lt;br/&gt;
there may already be an issue open...?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;With all our pausing/unpausing magic there&apos;s no guarantee merge will end on the same thread it started on.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The hard thread scheduling (forced pausing) that CMS does won&apos;t change&lt;br/&gt;
the thread that runs the merge.  That thread will forever run that&lt;br/&gt;
merge (perhaps sometimes being paused) until that merge is done.  At&lt;br/&gt;
least, this is how it&apos;s impl&apos;d today...&lt;/p&gt;</comment>
                    <comment id="13032993" author="mikemccand" created="Fri, 13 May 2011 13:39:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;a WTF&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve never seen this (WTF) used as a noun but I like it!!&lt;/p&gt;</comment>
                    <comment id="13032997" author="earwin" created="Fri, 13 May 2011 13:47:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;The IOCtx should reference the OneMerge (if in fact this file is being opened because of a merge)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;IOCtx should have a value &apos;expectedSize&apos;, or &apos;priority&apos;, or something similar.&lt;br/&gt;
This does not introduce a transitive dependency of Directory from MergePolicy (to please you once more - a true WTF), and this allows to apply the same logic to flushes. Eg - all small flushes/merges go to cache, all big flushes/merges go straight to disk.&lt;/p&gt;</comment>
                    <comment id="13033240" author="mikemccand" created="Fri, 13 May 2011 20:35:57 +0100"  >&lt;blockquote&gt;
&lt;p&gt;IOCtx should have a value &apos;expectedSize&apos;, or &apos;priority&apos;, or something similar.&lt;br/&gt;
This does not introduce a transitive dependency of Directory from MergePolicy (to please you once more - a true WTF),&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh, good point.  So, for this dir impl I want to say &quot;if net seg size is &amp;lt; X MB, cache it in RAM&quot;, so I guess we could have something like &quot;expectedSizeOfSegmentMB&quot; (covers all files that will be flushed for this segment, hmm minus the doc stores) in the IOCtx.&lt;/p&gt;</comment>
                    <comment id="13033520" author="rcmuir" created="Sat, 14 May 2011 13:46:09 +0100"  >&lt;p&gt;just an idea: with issues like this that work (but hackishly) and are self contained, I&apos;m&lt;br/&gt;
not sure we should block them on some huge refactoring like IOContext if they are actually usable&lt;/p&gt;

&lt;p&gt;Of course I had this same opinion on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2829&quot; title=&quot;improve termquery &amp;quot;pk lookup&amp;quot; performance&quot;&gt;&lt;del&gt;LUCENE-2829&lt;/del&gt;&lt;/a&gt;, and gave up there, but I like the idea&lt;br/&gt;
of adding things that have a little hackishness (but work) to our 3.x branch, especially&lt;br/&gt;
if they can be experimental or contribs, and then refactoring for elegance in trunk.&lt;/p&gt;

&lt;p&gt;I don&apos;t think users should have to wait until 4.0 for features because we won&apos;t add them until we&lt;br/&gt;
totally refactor the world... its ok to add them hackishly in 3.x if we are &quot;fixing&quot; the larger issues in trunk.&lt;/p&gt;

&lt;p&gt;As far as scariness factor, is is really worse than forcefully unmapping direct byte buffers with sun.* methods in MMapDirectory?!&lt;/p&gt;</comment>
                    <comment id="13033545" author="mikemccand" created="Sat, 14 May 2011 16:05:14 +0100"  >&lt;blockquote&gt;
&lt;p&gt;just an idea: with issues like this that work (but hackishly) and are self contained, I&apos;m&lt;br/&gt;
not sure we should block them on some huge refactoring like IOContext if they are actually usable&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, progress not perfection.&lt;/p&gt;

&lt;p&gt;I&apos;ll clean up the patch &amp;#8211; add an example code fragment of how you use it, a test case (aside: it&apos;d be nice if, somehow, we could randomly swap this into our tests... we&apos;d need a newMergeScheduler() method that would tap into this Dir impl if it had been picked, but also, we&apos;d have to get this contrib module on core&apos;s classpath...), and a comment saying &quot;this class does spooking stuff tracking merges and threads&quot;.&lt;/p&gt;</comment>
                    <comment id="13033604" author="mikemccand" created="Sat, 14 May 2011 22:54:59 +0100"  >&lt;p&gt;New patch.&lt;/p&gt;

&lt;p&gt;I reduced the over-synchronized methods (hopefully not too much!), improved jdocs (added an example usage), added CHANGES entry, and added a test case.&lt;/p&gt;

&lt;p&gt;But: the test case currently fails, due to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3100&quot; title=&quot;IW.commit() writes but fails to fsync the N.fnx file&quot;&gt;&lt;del&gt;LUCENE-3100&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="13033605" author="mikemccand" created="Sat, 14 May 2011 22:56:39 +0100"  >&lt;p&gt;Sorry last patch was wrong &amp;#8211; this one should be right.&lt;/p&gt;</comment>
                    <comment id="13034242" author="simonw" created="Mon, 16 May 2011 20:52:08 +0100"  >&lt;p&gt;mike I attached a patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3100&quot; title=&quot;IW.commit() writes but fails to fsync the N.fnx file&quot;&gt;&lt;del&gt;LUCENE-3100&lt;/del&gt;&lt;/a&gt; and tested with the latest patch on this issue. The test randomly fails (after I close the IW in the test!) here is a trace:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;
junit-sequential:
    [junit] Testsuite: org.apache.lucene.store.TestNRTCachingDirectory
    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 5.16 sec
    [junit] 
    [junit] ------------- Standard Error -----------------
    [junit] NOTE: reproduce with: ant test -Dtestcase=TestNRTCachingDirectory -Dtestmethod=testNRTAndCommit -Dtests.seed=-753565914717395747:-1817581638532977526
    [junit] NOTE: test params are: codec=RandomCodecProvider: {docid=SimpleText, body=MockFixedIntBlock(blockSize=1993), title=Pulsing(freqCutoff=3), titleTokenized=MockSep, date=SimpleText}, locale=ar_AE, timezone=America/Santa_Isabel
    [junit] NOTE: all tests run in this JVM:
    [junit] [TestNRTCachingDirectory]
    [junit] NOTE: Mac OS X 10.6.7 x86_64/Apple Inc. 1.6.0_24 (64-bit)/cpus=2,threads=1,free=46213552,total=85000192
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testNRTAndCommit(org.apache.lucene.store.TestNRTCachingDirectory):	FAILED
    [junit] limit=12 actual=16
    [junit] junit.framework.AssertionFailedError: limit=12 actual=16
    [junit] 	at org.apache.lucene.index.RandomIndexWriter.doRandomOptimize(RandomIndexWriter.java:165)
    [junit] 	at org.apache.lucene.index.RandomIndexWriter.close(RandomIndexWriter.java:199)
    [junit] 	at org.apache.lucene.store.TestNRTCachingDirectory.testNRTAndCommit(TestNRTCachingDirectory.java:179)
    [junit] 	at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1282)
    [junit] 	at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1211)
    [junit] 
    [junit] 
    [junit] Test org.apache.lucene.store.TestNRTCachingDirectory FAILED
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13034644" author="mikemccand" created="Tue, 17 May 2011 10:34:36 +0100"  >&lt;p&gt;New patch, fixes the issue Simon hit (was just a bug in the test &amp;#8211; it was using a silly MergePolicy that ignored partial optimize).&lt;/p&gt;

&lt;p&gt;Test now passes w/ the patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3100&quot; title=&quot;IW.commit() writes but fails to fsync the N.fnx file&quot;&gt;&lt;del&gt;LUCENE-3100&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think this is ready to commit, after &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3100&quot; title=&quot;IW.commit() writes but fails to fsync the N.fnx file&quot;&gt;&lt;del&gt;LUCENE-3100&lt;/del&gt;&lt;/a&gt; is in.&lt;/p&gt;</comment>
                    <comment id="13034661" author="simonw" created="Tue, 17 May 2011 10:59:40 +0100"  >&lt;p&gt;Mike I committed &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3100&quot; title=&quot;IW.commit() writes but fails to fsync the N.fnx file&quot;&gt;&lt;del&gt;LUCENE-3100&lt;/del&gt;&lt;/a&gt; you can go ahead &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13034835" author="mikemccand" created="Tue, 17 May 2011 16:53:45 +0100"  >&lt;p&gt;Thanks Simon; I&apos;ll commit soon...&lt;/p&gt;</comment>
                    <comment id="13034884" author="dsmiley" created="Tue, 17 May 2011 18:04:44 +0100"  >&lt;p&gt;This looks cool.  Any performance measurements?  Perhaps a forthcoming post on Mike&apos;s blog? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13034911" author="mikemccand" created="Tue, 17 May 2011 18:37:53 +0100"  >&lt;p&gt;Alas I haven&apos;t had time to really dig into perf gains here... but I suspect on systems where IO is in contention (due to ongoing cold searching, or merging), and reopen rate is highish, that this should be a decent win since we don&apos;t burden the IO system with many tiny files.&lt;/p&gt;</comment>
                    <comment id="13034927" author="shaie" created="Tue, 17 May 2011 19:05:07 +0100"  >&lt;p&gt;Mike, this is a great idea ! If there are any chances it will be released in 3.2, I think one of our NRT apps can make good use of it.&lt;/p&gt;

&lt;p&gt;Question - I see that NRTCD ctor takes a Directory. Is there any reason to pass RAMDir to NRTCD? I assume you use a Directory for any other Dir impls out there that may not sub-class e.g., FSDir, which is ok - so can we at least document that this Dir is not useful if you intend to pass RAMDir to it?&lt;/p&gt;

&lt;p&gt;Unless I am wrong and it is useful w/ RAMDir as well. &lt;/p&gt;</comment>
                    <comment id="13034981" author="mikemccand" created="Tue, 17 May 2011 20:06:50 +0100"  >&lt;p&gt;I committed it to 3.x as well so this will be in 3.2 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I can&apos;t think of any reason why you&apos;d want to wrap another RAMDir with NRTCD....?  We can fix the docs to state this.  Can you work out the wording/patch?  Or just go ahead and commit a fix &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13034985" author="yseeley@gmail.com" created="Tue, 17 May 2011 20:12:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;I can&apos;t think of any reason why you&apos;d want to wrap another RAMDir with NRTCD....?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Tests?  It&apos;s nice to have a test use a RAMDirectory for speed, but still follow the same code path as FSDirectory for debugging + orthogonality.&lt;br/&gt;
AFAIK, most Solr tests use RAMDirectory by default.  There&apos;s no benefit to restricting it, right?&lt;/p&gt;</comment>
                    <comment id="13034989" author="mikemccand" created="Tue, 17 May 2011 20:18:27 +0100"  >&lt;p&gt;That&apos;s a great point Yonik &amp;#8211; in fact the TestNRTCachingDirectory already&lt;br/&gt;
relies on this generic-ness (pulls a newDirectory() from LuceneTestCase).&lt;/p&gt;</comment>
                    <comment id="13035357" author="rcmuir" created="Wed, 18 May 2011 14:07:19 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Tests? It&apos;s nice to have a test use a RAMDirectory for speed, but still follow the same code path as FSDirectory for debugging + orthogonality.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;FWIW currently the lucene tests use a RAMDirectory 90% of the time (and something else the other 10%).&lt;br/&gt;
We could adjust this... at the time I set it, it seemed to not slow the tests down that much but&lt;br/&gt;
still give us a little more coverage.&lt;/p&gt;</comment>
                    <comment id="13043467" author="rcmuir" created="Fri, 3 Jun 2011 17:37:11 +0100"  >&lt;p&gt;Bulk closing for 3.2&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12491994">LUCENE-2793</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12479059" name="LUCENE-3092-listener.patch" size="12627" author="cmale" created="Fri, 13 May 2011 05:32:07 +0100" />
                    <attachment id="12479442" name="LUCENE-3092.patch" size="16580" author="mikemccand" created="Tue, 17 May 2011 10:34:36 +0100" />
                    <attachment id="12479235" name="LUCENE-3092.patch" size="18587" author="mikemccand" created="Sat, 14 May 2011 22:56:39 +0100" />
                    <attachment id="12479234" name="LUCENE-3092.patch" size="16336" author="mikemccand" created="Sat, 14 May 2011 22:54:59 +0100" />
                    <attachment id="12479018" name="LUCENE-3092.patch" size="8121" author="mikemccand" created="Thu, 12 May 2011 23:16:15 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 12 May 2011 22:30:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2141</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24601</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>