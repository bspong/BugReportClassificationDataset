<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:06:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1219/LUCENE-1219.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1219] support array/offset/ length setters for Field with binary data</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1219</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;currently Field/Fieldable interface supports only compact, zero based byte arrays. This forces end users to create and copy content of new objects before passing them to Lucene as such fields are often of variable size. Depending on use case, this can bring far from negligible  performance  improvement. &lt;/p&gt;

&lt;p&gt;this approach extends Fieldable interface with 3 new methods   &lt;br/&gt;
getOffset(); gettLenght(); and getBinaryValue() (this only returns reference to the array)&lt;/p&gt;

</description>
                <environment></environment>
            <key id="12390744">LUCENE-1219</key>
            <summary>support array/offset/ length setters for Field with binary data</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="eksdev">Eks Dev</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Mar 2008 11:32:25 +0000</created>
                <updated>Sat, 11 Oct 2008 13:49:36 +0100</updated>
                    <resolved>Mon, 18 Aug 2008 11:32:08 +0100</resolved>
                                            <fixVersion>2.4</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12577437" author="eksdev" created="Tue, 11 Mar 2008 13:22:49 +0000"  >&lt;p&gt;all tests pass with this patch. &lt;br/&gt;
 some polish needed and probably more testing, TODOs:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;someone pedantic should check if these new set / get methods should be named better&lt;/li&gt;
	&lt;li&gt;check if there are more places where this new feature cold/should be used, I think I have changed all of them but one place, direct subclass FieldForMerge in FieldsReader, this is the code I do not know so I did not touch it...&lt;/li&gt;
	&lt;li&gt;javadoc  is poor&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;should be enough to get us started.&lt;/p&gt;

&lt;p&gt;the only &quot;pseudo-issue&quot;  I see is that &lt;br/&gt;
public byte[] binaryValue(); now creates byte[] and copies content into it, reference to original array can be now fetched via getBinaryValue() method... this is to preserve compatibility as users expect compact, zero based array from this method and we keep offset/length in Field now&lt;br/&gt;
this is &quot;pseudo issue&quot; as users already should have a reference to this array, so this method is rather superfluous for end users.&lt;/p&gt;



</comment>
                    <comment id="12577451" author="eksdev" created="Tue, 11 Mar 2008 14:07:54 +0000"  >&lt;p&gt;Michael McCandless had some nice ideas on how to make  getValue() change performance penalty for legacy usage negligible, this patch includes them: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;deprecates getValue() method&lt;/li&gt;
	&lt;li&gt;returns direct reference if offset==0 &amp;amp;&amp;amp; length == data.length&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12577551" author="mikemccand" created="Tue, 11 Mar 2008 18:40:19 +0000"  >&lt;p&gt;Hmm ... one problem is Fieldable is an interface, and this patch adds methods to the interface, which I believe breaks our backwards compatibility requirement.&lt;/p&gt;</comment>
                    <comment id="12577597" author="eksdev" created="Tue, 11 Mar 2008 20:48:29 +0000"  >&lt;p&gt;I do not know for sure if this is something we could not live with.  Adding new interface sounds equally bad, would work nicely, but I do not like it as it makes code harder to follow with too many interfaces  ... I&apos;ll have another look at it to see if there is a way to do it without interface changes. Any ideas?    &lt;/p&gt;</comment>
                    <comment id="12577620" author="eksdev" created="Tue, 11 Mar 2008 21:53:24 +0000"  >&lt;p&gt;this one keeps addition of new methods localized to AbstractField, does not change Fieldable interface... it looks like it could work done this way with a few instanceof checks in  FieldsWriter, This one has dependency on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1217&quot; title=&quot;use isBinary cached variable instead of instanceof in Field&quot;&gt;&lt;del&gt;LUCENE-1217&lt;/del&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;it will not give you any benefit if you directly implement your Fieldable without extending AbstractField, therefore   I would suggest to eventually  change Fieldable to support all these methods that operate with offset/length. Or someone clever finds some way to change an interface without braking backwards compatibility &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12577781" author="eksdev" created="Wed, 12 Mar 2008 10:02:31 +0000"  >&lt;p&gt;latest patch updated to the trunk (Lucene-1217 is there. Michael you did not mark it as resolved.) &lt;/p&gt;
</comment>
                    <comment id="12578198" author="mikemccand" created="Thu, 13 Mar 2008 09:34:43 +0000"  >&lt;p&gt;OK I updated the patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Added a ctor to Field to create binary fields with length &amp;amp;&lt;br/&gt;
    offset&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added a test case&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Regularized whitespace&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Renamed things:&lt;br/&gt;
      getLength -&amp;gt; getBinaryLength&lt;br/&gt;
      getOffset -&amp;gt; getBinaryOffset&lt;br/&gt;
      dataOffset -&amp;gt; binaryOffset&lt;br/&gt;
      dataLength -&amp;gt; binaryLength&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Eks can you see if the changes look OK?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12578199" author="mikemccand" created="Thu, 13 Mar 2008 09:35:41 +0000"  >&lt;p&gt;Alas, I&apos;m not really happy with introducing this API at the&lt;br/&gt;
AbstractField level and not in Fieldable.  It&apos;s awkward that we&apos;ve&lt;br/&gt;
deprecated binaryValue() in AbstractField and not in Fieldable.  But,&lt;br/&gt;
I think it&apos;s our only way forward with this issue without breaking&lt;br/&gt;
backwards compatibility.&lt;/p&gt;

&lt;p&gt;In 3.0 I&apos;d like to at least promote this API up into Fieldable, but&lt;br/&gt;
even that is somewhat messy because I think in 3.0 we would then&lt;br/&gt;
deprecate binaryValue() and move these 3 new methods up from&lt;br/&gt;
AbstractField.&lt;/p&gt;

&lt;p&gt;What I&apos;d really like to do in 3.0 is change Fieldable to not be an&lt;br/&gt;
abstract base class instead.&lt;/p&gt;

&lt;p&gt;Question: could we simply move forward without Fieldable?  Ie,&lt;br/&gt;
deprecate Fieldable right now and state that the migration path is&lt;br/&gt;
&quot;you should subclass from AbstractField&quot;?  I would leave &quot;implements&lt;br/&gt;
Fieldable&quot; in AbstractField now, but remove it in 3.0.  As far as I&lt;br/&gt;
can tell, all uses of Fieldable in Lucene are also using&lt;br/&gt;
AbstractField.&lt;/p&gt;

&lt;p&gt;I guess I don&apos;t really understand the need for Fieldable.  In fact I&lt;br/&gt;
also don&apos;t really understand why we even needed to add AbstractField.&lt;br/&gt;
Why couldn&apos;t FieldForMerge and LazyField subclass Field?  It&apos;s&lt;br/&gt;
somewhat awkward now because we have newly added APIs to Field, like&lt;br/&gt;
setValue&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, which probably should have been added to Fieldable.&lt;/p&gt;</comment>
                    <comment id="12578253" author="eksdev" created="Thu, 13 Mar 2008 11:43:30 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;Eks can you see if the changes look OK? Thanks.&lt;br/&gt;
It looks perfect, you have brought it to the &quot;commit ready status&quot; already.&lt;br/&gt;
I will it try it on our production mirror a bit later today and report back if something goes wrong.&lt;/p&gt;


&lt;p&gt;&amp;gt;&amp;gt;I guess I don&apos;t really understand the need for Fieldable. In fact I&lt;br/&gt;
also don&apos;t really understand why we even needed to add AbstractField.&lt;/p&gt;

&lt;p&gt;I am with you 100% here,  It looks to me as well that one concrete class could replace it all. But... maybe someone kicks-in with some god arguments why we have it that way.&lt;/p&gt;</comment>
                    <comment id="12619378" author="eksdev" created="Sun, 3 Aug 2008 22:03:38 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;updated this patch to apply to trunk&lt;/li&gt;
	&lt;li&gt;implemented abstract getBinary***() methods in Fieldable, and removed a few ugly instanceof AbstractField from a few places (introduced by previous versions of this patch. This was there due to  the assumption that Fieldable should stay unchanged...)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;all test pass, (as expected, only minor diff to take2 version. much like the initial version )&lt;/p&gt;
</comment>
                    <comment id="12619842" author="mikemccand" created="Tue, 5 Aug 2008 11:51:38 +0100"  >&lt;p&gt;Thanks Eks &amp;#8211; this looks good.  I think it&apos;s ready to commit, once &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1349&quot; title=&quot;Mark Fieldable as allowing some changes in 2.x future releases&quot;&gt;&lt;del&gt;LUCENE-1349&lt;/del&gt;&lt;/a&gt; is in.&lt;/p&gt;</comment>
                    <comment id="12620019" author="eksdev" created="Tue, 5 Aug 2008 20:53:11 +0100"  >&lt;p&gt;Great Mike,&lt;br/&gt;
it gets better and better, i saw &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1340&quot; title=&quot;Make it posible not to include TF information in index&quot;&gt;&lt;del&gt;LUCENE-1340&lt;/del&gt;&lt;/a&gt; committed. Thanks to you Grant, Doug and all others that voted for 1349  this happened so quickly. Trust me, these two issues are really making my life easier. I pushed decision to add new hardware to some future point (means, save customer&apos;s money now)... a few weeks later would be too late.&lt;/p&gt;

&lt;p&gt;Now it remains only to make one nice patch that enables us to pass our own byte[] for retrieving stored fields during search. I was thinking along the lines of  things you did in Analyzers.&lt;/p&gt;

&lt;p&gt;we could pool the same trick for this, eg.&lt;/p&gt;

&lt;p&gt;Field Document.getBinaryValue(String FIELD_NAME, Field destination);&lt;/p&gt;

&lt;p&gt;Field already has all access methods (get/set), &lt;/p&gt;

&lt;p&gt;the contract would be: If destination==null, new one will be created and returned, if not we use this one and returne the same object back. The method should check if byte[] is big enough, if not simple growth policy can be there.  This way we avoid new byte[] each time you fetch stored field..&lt;/p&gt;

&lt;p&gt;I did not look exactly at code now, but the last time I was looking into it it looked as quite simple to do something along these lines. Do you have some ideas how we could do it better?&lt;/p&gt;

&lt;p&gt;Just simple calculation in my case, &lt;br/&gt;
average Hits count is around 200, for each hit we have to fetch one stored field where we do some post-processing, re-scoring and whatnot. Currently we run max 30 rq/second , with average document length of 2k you lend at 2K * 200 * 30 = 6000 object allocations per second totaling 12Mb ... only to get the data... I can imagine people with much longer documents  (that would be typical lucene use case)  where it gets worse... simply reducing gc() pressure with really small amount of work. I am sure this would have nice effects on some other use cases in lucene.&lt;/p&gt;

&lt;p&gt;thanks again to all &quot;workers&quot;  behind this greet peace of software...&lt;br/&gt;
eks&lt;/p&gt;

&lt;p&gt;PS:  I need to find some time to peek at paul&apos;s work in LUVENE -1345 and my wish list will be complete, at least for now (at least until you get your magic with flexi index format done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;
</comment>
                    <comment id="12620935" author="eksdev" created="Fri, 8 Aug 2008 14:53:58 +0100"  >&lt;p&gt;Mike, &lt;br/&gt;
This new patch includes take3  and adds the following:&lt;/p&gt;

&lt;p&gt;Fieldable  Document.getStoredBinaryField(String name, byte[] scratch);&lt;/p&gt;

&lt;p&gt;where scratch param represents user byte buffer that will be used in case it is big enough, if not, it will be simply allocated like today. If scratch is used, you get the same object through Fieldable.getByteValue()&lt;/p&gt;


&lt;p&gt;for this to work, I added one new method in Fieldable &lt;br/&gt;
abstract Fieldable getBinaryField(byte[] scratch);&lt;/p&gt;

&lt;p&gt;the only interesting implementation is in LazyField &lt;/p&gt;

&lt;p&gt;The reason for this is in my previous comment&lt;/p&gt;

&lt;p&gt;this does not affect issues from take3 at all, but is dependant on it, as you need to know the length of byte[] you read. take3 remains good to commit, I just did not know how to make one isolated patch with only these changes without too much work in text editor &lt;/p&gt;
</comment>
                    <comment id="12620960" author="mikemccand" created="Fri, 8 Aug 2008 16:41:57 +0100"  >&lt;p&gt;Eks, could we instead add this to Field:&lt;/p&gt;

&lt;p&gt;  byte[] binaryValue(byte[] result)&lt;/p&gt;

&lt;p&gt;and then default the current binaryValue() to just call binaryValue(null)?&lt;/p&gt;

&lt;p&gt;And similar in Document add:&lt;/p&gt;

&lt;p&gt;  byte[] getBinaryValue(String name, byte[] result)&lt;/p&gt;

&lt;p&gt;These would work the same way that TokenStream.next(Token result) works, ie, the method should try to use the result passed in, if it works, and return that; else it&apos;s free to allocate its own new byte[] and return it?&lt;/p&gt;

&lt;p&gt;And then only LazyField&apos;s implementation of binaryValue(byte[] result) would use byte[] result if it&apos;s large enough?&lt;/p&gt;

&lt;p&gt;Also ... it&apos;d be nice to have a way to do this re-use in the non-lazy case.  Ie somehow load a stored doc, but passing in your own Document result which would attempt to re-use the Field instances &amp;amp; byte[] for the binary fields.  But we should open another issue to explore that...&lt;/p&gt;</comment>
                    <comment id="12621036" author="eksdev" created="Fri, 8 Aug 2008 21:08:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;could we instead add this to Field:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;byte[] binaryValue(byte[] result)&lt;/p&gt;

&lt;p&gt;this is exactly where I started, but then realized I am missing actual length we read in LazyField, without it you would have to relocate each time, except in case where your buffer length equals toRead in LazyField... simply, the question is, how the caller of   byte[] getBinaryValue(String name, byte[] result) could know what is the length in this returned byte[]&lt;/p&gt;

&lt;p&gt;Am I missing something obvious?&lt;/p&gt;</comment>
                    <comment id="12621043" author="yseeley@gmail.com" created="Fri, 8 Aug 2008 21:25:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;Also ... it&apos;d be nice to have a way to do this re-use in the non-lazy case. Ie somehow load a stored doc, but passing in your own Document result which would attempt to re-use the Field instances &amp;amp; byte[] for the binary fields.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right.  This also gets back to the fact that the Document you retrieve should probably be different than the Document that you get by loading the stored fields.&lt;/p&gt;

&lt;p&gt;Some sort of lower level callback interface to populate a Document might even eliminate the need for some of the FieldSelector stuff... or at least it would mostly be independent of the field reading code and users could create more advanced implementations.&lt;/p&gt;</comment>
                    <comment id="12621099" author="mikemccand" created="Sat, 9 Aug 2008 00:56:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;realized I am missing actual length we read in LazyField&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Duh, right.&lt;/p&gt;

&lt;p&gt;Though: couldn&apos;t you just call document.getFieldable(name), and then call binaryValue(byte[] result) on that Fieldable, and then get the length from it (getBinaryLength()) too?  (Trying to minimize API changes).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Some sort of lower level callback interface to populate a Document might even eliminate the need for some of the FieldSelector stuff... or at least it would mostly be independent of the field reading code and users could create more advanced implementations.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds interesting... but how would you re-use your own byte[] with this approach?&lt;/p&gt;</comment>
                    <comment id="12621138" author="eksdev" created="Sat, 9 Aug 2008 14:15:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;couldn&apos;t you just call document.getFieldable(name), and then call binaryValue(byte[] result) on that Fieldable, and then get the length from it (getBinaryLength()) too? (Trying to minimize API changes).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;sure, good tip, I this could work.  No need to have this byte[]-&amp;gt;Fieldable-byte[] loop, it confuses. I have attached patch that uses this approach. But I created getBinaryValue(byte[]) instead of binaryValue(byte[]) as we have binaryValue() as deprecated method (would be confusing as well). Not really tested, but looks simple enough &lt;/p&gt;

&lt;p&gt;Just thinking aloud&lt;br/&gt;
This is one nice feature, but I permanently had a feeling I do not understand this Field structures, roles and responsibilities &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Field/Fieldable/AbstractField hierarchy is really ripe for good re-factoring.This bigamy with index / search use cases makes things not really easy to follow, Hoss has right, we need some way to divorce RetrievedField from FieldToBeIndexed, they are definitely not the same, just very similar.   &lt;/p&gt;</comment>
                    <comment id="12622502" author="mikemccand" created="Thu, 14 Aug 2008 11:10:43 +0100"  >&lt;p&gt;OK this patch looks good!  I plan to commit in a day or two.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is one nice feature, but I permanently had a feeling I do not understand this Field structures, roles and responsibilities  Field/Fieldable/AbstractField hierarchy is really ripe for good re-factoring.This bigamy with index / search use cases makes things not really easy to follow, Hoss has right, we need some way to divorce RetrievedField from FieldToBeIndexed, they are definitely not the same, just very similar.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I completely agree!&lt;/p&gt;</comment>
                    <comment id="12623316" author="mikemccand" created="Mon, 18 Aug 2008 11:32:08 +0100"  >&lt;p&gt;OK, this one took a rather circuitous route but it is now committed!  Thanks Eks. &lt;/p&gt;</comment>
                    <comment id="12623332" author="eksdev" created="Mon, 18 Aug 2008 13:06:46 +0100"  >&lt;p&gt;how was it: &quot;repetitio est mater studiorum&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;thanks Mike! &lt;/p&gt;



&lt;p&gt;----- Original Message ----&lt;/p&gt;


&lt;p&gt;Send instant messages to your online friends &lt;a href=&quot;http://uk.messenger.yahoo.com&quot; class=&quot;external-link&quot;&gt;http://uk.messenger.yahoo.com&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12623433" author="otis" created="Mon, 18 Aug 2008 19:58:21 +0100"  >&lt;p&gt;Eks Dev: out of curiosity, did you ever measure the before/after performance difference?  If so, what numbers did you see?&lt;/p&gt;</comment>
                    <comment id="12623593" author="eksdev" created="Tue, 19 Aug 2008 08:50:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;did you ever measure the before/after performance difference?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;sure we did, it&apos;s been a while we measured it so I do not have the real numbers at hand. But for both cases (indexing and fetching stored binary field)  it showed up during profiling as the only easy quick-win(s) we could make . &lt;/p&gt;

&lt;p&gt;We index very short documents and indexing speed  per thread before this patch was is in  7.5k documents/ second range, after it we run it with the patch over 9.5-10K/Second, sweet...&lt;/p&gt;

&lt;p&gt;for searching, I do not not remember the numbers, but it was surely above 5% range  (try to allocate 12Mb in 6k objects per second as unnecessary addition and you will see it  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12401602">LUCENE-1349</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12390735">LUCENE-1217</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12387875" name="LUCENE-1219.extended.patch" size="17036" author="eksdev" created="Sat, 9 Aug 2008 14:15:35 +0100" />
                    <attachment id="12387817" name="LUCENE-1219.extended.patch" size="18866" author="eksdev" created="Fri, 8 Aug 2008 14:53:58 +0100" />
                    <attachment id="12377681" name="LUCENE-1219.patch" size="8390" author="eksdev" created="Wed, 12 Mar 2008 10:02:31 +0000" />
                    <attachment id="12377643" name="LUCENE-1219.patch" size="8439" author="eksdev" created="Tue, 11 Mar 2008 21:53:24 +0000" />
                    <attachment id="12377616" name="LUCENE-1219.patch" size="8189" author="eksdev" created="Tue, 11 Mar 2008 14:07:54 +0000" />
                    <attachment id="12377614" name="LUCENE-1219.patch" size="7929" author="eksdev" created="Tue, 11 Mar 2008 13:33:04 +0000" />
                    <attachment id="12377760" name="LUCENE-1219.take2.patch" size="15224" author="mikemccand" created="Thu, 13 Mar 2008 09:34:43 +0000" />
                    <attachment id="12387432" name="LUCENE-1219.take3.patch" size="15994" author="eksdev" created="Sun, 3 Aug 2008 22:03:38 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 11 Mar 2008 18:40:19 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12527</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26510</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>