<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:18 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-830/LUCENE-830.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-830] norms file can become unexpectedly enormous</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-830</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>
&lt;p&gt;Spinoff from this user thread:&lt;/p&gt;

&lt;p&gt;   &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-user/46754&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-user/46754&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Norms are not stored sparsely, so even if a doc doesn&apos;t have field X&lt;br/&gt;
we still use up 1 byte in the norms file (and in memory when that&lt;br/&gt;
field is searched) for that segment.  I think this is done for&lt;br/&gt;
performance at search time?&lt;/p&gt;

&lt;p&gt;For indexes that have a large # documents where each document can have&lt;br/&gt;
wildly varying fields, each segment will use # documents times # fields&lt;br/&gt;
seen in that segment.  When optimize merges all segments, that product&lt;br/&gt;
grows multiplicatively so the norms file for the single segment will&lt;br/&gt;
require far more storage than the sum of all previous segments&apos; norm&lt;br/&gt;
files.&lt;/p&gt;

&lt;p&gt;I think it&apos;s uncommon to have a huge number of distinct fields &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; so&lt;br/&gt;
we would need a solution that doesn&apos;t hurt the more common case where&lt;br/&gt;
most documents have the same fields.  Maybe something analogous to how&lt;br/&gt;
bitvectors are now optionally stored sparsely?&lt;/p&gt;

&lt;p&gt;One simple workaround is to disable norms.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12364818">LUCENE-830</key>
            <summary>norms file can become unexpectedly enormous</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Mar 2007 14:13:09 +0000</created>
                <updated>Fri, 10 May 2013 11:44:56 +0100</updated>
                    <resolved>Thu, 5 Jan 2012 18:53:26 +0000</resolved>
                            <version>2.1</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12480520" author="doronc" created="Tue, 13 Mar 2007 19:00:15 +0000"  >&lt;p&gt;&amp;gt; One simple workaround is to disable norms. &lt;/p&gt;

&lt;p&gt;You mean for some of the fields, using Fieldable&apos;s setOmitNorms().&lt;/p&gt;

&lt;p&gt;For large indexes, I would think that most fields would be indexed with omit=true, except for one (content) or two (subject?) fields were length normalization and/or boosting are of importance. in such cases there would not really be a problem.&lt;/p&gt;

&lt;p&gt;Consider the example that an index created for adding textual search to a database application, by mapping the index field names to the database &quot;textual columns&quot; names; if more than one table is indexed, but the textual column name happens to be different between the tables, then yes, - with that straightforward mapping there would be a waste - lots of unused bytes. &lt;/p&gt;

&lt;p&gt;One work around for such applications could be to map the textual columns of all tables to a single textual field in Lucene, thuogh then they would have to filter by a table-name field (which they might do anyhow). &lt;/p&gt;</comment>
                    <comment id="12480522" author="doronc" created="Tue, 13 Mar 2007 19:19:09 +0000"  >&lt;p&gt;&amp;gt; You mean for some of the fields, using Fieldable&apos;s setOmitNorms(). &lt;/p&gt;

&lt;p&gt;Oops, just noticed this was already suggested that in that for that user thread...&lt;/p&gt;

&lt;p&gt;Anyhow, for that specific scenario seems omitNorms would be sufficient, but it won&apos;t help the db based example above.&lt;/p&gt;</comment>
                    <comment id="12980180" author="gsingers" created="Tue, 11 Jan 2011 16:55:33 +0000"  >&lt;p&gt;Continuing a thread from IRC...&lt;/p&gt;

&lt;p&gt;In Mahout, we have 1 dense vector representation along with a few sparse representations.  In our case, we make users pick up front which representation they want based on what their data looks like and what algs they are running.  The dense vector approach is pretty much just an array of whatever primitive, but the sparse ones are optimized towards either random access or sequential access.   In Lucene&apos;s case, we probably could automatically pick an appropriate representation at IndexReader creation based on us keeping track of the density of norms for a given field.&lt;/p&gt;

&lt;p&gt;The other thing to consider is we may want to allow people to separate out boosting from length normalization and allow each to be on or off.&lt;/p&gt;</comment>
                    <comment id="12980279" author="rcmuir" created="Tue, 11 Jan 2011 19:31:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;The other thing to consider is we may want to allow people to separate out boosting from length normalization and allow each to be on or off.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the first step is to move norm encode/decode float-&amp;gt;byte out of Similarity (it does not belong here!) &lt;/p&gt;

&lt;p&gt;In my opinion we should index individual statistics (boost, # of terms, etc). Ideally how these are encoded/decoded is part of the codec.&lt;/p&gt;

&lt;p&gt;As far as how the raw stats are treated in scoring (such as if you want to combine #terms and boost into a single byte, and put it in a huge array, or do something else entirely), I think this belongs in Similarity. A lot of Similarities cant just use one single byte array for this, and others might not want to even &lt;br/&gt;
use bytes at all (this should be your choice, as you are making a tradeoff to lose precision intentionally for speed/RAM purposes). &lt;/p&gt;

&lt;p&gt;If we shuffled things around like this, then for example you could have a Similarity that uses your sparse vectors instead of huge bytes for &lt;br/&gt;
&quot;per-document normalization&quot;, and maybe it only cares about putting say the document boost in here. Its too limiting that we only have &quot;huge byte[] or not&quot;&lt;br/&gt;
and if people have ram issues (e.g. tons of fields) they are forced to both disable boosting and length normalization entirely.&lt;/p&gt;

&lt;p&gt;Not really able to keep track of the realtime search issues, but it seems these things (static byte[]) are limiting there too. &lt;/p&gt;

&lt;p&gt;By the way, what i described here is what Mike prototyped on the flexible scoring issue. I think it was good to prototype but I think it would be&lt;br/&gt;
much better to look at breaking that up into smaller digestible issues (e.g. adding the necessary stats to be indexed, making similarity per-field, ...) &lt;br/&gt;
so we actually make progress.&lt;/p&gt;</comment>
                    <comment id="13180688" author="mikemccand" created="Thu, 5 Jan 2012 18:53:26 +0000"  >&lt;p&gt;As of 4.0, when norms are missing we drop norms for the entire field, unlike before when we invent a fake norm for documents missing that field or omitting norm for it.&lt;/p&gt;

&lt;p&gt;Also, as of 4.0, you can now make a custom norm provider and custom similarity so if you really want to it&apos;s possible (in theory!) to have a sparse norms data structure...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 13 Mar 2007 19:00:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12910</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26900</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>