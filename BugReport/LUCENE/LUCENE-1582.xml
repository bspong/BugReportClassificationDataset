<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:57:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1582/LUCENE-1582.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1582] Make TrieRange completely independent from Document/Field with TokenStream of prefix encoded values</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1582</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;TrieRange has currently the following problem:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;To add a field, that uses a trie encoding, you can manually add each term to the index or use a helper method from TrieUtils. The helper method has the problem, that it uses a fixed field configuration&lt;/li&gt;
	&lt;li&gt;TrieUtils currently creates per default a helper field containing the lower precision terms to enable sorting (limitation of one term/document for sorting)&lt;/li&gt;
	&lt;li&gt;trieCodeLong/Int() creates unnecessarily String[] and char[] arrays that is heavy for GC, if you index lot of numeric values. Also a lot of char[] to String copying is involved.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This issue should improve this:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;trieCodeLong/Int() returns a TokenStream. During encoding, all char[] arrays are reused by Token API, additional String[] arrays for the encoded result are not created, instead the TokenStream enumerates the trie values.&lt;/li&gt;
	&lt;li&gt;Trie fields can be added to Documents during indexing using the standard API: new Field(name,TokenStream,...), so no extra util method needed. By using token filters, one could also add payload and so and customize everything.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The drawback is: Sorting would not work anymore. To enable sorting, a (sub-)issue can extend the FieldCache to stop iterating the terms, as soon as a lower precision one is enumerated by TermEnum. I will create a &quot;hack&quot; patch for TrieUtils-use only, that uses a non-checked Exceptionin the Parser to stop iteration. With &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-831&quot; title=&quot;Complete overhaul of FieldCache API/Implementation&quot;&gt;LUCENE-831&lt;/a&gt;, a more generic API for this type can be used (custom parser/iterator implementation for FieldCache). I will attach the field cache patch (with the temporary solution, until FieldCache is reimplemented) as a separate patch file, or maybe open another issue for it.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12421860">LUCENE-1582</key>
            <summary>Make TrieRange completely independent from Document/Field with TokenStream of prefix encoded values</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Apr 2009 13:05:00 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:20 +0100</updated>
                    <resolved>Tue, 7 Apr 2009 12:49:01 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/other</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12695016" author="mikemccand" created="Thu, 2 Apr 2009 15:18:41 +0100"  >&lt;p&gt;This sounds like a great improvement!&lt;/p&gt;</comment>
                    <comment id="12695261" author="shalinmangar" created="Fri, 3 Apr 2009 07:33:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;trieCodeLong/Int() returns a TokenStream. During encoding, all char[] arrays are reused by Token API, additional String[] arrays for the encoded result are not created, instead the TokenStream enumerates the trie values.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12695341" author="thetaphi" created="Fri, 3 Apr 2009 12:35:58 +0100"  >&lt;p&gt;A first version of the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;JavaDocs not finished (examples, documentation) yet&lt;/li&gt;
	&lt;li&gt;New classes: IntTrieTokenStream, LongTrieTokenStream&lt;/li&gt;
	&lt;li&gt;Removed TrieUtils.trieCodeInt/Long()&lt;/li&gt;
	&lt;li&gt;Removed TrieUtils.addIndexFields()&lt;/li&gt;
	&lt;li&gt;Removed all fields[] arrays, now only one field name is supported everywhere&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To index a trie-encoded field, just use (preferred way):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Filed f=&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Field(name, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LongTrieTokenStream(value, precisionStep));
f.setOmitNorms(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
f.setOmitTermFreqAndPositions(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(maybe TrieUtils supplies a shortcut helper method that uses these special optimal settings when creating the field, e.g. TrieUtils.newLongTrieField()). This is extensible with TokenFilters, if somebody wants to add payloads and so on.&lt;/p&gt;

&lt;p&gt;This patch also contains the sorting fixes in the core: FieldCache.StopFillCacheException can be thrown from withing the parser. Maybe this should be provides as a separate sub-isse (or top-level issue), because I cannot apply patches to core. Mike, can you do this, when we commit this?&lt;/p&gt;

&lt;p&gt;Yonik: It would be nice to hear some comments from you, too.&lt;/p&gt;

&lt;p&gt;I really like the new way to create trie encoded fields. When this moves to core, the tokenizers can be renamed to IntTokenStream, TrieUtils now only contains the converters to/from doubles and the encoding and range split.&lt;/p&gt;

&lt;p&gt;About the GC note in the description of this issue: The new API does not use so much array allocations and array copies and reuses the Token. But as it is needed to generate a TokenStream instance for every numeric value, the GC cost is about the same for new and old API. Especially because each TokenStream creates a LinkedHashMap internally for the attributes.&lt;/p&gt;

&lt;p&gt;Just a question for the indexer people: Is it possible to add two fields with the same field name to a document, both with a TokenStream? This is needed to add more than one trie encoded value (which worked with the old API). I just want to be sure.&lt;/p&gt;</comment>
                    <comment id="12695362" author="mikemccand" created="Fri, 3 Apr 2009 13:21:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Maybe this should be provides as a separate sub-isse (or top-level issue), because I cannot apply patches to core. Mike, can you do this, when we commit this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s fine to include these changes in this patch &amp;#8211; I can commit them all at once.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But as it is needed to generate a TokenStream instance for every numeric value, the GC cost is about the same for new and old API. Especially because each TokenStream creates a LinkedHashMap internally for the attributes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, we should do some perf tests to see how big a deal this turns out to be.  It&apos;d be nice to get some sort of reuse API working if performance is really hurt.  (Eg Analyzers can provide reusableTokenStream, keyed by thread).  You&apos;d presumably have to key on thread &amp;amp; field name.  If you do this then probably a shortcut helper method should be the preferred way.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Just a question for the indexer people: Is it possible to add two fields with the same field name to a document, both with a TokenStream? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Each with a different TokenStream instance, right?  Yes, this should be fine; the tokens are &quot;logically&quot; concatenated just like multi-valued String fields.&lt;/p&gt;</comment>
                    <comment id="12695364" author="thetaphi" created="Fri, 3 Apr 2009 13:31:07 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hmm, we should do some perf tests to see how big a deal this turns out to be. It&apos;d be nice to get some sort of reuse API working if performance is really hurt. (Eg Analyzers can provide reusableTokenStream, keyed by thread). You&apos;d presumably have to key on thread &amp;amp; field name. If you do this then probably a shortcut helper method should be the preferred way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can also leave this to the implementor: If somebody indexes thousands of documents, he could reuse one instance of the TokenStream for each document. As the instance is only read on document addition, he must provide a separate instance for each field, but can reuse it for the next document. This is the same like reusing Field instances during indexing.&lt;/p&gt;

&lt;p&gt;I can add a setValue() method to the tokenStream that resets it with the new value. So one could use one instance and always use setValue() to supply a new value for each document. The precisionStep should not be modifiable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Just a question for the indexer people: Is it possible to add two fields with the same field name to a document, both with a TokenStream? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Each with a different TokenStream instance, right? Yes, this should be fine; the tokens are &quot;logically&quot; concatenated just like multi-valued String fields.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, sure &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12695400" author="mikemccand" created="Fri, 3 Apr 2009 15:27:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;I can add a setValue() method to the tokenStream that resets it with the new value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s a good step forward, but it&apos;d likely mean the default is to be slower performance?  In general I prefer (when realistic) to have default ootb experience to be good performance, but in this case it doesn&apos;t seem like there&apos;s an easy way to have a natural high-performance default.  And eg we don&apos;t reuse Document &amp;amp; Field by default, so expecting someone to do a bit of work to reuse Trie&apos;s TokenStreams seems OK.&lt;/p&gt;

&lt;p&gt;It&apos;s almost like.... Analyzer.reusableTokenStream(...) should &quot;know&quot; it&apos;s deailing with a Numeric field, and handle the reuse for you, in a future world when Lucene knows that a Field is a NumericField, meant to be indexed using trie.  But we can leave all of that for future optimization; for now, providing setValue is great.&lt;/p&gt;</comment>
                    <comment id="12695554" author="thetaphi" created="Fri, 3 Apr 2009 21:05:05 +0100"  >&lt;p&gt;Updated patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;supports a setValue() to reset the TokenStream with a new value for reuse (as discussed before)&lt;/li&gt;
	&lt;li&gt;completed JavaDocs&lt;/li&gt;
	&lt;li&gt;remove dead code parts&lt;/li&gt;
	&lt;li&gt;small change in RangeBuilder API (unneeded parameters)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The difference between reusing fields and tokenstreams and always creating a new one is measureable (I compared in the test case), but not significant. The JavaDocs contain infos, how to reuse.&lt;/p&gt;

&lt;p&gt;I have done everything what i planned, now its time to discuss the change.&lt;/p&gt;</comment>
                    <comment id="12695880" author="thetaphi" created="Sun, 5 Apr 2009 18:29:47 +0100"  >&lt;p&gt;Some updates in patch, mostly typos, unneeded imports,...&lt;br/&gt;
One Change: prefixCodedTo...() now accepts CharSequence instead of String (because only this interface&apos;s methods are needed for decoding).&lt;/p&gt;</comment>
                    <comment id="12696462" author="thetaphi" created="Tue, 7 Apr 2009 11:18:07 +0100"  >&lt;p&gt;New patch. In my opinion, it is now stable.&lt;/p&gt;

&lt;p&gt;New features/changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Attribute &quot;ShiftAttribute&quot; for the new TokenStream API. This makes it possible t write consumers of the TokenStream that maybe index the values to different fields depending on the shift value. This only works with the new API (as the old Token does not have a field for that).&lt;/li&gt;
	&lt;li&gt;Tests for the TokenStreams&lt;/li&gt;
	&lt;li&gt;Missing initialization of Token in old TokenStream API&lt;/li&gt;
	&lt;li&gt;reverted CharSequence for prefix decoder to String (performance was 5% worse during FieldCache filling)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think, it is ready for commit. I did some further performance tests with a index of 10 Mio indexed trie values:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The speed difference between reusing the token streams is marginal, maximum 10% improvement&lt;/li&gt;
	&lt;li&gt;Filling the FieldCache is really fast now, the use of CharSequence was a bad idea (nicer API-wise but not for performance - the well known Java-Interface problem)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I did some statistics on this large index: The avg. number of terms for RangeFilters is 450 for 8bit and 70 for 4bit. This is exactly the same I have seen with 10000 docs in the test cases and 500000 docs in our PANGAEA index. This verifies, that the numbero of terms is &lt;b&gt;not&lt;/b&gt; related to index size, only related to precision step.&lt;/p&gt;

&lt;p&gt;I will do some further speed tests comparing the prefix-encoded FieldCache with the conventional int cache using Integer.parseInt(). I suspect a big improvement, because of the simple encoding.&lt;/p&gt;

&lt;p&gt;I will also compare the indexing time with the old API and the new tokenizers.&lt;/p&gt;

&lt;p&gt;Mike: If you think, the changes in FieldCache are OK, can you commit only the changes to the FieldCache?&lt;/p&gt;</comment>
                    <comment id="12696471" author="mikemccand" created="Tue, 7 Apr 2009 11:50:14 +0100"  >&lt;p&gt;OK the changes to FieldCache look OK &amp;#8211; I&apos;ll commit shortly.  I&apos;ll tone back the javadoc to a Expert/non-back-compat warning.  It doesn&apos;t matter much since with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-831&quot; title=&quot;Complete overhaul of FieldCache API/Implementation&quot;&gt;LUCENE-831&lt;/a&gt;, we should be able to remove it entirely, before releasing 2.9.&lt;/p&gt;</comment>
                    <comment id="12696475" author="mikemccand" created="Tue, 7 Apr 2009 11:59:40 +0100"  >&lt;p&gt;OK I committed the FieldCache part... thanks Uwe!&lt;/p&gt;</comment>
                    <comment id="12696485" author="thetaphi" created="Tue, 7 Apr 2009 12:39:27 +0100"  >&lt;p&gt;Thanks, i will then go forward with this.&lt;br/&gt;
Finally: Let&apos;s go on with 831... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12696491" author="thetaphi" created="Tue, 7 Apr 2009 12:49:01 +0100"  >&lt;p&gt;Committed Revision: 762710&lt;br/&gt;
I only added term number statistics in the filter tests.&lt;/p&gt;</comment>
                    <comment id="12696497" author="mikemccand" created="Tue, 7 Apr 2009 13:16:25 +0100"  >&lt;p&gt;b.q Finally: Let&apos;s go on with 831...&lt;/p&gt;

&lt;p&gt;Here here!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12411367">SOLR-940</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12364883">LUCENE-831</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12404580" name="ASF.LICENSE.NOT.GRANTED--LUCENE-1582.patch" size="68249" author="thetaphi" created="Fri, 3 Apr 2009 21:05:07 +0100" />
                    <attachment id="12404532" name="ASF.LICENSE.NOT.GRANTED--LUCENE-1582.patch" size="37423" author="thetaphi" created="Fri, 3 Apr 2009 12:36:02 +0100" />
                    <attachment id="12404817" name="LUCENE-1582.patch" size="79829" author="thetaphi" created="Tue, 7 Apr 2009 11:18:07 +0100" />
                    <attachment id="12404672" name="LUCENE-1582.patch" size="70419" author="thetaphi" created="Sun, 5 Apr 2009 18:29:47 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 2 Apr 2009 14:18:41 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12173</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26147</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>