<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:23 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3606/LUCENE-3606.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3606] Make IndexReader really read-only in Lucene 4.0</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3606</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;As we change API completely in Lucene 4.0 we are also free to remove read-write access and commits from IndexReader. This code is so hairy and buggy (as investigated by Robert and Mike today) when you work on SegmentReader level but forget to flush in the DirectoryReader, so its better to really make IndexReaders readonly.&lt;/p&gt;

&lt;p&gt;Currently with IndexReader you can do things like:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;delete/undelete Documents -&amp;gt; Can be done by with IndexWriter, too (using deleteByQuery)&lt;/li&gt;
	&lt;li&gt;change norms -&amp;gt; this is a bad idea in general, but when we remove norms at all and replace by DocValues this is obsolete already. Changing DocValues should also be done using IndexWriter in trunk (once it is ready)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12532932">LUCENE-3606</key>
            <summary>Make IndexReader really read-only in Lucene 4.0</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Mon, 28 Nov 2011 17:09:33 +0000</created>
                <updated>Fri, 10 May 2013 11:44:45 +0100</updated>
                    <resolved>Fri, 9 Dec 2011 17:55:01 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13158570" author="simonw" created="Mon, 28 Nov 2011 17:12:42 +0000"  >&lt;p&gt;+1 - this would be awesome&lt;/p&gt;</comment>
                    <comment id="13158571" author="yseeley@gmail.com" created="Mon, 28 Nov 2011 17:12:59 +0000"  >&lt;p&gt;+1 for read-only readers!&lt;/p&gt;</comment>
                    <comment id="13158588" author="rcmuir" created="Mon, 28 Nov 2011 17:30:25 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13158693" author="mikemccand" created="Mon, 28 Nov 2011 19:53:22 +0000"  >&lt;p&gt;I appreciate the purity of a truly read-only IndexReader, but there&lt;br/&gt;
are things deleting from IR can do that IW cannot:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Real-time deletes: you can delete from IR and have it take&lt;br/&gt;
    immediate effect on a searcher using that IR.  With IW you have to&lt;br/&gt;
    do an NRT reopen instead.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Delete by docID... users seem to use/want this (eg ask from time&lt;br/&gt;
    to time if we can do this in IW, which we can&apos;t since merging can&lt;br/&gt;
    shift docIDs at any time).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;IR tells you how many documents were affected by a delete-by-Term.&lt;br/&gt;
    IW cannot, since it buffers and only resolves all deletes in bulk&lt;br/&gt;
    later.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now... just because IR can do these things that IW cannot.... doesn&apos;t&lt;br/&gt;
mean they are compelling / important.  Ie maybe no app out there&lt;br/&gt;
relies on these special things and so we can lose this functionality?&lt;br/&gt;
I&apos;m not sure...&lt;/p&gt;

&lt;p&gt;On removing IR.setNorm, I agree we should just remove it: in trunk now&lt;br/&gt;
you can make a custom sim that boost norms &quot;live&quot;, so we won&apos;t lose&lt;br/&gt;
any functionality.  The setNorm code (and the implications &amp;#8211; all the&lt;br/&gt;
per-field normGen, reference counting, scary SR.reopen, etc.) is truly&lt;br/&gt;
hairy; would be great to nuke it all.&lt;/p&gt;</comment>
                    <comment id="13158700" author="rcmuir" created="Mon, 28 Nov 2011 20:01:08 +0000"  >&lt;p&gt;well, just like live changing of scoring factors with setNorm, the first two of these &lt;br/&gt;
things &lt;b&gt;could&lt;/b&gt; be done by the user, with Bits/liveDocs/filters right?&lt;/p&gt;</comment>
                    <comment id="13158901" author="thetaphi" created="Mon, 28 Nov 2011 22:57:26 +0000"  >&lt;p&gt;Mike,&lt;br/&gt;
I agree that this might affect some apps, but as I said in the introduction: I want to only do this for 4.0 aka Trunk, so we are free to break some strange internal never-documented behaviour. By changing from atomic to per-segment search in 2.9 we already broke lots of incorrectly implemented stuff in Lucene, and these IndexReader deletion behaviour &quot;features&quot; are far less often used than Filters tied to top-level IndexSearcher instead the IR passed to getDocIdSet().&lt;/p&gt;

&lt;p&gt;Delete by doc id is dangerous and should be prevented. But you can still do this: Create a custom Filter and do the deletion work in getDocIdSet(IndexReader) and pass it as Query to IndexWriter using ConstantScoreQuery. Using the IndexReader passed to getDocIdSet() you can do any funny things on it, just to produce valid docIds. IW will take care of deleteing them after getDocIdSet() returns.&lt;/p&gt;

&lt;p&gt;As Robert said, with FilterIndexReader you can also delete documents without delay (same like in contrib/misc: PKIndexSplitter, MultiPassIndexSplitter) by just overlaying another Bits. To make those hidden documents disappear on disk, too use the aproach decsribed before.&lt;/p&gt;

&lt;p&gt;And of course, let&apos;s nuke my favourite hate-candidate: setNorms()&lt;/p&gt;</comment>
                    <comment id="13158978" author="mikemccand" created="Tue, 29 Nov 2011 00:29:35 +0000"  >&lt;p&gt;OK I agree!  It looks like in 4.0 it&apos;s possible to achieve these same capabilities.  So let&apos;s nuke away &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13160515" author="thetaphi" created="Thu, 1 Dec 2011 00:31:40 +0000"  >&lt;p&gt;OK, I will work on this as soon as I can (next weekend). I will be gald to remove the copy-on-write setNorm stuff in Lucene40 codec and make Lucene3x codec completely read-only (only reading the newest norm file). I hope Robert will possibly help me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13160536" author="rcmuir" created="Thu, 1 Dec 2011 01:00:14 +0000"  >&lt;p&gt;Hi, I will help too. I think norms itself is a pretty big project to clean up and its a good one to do first.&lt;/p&gt;

&lt;p&gt;We don&apos;t have to do it this way, but here is my idea of a way we could do it in commitable steps:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;remove the setNorm first from IR, and fix all tests.&lt;/li&gt;
	&lt;li&gt;rename NormsWriter to NormsConsumer, rote refactor of norms i/o code into codec as NormsFormat (yes with just one default, and just reads whole byte[])&lt;/li&gt;
	&lt;li&gt;remove IndexFileNames constant and default implementation handles files(), including .sNNN hairiness&lt;/li&gt;
	&lt;li&gt;create SimpleText implementation&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Then even more cleanups:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;split Default implementation to Preflex (with all hairiness like .sNNN) and Lucene40 (clean implementation)&lt;/li&gt;
	&lt;li&gt;clean up &apos;behind the scenes&apos; api, e.g. NormsFormat presents docvalues API (hardcoded at fixed bytes), SegmentReader does getArray(). IndexReader still returns just byte[]&lt;/li&gt;
	&lt;li&gt;finally, &quot;holy grail&quot; where similarities can declare the normalization factor(s) they need, using byte/float/int whatever, and its all unified with the docvalues api. IndexReader.norms() maybe goes away here, and maybe NormsFormat too.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="13160559" author="rcmuir" created="Thu, 1 Dec 2011 01:41:27 +0000"  >&lt;blockquote&gt;
&lt;p&gt;finally, &quot;holy grail&quot; where similarities can declare the normalization factor(s) they need, using byte/float/int whatever, and its all unified with the docvalues api. IndexReader.norms() maybe goes away here, and maybe NormsFormat too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thinking about this: a clean way to do it would be for Similarity to get a new method:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ValueType getValueType();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and we would change:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; computeNorm(FieldInvertState state);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void computeNorm(FieldInvertState state, PerDocFieldValues norm);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sims that want to encode multiple index-time scoring factors separately &lt;br/&gt;
could just use BYTES_FIXED_STRAIGHT. This should be only for some rare&lt;br/&gt;
sims anyway, because a Sim can pull named &apos;application&apos; specific scoring&lt;br/&gt;
factors from IR.perDocValues() today already.&lt;/p&gt;

&lt;p&gt;Its not too crazy either since sims are already doing their own encoding,&lt;br/&gt;
so e.g. default sim would just use FIXED_INTS_8.&lt;/p&gt;

&lt;p&gt;People that don&apos;t want to mess with bytes or smallfloat could use things&lt;br/&gt;
like FLOAT_32 if they want and need this.&lt;/p&gt;

&lt;p&gt;we would just change FieldInfo.omitNorms to instead be FieldInfo.normValueType,&lt;br/&gt;
which is the value type of the norm (null if its omitted, just like docValueType).&lt;/p&gt;

&lt;p&gt;Preflex FieldInfosReader would just set FIXED_INTS_8 or null, based on&lt;br/&gt;
whether the fieldinfos had omitNorms or not. it doesnt support&lt;br/&gt;
any other types... &lt;/p&gt;

&lt;p&gt;Finally then, sims would be own their scoring factors, and we could&lt;br/&gt;
even remove omitNorms from Field/FieldType etc (just use the correct &lt;br/&gt;
scoring algorithm for the field, if you don&apos;t want norms, use a sim&lt;br/&gt;
that doesn&apos;t need them for scoring)&lt;/p&gt;

&lt;p&gt;This would remove the awkward/messy situation where every similarity &lt;br/&gt;
implementation we have has to &apos;downgrade&apos; itself to handle things like&lt;br/&gt;
if the user decided to omit parts of their formula!&lt;/p&gt;</comment>
                    <comment id="13162136" author="thetaphi" created="Sat, 3 Dec 2011 13:17:08 +0000"  >&lt;p&gt;I created a branch, because this job is horrible: &lt;a href=&quot;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3606&quot; class=&quot;external-link&quot;&gt;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3606&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13162235" author="thetaphi" created="Sat, 3 Dec 2011 23:45:14 +0000"  >&lt;p&gt;As first step, I removed setNorm/doSetNorm from all IndexReaders, deleted the NormModifier from contrib/misc and modified tests.&lt;/p&gt;

&lt;p&gt;I am not sure, if TestBackwardsCompatibility really checks that .sXX files are read correctly, we may need to add tests, as we no longer check the writing of norms anymore in the standard tests. So when reading old indexes with modified norms, we must ensure that the modified norms are read.&lt;/p&gt;

&lt;p&gt;When changing tests I already removed tests that opened IndexReader in RW mode (like TestBackwards), even if not only norms were modified. But as deletions/commit will also be removed later, this is easier than fixing the test at all.&lt;/p&gt;

&lt;p&gt;TestIndexReaderReopen should maybe modified to modify the Index using IndexWriter instead of IndexReader to test reopen functionality better. I removed the whole modifyIndex method from this test, so it is now not going deep enough. We should maybe revert the commit on this file and change modifyIndex to use IndexWriter.&lt;/p&gt;</comment>
                    <comment id="13162245" author="thetaphi" created="Sun, 4 Dec 2011 00:26:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;TestIndexReaderReopen should maybe modified to modify the Index using IndexWriter instead of IndexReader to test reopen functionality better. I removed the whole modifyIndex method from this test, so it is now not going deep enough. We should maybe revert the commit on this file and change modifyIndex to use IndexWriter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done.&lt;/p&gt;</comment>
                    <comment id="13162424" author="thetaphi" created="Sun, 4 Dec 2011 17:38:31 +0000"  >&lt;p&gt;Committed removal of IndexReader.deleteDocument*() and undeleteAll() to branch in revision: 1210153:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Removal of those methods from abstract IR and all its implementations, except SegmentReader&lt;/li&gt;
	&lt;li&gt;SegmentReader only contains doDelete(in) implementation (as used by BufferedDeletes &amp;amp; Co from IW&lt;/li&gt;
	&lt;li&gt;Rewritten lots of tests to use IW.deleteDocuments(Term), some tests commented out and noncommit added - some of them I dont even understand!&lt;/li&gt;
	&lt;li&gt;Contrib/MultiPassIndexSplitter.FakeDeletesIndexReader has a package-private delete/undelete operating on the FixedBitSet&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13162454" author="simonw" created="Sun, 4 Dec 2011 20:05:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Thinking about this: a clean way to do it would be for Similarity to get a new method:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have been talking to robert about moving norms to IDV earlier and the biggest issues we had in our discussion were when Sims have more than one value for a document since we&apos;d need to add custom (nested) fields or similar things which&apos;d be yet another mess further down the road. I think it&apos;s totally valid to restrict to a single DV and if you need more than one you simply use a byte variant and impl you custom decoding / encoding in your sim (that seems more performant too IMO).&lt;/p&gt;

&lt;p&gt;Once we moved over to this new API ie. no custom norm code anymore we can actually make use of IDV directly, norms would be just another CFS file and each fields norms would just be a &quot;virtual&quot; file in the IDV CFS. All loading and writing could/would be done by the codecs IDV. &lt;/p&gt;

&lt;p&gt;Yet, I think once we have this we should even go further and remove omitNorms from the Field entirely and let the similarity decide if a field has norms or not. This would remove a lot of hairiness in the code too. I&apos;d really like to see that! &lt;/p&gt;</comment>
                    <comment id="13162500" author="thetaphi" created="Sun, 4 Dec 2011 22:07:10 +0000"  >&lt;p&gt;Committed removal of IR.commit(...).&lt;/p&gt;

&lt;p&gt;Still todo:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove readOnly from DirectoryReader / SegmentReader internals (SR.delete is only called syncrhonized from inside IW)&lt;/li&gt;
	&lt;li&gt;remove deleteionPolicy from DirectoryReader&lt;/li&gt;
	&lt;li&gt;DirectoryReader is now a very simple class, I will change it to extend MultiReader and only implement open() and doOpenIfChanged differrent (check SegemntInfos)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13162556" author="thetaphi" created="Mon, 5 Dec 2011 01:42:58 +0000"  >&lt;p&gt;Clean up IR.open(...) methods to no longer accept readOnly and IndexDeletionPolicy: Core, Contrib, Solr (Modules need fixing, benchmark was broken before, too)&lt;/p&gt;

&lt;p&gt;New branch revision: 1210305&lt;/p&gt;</comment>
                    <comment id="13164615" author="thetaphi" created="Wed, 7 Dec 2011 18:52:53 +0000"  >&lt;p&gt;Robert and I committed more fixes to the remaining tests to the branch.&lt;br/&gt;
I also added the test of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3620&quot; title=&quot;FilterIndexReader does not override all of IndexReader methods&quot;&gt;&lt;del&gt;LUCENE-3620&lt;/del&gt;&lt;/a&gt; to this branch and fixed FilterIndexReader.&lt;/p&gt;</comment>
                    <comment id="13164833" author="thetaphi" created="Wed, 7 Dec 2011 23:27:10 +0000"  >&lt;p&gt;I tried to fix the remaining tests today, but this seems impossible without IndexReader.deleteDocument(int docId). Some of those tests with commented out by nocommits are so old that its impossible to understand what they are really testing (especially TestAddIndexes and TestIndexWriterMerging). I would simply delete them, because all this stuff is heavyily random tested otherwise (those &quot;old tests&quot; have no randomization at all).&lt;/p&gt;

&lt;p&gt;The remaining nocommits are:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;./src/java/org/apache/lucene/index/codecs/lucene40/Lucene40NormsReader.java:      // nocommit: change to a real check? see LUCENE-3619
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: move the whole modification stuff to IW
./src/java/org/apache/lucene/index/SegmentReader.java:  // end nocommit
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: is this needed anymore by IndexWriter?
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/java/org/apache/lucene/index/SegmentReader.java:  // nocommit: remove deletions from SR
./src/test/org/apache/lucene/index/TestAddIndexes.java:  /* nocommit: reactivate these tests
./src/test/org/apache/lucene/index/TestDeletionPolicy.java:  /* nocommit: fix this test, I don&apos;t understand it!
./src/test/org/apache/lucene/index/TestIndexWriterMerging.java:  /* nocommit: Fix tests to use an id and delete by term
./src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java:  /* nocommit: Fix tests to use an id and delete by term
./src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java:  /* nocommit: Fix tests to use an id and delete by term
./src/test/org/apache/lucene/index/TestSizeBoundedForceMerge.java:  /* nocommit: Fix tests to use an id and delete by term
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The parts in SegmentReader should be made TODO and a new issue should be opened, which removed RW from SegmentReader (Mike?). The tests should be deleted as described above. Otherwise the branch seems finalized otherwise so I would like to merge back to trunk asap.&lt;/p&gt;</comment>
                    <comment id="13165376" author="rcmuir" created="Thu, 8 Dec 2011 18:03:02 +0000"  >&lt;p&gt;Tests are all fixed... i think this one is close.&lt;/p&gt;</comment>
                    <comment id="13165423" author="thetaphi" created="Thu, 8 Dec 2011 18:48:25 +0000"  >&lt;p&gt;Thanks to Robert for fixing the last tests.&lt;/p&gt;

&lt;p&gt;This is the patch of the branch merged back to trunk. I will try to commit this ASAP, as it might get outdated very fast.&lt;/p&gt;

&lt;p&gt;Please review the changes!&lt;/p&gt;

&lt;p&gt;After committing I will keep the issue open and add deprecations to Lucene 3.x on most methods removed in trunk.&lt;/p&gt;</comment>
                    <comment id="13165450" author="mikemccand" created="Thu, 8 Dec 2011 19:13:57 +0000"  >&lt;p&gt;+1!  Nice work guys... I love all the minuses &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13165489" author="simonw" created="Thu, 8 Dec 2011 19:54:55 +0000"  >&lt;p&gt;+1 I love that Norms are under codec now! &lt;/p&gt;</comment>
                    <comment id="13165965" author="thetaphi" created="Fri, 9 Dec 2011 09:13:53 +0000"  >&lt;p&gt;Committed to trunk revision: 1212292&lt;/p&gt;</comment>
                    <comment id="13165968" author="thetaphi" created="Fri, 9 Dec 2011 09:20:05 +0000"  >&lt;p&gt;Patch that hides an accidently visible method IndexReader.open with Directory and IndexCommit again.&lt;/p&gt;

&lt;p&gt;Committed in trunk revision: 1212294&lt;/p&gt;</comment>
                    <comment id="13165984" author="thetaphi" created="Fri, 9 Dec 2011 09:26:29 +0000"  >&lt;p&gt;I will post a patch later adding the needed deprecations to 3.x! This issue is kept open until the deprecations are solved.&lt;/p&gt;</comment>
                    <comment id="13166010" author="thetaphi" created="Fri, 9 Dec 2011 09:56:22 +0000"  >&lt;p&gt;Here a patch that deprecates the removed methods in 3x:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;delete*, undeleteAll&lt;/li&gt;
	&lt;li&gt;IR.open(..., readonly,...)&lt;/li&gt;
	&lt;li&gt;adds missing non-readOnly IR.open()&lt;/li&gt;
	&lt;li&gt;for now I also deprecated setNorm(). If I would not deprecate it, it would be inconsistent, as setNorm only works with readOnly=false - but you can never call that wthout a deprecation warning. I think we should leave setNorm deprecated.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I did not fix the tests to not use deprecated readOnly=true IR.open()! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I found a serious API glitch in 3.x with openIfChanged:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the base class defines doOpenIfChanged(boolean readOnly), but MultiReader and ParallelReader &quot;override&quot; this method with a signature doOpenIfChanged(doClone) and missing @Override. This makes consumers calling IR.openIfChanged(boolean readOnly) do the wrong thing. Instead they should get UOE like for the other unimplemented doOpenIfChanged methods in MR and PR.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13166057" author="thetaphi" created="Fri, 9 Dec 2011 10:52:01 +0000"  >&lt;p&gt;Updated patch, some javadoc changes (deprecated method replacements) and one more missing method.&lt;/p&gt;</comment>
                    <comment id="13166351" author="thetaphi" created="Fri, 9 Dec 2011 17:44:03 +0000"  >&lt;p&gt;Final patch including changes.txt. Will commit this now.&lt;/p&gt;</comment>
                    <comment id="13166355" author="thetaphi" created="Fri, 9 Dec 2011 17:45:08 +0000"  >&lt;p&gt;Committed 3.x revision: 1212539&lt;/p&gt;</comment>
                    <comment id="13166366" author="thetaphi" created="Fri, 9 Dec 2011 17:55:01 +0000"  >&lt;p&gt;Merged changes to trunk revision: 1212545&lt;/p&gt;

&lt;p&gt;This issue is now finished, thanks to Robert for the great help during fixing tests and funny discussions &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
&lt;b&gt;edit&lt;/b&gt; ...and for porting norms to codec! &lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12534045">LUCENE-3620</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12506757" name="LUCENE-3606-deprecations3x.patch" size="31531" author="thetaphi" created="Fri, 9 Dec 2011 17:44:03 +0000" />
                    <attachment id="12506724" name="LUCENE-3606-deprecations3x.patch" size="28849" author="thetaphi" created="Fri, 9 Dec 2011 10:52:01 +0000" />
                    <attachment id="12506721" name="LUCENE-3606-deprecations3x.patch" size="26613" author="thetaphi" created="Fri, 9 Dec 2011 09:56:22 +0000" />
                    <attachment id="12506717" name="LUCENE-3606-hideMethodAgain.patch" size="3464" author="thetaphi" created="Fri, 9 Dec 2011 09:20:05 +0000" />
                    <attachment id="12506640" name="LUCENE-3606.patch" size="553671" author="thetaphi" created="Thu, 8 Dec 2011 18:48:24 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 28 Nov 2011 17:12:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>218665</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24092</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>