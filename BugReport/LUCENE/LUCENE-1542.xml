<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1542/LUCENE-1542.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1542] Lucene can incorrectly set the position of tokens that start a field with positonInc 0.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1542</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;More info in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1465&quot; title=&quot;NearSpansOrdered.getPayload does not return the payload from the minimum match span&quot;&gt;&lt;del&gt;LUCENE-1465&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12415141">LUCENE-1542</key>
            <summary>Lucene can incorrectly set the position of tokens that start a field with positonInc 0.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="markrmiller@gmail.com">Mark Miller</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Feb 2009 14:18:50 +0000</created>
                <updated>Wed, 26 Jan 2011 16:05:03 +0000</updated>
                    <resolved>Sat, 30 May 2009 10:36:38 +0100</resolved>
                            <version>2.4</version>
                                <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12706365" author="joma" created="Wed, 6 May 2009 10:51:35 +0100"  >&lt;p&gt;I think that the bug is not related to payload and to the fact that terms at located at the same position. &lt;br/&gt;
It seems to occur only for the first term of the document, if its positionIncrement is equal to 0. In this case, the position of the first term will be wrong: -1 if there is no payload, and 2147483647 if there is a payload.&lt;/p&gt;</comment>
                    <comment id="12713997" author="markrmiller@gmail.com" created="Thu, 28 May 2009 15:56:28 +0100"  >&lt;p&gt;something like this to fix&lt;/p&gt;</comment>
                    <comment id="12713999" author="markrmiller@gmail.com" created="Thu, 28 May 2009 16:05:38 +0100"  >&lt;p&gt;so that appears to fix it - but i&apos;m not sure thats the &lt;b&gt;right&lt;/b&gt; fix. have to look closer at why we do the -1, and then sometimes do 0 - 1 for a position. odd.&lt;/p&gt;</comment>
                    <comment id="12714020" author="mikemccand" created="Thu, 28 May 2009 16:46:35 +0100"  >&lt;p&gt;Alas, this looks like a dup of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1255&quot; title=&quot;CheckIndex should allow term position = -1&quot;&gt;&lt;del&gt;LUCENE-1255&lt;/del&gt;&lt;/a&gt;, where we at first did a fix (like this one) but then decided it was not back-compatible and so reverted it.&lt;/p&gt;

&lt;p&gt;However, if that first token (with posIncr=0) also has a payload, it appears to be particularly disastrous, since the way we encode a payload (by left-shifting the position delta by 1 bit) does not preserve the -1, right?&lt;/p&gt;</comment>
                    <comment id="12714029" author="markrmiller@gmail.com" created="Thu, 28 May 2009 17:00:48 +0100"  >&lt;p&gt;with unit test&lt;/p&gt;</comment>
                    <comment id="12714031" author="markrmiller@gmail.com" created="Thu, 28 May 2009 17:06:01 +0100"  >&lt;p&gt;and Spans. if its its included in a span, it will think the span starts ends at &lt;del&gt;1/+1 without payload it looks and with payloads +/&lt;/del&gt; 2147483647 - or something to that effect.&lt;/p&gt;

&lt;p&gt;Really, anything that counts on the position of the term is going to be screwed I think.&lt;/p&gt;</comment>
                    <comment id="12714033" author="markrmiller@gmail.com" created="Thu, 28 May 2009 17:07:35 +0100"  >&lt;p&gt;I don&apos;t think the fix here needs to disallow -1, but I think it must put the tokens at the right positions, and that is not -1.&lt;/p&gt;</comment>
                    <comment id="12714065" author="shaie" created="Thu, 28 May 2009 18:18:46 +0100"  >&lt;p&gt;Just wanted to say we&apos;ve had an internal discussion at work about it, when we wanted to utilize the positions to encode integers, and found out that we always need to increment the position returned by 1 (i.e., if you set posIncr to 5, the position you get when iterating on the positions is 4), and we specifically did not understand why when you set the posIncr to 0 for the first position, Lucene writes a -1. (Well, we understood why it happens, but didn&apos;t understand the reason).&lt;/p&gt;

&lt;p&gt;So whatever you do here, I&apos;m glad this issue was opened.&lt;/p&gt;

&lt;p&gt;We figured that the right solution on our side, w/o changing the Lucene code, is to not set the posIncr for the first position, but do so from the 2nd forward. Maybe that&apos;s what we need to do in Lucene? I.e. if posIncr is 0 for the first position, we don&apos;t decrement by 1?&lt;/p&gt;</comment>
                    <comment id="12714397" author="mikemccand" created="Fri, 29 May 2009 11:42:51 +0100"  >&lt;p&gt;New patch attached, that merges in Mark&apos;s test &amp;amp; fix, and the original&lt;br/&gt;
spans test (converted to a unit test) from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1465&quot; title=&quot;NearSpansOrdered.getPayload does not return the payload from the minimum match span&quot;&gt;&lt;del&gt;LUCENE-1465&lt;/del&gt;&lt;/a&gt;, and adds&lt;br/&gt;
a method to IndexWriter to emulate the buggy behavior.&lt;/p&gt;

&lt;p&gt;Previously, in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1255&quot; title=&quot;CheckIndex should allow term position = -1&quot;&gt;&lt;del&gt;LUCENE-1255&lt;/del&gt;&lt;/a&gt;, this problem was just an &quot;oddity&quot; that&lt;br/&gt;
Lucene would record position -1 for the first token(s) if those tokens&lt;br/&gt;
all have position incrment 0.  We started to fix it, realized it&lt;br/&gt;
breaks back-compat, and reverted it (accepting the &quot;oddity&quot;).&lt;/p&gt;

&lt;p&gt;Now, for this issue we are realizing the problem is much worse if a&lt;br/&gt;
payload happens to be attached to such tokens: instead of -1, the&lt;br/&gt;
position now comes back as Integer.MAX_VALUE (a side effect of how&lt;br/&gt;
payloads are stored in the index, which require that position delta be&lt;br/&gt;
non-zero), which then messes up *SpanQuery and I&apos;m sure other things.&lt;br/&gt;
Subsequent tokens (once posIncr is &amp;gt; 0) then overflow int, and switch&lt;br/&gt;
to MIN_VALUE.&lt;/p&gt;

&lt;p&gt;I think this is a real and nasty bug, and we should fix it, despite&lt;br/&gt;
back-compat.&lt;/p&gt;

&lt;p&gt;So in the patch, I&apos;ve added deprecated&lt;br/&gt;
IndexWriter.setAllowMinus1Postion() to get back to the buggy&lt;br/&gt;
behaviour, if for some reason an application needs this, and then&lt;br/&gt;
fixed the bug by default.&lt;/p&gt;</comment>
                    <comment id="12714400" author="shaie" created="Fri, 29 May 2009 11:54:57 +0100"  >&lt;p&gt;So Mike, just for clarification - let&apos;s say I have an index with -1 encoded for positions, already. I then upgrade to 2.9 and realize I should set this on IndexWriter, so in fact more -1 positions will be encoded.&lt;/p&gt;

&lt;p&gt;My question is - when will those -1 positions be fixed? I think this breaks back-compat since it changes the indexed data, and should be handled just like any other indexed data/format changes - i.e., last until 4.0. In the meantime, we can make sure that when segments are merged, or the index is optimized, or whatever else we do to support those back-compat issues, we fix those encodings, so that hopefully by 4.0 my indexes don&apos;t contain the -1s anymore (if they do, then I&apos;m screwed and can choose between not upgrading to 4.0, or rebuild them).&lt;/p&gt;

&lt;p&gt;If I&apos;m right, then you don&apos;t need this deprecated method, and make the changes under the covers?&lt;/p&gt;

&lt;p&gt;If I&apos;m wrong, and our back-compat policy only covers index format changes, then I will already need to rebuild my indexes, so why wait until 3.0? Basically this is one of the cases that were discussed recently on the back-compat policy thread - a change to indexed data. One that we did not agree on (I vaguely remember we said it should be handled like index format changes, but I may be wrong).&lt;/p&gt;</comment>
                    <comment id="12714454" author="mikemccand" created="Fri, 29 May 2009 14:59:29 +0100"  >&lt;blockquote&gt;&lt;p&gt;My question is - when will those -1 positions be fixed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the app must decide that?  I don&apos;t think we should correct it&lt;br/&gt;
during merging, since that&apos;d sneakily change your index whenever&lt;br/&gt;
merges complete?&lt;/p&gt;

&lt;p&gt;We could leave this deprecated &quot;keep the bug&quot; method around until 4.0?&lt;br/&gt;
This way you&apos;d have until 4.0 to reindex.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think this breaks back-compat&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, my patch breaks back compat, but I think this bug warrants an&lt;br/&gt;
exception.&lt;/p&gt;

&lt;p&gt;This is a bad bad bug.  Not only does it corrupt your positions&lt;br/&gt;
(storing Int.MAX_VALUE instead of -1, and then storing the next&lt;br/&gt;
position as Int.MIN_VALUE), it also can allow that corruption to&lt;br/&gt;
spread as segments are merged (if those other segments didn&apos;t have&lt;br/&gt;
docs w/ payloads).  And, it causes Span*Query to return the wrong&lt;br/&gt;
results in some cases.&lt;/p&gt;

&lt;p&gt;I think new users shouldn&apos;t have to wait until 4.0 to see this bug&lt;br/&gt;
fixed?&lt;/p&gt;

&lt;p&gt;I suppose an alternate approach would be to leave the -1 bug in place,&lt;br/&gt;
and only fix the case when there are payloads.  It&apos;d be messy.  I&lt;br/&gt;
think we&apos;d have to fix SegmentTermPositions to add an &quot;if (firstTime&lt;br/&gt;
&amp;amp;&amp;amp; pos==Integer.MAX_VALUE)&quot; to rewire it back to -1.  If we did this&lt;br/&gt;
we&apos;d be back to Lucene&apos;s &quot;oddity&quot;.  It&apos;s not great because it&apos;s a perf&lt;br/&gt;
cost on the search side...&lt;/p&gt;</comment>
                    <comment id="12714459" author="shaie" created="Fri, 29 May 2009 15:17:21 +0100"  >&lt;p&gt;I absolutely agree this is a bug that should be fixed. I was just worried with keeping the bug there, and forcing the app to reindex. I thought that can be avoided if we fix it under the cover, whenever merges occur. But I may be wrong.&lt;/p&gt;

&lt;p&gt;Maybe when this new &quot;segment-level metadata&quot; comes in, we could have written some code which reads a Segment and based on its version fixes the positions.&lt;/p&gt;

&lt;p&gt;Oh well .. it&apos;s just one more case where the app would need to reindex due to a bug fix (the other case I&apos;m aware of is the invalid acronyms). I suppose that&apos;s acceptable, since it&apos;s a bug fix.&lt;/p&gt;</comment>
                    <comment id="12714481" author="yseeley@gmail.com" created="Fri, 29 May 2009 16:12:42 +0100"  >&lt;p&gt;Most bug fixes aren&apos;t back compatible &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
What&apos;s the real user-visible impact of this fix to someone who hasn&apos;t re-indexed?&lt;/p&gt;</comment>
                    <comment id="12714577" author="shaie" created="Fri, 29 May 2009 21:15:21 +0100"  >&lt;p&gt;I don&apos;t think there&apos;s a user-visible impact. This happens only if you set posIncr=0 for the very first token. I guess it&apos;s not a common thing (if at all), which is why we haven&apos;t heard of it?&lt;br/&gt;
I was worried though that if I have an index with -1s already encoded, and I don&apos;t call setAllowMinus1Position, then some of the positions will be -1 and some 0. And since it is deprecated, and will be removed in 3.0, I&apos;ll need to reindex in 3.0.&lt;/p&gt;

&lt;p&gt;But I agree that a bug fix should not be carried into the internal Lucene processes. You should reindex.&lt;/p&gt;</comment>
                    <comment id="12714684" author="mikemccand" created="Sat, 30 May 2009 10:22:07 +0100"  >&lt;p&gt;OK I plan to commit the current patch shortly.  I&apos;ll add an entry under &quot;Changes in runtime behavior&quot; explaining the change...&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12392738">LUCENE-1255</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12409029">LUCENE-1465</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12409365" name="LUCENE-1542.patch" size="12904" author="mikemccand" created="Fri, 29 May 2009 11:42:51 +0100" />
                    <attachment id="12409278" name="LUCENE-1542.patch" size="2566" author="markrmiller@gmail.com" created="Thu, 28 May 2009 17:00:48 +0100" />
                    <attachment id="12409271" name="LUCENE-1542.patch" size="700" author="markrmiller@gmail.com" created="Thu, 28 May 2009 15:56:28 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 6 May 2009 09:51:35 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12212</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26187</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>