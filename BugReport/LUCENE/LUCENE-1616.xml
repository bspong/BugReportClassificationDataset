<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:39 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1616/LUCENE-1616.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1616] add one setter for start and end offset to OffsetAttribute</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1616</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;add OffsetAttribute. setOffset(startOffset, endOffset);&lt;/p&gt;

&lt;p&gt;trivial change, no JUnit needed&lt;/p&gt;

&lt;p&gt;Changed CharTokenizer to use it&lt;/p&gt;</description>
                <environment></environment>
            <key id="12423816">LUCENE-1616</key>
            <summary>add one setter for start and end offset to OffsetAttribute</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="eksdev">Eks Dev</reporter>
                        <labels>
                    </labels>
                <created>Sun, 26 Apr 2009 22:56:31 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:23 +0100</updated>
                    <resolved>Tue, 28 Apr 2009 22:18:15 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12703034" author="mikemccand" created="Mon, 27 Apr 2009 10:16:16 +0100"  >&lt;p&gt;Should we deprecate the separate setters with this addition?&lt;/p&gt;</comment>
                    <comment id="12703038" author="thetaphi" created="Mon, 27 Apr 2009 10:26:58 +0100"  >&lt;p&gt;Not really, the attributes API was added for 2.9, so it did not appear until now in official releases, it could be just removed.&lt;/p&gt;</comment>
                    <comment id="12703041" author="mikemccand" created="Mon, 27 Apr 2009 10:35:33 +0100"  >&lt;p&gt;Oh yeah &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Good!  I&apos;m losing track of what&apos;s not yet released...&lt;/p&gt;

&lt;p&gt;Eks, can you update the patch with that?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12703054" author="earwin" created="Mon, 27 Apr 2009 11:34:42 +0100"  >&lt;p&gt;Separate setters might have their own use? I believe I had a pair of filters that set begin and end offset in different parts of the code.&lt;/p&gt;</comment>
                    <comment id="12703062" author="mikemccand" created="Mon, 27 Apr 2009 12:05:42 +0100"  >&lt;p&gt;But surely that&apos;s a very rare case (the exception, not the rule).  Ie nearly always, one sets start &amp;amp; end offset together?&lt;/p&gt;</comment>
                    <comment id="12703067" author="earwin" created="Mon, 27 Apr 2009 12:16:54 +0100"  >&lt;p&gt;I have two cases.&lt;br/&gt;
In one case I can&apos;t access the start offset by the time I set end offset, and therefore have to introduce a field on the filter for keeping track of it (or use the next case&apos;s solution twice), if separate setters are removed.&lt;br/&gt;
In other case I only need to adjust end offset, so I&apos;ll have to do attr.setOffset(attr.getStartOffset(), newEndOffset).&lt;br/&gt;
Nothing deadly, but I don&apos;t see the point of removing methods that might be useful and don&apos;t interfere with anything.&lt;/p&gt;</comment>
                    <comment id="12703085" author="eksdev" created="Mon, 27 Apr 2009 12:49:03 +0100"  >&lt;p&gt;I am ok with both options, removing separate looks a bit better for me as it forces users to think &quot;attomic&quot; about offset &amp;lt;=&amp;gt; &lt;/p&gt;
{start, end}
&lt;p&gt;. &lt;/p&gt;

&lt;p&gt;If you separate start and end offset too far in your code, probability that you do not see mistake somewhere is higher compared to the case where you manage start and end on your own in these cases (this is then rather &quot;explicit&quot; in you code)... &lt;/p&gt;

&lt;p&gt;But that is all really something we should not think too much about it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; We make no mistakes eather way&lt;/p&gt;

&lt;p&gt;I can provide new patch, if needed. &lt;/p&gt;</comment>
                    <comment id="12703144" author="mikemccand" created="Mon, 27 Apr 2009 15:33:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;removing separate looks a bit better for me as it forces users to think &quot;attomic&quot; about offset &amp;lt;=&amp;gt; {start, end}.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is my thinking as well.&lt;/p&gt;

&lt;p&gt;And in general I prefer one clear way to do something (the Python way) instead providing various different ways to do the same thing (the Perl way).&lt;/p&gt;</comment>
                    <comment id="12703157" author="earwin" created="Mon, 27 Apr 2009 16:05:40 +0100"  >&lt;blockquote&gt;&lt;p&gt;removing separate looks a bit better for me as it forces users to think &quot;attomic&quot; about offset &amp;lt;=&amp;gt; {start, end}.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And if it&apos;s not atomic by design?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If you separate start and end offset too far in your code, probability that you do not see mistake somewhere is higher compared to the case where you manage start and end on your own in these cases (this is then rather &quot;explicit&quot; in you code)...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Instead of having one field for Term, which you build incrementally, you now have to keep another field for startOffset. Imho, that&apos;s starting to cross into another meaning of &apos;explicit&apos; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
And while you&apos;re trying to prevent bugs of using setStartOffset and forgetting about its &apos;End&apos; counterpart, you introduce another set of bugs - overwriting one end of interval, when you only need to update another.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And in general I prefer one clear way to do something&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And force everyone who has slightly different use-case to jump through the hoops. Span*Query api is a perfect example.&lt;/p&gt;

&lt;p&gt;Well, whatever.&lt;/p&gt;</comment>
                    <comment id="12703182" author="mikemccand" created="Mon, 27 Apr 2009 16:53:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;And force everyone who has slightly different use-case to jump through the hoops.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&quot;Simple things should be simple and complex things should be possible&quot; is a strong guide when I&apos;m thinking about APIs, configuration, etc.&lt;/p&gt;

&lt;p&gt;My feeling here is for the vast majority of the cases, people set start &amp;amp; end offset together, so we should shift to the API that makes that easy.  This is the &quot;simple&quot; case.&lt;/p&gt;

&lt;p&gt;For the remaining minority (your interesting use case), you can still do what you need but yes there are some hoops to go through.  This is the &quot;complex&quot; case.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Span*Query api is a perfect example.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you describe the limitations here in more detail?&lt;/p&gt;</comment>
                    <comment id="12703225" author="eksdev" created="Mon, 27 Apr 2009 18:24:17 +0100"  >&lt;p&gt;the same as the first patch, just with removed setStart/EndOffset(int) &lt;/p&gt;</comment>
                    <comment id="12703227" author="mikemccand" created="Mon, 27 Apr 2009 18:33:13 +0100"  >&lt;p&gt;Thanks Eks.  You also need to fix all the places that call the old methods (things don&apos;t compile w/ the new patch).&lt;/p&gt;</comment>
                    <comment id="12703231" author="eksdev" created="Mon, 27 Apr 2009 18:36:17 +0100"  >&lt;p&gt;whoops, this time it compiles &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12703245" author="mikemccand" created="Mon, 27 Apr 2009 19:02:32 +0100"  >&lt;p&gt;I still get compilation errors:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [mkdir] Created dir: /lucene/src/lucene.offsets/build/classes/java
    [javac] Compiling 372 source files to /lucene/src/lucene.offsets/build/classes/java
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/analysis/KeywordTokenizer.java:62: cannot find symbol
    [javac] symbol  : method setStartOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]       offsetAtt.setStartOffset(0);
    [javac]                ^
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/analysis/KeywordTokenizer.java:63: cannot find symbol
    [javac] symbol  : method setEndOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]       offsetAtt.setEndOffset(upto);
    [javac]                ^
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java:164: cannot find symbol
    [javac] symbol  : method setStartOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]         offsetAtt.setStartOffset(start);
    [javac]                  ^
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/analysis/standard/StandardTokenizer.java:165: cannot find symbol
    [javac] symbol  : method setEndOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]         offsetAtt.setEndOffset(start+termAtt.termLength());
    [javac]                  ^
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/index/DocInverterPerThread.java:56: cannot find symbol
    [javac] symbol  : method setStartOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]       offsetAttribute.setStartOffset(startOffset);
    [javac]                      ^
    [javac] /lucene/src/lucene.offsets/src/java/org/apache/lucene/index/DocInverterPerThread.java:57: cannot find symbol
    [javac] symbol  : method setEndOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
    [javac] location: class org.apache.lucene.analysis.tokenattributes.OffsetAttribute
    [javac]       offsetAttribute.setEndOffset(endOffset);
    [javac]                      ^
    [javac] Note: Some input files use or override a deprecated API.
    [javac] Note: Recompile with -Xlint:deprecation &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; details.
    [javac] 6 errors
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12703254" author="eksdev" created="Mon, 27 Apr 2009 19:08:41 +0100"  >&lt;p&gt;me too, sorry! &lt;br/&gt;
Eclipse left me blind for some funny reason&lt;br/&gt;
waiting for test to complete before I commit again ... &lt;/p&gt;</comment>
                    <comment id="12703288" author="earwin" created="Mon, 27 Apr 2009 19:48:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;&amp;gt; Span*Query api is a perfect example.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Can you describe the limitations here in more detail?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Take a look at SpanNearQuery and SpanOrQuery.&lt;/p&gt;

&lt;p&gt;1. They don&apos;t provide incremental construction (i.e. add() method, like in BooleanQuery), and they can be built only from an array of subqueries. So, if you don&apos;t know exact amount of subqueries upfront, you&apos;re busted. You have to use ArrayList, which you convert to array to feed into SpanQuery, which is converted back to ArrayList inside!!&lt;br/&gt;
2. They can&apos;t be edited. If you have a need to iterate over your query tree and modify it in one way or another, you need to create brand new instances of Span*Query. And here you hit #1 again, hard.&lt;br/&gt;
3. They can&apos;t be even inspected without creating a new array from the backing list (see getClauses).&lt;/p&gt;

&lt;p&gt;I use patched versions of SpanNear/OrQueries, which still use backing ArrayList, but accept it in constructor, have utility &apos;add&apos; method and getClauses() returns this very list, which allows for zero-cost inspection and easy modification if the need arises.&lt;/p&gt;</comment>
                    <comment id="12703326" author="eksdev" created="Mon, 27 Apr 2009 20:59:11 +0100"  >&lt;p&gt;ok, maybe this time it will work, I hope I managed to clean it up (core build and test pass). &lt;/p&gt;

&lt;p&gt;The only thing that fails is contrib, but I guess this has nothing to do with it? &lt;/p&gt;


&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; D:\Repository\SerachAndMatch\Lucene\lucene\java\trunk\contrib\highlighter\src\java\org\apache\lucene\search\highlight\WeightedSpanTermExtractor.java:306: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;       MemoryIndex indexer = new MemoryIndex();&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;       ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;   symbol:   class MemoryIndex&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;   location: class org.apache.lucene.search.highlight.WeightedSpanTermExtractor&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; D:\Repository\SerachAndMatch\Lucene\lucene\java\trunk\contrib\highlighter\src\java\org\apache\lucene\search\highlight\WeightedSpanTermExtractor.java:306: cannot find symbol&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;       MemoryIndex indexer = new MemoryIndex();&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;                                 ^&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;   symbol:   class MemoryIndex&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt;   location: class org.apache.lucene.search.highlight.WeightedSpanTermExtractor&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Some input files use unchecked or unsafe operations.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; Note: Recompile with -Xlint:unchecked for details.&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;javac&amp;#93;&lt;/span&gt; 3 errors&lt;/p&gt;</comment>
                    <comment id="12703332" author="markrmiller@gmail.com" created="Mon, 27 Apr 2009 21:10:07 +0100"  >&lt;blockquote&gt;&lt;p&gt;The only thing that fails is contrib, but I guess this has nothing to do with it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;looks like an issue with highlighters dependency on memory index. what target produces the problem? We have seen something like it in the past.&lt;/p&gt;</comment>
                    <comment id="12703335" author="eksdev" created="Mon, 27 Apr 2009 21:13:36 +0100"  >&lt;p&gt;ant build-contrib &lt;/p&gt;</comment>
                    <comment id="12703337" author="mikemccand" created="Mon, 27 Apr 2009 21:15:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;I use patched versions of SpanNear/OrQueries, which still use backing ArrayList, but accept it in constructor, have utility &apos;add&apos; method and getClauses() returns this very list, which allows for zero-cost inspection and easy modification if the need arises.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds useful &amp;#8211; is it something you can share?&lt;/p&gt;</comment>
                    <comment id="12703374" author="mikemccand" created="Mon, 27 Apr 2009 22:07:08 +0100"  >&lt;p&gt;OK all tests pass.  I had to fix a few back-compat tests (that were using the new TokenStream API, I think because we created the back-compat branch from trunk after the new TokenStream API landed).&lt;/p&gt;

&lt;p&gt;I&apos;ll commit in a day or two.  Thanks Eks!&lt;/p&gt;</comment>
                    <comment id="12703827" author="mikemccand" created="Tue, 28 Apr 2009 22:18:15 +0100"  >&lt;p&gt;Thanks Eks!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12406564" name="LUCENE-1616.patch" size="7732" author="eksdev" created="Mon, 27 Apr 2009 20:59:11 +0100" />
                    <attachment id="12406545" name="LUCENE-1616.patch" size="1886" author="eksdev" created="Mon, 27 Apr 2009 18:36:17 +0100" />
                    <attachment id="12406542" name="LUCENE-1616.patch" size="1650" author="eksdev" created="Mon, 27 Apr 2009 18:24:16 +0100" />
                    <attachment id="12406481" name="LUCENE-1616.patch" size="1226" author="eksdev" created="Sun, 26 Apr 2009 22:59:08 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 27 Apr 2009 09:16:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12141</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26112</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>