<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:18 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1678/LUCENE-1678.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1678] Deprecate Analyzer.tokenStream</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1678</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The addition of reusableTokenStream to the core analyzers unfortunately broke back compat of external subclasses:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://www.nabble.com/Extending-StandardAnalyzer-considered-harmful-td23863822.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Extending-StandardAnalyzer-considered-harmful-td23863822.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On upgrading, such subclasses would silently not be used anymore, since Lucene&apos;s indexing invokes reusableTokenStream.&lt;/p&gt;

&lt;p&gt;I think we should should at least deprecate Analyzer.tokenStream, today, so that users see deprecation warnings if their classes override this method.  But going forward when we want to change the API of core classes that are extended, I think we have to  introduce entirely new classes, to keep back compatibility.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12427472">LUCENE-1678</key>
            <summary>Deprecate Analyzer.tokenStream</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 9 Jun 2009 17:43:05 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:26 +0100</updated>
                    <resolved>Tue, 14 Jul 2009 17:32:44 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12717819" author="gsingers" created="Tue, 9 Jun 2009 22:05:41 +0100"  >&lt;p&gt;I frankly don&apos;t like renaming something like this.  This is, once again, a case of back compatibility biting us.  If instead of working around back compat. we had just made Analyzer.tokenStream be reusable, we wouldn&apos;t have to do this.  Now, instead, we are going to have a convoluted name for something (reusableTS).&lt;/p&gt;

&lt;p&gt;In my mind, better to just make .tokenStream do the right thing and get rid of reusableTokenStream.&lt;/p&gt;</comment>
                    <comment id="12717823" author="earwin" created="Tue, 9 Jun 2009 22:24:00 +0100"  >&lt;p&gt;Second this. Though I lost any hope for sane Lucene release/compat rules.&lt;/p&gt;</comment>
                    <comment id="12717831" author="markrmiller@gmail.com" created="Tue, 9 Jun 2009 22:44:35 +0100"  >&lt;p&gt;&amp;gt;&amp;gt;Second this. Though I lost any hope for sane Lucene release/compat rules. &lt;/p&gt;

&lt;p&gt;Why? Have you seen anyone arguing for anything else?&lt;/p&gt;

&lt;p&gt;If there are sane/smart ways to change our back compat policy, I think you have seen that no one would object.&lt;/p&gt;

&lt;p&gt;Its a complicated topic that has come up for discussion many times, but I don&apos;t think the current policy is insane. And I have seen most people supporting whatever is best for Lucene. But - see all of the posts on the topic. Its complicated. Nobody even really torpedoed anything, its more that enough issues were raised and no one with a proper amount of authority felt comfortable stepping up to the plate. Mike was gung ho for it for a while, and even he backed off. Thats a great indication to me that the issue is not simple. Back compat currently is not insane, but I think we all agree it should be loosened somehow in the future.&lt;/p&gt;

&lt;p&gt;The way Lucene stuff generally goes, if someone like Grant or Mike really wanted to push changes, the changes would happen. I think they both see that the effort involved in such a change is not small though. Back compat is like our constitution. Its  a pain in the butt to change in a way that everyone could get on board with. Even still, if someone really wanted to, they could probably push through that. It seems we havn&apos;t gotten to such a point with anyone yet though.&lt;/p&gt;

&lt;p&gt;Giving up is really not the answer though - thats why the discussion has come and gone in the past. The effort to get anything done grew (in terms of ideas as much as any implementation), and one by one, the participants dropped out.&lt;/p&gt;</comment>
                    <comment id="12717862" author="earwin" created="Wed, 10 Jun 2009 00:17:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;If there are sane/smart ways to change our back compat policy, I think you have seen that no one would object.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s not a matter of finding a smart way. It is a matter of sacrifice that has to be made and readiness to take the blame for decision that can be unpopular with someone.&lt;br/&gt;
You go zealously for back-compat - you sacrifice readability/maintainability of your code but free users from any troubles when they want to &apos;simply upgrade&apos;. You adopt more relaxed policy - you sacrifice users&apos; time, but in return you gain cleaner codebase and new stuff can be written and used faster.&lt;br/&gt;
There&apos;s no way to ride two horses at once.&lt;/p&gt;

&lt;p&gt;Some people are comfortable with current policies. Few cringe when they hear things like above. Most theoretically want to relax the rules. Nobody&apos;s ready to give up something for it.&lt;/p&gt;

&lt;p&gt;Okay, there&apos;s an escape hatch I (and someone else) mentioned on the list before. Adopting a fixed release cycle with small intervals between releases (compared to what we have now). Fixed - as in, releases are made each N months instead of when everyone feels they finished and polished up all their pet projects and there&apos;s nothing else exciting to do. That way we can keep the current policy, but deletion-through-deprecation approach will work, at last!&lt;br/&gt;
This solution is halfassed, I can already see discussions like &quot;That was a big change, let&apos;s keep the deprecates around longer, say - for a couple of releases.&quot;, it doesn&apos;t solve good-name-thrashing problem, as you have to go through two rounds of deprecation to change semantics on something, but keep the name.&lt;br/&gt;
But this is something better than what we have now, a-a-and this is something that needs commiter backing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Thats a great indication to me that the issue is not simple.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The issue is simple, the choice is not. And maintaining status quo is free.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Giving up is really not the answer though&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is the answer. I have no moral right to hammer my ideals into heads that did tremendously more for the project, than I did. And maintaining a patch queue over Lucene trunk is not &apos;that&apos; hard.&lt;/p&gt;</comment>
                    <comment id="12717888" author="gsingers" created="Wed, 10 Jun 2009 03:33:29 +0100"  >&lt;blockquote&gt;&lt;p&gt;If there are sane/smart ways to change our back compat policy, I think you have seen that no one would object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The sane/smart way is to do it on a case by case basis.  Here is a specific case.  Generalizing it a bit, the place where it should be more easily relaxable are the cases where we know very few people make customizations, as in implementing Fieldable or FieldCache.&lt;/p&gt;

&lt;p&gt;As for this specific case, the original change was the thing that broke back compat.  So, given it is already broken, why not fix it the right way?&lt;/p&gt;</comment>
                    <comment id="12718031" author="mikemccand" created="Wed, 10 Jun 2009 12:12:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;So, given it is already broken, why not fix it the right way?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because two wrongs don&apos;t make a right?&lt;/p&gt;

&lt;p&gt;(I assume you&apos;re suggesting changing tokenStream to match reusableTokenStream, ie allowing it to return a reused TokenStream between calls, and then deprecating reusableTokenStream).&lt;/p&gt;

&lt;p&gt;Apps that get multiple TokenStreams from a single Analyzer and then iterate through them, would silently break, if we up and made this 2nd non-back-compatible change.&lt;/p&gt;</comment>
                    <comment id="12718032" author="mikemccand" created="Wed, 10 Jun 2009 12:16:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;The sane/smart way is to do it on a case by case basis.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, and the huge periodic discussions on back-compat do soften&lt;br/&gt;
&quot;our&quot; stance on these.  For example &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1542&quot; title=&quot;Lucene can incorrectly set the position of tokens that start a field with positonInc 0.&quot;&gt;&lt;del&gt;LUCENE-1542&lt;/del&gt;&lt;/a&gt; was just such a case,&lt;br/&gt;
where we chose to simply fix the &lt;span class=&quot;error&quot;&gt;&amp;#91;rather nasty&amp;#93;&lt;/span&gt; bug at the expense of&lt;br/&gt;
possible apps relying on the broken behavior.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1679&quot; title=&quot;Make WildcardTermEnum#difference() non-final&quot;&gt;&lt;del&gt;LUCENE-1679&lt;/del&gt;&lt;/a&gt; is another (rather trivial) example, where we plan to&lt;br/&gt;
change certain fields in WildcardTermEnum to be final.&lt;/p&gt;</comment>
                    <comment id="12718079" author="mikemccand" created="Wed, 10 Jun 2009 14:26:19 +0100"  >
&lt;blockquote&gt;&lt;p&gt;Mike was gung ho for it for a while, and even he backed off. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well... my particular itch (most recently!) was an addition to Lucene&lt;br/&gt;
that&apos;d let us conditionalize the default settings so that new users&lt;br/&gt;
get the latest &amp;amp; greatest, but back-compat users can easily preserve&lt;br/&gt;
old behavior.&lt;/p&gt;

&lt;p&gt;Ie, it was a software change, not a policy change; I tried hard to&lt;br/&gt;
steer clear of any proposed changes to back-compat policy.&lt;/p&gt;

&lt;p&gt;But, for better or worse, back-compat policy is one of those&lt;br/&gt;
&quot;magnetic&quot; topics: whenever you get too close to it, it suddenly&lt;br/&gt;
sticks to you and takes over your thread.&lt;/p&gt;

&lt;p&gt;And in the end we arrived at a workable solution to my particular&lt;br/&gt;
itch, which is to make such settings explicit or switch to new APIs&lt;br/&gt;
that change the defaults (eg the new FSDir.open).&lt;/p&gt;

&lt;p&gt;That said, improving our back compat policy &lt;b&gt;is&lt;/b&gt; an important and&lt;br/&gt;
amazingly complex topic.&lt;/p&gt;</comment>
                    <comment id="12718080" author="mikemccand" created="Wed, 10 Jun 2009 14:26:46 +0100"  >
&lt;blockquote&gt;&lt;p&gt;The way Lucene stuff generally goes, if someone like Grant or Mike really wanted to push changes, the changes would happen. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, it&apos;s consensus that we all need to reach (at least enough&lt;br/&gt;
consensus to vote on it), and on complex topics it&apos;s not easy to get&lt;br/&gt;
to consensus.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Giving up is really not the answer though - thats why the discussion has come and gone in the past.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think anyone has given up.  The issue still smoulders and&lt;br/&gt;
flares up here and there (like, this issue).  Eventually we&apos;ll get&lt;br/&gt;
enough consensus for something concrete to change.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I have no moral right to hammer my ideals into heads that did tremendously more for the project, than I did.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In fact you do &amp;amp; should.  This is exactly how change happens.  Here&apos;s&lt;br/&gt;
a great (though sexist) quote:&lt;/p&gt;

&lt;p&gt;&quot;The reasonable man adapts himself to the world; the unreasonable one persists to adapt the world to himself. Therefore all progress depends on the unreasonable man.&quot; - George Bernard Shaw&lt;/p&gt;

</comment>
                    <comment id="12718081" author="mikemccand" created="Wed, 10 Jun 2009 14:27:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Adopting a fixed release cycle with small intervals between releases (compared to what we have now). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this is almost a good solution, though instead of &quot;fixed&quot; it&lt;br/&gt;
could be that we try &lt;span class=&quot;error&quot;&gt;&amp;#91;harder&amp;#93;&lt;/span&gt; to do major releases more frequently.&lt;br/&gt;
Let&apos;s face it: Lucene is changing quite quickly now, so it seems&lt;br/&gt;
reasonable that the major releases also come quickly.&lt;/p&gt;

&lt;p&gt;I say &quot;almost&quot; because.... alot of the pain in implementing our&lt;br/&gt;
current policy is the need to have a &quot;stepping stone&quot; between old and&lt;br/&gt;
new.  Ie, we now must always do a release that deprecates old APIs and&lt;br/&gt;
introduces new ones so that you can upgrade to that, fix deprecations,&lt;br/&gt;
and you know you&apos;re set for the next major release.  So eg changes to&lt;br/&gt;
interfaces is a big problem.  If we were free to suddenly make a new&lt;br/&gt;
major releases, with instructions on how to migrate old -&amp;gt; new, that&apos;d&lt;br/&gt;
be very liberating.&lt;/p&gt;

&lt;p&gt;I think nearly everyone agrees our back-compat policy is exceptionally&lt;br/&gt;
costly.  On a given interesting change to Lucene, a very large part of&lt;br/&gt;
the effort is spent on preserving back-compat. It causes all kinds of&lt;br/&gt;
spooky code, pollutes the APIs, causes us to go forward with sub-par&lt;br/&gt;
names, etc.  The freedom Marvin has to make changes to Lucy is&lt;br/&gt;
fabulous, though in exchange, it&apos;s not yet released...&lt;/p&gt;

&lt;p&gt;I think most would also agree that it&apos;s far from easy even carrying&lt;br/&gt;
out the policy we have without making mistakes: this change (addition&lt;br/&gt;
of reusableTokenStream) violated our policy (I did it by accident and&lt;br/&gt;
nobody noticed until now).  I actually believe programming languages /&lt;br/&gt;
runtime envs need to provide more support for developers; we have&lt;br/&gt;
inadequate tools now.  But we can&apos;t wait for that...&lt;/p&gt;</comment>
                    <comment id="12718122" author="shaie" created="Wed, 10 Jun 2009 17:13:07 +0100"  >&lt;p&gt;We&apos;ve had this thread &lt;a href=&quot;http://www.nabble.com/Lucene%27s-default-settings---back-compatibility-td23605466.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Lucene%27s-default-settings---back-compatibility-td23605466.html&lt;/a&gt;, and in the latest post (&lt;a href=&quot;http://www.nabble.com/Re%3A-Lucene%27s-default-settings---back-compatibility-p23792927.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Re%3A-Lucene%27s-default-settings---back-compatibility-p23792927.html&lt;/a&gt;) I tried to put together some wording for a revised (and relaxed) back-compat policy. I believe it was Grant who asked for some writeup to get to the users&apos; list, and I read also that we may want to discuss each item separately, to get to a consensus.&lt;/p&gt;

&lt;p&gt;Perhaps we can continue the discussion on that thread, and try to get to a consensus on any of the items? We don&apos;t necessarily need to change all of it in one day, but getting some feedback from you on any of the items can help bring that discussion back to life, and hopefully reach a consensus.&lt;/p&gt;

&lt;p&gt;As was said on this thread, persistence will eventually drive us to reach a consensus, so I&apos;m being persistent &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="12730290" author="mikemccand" created="Mon, 13 Jul 2009 12:13:01 +0100"  >&lt;p&gt;OK, inspired by Uwe&apos;s persistence on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1693&quot; title=&quot;AttributeSource/TokenStream API improvements&quot;&gt;&lt;del&gt;LUCENE-1693&lt;/del&gt;&lt;/a&gt;, I realized one clean&lt;br/&gt;
way to fix the back-compat break here is by using reflection when&lt;br/&gt;
creating the Analyzer as to whether the class overrides the&lt;br/&gt;
tokenStream method.  Then, in reusableTokenStream we forcefully&lt;br/&gt;
fallback to tokenStream, if it does.&lt;/p&gt;

&lt;p&gt;Attached patch, with a test case showing the issue, implements this&lt;br/&gt;
approach, and it works well.  With this approach there&apos;s no reason to&lt;br/&gt;
deprecate tokenStream.&lt;/p&gt;</comment>
                    <comment id="12730303" author="thetaphi" created="Mon, 13 Jul 2009 13:00:35 +0100"  >&lt;p&gt;Your solution is also cool, to fix the last problems with the core token streams in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1693&quot; title=&quot;AttributeSource/TokenStream API improvements&quot;&gt;&lt;del&gt;LUCENE-1693&lt;/del&gt;&lt;/a&gt;: If somebody overrides a deprecated method in one of the core tokenstreams (that are not final), the method is never called, because the indexer uses incrementToken per default. The same can be used to fix this problem in TokenStream, too.&lt;/p&gt;

&lt;p&gt;I will prepare a patch for this (I am currently preparing a new patch with some tests and the solution for the problems with number of attribute instances may not be equals number of attributes).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12413286" name="LUCENE-1678.patch" size="7812" author="mikemccand" created="Mon, 13 Jul 2009 12:13:01 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 9 Jun 2009 21:05:41 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12080</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26049</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>