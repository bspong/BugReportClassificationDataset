<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:05 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3795/LUCENE-3795.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3795] Replace spatial contrib module with LSP&apos;s spatial-lucene module</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3795</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I propose that Lucene&apos;s spatial contrib module be replaced with the spatial-lucene module within Lucene Spatial Playground (LSP).  LSP has been in development for approximately 1 year by David Smiley, Ryan McKinley, and Chris Male and we feel it is ready.  LSP is here: &lt;a href=&quot;http://code.google.com/p/lucene-spatial-playground/&quot; class=&quot;external-link&quot;&gt;http://code.google.com/p/lucene-spatial-playground/&lt;/a&gt;  and the spatial-lucene module is intuitively in svn/trunk/spatial-lucene/.&lt;/p&gt;

&lt;p&gt;I&apos;ll add more comments to prevent the issue description from being too long.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12542879">LUCENE-3795</key>
            <summary>Replace spatial contrib module with LSP&apos;s spatial-lucene module</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dsmiley">David Smiley</assignee>
                                <reporter username="dsmiley">David Smiley</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Feb 2012 16:22:01 +0000</created>
                <updated>Fri, 10 May 2013 11:42:54 +0100</updated>
                    <resolved>Thu, 15 Mar 2012 21:16:58 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/spatial</component>
                        <due></due>
                    <votes>8</votes>
                        <watches>9</watches>
                                                    <comments>
                    <comment id="13209497" author="dsmiley" created="Thu, 16 Feb 2012 16:54:03 +0000"  >&lt;p&gt;LSP is comprised of several modules:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;spatial-lucene: The heart of the project.&lt;/li&gt;
	&lt;li&gt;spatial-solr: Solr support, notably field types using spatial-lucene.&lt;/li&gt;
	&lt;li&gt;spatial-extras: An extension of spatial-lucene that uses JTS (LGPL licensed) for polygon support.&lt;/li&gt;
	&lt;li&gt;spatial-demo: A demonstration web UI using OpenLayers, Solr, Wicket, and the other LSP modules.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The spatial-solr module of LSP can be considered in another issue following the conclusion of this one.  The other modules aren&apos;t being considered for incorporation into Lucene/Solr.&lt;/p&gt;

&lt;p&gt;LSP is largely new code although some of it originated using chunks of the existing Lucene spatial contrib module and &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt; (A recursive PrefixTree/Trie algorithm using geohashes).  It&apos;s fair to say this is a superset and descendent of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt; but with a real framework around it and plenty of refactorings and tests.&lt;/p&gt;

&lt;p&gt;I ran Atlassian&apos;s Clover code coverage to get some statistics of this spatial-lucene module of LSP:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;LOC: 6,605, NCLOC: 3,959&lt;/li&gt;
	&lt;li&gt;Packages: 18, Classes: 70&lt;/li&gt;
	&lt;li&gt;Code coverage: 53%&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The code coverage surprises me a little... perhaps the number is higher when the spatial-solr module gets involved which uses more of the classes then the tests do here alone.&lt;/p&gt;</comment>
                    <comment id="13209553" author="dsmiley" created="Thu, 16 Feb 2012 18:05:05 +0000"  >&lt;p&gt;The spatial-lucene module of LSP has 3 main packages: &apos;base&apos;, &apos;strategies&apos;, and &apos;benchmark&apos;. It also has a fair amount of tests.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;Base&quot;&gt;&lt;/a&gt;Base&lt;/h3&gt;
&lt;p&gt;Major pieces in &apos;base&apos;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;SpatialContext interface and simple implementation&lt;/li&gt;
	&lt;li&gt;Distance math code&lt;/li&gt;
	&lt;li&gt;Shapes interface and implementations&lt;/li&gt;
	&lt;li&gt;PrefixTree/Trie (grid) interface and implementations (e.g. geohash)&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;a name=&quot;Strategies&quot;&gt;&lt;/a&gt;Strategies&lt;/h3&gt;
&lt;p&gt;The &quot;strategies&quot; portion of this module contains spatial indexing/search implementations using Lucene.&lt;br/&gt;
Major interfaces (just one):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;SpatialStrategy (including abstract PrefixGridStrategy)&lt;br/&gt;
Major implementations:
	&lt;ul&gt;
		&lt;li&gt;&lt;b&gt;RecursivePrefixTreeStrategy&lt;/b&gt;
		&lt;ul&gt;
			&lt;li&gt;This is the main strategy, based on &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt;. It uses an abstract class SpatialPrefixTree which has geohash and quadtree implementations.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
		&lt;li&gt;TermQueryPrefixTreeStrategy&lt;/li&gt;
		&lt;li&gt;TwoDoubleStrategy
		&lt;ul&gt;
			&lt;li&gt;Akin to Solr&apos;s LatLonType, although some edge cases not yet implemented.&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;a name=&quot;Benchmarking&quot;&gt;&lt;/a&gt;Benchmarking&lt;/h3&gt;
&lt;p&gt;Benchmarking is a TBD; there&apos;s the start of some code there but nothing real. 1 year ago I did benchmark &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt; (with great results) and posted my benchmark code here &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2844&quot; title=&quot;benchmark geospatial performance based on geonames.org&quot;&gt;LUCENE-2844&lt;/a&gt; in the interest of transparency.&lt;/p&gt;

&lt;h3&gt;&lt;a name=&quot;Testing&quot;&gt;&lt;/a&gt;Testing&lt;/h3&gt;
&lt;p&gt;Testing so far hasn&apos;t been aimed directly at increasing code coverage, it&apos;s been aimed at finding nasty corner cases in spatial. Spatial code is highly prone to edge cases.&lt;/p&gt;</comment>
                    <comment id="13209588" author="dsmiley" created="Thu, 16 Feb 2012 18:37:10 +0000"  >&lt;h3&gt;&lt;a name=&quot;Features&quot;&gt;&lt;/a&gt;Features&lt;/h3&gt;
&lt;p&gt;The main goals of LSP is to be a great framework to plug in spatial search algorithms and shape implementations.  It of course includes good implementations of these key abstractions.  Here are some key features, most of which related to using RecursivePrefixTreeStrategy with geohashes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Multi-valued fields&lt;/li&gt;
	&lt;li&gt;Index shapes that have area (e.g. not just points)&lt;br/&gt;
  Tests have yet to be added for this.&lt;/li&gt;
	&lt;li&gt;No special RAM caches for filtering, just standard term index&lt;br/&gt;
  Unlike Solr&apos;s LatLonType which needs to cache all points in RAM if the query shape is a circle&lt;/li&gt;
	&lt;li&gt;Fast filtering&lt;br/&gt;
  Although &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt; has been proven, technically LSP hasn&apos;t.  3rd party anecodes re-inforce this claim.&lt;/li&gt;
	&lt;li&gt;Multi-value sort&lt;br/&gt;
  Based on closest index point to center of query shape.  Distances are returned via the score of an LSP query.&lt;/li&gt;
	&lt;li&gt;Specify precision of query shape and index shape&lt;br/&gt;
  Thereby allowing for faster filtering tunable precision&lt;/li&gt;
	&lt;li&gt;Multiple distance algorithms:
	&lt;ul&gt;
		&lt;li&gt;Spherical: Law of Cosines, Haversine, Vincenty&lt;/li&gt;
		&lt;li&gt;Cartesian: Pythagorean Theorem&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Cartesian (2d flat) &amp;amp; Geospatial sphere models&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;&lt;a name=&quot;Todo&quot;&gt;&lt;/a&gt;Todo&lt;/h3&gt;
&lt;p&gt;There are many things I want to improve and add but in my view there isn&apos;t anything truly making this non-committable.  Chris has raised concerns that the other committers will want to see benchmark results before accepting this.  I&apos;ll leave that for you (the other committers) to decide.&lt;/p&gt;

&lt;p&gt;And I also heard that some committers are unsure wether Lucene should have a spatial module at all.  However there is certainly demand for it, at least at the Solr level.  Furthermore, there are some non-spatial use cases of the spatial module.  One interesting use-case is RecursivePrefixTreeStrategy&apos;s (RPTS) unique ability to index shapes with area.  If you had a requirement to index a variable number of time durations, then unlike Lucene&apos;s trie numeric support in which only discrete numbers are supported, RPTS could be used with x being time and y being unused. Buy the way, PrefixTree and Trie are synonymous words.&lt;/p&gt;</comment>
                    <comment id="13209605" author="simonw" created="Thu, 16 Feb 2012 18:55:06 +0000"  >&lt;p&gt;wow this is a lot of stuff. we certainly need a code donation for this. without getting into details +1 from my side. I think lucene desperatly needs spatial support... it should be a module IMO. we should drop the stuff we have an get this in shape ie. into a module. I am not sure about the LGPL stuff I guess we should try to integrate everything else and if we really want or if there is a way to integrate the LGPL stuff we can take care of this later!&lt;/p&gt;</comment>
                    <comment id="13209622" author="dsmiley" created="Thu, 16 Feb 2012 19:11:32 +0000"  >&lt;p&gt;What constitutes a &quot;code donation&quot;?  By the way, I&apos;ve gone through the proper channels with my employer with regard to &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2155&quot; title=&quot;Geospatial search using geohash prefixes&quot;&gt;&lt;del&gt;SOLR-2155&lt;/del&gt;&lt;/a&gt; and LSP.  MITRE has no copyright on this code; I&apos;ve marked it all as ASF.&lt;/p&gt;</comment>
                    <comment id="13209707" author="rcmuir" created="Thu, 16 Feb 2012 20:29:49 +0000"  >&lt;p&gt;Simon do we really need a code grant here? &lt;/p&gt;

&lt;p&gt;Its my understanding (correct me if i am wrong): the developers involved (David, Ryan, Chris) are all committers &lt;br/&gt;
with iCLA on file, so is it really any different than any other patch from that perspective?&lt;/p&gt;

&lt;p&gt;As far as LGPL, according to David&apos;s description and the title of this jira issue (possible i did not interpret it correctly,&lt;br/&gt;
correct me if so), the he wants to replace lucene/contrib/spatial with the spatial-lucene project, and that&lt;br/&gt;
it has no LGPL ties at all, (only spatial-extras does).&lt;/p&gt;

&lt;p&gt;Without looking at any code myself, if thats really the case I&apos;m +1 on principle because it means we basically&lt;br/&gt;
have an improved spatial module for lucene core with no catch at all. The current code has not seen much maintenance.&lt;/p&gt;

&lt;p&gt;(And i agree, we should be shooting for a proper module/ here, not a contrib).&lt;/p&gt;</comment>
                    <comment id="13209829" author="markrmiller@gmail.com" created="Thu, 16 Feb 2012 22:37:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;... do we really need a code grant here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think if you go by the letter, since it was &apos;developed&apos; outside of the Apache ecosystem, we want a code grant. I wonder where apache-extras fits there though.&lt;/p&gt;

&lt;p&gt;Personally, if it was all only developed by committers in a public repo, I don&apos;t have a problem with being practical - FWIW though - I&apos;m just one guy INAL.&lt;/p&gt;</comment>
                    <comment id="13209862" author="janhoy" created="Thu, 16 Feb 2012 23:02:27 +0000"  >&lt;p&gt;Impressive piece of work! Given license stuff is ok, here is my&lt;br/&gt;
+1&lt;/p&gt;</comment>
                    <comment id="13209888" author="thetaphi" created="Thu, 16 Feb 2012 23:34:30 +0000"  >&lt;p&gt;Cool work! I scanned the code quickly and it seems to fit much better than the current spatial!&lt;/p&gt;

&lt;p&gt;I have some suggestions regarding performance; BooleanQuery usage and related inconsistency with BQ scoring (with coord) in the different strategies; also found some caching problems (AtomicReader is key to cache not AtomicReader.getCoreCacheKey, so new deleted docs after reopen invalidate the cache), but I would prefer to discuss that here once the patch is provided on Lucene&apos;s JIRA.&lt;/p&gt;</comment>
                    <comment id="13209966" author="cmale" created="Fri, 17 Feb 2012 01:28:06 +0000"  >&lt;p&gt;Huge +1&lt;/p&gt;

&lt;p&gt;Thanks so much David for opening this issue and getting the code to a point where it can be contributed.  I&apos;m really excited to see this brought into the fold and glad to see support from others.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As far as LGPL, according to David&apos;s description and the title of this jira issue (possible i did not interpret it correctly,&lt;br/&gt;
correct me if so), the he wants to replace lucene/contrib/spatial with the spatial-lucene project, and that&lt;br/&gt;
it has no LGPL ties at all, (only spatial-extras does).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Absolutely.  The portion of the codebase which uses LGPL code is entirely optional and decoupled from the rest of the code.  From a functional perspective, as David says, its only really related to polygon support which is hugely powerful but can exist somewhere else if needs be.&lt;/p&gt;</comment>
                    <comment id="13209971" author="cmale" created="Fri, 17 Feb 2012 01:38:27 +0000"  >&lt;blockquote&gt;
&lt;p&gt;but I would prefer to discuss that here once the patch is provided on Lucene&apos;s JIRA.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is it best to create a patch here and iterate on any problems, or create a branch and work through them there?&lt;/p&gt;</comment>
                    <comment id="13210070" author="dsmiley" created="Fri, 17 Feb 2012 05:38:25 +0000"  >&lt;p&gt;FYI the code coverage figure is erroneous, Clover didn&apos;t recognize some inner classes extending other tests as tests.  Using IntelliJ IDEA Ultimate&apos;s built-in coverage, it&apos;s 63% (as counted per line), and I believe its higher once the spatial-solr module is brought into the mix which has a bunch of tests.&lt;/p&gt;

&lt;p&gt;Uwe, I&apos;m very interested in your input on anything to make the code better.&lt;/p&gt;

&lt;p&gt;Given the volume of code, I believe a feature branch makes the most sense instead of a humungous patch file.&lt;/p&gt;</comment>
                    <comment id="13210163" author="thetaphi" created="Fri, 17 Feb 2012 09:48:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;From a functional perspective, as David says, its only really related to polygon support which is hugely powerful but can exist somewhere else if needs be.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we add polygon support using the java.awt.geom.Area class? It has lots of code vor overlapping polygons and similar stuff... My own gazeteer using Lucene is based on this. In general we could ad another strategy to handle this (java.awt.geom implements lots of different shape types, in contrast to &quot;normal&quot; AWT double not integer based).&lt;/p&gt;</comment>
                    <comment id="13210263" author="mikemccand" created="Fri, 17 Feb 2012 13:45:13 +0000"  >&lt;p&gt;+1, Lucene badly needs good ootb spatial search.&lt;/p&gt;

&lt;p&gt;I think a branch makes complete sense... we&apos;ve made branches for much smaller things!&lt;/p&gt;</comment>
                    <comment id="13210325" author="dsmiley" created="Fri, 17 Feb 2012 15:26:22 +0000"  >&lt;p&gt;Uwe,&lt;br/&gt;
Thanks for bringing java.awt.geom.Area to my attention; I haven&apos;t noticed it before.  It looks workable, and the code for it looks impressive to me. As an aside, JTS has a particularly scalable polygon scaling to many vertexes which get stored in an in-memory RTree &amp;#8211; although I don&apos;t think this feature is as pertinent for user-input polygons which would have a small number.  It is unfortunate that sun.awt.geom.Crossing is not exposed from Area, since computing it is not particularly cheap and LSP will ask Area two things &amp;#8211; intersects() and contains() given a lat-lon box, and Area will compute the same Crossing twice.  Use of this in LSP would not be a &quot;stategy&quot;, it would be a subclass of SpatialContext which acts as a factory for shapes.  Speaking of which, I&apos;m thinking of renaming the &quot;simple&quot; package to be something else like &quot;impl&quot; since some of the implementations are decidedly not simple &amp;#8211; GeoCircleImpl case in point, and the addition of a polygon would seal that point.&lt;/p&gt;

&lt;p&gt;I look forward to working with you more Uwe.  It appears we do a lot of similar work &amp;#8211; geospatial and trie stuff.&lt;/p&gt;</comment>
                    <comment id="13210814" author="billnbell" created="Sat, 18 Feb 2012 05:26:37 +0000"  >&lt;p&gt;+1 getting polygon support ootb is huge as is geohashing and multivalued lat longs. Next step Solr...&lt;/p&gt;</comment>
                    <comment id="13212038" author="ryantxu" created="Mon, 20 Feb 2012 19:56:11 +0000"  >&lt;p&gt;Thanks for pushing this forward David!  (sorry i have been offline recently... just had a baby!)&lt;/p&gt;

&lt;p&gt;We should defiantly make a branch for this &amp;#8211; getting things integrated with the build system will be non-trivial.&lt;/p&gt;

&lt;p&gt;Re code grant?  given that all developers of this code are lucene committers and intend for this be contributed to ASF, I don&apos;t think it is necessary.  But if we need more paperwork, that is OK too.&lt;/p&gt;

&lt;p&gt;Re polygons / AWT / JTS?  I hope this code lets us use an implementation that is appropriate for the need.  In some cases, simple math or java.awt.geom may be fine, in others JTS will be necessary.  My fear is that with JTS out of the core build/test system, JTS will be a secondary concern.  Through this process, I will continue to make sure any design decisions don&apos;t exclude a solid JTS solution.&lt;/p&gt;


</comment>
                    <comment id="13212041" author="ryantxu" created="Mon, 20 Feb 2012 20:00:31 +0000"  >&lt;p&gt;David &amp;#8211; do you want to go ahead and make a branch and integrate:&lt;br/&gt;
&lt;a href=&quot;http://lucene-spatial-playground.googlecode.com/svn/trunk/spatial-lucene/&quot; class=&quot;external-link&quot;&gt;http://lucene-spatial-playground.googlecode.com/svn/trunk/spatial-lucene/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I still think we want a .jar file for the spatial code/API that does not need lucene.  This will be important for non-lucene clients that should be able to deal with real classes rather then strings.&lt;/p&gt;</comment>
                    <comment id="13212175" author="dsmiley" created="Mon, 20 Feb 2012 22:32:25 +0000"  >&lt;p&gt;I created a branch &lt;a href=&quot;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3795_lsp_spatial_module&quot; class=&quot;external-link&quot;&gt;https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3795_lsp_spatial_module&lt;/a&gt; from r1291350 (the most recent version with passing tests as indicated by Jenkins)&lt;/p&gt;</comment>
                    <comment id="13213439" author="dsmiley" created="Wed, 22 Feb 2012 07:59:51 +0000"  >&lt;p&gt;Branch Status Update:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;LSP Lucene spatial is in as a module, actually as two modules, spatial/base &amp;amp; spatial/strategy. That complicates the build but Chris &amp;amp; Ryan insist. The maven build works.&lt;/li&gt;
	&lt;li&gt;Old spatial contrib is gone.&lt;/li&gt;
	&lt;li&gt;Solr is updated to use the new module.  80% was trivial changes, 20% pretty easy.  Nothing hard.  Tests pass.&lt;/li&gt;
	&lt;li&gt;IntelliJ IDEA build seems done (I use IDEA)&lt;/li&gt;
	&lt;li&gt;Eclipse build is probably done (Ryan worked on it, I don&apos;t use it)&lt;/li&gt;
	&lt;li&gt;Maven build is done.  That was easy!&lt;/li&gt;
	&lt;li&gt;Ant build in progress.  The Solr side isn&apos;t seeing the spatial libs.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13213445" author="cmale" created="Wed, 22 Feb 2012 08:08:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;LSP Lucene spatial is in as a module, actually as two modules, spatial/base &amp;amp; spatial/strategy. That complicates the build but Chris &amp;amp; Ryan insist. The maven build works.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t recall insisting that here.  I think we should do what&apos;s best in this situation.  If having two sub modules is causing too much difficulty for no benefit, then +1 to reducing them to one.&lt;/p&gt;</comment>
                    <comment id="13215101" author="dsmiley" created="Thu, 23 Feb 2012 22:03:56 +0000"  >&lt;p&gt;Chris, in an email months ago you declared interest in a client library jar, and Ryan absolutely insisted.  The difficulties have been figured out.&lt;/p&gt;

&lt;p&gt;There is no benchmarking code.  LSP did have about 4 classes in a benchmarking package but AFAIK it was draft in-progress (year old code now) and had probably never been executed before.  Consequently, I chose not to copy those classes over. Once there is benchmarking, it will probably exist here: /modules/spatial/benchmarking  alongside &quot;base&quot; and &quot;strategy&quot;.  Admittedly that seems a bit heavyweight (i.e. its own module) but it wouldn&apos;t truly belong anywhere else, although there probably wouldn&apos;t bee much code to it.  I don&apos;t feel strongly about where it should go.&lt;/p&gt;

&lt;p&gt;At this point, &lt;b&gt;I think the branch is in committable shape&lt;/b&gt;.  To the best of my ability to know, the Ant and Maven builds work, same for Eclipse &amp;amp; IntelliJ IDEA.&lt;/p&gt;</comment>
                    <comment id="13215105" author="rcmuir" created="Thu, 23 Feb 2012 22:08:04 +0000"  >&lt;p&gt;What is the advantage of two spatial modules? Can I run spatial queries with just base by itself?&lt;/p&gt;

&lt;p&gt;For benchmarking code, why not put it in the benchmarking package and have benchmark &lt;br/&gt;
depend on it (thats how all other modules, highlighter, analyzers, anything else we &lt;br/&gt;
benchmark works)&lt;/p&gt;</comment>
                    <comment id="13215124" author="ryantxu" created="Thu, 23 Feb 2012 22:22:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;What is the advantage of two spatial modules? Can I run spatial queries with just base by itself?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The real advantage is that client code (solrj etc) can know about Shapes/Operations without needing to include lucene.  From spatial-base, you can &lt;b&gt;build&lt;/b&gt; queries and understand the results; but can&apos;t run the query.&lt;/p&gt;

&lt;p&gt;I need my client code to use a real API rather then needing to build the correct String query representations and parsing results.&lt;/p&gt;</comment>
                    <comment id="13215198" author="dsmiley" created="Thu, 23 Feb 2012 23:29:34 +0000"  >&lt;p&gt;Rob, thanks for your suggestion/opinion on putting the spatial benchmarking code into the benchmarking module.  Works for me &amp;#8211; one less module.&lt;/p&gt;

&lt;p&gt;Ryan, how would you feel about a single combined spatial module that you would use from your remote SolrJ client?  Yes, it wouldn&apos;t be great that the jar would be half filled with classes you don&apos;t need (the spatial strategies coded against the Lucene API) but is that really such a big deal?  It would be annoying to configure your maven build to not include the transitive dependencies but it&apos;s doable, and perhaps we could mark lucene as an optional dependency in a combined spatial module.  In practice, anyone using this spatial module on the server will certainly have lucene already.&lt;/p&gt;</comment>
                    <comment id="13215253" author="ryantxu" created="Fri, 24 Feb 2012 00:25:03 +0000"  >&lt;p&gt;I guess I don&apos;t see the problem with having multiple .jar files (aside from the ant setup effort)&lt;/p&gt;

&lt;p&gt;I&apos;m fine with one .jar if we guarantee that the &apos;base&apos; classes don&apos;t have compile time access to lucene classes.  I&apos;m sure there is some ant crazieness to compile half the project with different classpaths then bundle them together, but that seems more complex (and less clear) then two .jar files&lt;/p&gt;</comment>
                    <comment id="13215459" author="cmale" created="Fri, 24 Feb 2012 07:24:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Chris, in an email months ago you declared interest in a client library jar, and Ryan absolutely insisted. The difficulties have been figured out.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed I did but that was when we were developing this outside of Lucene, I&apos;m now thinking what&apos;s best for Lucene and am open to any ideas.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I need my client code to use a real API rather then needing to build the correct String query representations and parsing results.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are you able to give us some more information on what your client code needs? Is it just being able to instantiate a Shape and then convert it to a queryable String format?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;perhaps we could mark lucene as an optional dependency in a combined spatial module.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 This seems like the best compromise&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m fine with one .jar if we guarantee that the &apos;base&apos; classes don&apos;t have compile time access to lucene classes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I also agree with this and we should bare it in mind as we progress.&lt;/p&gt;</comment>
                    <comment id="13215471" author="dsmiley" created="Fri, 24 Feb 2012 07:42:51 +0000"  >&lt;p&gt;My preference is one module vs. multiple. Now that Ryan and Chris are cool with this, we can continue with that objective.&lt;/p&gt;

&lt;p&gt;Tomorrow night or sooner I&apos;ll get on merging them together.&lt;/p&gt;</comment>
                    <comment id="13216522" author="dsmiley" created="Sat, 25 Feb 2012 19:18:28 +0000"  >&lt;p&gt;Ryan and I chatted about this issue more and I didn&apos;t take consolidation steps yet.  I&apos;m pretty neutral, by the way &amp;#8211; I see both sides.&lt;/p&gt;

&lt;p&gt;Another option occurred to me and I&apos;m excited about the prospects because I think it&apos;s a good balance.  To be clear, spatial-base has nothing to do with Lucene.  It largely consists of shape interfaces with implementations, has some distance calculators like Haversine and other spatial calculations, and can (or at least should) parse and emit some dialect of WKT &amp;#8211; a popular standard, extended where needed to represent shapes that aren&apos;t in WKT such as a circle.  There&apos;s a good deal of testing too.  It is certainly useful in its own right just as other spatial libraries are.  To defend its existence when there are other spatial libraries, I&apos;ll point out a few things that make this more desirable than other 3rd party libraries:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ASL licensed; required for acceptence by the Lucene PMC&lt;/li&gt;
	&lt;li&gt;Geospatial orientation, not just 2D.  FYI JTS is purely 2D.&lt;/li&gt;
	&lt;li&gt;Has shapes not found in other libraries like a point-distance (circle) shape.  It&apos;s inexplicable to me why this isn&apos;t elsewhere.  And this shape isn&apos;t just some POJO for a point &amp;amp; radius, there is sophisticated math for the various relations (e.g. disjoint, contains, etc.) of rectangle-circle intersection.&lt;/li&gt;
	&lt;li&gt;Performance oriented &amp;#8211; it was developed concurrent with lucene spatial search algorithms and I try to keep this in mind.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So how about spatial-base remains in the LSP project off-Lucene.  LSP and this component will both probably receive a name change and possible re-hosting on Github.  LSP (or whatever its eventual name is) will always need to exist any way because there are integration scenarios involving LGPL libraries that the Lucene PMC is uncomfortable with, and there is a nifty demo webapp too.  The spatial-extras module could probably be merged with spatial-base, making testing easier and it&apos;s one less jar.&lt;/p&gt;

&lt;p&gt;If spatial-base becomes a 3rd party library required by a single Lucene spatial module, then that brings a simplicity to the code organization insofar as there is just one spatial module, not 2.  It also means that the spatial module will be entirely focused on the intersection of Lucene &amp;amp; spatial, and not have other code unrelated to Lucene.  When deployed, it would mean 2 jars, the spatial-base.jar (or whatever its renamed to) and lucene-spatial.jar.  FYI Solr, at least for the moment, would only need the base one, not lucene-spatial.&lt;/p&gt;

&lt;p&gt;The down side is that both spatial-base and lucene-spatial are in-progress and are largely developed together, and so separating them to live on independent projects will bring about some extra burden in syncing them from time to time.  This is reminiscent of the Lucene &amp;amp; Solr projects before they were merged.  To mitigate this, our spatial team (me, Ryan, Chris) can initially focus on making changes to the public API of spatial-base to the point we like it even more and are less likely to change it.&lt;/p&gt;</comment>
                    <comment id="13217399" author="ryantxu" created="Mon, 27 Feb 2012 19:06:41 +0000"  >&lt;p&gt;I like the idea that spatial-base would be external to lucene, and included as a .jar file.  This was my original proposal when starting to discuss this long ago.&lt;/p&gt;

&lt;p&gt;As is, the spatial library is quite useful on its own;  I think it has the best chance of long term success outside of lucene.  Outside lucene (ASF) it can have compile/test dependencies on JTS that make it more robust but still have strong ASL only runtime.&lt;/p&gt;</comment>
                    <comment id="13220614" author="ryantxu" created="Fri, 2 Mar 2012 02:18:44 +0000"  >&lt;p&gt;OK, I think the branch is ready to go.&lt;/p&gt;

&lt;p&gt;The one thing I don&apos;t like is that the spatial4j.jar gets included twice, once in the modules &apos;lib&apos; directory and again in the solr lib directory.  I could not figure out how to have the solr build compile and distribute this one&lt;/p&gt;</comment>
                    <comment id="13220688" author="dsmiley" created="Fri, 2 Mar 2012 05:43:09 +0000"  >&lt;p&gt;For those following along here, the former &quot;spatial-base&quot; module portion of this code is now an ASL licensed 3rd party jar dependency: &lt;a href=&quot;http://spatial4j.com&quot; class=&quot;external-link&quot;&gt;http://spatial4j.com&lt;/a&gt; &quot;Spatial4J&quot; Basically half of LSP is there now going by this new name.  The other half is here as the new lucene spatial module.&lt;/p&gt;

&lt;p&gt;I agree that the branch looks ready to be merged into trunk.&lt;/p&gt;</comment>
                    <comment id="13220811" author="rcmuir" created="Fri, 2 Mar 2012 10:05:55 +0000"  >&lt;p&gt;Can we rethink this structure? In my opinion there is a little bit of dll-hell going on on.&lt;/p&gt;

&lt;p&gt;From Lucene&apos;s perspective as a library, 3rd party dependencies are &lt;b&gt;extremely expensive&lt;/b&gt;. I realize&lt;br/&gt;
this doesnt matter so much for solr, since its an app, but I think we should minimize this.&lt;/p&gt;

&lt;p&gt;We all agreed modules should be treated like lucene core (which has no dependencies), and sure,&lt;br/&gt;
some modules do have dependencies but they should be minimal and necessary.&lt;/p&gt;

&lt;p&gt;Just looking at the lib/ directory in the branch I see:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;commons-lang.jar: This is unnecessary and only used for EqualsBuilder/HashCodeBuilder, please remove!&lt;/li&gt;
	&lt;li&gt;slf4j.jar: Lucene doesnt do logging: there have been numerous discussions about this, such logging should be at a higher level app like solr. But, this doesnt seem to be &apos;actually&apos; used anyway... please remove!&lt;/li&gt;
	&lt;li&gt;spatial4j.jar: I think this approach should be re-thought. I dont understand the advantage of creating the extra level of indirection to a github project here. I also have no clue what dependencies this jar itself has... furthermore i dont even know how to get the source code for this binary jar, there is only a github link with no branches or tags to indicate &quot;0.1&quot;. I think all of this is a big no-go.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13220814" author="rcmuir" created="Fri, 2 Mar 2012 10:09:23 +0000"  >&lt;p&gt;Also again about my spatial4j.jar: besides the dll-hell perspective, there is also the community perspective.&lt;/p&gt;

&lt;p&gt;I dont think we should create github projects that only a few people can commit to and then link binary jars from them into lucene&apos;s source tree.&lt;/p&gt;</comment>
                    <comment id="13220816" author="cmale" created="Fri, 2 Mar 2012 10:10:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;I dont think we should create github projects that only a few people can commit to and then link binary jars from them into lucene&apos;s source tree.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13220819" author="thetaphi" created="Fri, 2 Mar 2012 10:22:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;commons-lang.jar: This is unnecessary and only used for EqualsBuilder/HashCodeBuilder, please remove!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;die, die, die &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; To come back to an earlier comment: I don&apos;t like projects that add a 15 MB JAR file and use one single method/class out of it (this is of course an extreme example). In my opinion, common-lang.jar should only be used, if you heavily depend on it. And if you really want to use it, use version 3 (o.a.commons.lang3 package), not the Java 1.1 versions. Most of the stuff in commons-lang is useless since java 5 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and the old pre-commons-lang3 is not typesafe at all (and has millions of bugs regarding unicode).&lt;/p&gt;</comment>
                    <comment id="13220822" author="simonw" created="Fri, 2 Mar 2012 10:30:20 +0000"  >&lt;p&gt;I agree with robert, can we try to survive without dependencies? What is the reason to have this stuff on github, its your projects anyway right? also the spatial4j notice file is a copy of the commons lang.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13220825" author="thetaphi" created="Fri, 2 Mar 2012 10:38:35 +0000"  >&lt;p&gt;What&apos;s the reason to have spatial4j outside of Lucene?&lt;/p&gt;</comment>
                    <comment id="13220920" author="janhoy" created="Fri, 2 Mar 2012 13:45:49 +0000"  >&lt;p&gt;First, Ryan and David, I think you&apos;ve done a great job with all this code and a million thanks for donating.&lt;/p&gt;

&lt;p&gt;I think I also see the rationale behind splitting the more general spatial4j core into a separate project, hoping that it will attract far more users than only Lucene. While that may happen one day, perhaps we should take one step at a time, letting spatial4j start its life as part of Lucene-java (as a separate module or contrib?), and after a year or so, when it is more mature, cast a vote for whether it shuold become a Lucene sub-project, join Incubator as a new project, join as a library within  Apache commons project (commons-spatial), move to GitHub with all Lucene committers invited as committers) or whatever.&lt;/p&gt;

&lt;p&gt;commons-spatial sounds attractive to me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13220942" author="rcmuir" created="Fri, 2 Mar 2012 14:14:15 +0000"  >&lt;blockquote&gt;
&lt;p&gt;when it is more mature, cast a vote for whether it shuold become a Lucene sub-project, join Incubator as a new project, join as a library within Apache commons project (commons-spatial), move to GitHub with all Lucene committers invited as committers) or whatever.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my opinion &lt;a href=&quot;http://incubator.apache.org/sis/&quot; class=&quot;external-link&quot;&gt;http://incubator.apache.org/sis/&lt;/a&gt; seems like the correct home.&lt;/p&gt;

&lt;p&gt;Of course the code could be donated there in parallel, if it starts picking up steam and graduates from the incubator,&lt;br/&gt;
then it would be the right thing to depend on it I think?&lt;/p&gt;</comment>
                    <comment id="13220948" author="dsmiley" created="Fri, 2 Mar 2012 14:23:46 +0000"  >&lt;p&gt;Commons-lang is used by both Spatial4J and the new spatial-module.  This dependency can easily be severed and will happen shortly.&lt;/p&gt;

&lt;p&gt;SLF4j is used by both Spatial4J and the new spatial-module. I really like SLF4J but all this resistance to remove dependencies leads me to compromise, and I&apos;ll find a way to removing it or have it as an optional dependency.&lt;/p&gt;

&lt;p&gt;Uwe and others, the rationale for a core spatial library off of Lucene is my last (long) comment: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3795?focusedCommentId=13216522&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13216522&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-3795?focusedCommentId=13216522&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13216522&lt;/a&gt;&lt;br/&gt;
For what its worth, Ryan and I absolutely love the plan for all of the points in it.  I wish someone had expressed their dissenting opinion on it at that time &amp;#8211; From Ryan and I&apos;s perspective there basically isn&apos;t anything not to like.  Can anything be done to warm people up to this?&lt;/p&gt;

&lt;p&gt;Rob; you&apos;re absolutely right that there needs to be a release tagged in the Spatial4J repo.  Ryan has already taken steps to get this library in published Maven repos which is the most meaningful step that could be taken to officially release it.  Again, we should certainly tag it because it is both best practice and easy.&lt;/p&gt;

&lt;p&gt;The ASF is a bit heavy on process and less permissive on interactions with LGPL dependencies (even optional ones?) and so I don&apos;t think ASF/incubator is a good place for Spatial4j as an independent project.  As frustrating as I find it, the making of spatial-4j &lt;em&gt;could&lt;/em&gt; be reverted, returning back to the 2-module setup that some people here seemed to express resistance to.&lt;/p&gt;</comment>
                    <comment id="13220949" author="rcmuir" created="Fri, 2 Mar 2012 14:29:45 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The ASF is a bit heavy on process and less permissive on interactions with LGPL dependencies (even optional ones?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which is a great thing in my opinion if we are going to depend on an external library for spatial support.&lt;/p&gt;</comment>
                    <comment id="13221056" author="pramirez" created="Fri, 2 Mar 2012 17:04:52 +0000"  >&lt;p&gt;Why not help Apache SIS grow and contribute spatial base as a module there. Then make the Lucene/Solr parts a contrib part in SIS or here. I&apos;m sure they would love the support and would hope to get the developers of spatial base as key members of their community. This would put spatial stuff in one place and help an Apache spatial community grow. This seems more like the Apache way. That said, I am jumping in late to this discussion but I think spatial stuff really deserves its own community at Apache.&lt;/p&gt;</comment>
                    <comment id="13221069" author="yseeley@gmail.com" created="Fri, 2 Mar 2012 17:24:31 +0000"  >&lt;p&gt;While it&apos;s fair game to ask if something barely used like commons-lang can be removed, it doesn&apos;t seem like the other things should be blockers to getting this committed.&lt;/p&gt;

&lt;p&gt;As long as spatial4j.jar is properly licensed, where that project should &quot;live&quot; is a different issue and has nothing to do with this.  If we didn&apos;t know any of the authors of this jar, we wouldn&apos;t be having the discussion at all.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We all agreed modules should be treated like lucene core&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t recall that - modules are shared code by both Lucene and Solr.  There&apos;s a desire to not pull in all of solr in a module of course, but dependencies on other jars or other modules should be fine.&lt;/p&gt;</comment>
                    <comment id="13221076" author="markrmiller@gmail.com" created="Fri, 2 Mar 2012 17:35:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;We all agreed modules should be treated like lucene core&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just to chime in since this caught my eye - I don&apos;t necessarily agree with this either - I think it depends on the module - thats what I thought we had agreed - like some modules could be more like lucene core and some modules might be more like benchmark - some modules might have really strong back compat, and others might declare something more experimental. And why not a module that might depend on a couple other modules?&lt;/p&gt;

&lt;p&gt;Don&apos;t take that as an opinion on this spatial issue though - I&apos;m not up to speed on this discussion - just wanted to weigh in on a comment that caught my eye in email.&lt;/p&gt;</comment>
                    <comment id="13221099" author="ryantxu" created="Fri, 2 Mar 2012 17:59:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;What&apos;s the reason to have spatial4j outside of Lucene?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;1. Making JTS a 1st class test object (also why SIS is not an option)&lt;br/&gt;
2. The spatial4j.jar is useful on its own &amp;#8211; it has a chance to build its own community. &lt;br/&gt;
3. Lucene is not a great dev community for things that are not primarily lucene focused.&lt;/p&gt;

&lt;p&gt;I understand my primary concern (JTS) is a non issue for many people here &amp;#8211; The trade off to have compile/test dependencies on JTS isn&apos;t an option at ASF.&lt;/p&gt;

&lt;p&gt;I like this option because it gives lucene a solid ASL solution to support most things.  &lt;b&gt;If&lt;/b&gt; people want to add JTS to their runtime, they then get strong polygon support.&lt;/p&gt;

&lt;p&gt;The alternative packaging structure gets pretty crazy:&lt;/p&gt;

&lt;p&gt;In ASF Lucene Reps:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;modules/spatial-base (no lucene dependencies)&lt;/li&gt;
	&lt;li&gt;modules/spatial-strategies (uses base)&lt;/li&gt;
	&lt;li&gt;solr/spatial...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Elsewhere&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;spatial-base-jts (base with JTS)&lt;/li&gt;
	&lt;li&gt;spatial-strategies-with-jts&lt;/li&gt;
	&lt;li&gt;spatial-solr-with-jts&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If I want to make sure the JtsSpatialContext passes all the &lt;b&gt;same&lt;/b&gt; tests that the SimpleSpatialContext passes, the structure gets even crazier because we have to package the test projects too!&lt;/p&gt;


&lt;p&gt;--------------&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We all agreed modules should be treated like lucene core&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hymmm &amp;#8211; my understanding is that modules have &lt;b&gt;flexibility&lt;/b&gt; to have dependencies that are appropriate.  &lt;/p&gt;



</comment>
                    <comment id="13221145" author="thetaphi" created="Fri, 2 Mar 2012 18:49:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Commons-lang is used by both Spatial4J and the new spatial-module. This dependency can easily be severed and will happen shortly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fine!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;SLF4j is used by both Spatial4J and the new spatial-module. I really like SLF4J but all this resistance to remove dependencies leads me to compromise, and I&apos;ll find a way to removing it or have it as an optional dependency.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In my opinion, non-end-user components should not log, which affects libraries. E.g. there is nothing in the JDK to enable logging of the JDK itsself, although there are surely parts that could log something. Lucene is the same, it does not need to log anything, the client code should log things like &quot;now executing term query...&quot; and so on. IndexWriter is a little bit special, it has now a simple &quot;log-like&quot; interface for debugging (consisting of abstract InfoStream class). This class can be implemented by a logging framework, but would slowdown indexing immense, as logging frameworks tend to use volatiles on every log request (even when not logging).&lt;/p&gt;

&lt;p&gt;So I strongly recommend to remove logging. For debugging we often comment out System.out.println inside Lucene.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Uwe and others, the rationale for a core spatial library off of Lucene is my last (long) comment&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, OK. I still don&apos;t understand the whole rationale to move it outside Lucene or to a separate module. Everybody can use the classes by adding the JAR file, too. The &quot;useless&quot; lucene classes don&apos;t hurt. Still I would strongly recommend to use parts of lucene.util package whereever possible, especially when performance and easy Lucene integration is needed. So dont create Strings all the time, use BytesRef and index/search using &lt;b&gt;binary&lt;/b&gt; terms like NumericField does in Lucene trunk. If this module outside Lucene uses Strings all the time, but e.g. when indexing searching all those strings are again converted to UTF-8 BytesRefs, thats a laaaaaaaaaaaaaaarge overhead. So I prefer to sometimes duplicate code and add performant impls of e.g. term encoders for indexing/search. Every method in Lucene that is used in tight loops (like scorers or TokenStreams) should never ever use Strings (which are final and unmodifiable).&lt;/p&gt;</comment>
                    <comment id="13221174" author="dsmiley" created="Fri, 2 Mar 2012 19:13:10 +0000"  >&lt;p&gt;Everything depends on something.  Lucene depends on Java, and it has no control over Java except to complain when there are bugs.  This module isn&apos;t the first module to have a dependency and frankly I don&apos;t understand the aversion to them &amp;#8211; it&apos;s a natural thing.  I agree you can have too many.&lt;/p&gt;

&lt;p&gt;I think Lucene-Spatial&apos;s dependency on Spatial4j represents the &lt;b&gt;best&lt;/b&gt; type of a dependency that Lucene/Solr could have:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;ASL licensed&lt;/li&gt;
	&lt;li&gt;Has code &amp;amp; tests there that aren&apos;t related to Lucene; don&apos;t clutter or diffuse scope of Lucene&apos;s codebase.&lt;/li&gt;
	&lt;li&gt;Strong relationship to Lucene/Solr. Put another way, if Spatial4j were a product, it&apos;s only customer right now is Lucene/Solr.  Consequently:
	&lt;ol&gt;
		&lt;li&gt;When Lucene/Solr decides to release a version, Spatial4J committers will do the same.  No SNAPSHOT dependency from a Lucene release.&lt;/li&gt;
		&lt;li&gt;When a bug or feature request comes up via Lucene that requires changes in Spatial4J, you (a Lucene committer) can coordinate these changes with great efficiency given that you know Spatial4J committers.&lt;/li&gt;
		&lt;li&gt;You can become a committer on Spatial4j with far less time than it took me to become a committer here, I swear &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &amp;#8211; &lt;em&gt;especially&lt;/em&gt; the spatial-minded folks: Chris (if we had your GitHub username, you&apos;d be grandfathered in), Uwe, Grant, Yonik?&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;And because it&apos;s a dependency and not 1st-party code, it has a greater opportunity to receive improvements from outside parties since it&apos;s a smaller project with a more focused committer pool.  This stuff has nothing to do with Lucene, remember.&lt;/p&gt;</comment>
                    <comment id="13221190" author="dsmiley" created="Fri, 2 Mar 2012 19:31:43 +0000"  >&lt;p&gt;Uwe,&lt;br/&gt;
  Regarding byte / character performance stuff, I understand.  Last night in fact, I successfully argued with Ryan that the SpatialPrefixTree (a trie) belongs with the Lucene spatial module because it is tightly coupled to the algorithms there.  One of the arguments was that it could/should probably use ByteRef since it works with raw indexed data.  Now that this moved over, I don&apos;t think there&apos;s code in Spatial4j that is or should be byte oriented.  There&apos;s some geospatial (WKT-like) string parsing code, and code that generates such strings from shapes, and they are String oriented and that makes sense.&lt;br/&gt;
  As a general statement about performance, you should know that performance is an important goal of Spatial4j.  So if for example the API needs to be a bit uglier to make performance compromises, this spatial library more than others is willing to bend.  I think benchmarks need to prove this out first on a case-by-case basis though.  Other libraries, like one where I work seems to take another extreme in which Latitude and Longitude are each separate classes!&lt;/p&gt;</comment>
                    <comment id="13221656" author="mikemccand" created="Sat, 3 Mar 2012 18:07:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why not help Apache SIS grow and contribute spatial base as a module there. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13222481" author="adamestrada" created="Mon, 5 Mar 2012 18:09:25 +0000"  >&lt;p&gt;Yes...why not grow SIS seeing as its already in Apache Incubation? If another project is launched with the same intention as SIS, wouldn&apos;t that mean there is the potential for duplicate technologies sitting on an Apache server? There are a ton of different components to building out a proper geospatial core technology. GDAL/OGR, OpenLayers and the database storage techs therein represent some of the high points to operating a full GIS. See Wikipedia article (&lt;a href=&quot;http://en.wikipedia.org/wiki/Geographic_information_system&quot; class=&quot;external-link&quot;&gt;http://en.wikipedia.org/wiki/Geographic_information_system&lt;/a&gt;) and note that in order for there to be a full-fledged GIS, there has to be several mutually exclusive components that work in harmony with each other. I see Spatial4J being a great new way to implement geometric functions and storage within a Lucene index. That leaves the format/projection support, visualization and management components. Wouldn&apos;t it be nice to roll all of these fundamental concepts in to a single project like SIS? I am looking at the big picture rather than specific or individual components.&lt;/p&gt;

&lt;p&gt;w/r,&lt;br/&gt;
Adam&lt;/p&gt;</comment>
                    <comment id="13222578" author="ryantxu" created="Mon, 5 Mar 2012 20:13:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Wouldn&apos;t it be nice to roll all of these fundamental concepts in to a single project like SIS?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree &amp;#8211; but the elephant in the room is the LGPL library JTS.  &lt;/p&gt;

&lt;p&gt;From previous discussions, I believe this was a non-starter for their compile/test environment, but I have emailed the sis-dev@ list to see if this is still their feeling.&lt;/p&gt;

&lt;p&gt;With spatial4j, we want a solid ASL solution, but also support complex polygons if people choose to use JTS in their runtime environment.&lt;/p&gt;</comment>
                    <comment id="13222729" author="ryantxu" created="Mon, 5 Mar 2012 23:03:44 +0000"  >&lt;p&gt;I have confirmed with SIS that a compile/test dependency on JTS in not possible.  (One of their main goals is to make an ASL version of JTS...  A great goal, but they are not yet to 1st base)&lt;/p&gt;

&lt;p&gt;So, where does that leave us?&lt;/p&gt;

&lt;p&gt;Is the spatial4j.jar a blocker for anyone?  I understand it is not everyone&apos;s preferred option &amp;#8211; but no option makes everyone happy.  &lt;/p&gt;</comment>
                    <comment id="13222739" author="chrismattmann" created="Mon, 5 Mar 2012 23:11:35 +0000"  >&lt;p&gt;I&apos;d encourage folks to read:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://markmail.org/message/75yrfmumxlmdgxzz&quot; class=&quot;external-link&quot;&gt;http://markmail.org/message/75yrfmumxlmdgxzz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and all of the surrounding discussion there.&lt;/p&gt;

&lt;p&gt;Quoting Greg Stein:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I simply think that it is a mistake for a PMC to create any sort of dependency upon code that is more restrictive than the Apache License. In this case, it means somebody must grab LGPL code in order to build our provided tarball. I would strongly advise against such a build dependency, whether the runtime requires it or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I strongly agree with his interpretation.&lt;/p&gt;</comment>
                    <comment id="13222781" author="ryantxu" created="Mon, 5 Mar 2012 23:34:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;PMC to create any sort of dependency upon code that is more restrictive than the Apache License. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Note, the spatial4j.jar file is ASL&lt;/p&gt;

&lt;p&gt;No user ever needs to touch LGPL code or artifacts&lt;/p&gt;</comment>
                    <comment id="13225051" author="billnbell" created="Thu, 8 Mar 2012 06:58:01 +0000"  >&lt;p&gt;Ryan... &lt;/p&gt;

&lt;p&gt;Why not just include spatial4j.jar into Lucene/Solr and later separate it. It looks like SIS is not even off the ground yet.&lt;/p&gt;

&lt;p&gt;In my opinion an API is not really an API until 3 or more projects use it anyways.&lt;/p&gt;

&lt;p&gt;Why not make JTS pluggable as a separate module into Lucene? Then people can download JTS and add it into the Spatial solution by modifying a config file like solrconfig.xml ?&lt;/p&gt;

&lt;p&gt;I would love to get this committed and done done.&lt;/p&gt;

&lt;p&gt;Bill&lt;/p&gt;</comment>
                    <comment id="13225485" author="chrismattmann" created="Thu, 8 Mar 2012 20:49:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;It looks like SIS is not even off the ground yet.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess if you call making an Apache release, with a working Java Quad Tree implementation, point-radius and bounding box against that QuadTree, the ability to load GeoRSS, and a demo webapp that plugs into Google Maps, &quot;not even off the ground yet&quot;, then yeah, I guess it&apos;s not.&lt;/p&gt;</comment>
                    <comment id="13228041" author="ryantxu" created="Mon, 12 Mar 2012 23:22:11 +0000"  >&lt;p&gt;I think this is ready for /trunk&lt;/p&gt;

&lt;p&gt;Unless there are objections, I will commit tomorrow &amp;#8211; and we can iterate from there&lt;/p&gt;</comment>
                    <comment id="13228054" author="rcmuir" created="Mon, 12 Mar 2012 23:32:55 +0000"  >&lt;p&gt;I&apos;m still hoping the logging issue will get resolved. &lt;/p&gt;

&lt;p&gt;Can we please remove this dependency? Again I don&apos;t think we should be logging at this level.&lt;br/&gt;
For example its dangerous and bogus to suppress exceptions and log instead: this is an API component.&lt;/p&gt;

&lt;p&gt;Higher level code (e.g. Solr) with more context can implement logging appropriately, but we should just throw&lt;br/&gt;
Exceptions for Lucene API users.&lt;/p&gt;

&lt;p&gt;For example, TwoDoublesStrategy.makeQuery has this code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt;(Exception ex) {
  log.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;error making score&quot;&lt;/span&gt;, ex);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="13228075" author="ryantxu" created="Tue, 13 Mar 2012 00:07:58 +0000"  >&lt;p&gt;I think we can remove logging... i&apos;ll take a look&lt;/p&gt;</comment>
                    <comment id="13228146" author="dsmiley" created="Tue, 13 Mar 2012 02:28:24 +0000"  >&lt;p&gt;I committed the removal of SLF4J just now.&lt;/p&gt;

&lt;p&gt;That catch block that Robert mentions has a bad code smell and so I chose to not catch the exception (and thus not log anything there either).  Tests still pass. Perhaps the author of this code (Ryan?) might add a test in which the exception can happen (what subclass?) and then we can consider the right thing to do.  TwoDoublesStrategy hasn&apos;t seen any love in a long time, compared to RecursivePrefixStrategy which gets all the attention.&lt;/p&gt;</comment>
                    <comment id="13228288" author="thetaphi" created="Tue, 13 Mar 2012 09:17:50 +0000"  >&lt;p&gt;Thank&apos;s David! I wanted to respond with the same comment like Robert! Logging should not be done in &lt;b&gt;library&lt;/b&gt; code and exceptions should not be ignored. The warn was better than the common eclipse-autogenerated try-catch with e.printStackTrace(), which is the worst anti-pattern I have ever seen, but we still should not do this in library code.&lt;/p&gt;</comment>
                    <comment id="13228791" author="ryantxu" created="Tue, 13 Mar 2012 22:57:34 +0000"  >&lt;p&gt;ok &amp;#8211; with the logging issue solved, i think we can move things forward&lt;/p&gt;</comment>
                    <comment id="13228823" author="yseeley@gmail.com" created="Wed, 14 Mar 2012 00:03:53 +0000"  >&lt;p&gt;Guys, was there a specific reason why the degrees-radians conversion optimizations were removed?&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; vals.doubleVal(doc) * DistanceUtils.DEGREES_TO_RADIANS;
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.toRadians(vals.doubleVal(doc));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It won&apos;t matter for query setup, but will matter for per-document calculations.&lt;/p&gt;</comment>
                    <comment id="13228913" author="dsmiley" created="Wed, 14 Mar 2012 03:08:40 +0000"  >&lt;p&gt;I made those conversions because I didn&apos;t see the point.  Surely the JVM can inline the Math.* methods, especially this one.&lt;/p&gt;</comment>
                    <comment id="13228922" author="yseeley@gmail.com" created="Wed, 14 Mar 2012 03:28:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;Surely the JVM can inline the Math.* methods, especially this one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Inlining yes, but not optimizing (compilers are very restricted in how they can optimize floating point calculations).&lt;br/&gt;
Unfortunately Math.toRadians uses double precision division, which is much more expensive than multiplication.&lt;br/&gt;
I just did a quick test, and Math.toRadians was more than 3 times slower.&lt;/p&gt;

&lt;p&gt;I&apos;ve got most of the changes locally so I&apos;ll finish it up...&lt;/p&gt;</comment>
                    <comment id="13228932" author="cmale" created="Wed, 14 Mar 2012 03:55:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;I just did a quick test, and Math.toRadians was more than 3 times slower.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Big +1 to this.  There are huge benefits to be found in optimizing the actual arithmetic.  Math.* methods are very conservative.&lt;/p&gt;</comment>
                    <comment id="13229876" author="dsmiley" created="Thu, 15 Mar 2012 04:15:02 +0000"  >&lt;p&gt;I&apos;d be very surprised to hear if this is true. What was your benchmarking methodology Yonik?  I recently read an excellent presentation by Cliff Click (a JVM implementer and is as expert as they come) on Java benchmarking:  &lt;a href=&quot;http://www.azulsystems.com/presentations/art-of-java-benchmarking&quot; class=&quot;external-link&quot;&gt;http://www.azulsystems.com/presentations/art-of-java-benchmarking&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13230562" author="ryantxu" created="Thu, 15 Mar 2012 21:16:58 +0000"  >&lt;p&gt;I will mark this resolved and we can start new issues for ongoing problems.&lt;/p&gt;

&lt;p&gt;The next big step is to integrate with solr.&lt;/p&gt;</comment>
                    <comment id="13230565" author="ryantxu" created="Thu, 15 Mar 2012 21:19:06 +0000"  >&lt;p&gt;did not mean to &apos;resolve&apos; the Math.toRadians issue though &amp;#8211; I think we should change that back to multiplication...  Math.* seems to be pretty clunky&lt;/p&gt;</comment>
                    <comment id="13230574" author="yseeley@gmail.com" created="Thu, 15 Mar 2012 21:28:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d be very surprised to hear if this is true.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If Math.toRadians had been written as x*(PI/180.0) then the compiler would have done constant folding and it would simply be multiplication by a constant.  But it&apos;s unfortunately written as x/180.0*PI (for no good reason in this case), and the compiler/JVM is not allowed to do the simple transformation by itself.  That&apos;s why we do it.&lt;/p&gt;

&lt;p&gt;Sometimes knowing how optimizers work and the restrictions on them allow one to know what will be faster or slower without benchmarking.  I did benchmark it after the fact (after you questioned it), and it was indeed the case that Math.toRadians was much slower than a simple multiply.&lt;/p&gt;</comment>
                    <comment id="13230648" author="ryantxu" created="Thu, 15 Mar 2012 22:32:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;I did benchmark it after the fact (after you questioned it), and it was indeed the case that Math.toRadians was much slower than a simple multiply.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can I see the benchmark?  The trivial things I am trying seems to end up equivalent&lt;/p&gt;</comment>
                    <comment id="13230685" author="yseeley@gmail.com" created="Thu, 15 Mar 2012 23:05:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can I see the benchmark? The trivial things I am trying seems to end up equivalent&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One way that can happen is if you don&apos;t use the values produced - hotspot can eliminate the method calls altogether.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class X {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; foo(&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; val) {
    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.toRadians(val);
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; val * (&lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.PI/180.0);
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; x = 1.12345;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;100000000; i++) {
      x += foo(x) - foo(x+1); 
    }    
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(x);
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13230736" author="ryantxu" created="Fri, 16 Mar 2012 00:09:08 +0000"  >&lt;p&gt;yup &amp;#8211; I get the same results as you.  I&apos;ve updated things to use this optimization at spatial4j&lt;/p&gt;</comment>
                    <comment id="13528202" author="commit-tag-bot" created="Mon, 10 Dec 2012 19:34:11 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;branch_4x commit&amp;#93;&lt;/span&gt; Ryan McKinley&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1419688&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1419688&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3795&quot; title=&quot;Replace spatial contrib module with LSP&amp;#39;s spatial-lucene module&quot;&gt;&lt;del&gt;LUCENE-3795&lt;/del&gt;&lt;/a&gt;: makeQuery should not require ConstantScoreQuery (merge from trunk)&lt;/p&gt;</comment>
                    <comment id="13528204" author="commit-tag-bot" created="Mon, 10 Dec 2012 19:34:13 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;trunk commit&amp;#93;&lt;/span&gt; Ryan McKinley&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1419687&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;revision=1419687&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3795&quot; title=&quot;Replace spatial contrib module with LSP&amp;#39;s spatial-lucene module&quot;&gt;&lt;del&gt;LUCENE-3795&lt;/del&gt;&lt;/a&gt;: makeQuery should not require ConstantScoreQuery&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12471333">LUCENE-2599</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12477207">SOLR-2155</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12549040">SOLR-3304</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 16 Feb 2012 18:55:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>228166</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23904</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>