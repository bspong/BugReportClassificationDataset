<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:11:50 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3453/LUCENE-3453.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3453] remove IndexDocValuesField</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3453</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Its confusing how we present CSF functionality to the user, its actually not a &quot;field&quot; but an &quot;attribute&quot; of a field like  STORED or INDEXED.&lt;/p&gt;

&lt;p&gt;Otherwise, its really hard to think about CSF because there is a mismatch between the APIs and the index format.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12524514">LUCENE-3453</key>
            <summary>remove IndexDocValuesField</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sat, 24 Sep 2011 16:23:29 +0100</created>
                <updated>Fri, 10 May 2013 11:44:27 +0100</updated>
                    <resolved>Sun, 15 Jan 2012 23:13:53 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13113997" author="cmale" created="Sat, 24 Sep 2011 16:28:13 +0100"  >&lt;p&gt;I&apos;m not sure what the better alternative is, but +1 to removing this class.&lt;/p&gt;</comment>
                    <comment id="13114037" author="simonw" created="Sat, 24 Sep 2011 19:25:57 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="13114121" author="cmale" created="Sun, 25 Sep 2011 04:11:17 +0100"  >&lt;p&gt;Hey Robert,&lt;/p&gt;

&lt;p&gt;Are you putting something together on this, or should I give it a shot?&lt;/p&gt;</comment>
                    <comment id="13114122" author="rcmuir" created="Sun, 25 Sep 2011 04:20:41 +0100"  >&lt;p&gt;please take it! it was just an idea after some discussion with Andrzej, who was experimenting in Luke (I think if you are not careful its easy to get norms with your indexdocvaluesfield?)&lt;/p&gt;

&lt;p&gt;also I noticed in the tests that the added dv fields were hitting up Similarity... &lt;/p&gt;

&lt;p&gt;I have no ideas on naming or api, maybe UNINVERTED?&lt;/p&gt;</comment>
                    <comment id="13114208" author="mikemccand" created="Sun, 25 Sep 2011 11:43:23 +0100"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Another spookiness I noticed but didn&apos;t yet make a test for to confirm: if you try to add a Document that has the same field w/ docValues twice, you get a scary non-obvious exception.&lt;/p&gt;</comment>
                    <comment id="13114216" author="cmale" created="Sun, 25 Sep 2011 12:11:31 +0100"  >&lt;p&gt;I find it a little unclear how we want users to use DocValues during indexing.  &lt;/p&gt;

&lt;p&gt;Do we want people to mark any Field as also being DocValues? In which case it becomes as Robert said, an attribute of a field and kind of an indexing strategy.  Or we do see DocValues fields being more standalone? in which case IndexDocValuesField probably makes sense, just like we have NumericField.&lt;/p&gt;</comment>
                    <comment id="13114256" author="cmale" created="Sun, 25 Sep 2011 14:30:37 +0100"  >&lt;p&gt;Okay so a battle plan:&lt;/p&gt;

&lt;p&gt;DocValues is basically an attribute of a Field and is a way of processing that Field&apos;s value.  So to remove the need for IndexDocValues, lets:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Move ValueType to FieldType.  FieldType is the appropriate place for that kind of metadata.  This forces the user to define the ValueType of their DocValues when they initialize the FT.&lt;/li&gt;
	&lt;li&gt;Remove PerFieldDocValues docValues() from Field as its implicit when you consider the ValueType in combination with the actual value.&lt;/li&gt;
	&lt;li&gt;Change DocValuesConsumer to consume an IndexableField.  It&apos;ll be responsible for then creating the PerFieldDocValues by looking at the ValueType.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When we get round to introducing StorableField/Type, the DocValues ValueType will go over to StorableFieldType, more closely aligning DocValues and traditional value storing.&lt;/p&gt;</comment>
                    <comment id="13114259" author="mikemccand" created="Sun, 25 Sep 2011 14:37:52 +0100"  >&lt;p&gt;That sounds great!&lt;/p&gt;

&lt;p&gt;This makes our expert APIs (direct Field/FieldType construction) much&lt;br/&gt;
cleaner for creating a index doc values field.&lt;/p&gt;

&lt;p&gt;After this we can separately take up what sugar classes/methods we can&lt;br/&gt;
add to make it easy for non-expert users to create doc values.  Maybe&lt;br/&gt;
static methods like NumericField.newIntValueField(17) and&lt;br/&gt;
BinaryField.newFixedValueField(bytes) for example...&lt;/p&gt;

&lt;p&gt;I&apos;ll open a new issue about accidentally adding same DV field twice...&lt;/p&gt;</comment>
                    <comment id="13114264" author="mikemccand" created="Sun, 25 Sep 2011 15:04:46 +0100"  >&lt;p&gt;I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3461&quot; title=&quot;Adding same IndexDocValuesField twice trips assert&quot;&gt;&lt;del&gt;LUCENE-3461&lt;/del&gt;&lt;/a&gt; for catching accidental multi-valued DV fields.&lt;/p&gt;</comment>
                    <comment id="13149536" author="simonw" created="Mon, 14 Nov 2011 10:28:13 +0000"  >&lt;p&gt;hey chris what is the status here?&lt;/p&gt;</comment>
                    <comment id="13184184" author="mikemccand" created="Wed, 11 Jan 2012 16:42:53 +0000"  >&lt;p&gt;I&apos;m taking a stab at this one... here&apos;s an initial rough patch&lt;br/&gt;
(tons of nocommits!).  I moved docValueType from IndexableField to&lt;br/&gt;
IndexableFieldType, simplified DocValuesField somewhat and cleaned up&lt;br/&gt;
a few things... I&apos;ll make a branch so we can iterate there.&lt;/p&gt;</comment>
                    <comment id="13185978" author="mikemccand" created="Fri, 13 Jan 2012 23:24:45 +0000"  >&lt;p&gt;Applyable patch; I still need to go through it more closely but I&lt;br/&gt;
think it&apos;s basically ready.  I&apos;d like to commit it soon... it&apos;s a big&lt;br/&gt;
patch so it&apos;s going to quickly get stale/conflict.  We can further&lt;br/&gt;
iterate on trunk...&lt;/p&gt;

&lt;p&gt;I ended up keeping (but simplifying) DocValuesField, as sugar, and&lt;br/&gt;
making a number of other simplifications:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Removed custom Comparator from DocValuesField, meaning sort is&lt;br/&gt;
    always by unsigned byte (UTF8/unicode) order now.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Moved numeric field type information out of IndexableField into&lt;br/&gt;
    FieldType.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3682&quot; title=&quot;Add deprecated &amp;#39;transition&amp;#39; api for Document/Field&quot;&gt;&lt;del&gt;LUCENE-3682&lt;/del&gt;&lt;/a&gt;: added in &quot;transition layer&quot; to construct Field using&lt;br/&gt;
    the pre-4.0 enums (Store, Index, TermVector)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3694&quot; title=&quot;DocValuesField should not overload setInt/setFloat etc&quot;&gt;&lt;del&gt;LUCENE-3694&lt;/del&gt;&lt;/a&gt;: moved all setXXX methods in NumericField and&lt;br/&gt;
    DocValuesField up into Field.java (as setValue methods)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Renamed/generalized BinaryField to StoredField, so that you can&lt;br/&gt;
    use it to store any value, including numerics.  I generalized the&lt;br/&gt;
    codecs so they mark a stored field as numeric if its&lt;br/&gt;
    .numericValue() is non-null, and at document load time they now&lt;br/&gt;
    always create a StoredField instance.  This also means you have to&lt;br/&gt;
    call .numericValue (not .stringValue()) on the returned&lt;br/&gt;
    StoredField, after indexing a NumericField.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3616&quot; title=&quot;Illegal Field Configurations should throw exceptions&quot;&gt;LUCENE-3616&lt;/a&gt;: fail if you try to create a TokenStream field that&apos;s&lt;br/&gt;
    stored.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added numerics to Field ctor/setValue/numericValue; this is used&lt;br/&gt;
    by DocValuesField, NumericField, StoredField&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;You can still reuse a Field (change its value), however I madte&lt;br/&gt;
    this more strict: you can only change the value to another value&lt;br/&gt;
    of the same type.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13186017" author="cmale" created="Sat, 14 Jan 2012 00:26:46 +0000"  >&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3694&quot; title=&quot;DocValuesField should not overload setInt/setFloat etc&quot;&gt;&lt;del&gt;LUCENE-3694&lt;/del&gt;&lt;/a&gt;: moved all setXXX methods in NumericField and&lt;br/&gt;
DocValuesField up into Field.java (as setValue methods)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this idea, but I wonder if it could be a source of confusion.  People who are indexing numerical content need to use NumericField or DocValuesField ideally.  Having it appear as though they can use Field and get the same indexing behavior as from NumericField could lead to bugs, right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Renamed/generalized BinaryField to StoredField, so that you can&lt;br/&gt;
use it to store any value, including numerics. I generalized the&lt;br/&gt;
codecs so they mark a stored field as numeric if its&lt;br/&gt;
.numericValue() is non-null, and at document load time they now&lt;br/&gt;
always create a StoredField instance. This also means you have to&lt;br/&gt;
call .numericValue (not .stringValue()) on the returned&lt;br/&gt;
StoredField, after indexing a NumericField.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Pretty cool idea I have to say.  Somewhere during all these discussion we talked about allowing bytes to be indexed, I guess when/if we ever get to that, we&apos;ll need to re-create a BinaryField?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can still reuse a Field (change its value), however I madte&lt;br/&gt;
this more strict: you can only change the value to another value&lt;br/&gt;
of the same type.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea.  Could we make this cleaner by having a more general DataType enum?  Each constructor with its typed parameter could then set the DataType.  In each of the setXXX methods we can just check if the DataType is appropriate, rather than using instanceof/isBinary() etc.   This could be internal to Field at the moment but could prove useful down the line.&lt;/p&gt;</comment>
                    <comment id="13186173" author="mikemccand" created="Sat, 14 Jan 2012 11:52:42 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3694&quot; title=&quot;DocValuesField should not overload setInt/setFloat etc&quot;&gt;&lt;del&gt;LUCENE-3694&lt;/del&gt;&lt;/a&gt;: moved all setXXX methods in NumericField and DocValuesField up into Field.java (as setValue methods)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this idea, but I wonder if it could be a source of confusion. People who are indexing numerical content need to use NumericField or DocValuesField ideally. Having it appear as though they can use Field and get the same indexing behavior as from NumericField could lead to bugs, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In fact you can simply use Field directly to index a numeric field or&lt;br/&gt;
a doc values field, ie, DocValuesField/NumericField are truly just&lt;br/&gt;
sugar now.  You can do everything with Field (expert) that you can do&lt;br/&gt;
with these sugar classes... or at least I think so &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Pretty cool idea I have to say. Somewhere during all these discussion we talked about allowing bytes to be indexed, I guess when/if we ever get to that, we&apos;ll need to re-create a BinaryField?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah I think we&apos;d address that if/when we somehow allow indexing of&lt;br/&gt;
byte[] valued fields... even so, expert apps could code directly to&lt;br/&gt;
IF/IFT (or even subclass Field possibly) if they have some way to&lt;br/&gt;
&quot;index&quot; byte[] content...&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;You can still reuse a Field (change its value), however I madte  this more strict: you can only change the value to another value of the same type.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea. Could we make this cleaner by having a more general DataType enum? Each constructor with its typed parameter could then set the DataType. In each of the setXXX methods we can just check if the DataType is appropriate, rather than using instanceof/isBinary() etc. This could be internal to Field at the moment but could prove useful down the line.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could explore that (making Field&apos;s fieldData more strongly typed),&lt;br/&gt;
instead of dynamically checking types.  Field has been dynamically&lt;br/&gt;
typed forever...&lt;/p&gt;

&lt;p&gt;But I think we can/should do that after committing this first cleanup?&lt;br/&gt;
I suspect that could be a major change just by itself...&lt;/p&gt;

&lt;p&gt;This would clean up tokenStream creation too &amp;#8211; instead of probing&lt;br/&gt;
dynamically for string/reader/pre-tokenized we&apos;d switch on the type.&lt;/p&gt;</comment>
                    <comment id="13186175" author="cmale" created="Sat, 14 Jan 2012 12:00:06 +0000"  >&lt;blockquote&gt;
&lt;p&gt;In fact you can simply use Field directly to index a numeric field or&lt;br/&gt;
a doc values field, ie, DocValuesField/NumericField are truly just&lt;br/&gt;
sugar now. You can do everything with Field (expert) that you can do&lt;br/&gt;
with these sugar classes... or at least I think so &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wow, I hadn&apos;t explored the patch deeply enough.  Big +1 to this!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I think we can/should do that after committing this first cleanup?&lt;br/&gt;
I suspect that could be a major change just by itself...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah definitely, the more I&apos;ve thought about it the more impact it could have.  Definitely worth another issue.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12510542" name="LUCENE-3453.patch" size="247597" author="mikemccand" created="Fri, 13 Jan 2012 23:24:45 +0000" />
                    <attachment id="12510200" name="LUCENE-3453.patch" size="83226" author="mikemccand" created="Wed, 11 Jan 2012 16:42:53 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 24 Sep 2011 15:28:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3464</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24243</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>