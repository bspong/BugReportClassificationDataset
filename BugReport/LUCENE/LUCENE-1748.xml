<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:32 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1748/LUCENE-1748.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1748] getPayloadSpans on org.apache.lucene.search.spans.SpanQuery should be abstract</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1748</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I just spent a long time tracking down a bug resulting from upgrading to Lucene 2.4.1 on a project that implements some SpanQuerys of its own and was written against 2.3.  Since the project&apos;s SpanQuerys didn&apos;t implement getPayloadSpans, the call to that method went to SpanQuery.getPayloadSpans which returned null and caused a NullPointerException in the Lucene code, far away from the actual source of the problem.  &lt;/p&gt;

&lt;p&gt;It would be much better for this kind of thing to show up at compile time, I think.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
            <key id="12430666">LUCENE-1748</key>
            <summary>getPayloadSpans on org.apache.lucene.search.spans.SpanQuery should be abstract</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="hcayless">Hugh Cayless</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Jul 2009 14:15:33 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:29 +0100</updated>
                    <resolved>Wed, 12 Aug 2009 21:33:04 +0100</resolved>
                            <version>2.4</version>
                <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/query/scoring</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12731935" author="markrmiller@gmail.com" created="Thu, 16 Jul 2009 14:28:23 +0100"  >&lt;p&gt;The reason it has a default impl is so that it won&apos;t break jar drop in back compat - if it was abstract, it would violate our back compat requirements.&lt;/p&gt;

&lt;p&gt;But you make a most excellent point. Shouldnt it throw a runtime exception (unsupported operation?) or something?&lt;/p&gt;</comment>
                    <comment id="12731939" author="earwin" created="Thu, 16 Jul 2009 14:37:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;Shouldnt it throw a runtime exception (unsupported operation?) or something?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What is the difference between adding an abstract method and adding a method that throws exception in regards to jar drop in back compat?&lt;br/&gt;
In both cases when you drop your new jar in you get an exception, except in the latter case exception is deferred.&lt;/p&gt;</comment>
                    <comment id="12731940" author="hcayless" created="Thu, 16 Jul 2009 14:38:49 +0100"  >&lt;p&gt;Ah.  I figured it would be something like that.  Yes, if abstract isn&apos;t possible, an UnsupportedOperationException would at least get closer to the source of the problem.&lt;/p&gt;

&lt;p&gt;From my perspective at least, backwards compatibility is already broken, since Lucene doesn&apos;t work with SpanQuerys that don&apos;t implement getPayloadSpans--but I understand y&apos;all will have different requirements in this regard.&lt;/p&gt;</comment>
                    <comment id="12731968" author="markrmiller@gmail.com" created="Thu, 16 Jul 2009 15:46:27 +0100"  >&lt;p&gt;My response sent to mailing list:&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;bq. Shouldnt it throw a runtime exception (unsupported operation?) or something?&lt;br/&gt;
&amp;gt;&amp;gt;What is the difference between adding an abstract method and adding a method that throws exception in regards to jar drop in back compat?&lt;br/&gt;
&amp;gt;&amp;gt;In both cases when you drop your new jar in you get an exception, except in the latter case exception is deferred.&lt;/p&gt;

&lt;p&gt;Yeah, its dicey - I suppose the idea is that, if you used the code as you used to, it wouldnt try and call getPayloadSpans? And so if you kept using non payloadspans functionality, you would be set, and if you tried to use payloadspans you would get an exception saying the class needed to be updated? But if you make it abstract, we lose jar drop (I know I&apos;ve read we don&apos;t have it for this release anyway) in and everyone has to implement the method. At least with the exception, if you are using the class as you used to, you can continue to do so with no work? Not that I &apos;ve considered it for very long at the moment.&lt;/p&gt;

&lt;p&gt;I know, I see your point - this back compat stuff is always dicey - thats why I throw it out there with a question mark - hopefully others will continue to chime in.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Show quoted text -&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12731971" author="markrmiller@gmail.com" created="Thu, 16 Jul 2009 15:50:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;From my perspective at least, backwards compatibility is already broken, since Lucene doesn&apos;t work with SpanQuerys that don&apos;t implement getPayloadSpans&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, I see - I hadn&apos;t looked at this issue in a long time. It looks like you must implement it to do much of anything right?&lt;/p&gt;

&lt;p&gt;We need to address this better - perhaps abstract is the way to go.&lt;/p&gt;</comment>
                    <comment id="12731972" author="earwin" created="Thu, 16 Jul 2009 15:52:10 +0100"  >&lt;p&gt;I took a glance at the code, the whole getPayloadSpans deal is a herecy.&lt;/p&gt;

&lt;p&gt;Each and every implementation looks like:&lt;br/&gt;
  public PayloadSpans getPayloadSpans(IndexReader reader) throws IOException &lt;/p&gt;
{
    return (PayloadSpans) getSpans(reader);
  }

&lt;p&gt;Moving it to the base SpanQuery is broken equally to current solution, but yields much less strange copypaste.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;I also have a faint feeling that if you expose a method like&lt;/del&gt;&lt;br/&gt;
&lt;del&gt;ClassA method();&lt;/del&gt;&lt;br/&gt;
&lt;del&gt;you can then upgrade it to&lt;/del&gt;&lt;br/&gt;
&lt;del&gt;SubclassOfClassA method();&lt;/del&gt;&lt;br/&gt;
&lt;del&gt;without breaking drop-in compatibility, which renders getPayloadSpans vs getSpans alternative totally useless&lt;/del&gt;&lt;br/&gt;
Ok, I&apos;m wrong.&lt;/p&gt;</comment>
                    <comment id="12731979" author="markrmiller@gmail.com" created="Thu, 16 Jul 2009 16:01:31 +0100"  >&lt;p&gt;Okay, so it says: Implementing classes that want access to the payloads will need to implement this.&lt;/p&gt;

&lt;p&gt;But in reality, if you don&apos;t implement it, looks like your screwed if you add it to the container SpanQueries. whether you access the payloads or not.&lt;/p&gt;</comment>
                    <comment id="12731984" author="markrmiller@gmail.com" created="Thu, 16 Jul 2009 16:07:49 +0100"  >&lt;blockquote&gt;&lt;p&gt;the whole getPayloadSpans deal is a herecy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;heh. don&apos;t dig too deep - it also has to load all of the payloads as it matches whether you ask for them or not (if they exist).&lt;/p&gt;

&lt;p&gt;The ordered or unordered matcher also has to load them and dump them in certain situation when they are not actually needed.&lt;/p&gt;

&lt;p&gt;Lets look at what we need to do to fix this - we don&apos;t have to worry too much about back compat, cause its already pretty screwed I think.&lt;/p&gt;</comment>
                    <comment id="12732601" author="markrmiller@gmail.com" created="Fri, 17 Jul 2009 17:52:19 +0100"  >&lt;p&gt;Something should be done here. I admit I havn&apos;t spent a lot of time thinking yet, but off the cuff :&lt;/p&gt;

&lt;p&gt;1. We should drop PayloadSpans and just add getPayload to Spans. This should be a compile time break.&lt;/p&gt;

&lt;p&gt;2. We need a way to &lt;b&gt;not&lt;/b&gt; collect payloads. Now they will be collected if they are there whether they are used or not. Perhaps an argument in the SpanQuery constructor? It can&apos;t really be getSpans because the user would need to control it.&lt;/p&gt;</comment>
                    <comment id="12732938" author="earwin" created="Sat, 18 Jul 2009 22:37:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;We should drop PayloadSpans and just add getPayload to Spans. This should be a compile time break.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12733120" author="markrmiller@gmail.com" created="Mon, 20 Jul 2009 05:26:13 +0100"  >&lt;p&gt;I don&apos;t like to make these back compat calls, but it seems this was a big break and we are breaking jar drop in anyway, so its a nice chance to just kind of correct things.&lt;/p&gt;

&lt;p&gt;This patch is a first draft at resolving the two main issues I&apos;m concerned about:&lt;/p&gt;

&lt;p&gt;1. PayloadSpans is dropped and moved to Spans. Back compat was so out the window anyway, its much better to just make users with custom SpanQuerys implement the new methods. You can always return unavailable payload, and empty payload set, or even not implement and avoid the functionality.&lt;/p&gt;

&lt;p&gt;2. Add a constructor arg to turn off payload collecting for an ordered spannear - it did not lazy load as the payloads javadoc said - the others do, but not ordered spanear. This should let you ignore the new functionality if you don&apos;t want to implement - without this, if you had payloads but didn&apos;t want to implement, this would blow up at just the sight of payloads. Even if you didn&apos;t have a custom SpanQuery to worry about, the query would be much slower if you had payloads but didnt need the query to interact with them - they would be loaded anyway (and its not even always efficient loading - sometimes it has to load a few uneeded payloads that later get dropped) - so you need a way to turn off loading.&lt;/p&gt;</comment>
                    <comment id="12735113" author="hcayless" created="Fri, 24 Jul 2009 19:16:50 +0100"  >&lt;p&gt;Just wanted to say thanks for your responsiveness on this.  It really validates my faith in Lucene as a project.&lt;/p&gt;</comment>
                    <comment id="12736674" author="markrmiller@gmail.com" created="Wed, 29 Jul 2009 16:47:45 +0100"  >&lt;p&gt;This is going to require a patch to the 2.4 back compat branch to pass tests.&lt;/p&gt;</comment>
                    <comment id="12738183" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 04:56:30 +0100"  >&lt;p&gt;I&apos;m going to commit this to the backcompat branch as well - I can&apos;t just change the tests - the src has to be changed as well because the tests compile against it rather than trunk.&lt;/p&gt;</comment>
                    <comment id="12738371" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 15:46:38 +0100"  >&lt;p&gt;Too trunk - removes the lazy load payload issue which has been resolved and committed in a separate issue.&lt;/p&gt;

&lt;p&gt;Still have to consider what to do about the back compat tests.&lt;/p&gt;</comment>
                    <comment id="12738714" author="markrmiller@gmail.com" created="Tue, 4 Aug 2009 01:48:27 +0100"  >&lt;p&gt;Has something like this come up in the past? How was the back compat branch handled? Should I just remove the PayloadSpans test? It doesn&apos;t seem right to apply the patch to the back compat src - it wouldn&apos;t apply cleanly anyway, and it doesn&apos;t seem right to fit it in. I guess it may not matter though? I&apos;m just worried it will be like pulling a string ...&lt;/p&gt;

&lt;p&gt;the issue:&lt;br/&gt;
The PayloadSpans test was made to test PayloadSpans - but that class shouldn&apos;t have been made and the methods from it have been added to Spans, and its been removed. Now the back compat branch test won&apos;t compile against the back compat src.&lt;/p&gt;</comment>
                    <comment id="12738921" author="mikemccand" created="Tue, 4 Aug 2009 11:07:24 +0100"  >&lt;p&gt;Can you make the corresponding changes to the backcompat branch&apos;s sources &amp;amp; tests?  Note that they only need to be &quot;stubs&quot;, so that things compile, since it&apos;s the trunk&apos;s JAR that they&apos;ll be tested against.&lt;/p&gt;</comment>
                    <comment id="12739017" author="markrmiller@gmail.com" created="Tue, 4 Aug 2009 17:07:06 +0100"  >&lt;p&gt;Okay - my first time messing with the back compat tests, and changing the src felt dirty - but nothing else that can be done, and as you say, it doesn&apos;t hurt anything. Ive got things worked out locally.&lt;/p&gt;

&lt;p&gt;I&apos;ll give a shot at commiting this later today.&lt;/p&gt;</comment>
                    <comment id="12739104" author="markrmiller@gmail.com" created="Tue, 4 Aug 2009 20:10:48 +0100"  >&lt;p&gt;Thanks Hugh!&lt;/p&gt;</comment>
                    <comment id="12742104" author="markrmiller@gmail.com" created="Tue, 11 Aug 2009 23:39:54 +0100"  >&lt;p&gt;I&apos;m tempted to make Spans abstract. We don&apos;t get these chances often. We managed to make Weight abstract for 2.9, and I think similar logic applies here. We are already breaking the interface - why not go abstract as well? Its a little more trouble, but we are already so far up the creak, it could be worth it no? Its very hard to get rid of these interfaces in a normal situation, and a better opportunity may not present itself.&lt;/p&gt;</comment>
                    <comment id="12742270" author="mikemccand" created="Wed, 12 Aug 2009 10:40:34 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m tempted to make Spans abstract. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12742353" author="markrmiller@gmail.com" created="Wed, 12 Aug 2009 14:44:38 +0100"  >&lt;p&gt;makes Spans abstract&lt;/p&gt;</comment>
                    <comment id="12742514" author="mikemccand" created="Wed, 12 Aug 2009 19:39:01 +0100"  >&lt;p&gt;Patch looks good... just need to fix back-compat tests.&lt;/p&gt;</comment>
                    <comment id="12742561" author="markrmiller@gmail.com" created="Wed, 12 Aug 2009 21:33:04 +0100"  >&lt;p&gt;thanks for taking a look Mike!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12416315" name="LUCENE-1748.patch" size="6705" author="markrmiller@gmail.com" created="Wed, 12 Aug 2009 14:44:38 +0100" />
                    <attachment id="12415365" name="LUCENE-1748.patch" size="33428" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 15:46:38 +0100" />
                    <attachment id="12413974" name="LUCENE-1748.patch" size="34885" author="markrmiller@gmail.com" created="Mon, 20 Jul 2009 05:26:13 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 16 Jul 2009 13:28:23 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12012</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25978</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>