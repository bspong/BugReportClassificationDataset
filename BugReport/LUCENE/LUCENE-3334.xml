<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:09:02 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3334/LUCENE-3334.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3334] IOUtils.closeSafely should log suppressed Exceptions in stack trace of original Exception (a new feature of Java 7)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3334</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I was always against Java 6 support, as it brings no really helpful new features into Lucene. But there are several things that make life easier in coming Java 7 (hopefully on July 28th, 2011). One of those is simplier Exception handling and suppression on Closeable, called &quot;Try-With-Resources&quot; (see &lt;a href=&quot;http://docs.google.com/View?id=ddv8ts74_3fs7483dp&quot; class=&quot;external-link&quot;&gt;http://docs.google.com/View?id=ddv8ts74_3fs7483dp&lt;/a&gt;, by the way all Lucene classes support these semantics in Java 7 automatically, the cool try-code below would work e.g. for IndexWriter, TokenStreams,...).&lt;/p&gt;

&lt;p&gt;We already have this functionality in Lucene since adding the IOUtils.closeSafely() utility (which can be removed when Java 7 is the minimum requirement of Lucene - maybe in 10 years):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; (Closeable a = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...; Closeable b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...) {
  ... use Closeables ...
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
  dosomething;
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This code will close a and b in an autogenerated finally block and supress any exception. This is identical to our IOUtils.closeSafely:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Exception priorException = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
Closeable a,b;
&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; (Closeable a = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...; Closeable b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...) {
  a = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...;
  b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...
  ... use Closeables ...
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
  priorException = e;
  dosomething;
} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
  IOUtils.closeSafely(priorException, a, b);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So this means we have the same functionality without Java 7, but there is one thing that makes logging/debugging much nicer:&lt;br/&gt;
The above Java 7 code also adds maybe suppressed Exceptions in those Closeables to the priorException, so when you print the stacktrace, it not only shows the stacktrace of the original Exception, it also prints all Exceptions that were suppressed to throw this Exception (all Closeable.close() failures):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;org.apache.lucene.util.TestIOUtils$TestException: BASE-EXCEPTION
    at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:61)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke(Method.java:601)
    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
    at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
    at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1486)
    at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1404)
    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
    at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
    at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)
    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
    at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
    Suppressed: java.io.IOException: TEST-IO-EXCEPTION-1
            at org.apache.lucene.util.TestIOUtils$BrokenCloseable.close(TestIOUtils.java:36)
            at org.apache.lucene.util.IOUtils.closeSafely(IOUtils.java:58)
            at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:62)
            ... 26 more
    Suppressed: java.io.IOException: TEST-IO-EXCEPTION-2
            at org.apache.lucene.util.TestIOUtils$BrokenCloseable.close(TestIOUtils.java:36)
            at org.apache.lucene.util.IOUtils.closeSafely(IOUtils.java:58)
            at org.apache.lucene.util.TestIOUtils.testSuppressedExceptions(TestIOUtils.java:62)
            ... 26 more
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this in Java 7 a new method was added to Throwable, that allows logging such suppressed Exceptions (it is called automatically by the synthetic bytecode emitted by javac). This patch simply adds this functionality conditionally to IOUtils, so it &quot;registers&quot; all suppressed Exceptions, if running on Java 7. This is done by reflection: once it looks for this method in Throwable.class and if found, it invokes it in closeSafely, so the exceptions thrown on Closeable.close() don&apos;t get lost.&lt;/p&gt;

&lt;p&gt;This makes debugging much easier and logs all problems that may occur.&lt;/p&gt;

&lt;p&gt;This patch does &lt;b&gt;not&lt;/b&gt; change functionality or behaviour, it just adds more nformation to the stack trace in a Java-7-way (similar to the way how Java 1.4 added causes). It works here locally on Java 6 and Java 7, but only Java 7 gets the additional stack traces. For Java 6 nothing changes. Same for Java 5 (if we backport to 3.x).&lt;/p&gt;

&lt;p&gt;This would be our first Java 7 improvement (a minor one). Next would be NIO2... - but thats not easy to do with reflection only, so we have to wait 10 years &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12515131">LUCENE-3334</key>
            <summary>IOUtils.closeSafely should log suppressed Exceptions in stack trace of original Exception (a new feature of Java 7)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                        <label>Java7</label>
                    </labels>
                <created>Fri, 22 Jul 2011 22:50:42 +0100</created>
                <updated>Sun, 27 Nov 2011 12:31:45 +0000</updated>
                    <resolved>Sun, 24 Jul 2011 16:26:07 +0100</resolved>
                                            <fixVersion>3.4</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13069797" author="thetaphi" created="Fri, 22 Jul 2011 22:51:46 +0100"  >&lt;p&gt;Patch for trunk, also with testcase. In tests.verbose=true it prints all stack traces, so simply try with Java 6 and Java 7.&lt;/p&gt;</comment>
                    <comment id="13069834" author="thetaphi" created="Sat, 23 Jul 2011 00:06:05 +0100"  >&lt;p&gt;Small cleanups in test and reflection.&lt;/p&gt;</comment>
                    <comment id="13069850" author="hossman" created="Sat, 23 Jul 2011 00:55:59 +0100"  >&lt;p&gt;Sweet!&lt;/p&gt;

&lt;p&gt;I am naively wondering if replacing this...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (SUPPRESS_METHOD != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; exception != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; suppressed != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
  ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;...with this...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (SUPPRESS_METHOD != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (exception != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; suppressed != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
    ...
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;would help runtime bytecode optimizers (ie: HotSpot) to replace that method with an inline NOOP when that method doesn&apos;t exist?&lt;/p&gt;</comment>
                    <comment id="13069922" author="rcmuir" created="Sat, 23 Jul 2011 09:48:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Patch for trunk, also with testcase. In tests.verbose=true it prints all stack traces, so simply try with Java 6 and Java 7.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But its not really a testcase: we don&apos;t run hudson on java 7, and because we aren&apos;t testing this version of java, I don&apos;t&lt;br/&gt;
think we should conditionalize code to use java7-only features that are totally untested.&lt;/p&gt;

&lt;p&gt;So I&apos;m totally against patches like this until this is addressed, sorry. Otherwise perhaps lucene is broken on java 7, and we don&apos;t even know until users tell us.&lt;/p&gt;</comment>
                    <comment id="13069923" author="thetaphi" created="Sat, 23 Jul 2011 09:58:11 +0100"  >&lt;p&gt;&lt;a href=&quot;http://www.freshports.org/java/openjdk7/&quot; class=&quot;external-link&quot;&gt;http://www.freshports.org/java/openjdk7/&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13069926" author="rcmuir" created="Sat, 23 Jul 2011 10:18:12 +0100"  >&lt;p&gt;sure, but until there is a hudson job running, testing this stuff on java7, I don&apos;t think we should commit patches like this.&lt;/p&gt;

&lt;p&gt;this is the same argument i had about java 5 support (still untested to this day), it applies to java 7 equally.&lt;/p&gt;</comment>
                    <comment id="13069927" author="thetaphi" created="Sat, 23 Jul 2011 10:25:21 +0100"  >&lt;p&gt;I am working on it, because Java 7 will come out on July 28th, and I want to be prepared on that.&lt;/p&gt;

&lt;p&gt;I would suggest that we add 2 more jobs for half hourly, that set an environment variable, so hudson-setting.sh uses another JDK.&lt;/p&gt;

&lt;p&gt;By the way, javac 7.0 warns you when you compile code with -source 1.6 and you dont set another bootclasspath, something that missing since years (the problem with missing methods/classes used in your code, even if -source 1.6).&lt;/p&gt;</comment>
                    <comment id="13069928" author="thetaphi" created="Sat, 23 Jul 2011 10:28:55 +0100"  >&lt;p&gt;...haven&apos;t tested @Override -source 1.5 violations...&lt;/p&gt;</comment>
                    <comment id="13069929" author="rcmuir" created="Sat, 23 Jul 2011 10:32:28 +0100"  >&lt;blockquote&gt;
&lt;p&gt;...haven&apos;t tested @Override -source 1.5 violations...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be &lt;b&gt;really&lt;/b&gt; nice if this worked somehow...&lt;/p&gt;</comment>
                    <comment id="13070142" author="thetaphi" created="Sun, 24 Jul 2011 11:41:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;would help runtime bytecode optimizers (ie: HotSpot) to replace that method with an inline NOOP when that method doesn&apos;t exist?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This may be a good idea if this code is performance critical. In that case its only exceuted when Exceptions are thrown and all is already f*cked up &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, so no need to optimize. For me the current code is more readable.&lt;/p&gt;

&lt;p&gt;I will keep this issue open until Oracle has fixed its HotSpot bug hopefully before the release of Java 7 (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3335&quot; title=&quot;jrebug causes porter stemmer to sigsegv&quot;&gt;&lt;del&gt;LUCENE-3335&lt;/del&gt;&lt;/a&gt;) and then commit once we have the Java7-Tasks running on Jenkins.&lt;/p&gt;</comment>
                    <comment id="13070143" author="thetaphi" created="Sun, 24 Jul 2011 11:42:32 +0100"  >&lt;p&gt;Here my final patch.&lt;/p&gt;</comment>
                    <comment id="13070198" author="thetaphi" created="Sun, 24 Jul 2011 16:26:07 +0100"  >&lt;p&gt;Committed trunk revision: 1150405&lt;br/&gt;
Committed 3.x revision: 1150407&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12487631" name="LUCENE-3334.patch" size="6840" author="thetaphi" created="Sun, 24 Jul 2011 11:42:32 +0100" />
                    <attachment id="12487571" name="LUCENE-3334.patch" size="6766" author="thetaphi" created="Sat, 23 Jul 2011 00:06:05 +0100" />
                    <attachment id="12487561" name="LUCENE-3334.patch" size="6493" author="thetaphi" created="Fri, 22 Jul 2011 22:51:46 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 22 Jul 2011 23:55:59 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2747</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24362</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>