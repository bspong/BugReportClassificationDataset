<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:20:43 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3731/LUCENE-3731.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3731] Create a analysis/uima module for UIMA based tokenizers/analyzers</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3731</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;As discussed in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-3013&quot; title=&quot;Add UIMA based tokenizers / filters that can be used in the schema.xml&quot;&gt;&lt;del&gt;SOLR-3013&lt;/del&gt;&lt;/a&gt; the UIMA Tokenizers/Analyzer should be refactored out in a separate module (modules/analysis/uima) as they can be used in plain Lucene. Then the solr/contrib/uima will contain only the related factories.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12540329">LUCENE-3731</key>
            <summary>Create a analysis/uima module for UIMA based tokenizers/analyzers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="teofili">Tommaso Teofili</assignee>
                                <reporter username="teofili">Tommaso Teofili</reporter>
                        <labels>
                    </labels>
                <created>Mon, 30 Jan 2012 08:57:03 +0000</created>
                <updated>Fri, 10 May 2013 11:44:44 +0100</updated>
                    <resolved>Wed, 29 Feb 2012 16:20:50 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13199762" author="teofili" created="Fri, 3 Feb 2012 15:18:17 +0000"  >&lt;p&gt;this patch adds a modules/analysis/uima module&lt;/p&gt;</comment>
                    <comment id="13199770" author="thetaphi" created="Fri, 3 Feb 2012 15:27:20 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      clearAttributes();
+      AnnotationFS next = iterator.next();
+      termAttr.setEmpty();
+      termAttr.append(next.getCoveredText());
+      termAttr.setLength(next.getCoveredText().length());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you clear the attributes already, the length of termAttr is 0, so setEmpty is not needed. termAttr.setLength() is also not useful, as append will initialize the length already. All you need is termAttr.append(next.getCoveredText());&lt;/p&gt;

&lt;p&gt;Uwe&lt;/p&gt;</comment>
                    <comment id="13199771" author="teofili" created="Fri, 3 Feb 2012 15:30:23 +0000"  >&lt;p&gt;right Uwe, thanks so much for the quick review &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13199778" author="rcmuir" created="Fri, 3 Feb 2012 15:35:03 +0000"  >&lt;p&gt;Thanks for starting this Tommaso:&lt;/p&gt;

&lt;p&gt;I was unable to apply the patch (were there some svn-copies?)&lt;/p&gt;

&lt;p&gt;But I suggest in general using the BaseTokenStreamTestCase.assertTokenStreamContents/assertAnalyzesTo:&lt;br/&gt;
e.g. instead of:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// check that &apos;the big brown fox jumped on the wood&apos; tokens have the expected PoS types
&lt;/span&gt;   &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] expectedPos = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;code-quote&quot;&gt;&quot;at&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;jj&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;jj&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;nn&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;vbd&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;in&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;at&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;nn&quot;&lt;/span&gt;};
   &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
   &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (ts.incrementToken()) {
     assertNotNull(offsetAtt);
     assertNotNull(termAtt);
     assertNotNull(typeAttr);
     assertEquals(typeAttr.type(), expectedPos[i]);
     i++;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;you could use:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   assertTokenStreamContents(ts, 
     &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;code-quote&quot;&gt;&quot;the&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;big&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;brown&quot;&lt;/span&gt;, ... }, /* expected terms */
     &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] { &lt;span class=&quot;code-quote&quot;&gt;&quot;at&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;jj&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;jj&quot;&lt;/span&gt;, ... }, /* expected types */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are also variants that let you supply expected start/end offsets, I think that would be good.&lt;/p&gt;

&lt;p&gt;Finally, to check for lots of other bugs (including thread-safety, compatibility with charfilters, etc),&lt;br/&gt;
I would recommend:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /** blast some random strings through the analyzer */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testRandomStrings() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    Analyzer a = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Analyzer() {

      @Override
      &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; TokenStreamComponents createComponents(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldName, Reader reader) {
        Tokenizer tokenizer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MyTokenizer(reader);
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TokenStreamComponents(tokenizer, tokenizer);
      } 
    };
    checkRandomData(random, a, 10000*RANDOM_MULTIPLIER);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you look at BaseTokenStreamTestCase you will see all of these methods are insanely nitpicky&lt;br/&gt;
and find all kinds of bugs in analysis components, so it will really help test coverage I think.&lt;/p&gt;</comment>
                    <comment id="13199893" author="teofili" created="Fri, 3 Feb 2012 17:30:51 +0000"  >&lt;p&gt;Hey Robert, that&apos;s super, thanks! I&apos;m going to collect your suggestions in a new patch shortly.&lt;/p&gt;</comment>
                    <comment id="13204373" author="teofili" created="Thu, 9 Feb 2012 08:58:50 +0000"  >&lt;p&gt;Updated patch which incorporates Robert&apos;s suggestions. &lt;br/&gt;
The random strings testing highlights some corner cases where the endOffset is not set correctly, probably due to Redear to String explicit conversion in BaseUIMATokenizer which needs to get rid of line.separator property.&lt;/p&gt;

&lt;p&gt;New patch to fix the above will follow.&lt;/p&gt;</comment>
                    <comment id="13206835" author="teofili" created="Mon, 13 Feb 2012 12:24:34 +0000"  >&lt;p&gt;Updated patch which fixes corner cases with wrong endOffsets.&lt;/p&gt;</comment>
                    <comment id="13206837" author="rcmuir" created="Mon, 13 Feb 2012 12:33:15 +0000"  >&lt;p&gt;Hi Tommaso, I think it would be cleaner to set the final offset in end() instead?&lt;/p&gt;</comment>
                    <comment id="13206997" author="teofili" created="Mon, 13 Feb 2012 17:27:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hi Tommaso, I think it would be cleaner to set the final offset in end() instead?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok, +1.&lt;/p&gt;</comment>
                    <comment id="13207636" author="teofili" created="Tue, 14 Feb 2012 11:16:10 +0000"  >&lt;p&gt;patch with finalOffset setting in the end() method.&lt;/p&gt;</comment>
                    <comment id="13208058" author="teofili" created="Tue, 14 Feb 2012 21:57:54 +0000"  >&lt;p&gt;I&apos;m going to commit this one shortly if no one objects.&lt;/p&gt;</comment>
                    <comment id="13208075" author="rcmuir" created="Tue, 14 Feb 2012 22:15:23 +0000"  >&lt;p&gt;Thanks for factoring this out Tommaso.&lt;/p&gt;</comment>
                    <comment id="13208076" author="teofili" created="Tue, 14 Feb 2012 22:15:38 +0000"  >&lt;p&gt;committed on trunk in r1244236&lt;/p&gt;</comment>
                    <comment id="13208129" author="steve_rowe" created="Tue, 14 Feb 2012 23:45:55 +0000"  >&lt;p&gt;Hi Tommaso,&lt;/p&gt;

&lt;p&gt;I just committed modifications to the IntelliJ IDEA and Maven configurations.&lt;/p&gt;

&lt;p&gt;Something strange is happening, though: one test method consistently fails under both IntelliJ and Maven: &lt;tt&gt;UIMABaseAnalyzerTest.testRandomStrings()&lt;/tt&gt;.  However, under Ant, this always succeeds, including with the seeds that fail under either IntelliJ or Maven.  Also, under both IntelliJ and Maven, the following sequence is printed out literally thousands of times to STDERR (with increasing time stamps) - however, I don&apos;t see this at all under Ant:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Feb 14, 2012 6:34:18 PM WhitespaceTokenizer initialize
INFO: &quot;Whitespace tokenizer successfully initialized&quot;
Feb 14, 2012 6:34:18 PM WhitespaceTokenizer typeSystemInit
INFO: &quot;Whitespace tokenizer typesystem initialized&quot;
Feb 14, 2012 6:34:18 PM WhitespaceTokenizer process
INFO: &quot;Whitespace tokenizer starts processing&quot;
Feb 14, 2012 6:34:18 PM WhitespaceTokenizer process
INFO: &quot;Whitespace tokenizer finished processing&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here are two different example failures, from Maven - they seem to have different causes, which is baffling:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;The following exceptions were thrown by threads:
*** Thread: Thread-1 ***
java.lang.RuntimeException: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException: Annotator processing failed.    
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:289)
Caused by: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException: Annotator processing failed.    
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:73)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:333)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
Caused by: org.apache.uima.analysis_engine.AnalysisEngineProcessException: Annotator processing failed.    
        at org.apache.uima.analysis_engine.impl.PrimitiveAnalysisEngine_impl.callAnalysisComponentProcess(PrimitiveAnalysisEngine_impl.java:391)
        at org.apache.uima.analysis_engine.impl.PrimitiveAnalysisEngine_impl.processAndOutputNewCASes(PrimitiveAnalysisEngine_impl.java:295)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.processUntilNextOutputCas(ASB_impl.java:567)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.&amp;amp;lt;init&amp;amp;gt;(ASB_impl.java:409)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl.process(ASB_impl.java:342)
        at org.apache.uima.analysis_engine.impl.AggregateAnalysisEngine_impl.processAndOutputNewCASes(AggregateAnalysisEngine_impl.java:267)
        at org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase.process(AnalysisEngineImplBase.java:267)
        at org.apache.lucene.analysis.uima.BaseUIMATokenizer.analyzeInput(BaseUIMATokenizer.java:57)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.analyzeText(UIMAAnnotationsTokenizer.java:61)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:71)
        ... 3 more
Caused by: java.lang.NullPointerException
        at org.apache.uima.impl.UimaContext_ImplBase$ComponentInfoImpl.mapToSofaID(UimaContext_ImplBase.java:655)
        at org.apache.uima.cas.impl.CASImpl.getView(CASImpl.java:2646)
        at org.apache.uima.jcas.impl.JCasImpl.getView(JCasImpl.java:1415)
        at org.apache.uima.examples.tagger.HMMTagger.process(HMMTagger.java:250)
        at org.apache.uima.analysis_component.JCasAnnotator_ImplBase.process(JCasAnnotator_ImplBase.java:48)
        at org.apache.uima.analysis_engine.impl.PrimitiveAnalysisEngine_impl.callAnalysisComponentProcess(PrimitiveAnalysisEngine_impl.java:377)
        ... 12 more
*** Thread: Thread-2 ***
java.lang.AssertionError: token 0 does not exist
        at org.junit.Assert.fail(Assert.java:93)
        at org.junit.Assert.assertTrue(Assert.java:43)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:121)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:371)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
NOTE: reproduce with: ant test -Dtestcase=UIMABaseAnalyzerTest -Dtestmethod=testRandomStrings(org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest) -Dtests.seed=-1dad4a7ede576939:-f9f5c77dffb3eb0:607bf59bf7da50eb -Dargs=&amp;amp;quot;-Dfile.encoding=Cp1252&amp;amp;quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;The following exceptions were thrown by threads:
*** Thread: Thread-5 ***
java.lang.RuntimeException: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:289)
Caused by: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:73)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:121)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:371)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
Caused by: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.processUntilNextOutputCas(ASB_impl.java:701)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.&amp;amp;lt;init&amp;amp;gt;(ASB_impl.java:409)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl.process(ASB_impl.java:342)
        at org.apache.uima.analysis_engine.impl.AggregateAnalysisEngine_impl.processAndOutputNewCASes(AggregateAnalysisEngine_impl.java:267)
        at org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase.process(AnalysisEngineImplBase.java:267)
        at org.apache.lucene.analysis.uima.BaseUIMATokenizer.analyzeInput(BaseUIMATokenizer.java:57)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.analyzeText(UIMAAnnotationsTokenizer.java:61)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:71)
        ... 4 more
Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 2
        at java.util.ArrayList.RangeCheck(ArrayList.java:547)
        at java.util.ArrayList.get(ArrayList.java:322)
        at org.apache.uima.flow.impl.FixedFlowController$FixedFlowObject.next(FixedFlowController.java:222)
        at org.apache.uima.analysis_engine.asb.impl.FlowContainer.next(FlowContainer.java:100)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.processUntilNextOutputCas(ASB_impl.java:546)
        ... 11 more
*** Thread: Thread-7 ***
java.lang.RuntimeException: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:289)
Caused by: java.io.IOException: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:73)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:121)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:371)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
Caused by: org.apache.uima.analysis_engine.AnalysisEngineProcessException
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.processUntilNextOutputCas(ASB_impl.java:701)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.&amp;amp;lt;init&amp;amp;gt;(ASB_impl.java:409)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl.process(ASB_impl.java:342)
        at org.apache.uima.analysis_engine.impl.AggregateAnalysisEngine_impl.processAndOutputNewCASes(AggregateAnalysisEngine_impl.java:267)
        at org.apache.uima.analysis_engine.impl.AnalysisEngineImplBase.process(AnalysisEngineImplBase.java:267)
        at org.apache.lucene.analysis.uima.BaseUIMATokenizer.analyzeInput(BaseUIMATokenizer.java:57)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.analyzeText(UIMAAnnotationsTokenizer.java:61)
        at org.apache.lucene.analysis.uima.UIMAAnnotationsTokenizer.incrementToken(UIMAAnnotationsTokenizer.java:71)
        ... 4 more
Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 2
        at java.util.ArrayList.RangeCheck(ArrayList.java:547)
        at java.util.ArrayList.get(ArrayList.java:322)
        at org.apache.uima.flow.impl.FixedFlowController$FixedFlowObject.next(FixedFlowController.java:222)
        at org.apache.uima.analysis_engine.asb.impl.FlowContainer.next(FlowContainer.java:100)
        at org.apache.uima.analysis_engine.asb.impl.ASB_impl$AggregateCasIterator.processUntilNextOutputCas(ASB_impl.java:546)
        ... 11 more
*** Thread: Thread-6 ***
java.lang.AssertionError: end of stream
        at org.junit.Assert.fail(Assert.java:93)
        at org.junit.Assert.assertTrue(Assert.java:43)
        at org.junit.Assert.assertFalse(Assert.java:68)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:148)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:371)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
*** Thread: Thread-4 ***
org.junit.ComparisonFailure: term 8 expected:&amp;amp;lt;-[]&amp;amp;gt; but was:&amp;amp;lt;-[- f(]&amp;amp;gt;
        at org.junit.Assert.assertEquals(Assert.java:125)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:124)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:371)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:295)
        at org.apache.lucene.analysis.BaseTokenStreamTestCase$AnalysisThread.run(BaseTokenStreamTestCase.java:287)
NOTE: reproduce with: ant test -Dtestcase=UIMABaseAnalyzerTest -Dtestmethod=testRandomStrings(org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest) -Dtests.seed=2be0c24a1df9b25e:-42f203968285c6ed:5f8c85cdbae32724 -Dargs=&amp;amp;quot;-Dfile.encoding=Cp1252&amp;amp;quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13208145" author="teofili" created="Wed, 15 Feb 2012 00:04:57 +0000"  >&lt;p&gt;Thank you very much Steven for reporting.&lt;/p&gt;

&lt;p&gt;The &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Feb 14, 2012 6:34:18 PM WhitespaceTokenizer initialize
INFO: &quot;Whitespace tokenizer successfully initialized&quot;
Feb 14, 2012 6:34:18 PM WhitespaceTokenizer typeSystemInit
INFO: &quot;Whitespace tokenizer typesystem initialized&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;messages are due to UIMA WhitespaceTokenizer Annotator which logs the initialization/processing/etc. calls.&lt;br/&gt;
That is printed out many times because the testRandomStrings test method just does lots of tricky tests on the UIMABaseAnalyzer which require the above calls to be executed repeatedly.&lt;/p&gt;

&lt;p&gt;I&apos;ll take a look to the other failures which didn&apos;t show up on the tests I had done till now.&lt;/p&gt;</comment>
                    <comment id="13208393" author="teofili" created="Wed, 15 Feb 2012 11:45:17 +0000"  >&lt;p&gt;Ok, I noticed this was due to an issue on the UIMA side.&lt;br/&gt;
I think the best option (as those are used just for testing) is to use a dummy implementation of both UIMA based whitespace tokenizer and PoS tagger thus also avoiding the log lines when executing tests using Maven.&lt;/p&gt;</comment>
                    <comment id="13208460" author="teofili" created="Wed, 15 Feb 2012 13:28:04 +0000"  >&lt;p&gt;fix for the issues reported by Steven committed in r1244474&lt;/p&gt;</comment>
                    <comment id="13208571" author="rcmuir" created="Wed, 15 Feb 2012 16:42:52 +0000"  >&lt;p&gt;Hi Tommaso, I noticed some of the tests here are really slow... digging in I think we have some perf issues:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;junit-sequential:
   [junit] Testsuite: org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest
   [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 52.302 sec
   [junit]
   [junit] Testsuite: org.apache.lucene.analysis.uima.UIMATypeAwareAnalyzerTest
   [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 38.506 sec
   [junit]
   [junit] Testsuite: org.apache.lucene.analysis.uima.ae.BasicAEProviderTest
   [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.02 sec
   [junit]
   [junit] Testsuite: org.apache.lucene.analysis.uima.ae.OverridingParamsAEProviderTest
   [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1.042 sec
   [junit]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the patch below (which cannot be committed yet)... currently i had to add sync around the analysis engine, but it avoids recreating the CAS for each document... which seems to cause the perf problems&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;junit-sequential:
    [junit] Testsuite: org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 3.858 sec
    [junit] 
    [junit] Testsuite: org.apache.lucene.analysis.uima.UIMATypeAwareAnalyzerTest
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.731 sec
    [junit] 
    [junit] Testsuite: org.apache.lucene.analysis.uima.ae.BasicAEProviderTest
    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.009 sec
    [junit] 
    [junit] Testsuite: org.apache.lucene.analysis.uima.ae.OverridingParamsAEProviderTest
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 1.058 sec
    [junit] 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13208595" author="teofili" created="Wed, 15 Feb 2012 17:25:46 +0000"  >&lt;p&gt;Hi Robert,&lt;br/&gt;
reusing the CAS is good, as you note in the patch we need to take care of how to let each tokenizer instance get its own AE, in the previous Solr version core names were used to cache and get AEs.&lt;br/&gt;
As said on dev@ we may start with letting each tokenizer have its own AE and then improve the design once concurrency is fixed.&lt;br/&gt;
I&apos;m doing tests with other types of UIMA Flow controllers, right now the WhiteboardFlowController seems to behave slightly better.&lt;/p&gt;</comment>
                    <comment id="13208609" author="rcmuir" created="Wed, 15 Feb 2012 17:39:44 +0000"  >&lt;p&gt;Tommaso, I will make another prototype patch trying this approach.&lt;/p&gt;

&lt;p&gt;In my opinion the caching done in BasicAEProvider/OverridingParamsAEProvider would still useful even with &lt;br/&gt;
allowing each tokenstream to have a new AE, because we would just cache the description itself &lt;br/&gt;
(so we e.g. only parse xml a single time), butreturn a new AE each time... then we could remove the &lt;br/&gt;
synchronized and still avoid a &apos;heavy&apos; construction for first time initialization of a new thread &lt;br/&gt;
(after that, the tokenstream is reused, so there is no issue).&lt;/p&gt;

&lt;p&gt;Ill see how it goes and upload a patch if I can make it look nice.&lt;/p&gt;</comment>
                    <comment id="13208628" author="rcmuir" created="Wed, 15 Feb 2012 18:14:20 +0000"  >&lt;p&gt;updated patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;each tokenstream gets its own AnalysisEngine instance&lt;/li&gt;
	&lt;li&gt;providers only cache the description itself, but return new instances.&lt;/li&gt;
	&lt;li&gt;reuse logic factored into BaseUIMATokenizer class&lt;/li&gt;
	&lt;li&gt;release CAS/AE resources in BaseUIMATokenizer.close()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Now there are only a few nocommits, in the providers, but these are mostly nitpicks and more minor&lt;/p&gt;</comment>
                    <comment id="13208662" author="rcmuir" created="Wed, 15 Feb 2012 18:43:34 +0000"  >&lt;p&gt;ok new patch, with more refactoring... no more nocommits &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;now the OverridingParams provider just extends the base one, but sets configuration.&lt;/p&gt;

&lt;p&gt;also the xml inputstream is closed.&lt;/p&gt;</comment>
                    <comment id="13208753" author="teofili" created="Wed, 15 Feb 2012 20:14:32 +0000"  >&lt;p&gt;Thanks Robert for taking care of this, nice improvement &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I agree on the OverridingParams extending the base one, it was also my intent to do that.&lt;/p&gt;</comment>
                    <comment id="13208761" author="rcmuir" created="Wed, 15 Feb 2012 20:20:41 +0000"  >&lt;p&gt;OK, if there is no objection I will commit this one. &lt;/p&gt;

&lt;p&gt;I think it will fix the jenkins fails... of course sometimes it takes&lt;br/&gt;
a few days of jenkins chewing on it to be sure&lt;/p&gt;</comment>
                    <comment id="13208766" author="teofili" created="Wed, 15 Feb 2012 20:26:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;OK, if there is no objection I will commit this one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, I&apos;ll post my progress on other possible improvements in performances I&apos;m testing later.&lt;/p&gt;</comment>
                    <comment id="13208784" author="rcmuir" created="Wed, 15 Feb 2012 20:54:09 +0000"  >&lt;p&gt;Thanks Tommaso: i committed this.&lt;/p&gt;

&lt;p&gt;Also a tiny change to end() methods:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void end() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (offsetAttr.endOffset() &amp;lt; finalOffset)
-      offsetAttr.setOffset(finalOffset, finalOffset);
+    offsetAttr.setOffset(finalOffset, finalOffset);
     &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.end();
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unless there is a bug, we should not need the if...&lt;br/&gt;
Not sure if we should be reading the attribute values at this&lt;br/&gt;
stage and if thats defined either, and if endOffset is somehow&lt;br/&gt;
past the reader&apos;s final offset, well we are already in trouble &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I ran the tests many times and with -Dtests.multiplier=100 and there&lt;br/&gt;
were no issues.&lt;/p&gt;</comment>
                    <comment id="13209247" author="teofili" created="Thu, 16 Feb 2012 10:15:30 +0000"  >&lt;p&gt;Right, everything seems ok now.&lt;br/&gt;
I also tried to comment the &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;property name=&quot;tests.threadspercpu&quot; value=&quot;0&quot; /&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;line in build.xml in order to execute tests in parallel.&lt;br/&gt;
Multiple parallel tests executions, with also -Dtests.multiplier=100, with Java6 passed flawlessly; will see if that is the case for Java7 too.&lt;/p&gt;</comment>
                    <comment id="13209301" author="teofili" created="Thu, 16 Feb 2012 12:12:32 +0000"  >&lt;p&gt;some improvement in performance came out releasing the CAS and AE on close() call&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  @Override
  public void close() throws IOException {
    super.close();
    // release UIMA resources
    cas.release();
    ae.destroy();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now investigating the use of CASPool for improving throughput on high usages scenarios.&lt;/p&gt;</comment>
                    <comment id="13209304" author="rcmuir" created="Thu, 16 Feb 2012 12:17:20 +0000"  >&lt;p&gt;Is that safe to do in Tokenizer.close() ?&lt;/p&gt;

&lt;p&gt;Because Tokenizer.close() is misleading/confusing, the instance is still reused after &lt;br/&gt;
this for subsequent documents... in other words Tokenizer.close() closes resources like&lt;br/&gt;
the Reader itself... it just happens to be that CAS/AE don&apos;t complain about you &lt;br/&gt;
continuing to use them after they are release()&apos;ed/destroy()&apos;ed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13209439" author="teofili" created="Thu, 16 Feb 2012 15:39:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;Because Tokenizer.close() is misleading/confusing, the instance is still reused after &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;this for subsequent documents.&lt;/p&gt;

&lt;p&gt;When I call close() it looks the correct way one could reuse that Tokenizer instance is by calling reset(someOtherInput) before doing anything else, so, after adding &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; reader != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;input has been closed, please reset it&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;as first line inside the toString(Reader reader) method in BaseUIMATokenizer, I tried this test:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSetReaderAndClose() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    StringReader input = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(&lt;span class=&quot;code-quote&quot;&gt;&quot;the big brown fox jumped on the wood&quot;&lt;/span&gt;);
    Tokenizer t = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; UIMAAnnotationsTokenizer(&lt;span class=&quot;code-quote&quot;&gt;&quot;/uima/AggregateSentenceAE.xml&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.uima.TokenAnnotation&quot;&lt;/span&gt;, input);
    assertTokenStreamContents(t, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[]{&lt;span class=&quot;code-quote&quot;&gt;&quot;the&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;big&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;brown&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;fox&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;jumped&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;on&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;the&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;wood&quot;&lt;/span&gt;});
    t.close();
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      t.incrementToken();
      fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;should&apos;ve been failing as reader is not set&quot;&lt;/span&gt;);
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AssertionError error) {
      &lt;span class=&quot;code-comment&quot;&gt;// ok
&lt;/span&gt;    }
    input = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(&lt;span class=&quot;code-quote&quot;&gt;&quot;hi oh my&quot;&lt;/span&gt;);
    t = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; UIMAAnnotationsTokenizer(&lt;span class=&quot;code-quote&quot;&gt;&quot;/uima/TestAggregateSentenceAE.xml&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.lucene.uima.ts.TokenAnnotation&quot;&lt;/span&gt;, input);
    assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;should&apos;ve been incremented &quot;&lt;/span&gt;, t.incrementToken());
    t.close();
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      t.incrementToken();
      fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;should&apos;ve been failing as reader is not set&quot;&lt;/span&gt;);
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (AssertionError error) {
      &lt;span class=&quot;code-comment&quot;&gt;// ok
&lt;/span&gt;    }
    t.reset(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringReader(&lt;span class=&quot;code-quote&quot;&gt;&quot;hey what &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; you say&quot;&lt;/span&gt;));
    assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;should&apos;ve been incremented &quot;&lt;/span&gt;, t.incrementToken());
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and it looks to me it&apos;s behaving correctly.&lt;br/&gt;
Still working on improving it and trying to catch possible corner cases.&lt;/p&gt;</comment>
                    <comment id="13209474" author="rcmuir" created="Thu, 16 Feb 2012 16:17:37 +0000"  >&lt;p&gt;Right, after you reset(Reader) you set a new reader.&lt;/p&gt;

&lt;p&gt;But the question is: is it safe to use CAS/AE after you call release()/destroy() on them?&lt;/p&gt;

&lt;p&gt;Because close() is called on tokenstreams after each invocation, in other words:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Tokenizer t = new Tokenizer(reader);
... stuff ...
t.close();
t.reset(someOtherReader);
.. stuff ...
t.close();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what does CAS.release() really mean? If it means you should not use the CAS again afterwards,&lt;br/&gt;
then we cannot have it in TokenStream.close(), and same with AE.destroy()&lt;/p&gt;</comment>
                    <comment id="13209490" author="teofili" created="Thu, 16 Feb 2012 16:47:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;But the question is: is it safe to use CAS/AE after you call release()/destroy() on them?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no it isn&apos;t, so you&apos;re right: those methods should not be inside the close() method.&lt;/p&gt;

</comment>
                    <comment id="13214093" author="teofili" created="Wed, 22 Feb 2012 23:10:31 +0000"  >&lt;p&gt;After some more testing I think the CasPool is good just for scenarios where the pool serves different CAS to different clients (the tokenizers), so not really helpful in the current implementation, however it may be useful if we abstract the operation of obtaining and releasing a CAS outside the BaseTokenizer.&lt;/p&gt;

&lt;p&gt;In the meantime I noticed the AEProviderFactory getAEProvider() methods have a keyPrefix parameter that came from Solr implementation and was intended to hold the core name, so, at the moment I think it&apos;d be better to have (also) methods which don&apos;t need that paramater for the Lucene uses.&lt;/p&gt;</comment>
                    <comment id="13216459" author="teofili" created="Sat, 25 Feb 2012 14:06:26 +0000"  >&lt;p&gt;the two methods analyzeText() and analyzeInput() are confusing so the first one should just be renamed as initializeIterator() as its main purpose is to prepare the FSIterator which holds the annotations that will be used inside the incrementToken() method.&lt;/p&gt;</comment>
                    <comment id="13218975" author="teofili" created="Wed, 29 Feb 2012 08:07:28 +0000"  >&lt;p&gt;I think we can mark this one as resolved, just I&apos;d keep this only for trunk and backport the whole thing to 3.x once &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-3013&quot; title=&quot;Add UIMA based tokenizers / filters that can be used in the schema.xml&quot;&gt;&lt;del&gt;SOLR-3013&lt;/del&gt;&lt;/a&gt; is resolved and committed to trunk too.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12537678">SOLR-3013</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12513931" name="LUCENE-3731_2.patch" size="116688" author="teofili" created="Thu, 9 Feb 2012 08:58:50 +0000" />
                    <attachment id="12514346" name="LUCENE-3731_3.patch" size="111193" author="teofili" created="Mon, 13 Feb 2012 12:24:34 +0000" />
                    <attachment id="12514478" name="LUCENE-3731_4.patch" size="111377" author="teofili" created="Tue, 14 Feb 2012 11:16:10 +0000" />
                    <attachment id="12513135" name="LUCENE-3731.patch" size="116518" author="teofili" created="Fri, 3 Feb 2012 15:18:17 +0000" />
                    <attachment id="12514811" name="LUCENE-3731_rsrel.patch" size="4187" author="teofili" created="Thu, 16 Feb 2012 15:39:18 +0000" />
                    <attachment id="12514674" name="LUCENE-3731_speed.patch" size="13487" author="rcmuir" created="Wed, 15 Feb 2012 18:43:34 +0000" />
                    <attachment id="12514669" name="LUCENE-3731_speed.patch" size="13790" author="rcmuir" created="Wed, 15 Feb 2012 18:14:20 +0000" />
                    <attachment id="12514659" name="LUCENE-3731_speed.patch" size="4813" author="rcmuir" created="Wed, 15 Feb 2012 16:42:51 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 3 Feb 2012 15:27:20 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>225743</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23967</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>