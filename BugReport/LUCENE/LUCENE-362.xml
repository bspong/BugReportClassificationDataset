<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:15:13 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-362/LUCENE-362.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-362] [PATCH] Extension to binary Fields that allows fixed byte buffer</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-362</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a very simple patch that supports storing binary values in the index&lt;br/&gt;
more efficiently.  A new Field constructor accepts a length argument, allowing a&lt;br/&gt;
fixed byte[] to be reused acrossed multiple calls with arguments of different&lt;br/&gt;
sizes.  A companion change to FieldsWriter uses this length when storing and/or&lt;br/&gt;
compressing the field.&lt;/p&gt;

&lt;p&gt;There is one remaining case in Document.  Intentionally, no direct accessor to&lt;br/&gt;
the length of a binary field is provided from Document, only from Field.  This&lt;br/&gt;
is because Field&apos;s created by FieldReader will never have a specified length and&lt;br/&gt;
this is usual case for Field&apos;s read from Document.  It seems less confusing for&lt;br/&gt;
most users.&lt;/p&gt;

&lt;p&gt;I don&apos;t believe any upward incompatibility is introduced here (e.g., from the&lt;br/&gt;
possibility of getting a larger byte[] than actually holds the value from&lt;br/&gt;
Document), since no such byte[] values are possible without this patch anyway.&lt;/p&gt;

&lt;p&gt;The compression case is still inefficient (much copying), but it is hard to see&lt;br/&gt;
how Lucene can do too much better.  However, the application can do the&lt;br/&gt;
compression externally and pass in the reused compression-output buffer as a&lt;br/&gt;
binary value (which is what I&apos;m doing).  This represents a substantialy&lt;br/&gt;
allocation savings for storing large documents bodies (compressed) into the&lt;br/&gt;
Lucene index.&lt;/p&gt;

&lt;p&gt;Two patch files are attached, both created by svn on 3/17/05.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: All&lt;br/&gt;
Platform: All&lt;/p&gt;</environment>
            <key id="12314512">LUCENE-362</key>
            <summary>[PATCH] Extension to binary Fields that allows fixed byte buffer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chuck@manawiz.com">Chuck Williams</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Mar 2005 11:29:10 +0000</created>
                <updated>Thu, 2 Jun 2011 23:03:21 +0100</updated>
                    <resolved>Wed, 26 Jan 2011 13:41:50 +0000</resolved>
                                                            <component>core/index</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322235" author="chuck@manawiz.com" created="Fri, 18 Mar 2005 11:30:47 +0000"  >&lt;p&gt;Created an attachment (id=14514)&lt;br/&gt;
(1 of 2) Patch to Field.java to support lengths on binary values&lt;/p&gt;</comment>
                    <comment id="12322236" author="chuck@manawiz.com" created="Fri, 18 Mar 2005 11:31:35 +0000"  >&lt;p&gt;Created an attachment (id=14515)&lt;br/&gt;
(2 of 2) Patch to FieldsWriter to write binary values using length from Field&lt;/p&gt;</comment>
                    <comment id="12322237" author="jakarta@ehatchersolutions.com" created="Fri, 18 Mar 2005 12:10:36 +0000"  >&lt;p&gt;Chuck - would you mind also contributing a test case that exercises this new feature?&lt;/p&gt;

&lt;p&gt;It&apos;d be nice if all new code added is covered by test cases.  One of these days we&apos;ll even run code &lt;br/&gt;
coverage on it to see how well we&apos;re doing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12322238" author="chuck@manawiz.com" created="Fri, 18 Mar 2005 17:44:17 +0000"  >&lt;p&gt;Erik &amp;#8211; I&apos;d be happy to write a test case.  But first, I want to fully&lt;br/&gt;
understand the valid uses and dangers of this patch.  Since it is reusing&lt;br/&gt;
memory, it is possible to mess up seriously.  I think its javadoc at least needs&lt;br/&gt;
more explanation of the dangers and an &quot;expert&quot; caveat.  It&apos;s apparent&lt;br/&gt;
simplicity lulled me into submitted it too quickly.  Will revise later.&lt;/p&gt;
</comment>
                    <comment id="12322239" author="chuck@manawiz.com" created="Sat, 19 Mar 2005 11:45:39 +0000"  >&lt;p&gt;Created an attachment (id=14521)&lt;br/&gt;
(1 of 2) Patch to Field.java to support lengths on binary values (with better&lt;br/&gt;
javadoc)&lt;/p&gt;

&lt;p&gt;This version improves the javadoc to provide and &quot;expert&quot; caveat and specify&lt;br/&gt;
the precise use-case that this patch supports.	For this use-case (storing a&lt;br/&gt;
single large binary field on each Document, e.g. the externally compressed body&lt;br/&gt;
of a document), the memory allocation benefits are substantial.  There are no&lt;br/&gt;
code changes from the original version.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to get to a junit test in the not too distant future.&lt;/p&gt;</comment>
                    <comment id="12322240" author="cutting@apache.org" created="Wed, 23 Mar 2005 03:19:35 +0000"  >&lt;p&gt;Things would be safer if you:&lt;/p&gt;

&lt;p&gt;private int fieldsDataLength = -1;&lt;/p&gt;

&lt;p&gt;public int binaryLength() { &lt;br/&gt;
   return fieldsDataLength == -1&lt;br/&gt;
      ? binaryValue().length&lt;br/&gt;
      : fieldsDataLength;&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;public Field(String name, byte[] value, int length, Store store) &lt;/p&gt;
{
  if (length &amp;lt; 0 || length &amp;gt; value.length)
    throw new IllegalArgumentException(&quot;bad length:&quot; + length);

  ...

}

&lt;p&gt;No?&lt;/p&gt;</comment>
                    <comment id="12322241" author="chuck@manawiz.com" created="Wed, 23 Mar 2005 10:45:49 +0000"  >&lt;p&gt;I don&apos;t see how the first change (initializing fieldsDataLength to -1 and&lt;br/&gt;
testing it in binaryLength()) provides any additional safety.  The patch always&lt;br/&gt;
initializes fieldsDataLength in Field() for any binary value, so unless that was&lt;br/&gt;
changed the value would never be -1 in binaryLength().  The main risk in this&lt;br/&gt;
area of the code is that somebody calls binaryValue() without calling&lt;br/&gt;
binaryLength() to get the length, which seems impossible to address.  Another&lt;br/&gt;
risk is that somebody calls binaryLength() on a non-binary field &amp;#8211; the current&lt;br/&gt;
patch returns null in that case, consistent with binaryValue(), while the&lt;br/&gt;
changed version would get an NPE.  I&apos;m probably missing some other case that you&lt;br/&gt;
see.&lt;/p&gt;

&lt;p&gt;The second change (validating the length passed to Field()) seems an&lt;br/&gt;
improvement.  But the biggest risk with this patch is the one I outlined in the&lt;br/&gt;
Javadoc, i.e. that somebody passes the same byte array in two different calls to&lt;br/&gt;
Field before the use in the first call is consumed (e.g., 2 fields in the same&lt;br/&gt;
Document, or the same field in 2 Documents before either is indexed).  I don&apos;t&lt;br/&gt;
see a good way to protect against that (without a performance hit).&lt;/p&gt;

&lt;p&gt;The patch is a bit risky due to this last consideration, but the performance&lt;br/&gt;
gain is substantial in the particular case where it is necessary to store large&lt;br/&gt;
document bodies in Lucene.  I&apos;m indexing with this now and doing zero&lt;br/&gt;
allocations by using nio ByteBuffer and CharBuffer views on a fixed byte array&lt;br/&gt;
that holds the successive document bodies.  It rips.  I&apos;m using compression&lt;br/&gt;
outside of Lucene (using the same zlib).  The combination of outside-compression&lt;br/&gt;
and the patch reduces 5 allocations of each document body to 0, when compared to&lt;br/&gt;
passing the bodies as text and letting Lucene do the compression (the biggest&lt;br/&gt;
part of this is the outside-compression).&lt;/p&gt;

&lt;p&gt;I don&apos;t object to either change and would be happy to see them if it means this&lt;br/&gt;
gets committed so I can eliminate my local patch!&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12360431" author="manawiz" created="Thu, 15 Dec 2005 01:48:34 +0000"  >&lt;p&gt;(Thanks Eric for correcting my mistaken posting to the old issue tracking system)&lt;/p&gt;

&lt;p&gt;Better late than never I hope.	FixedBufferBinaryFields.patch is revised to&lt;br/&gt;
apply against the latest source and now includes a test case (extension of &lt;br/&gt;
TestBinaryDocument).  This is my last current local patch to Lucene, so it&lt;br/&gt;
would be great if it gets committed.  The value again is to eliminate copying&lt;br/&gt;
of large binary values to be stored in the Lucene index.  For a compressed&lt;br/&gt;
document, for example, if the documents are read and compressed externally in a&lt;br/&gt;
fixed buffer and the compressed buffer is passed in, all copying can be&lt;br/&gt;
eliminated.&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12987004" author="shaie" created="Wed, 26 Jan 2011 13:41:50 +0000"  >&lt;p&gt;Field already has ctor and setter which accept a byte[], offset and length, allowing you to reuse the byte[].&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312541" name="ASF.LICENSE.NOT.GRANTED--Field-extension.patch" size="3066" author="chuck@manawiz.com" created="Sat, 19 Mar 2005 11:45:39 +0000" />
                    <attachment id="12312539" name="ASF.LICENSE.NOT.GRANTED--Field-extension.patch" size="2687" author="chuck@manawiz.com" created="Fri, 18 Mar 2005 11:30:47 +0000" />
                    <attachment id="12312540" name="ASF.LICENSE.NOT.GRANTED--FieldsWriter-extension.patch" size="1908" author="chuck@manawiz.com" created="Fri, 18 Mar 2005 11:31:35 +0000" />
                    <attachment id="12321328" name="FixedBufferBinaryFields.patch" size="9993" author="manawiz" created="Thu, 15 Dec 2005 01:48:34 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>34066</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 18 Mar 2005 12:10:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13387</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27369</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>