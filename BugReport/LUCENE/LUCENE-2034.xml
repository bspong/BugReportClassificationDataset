<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:14:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2034/LUCENE-2034.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2034] Massive Code Duplication in Contrib Analyzers - unifly the analyzer ctors</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2034</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Due to the variouse tokenStream APIs we had in lucene analyzer subclasses need to implement at least one of the methodes returning a tokenStream. When you look at the code it appears to be almost identical if both are implemented in the same analyzer.  Each analyzer defnes the same inner class (SavedStreams) which is unnecessary.&lt;br/&gt;
In contrib almost every analyzer uses stopwords and each of them creates his own way of loading them or defines a large number of ctors to load stopwords from a file, set, arrays etc.. those ctors should be removed / deprecated and eventually removed.&lt;/p&gt;

</description>
                <environment></environment>
            <key id="12439901">LUCENE-2034</key>
            <summary>Massive Code Duplication in Contrib Analyzers - unifly the analyzer ctors</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Nov 2009 00:08:08 +0000</created>
                <updated>Fri, 10 May 2013 11:43:47 +0100</updated>
                    <resolved>Sun, 3 Jan 2010 08:50:42 +0000</resolved>
                            <version>2.9</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12773722" author="simonw" created="Thu, 5 Nov 2009 00:10:42 +0000"  >&lt;p&gt;Attached a patch with a base class that solves the code duplication issue and simplifies stopword loading for contrib analyzers. &lt;br/&gt;
The patch contains 3 analyzers which use this new base class&lt;/p&gt;</comment>
                    <comment id="12773723" author="simonw" created="Thu, 5 Nov 2009 00:15:03 +0000"  >&lt;p&gt;btw. if somebody comes up with a better name for the analyzer speak up!&lt;br/&gt;
@robert: no super, fast or smart please  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12773813" author="simonw" created="Thu, 5 Nov 2009 07:29:04 +0000"  >&lt;p&gt;I have removed a sys.out I had accidentally in there.&lt;br/&gt;
The new patch contains more converted analyzers but I guess we should first get this in before we start converting all analyzers in contrib. &lt;br/&gt;
Pretty neat though stuff like ChineseAnalyzer only has one method in it after inheriting BaseAnalyzer&lt;/p&gt;</comment>
                    <comment id="12773997" author="simonw" created="Thu, 5 Nov 2009 17:48:10 +0000"  >&lt;p&gt;I changed the name from BaseAnalyzer to AbstractContribAnalyzer that might do a better job than BaseAnalyzer.&lt;/p&gt;
</comment>
                    <comment id="12774006" author="thetaphi" created="Thu, 5 Nov 2009 18:03:07 +0000"  >&lt;p&gt;An then we also have an AbstractCoreAnalyzer? weird...&lt;/p&gt;

&lt;p&gt;I want to bring this to core, too.&lt;/p&gt;</comment>
                    <comment id="12774016" author="simonw" created="Thu, 5 Nov 2009 18:15:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;An then we also have an AbstractCoreAnalyzer? weird... I want to bring this to core, too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I understand! Lets get this into contrib with either one name. Once we move this up in core it will be called Analyzer anyway so we can refactor it in contrib easily. The name AbstractContribAnalyzer would than again be ok as it would only contain the stopword convenience.&lt;/p&gt;</comment>
                    <comment id="12774029" author="thetaphi" created="Thu, 5 Nov 2009 18:50:54 +0000"  >&lt;p&gt;Even in core it will be a separate class, because it makes tokenStream() and reusableTokenStream() final, so users want to create an old style Analyzer  cannot do this. So we need a good name even for core.&lt;/p&gt;</comment>
                    <comment id="12774032" author="simonw" created="Thu, 5 Nov 2009 18:57:49 +0000"  >&lt;p&gt;I would be happy to get a better name for it - any suggestions - I&apos;m having a hard time to find one.&lt;/p&gt;

&lt;p&gt;its your turn uwe &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12774166" author="simonw" created="Fri, 6 Nov 2009 01:08:34 +0000"  >&lt;p&gt;I externalized the stopword related code into another base analyzer and named the analyzer AbstractAnalyzer and StopawareAnalyzer.&lt;/p&gt;
</comment>
                    <comment id="12774816" author="rcmuir" created="Sun, 8 Nov 2009 20:13:39 +0000"  >&lt;p&gt;Simon, i started looking at this, the testStemExclusionTable( for BrazilianAnalyzer is actually not related to stopwords and should not be changed.&lt;/p&gt;

&lt;p&gt;BrazilianAnalyzer has a .setStemExclusionTable() method that allows you to supply a set of words that should not be stemmed. &lt;/p&gt;

&lt;p&gt;This test is to ensure  that if you change the stem exclusion table with this method, that reusableTokenStream will force the creation of a new BrazilianStemFilter with this modified exclusion table so that it will take effect immediately, the way it did with .tokenStream() before this analyzer supported reusableTokenStream()&lt;/p&gt;

&lt;p&gt;&amp;lt;edit, addition&amp;gt;&lt;br/&gt;
also, i think this setStemExclusionTable stuff is really unrelated to your patch, but a reuse challenge in at least this analyzer. one way to solve it would be to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;add .setStemExclusionTable to BrazilianStemFilter so it can be changed without creating a new instance.&lt;/li&gt;
	&lt;li&gt;in Brazilian Analyzer&apos;s createComponents(), cache the BrazilianStemFilter and change .setStemExclusionTable() to pass along the new value to that.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12774940" author="simonw" created="Mon, 9 Nov 2009 11:17:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;the testStemExclusionTable( for BrazilianAnalyzer is actually not related to stopwords and should not be changed. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree, I missed to extend the testcase instead I changed it to test the constructor only. I will extend it instead.&lt;br/&gt;
This testcase is actually a duplicate of testExclusionTableReuse(), it should test tokenStream instead of reusableTokenStream() - will fix this too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This test is to ensure that if you change the stem exclusion table with this method, that reusableTokenStream will force the creation of a new BrazilianStemFilter with this modified exclusion table so that it will take effect immediately, the way it did with .tokenStream() before this analyzer supported reusableTokenStream()&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;that is actually what  testExclusionTableReuse() does.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;also, i think this setStemExclusionTable stuff is really unrelated to your patch, but a reuse challenge in at least this analyzer. one way to solve it would be to...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with your first point that this is kind of unrelated. I guess we should to that in a different issue while I think it is not that much of a deal as it does not change any functionality though.&lt;br/&gt;
I disagree with the reuse challenge, in my opinion analyzers should be immutable thats why I deprecated those methods and added the set to the constructor. The problem with those setters is that you have to be in the same thread to change your set as this will only invalidate the cached version of a token stream hold in a ThreadLocal. The implementation is ambiguous and should go away. The analyzer itself can be shared but the behaviour is kind of unpredictable if you reset the set. If there is an instance of this analyzer around and you call the setter you would expect the analyzer to use the set from the very moment on you call the setter which is not always true. &lt;/p&gt;



</comment>
                    <comment id="12774941" author="simonw" created="Mon, 9 Nov 2009 11:19:02 +0000"  >&lt;p&gt;Updated patch to current trunk (the massive patch with @Override broke the patch)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Moved AbstractAnalyzer to core&lt;/li&gt;
	&lt;li&gt;updated final Analyzers in core to use the AbstractAnalyzer&lt;/li&gt;
	&lt;li&gt;fixed TestBrazilianStemmer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12775011" author="rcmuir" created="Mon, 9 Nov 2009 16:12:39 +0000"  >&lt;p&gt;simon, good solution. I agree we should deprecate these analyzer &apos;setter&apos; methods, which just make things complicated for no good reason.&lt;/p&gt;

&lt;p&gt;i wonder if we should consider a different name for this AbstractAnalyzer, since it exists to support/encourage tokenstream reuse. I think when Shai Erera brought the idea up before he proposed ReusableAnalyzer or something like that?&lt;/p&gt;</comment>
                    <comment id="12775014" author="simonw" created="Mon, 9 Nov 2009 16:17:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;i wonder if we should consider a different name for this AbstractAnalyzer, since it exists to support/encourage tokenstream reuse. I think when Shai Erera brought the idea up before he proposed ReusableAnalyzer or something like that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree that this is not a very good name as we all discussed during apacheCon. With ReusableAnalyzer I would guess people would expect this analyzer to be reusable which isn&apos;t the case or rather is not what this is analyzer is doing. What if we call it ComponentAnalyzer or NewStyleAnalyzer or SmartAnalyzer (ok just kidding)&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12775020" author="simonw" created="Mon, 9 Nov 2009 16:34:49 +0000"  >&lt;p&gt;Pushed this to 3.1.&lt;br/&gt;
We might want to change existing analyzers in core to use the new analyzer too and make then final. So we are better off with pushing it to 3.1&lt;/p&gt;</comment>
                    <comment id="12778363" author="rcmuir" created="Mon, 16 Nov 2009 14:48:15 +0000"  >&lt;p&gt;Simon, here&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;source.reset(reader);&lt;br/&gt;
     if(sink != source)&lt;br/&gt;
       sink.reset(); // only reset if the sink reference is different from source&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;we had a discussion on the mailing list about this: &lt;a href=&quot;http://www.lucidimagination.com/search/document/cd8a94ebc8a4ea99/bug_in_standardanalyzer_stopanalyzer&quot; class=&quot;external-link&quot;&gt;http://www.lucidimagination.com/search/document/cd8a94ebc8a4ea99/bug_in_standardanalyzer_stopanalyzer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think we should consider removing the if, and unconditionally call sink.reset(). &lt;br/&gt;
A bad consumer might not follow the rules, although it says in TokenStream javadoc that consumers should call reset().. &lt;/p&gt;</comment>
                    <comment id="12781864" author="simonw" created="Tue, 24 Nov 2009 11:10:08 +0000"  >&lt;p&gt;Updated the patch to the current trunk.&lt;br/&gt;
I have not removed all the deprecated methods in contrib/analyzers yet - we should open another issue for that IMO.&lt;br/&gt;
Yet this patch still brakes back compatibility as some of the none final contrib analyzers extend StopawareAnalyzer with makes the old tokenstream / reusableTokenstream methods final. IMO this should not block this issues for the following reasons:&lt;br/&gt;
1. its in contrib - different story for core&lt;br/&gt;
2. it is super easy to port them&lt;br/&gt;
3. it make the API cleaner and has less code&lt;br/&gt;
4. those analyzers might have to change anyway due to the deprecated methods&lt;/p&gt;


&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12781867" author="simonw" created="Tue, 24 Nov 2009 11:14:43 +0000"  >&lt;p&gt;set svn EOF property to native - missed that in the last patch&lt;/p&gt;</comment>
                    <comment id="12781870" author="thetaphi" created="Tue, 24 Nov 2009 11:19:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;set svn EOF property to native - missed that in the last patch &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can cofigure your SVN client to do it automatically and also add the $ID$ props.&lt;/p&gt;</comment>
                    <comment id="12781877" author="rcmuir" created="Tue, 24 Nov 2009 11:45:03 +0000"  >&lt;p&gt;Simon in my opinion it is ok, about making tokenstream/reusablets final for those non-final contrib analyzers.&lt;/p&gt;

&lt;p&gt;i think you should make those non-final analyzers final, too. &lt;/p&gt;

&lt;p&gt;then we can get rid of complexity for sure.&lt;/p&gt;</comment>
                    <comment id="12781884" author="simonw" created="Tue, 24 Nov 2009 11:54:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;i think you should make those non-final analyzers final, too. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I think the analyzers should always be final. Maybe there are special cases but for the most of them nobody should subclass.&lt;br/&gt;
Same amount of work  to make your own anyway.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12782472" author="simonw" created="Wed, 25 Nov 2009 16:00:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;i think you should make those non-final analyzers final, too. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would prefer to open a sep. issue for making those final &amp;amp; remove deprecated methods, make public String[] private etc.&lt;/p&gt;

&lt;p&gt;Once this in in we can refactor all other analyzers and fix them case by case.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12783737" author="dmsmith" created="Mon, 30 Nov 2009 16:48:41 +0000"  >&lt;p&gt;I was trying to lurk, but I&apos;m not able to apply the latest patch against trunk. I&apos;m not sure if its me (using Eclipse) or the patch.&lt;/p&gt;</comment>
                    <comment id="12783741" author="simonw" created="Mon, 30 Nov 2009 17:00:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;I was trying to lurk, but I&apos;m not able to apply the latest patch against trunk. I&apos;m not sure if its me (using Eclipse) or the patch. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;its most likely the patch. There is so much going on around the analyzers right now. We try to get &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2094&quot; title=&quot;Prepare CharArraySet for Unicode 4.0&quot;&gt;&lt;del&gt;LUCENE-2094&lt;/del&gt;&lt;/a&gt; in and get this ready once it is in. I will update this patch soon.&lt;/p&gt;</comment>
                    <comment id="12784226" author="simonw" created="Tue, 1 Dec 2009 13:28:06 +0000"  >&lt;p&gt;I updated this patch to the latest trunk. The patch doesn&apos;t remove any deprecated methods from contrib/analysis neither does it mark the other Analyzers final. I think we should do all that in a different issue. I haven&apos;t added a note to contrib/CHANGES.TXT yet while it already breaks bw. compat for all none-final analyzers subclassing AbstractAnalyzer / StopawareAnalyzer. &lt;br/&gt;
Once we have a consensus on this patch I will add it.&lt;/p&gt;</comment>
                    <comment id="12784303" author="dmsmith" created="Tue, 1 Dec 2009 17:40:08 +0000"  >&lt;p&gt;Patch looks good. I like how this simplifies the classes.&lt;/p&gt;

&lt;p&gt;Some comments based on my use case, which allows a user creating an index to decide whether to use Lucene&apos;s default stop words or no stop words at all. No stop words is the default. (I&apos;m also allowing stemming to be optional, but on by default.) These two require me to duplicate the each contrib Analyzers but reuse the parts. (If you&apos;re interested, each Lucene index is a whole book, where each paragraph is a document. Every word is potentially meaningful so stop words are not used by default.)&lt;/p&gt;

&lt;p&gt;Regarding stop words:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Some of the analyzers allow for null to be specified for the stop word list. Others require an empty set/file/reader. Those deriving from StopawareAnalyzer allow null. I&apos;d like to see the ability to use null to follow through the rest of the analyzers.&lt;br/&gt;
*Some of the analyzers are cluttered with stopword list processing. Maybe WordListLoader could be extended to handle the other ways that contrib/analyzers store their lists? Specifically, how about moving StopawareAnalyzer.loadStopwordSet(...)? It seems to be a better place.&lt;/li&gt;
	&lt;li&gt;How about splitting out the stop words to their own class? (I&apos;m digging the word lists out of the analyzers and the lack of uniformity is a pain. Having them standalone would be useful.)&lt;/li&gt;
	&lt;li&gt;If not how about adding public static Set&amp;lt;?&amp;gt; getDefaultStopSet() to StopawareAnalyzer?&lt;/li&gt;
	&lt;li&gt;Shouldn&apos;t StopawareAnalyzer be in core? and used in StopAnalyzer? Could it be merged into StopAnalyzer? Other than the loadStopwordSet, it really only adds a method to get the current stopword list.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Regarding 3.1:&lt;br/&gt;
There are some TODOs in the code to make this or that private or final. If this is going to wait for 3.1 shouldn&apos;t they change?&lt;/p&gt;

&lt;p&gt;On a separate note:&lt;br/&gt;
In WordListLoader the return types are not Set or Map, but HashSet and HashMap. What&apos;s up with that? Should anyone care what the particular implementation is?&lt;/p&gt;</comment>
                    <comment id="12784305" author="rcmuir" created="Tue, 1 Dec 2009 17:52:06 +0000"  >&lt;p&gt;Hi DM, in response to your comments, I would prefer all stoplists to actually be in the resources/* folder as text files.&lt;/p&gt;

&lt;p&gt;The reasoning is to encourage use of the different parts of the analyzer, i.e. a Solr user can specify to use a russian stopword list embedded in a russian analyzer,&lt;br/&gt;
without using the analyzer itself (maybe they want to use the stemmer but after WordDelimiterFilter and things like that).&lt;/p&gt;

&lt;p&gt;somewhat related: I also want to add the stoplists that the snowball project creates to the snowball package in contrib: see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2055&quot; title=&quot;Fix buggy stemmers and Remove duplicate analysis functionality&quot;&gt;&lt;del&gt;LUCENE-2055&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
This would allow us to remove duplicated functionality, analyzers we have coded in java in lucene that are essentially the same as what snowball does already.&lt;/p&gt;</comment>
                    <comment id="12784327" author="dmsmith" created="Tue, 1 Dec 2009 18:34:46 +0000"  >&lt;p&gt;Robert, I&apos;d like them to be in files as well. But when it really gets down to it, a uniform interface to the the default stop word list is what really matters to me.&lt;/p&gt;

&lt;p&gt;Like your use case, I don&apos;t see the provided analyzers as much more than a suggestion and default implementation. Currently and in this patch, I have to use them to get to the stop words.&lt;/p&gt;

&lt;p&gt;I&apos;m trying to figure out a way to specify a tokenizer/filter chain. (I&apos;ve been trying to figure it out for a while, but not with much effort or success). Something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
TokenStream construct(Version v, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fieldName, Reader r, StreamSpec ...) {
  source = first StreamSpec.create(v, fieldName, r);
  result = source;
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the remaining StreamSpec {
     result = streamSpec.create(v, fieldName, result);
  }
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The purpose of the StreamSpec is to allow a late binding of tokenizers/filters into a chain.&lt;/p&gt;

&lt;p&gt;The other part would be to generate a Manifest with version info for Lucene, Java and each component that could be stored in (or with) the index. That way one could compare the manifest to see if the index needs to be rebuilt. This manifest could also be used to reconstruct the TokenStream.&lt;/p&gt;</comment>
                    <comment id="12784328" author="thetaphi" created="Tue, 1 Dec 2009 18:35:37 +0000"  >&lt;blockquote&gt;
&lt;p&gt;On a separate note:&lt;br/&gt;
In WordListLoader the return types are not Set or Map, but HashSet and HashMap. What&apos;s up with that? Should anyone care what the particular implementation is?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s historical. For 2.9 it was not possible to provide the method covariant with different return type for BW compatibility, so the old ones could not be deprecated. With 3.0 they stayed alive and now there they are.&lt;/p&gt;

&lt;p&gt;With Java 1.5, there should be the possibility to provide an covariant overload and deprecate the specializations. I will try out in a separate issue!&lt;/p&gt;

&lt;p&gt;Ideally he new methods should return Set&amp;lt;?&amp;gt; but implement this by a CharArraySet (which would be possible then). At the moment the sets are always copied to CharArraySet in each Analyzer.&lt;/p&gt;</comment>
                    <comment id="12784333" author="rcmuir" created="Tue, 1 Dec 2009 18:44:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Robert, I&apos;d like them to be in files as well. But when it really gets down to it, a uniform interface to the the default stop word list is what really matters to me. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DM, I think we can have both? A method to get the default stopword list, but then they also happen to be in text files too?&lt;/p&gt;</comment>
                    <comment id="12784338" author="dmsmith" created="Tue, 1 Dec 2009 19:02:31 +0000"  >&lt;p&gt;Robert:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;DM, I think we can have both? A method to get the default stopword list, but then they also happen to be in text files too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;Uwe:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Ideally he new methods should return Set&amp;lt;?&amp;gt; but implement this by a CharArraySet (which would be possible then). At the moment the sets are always copied to CharArraySet in each Analyzer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. That could also simplify some of what Simon is doing. However, the one distinctive of CharArraySet is that it can take input that is not lowercase and ignore the casing. This is what Simon&apos;s StopawareAnalyzer.loadStopwordSet(...) allows.&lt;/p&gt;

&lt;p&gt;BTW, in some of the analyzers sometimes it is a CharArraySet and other times it is not (when it is via this class). This would make the treatment uniform.&lt;/p&gt;</comment>
                    <comment id="12784432" author="simonw" created="Tue, 1 Dec 2009 21:11:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Some of the analyzers allow for null to be specified for the stop word list. Others require an empty set/file/reader. Those deriving from StopawareAnalyzer allow null.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is true - Stopawareanalyzer uses an empty set if you pass null. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;d like to see the ability to use null to follow through the rest of the analyzers.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;*Some of the analyzers are cluttered with stopword list processing.&lt;br/&gt;
The analyzers in this patch are rather a PoC than a complete list. Eventually we will have all analyzers with stopwords to extend StopawareAnalyzer that is also the reason why we have this class. This and some other issues aim to eventually have a consistent way of processing all this stuff related to stopwords. We will also remove all the setters and have Set&amp;lt;?&amp;gt; only ctors for consistency.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If not how about adding public static Set&amp;lt;?&amp;gt; getDefaultStopSet() to StopawareAnalyzer?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;the problem is that it is static and it should be static. Thats why we define it in each analyzer that uses stopwords. I would like to have it generalized but this seems to be the ideal solution. We could have something like a getDefaultStopSet(Class&amp;lt;? extends StopawareAnalyzer&amp;gt;) but I like the expressiveness of getDefaultStopSet() way better though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How about splitting out the stop words to their own class? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What do you mean by that?  can you elaborate?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There are some TODOs in the code to make this or that private or final. If this is going to wait for 3.1 shouldn&apos;t they change?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The should actually go away but I kept them in there because they are somewhat unrelated to this particular issue. Once this is in we will work on removing the deprecated stuff and make analyzers final (at least in contrib).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In WordListLoader the return types are not Set or Map, but HashSet and HashMap. What&apos;s up with that? Should anyone care what the particular implementation is?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;that is one thing I hate about WordListLoader. +1 towards Uwe working on them!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m trying to figure out a way to specify a tokenizer/filter chain. (I&apos;ve been trying to figure it out for a while, but not with much effort or success).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This has been discussed already and we haven&apos;t had much of a success though. I can not remember the issue (robert can you remember the factory issue?) but it was basically based on a factory pattern. This would also be my approach to it. That way we could get rid of almost every analyzer. I use such a pattern myself which works quite well.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DM, I think we can have both? A method to get the default stopword list, but then they also happen to be in text files too?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 for having those words in files. Nevertheless we will have a default stopword list though.&lt;/p&gt;</comment>
                    <comment id="12784434" author="rcmuir" created="Tue, 1 Dec 2009 21:15:35 +0000"  >&lt;blockquote&gt;
&lt;p&gt;This has been discussed already and we haven&apos;t had much of a success though. I can not remember the issue (robert can you remember the factory issue?) but it was basically based on a factory pattern. This would also be my approach to it. That way we could get rid of almost every analyzer. I use such a pattern myself which works quite well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the only issue is that if I were to design such a thing, it would look just like how the analysis factories work in Solr... (already a solved problem)... maybe I am missing something?&lt;/p&gt;</comment>
                    <comment id="12784440" author="simonw" created="Tue, 1 Dec 2009 21:25:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think the only issue is that if I were to design such a thing, it would look just like how the analysis factories work in Solr... (already a solved problem)... maybe I am missing something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no you don&apos;t. I just did that when there where no solr around. works pretty much the same way though. &lt;/p&gt;</comment>
                    <comment id="12784506" author="dmsmith" created="Tue, 1 Dec 2009 23:02:50 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;How about splitting out the stop words to their own class? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What do you mean by that? can you elaborate?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are several parts of this.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The analyzer needs to allow for user supplied stop words, possibly null. This or the default list needs to be supplied to the StopFilter.&lt;/li&gt;
	&lt;li&gt;The stop word list needs to be loaded into a set. Currently it might be a Reader, a File or a String[] array.&lt;/li&gt;
	&lt;li&gt;The WordListLoader is a helper class to construct the set from a File or Reader. StopawareAnalyzer has another helper for reading from file for fa and ar. Otherwise there is duplicated code to stuff the array into a CharArraySet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Most of the analyzers with stop words allow override with any of these and sometimes throw something else in the mix (such as non-utf8 encoded files).&lt;/p&gt;

&lt;p&gt;The code to handle these cases is somewhat repetitious.&lt;/p&gt;

&lt;p&gt;My thought is for a class, say StopWords, that knows how to read stopwords.txt as a resource loaded by a specified class loader. Something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class StopWords {

  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;       DEFAULT_STOPFILE = &lt;span class=&quot;code-quote&quot;&gt;&quot;stopfile.txt&quot;&lt;/span&gt;;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;       DEFAULT_COMMENT  = &lt;span class=&quot;code-quote&quot;&gt;&quot;#&quot;&lt;/span&gt;;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Version      matchVersion;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt;                CharSetArray defaultStopWords;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; StopWords(Version matchVersion, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; stopFile, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; comment, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; ignoreCase) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.matchVersion = matchVersion;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.ignoreCase   = ignoreCase;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.stopFile     = stopFile != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? stopFile : DEFAULT_STOPFILE;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.comment      = comment  != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? comment  : DEFAULT_STOPFILE;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; Set&amp;lt;?&amp;gt; getDefaultStopWords() {
    &lt;span class=&quot;code-comment&quot;&gt;// lazy loading
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (defaultStopWords == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      defaultStopWords = load();
    }

    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; defaultStopWords;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Set&amp;lt;?&amp;gt; load() {
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Reader reader = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.class.getResourceAsStream(stopFile), &lt;span class=&quot;code-quote&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;));
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; CharSetArray result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CharSetArray(matchVersion, 0, ignoreCase);
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; word = reader.readLine(); word != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;; word = reader.readLine()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!word.startsWith(comment)) {
          result.add(word.trim());
        }
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; CharSetArray.unmodifiableSet(result);
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      reader.close();
    }
  }

}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I&apos;m pretty sure that this.class resolves to the class of the actual object and not the class in which it is called (as long as it is not called within the ctor).&lt;/p&gt;

&lt;p&gt;Then in o.a.l.analysis.ar have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ArabicStopWords &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; StopWords {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ArabicStopWords(Version matchVersion) {
      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(matchVersion, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the arguments to super depend on the nature of the provided stop word list.&lt;/p&gt;

&lt;p&gt;Additional code could be added to StopWords to handle resource as a Reader and as String[], but if we follow Robert&apos;s suggestion to externalize the list in a file it is not needed.&lt;/p&gt;</comment>
                    <comment id="12784733" author="simonw" created="Wed, 2 Dec 2009 09:33:09 +0000"  >&lt;p&gt;DM, thanks for the extensive example. But I do not see the benefit compared to the current solution. To access a default stopword set you have to create an instance of a specific analyzer which is IMO not a very natural way. If you make it available statically in the analyzer it is simply equivalent to the StopawareAnalyzer solution that provides the loading code. We will always have to add a public static Set&amp;lt;?&amp;gt; getDefaultStopwords() method to each analyzer and this analyzer has to load the stopwords somehow. &lt;/p&gt;

&lt;p&gt;I personally prefer the holder pattern as it is guaranteed to be lazy by the JVM. It is a simple declarative solution which requires developers to be consistent but this consistency is already required with the static getDefaultStopwords() method. - not really a win. &lt;br/&gt;
Please correct me if I miss something. &lt;/p&gt;</comment>
                    <comment id="12784812" author="dmsmith" created="Wed, 2 Dec 2009 13:21:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;But I do not see the benefit compared to the current solution.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In an earlier post we discussed that it&apos;d be possible, like SOLR, to eliminate analyzers for a factory pattern. The benefit of this variation (you are right, it is equivalent) is that it moves in that direction.&lt;/p&gt;

&lt;p&gt;.bq  To access a default stopword set you have to create an instance of a specific analyzer which is IMO not a very natural way.&lt;br/&gt;
It could be made into a singleton (which would have been better in the first place), or static or both. I just tossed together one example, though extensive, to answer. Also, the matchVersion is not needed in the derived classes. So here is an alternate:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ArabicStopWords &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; StopWords {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; StopWords instance = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArabicStopWords();
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ArabicStopWords() {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(Version.LUCENE_30, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Set&amp;lt;?&amp;gt; getDefaultStopWords() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; instance.getDefaultStopWords();
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;I personally prefer the holder pattern as it is guaranteed to be lazy by the JVM.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m not sure about this. I think this is a partially true statement. I know I could look it up to be sure. I thought that the JLS required &lt;b&gt;all&lt;/b&gt; static initializers to be run at first access to the class. So if one does not want the list of default stopwords, but wants something else in the class or is supplying an alternate set of stopwords, the default stopwords are initialized anyway.&lt;/p&gt;

&lt;p&gt;So the other benefit is that it is fully lazy. Though this is a small benefit.&lt;/p&gt;

&lt;p&gt;On another note, still regarding code placement:&lt;br/&gt;
StopFilter has a bunch of makeStopSet methods. WordListLoader has a few more. StopawareAnalyzer has another. My example has yet another. I think this creates confusion for end users and casual contributors as it is not clear how to proceed without looking at the code for examples. I&apos;d like to see some kind of clarity/consolidation.&lt;/p&gt;


</comment>
                    <comment id="12785923" author="simonw" created="Fri, 4 Dec 2009 13:37:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;Im not sure about this. I think this is a partially true statement. I know I could look it up to be sure. I thought that the JLS required all static initializers to be run at first access to the class. So if one does not want the list of default stopwords, but wants something else in the class or is supplying an alternate set of stopwords, the default stopwords are initialized anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DM, What you say its true but the holder is a static inner class and its static initializers run on the first access. That is right when it needs to be as it is only accessed once you the default stopwords. It does not require any synchronization as this is guaranteed by the JVM. What I like about it is that you can&apos;t introduce any synch. problems - simple and declarative.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So the other benefit is that it is fully lazy. Though this is a small benefit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;see above&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It could be made into a singleton (which would have been better in the first place), or static or both. I just tossed together one example, though extensive, to answer. Also, the matchVersion is not needed in the derived classes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It already is a singleton. the holder makes it a lazy loaded static final singleton. MatchVersion will only be needed in derived classes if the tokenStreamComponents &lt;/p&gt;


&lt;p&gt;I personally don&apos;t like the various different ways you can load stopwords either, my approach is a different one. Stopwords are mainly used in analyzers / filters, we have a standard way to load them in StopawareAnalyzer if you implement your analyzer. If you use the analyzer you should use WordlistLoader. If we fix WordlistLoader to return Set&amp;lt;?&amp;gt; we are good to go with a single way for the user and a standard way for makeing a stopaware analyzer. If you wrap this up in a Class StopWords then people do not know what to do with it once they wanna load a Stem-Exclusion Table.&lt;br/&gt;
Maybe I miss one important thing but I do not see the benefit of wrapping a Set&amp;lt;?&amp;gt; into another class. - If so please explain. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                    <comment id="12789409" author="simonw" created="Fri, 11 Dec 2009 17:32:11 +0000"  >&lt;p&gt;Updated the patch to the latest trunk.&lt;/p&gt;</comment>
                    <comment id="12791106" author="simonw" created="Wed, 16 Dec 2009 01:02:40 +0000"  >&lt;p&gt;I renamed AbstractAnalyzer to ReusableAnalyzerBase which reflects pretty much what it does. Yet the Base postfix is pretty common throughout the JDK similarly to the Abstract prefix.&lt;br/&gt;
I added little more JavaDoc which brings some clarification when to subclass ReusableAnalyzerBase instead of Analyzer.&lt;/p&gt;

&lt;p&gt;I guess this is ready to go in though.&lt;/p&gt;</comment>
                    <comment id="12791356" author="rcmuir" created="Wed, 16 Dec 2009 13:06:24 +0000"  >&lt;p&gt;Simon, the patch looks good to me.&lt;/p&gt;

&lt;p&gt;I added a few things:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;removed the duplication in analyzers/bg&lt;/li&gt;
	&lt;li&gt;fixed some javadoc buglets&lt;/li&gt;
	&lt;li&gt;added CHANGES&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If no one objects, I will commit in a few days.&lt;/p&gt;</comment>
                    <comment id="12791701" author="simonw" created="Thu, 17 Dec 2009 00:42:57 +0000"  >&lt;p&gt;robert, should we hold on one more time and move StopawareAnalyzer into core? As you suggested, StopwordAnalyzerBase would be a better name for it and way more consistent. That way we could implement StopAnalyzer with it too.&lt;/p&gt;</comment>
                    <comment id="12791766" author="rcmuir" created="Thu, 17 Dec 2009 03:36:20 +0000"  >&lt;p&gt;ok, lets wait and discuss this issue instead.&lt;/p&gt;

&lt;p&gt;i don&apos;t like how i can&apos;t use it for smartcn, etc. but is this just because of our build system/analyzers organization? or can we refactor things out of stopanalyzer, too?&lt;/p&gt;</comment>
                    <comment id="12791896" author="simonw" created="Thu, 17 Dec 2009 12:19:58 +0000"  >&lt;p&gt;robert, I updated your patch and moved stopawareAnalzyer to StopwordAnalyzerBase in to core.&lt;br/&gt;
I also updated the CHANGES.TXT. THis will enable use to use it in smartcn too. StopAnalzyer now directly subclasses StopwordAnalyzerBase too.&lt;br/&gt;
Seems to be way more consistent though.&lt;/p&gt;</comment>
                    <comment id="12792550" author="rcmuir" created="Fri, 18 Dec 2009 18:00:22 +0000"  >&lt;p&gt;Simon, thanks for the update, I like it.&lt;/p&gt;

&lt;p&gt;I am going on vacation in a few weeks... so I can say, I will commit next year if no one objects &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12794396" author="simonw" created="Thu, 24 Dec 2009 11:58:44 +0000"  >&lt;p&gt;With &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2169&quot; title=&quot;Speedup of CharArraySet#copy if a CharArraySet instance is passed to copy.&quot;&gt;&lt;del&gt;LUCENE-2169&lt;/del&gt;&lt;/a&gt; this patch becomes even more valuable. The creation of Analyzers extending StopwordAnalyzerBase will be way faster than in previous versions, with this in mind we should add a pointer to StopwordAnalyzerBase that recommends using charArraySet for stopwords and in the next step we should get WordlistLoader refactored and deprecate all public HashSet * methods in favour of Set&amp;lt;?&amp;gt; with CharArraySet as an internal implementation. Unifiying the way to create / load stopwords outside of a StopwordAnalyzerBase subclass goes the same way I would guess. We need one way to do it though. I will create correspondent issues within the next days.&lt;/p&gt;</comment>
                    <comment id="12795860" author="rcmuir" created="Sat, 2 Jan 2010 13:08:25 +0000"  >&lt;p&gt;I am back on a real computer and (as mentioned december 18th) I would like to commit this soon.&lt;/p&gt;

&lt;p&gt;Simon, I only have one question: do you think it would be possible in the future to add an additional feature (under another issue) whereas:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;analyzers extending the StopwordAnalyzerBase can have multiple stoplists depending upon Version&lt;/li&gt;
	&lt;li&gt;the StopwordAnalyzerBase.getStopwordSet requires a Version argument to match this behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;My reasoning is that we would then be able to improve stopword lists without breaking backwards compatibility.&lt;br/&gt;
I am aware many people feel stopword lists are not that important but for quite a few non-english languages they are very important, no matter how advanced the scoring mechanism is (see persian for a great example of this). &lt;br/&gt;
I also think in the future perhaps we would consider merging in the commongrams functionality that is currently duplicated in nutch and solr so that these stoplists can be ab(used) with that method as well, so I think this kind of thing might become more important in the future.&lt;/p&gt;

&lt;p&gt;I realize this is a new feature so it shouldnt be under this issue, but if it means this design isn&apos;t viable let me know that. otherwise i would like to commit this one first to make progress. i broke the backwards compat fixing the arabic stopwords before and I would like to not do this sort of thing again.&lt;/p&gt;</comment>
                    <comment id="12795882" author="simonw" created="Sat, 2 Jan 2010 18:20:49 +0000"  >&lt;p&gt;Robert, I see what you are alluding to. Yet, I agree this is a new issue and should be handled separately. The issues would require some changes in the api I guess or rather additions. Yet, we should commit this regardless! I would be happy to make additions to StopwordAnalyzerBase on another issue as long as we haven&apos;t released this code we can still change the API while I don&apos;t think we have to. #getStopwordSet will always return the set in use while setting the stopwordset depending on the version is internal to the class. &lt;/p&gt;
</comment>
                    <comment id="12795885" author="rcmuir" created="Sat, 2 Jan 2010 18:26:13 +0000"  >&lt;p&gt;Ah I see, you are right. This getStopWordSet() is not static, so it is correct with the current way we are doing things in lucene. in the future if this stopwordset was created depending upon version, this will still work.&lt;/p&gt;

&lt;p&gt;Yeah this is something completely new I just wanted to verify with you that its potentially doable...&lt;/p&gt;</comment>
                    <comment id="12795918" author="rcmuir" created="Sat, 2 Jan 2010 20:48:31 +0000"  >&lt;p&gt;I am going to look at this one last time and commit shortly (finally), unless anyone speaks up.&lt;/p&gt;</comment>
                    <comment id="12795958" author="rcmuir" created="Sun, 3 Jan 2010 08:50:42 +0000"  >&lt;p&gt;Committed revision 895339.&lt;/p&gt;

&lt;p&gt;Thanks for all your hard work cleaning this up Simon.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12437714">LUCENE-1967</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12440343">LUCENE-2051</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12442093">LUCENE-2100</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12425952" name="LUCENE-2034,patch" size="82824" author="simonw" created="Tue, 24 Nov 2009 11:14:43 +0000" />
                    <attachment id="12425951" name="LUCENE-2034,patch" size="82066" author="simonw" created="Tue, 24 Nov 2009 11:10:08 +0000" />
                    <attachment id="12428286" name="LUCENE-2034.patch" size="88786" author="simonw" created="Thu, 17 Dec 2009 12:19:58 +0000" />
                    <attachment id="12428165" name="LUCENE-2034.patch" size="88535" author="rcmuir" created="Wed, 16 Dec 2009 13:06:24 +0000" />
                    <attachment id="12428112" name="LUCENE-2034.patch" size="78399" author="simonw" created="Wed, 16 Dec 2009 01:02:40 +0000" />
                    <attachment id="12427741" name="LUCENE-2034.patch" size="78357" author="simonw" created="Fri, 11 Dec 2009 17:32:10 +0000" />
                    <attachment id="12426536" name="LUCENE-2034.patch" size="81519" author="simonw" created="Tue, 1 Dec 2009 13:28:06 +0000" />
                    <attachment id="12424175" name="LUCENE-2034.patch" size="65501" author="simonw" created="Fri, 6 Nov 2009 01:08:34 +0000" />
                    <attachment id="12424142" name="LUCENE-2034.patch" size="63336" author="simonw" created="Thu, 5 Nov 2009 17:48:10 +0000" />
                    <attachment id="12424110" name="LUCENE-2034.patch" size="57435" author="simonw" created="Thu, 5 Nov 2009 07:29:04 +0000" />
                    <attachment id="12424081" name="LUCENE-2034.patch" size="39615" author="simonw" created="Thu, 5 Nov 2009 00:10:42 +0000" />
                    <attachment id="12424360" name="LUCENE-2034.txt" size="71663" author="simonw" created="Mon, 9 Nov 2009 11:19:02 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 5 Nov 2009 18:03:07 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11743</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25691</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>