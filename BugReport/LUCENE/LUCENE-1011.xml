<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:36 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1011/LUCENE-1011.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1011] Two or more writers over NFS can cause index corruption</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1011</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;When an index is used over NFS, and, more than one machine can be a&lt;br/&gt;
writer such that they swap roles quickly, it&apos;s possible for the index&lt;br/&gt;
to become corrupt if the NFS client directory cache is stale.&lt;/p&gt;

&lt;p&gt;Not all NFS clients will show this.  Very recent versions of Linux&apos;s&lt;br/&gt;
NFS client do not seem to show the issue, yet, slightly older ones do,&lt;br/&gt;
and the latest Mac OS X one does as well.&lt;/p&gt;

&lt;p&gt;I&apos;ve been working with Patrick Kimber, who provided a standalone test&lt;br/&gt;
showing the problem (thank you Patrick!).  This came out of this&lt;br/&gt;
thread:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://www.gossamer-threads.com/lists/engine?do=post_view_flat;post=50680;page=1;sb=post_latest_reply;so=ASC;mh=25;list=lucene&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/engine?do=post_view_flat;post=50680;page=1;sb=post_latest_reply;so=ASC;mh=25;list=lucene&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the first issue in that discussion has been resolved&lt;br/&gt;
(&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-948&quot; title=&quot;Writers on two machines over NFS can hit FNFE due to stale NFS client caching&quot;&gt;&lt;del&gt;LUCENE-948&lt;/del&gt;&lt;/a&gt;).  This is a new issue.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12379349">LUCENE-1011</key>
            <summary>Two or more writers over NFS can cause index corruption</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sat, 29 Sep 2007 22:35:49 +0100</created>
                <updated>Fri, 25 Jan 2008 03:24:05 +0000</updated>
                    <resolved>Wed, 3 Oct 2007 16:25:55 +0100</resolved>
                            <version>1.9</version>
                <version>2.0.0</version>
                <version>2.1</version>
                <version>2.2</version>
                <version>2.3</version>
                <version>2.4</version>
                <version>2.9</version>
                                <fixVersion>2.3</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12531306" author="mikemccand" created="Sun, 30 Sep 2007 12:08:30 +0100"  >&lt;p&gt;Attaching patch.  All tests pass and I think this is ready for&lt;br/&gt;
commit.  I&apos;ll wait a few days.&lt;/p&gt;

&lt;p&gt;What&apos;s always tricky about debugging this kind of issue is figuring&lt;br/&gt;
out if it&apos;s a locking problem (two writers are incorrectly getting the&lt;br/&gt;
write lock at the same time), or if it&apos;s a IO &quot;stale cache&quot; issue.&lt;/p&gt;

&lt;p&gt;To help with this, I created some basic instrumentation to &quot;verify&quot;&lt;br/&gt;
that locking is functioning correctly:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;A new LockFactory called VerifyingLockFactory, which just wraps a&lt;br/&gt;
    pre-existing LockFactory and every time a lock is obtained or&lt;br/&gt;
    released, contacts the LockVerifyServer (over a socket) to verify&lt;br/&gt;
    the lock is not held by another process.  If it is held by another&lt;br/&gt;
    process, meaning the LockFactory is broken, an exception is&lt;br/&gt;
    thrown.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;LockVerifyServer.java (main) which just runs forever, accepting &amp;amp;&lt;br/&gt;
    verifying these socket connections.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;A standalone (main) LockStressTest.java, whose sole purpose is to&lt;br/&gt;
    obtain/release a specified lock file, very frequently.  You run&lt;br/&gt;
    this on multiple machines, pointing to the same lock file, to&lt;br/&gt;
    verify your LockFactory is working correctly.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Using these additions, one can stress test their locking in their&lt;br/&gt;
particular environment to determine whether their LockFactory is&lt;br/&gt;
working properly.&lt;/p&gt;

&lt;p&gt;I plan on committing these three source files so that others can&lt;br/&gt;
diagnose locking issues using the Lucene core jar.&lt;/p&gt;</comment>
                    <comment id="12531308" author="mikemccand" created="Sun, 30 Sep 2007 12:09:22 +0100"  >&lt;p&gt;Using the lock verifier above, I discovered something shocking (to&lt;br/&gt;
me): NativeFSLockFactory is in general NOT RELIABLE for locking over&lt;br/&gt;
NFS, while SimpleFSLockFactory is reliable modulo the &quot;fails to delete&lt;br/&gt;
on exit/crash&quot; minor issue.&lt;/p&gt;

&lt;p&gt;This is unexpected because the whole reason we originally created&lt;br/&gt;
NativeFSLockFactory was to improve locking over &quot;challenging&quot;&lt;br/&gt;
filesystems like NFS.  The spooky comment in Sun&apos;s javadocs on using&lt;br/&gt;
File.createNewFile for locking (which is what SimpleFSLockFactory&lt;br/&gt;
uses) drove this:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://java.sun.com/j2se/1.4.2/docs/api/java/io/File.html#createNewFile(&quot; class=&quot;external-link&quot;&gt;http://java.sun.com/j2se/1.4.2/docs/api/java/io/File.html#createNewFile(&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;But then I remembered Marvin&apos;s comment about this:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-710#action_12466911&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-710#action_12466911&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And on following that lead, indeed, that comment &quot;Note: this method&lt;br/&gt;
should not be used for file-locking, as the resulting protocol cannot&lt;br/&gt;
be made to work reliably&quot; is only referring to the fact that you&lt;br/&gt;
cannot reliably guarantee this lock file will be properly removed.&lt;/p&gt;

&lt;p&gt;In testing in my NFS area (mix of Linux &amp;amp; OS X), I see&lt;br/&gt;
NativeFSLockFactory sometimes (rarely) allowing a lock to be&lt;br/&gt;
double-acquired.  Whereas after stress testing SimpleFSLockFactory for&lt;br/&gt;
a looong time, it never allows that.&lt;/p&gt;

&lt;p&gt;So the NFS challenge/saga continues: now, you should in fact use&lt;br/&gt;
SimpleFSLockFactory, and work around the fact that you will sometimes&lt;br/&gt;
have to manually remove lock files (it is the lesser of evils).&lt;/p&gt;
</comment>
                    <comment id="12531309" author="mikemccand" created="Sun, 30 Sep 2007 12:09:50 +0100"  >&lt;p&gt;Once I got through the locking issue (switched Patrick&apos;s test to use&lt;br/&gt;
SimpleFSLockFactory), I could no longer reproduce his issue, but he&lt;br/&gt;
could in his environment.  So I worked out a simple change to how the&lt;br/&gt;
segments_N file is located: instead of first trying the directory&lt;br/&gt;
listing and then second falling back to reading segments.gen, always&lt;br/&gt;
try both and then use whichever generation is larger.  This way we can&lt;br/&gt;
tolerate a stale directory cache, or a stale file contents cache&lt;br/&gt;
(though not both at the same time).  In Patrick&apos;s testing this looks&lt;br/&gt;
to have resolved the issue.&lt;/p&gt;

&lt;p&gt;I also fixed IndexFileDeleter to try specifically loading the current&lt;br/&gt;
commit point if this point was not seen in the directory listing&lt;br/&gt;
(which would happen if directory listing cache was stale), and,&lt;br/&gt;
improved messaging in IndexWriter (when you call setInfoStream(...))&lt;br/&gt;
to print more details about the configuration of the writer, to aid in&lt;br/&gt;
future remote debugging.&lt;/p&gt;</comment>
                    <comment id="12531368" author="hossman" created="Sun, 30 Sep 2007 20:01:58 +0100"  >&lt;p&gt;: In testing in my NFS area (mix of Linux &amp;amp; OS X), I see&lt;br/&gt;
: NativeFSLockFactory sometimes (rarely) allowing a lock to be&lt;br/&gt;
: double-acquired.  Whereas after stress testing SimpleFSLockFactory for&lt;br/&gt;
: a looong time, it never allows that.&lt;br/&gt;
: &lt;br/&gt;
: So the NFS challenge/saga continues: now, you should in fact use&lt;br/&gt;
: SimpleFSLockFactory, and work around the fact that you will sometimes&lt;br/&gt;
: have to manually remove lock files (it is the lesser of evils).&lt;/p&gt;

&lt;p&gt;i&apos;m not an expert on file Locking (either in Lucene, or in the JVM, or any OSes) but i have to wonder if the problems you are seeing are inherent in the Java FileLock APIs, or if they only manifest in specific implementations (ie: certain JVM impls, certain filesystems, certain combinations of NFS client/server, etc...)&lt;/p&gt;

&lt;p&gt;if we can say &quot;NativeFSLockFactory uses the Java FileLock API to provide locking.  FileLock known to be buggy in the following situations: .... &quot; then we&apos;ve done all we can do, correct?&lt;/p&gt;</comment>
                    <comment id="12531428" author="mikemccand" created="Mon, 1 Oct 2007 08:40:51 +0100"  >&lt;p&gt;&amp;gt; i&apos;m not an expert on file Locking (either in Lucene, or in the JVM,&lt;br/&gt;
&amp;gt; or any OSes) but i have to wonder if the problems you are seeing are&lt;br/&gt;
&amp;gt; inherent in the Java FileLock APIs, or if they only manifest in&lt;br/&gt;
&amp;gt; specific implementations (ie: certain JVM impls, certain&lt;br/&gt;
&amp;gt; filesystems, certain combinations of NFS client/server, etc...)&lt;/p&gt;

&lt;p&gt;I&apos;m no expert either, and I continue to be rather shocked each time I&lt;br/&gt;
learn more!&lt;/p&gt;

&lt;p&gt;&amp;gt; if we can say &quot;NativeFSLockFactory uses the Java FileLock API to&lt;br/&gt;
&amp;gt; provide locking. FileLock known to be buggy in the following&lt;br/&gt;
&amp;gt; situations: .... &quot; then we&apos;ve done all we can do, correct?&lt;/p&gt;

&lt;p&gt;I agree, I think this is exactly what we should do.  I&apos;ll update the&lt;br/&gt;
javadoc for NativeFSLockFactory with this statement.&lt;/p&gt;</comment>
                    <comment id="12532133" author="mikemccand" created="Wed, 3 Oct 2007 16:25:55 +0100"  >&lt;p&gt;I just committed this.  Thanks Patrick!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12366814" name="LUCENE-1011.patch" size="32162" author="mikemccand" created="Sun, 30 Sep 2007 12:08:30 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 30 Sep 2007 19:01:58 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12734</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26718</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>