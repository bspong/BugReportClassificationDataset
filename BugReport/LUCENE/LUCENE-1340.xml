<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:27:30 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1340/LUCENE-1340.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1340] Make it posible not to include TF information in index</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1340</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Term Frequency is typically not needed  for all fields, some CPU (reading one VInt less and one X&amp;gt;&amp;gt;&amp;gt;1...) and IO can be spared by making pure boolen fields possible in Lucene. This topic has already been discussed and accepted as a part of Flexible Indexing... This issue tries to push things a bit faster forward as I have some concrete customer demands.&lt;/p&gt;

&lt;p&gt;benefits can be expected for fields that are typical candidates for Filters, enumerations, user rights, IDs or very short &quot;texts&quot;, phone  numbers, zip codes, names...&lt;/p&gt;

&lt;p&gt;Status: just passed standard test (compatibility), commited for early review, I have not tried new feature, missing some asserts and one two unit tests&lt;/p&gt;

&lt;p&gt;Complexity: simpler than expected&lt;/p&gt;

&lt;p&gt;can be used via omitTf() (who used omitNorms() will know where to find it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;</description>
                <environment></environment>
            <key id="12400587">LUCENE-1340</key>
            <summary>Make it posible not to include TF information in index</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="eksdev">Eks Dev</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Jul 2008 23:38:47 +0100</created>
                <updated>Sat, 11 Oct 2008 13:49:41 +0100</updated>
                    <resolved>Tue, 5 Aug 2008 18:18:06 +0100</resolved>
                                            <fixVersion>2.4</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                          <timeoriginalestimate seconds="86400">24h</timeoriginalestimate>
                    <timeestimate seconds="86400">24h</timeestimate>
                                  <comments>
                    <comment id="12614906" author="eksdev" created="Fri, 18 Jul 2008 23:42:00 +0100"  >&lt;p&gt;first cut&lt;/p&gt;</comment>
                    <comment id="12614909" author="paul.elschot@xs4all.nl" created="Fri, 18 Jul 2008 23:48:25 +0100"  >&lt;p&gt;Ok ok. I&apos;ll start working on adding a Filter as a clause to BooleanQuery. Will take some time though, there&apos;s a holiday coming up.&lt;/p&gt;</comment>
                    <comment id="12614969" author="mikemccand" created="Sat, 19 Jul 2008 10:32:36 +0100"  >&lt;p&gt;Thanks eks, that was fast &amp;#8211; I think you set a new record!&lt;/p&gt;

&lt;p&gt;The patch looks good, though we definitely need some solid unit tests&lt;br/&gt;
here.  I made some small (whitespace, spelling, naming) corrections &amp;amp;&lt;br/&gt;
attached a new rev of the patch.&lt;/p&gt;

&lt;p&gt;One question I have: right now if a single field has mixed true/false&lt;br/&gt;
for omitTf, you set it to false, meaning we start storing the term&lt;br/&gt;
freq, pos, payloads again.  Can/should we do the reverse instead?  If&lt;br/&gt;
we did, we could make some further optimizations, eg right now we&lt;br/&gt;
consume RAM storing all positions/payloads on a field that has omitTF=true&lt;br/&gt;
on the possibility that we may stll see omitTf=false in the same session.&lt;/p&gt;

&lt;p&gt;With this patch we still store the *.prx bytes for a field with&lt;br/&gt;
omitTf=true.  Can you fix that?  I think in FreqProxTermsWriter you&lt;br/&gt;
can simply not write any bytes to the proxOut; likewise in&lt;br/&gt;
SegmentMerger and SegmentTermPositions, don&apos;t try to read bytes from&lt;br/&gt;
the prx file if omitTf==true.&lt;/p&gt;

&lt;p&gt;I&apos;d also be curious about what gains in index size &amp;amp; filter&lt;br/&gt;
performance we see with these new boolean fields.&lt;/p&gt;</comment>
                    <comment id="12614988" author="eksdev" created="Sat, 19 Jul 2008 13:48:45 +0100"  >&lt;p&gt;Thanks Mike, with just a little bit more hand-holding we are going to be there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I &lt;b&gt;think&lt;/b&gt; I have *.prx IO excluded in case omitTf==true, please have a look, this part is really not an easy one (*Merger).&lt;/p&gt;

&lt;p&gt;Also, now if a single field has mixed true/false for omitTf, I set it to true.&lt;/p&gt;

&lt;p&gt;One unit test is already there, basic use case works, but the test has to cover a bit more&lt;/p&gt;
</comment>
                    <comment id="12615118" author="eksdev" created="Sun, 20 Jul 2008 21:31:46 +0100"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixed stupid bug in SegmentTermDocs (was doc = docCode; instead of doc += docCode&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;TestOmitTf extended a bit&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12615203" author="mikemccand" created="Mon, 21 Jul 2008 11:32:59 +0100"  >&lt;p&gt;OK good progress eks!&lt;/p&gt;

&lt;p&gt;I started from your latest patch and made some further changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Fixed DW to not consume RAM writing prx if omitTf==true&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed FreqProxTermsWriter to not create *.prx file if all fields&lt;br/&gt;
    omit term freq.  I added hasProx to SegmentInfo, and changed the&lt;br/&gt;
    index file format to store this new boolean.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed FreqProxTermsWriterPerField to not write prox into the RAM&lt;br/&gt;
    buffer if we will omitTf on flushing the segment to disk.  This&lt;br/&gt;
    makes the RAM buffer efficient (no bytes wasted on prox when&lt;br/&gt;
    omitTf==true for a field).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added more test cases to TestOmitTf&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Small whitespace, comment changes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The one place I know of that will still waste bytes is the term dict&lt;br/&gt;
(TermInfo): it stores a long proxPointer on disk (in &lt;b&gt;.tii,&lt;/b&gt;.tis) and&lt;br/&gt;
also in memory because we load *.tii into RAM.  For fields with&lt;br/&gt;
omitTf==true this will always be unused, and we could save alot of&lt;br/&gt;
disk/RAM if we didn&apos;t waste it.&lt;/p&gt;

&lt;p&gt;Unfortunately, I think it&apos;s too big a change to try to fix this now; I&lt;br/&gt;
think we should wait until flex indexing is online.  I wonder how we&lt;br/&gt;
can solve it at that point: maybe should we change TermInfo to be&lt;br/&gt;
&quot;column stride&quot;, meaning, there are separate arrays storing the values&lt;br/&gt;
for all terms (ie long[] proxPointers, long[] freqPointers, etc.).&lt;br/&gt;
This would also fit the &quot;pluggable&quot; model better, meaning any plugin&lt;br/&gt;
can store new stuff (its own arrays) per-term.&lt;/p&gt;</comment>
                    <comment id="12615357" author="eksdev" created="Mon, 21 Jul 2008 19:42:40 +0100"  >&lt;p&gt;Great, it is already more than I expected, even indexing is going to be somewhat faster.&lt;/p&gt;

&lt;p&gt;I have tried your patch on smallish index with 8Mio documents and it worked on our regression test without problems. &lt;br/&gt;
it worked fine with and without omitTf(true), no performance drop or bad surprises when we do not use it. Tomorrow is scheduled real test with production data, around 80Mio very small documents, with some very extensive tests.... I will report back.&lt;/p&gt;

&lt;p&gt;&quot;The one place I know of that will still waste bytes is the term dict&lt;br/&gt;
(TermInfo): it stores a long proxPointer on disk (in .tii,.tis) and&lt;br/&gt;
also in memory because we load *.tii into RAM.... &quot;&lt;/p&gt;

&lt;p&gt; About this one, it would be nice not to store this as well, but I think the pointers are already reduced to one byte, as they are 0 for these cases (are they,?) So we have this benefit without expecting it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;And yes, more &quot;column stride&quot; is great, if you followed my comments on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1278&quot; title=&quot;Add optional storing of document numbers in term dictionary&quot;&gt;&lt;del&gt;LUCENE-1278&lt;/del&gt;&lt;/a&gt;, that would mean we could easily &quot;inline&quot; very short postings into term dict (here I expect huge performance benefit, as skip()  on another large file is going to be saved independent from omitTf(true)), without increase in size (or minimal) of tii (no locality penalty) If we follow Zipfian distribution, there is &lt;b&gt;a lot&lt;/b&gt; of terms with postings shorter than e.g. 16 ... &lt;/p&gt;

&lt;p&gt;Thanks again for your support, without you this patch would be just another nice idea &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;





</comment>
                    <comment id="12615446" author="mikemccand" created="Mon, 21 Jul 2008 22:49:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;About this one, it would be nice not to store this as well, but I think the pointers are already reduced to one byte, as they are 0 for these cases (are they,?) So we have this benefit without expecting it&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh, right.  The delta between the proxPointers are written as vlong&apos;s.  Since the delta will be zero it&apos;s now only 1 byte; only a bit worse than 0 bytes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;that would mean we could easily &quot;inline&quot; very short postings into term dict (here I expect huge performance benefit, as skip() on another large file is going to be saved independent from omitTf(true))&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, this looks like it would be a win for cases that need to visit the postings for many small terms.&lt;/p&gt;</comment>
                    <comment id="12616512" author="mikemccand" created="Thu, 24 Jul 2008 17:01:09 +0100"  >&lt;p&gt;I attached a new rev of the patch:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Use less RAM if field omits tf&apos;s (don&apos;t write the tf&apos;s into the RAM buffer), so we flush less often&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added another test case to TestOmitTf&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As a test, I indexed full wikipedia (~3.2 million docs) with this alg:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;analyzer=org.apache.lucene.analysis.standard.StandardAnalyzer

doc.maker=org.apache.lucene.benchmark.byTask.feeds.LineDocMaker

docs.file=/Volumes/External/lucene/wiki.txt
doc.stored = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
doc.term.vector = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
doc.add.log.step=10000
max.field.length=2147483647

directory=FSDirectory
autocommit=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
compound=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
doc.maker.forever = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;

work.dir=/lucene/work2
ram.flush.mb=64

- CreateIndex
{ &lt;span class=&quot;code-quote&quot;&gt;&quot;AddDocs&quot;&lt;/span&gt; AddDoc &amp;gt; : *
- CloseIndex

RepSumByPrefRound AddDoc

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With tf&apos;s it takes 970 seconds and index size is 2.5 GB.  Without tf&apos;s&lt;br/&gt;
it takes 834 seconds (14% faster) and index size is 1.1 GB (56%&lt;br/&gt;
smaller).&lt;/p&gt;</comment>
                    <comment id="12616513" author="mikemccand" created="Thu, 24 Jul 2008 17:03:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;The delta between the proxPointers are written as vlong&apos;s. Since the delta will be zero it&apos;s now only 1 byte; only a bit worse than 0 bytes&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;One more thing here: since the tiis are loaded into RAM, that unused proxPointer wastes 8 bytes for each indexed terms.  For indices with alot of terms this can add up to alot of wasted ram.  But still I think we should wait and fix this as part of flexible indexing, when we maybe refactor the TermInfos to be &quot;column stride&quot; instead.&lt;/p&gt;</comment>
                    <comment id="12616522" author="mikemccand" created="Thu, 24 Jul 2008 17:31:40 +0100"  >&lt;p&gt;Attached patch that also includes fixes to fileformat.&lt;/p&gt;
{xml,html,pdf}
&lt;p&gt;.&lt;/p&gt;</comment>
                    <comment id="12617140" author="eksdev" created="Sat, 26 Jul 2008 10:47:11 +0100"  >&lt;p&gt;we  finished our tests&lt;/p&gt;

&lt;p&gt;Index without omitTf() :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;87Mio Documents, 2 indexed Fields one stored field&lt;/li&gt;
	&lt;li&gt;Unique terms in index 2.5Mio&lt;/li&gt;
	&lt;li&gt;Average Field lengths in tokens: 3.3 and 5.5 (very short fields)&lt;/li&gt;
	&lt;li&gt;On Disk size 3.8 Gb total with stored field&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Queries under test: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;BooleanQuery in all shapes and forms (disjunctive, conjunctive, nested, with minNumberShouldMatch()) . with a lot of clauses (5-100).&lt;/li&gt;
	&lt;li&gt;Filter used, yes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Test scope, regression with 30k Queries on the same index with omitTf(true/false).&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The Queries returned 100% identical Hits (full recall tested, all hits checked)!&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Index size reduction(not including stored field!): 7% (short documents =&amp;gt; less positions than in Mike&apos;s case)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Performance of Queries: 5.2% faster, but index was loaded as RAMIndex (on disk setup should bring even more due to the reduced IO for reading postings)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;-Indexing performance (FSDisk!) 13% faster&lt;/p&gt;

&lt;p&gt;Also, we compared omitTf(false) with this patch and lucene.jar without this patch, no changes whatsoever.&lt;/p&gt;

&lt;p&gt;From my perspective, this is good to go into production. At least for our usage of lucene, there are no differences with homitTf(true)... &lt;/p&gt;

&lt;p&gt;&amp;gt;One more thing here: since the tiis are loaded into RAM, that unused proxPointer wastes 8 bytes for each indexed terms. For indices with alot of terms this can add up to alot of wasted ram. But still I think we should wait and fix this as part of flexible indexing, when we maybe refactor the TermInfos to be &quot;column stride&quot; instead.&lt;/p&gt;

&lt;p&gt;I am more than happy with the results, no need to squeeze the last bit out of it right now.&lt;/p&gt;

&lt;p&gt;Mike, thanks again for the great work! &lt;/p&gt;
</comment>
                    <comment id="12617143" author="mikemccand" created="Sat, 26 Jul 2008 10:58:42 +0100"  >&lt;p&gt;OK that sounds like a healthy test.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mike, thanks again for the great work! &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thank you for the sudden burst of effort to make this happen!&lt;/p&gt;

&lt;p&gt;So I think this is ready to commit.  I&apos;ll wait a few days and then commit...&lt;/p&gt;</comment>
                    <comment id="12617954" author="gsingers" created="Tue, 29 Jul 2008 22:00:40 +0100"  >&lt;p&gt;I note a change to Fieldable...  sigh...  Back compatibility fails.  Ugh.&lt;/p&gt;

&lt;p&gt;Me thinks we should either rework Fieldable as we&apos;ve previously discussed, or we mark it as being one of the very few classes in LUcene that is subject to change between releases.&lt;/p&gt;
</comment>
                    <comment id="12617978" author="eksdev" created="Tue, 29 Jul 2008 23:02:42 +0100"  >&lt;p&gt;ouch! it is kind of getting personal between me and Fieldable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Not the first time to get bugged by it!&lt;/p&gt;

&lt;p&gt;Due to Fieldable (things really important, at lest to me):  &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We cannot get binary stored Field in and out of lucene without getting gc() go crazy&lt;/li&gt;
	&lt;li&gt;We cannot omitTF&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;it would be possible somehow to make it at AbstractField levele and instanceoff at a few places, but I simply hate to do it (I will patch my local copy, this issue is worth to me... must branch off from the trunk for the first time, sigh)&lt;/p&gt;

&lt;p&gt;funny it is, I see no reason to have anything but AbstractField (Field/Fieldable are just redundant)&lt;/p&gt;</comment>
                    <comment id="12617996" author="gsingers" created="Tue, 29 Jul 2008 23:31:38 +0100"  >&lt;p&gt;Yeah, it&apos;s one of my biggest regrets in Lucene (yes, I am responsible for it), yet I firmly believe there is a way to do interfaces and abstracts in a proper way in Java.&lt;/p&gt;

&lt;p&gt;We could make LazyField extend AbstractField, I think, but it&apos;s not clear, as there are some differences between the two, mostly around construction.  I&apos;d have to go back and review again.&lt;/p&gt;

&lt;p&gt;That being said, I still think if there is one place where we should allow breaking the back compat. contract, it is Fieldable!  For every rule, there is an exception, right?  I thinnk we could, w/ sufficient warning, tell people that we are changing the interface.  I am willing to bet that the number of people that would be effected by that would be less than 10.&lt;/p&gt;

&lt;p&gt;So, please don&apos;t give up on this patch.  I am totally 100% for it.  I think it makes total sense to do.  &lt;/p&gt;

&lt;p&gt;Another option is to speed up going towards 3.0&lt;/p&gt;</comment>
                    <comment id="12618001" author="cutting" created="Tue, 29 Jul 2008 23:48:50 +0100"  >&lt;p&gt;&amp;gt; I firmly believe there is a way to do interfaces and abstracts in a proper way in Java. &lt;/p&gt;

&lt;p&gt;Personally, I&apos;ve given up on interfaces for stuff with more than one method with at most one parameter.  Ditch the interface and move on.&lt;/p&gt;</comment>
                    <comment id="12618069" author="eksdev" created="Wed, 30 Jul 2008 06:48:50 +0100"  >&lt;p&gt;that sound like consensus &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Great!&lt;/p&gt;

&lt;p&gt;in that case &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1219&quot; title=&quot;support array/offset/ length setters for Field with binary data&quot;&gt;&lt;del&gt;LUCENE-1219&lt;/del&gt;&lt;/a&gt; can be reworked slightly to avoid instanceoff (less code). Also it opens a way to pass reference to byte[] for retrieving stored fields out of lucene and communicating length back to caller (now we new byte[] every time we fetch stored field) &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;it&apos;s one of my biggest regrets in Lucene (yes, I am responsible for it), yet I firmly believe there is a way to do interfaces and abstracts in a proper way in Java. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no need to regret Grant, if you do nothing you make no mistakes... Interfaces are ok, as long as you can tell what they are going to be doing in next 5 years... this forces you to design &quot;for the future&quot;... something we cannot afford in so popular and complex libraries like lucene at places like Field. Abstract* is equally good design-abstraction...  &lt;/p&gt;

&lt;p&gt;Proposal:&lt;br/&gt;
We could live with a statement &quot;Fieldable changes are allowed from now, it is deprecated and will be  probably removed in 3.0&quot; , it causes just a tiny bit of work in case someone is really implementing it (adding new methods to Fieldable like omitTf() costs you max 5 minutes work to change your implementing class to implement it!).&lt;/p&gt;

&lt;p&gt;from 3.0 on, I could very well live without it, until then, we cause 5 minutes work for people that implement Fieldable on their own and want to stay up to date with the trunk.  It is fair  deal for everyone and lucene moves forward... &lt;/p&gt;







</comment>
                    <comment id="12618272" author="mikemccand" created="Wed, 30 Jul 2008 10:58:48 +0100"  >&lt;p&gt;Sigh, I too missed that we broke back-compatibility.&lt;/p&gt;

&lt;p&gt;But I agree: let&apos;s mark Fieldable interface as being allowed to change from release to release (consciously make an exception to back compatibility requirements).&lt;/p&gt;

&lt;p&gt;Let&apos;s also transition away from interface for Field, for 3.0   EG we last had discussions on this, here:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200803.mbox/%3C45933841-6EBF-4208-B10D-0D3B0BB530FF@mikemccandless.com%3E&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200803.mbox/%3C45933841-6EBF-4208-B10D-0D3B0BB530FF@mikemccandless.com%3E&lt;/a&gt;&lt;/p&gt;
</comment>
                    <comment id="12618290" author="gsingers" created="Wed, 30 Jul 2008 12:26:43 +0100"  >&lt;p&gt;OK, I think we should call a vote on it, as it is significant enough in my mind.  I will write it up.&lt;/p&gt;</comment>
                    <comment id="12619963" author="mikemccand" created="Tue, 5 Aug 2008 18:15:44 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1349&quot; title=&quot;Mark Fieldable as allowing some changes in 2.x future releases&quot;&gt;&lt;del&gt;LUCENE-1349&lt;/del&gt;&lt;/a&gt; is in; I plan to commit this shortly...&lt;/p&gt;</comment>
                    <comment id="12619964" author="mikemccand" created="Tue, 5 Aug 2008 18:18:06 +0100"  >&lt;p&gt;Thanks Eks!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12401602">LUCENE-1349</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12386804" name="LUCENE-1340.patch" size="155475" author="mikemccand" created="Thu, 24 Jul 2008 17:31:40 +0100" />
                    <attachment id="12386801" name="LUCENE-1340.patch" size="64943" author="mikemccand" created="Thu, 24 Jul 2008 17:01:09 +0100" />
                    <attachment id="12386515" name="LUCENE-1340.patch" size="59470" author="mikemccand" created="Mon, 21 Jul 2008 11:32:59 +0100" />
                    <attachment id="12386495" name="LUCENE-1340.patch" size="34868" author="eksdev" created="Sun, 20 Jul 2008 21:31:46 +0100" />
                    <attachment id="12386466" name="LUCENE-1340.patch" size="32258" author="eksdev" created="Sat, 19 Jul 2008 13:48:45 +0100" />
                    <attachment id="12386461" name="LUCENE-1340.patch" size="20804" author="mikemccand" created="Sat, 19 Jul 2008 10:32:36 +0100" />
                    <attachment id="12386443" name="LUCENE-1340.patch" size="20376" author="eksdev" created="Fri, 18 Jul 2008 23:42:00 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 18 Jul 2008 22:48:25 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12408</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26388</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>