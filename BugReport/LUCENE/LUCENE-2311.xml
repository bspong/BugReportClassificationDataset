<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2311/LUCENE-2311.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2311] Pass potent SR to IRWarmer.warm(), and also call warm() for new segments</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2311</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently warm() receives a SegmentReader without terms index and docstores.&lt;br/&gt;
It would be arguably more useful for the app to receive a fully loaded reader, so it can actually fire up some caches. If the warmer is undefined on IW, we probably leave things as they are.&lt;/p&gt;

&lt;p&gt;It is also arguably more concise and clear to call warm() on all newly created segments, so there is a single point of warming readers in NRT context, and every subreader coming from getReader is guaranteed to be warmed up -&amp;gt; you don&apos;t have to introduce even more mess in your code by rechecking it.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12458858">LUCENE-2311</key>
            <summary>Pass potent SR to IRWarmer.warm(), and also call warm() for new segments</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="earwin">Earwin Burrfoot</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Mar 2010 22:19:39 +0000</created>
                <updated>Fri, 18 Jun 2010 09:03:58 +0100</updated>
                    <resolved>Wed, 2 Jun 2010 18:23:59 +0100</resolved>
                                            <fixVersion>2.9.3</fixVersion>
                <fixVersion>3.0.2</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12844250" author="earwin" created="Thu, 11 Mar 2010 22:25:35 +0000"  >&lt;p&gt;Not only newly created, but newly opened too! So your readers are warmed, if you just created an IW, called getReader, and didn&apos;t do any writes at all yet.&lt;/p&gt;</comment>
                    <comment id="12874211" author="mikemccand" created="Tue, 1 Jun 2010 21:10:13 +0100"  >&lt;p&gt;Test case showing the issue.&lt;/p&gt;

&lt;p&gt;Basically you cannot run any searches against the reader passed to your warmer...&lt;/p&gt;

&lt;p&gt;I also had to fix LuceneTestCase &amp;#8211; it was masking the original exception that CMS hit.&lt;/p&gt;</comment>
                    <comment id="12874214" author="mikemccand" created="Tue, 1 Jun 2010 21:19:27 +0100"  >&lt;blockquote&gt;&lt;p&gt;It is also arguably more concise and clear to call warm() on all newly created segments, so there is a single point of warming readers in NRT context, and every subreader coming from getReader is guaranteed to be warmed up -&amp;gt; you don&apos;t have to introduce even more mess in your code by rechecking it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree this would be nice, however... it&apos;s less important that this be called from within IW, because this warming time (on newly flushed segments) must be done in the foreground of the reopen thread.  Ie, whether we do this in IW or app does it externally, this will block an NRT reader turnaround.&lt;/p&gt;

&lt;p&gt;Vs warming a newly merged segment, where we have the freedom to continue using the old (merged) segments until the newly merged one is warmed.&lt;/p&gt;</comment>
                    <comment id="12874220" author="mikemccand" created="Tue, 1 Jun 2010 21:28:35 +0100"  >&lt;p&gt;New patch, includes trivial fix (test passes) and CHANGES.&lt;/p&gt;

&lt;p&gt;I plan to commit shortly.&lt;/p&gt;</comment>
                    <comment id="12874224" author="earwin" created="Tue, 1 Jun 2010 21:33:42 +0100"  >&lt;p&gt;This is not the issue of reader turnaround. This is the issue of code clarity.&lt;/p&gt;

&lt;p&gt;From the user&apos;s standpoint warming up a new-from-scratch segment and warming up just-merged segment is the same action. The difference of what happens in which thread, and what blocks/doesn&apos;t block reopen is totally Lucene-internal API-wise. Now you&apos;re forcing people to make this distinction and do absolutely identical warming-up action in two very different places. Moreover, when warming up a new reader from reopen(), they have to get new segments and then discern which ones of them were flushed, and which were merged, to avoid warming them up twice.&lt;/p&gt;

&lt;p&gt;I think there is no hurry to push the fix for this into 2.9.3. As of now this feature is broken. There is absolutely no way you can make it work. Thus, there are no applications that are suffering. Thus, not releasing the fix with 2.9.3, does not multiply suffering under the sun &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Thus, no need to hurry up and fix this at least somehow instead of doing this properly.&lt;/p&gt;</comment>
                    <comment id="12874249" author="mikemccand" created="Tue, 1 Jun 2010 22:36:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;From the user&apos;s standpoint warming up a new-from-scratch segment and warming up just-merged segment is the same action. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, I agree... but, let&apos;s open a separate issue to rename&lt;br/&gt;
setMergedSegmentWarmer -&amp;gt; setSegmentWarmer, and have it be invoked for&lt;br/&gt;
flushed and merged segments?&lt;/p&gt;

&lt;p&gt;Does your pending patch (what&apos;s the issue number again?) do this already?&lt;/p&gt;

&lt;p&gt;I agree this change isn&apos;t needed for 2.9.3.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think there is no hurry to push the fix for this into 2.9.3. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the first part of this bug (that you get an impotent&lt;br/&gt;
SegmentReader passed to your segment warmer) should be fixed for&lt;br/&gt;
2.9.3.  The fix is trivial.&lt;/p&gt;</comment>
                    <comment id="12874606" author="mikemccand" created="Wed, 2 Jun 2010 16:17:35 +0100"  >&lt;p&gt;OK I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2485&quot; title=&quot;IndexWriter should also warm flushed segments&quot;&gt;LUCENE-2485&lt;/a&gt; for the 2nd part of this issue.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit the first part shortly.&lt;/p&gt;</comment>
                    <comment id="12874634" author="earwin" created="Wed, 2 Jun 2010 17:14:33 +0100"  >&lt;blockquote&gt;&lt;p&gt;Does your pending patch (what&apos;s the issue number again?) do this already?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2355&quot; title=&quot;Refactor Directory/Multi/SegmentReader creation/reopening/cloning/closing&quot;&gt;LUCENE-2355&lt;/a&gt; - this patch doesn&apos;t do this yet.&lt;br/&gt;
The next part removes the need for readerWarmer, as each reader has a number of components that are notified when reader is created/closed (and can warm themselves appropriately).&lt;br/&gt;
This also takes care of one of Yonik&apos;s concerns from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2485&quot; title=&quot;IndexWriter should also warm flushed segments&quot;&gt;LUCENE-2485&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Passing in the complete index (in addition to just the new segment) would allow incremental updating of an index-wide data structure&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The factories that create components are shared for DirReader+SRs or IW-readerPool+SRs+IWBackedReader, so new components by default have access to index-wide context.&lt;/p&gt;

&lt;p&gt;The part that is missing is the way for the user to specify if he wants his newly merged SRs pre-warmed and up to which runlevel.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12446060" name="LUCENE-2311.patch" size="5148" author="mikemccand" created="Tue, 1 Jun 2010 21:28:34 +0100" />
                    <attachment id="12446059" name="LUCENE-2311.patch" size="3270" author="mikemccand" created="Tue, 1 Jun 2010 21:10:13 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 1 Jun 2010 20:10:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11483</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25414</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>