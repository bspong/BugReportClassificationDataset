<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:57:16 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2719/LUCENE-2719.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2719] Re-add SorterTemplate and use it to provide fast ArraySorting and replace BytesRefHash sorting</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2719</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This patch adds back an optimized and rewritten SorterTemplate back to Lucene (removed after release of 3.0). It is of use for several components:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Automaton: Automaton needs to sort States and other things. Using Arrays.sort() is slow, because it clones internally to ensure stable search. This component is much faster. This patch adds Arrays.sort() replacements in ArrayUtil that work with natural order or using a Comparator&amp;lt;?&amp;gt;. You can choose between quickSort and mergeSort.&lt;/li&gt;
	&lt;li&gt;BytesRefHash uses another QuickSort algorithm without insertionSort for very short ord arrays. This class uses SorterTemplate to provide the same with insertionSort fallback in a very elegant way. Ideally this class can be used everywhere, where the sort algorithm needs to be separated from the underlying data and you can implement a swap() and compare() function (that get slot numbers instead of real values). This also applies to Solr (Yonik?).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;SorterTemplate provides quickSort and mergeSort algorithms. Internally for short arrays, it automatically chooses insertionSort (like JDK&apos;s Arrays). The quickSort algorith was copied modified from old BytesRefHash. This new class only shares MergeSort with the original CGLIB SorterTemplate, which is no longer maintained.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12478122">LUCENE-2719</key>
            <summary>Re-add SorterTemplate and use it to provide fast ArraySorting and replace BytesRefHash sorting</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Oct 2010 22:44:57 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:24 +0100</updated>
                    <resolved>Wed, 27 Oct 2010 18:16:41 +0100</resolved>
                            <version>3.1</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12924044" author="thetaphi" created="Fri, 22 Oct 2010 22:48:42 +0100"  >&lt;p&gt;Attached you find the patch. Robert offered to do benchmarks with Automaton.&lt;/p&gt;

&lt;p&gt;The patch can be applied to a clean checkout, you no longer need to svn copy old SorterTemplate, as this is a almost complete rewrite.&lt;/p&gt;

&lt;p&gt;This patch removes the CHANGES.txt entry for 3.x, as it readds the class. If we don&apos;t merge this to 3.x, the CHANGES should be reverted. As Lucene uses Arrays.sort(Object[]) which is slow at other places, I recommend to add it also to 3.x.&lt;/p&gt;

&lt;p&gt;Please test the stuff with large -Dtests.multiplier! Maybe also verify my modified quickSort!&lt;/p&gt;</comment>
                    <comment id="12924051" author="thetaphi" created="Fri, 22 Oct 2010 22:58:17 +0100"  >&lt;p&gt;Using this class we can look for more useless quickSort code duplication. One is e.g. in DocFieldProcessorPerThread. Maybe more of them.&lt;/p&gt;</comment>
                    <comment id="12924068" author="yseeley@gmail.com" created="Fri, 22 Oct 2010 23:43:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;This also applies to Solr (Yonik?).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep - Solr also has it&apos;s own version of quicksort - PrimUtils.sort() to deal with sorting indexes (an int[]) instead of objects (parallel array sorting).&lt;/p&gt;</comment>
                    <comment id="12924071" author="thetaphi" created="Fri, 22 Oct 2010 23:47:29 +0100"  >&lt;p&gt;The quickSort in DocFieldProcessorPerThread also converted to ArrayUtil.quickSort().&lt;/p&gt;

&lt;p&gt;Yonik: I will take care of PrimUtils!&lt;/p&gt;</comment>
                    <comment id="12924157" author="thetaphi" created="Sat, 23 Oct 2010 10:16:09 +0100"  >&lt;p&gt;New patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Cleaned up (removed useless imports)&lt;/li&gt;
	&lt;li&gt;Added test that verifies that mergeSort() is stable - this is now validated and we can use mergeSort() in ConjunctionScorer&lt;/li&gt;
	&lt;li&gt;Further test optimization, so also totally reversed arrays get sorted correctly (special case)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12924162" author="mikemccand" created="Sat, 23 Oct 2010 10:48:22 +0100"  >&lt;p&gt;This is great Uwe!&lt;/p&gt;</comment>
                    <comment id="12924180" author="thetaphi" created="Sat, 23 Oct 2010 12:29:55 +0100"  >&lt;p&gt;Modified all sorts to use &amp;gt;&amp;gt;&amp;gt;1 instead /2 (have no real opinion about that).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yep - Solr also has it&apos;s own version of quicksort - PrimUtils.sort() to deal with sorting indexes (an int[]) instead of objects (parallel array sorting).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;According to java.util.Arrays javadoc: The sorting algorithm is a tuned quicksort, adapted from Jon L. Bentley and M. Douglas McIlroy&apos;s &quot;Engineering a Sort Function&quot;, Software-Practice and Experience, Vol. 23(11) P. 1249-1265 (November 1993). This algorithm offers n*log&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;19&quot; width=&quot;19&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; performance on many data sets that cause other quicksorts to degrade to quadratic performance. &lt;/p&gt;

&lt;p&gt;If I change to SorterTemplate, we will degrade to good old quicksort. We could also upgrade SorterTemplate to use this algo, but I am not sure if thats easy because SorterTemplate only allows swap(index, index) and compare(index, index). But we cannot retrieve e.g. the pivot value. This was also one problem in porting BytesRefHash&apos;s quicksort, as it used the value of the pivot (this is why there is an additional check below the commented out assert in the current patch&apos;s algo).&lt;/p&gt;</comment>
                    <comment id="12924202" author="mikemccand" created="Sat, 23 Oct 2010 15:02:08 +0100"  >&lt;p&gt;I tested indexing first 10M wikipedia 1KB docs  and running various queries and found no real perf change, or at least less than the noise in the test...&lt;/p&gt;</comment>
                    <comment id="12924543" author="thetaphi" created="Mon, 25 Oct 2010 13:10:41 +0100"  >&lt;p&gt;Latest updates.&lt;/p&gt;

&lt;p&gt;There is also an additional patch which provides CollectionUtil, now also supporting in-place collection sorts which is much more perfromant for smaller collections. Collections.sort() in JDK does copy the List into array and calls Arrays.sort() which itsself does clone the array and after that copies the arraycontents using a ListIterator back to the List.&lt;/p&gt;

&lt;p&gt;Before committing this, can somebody look into the o.a.l.index package, because I replaced some sorts for field names there. For commit points i used MergeSort, as I am not sure if it should be stable.&lt;/p&gt;

&lt;p&gt;So just a confirmation, if we need stable sort for Indexer and Commit points would be fine.&lt;/p&gt;</comment>
                    <comment id="12924918" author="thetaphi" created="Tue, 26 Oct 2010 11:07:51 +0100"  >&lt;p&gt;Robert tested yesterday and found out that SorterTemplate.quickSort is not as efficient as it could be. The general problem is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Quicksort needs the value of the pivot/partition element and the main sorting step compares this single value quite often&lt;/li&gt;
	&lt;li&gt;For our in-place algorithm that only used swap(i,j) and compare(i,j), the main loop&apos;s swap statements needed an extra check that not the pivot index is swapped and so the pivot changes suddenly. Because of this when the index of the pivot is swapped, the pivot index value needed to be updated.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I changed SorterTemplate to look more like FieldComparator known from search. It now has not only swap(index1,index2) and compare(index1,index2), it also gets setPivot(index) &lt;span class=&quot;error&quot;&gt;&amp;#91;stores index&amp;#39; value as pivot&amp;#93;&lt;/span&gt; and comparePivot(index) &lt;span class=&quot;error&quot;&gt;&amp;#91;compares given index&amp;#39; value with previously stored pivot value&amp;#93;&lt;/span&gt;. Now the quicksort algorithm is identical to the one seen everywhere in Lucene before. We can now also implement the optimized one from harmony also seen in Solr&apos;s PrimUtil. I will look into this, if it makes sense (it makes not always sense as comparing and swapping is more intensive for non-native values!).&lt;/p&gt;

&lt;p&gt;This has also some improvements to BytesRefHash, as there are less de-references of BytesRefs, because the main quickSort loop only compares an index with the in setPivot dereferenced BytesRefs. Before it did this on every compare step!&lt;/p&gt;

&lt;p&gt;Robert: Can you supply your benchmark? Or test again &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12925190" author="thetaphi" created="Wed, 27 Oct 2010 00:07:24 +0100"  >&lt;p&gt;After spending the evening with performance tests on BytesRefHash and Fuzzy automatons I cam to the following conclusion, finalized in this hopefully last patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Automatons use very short, mostly presorted arrays. Quicksort is ineffective for them. Initial tests showed that even insertionSort is enough for most of the Transition arrays. As some automatons also contain very large Transition arrays, it showed, that then insertionSAort gets very slow. Quicksort gets better, but as the array is already sorted, mergesort beats them all. SorterTemplate.mergeSort contains a limit, so when array size is &amp;lt; 12 entries, it uses insertion sort for the sorting (also in later merge steps if the partitioned array gets &amp;lt; 12 entries).&lt;br/&gt;
schindlerMinimize and mccandlessDeterminize are now using mergesort.&lt;/li&gt;
	&lt;li&gt;BytesRefHash gets about 10% speed improvement by the recent extension to SorterTemplate with setPivot/comparePivot abstract methods. This beats the old algorithm which is currently in trunk, as for the quicksort algorithm used, the swapping of entries in the mail loop always compares to the pivot value. If BytesRefHash needs to resolve this values every time, it gets slow. The new patch improves a modified TestBytesRefHash.testSort for perf testing by 11% (runs with -Xbatch -server -Xmx1024m, Java 1.5 on my computer in 12.5 secs on trunk, 11.1 secs with this patch):&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSortPerf() {
  &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
  BytesRef ref = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BytesRef();
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = 0; j &amp;lt; 200 * RANDOM_MULTIPLIER; j++) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; 1797; i++) {
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str;
      &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
        str = _TestUtil.randomRealisticUnicodeString(random, 1000);
      } &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (str.length() == 0);
      ref.copy(str);
      hash.add(ref);
    }
    hash.sort(BytesRef.getUTF8SortedAsUTF16Comparator());
    hash.clear();
    hash.reinit();
  }
  &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;time: &quot;&lt;/span&gt;+(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis()-start));
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will commit this patch, which now also makes insertionSort public in SorterTemplate, ArrayUtil and CollectionUtil tomorrow. I tend to also commit this to 3.x (merged to BytesRefHash-similar class from 3.x). This is why the CHANGES.txt removes the SorterTemplate removal message (may need to be modified, because SorterTemplate changed API). If we will only commit to trunk, CHANGES would keep unchanged.&lt;/p&gt;</comment>
                    <comment id="12925350" author="thetaphi" created="Wed, 27 Oct 2010 13:29:09 +0100"  >&lt;p&gt;After Robert mentioned the strange comparator in the above benchmark:&lt;br/&gt;
It is just a leftover from the original testSort() test which needed that special order, because it compared the sorted BytesRefHash using a TreeSet of UTF16 strings.&lt;br/&gt;
For the benchmark the comparator has no real effect.&lt;/p&gt;</comment>
                    <comment id="12925412" author="thetaphi" created="Wed, 27 Oct 2010 16:13:49 +0100"  >&lt;p&gt;Final patch, will get committed... now. It adds some contrib changes and changes.txt/notice.txt and javadocs.&lt;/p&gt;</comment>
                    <comment id="12925414" author="thetaphi" created="Wed, 27 Oct 2010 16:19:12 +0100"  >&lt;p&gt;Committed trunk revision: 1027998&lt;/p&gt;

&lt;p&gt;Now working on 3.x&lt;/p&gt;</comment>
                    <comment id="12925434" author="thetaphi" created="Wed, 27 Oct 2010 17:15:16 +0100"  >&lt;p&gt;filterdiff&apos;ed patch for 3.x branch - we need that for commit mails, too. The changes in BytesRefHash are merged over to TermsHashPerField. This patch also removes useless synchronization!&lt;/p&gt;

&lt;p&gt;After this also 3.x gets the imporved terms sorting and reduced code duplication.&lt;/p&gt;

&lt;p&gt;I will commit soon.&lt;/p&gt;</comment>
                    <comment id="12925464" author="thetaphi" created="Wed, 27 Oct 2010 18:16:41 +0100"  >&lt;p&gt;Committed 3.x branch revision: 1028042&lt;/p&gt;

&lt;p&gt;Thanks to all for performance testing!&lt;/p&gt;</comment>
                    <comment id="13013466" author="gsingers" created="Wed, 30 Mar 2011 16:50:24 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12410235">LUCENE-1483</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12474788">LUCENE-2662</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12458120" name="LUCENE-2719-CollSupport.patch" size="45736" author="thetaphi" created="Wed, 27 Oct 2010 00:41:36 +0100" />
                    <attachment id="12458066" name="LUCENE-2719-CollSupport.patch" size="42520" author="thetaphi" created="Tue, 26 Oct 2010 11:07:51 +0100" />
                    <attachment id="12457968" name="LUCENE-2719-CollSupport.patch" size="40573" author="thetaphi" created="Mon, 25 Oct 2010 13:10:41 +0100" />
                    <attachment id="12458169" name="LUCENE-2719-final-3x.patch" size="36121" author="thetaphi" created="Wed, 27 Oct 2010 17:15:16 +0100" />
                    <attachment id="12458158" name="LUCENE-2719-final-trunk.patch" size="60055" author="thetaphi" created="Wed, 27 Oct 2010 16:13:49 +0100" />
                    <attachment id="12457967" name="LUCENE-2719.patch" size="30778" author="thetaphi" created="Mon, 25 Oct 2010 13:10:41 +0100" />
                    <attachment id="12457898" name="LUCENE-2719.patch" size="28848" author="thetaphi" created="Sat, 23 Oct 2010 12:29:55 +0100" />
                    <attachment id="12457893" name="LUCENE-2719.patch" size="28790" author="thetaphi" created="Sat, 23 Oct 2010 10:16:09 +0100" />
                    <attachment id="12457881" name="LUCENE-2719.patch" size="25702" author="thetaphi" created="Fri, 22 Oct 2010 23:47:29 +0100" />
                    <attachment id="12457874" name="LUCENE-2719.patch" size="22754" author="thetaphi" created="Fri, 22 Oct 2010 22:48:42 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 22 Oct 2010 22:43:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11128</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24973</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>