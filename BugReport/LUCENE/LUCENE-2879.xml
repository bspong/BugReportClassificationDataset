<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:20:41 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2879/LUCENE-2879.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2879] MultiPhraseQuery sums its own idf instead of Similarity.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2879</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;MultiPhraseQuery is a generalized version of PhraseQuery, and computes IDF the same way by default (by summing across the terms).&lt;/p&gt;

&lt;p&gt;The problem is it doesn&apos;t let the Similarity do this: PhraseQuery calls Similarity.idfExplain(Collection&amp;lt;Term&amp;gt; terms, IndexSearcher searcher),&lt;br/&gt;
but MultiPhraseQuery just sums itself, calling Similarity.idf(int, int) for each term.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12496421">LUCENE-2879</key>
            <summary>MultiPhraseQuery sums its own idf instead of Similarity.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sun, 23 Jan 2011 05:43:27 +0000</created>
                <updated>Wed, 30 Mar 2011 16:49:56 +0100</updated>
                    <resolved>Mon, 24 Jan 2011 03:53:27 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/query/scoring</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12985256" author="rcmuir" created="Sun, 23 Jan 2011 05:44:30 +0000"  >&lt;p&gt;patch, i added a test for this.&lt;/p&gt;</comment>
                    <comment id="12985318" author="doronc" created="Sun, 23 Jan 2011 13:32:55 +0000"  >&lt;p&gt;+1 for fixing this inconsistent behavior.&lt;br/&gt;
BTW also SpanWeight calls idfExplain() for same reason.&lt;br/&gt;
Patch looks good, new test case passes with the fix and fails without it.&lt;/p&gt;

&lt;p&gt;A small thing that bothered me was that an explanation is created although the user did not call explain(), and in general explain() is considered slower, but it is called once per query, so it should not be a perf issue, and that&apos;s the case already for two other queries so anyhow this one (MFQ) should first be made consistent, which is done by this patch.&lt;/p&gt;

&lt;p&gt;It is interesting that the implementation of a similar logic in SpanWeight is more compact:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;SpanWeight: calls extractTerms()&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
terms=&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;Term&amp;gt;();
query.extractTerms(terms);
idfExp = similarity.idfExplain(terms, searcher);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But doing the same in MFQ would change its logic, as it would consider each term only once. &lt;br/&gt;
Not saying that the patch should change, just pointing out the difference in sum-of-square-weights computation between SpanWeight and MFQ.&lt;br/&gt;
Boolean Query fore example, would iterate over its sub queries and sum theirs, and so, if it so happens that the same term appears in two descendant queries that term would contribute twice to the sum. In this sense, MFQ and BQ behave similarly, both differ from SpanQuery... well I guess this falls to the &quot;black magic&quot; area &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12985332" author="rcmuir" created="Sun, 23 Jan 2011 14:29:46 +0000"  >&lt;blockquote&gt;
&lt;p&gt;A small thing that bothered me was that an explanation is created although the user did not call explain(), and in general explain() is considered slower, but it is called once per query, so it should not be a perf issue, and that&apos;s the case already for two other queries so anyhow this one (MFQ) should first be made consistent, which is done by this patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, this IDFExplanation is confusing/tricky... so with a good implementation, its an abstract class so creating the &quot;Explanation&quot; does nothing really.&lt;/p&gt;

&lt;p&gt;Instead the explanation is calculated &quot;lazily&quot;, only if you ask for it:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    /**
     * This should be calculated lazily if possible.
     * 
     * @return the explanation for the idf factor.
     */
    public abstract String explain();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Not saying that the patch should change, just pointing out the difference in sum-of-square-weights computation between SpanWeight and MFQ.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I saw this and it bothered me a bit as well too. But I suppose its ok, given that the whole thing is only an approximation anyway right?&lt;br/&gt;
(In a lot of more &quot;ordinary&quot; short queries, the # of unique terms will be similar to # of terms).&lt;/p&gt;

&lt;p&gt;Additionally if this really bothered someone, they could work around it by putting all the terms into a HashSet in their IDF implementation to make&lt;br/&gt;
PhraseQuery, MultiPhraseQuery work like SpanQuery.&lt;/p&gt;

&lt;p&gt;In general, when I look at the SpanQueries I am frustrated with other scoring problems.&lt;br/&gt;
For example, I think that SpanScorer by default should be consistent with our other Queries.&lt;br/&gt;
But imagine a Simple SpanTermQuery, its tf() calculation is done like this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;   while (matches) {
      int matchLength = spans.end() - spans.start();
      freq += similarity.sloppyFreq(matchLength);
   }
   ...
   similarity.tf(freq);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my opinion this is an off-by-one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
In the current implementation, this produces slop of 1 for an exact SpanTermQuery.&lt;br/&gt;
if instead it were spans.end() - spans.start() - 1, it would produce a slop of 0,&lt;br/&gt;
yielding a sloppyFreq of 1 for each match, and would equate exactly with TermQuery.&lt;/p&gt;</comment>
                    <comment id="12985335" author="doronc" created="Sun, 23 Jan 2011 15:01:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;In my opinion this is an off-by-one &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right, it would return 0.5 vs 1.0 in TermQuery. &lt;br/&gt;
Perhaps similar issue with SpanNearQuery.&lt;br/&gt;
(I guess this may be taken care of in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt;.)&lt;/p&gt;</comment>
                    <comment id="12985337" author="rcmuir" created="Sun, 23 Jan 2011 15:04:04 +0000"  >&lt;p&gt;Doron, i hacked up a quick patch with some ideas for a fix for this one... &lt;br/&gt;
from looking at the scores, I think its actually fairly serious for SpanQuery users.&lt;/p&gt;

&lt;p&gt;I&apos;ll open a separate issue for this.&lt;/p&gt;</comment>
                    <comment id="12985342" author="doronc" created="Sun, 23 Jan 2011 15:18:26 +0000"  >&lt;p&gt;ok great I&apos;ll have a look there...&lt;/p&gt;</comment>
                    <comment id="12985343" author="rcmuir" created="Sun, 23 Jan 2011 15:22:49 +0000"  >&lt;p&gt;Well its not a great solution really at all, and as you mention &lt;br/&gt;
maybe its best to take care of it in the context of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2878&quot; title=&quot;Allow Scorer to expose positions and payloads aka. nuke spans &quot;&gt;LUCENE-2878&lt;/a&gt;,&lt;br/&gt;
but mainly I just didn&apos;t want us to forget about the problem.&lt;/p&gt;

&lt;p&gt;I&apos;ll move forward with this issue later today if there are no objections.&lt;/p&gt;</comment>
                    <comment id="12985504" author="rcmuir" created="Mon, 24 Jan 2011 03:53:27 +0000"  >&lt;p&gt;Committed revision 1062633 (trunk), 1062636 (branch_3x).&lt;/p&gt;

&lt;p&gt;If we do another 3.0.x/2.9.x we can consider this one then.&lt;/p&gt;</comment>
                    <comment id="13013308" author="gsingers" created="Wed, 30 Mar 2011 16:49:56 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12469063" name="LUCENE-2879.patch" size="3996" author="rcmuir" created="Sun, 23 Jan 2011 05:44:30 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 23 Jan 2011 13:32:55 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10988</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24813</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>