<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:47 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1329/LUCENE-1329.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1329] Remove synchronization in SegmentReader.isDeleted</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1329</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Removes SegmentReader.isDeleted synchronization by using a volatile deletedDocs variable on Java 1.5 platforms.  On Java 1.4 platforms synchronization is limited to obtaining the deletedDocs reference.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12399721">LUCENE-1329</key>
            <summary>Remove synchronization in SegmentReader.isDeleted</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="jasonrutherglen">Jason Rutherglen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Jul 2008 14:12:38 +0100</created>
                <updated>Sat, 11 Oct 2008 13:49:37 +0100</updated>
                    <resolved>Sat, 23 Aug 2008 14:47:41 +0100</resolved>
                            <version>2.3.1</version>
                                <fixVersion>2.4</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12611151" author="jasonrutherglen" created="Mon, 7 Jul 2008 14:13:52 +0100"  >&lt;p&gt;lucene-1329.patch&lt;/p&gt;</comment>
                    <comment id="12611516" author="mikemccand" created="Tue, 8 Jul 2008 11:30:20 +0100"  >&lt;p&gt;Jason, have you run any scale tests (w/ many threads) to confirm whether volatile is faster than using synchronized, for this case?  I&apos;m especially curious on what happens with JRE 1.4, since with this patch it is now synchronized and volatile.&lt;/p&gt;

&lt;p&gt;I think we should, at least in addition but perhaps instead, create a way to open a read-only IndexReader.  This way no synchronization nor volatile would be necessary when accessing deletedDocs.&lt;/p&gt;</comment>
                    <comment id="12611572" author="sanne.grinovero" created="Tue, 8 Jul 2008 14:20:08 +0100"  >&lt;p&gt;Adding a readonly IndexReader would be really great, I&apos;m contributing some code to Hibernate Search (integration of Lucene and Hibernate) and that&lt;br/&gt;
project could really benefit from that.&lt;/p&gt;</comment>
                    <comment id="12611598" author="yseeley@gmail.com" created="Tue, 8 Jul 2008 15:20:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should, at least in addition but perhaps instead, create a way to open a read-only IndexReader. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right... a volatile is still &quot;half&quot; a synchronized in many ways, and gets more expensive as you add more cores.  IAFAIK It&apos;s also something you won&apos;t see with a profiler because it involves cache flushes, not explicit high level blocking.&lt;/p&gt;</comment>
                    <comment id="12611602" author="yseeley@gmail.com" created="Tue, 8 Jul 2008 15:30:01 +0100"  >&lt;p&gt;Once we have a read-only IndexReader, if we still want the deleting-reader then we could  also weaken the semantics of deleteDocument such that applications would need to synchronize themselves to guarantee visibility to another thread.&lt;/p&gt;

&lt;p&gt;We could safely do this for a deleting-reader by pre-allocating the BitVector objects, thus eliminating the possibility of a thread seeing a partially constructed object.&lt;/p&gt;</comment>
                    <comment id="12621020" author="mikemccand" created="Fri, 8 Aug 2008 20:27:09 +0100"  >&lt;p&gt;I took a first cut at creating an explicit read only IndexReader&lt;br/&gt;
(attached), which is an alternative to the first patch here.&lt;/p&gt;

&lt;p&gt;I added &quot;boolean readOnly&quot; to 3 of the IndexReader open methods, and&lt;br/&gt;
created ReadOnlySegmentReader and ReadOnlyMultiSegmentReader.  The&lt;br/&gt;
classes are trivial &amp;#8211; they subclass the parent and just override&lt;br/&gt;
acquireWriteLock (to throw an exception) and isDeleted.&lt;/p&gt;

&lt;p&gt;reopen() also preserves readOnly-ness, and I fixed merging to open readOnly&lt;br/&gt;
IndexReaders.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could safely do this for a deleting-reader by pre-allocating the BitVector objects, thus eliminating the possibility of a thread seeing a partially constructed object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I didn&apos;t do this one yet ... it makes me a bit nervous because it&lt;br/&gt;
means that people who just do IndexReader.open on an index with no&lt;br/&gt;
deletions pay the RAM cost upfront of allocating the BitVector.&lt;/p&gt;

&lt;p&gt;Really, I think we want to default IndexReader.open to be&lt;br/&gt;
readOnly=true (which we can&apos;t do until 3.0) at which point doing the&lt;br/&gt;
above seems safer since you&apos;d have to go out of your way to open a&lt;br/&gt;
non-readOnly IndexReader.&lt;/p&gt;</comment>
                    <comment id="12621024" author="yseeley@gmail.com" created="Fri, 8 Aug 2008 20:37:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;I didn&apos;t do this one yet ... it makes me a bit nervous because it means that people who just do IndexReader.open on an index with no deletions pay the RAM cost upfront of allocating the BitVector.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, which is why I said it was for a &quot;deleting-reader&quot; (which presumes the existence of read-only-readers).&lt;/p&gt;</comment>
                    <comment id="12623621" author="mikemccand" created="Tue, 19 Aug 2008 11:14:50 +0100"  >&lt;p&gt;I&apos;d like to get this (read-only IndexReader) into 2.4.&lt;/p&gt;</comment>
                    <comment id="12623667" author="mikemccand" created="Tue, 19 Aug 2008 14:06:03 +0100"  >&lt;p&gt;Attached new rev of this patch.  I think it&apos;s ready to commit.  I&apos;ll wait a few days.&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Updated javadocs.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Stated clearly that in 3.0 the default for readOnly will switch from false to true.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Factored out IndexReader.READ_ONLY_DEFAULT so we have one clear place to change from false to true, in 3.0.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12624634" author="eksdev" created="Fri, 22 Aug 2008 10:31:21 +0100"  >&lt;p&gt;Mike, did someone measure what this brings? &lt;/p&gt;

&lt;p&gt;This practically reduces need to have many IndexReader-s in MT setup when Index is used in read only case.&lt;/p&gt;



</comment>
                    <comment id="12624637" author="mikemccand" created="Fri, 22 Aug 2008 10:55:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike, did someone measure what this brings? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so &amp;#8211; I haven&apos;t yet tested how much of a bottleneck this was / how much it helps that isDeleted is no longer synchronized.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This practically reduces need to have many IndexReader-s in MT setup when Index is used in read only case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I &lt;b&gt;really&lt;/b&gt; want to get Lucene to this point, but I fear &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-753&quot; title=&quot;Use NIO positional read to avoid synchronization in FSIndexInput&quot;&gt;&lt;del&gt;LUCENE-753&lt;/del&gt;&lt;/a&gt; may still stand in the way since many threads can pile up when accessing the same file.  Sadly, an optimized index exacerbates the situation (the polar opposite of what you&apos;d expect when optimizing an index).  On every platform except Windows, this patch combined with NIOFSDirectory ought to solve all known search-time bottlenecks.&lt;/p&gt;</comment>
                    <comment id="12624657" author="eksdev" created="Fri, 22 Aug 2008 12:40:43 +0100"  >&lt;p&gt;ok, I see, thanks. &lt;br/&gt;
At least, It resolves an issue completely for RAM based indexes.&lt;/p&gt;

&lt;p&gt;We have seen performance drop for RAM based index when we switched to MT setup with shared IndexReader, I am not yet sure what is the reason for it,  problems in our code or this is indeed related to lucene. I am talking about 25-30% drop on 3 Threads on 4-Core CPU.  Must measure it properly...&lt;/p&gt;
</comment>
                    <comment id="12625061" author="mikemccand" created="Sat, 23 Aug 2008 14:47:41 +0100"  >&lt;p&gt;I just committed this.  Thanks Jason!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12385397" name="lucene-1329.patch" size="3069" author="jasonrutherglen" created="Mon, 7 Jul 2008 14:13:52 +0100" />
                    <attachment id="12388522" name="LUCENE-1329.patch" size="33509" author="mikemccand" created="Tue, 19 Aug 2008 14:06:03 +0100" />
                    <attachment id="12387845" name="LUCENE-1329.patch" size="26461" author="mikemccand" created="Fri, 8 Aug 2008 20:27:09 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Jul 2008 10:30:20 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12419</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26399</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>