<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:16:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1401/LUCENE-1401.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1401] Deprecation of autoCommit in 2.4 leads to compile problems, when autoCommit should be false</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1401</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I am currently changing my code to be most compatible with 2.4. I switched on deprecation warnings and got a warning about the autoCommit parameter in IndexWriter constructors.&lt;/p&gt;

&lt;p&gt;My code &lt;b&gt;should&lt;/b&gt; use autoCommit=false, so I want to use the new semantics. The default of IndexWriter is still autoCommit=true. My problem now: How to disable autoCommit whithout deprecation warnings?&lt;/p&gt;

&lt;p&gt;Maybe, the &quot;old&quot; constructors, that are deprecated should use autoCommit=true. But there are new constructors with this &quot;IndexWriter.MaxFieldLength mfl&quot; in it, that appear new in 2.4 but are deprecated:&lt;/p&gt;

&lt;p&gt;IndexWriter(Directory d, boolean autoCommit, Analyzer a, boolean create, IndexDeletionPolicy deletionPolicy, IndexWriter.MaxFieldLength mfl) &lt;br/&gt;
          Deprecated. This will be removed in 3.0, when autoCommit will be hardwired to false. Use IndexWriter(Directory,Analyzer,boolean,IndexDeletionPolicy,MaxFieldLength) instead, and call commit() when needed.&lt;/p&gt;

&lt;p&gt;What the hell is meant by this, a new constructor that is deprecated? And the hint is wrong. If I use the other constructor in the warning, I get autoCommit=true.&lt;/p&gt;

&lt;p&gt;There is something completely wrong.&lt;/p&gt;

&lt;p&gt;It should be clear, which constructors set autoCommit=true, which set it per default to false (perhaps new ones), and the Deprecated text is wrong, if autoCommit does not default to false.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12404936">LUCENE-1401</key>
            <summary>Deprecation of autoCommit in 2.4 leads to compile problems, when autoCommit should be false</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Sep 2008 10:08:24 +0100</created>
                <updated>Sat, 11 Oct 2008 13:49:42 +0100</updated>
                    <resolved>Thu, 25 Sep 2008 13:07:46 +0100</resolved>
                            <version>2.4</version>
                <version>2.9</version>
                                <fixVersion>2.4</fixVersion>
                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12633662" author="mikemccand" created="Tue, 23 Sep 2008 10:40:09 +0100"  >
&lt;p&gt;Achieving the migration from autoCommit=true to autoCommit=false is somewhat tricky.  As things stand now, all ctors that don&apos;t take autoCommit param still default autoCommit to true.&lt;/p&gt;

&lt;p&gt;Maybe we could  flip the autoCommit default to false, now, with the new ctors (the ones that take a MaxFieldLength).  This may be better since you have to explicitly update your code, anyway, to switch to IndexWriter&apos;s new ctors and so if we call this change out in the javadocs, users are more likely to catch it.  Whereas if we suddenly flip the default for autoCommit to false in 3.0, since there&apos;s no API signature change, users may not realize this had happened.&lt;/p&gt;

&lt;p&gt;OK I like that approach better.  Are there any objections?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But there are new constructors with this &quot;IndexWriter.MaxFieldLength mfl&quot; in it, that appear new in 2.4 but are deprecated&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree: we should not introduce new deprecated ctors.  I&apos;ll eliminate these.  This happened because there were two separate changes (addition of MaxFieldLength, and, deprecation of autoCommit).&lt;/p&gt;
</comment>
                    <comment id="12633927" author="mikemccand" created="Tue, 23 Sep 2008 23:02:47 +0100"  >&lt;p&gt;Attached patch that removes the new deprecated ctors, and sets autoCommit=false for the new ctors (that take MaxFieldLength).&lt;/p&gt;

&lt;p&gt;The bulk of the patch is fixing all places where we were calling the new deprecated ctors.&lt;/p&gt;</comment>
                    <comment id="12634059" author="thetaphi" created="Wed, 24 Sep 2008 09:14:07 +0100"  >&lt;p&gt;This patch seems to work, the IndexWriters created by the MaxFieldLength ctors are with autocommit=false, I have seen this, because the segment file does not change during indexing.&lt;/p&gt;

&lt;p&gt;There is on small thing (was also there before your patch):&lt;br/&gt;
I use writer.setUseCompoundFile(true) to use compound files (which is also the default). It generates normally always only CFS files (on index creation, when optimizing,...). There is only one use case, when cfs and cfx files are generated:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Use IndexWriter with create=true&lt;/li&gt;
	&lt;li&gt;add documents to the index&lt;/li&gt;
	&lt;li&gt;optimize the index (without closing in between)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After that the optimized index contains of one cfs and one cfx. During indexing (before optimization), I always see only cfs files for new segments (and for short times as usual the contents tfx,...).&lt;/p&gt;

&lt;p&gt;When optimizing the index after closing it or later after adding documents, i got only one cfs file.&lt;/p&gt;

&lt;p&gt;Two questions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Is this a small bug, which would be not release critical - but it is strange?&lt;/li&gt;
	&lt;li&gt;How can I enable creation of doc store (cfx) and cfs always, I found nothing in the docs. In my opinion the separate cfs/cfx files are good for search performance (right?).&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12634094" author="mikemccand" created="Wed, 24 Sep 2008 11:02:15 +0100"  >
&lt;p&gt;That (cfx/cfs file creation) is actually &quot;normal&quot; behavior for&lt;br/&gt;
Lucene.&lt;/p&gt;

&lt;p&gt;With autoCommit=false, in a single session of IndexWriter, Lucene&lt;br/&gt;
will share the doc store files (stored fields, term vectors) across&lt;br/&gt;
multiple segments.  This saves alot of merge time because those files&lt;br/&gt;
don&apos;t need to be merged if we are merging segments that all share the&lt;br/&gt;
same doc store files.  When building up a large index anew this saves&lt;br/&gt;
alot of time.&lt;/p&gt;

&lt;p&gt;A cfx file is the compound-file format of the doc store files.&lt;/p&gt;

&lt;p&gt;However, when segments spanning multiple doc stores are merged, then&lt;br/&gt;
the doc store files are in fact merged, and written privately for that&lt;br/&gt;
one segment, and then folded into that segment&apos;s cfs file.  When all&lt;br/&gt;
such segments reference a given doc store segment are merged away,&lt;br/&gt;
then that doc store segment is deleted.&lt;/p&gt;

&lt;p&gt;So it&apos;s currently only the &quot;level 0&quot; segments that may share a cfx&lt;br/&gt;
file.  As a future optimization we could consider extending Lucene&apos;s&lt;br/&gt;
index format so that a single segment could reference multiple doc&lt;br/&gt;
stores.  This would require logic in FieldsReader and&lt;br/&gt;
TermVectorsReader to do a binary search when locating which doc store&lt;br/&gt;
segment holds a given document, but, would enable merging non level 0&lt;br/&gt;
segments to skip having to merge the doc store.  This is an invasive&lt;br/&gt;
optimization.&lt;/p&gt;

&lt;p&gt;So you can&apos;t separately control when Lucene uses cfx file; it&apos;s the&lt;br/&gt;
merge policy that indirectly controls this.&lt;/p&gt;</comment>
                    <comment id="12634151" author="thetaphi" created="Wed, 24 Sep 2008 15:31:45 +0100"  >&lt;p&gt;Thanks for the info, it did not know this!&lt;/p&gt;</comment>
                    <comment id="12634456" author="mikemccand" created="Thu, 25 Sep 2008 13:07:46 +0100"  >&lt;p&gt;Committed revision 698932 on trunk (2.9) and 698933 on 2.4.  Thanks Uwe!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12390789" name="LUCENE-1401.patch" size="74857" author="mikemccand" created="Tue, 23 Sep 2008 23:02:47 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Sep 2008 09:40:09 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12350</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26327</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>