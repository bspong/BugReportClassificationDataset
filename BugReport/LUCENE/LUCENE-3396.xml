<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:18:36 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3396/LUCENE-3396.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3396] Make TokenStream Reuse Mandatory for Analyzers</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3396</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2309&quot; title=&quot;Fully decouple IndexWriter from analyzers&quot;&gt;&lt;del&gt;LUCENE-2309&lt;/del&gt;&lt;/a&gt; it became clear that we&apos;d benefit a lot from Analyzer having to return reusable TokenStreams.  This is a big chunk of work, but its time to bite the bullet.&lt;/p&gt;

&lt;p&gt;I plan to attack this in the following way:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Collapse the logic of ReusableAnalyzerBase into Analyzer&lt;/li&gt;
	&lt;li&gt;Add a ReuseStrategy abstraction to Analyzer which controls whether the TokenStreamComponents are reused globally (as they are today) or per-field.&lt;/li&gt;
	&lt;li&gt;Convert all Analyzers over to using TokenStreamComponents.  I&apos;ve already seen that some of the TokenStreams created in tests need some work to be reusable (even if they aren&apos;t reused).&lt;/li&gt;
	&lt;li&gt;Remove Analyzer.reusableTokenStream and convert everything over to using .tokenStream (which will now be returning reusable TokenStreams).&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12519800">LUCENE-3396</key>
            <summary>Make TokenStream Reuse Mandatory for Analyzers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="cmale">Chris Male</assignee>
                                <reporter username="cmale">Chris Male</reporter>
                        <labels>
                    </labels>
                <created>Tue, 23 Aug 2011 08:51:38 +0100</created>
                <updated>Fri, 10 May 2013 11:44:18 +0100</updated>
                    <resolved>Mon, 14 Nov 2011 11:04:56 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                                                  <comments>
                    <comment id="13089394" author="rcmuir" created="Tue, 23 Aug 2011 12:17:29 +0100"  >&lt;p&gt;can we create a separate sub-tasks to fix the tests (so we can backport at least a majority of the changes)?&lt;/p&gt;</comment>
                    <comment id="13089396" author="cmale" created="Tue, 23 Aug 2011 12:24:16 +0100"  >&lt;p&gt;Do you mean correcting the TokenStreams in tests so they are reusable?&lt;/p&gt;</comment>
                    <comment id="13089414" author="rcmuir" created="Tue, 23 Aug 2011 13:16:53 +0100"  >&lt;p&gt;yeah: just thinking it could be a nice cleanup? Some of these are messy &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13089417" author="cmale" created="Tue, 23 Aug 2011 13:25:41 +0100"  >&lt;p&gt;Done. &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3397&quot; title=&quot;Cleanup Test TokenStreams so they are reusable&quot;&gt;&lt;del&gt;LUCENE-3397&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13091600" author="cmale" created="Fri, 26 Aug 2011 06:42:22 +0100"  >&lt;p&gt;This is the uber patch which converts all but 8 Analyzers over to using ReusableAnalyzerBase.&lt;/p&gt;

&lt;p&gt;This also introduces the ReuseStrategy concept to ReusableAnalyzerBase (will need some documentation before committing).  For simplicity, the ReuseStrategy maintains its own CloseableThreadLocal.&lt;/p&gt;

&lt;p&gt;The remaining Analyzers can be converted when I push the ReuseAnalyzerBase logic into Analyzer.&lt;/p&gt;

&lt;p&gt;After some small tidy (and a review) I think we should commit this even though we&apos;re going to collapse ReusabeAnalyzerBase.&lt;/p&gt;</comment>
                    <comment id="13091611" author="cmale" created="Fri, 26 Aug 2011 06:59:05 +0100"  >&lt;p&gt;Improved patch which does some cleanup and documentation ReuseAnalyzerBase.ReuseStrategy.&lt;/p&gt;

&lt;p&gt;I&apos;m seeing one test fail in TestPayloads, this class does some insanely non-reusable stuff with payloads.  I&apos;ll keep digging.&lt;/p&gt;</comment>
                    <comment id="13091618" author="cmale" created="Fri, 26 Aug 2011 07:10:39 +0100"  >&lt;p&gt;Grrr TestPayloads does some really non-reusable stuff.  The only two options I can see are either using a NoReuseStrategy implementation in the test, or instantiate the Analyzer again every time it does something crazy.&lt;/p&gt;

&lt;p&gt;I&apos;ve chosen the latter since I don&apos;t want to start the NoReuseStrategy slippery slope.&lt;/p&gt;

&lt;p&gt;We&apos;re in good shape now (minus this stupidity).&lt;/p&gt;</comment>
                    <comment id="13091818" author="rcmuir" created="Fri, 26 Aug 2011 16:11:27 +0100"  >&lt;p&gt;just a quick glance: the MockAnalyzer needs to reuse-per-field?&lt;/p&gt;

&lt;p&gt;This way we test the case where payloads are enabled for one field but not for another.&lt;/p&gt;</comment>
                    <comment id="13091829" author="cmale" created="Fri, 26 Aug 2011 16:30:04 +0100"  >&lt;p&gt;Absolutely, I missed that fieldname usage.&lt;/p&gt;

&lt;p&gt;Updated patch.  Still all green.&lt;/p&gt;</comment>
                    <comment id="13097069" author="simonw" created="Mon, 5 Sep 2011 10:05:32 +0100"  >&lt;p&gt;this patch looks good to me! I like the reuse strategy and how you factored out the thread local stuff. &lt;br/&gt;
I think we should commit and let bake this in?&lt;/p&gt;</comment>
                    <comment id="13097072" author="thetaphi" created="Mon, 5 Sep 2011 10:30:12 +0100"  >&lt;p&gt;Hi, the ReuseStrategies look fine. I am just confused about the Generics. Why not make the whole abstract ReuseStrategy T-typed? Then also ThreadLocal&amp;lt;T&amp;gt; is used and no casting anywhere. The subclasses for PerField and global then are typed to the correct class (Map&amp;lt;&amp;gt; or TSComponents).&lt;/p&gt;</comment>
                    <comment id="13097076" author="cmale" created="Mon, 5 Sep 2011 10:43:02 +0100"  >&lt;p&gt;Hi Uwe,&lt;/p&gt;

&lt;p&gt;I originally had ReuseStrategy with a generic type but then decided it was overkill since it only benefits implementations, not users of ReuseStrategy.  If we want the extra type safety, I&apos;ll happily make the change.&lt;/p&gt;</comment>
                    <comment id="13097083" author="thetaphi" created="Mon, 5 Sep 2011 10:53:17 +0100"  >&lt;p&gt;I agree its somehow overkill. But if not on class level I would even remove the T parameter from ther getter method, because it does not really fit, it is only used there, not even on the setter. There is no type enforcement anywhere, so the extra T is just to remove the casting on the caller of the protected method, but adding a SuppressWarnings on the implementor&apos;s side. So either make all T or use Object everywhere.&lt;/p&gt;</comment>
                    <comment id="13097119" author="cmale" created="Mon, 5 Sep 2011 11:41:55 +0100"  >&lt;p&gt;Patch updated to trunk.&lt;/p&gt;

&lt;p&gt;Generic &amp;lt;T&amp;gt; is removed from ReuseStrategy.&lt;/p&gt;</comment>
                    <comment id="13098045" author="cmale" created="Tue, 6 Sep 2011 15:41:02 +0100"  >&lt;p&gt;I&apos;m going to commit this soon and then work on the remaining Analyzers.&lt;/p&gt;</comment>
                    <comment id="13098057" author="rcmuir" created="Tue, 6 Sep 2011 15:56:13 +0100"  >&lt;p&gt;patch looks great: one question, should we keep the &apos;reset can return false and we do not reuse&apos; ?&lt;/p&gt;

&lt;p&gt;this seems like it might be obselete, though it would introduce an API break, I think maybe we should change it to void?&lt;/p&gt;</comment>
                    <comment id="13098580" author="cmale" created="Wed, 7 Sep 2011 05:02:09 +0100"  >&lt;p&gt;Hmmm, I agree that we should change it to void.  If the source cannot be reset, it should throw an Exception.  We need to be able to rely on the fact that we are using reusable components.&lt;/p&gt;

&lt;p&gt;I&apos;ll update the patch.&lt;/p&gt;</comment>
                    <comment id="13098582" author="cmale" created="Wed, 7 Sep 2011 05:10:56 +0100"  >&lt;p&gt;Patch updated to reset now returns void.  I&apos;ll make sure to note this compat break in the CHANGES.txt.&lt;/p&gt;</comment>
                    <comment id="13101994" author="cmale" created="Sat, 10 Sep 2011 07:27:06 +0100"  >&lt;p&gt;Patch updated to trunk.&lt;/p&gt;

&lt;p&gt;We&apos;re good to go now.&lt;/p&gt;</comment>
                    <comment id="13102443" author="cmale" created="Mon, 12 Sep 2011 06:51:00 +0100"  >&lt;p&gt;Committed revision 1169607.&lt;/p&gt;

&lt;p&gt;Now attacking the remaining Analyzers.&lt;/p&gt;</comment>
                    <comment id="13102459" author="cmale" created="Mon, 12 Sep 2011 07:36:22 +0100"  >&lt;p&gt;During the merging of changes I lost some conversions of some test Analyzers.&lt;/p&gt;

&lt;p&gt;Patch addresses them (including the unholy TestPayloads).&lt;/p&gt;</comment>
                    <comment id="13102508" author="cmale" created="Mon, 12 Sep 2011 10:01:07 +0100"  >&lt;p&gt;Committed revision 1169654.&lt;/p&gt;</comment>
                    <comment id="13105254" author="cmale" created="Thu, 15 Sep 2011 11:18:27 +0100"  >&lt;p&gt;Patch which converts the last of the Analyzers over to using ReusableAnalyzerBase.  At this stage, RAB is now the only extension of Analyzer.&lt;/p&gt;

&lt;p&gt;Patch includes a few unique changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Adds AnalyzerWrapper which is used by Analyzers which wrap other Analyzers.  This is necessary to allow access the TokenStreamComponents of the wrapped Analyzers, without making TSC public.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;IndexSchemaRuntimeFieldTest is made out of IndexSchemaTest due to testRuntimeFieldCreation doing some thread-unsafe changes to the Analyzers stored in  IndexSchema.  When run in IndexSchemaTest, depending on the execution order, the test fails.  When run by itself, there is no problems.  I think this is okay because the actual code being tested is documented as being thread-unsafe and the test also notes it does some tacky things.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m not going to look to commit this just yet, as I want to collapse Analyzer and RAB into a single class.&lt;/p&gt;</comment>
                    <comment id="13112302" author="cmale" created="Thu, 22 Sep 2011 04:47:22 +0100"  >&lt;p&gt;Patch which finalizes the remaining Analyzer changes and merges ReusableAnalyzerBase and Analyzer together.  &lt;/p&gt;

&lt;p&gt;Command for the patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;# Keep old Analyzer.java temporarily &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; comparison
svn rename lucene/src/java/org/apache/lucene/analysis/Analyzer.java lucene/src/java/org/apache/lucene/analysis/Analyzer.java.old
svn rename lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java lucene/src/java/org/apache/lucene/analysis/Analyzer.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have updated the javadocs to reflect the merging and have removed the assertFinal() assertion since tokenStream() and reusableTokenStream() are always final now.&lt;/p&gt;

&lt;p&gt;All tests pass and javadocs build.  I am looking to commit this soon (with a MIGRATE.txt entry).&lt;/p&gt;</comment>
                    <comment id="13113124" author="cmale" created="Fri, 23 Sep 2011 04:07:34 +0100"  >&lt;p&gt;Plan to commit this tomorrow.&lt;/p&gt;</comment>
                    <comment id="13114131" author="rcmuir" created="Sun, 25 Sep 2011 05:30:51 +0100"  >&lt;p&gt;I think this one can be marked resolved?&lt;/p&gt;

&lt;p&gt;by the way, I reviewed the patches here: thanks for putting in all this effort!&lt;br/&gt;
this fixes my biggest pet peeve about lucene....awesome.&lt;/p&gt;</comment>
                    <comment id="13114136" author="cmale" created="Sun, 25 Sep 2011 05:36:39 +0100"  >&lt;p&gt;I haven&apos;t actually committed yet.  I was hoping you&apos;d have a chance to review before I did.  I&apos;ll now commit.&lt;/p&gt;</comment>
                    <comment id="13114149" author="rcmuir" created="Sun, 25 Sep 2011 06:06:32 +0100"  >&lt;p&gt;+1!&lt;/p&gt;</comment>
                    <comment id="13114151" author="cmale" created="Sun, 25 Sep 2011 06:12:33 +0100"  >&lt;p&gt;Committed revision 1175297.&lt;/p&gt;

&lt;p&gt;I don&apos;t want to mark this as resolved just yet.  I want to spin off another sub-task to move all consumers over to reusableTokenStream (and then rename it back to tokenStream).&lt;/p&gt;</comment>
                    <comment id="13149541" author="simonw" created="Mon, 14 Nov 2011 10:30:55 +0000"  >&lt;p&gt;chris, this seems to be done no? can you close it?&lt;/p&gt;</comment>
                    <comment id="13149569" author="cmale" created="Mon, 14 Nov 2011 11:04:57 +0000"  >&lt;p&gt;TokenStream reuse is now mandatory&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310050">
                <name>Regression</name>
                                <outwardlinks description="breaks">
                            <issuelink>
            <issuekey id="12539668">LUCENE-3721</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12493991" name="LUCENE-3396-forgotten.patch" size="8836" author="cmale" created="Mon, 12 Sep 2011 07:36:22 +0100" />
                    <attachment id="12493901" name="LUCENE-3396-rab.patch" size="102841" author="cmale" created="Sat, 10 Sep 2011 07:27:06 +0100" />
                    <attachment id="12493268" name="LUCENE-3396-rab.patch" size="103967" author="cmale" created="Wed, 7 Sep 2011 05:10:56 +0100" />
                    <attachment id="12493019" name="LUCENE-3396-rab.patch" size="101223" author="cmale" created="Mon, 5 Sep 2011 11:41:55 +0100" />
                    <attachment id="12491792" name="LUCENE-3396-rab.patch" size="106821" author="cmale" created="Fri, 26 Aug 2011 16:30:04 +0100" />
                    <attachment id="12491742" name="LUCENE-3396-rab.patch" size="106400" author="cmale" created="Fri, 26 Aug 2011 07:10:39 +0100" />
                    <attachment id="12491741" name="LUCENE-3396-rab.patch" size="105171" author="cmale" created="Fri, 26 Aug 2011 06:59:05 +0100" />
                    <attachment id="12491738" name="LUCENE-3396-rab.patch" size="103136" author="cmale" created="Fri, 26 Aug 2011 06:42:22 +0100" />
                    <attachment id="12494599" name="LUCENE-3396-remaining-analyzers.patch" size="44022" author="cmale" created="Thu, 15 Sep 2011 11:18:27 +0100" />
                    <attachment id="12496063" name="LUCENE-3396-remaining-merging.patch" size="185429" author="cmale" created="Thu, 22 Sep 2011 04:47:22 +0100" />
                </attachments>
            <subtasks>
            <subtask id="12519818">LUCENE-3397</subtask>
            <subtask id="12519967">LUCENE-3400</subtask>
            <subtask id="12524551">LUCENE-3455</subtask>
            <subtask id="12524556">LUCENE-3456</subtask>
            <subtask id="12524790">LUCENE-3466</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Aug 2011 11:17:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3489</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24300</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>