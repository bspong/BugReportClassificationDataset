<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1908/LUCENE-1908.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1908] Similarity javadocs for scoring function to relate more tightly to scoring models in effect</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1908</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;See discussion in the related issue.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12435467">LUCENE-1908</key>
            <summary>Similarity javadocs for scoring function to relate more tightly to scoring models in effect</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="doronc">Doron Cohen</assignee>
                                <reporter username="doronc">Doron Cohen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 11 Sep 2009 20:40:51 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:39 +0100</updated>
                    <resolved>Tue, 15 Sep 2009 18:57:44 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12754300" author="doronc" created="Fri, 11 Sep 2009 20:46:09 +0100"  >&lt;p&gt;Attached patch adds explanations on how current scoring function is derived from VSM.&lt;br/&gt;
I hope it is not to &quot;colorful&quot;, and that it indeed clarifies rather than confuses.&lt;br/&gt;
I marked it for 2.9, because if others like it I think it would be good to include it, but if there is no concenzus on this modification let&apos;s move it to a future release.&lt;/p&gt;</comment>
                    <comment id="12754301" author="doronc" created="Fri, 11 Sep 2009 20:50:07 +0100"  >&lt;p&gt;just relates to, not blocking...&lt;/p&gt;</comment>
                    <comment id="12754373" author="doronc" created="Fri, 11 Sep 2009 22:55:38 +0100"  >&lt;p&gt;Suggested Similarity javadoc can be reiewed here: &lt;a href=&quot;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12754470" author="markrmiller@gmail.com" created="Sat, 12 Sep 2009 05:03:22 +0100"  >&lt;p&gt;Looks great!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Document Euclidean norm |V(d)| is excluded by Lucene, for indexing performance considerstions &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm - I&apos;m not sure if that is right either. Are we not replacing the |V(d)| normalization factor with our document length factor?&lt;/p&gt;

&lt;p&gt;That&apos;s how it appears to me anyway -&lt;/p&gt;

&lt;p&gt;for |V(d)| you have many options right?&lt;/p&gt;

&lt;p&gt;the cosine normalization - your standard euclidean length - |V(d)| &lt;br/&gt;
or none (eg 1)&lt;br/&gt;
or pivoted normalized doc length&lt;br/&gt;
or SweetSpotSimilarity&apos;s formula&lt;br/&gt;
or the quick,dirty,easy, not great default doc length normalization that Lucene uses by default&lt;br/&gt;
or Okapi&apos;s formula, &lt;br/&gt;
or ...&lt;/p&gt;

&lt;p&gt;So we are replacing (which everyone generally does) not dropping right?&lt;/p&gt;

&lt;p&gt;And I don&apos;t think we are replacing for performance reasons (though it is complicated to calculate) - we are replacing because its not a great normalization factor.&lt;br/&gt;
Using |V(d)| eliminates info on the length of the orig document - but longer documents will still have higher tf&apos;s and more distinct terms - so it unnaturally gives them&lt;br/&gt;
an advantage (most long docs will be repeated pieces or cover multiple topics). So its not generally a good normalization factor, and we have a chosen another?&lt;br/&gt;
(the one we have chosen isnt great either - long docs are punished too much and short preferred too much)&lt;/p&gt;

&lt;p&gt;Again, I&apos;m not an IR guy, but thats what my modest take is.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;edit: I suppose you could argue that you could do cosine normalization and then a further normalization approach on that, and in that sense we are dropping the cosine normalization because its too expensive. But from what I can see, it appears more the case that you try and use a normalization factor that can just replace cosine normalization - like the pivoted normalization which rotates the cosine normalization curve. I think pivoted is something like 1/root(stuff, ie unique terms), so our norm of 1/root(L) is of a similar, simpler, vein. So thats why I think we are not really dropping it - we are choosing one of the variety of replacements.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12754471" author="shaie" created="Sat, 12 Sep 2009 05:04:55 +0100"  >&lt;p&gt;This looks great ! Really helpful. Few comments:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;typo: &quot;perscoective&quot; should be &quot;perspective&quot;&lt;/li&gt;
	&lt;li&gt;Where you describe the different components, some bullets are missing their &quot;component&quot; name, like query-boost (you write it for doc-boost for example).&lt;/li&gt;
	&lt;li&gt;I think if you make those &quot;component&quot; slanted or something, they&apos;ll stand out better? This is in general for this page, not just this section.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12754571" author="doronc" created="Sat, 12 Sep 2009 18:47:19 +0100"  >&lt;p&gt;Mark and Shai Thanks for reviewing!&lt;/p&gt;

&lt;p&gt;Mark, I think you have a point here (and I am definitely no more an IR guy than you are &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;/p&gt;

&lt;p&gt;Truth is I was surprised to find out (through your comments in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1896&quot; title=&quot;Modify confusing javadoc for queryNorm&quot;&gt;&lt;del&gt;LUCENE-1896&lt;/del&gt;&lt;/a&gt;) that this component of the score is &quot;missing&quot;, and I indeed thought that the &quot;right thing to do&quot; (if there is such thing as &quot;right&quot;) really is to do both: normalize to the unit vector, and then normalize by length to compensate for &quot;unfair&quot; advantage of long documents. &lt;/p&gt;

&lt;p&gt;But you&apos;re right, and the way I presented V(d) normalization and doc-length normalization is incorrect, as if it is a the right thing to do both, and the way it is presented is not doing justice to Lucene. I will change the writing. &lt;/p&gt;

&lt;p&gt;Interestingly, for a document containing N distinct terms, the 1/Euclidean-norm and Lucene&apos;s default similarity&apos;s length norm are the same: 1/sqrt(N). But if you double that doc to have two occurrences of each of the N distinct terms, its length would be 2N, 1/Euclidean-norm would be 1/sqrt(4N) but Lucene&apos;s default similarity&apos;s length norm would be 1/sqrt(2N). So we will punish documents with duplicate terms less than would the Euclidean norm...  &lt;/p&gt;

&lt;p&gt;I am not aware of an evaluation or discussion of this - I mean - why was this approach selected, and so I assumed (under question) that it was merely for performance considerations. You said in Lucene-1896:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;not just similar properties - but many times better properties - the standard normalization would not factor in document length at all - it essentially removes it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is it really better? It seems to &quot;punish&quot; the same for length due to distinct terms, and to punish less for length due to duplicate terms. Is this really a desired behavior? My intuition says no, but I am not sure.&lt;/p&gt;

&lt;p&gt;Anyhow this issue more about describing what Lucene is doing today than on what should Lucene do, so think I have the correct picture now (except for historical justification which is interesting but not a show stopper).&lt;/p&gt;

&lt;p&gt;Shai thanks for the fixes. &lt;/p&gt;

&lt;p&gt;(updated patch to follow).&lt;/p&gt;</comment>
                    <comment id="12754577" author="markrmiller@gmail.com" created="Sat, 12 Sep 2009 19:09:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;Is it really better? It seems to &quot;punish&quot; the same for length due to distinct terms, and to punish less for length due to duplicate terms. Is this really a desired behavior? My intuition says no, but I am not sure.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Its only desired behavior if you have a corpus that favors it, but most do. I think you can think of the |V(d)| as taking out information about the document length - you start with an m space vector, with each term given a weight depending on how many times it occurs - in other words, there is information about the length of that document there, and when you normalize by |V(d)|, you will take out that information - but it will appear more similar the more unique terms it started with and the higher the tf&apos;s. So that method favors long docs, witch will naturally have more of both, though of course not always be more similar.&lt;/p&gt;

&lt;p&gt;All of the normalizations I have seen appear in the vein of |V(d)| -eg 1/root(something). All of the others also try and make up for this doc length problem - by messing with the curve so that ultra long docs are not favored too highly. Our default method is a known not very good one - buts its also very fast and efficient compared to the better ones. Sweetspot is much better and I think still efficient - but you need to tune the right params I believe.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;edit *&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m still a little confused I guess &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; The longer docs will have larger weights naturally is what I meant, but larger weights actually hurts in the cosine normalization - so it actually over punishes I guess? I dunno - all of this over punish/ under punish is in comparison to a relevancy curve they figure out ( a probability of relevance as a function of document length), and how the pivoted cosine curves compare against it. I&apos;m just reading across random interweb pdfs from google. Apparently our pivot also over punishes large docs and over favors small, the same as this one, but perhaps not as bad ? I&apos;m seeing that in a Lucene/Juru research pdf. This stuff is hard to grok on first pass.&lt;/p&gt;</comment>
                    <comment id="12754595" author="doronc" created="Sat, 12 Sep 2009 20:31:09 +0100"  >&lt;p&gt;Attached fixes according to comments by Shai and Mark:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;spell/typos&lt;/li&gt;
	&lt;li&gt;slanting definitions and in-text formulas.&lt;/li&gt;
	&lt;li&gt;normalization of doc-vector/doc-length is description was fixed.&lt;/li&gt;
	&lt;li&gt;more &quot;eye friendly&quot; colors in the two large formulas.&lt;/li&gt;
	&lt;li&gt;added link to Euclidean-norm in the last paragraph on query-norm computation.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For convenient review of the patch see &lt;a href=&quot;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12754610" author="doronc" created="Sat, 12 Sep 2009 21:56:11 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;m still a little confused I guess &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That makes too of us... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The longer docs will have larger weights naturally is what I meant, but larger weights actually hurts in the cosine normalization - so it actually over punishes I guess? I dunno - all of this over punish/ under punish is in comparison to a relevancy curve they figure out ( a probability of relevance as a function of document length), and how the pivoted cosine curves compare against it. I&apos;m just reading across random interweb pdfs from google. Apparently our pivot also over punishes large docs and over favors small, the same as this one, but perhaps not as bad ? I&apos;m seeing that in a Lucene/Juru research pdf. This stuff is hard to grok on first pass.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In that work we got best results from Lucene (for TREC) with SweetSpot similarity and normalizing tf by average term-freq in doc.&lt;/p&gt;

&lt;p&gt;For me it was mainly experimental and intuitive, but I was not able to convince Hoss (or even convince myslf once I read Hoss comments) that this was justified theoretically. &lt;/p&gt;

&lt;p&gt;At that time I was not aware of the V(d) normalization delicacy we are discussing now. I think I understand things better now, and still I am not sure. Need to read &lt;a href=&quot;http://nlp.stanford.edu/IR-book/html/htmledition/pivoted-normalized-document-length-1.html&quot; class=&quot;external-link&quot;&gt;http://nlp.stanford.edu/IR-book/html/htmledition/pivoted-normalized-document-length-1.html&lt;/a&gt; and sleep on it... &lt;/p&gt;</comment>
                    <comment id="12754615" author="markrmiller@gmail.com" created="Sat, 12 Sep 2009 22:14:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;In that work we got best results from Lucene&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats funny - I didn&apos;t notice you were an author one that one! Small world.&lt;/p&gt;

&lt;p&gt;The original idea of why the cosine normalization for the doc vector is bad, I got from the free intro to info retrieval book thats out there -&lt;br/&gt;
but what it says doesn&apos;t fully jive with the info I am finding elsewhere, or my own common sense. Thats what has me most confused&lt;br/&gt;
at the moment - the intro to ir book appears to break it down so that you can explain it with the math (why going into the unit vector space favors longer docs) - but other work I am seeing says&lt;br/&gt;
the math tells you no such thing, and its just comparing it to the computed relevancy curve that tells you its not great.&lt;/p&gt;

&lt;p&gt;I dunno &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; - though at least I know a lot more than I did a few days ago - it never even occurred to me how the scoring we did equated to any kind&lt;br/&gt;
of dot product before this - I used to read Lucene&apos;s scoring algorithm and then look at the code and it was like .... okay - sure ... - so I&apos;ve come a long way.&lt;/p&gt;</comment>
                    <comment id="12754716" author="doronc" created="Sun, 13 Sep 2009 17:17:11 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The intro to ir book appears to break it down so that you can explain it with the math (why going into the unit vector space favors longer docs) - but other work I am seeing says the math tells you no such thing, and its just comparing it to the computed relevancy curve that tells you its not great.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To my (current) understanding it goes like this: normalizing all V(d)&apos;s to unit vector is losing all information about lengths of documents. For a large document made by duplicating a smaller one this is probably ok. For a large document which just contains lots of &quot;unique&quot; text this is probably wrong. To solve this, a different normalization is sometimes preferred, one that would not normalize V(d) to the unit vector. (very much in line with what you (Mark) wrote above, finally I understand this...).&lt;/p&gt;

&lt;p&gt;The pivoted length normalization which you mentioned is one different such normalization. Juru in fact is using this document length normalization. In our TREC experiments with Lucene we tried this approach (we modified Lucene indexing such that all require components were indexed as stored/cached fields and at search time we could try various scoring algorithms). It is interesting that pivoted length normalization did not work well - by our experiments - with Lucene for TREC.&lt;/p&gt;

&lt;p&gt;The document length normalization of Lucene&apos;s DefaultSimilarity (DS) now seems to me - intuitively - not so good - at least for the previously mentioned two edge cases, where doc1 is made of N distinct terms, and doc2 is made of same N distinct terms, but its length is 2N because each term appears twice. For doc1 DS will normalize to the unit vector same as EN, and for doc2 DS will normalize to a vector larger than the unit vector. However I think the desired behavior is the other way around - for doc2 to be the same as EN, and for doc1 to be normalized to a vector larger than the unit vector.&lt;/p&gt;

&lt;p&gt;Back to the documentation patch, again it seems wrong presenting as if both EU and some additional doc length normalization are required - fixed patch to follow...&lt;/p&gt;</comment>
                    <comment id="12754725" author="doronc" created="Sun, 13 Sep 2009 18:19:16 +0100"  >&lt;p&gt;New patch is more accurate about doc-length-normalization choices.  &lt;/p&gt;

&lt;p&gt;For  easy reviewing I updated &lt;a href=&quot;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&lt;/a&gt; accordingly.&lt;/p&gt;

&lt;p&gt;I plan to commit this in a day or two if there are no objections.&lt;/p&gt;</comment>
                    <comment id="12754731" author="tdunning" created="Sun, 13 Sep 2009 18:35:54 +0100"  >
&lt;p&gt;I apologize for complaining here without actually editing this text to illustrate what I would rather see, but the new text seems to say things like &quot;the scoring function is like this (formula) except that it isn&apos;t because it is really like this (other-formula) but that isn&apos;t really right either because it is like this (still-another-formula) which actually isn&apos;t right because of fields and &amp;lt;mumble&amp;gt;&quot;.&lt;/p&gt;

&lt;p&gt;There are also many small errors such as claiming that tf is &lt;b&gt;proportional&lt;/b&gt; to term frequency and idf is &lt;b&gt;proportional&lt;/b&gt; to inverse of document frequency.  Proportional means that there is a linear relationship which is definitely not the case here.  It would be better to say tf usually increases with increasing term frequency, although occasionally a constant might be used.  IDF, on the other hand, decreases with increasing document frequency. &lt;/p&gt;</comment>
                    <comment id="12754743" author="doronc" created="Sun, 13 Sep 2009 19:47:13 +0100"  >&lt;p&gt;Thanks for reviewing this Ted. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;the new text seems to say things like &quot;the scoring function is like this (formula) except that it isn&apos;t because it is really like this (other-formula) but that isn&apos;t really right either because it is like this (still-another-formula) which actually isn&apos;t right because of fields and &amp;lt;mumble&amp;gt;&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I see what you mean. &lt;/p&gt;

&lt;p&gt;I tried to take the reader of this from VSM to the actual elements computed and aggregated in Lucene scoring code. This would also answer questions several times asked in the lists: &quot;but what is the scoring model of Lucene&quot; - it is not that straightforward to tell why a certain method is called during scoring. &lt;/p&gt;

&lt;p&gt;But I think you have a good point - the reader is told &quot;this is the scoring formula&quot; just to discover 20 lines ahead that in fact &quot;that is the formula&quot; and yet again the same thing in another paragraph. &lt;/p&gt;

&lt;p&gt;I think all 3 formulas are required, just the gluing text should improve. Might have helped to have better English than mine for this, but I&apos;ll give it a try, I think I know how to write it better in this sense.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are also many small errors such as claiming that tf is proportional to term frequency and idf is proportional to inverse of document frequency. Proportional means that there is a linear relationship which is definitely not the case here. It would be better to say tf usually increases with increasing term frequency, although occasionally a constant might be used. IDF, on the other hand, decreases with increasing document frequency.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. &quot;Proportional&quot; is wrong. Thanks for catching this! In fact it appears wrongly in two other places in Similarity - idf() and in idfExplain().  In these two other places I think replacing it to &quot;related&quot; would be correct, i.e. like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Note that Searcher.maxDoc() is used instead of
org.apache.lucene.index.IndexReader.numDocs() 
because it is related to Searcher.docFreq(Term) , 
i.e., when one is inaccurate, so is the other, and 
in the same direction.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For tf and idf I think this will do: &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Tf and Idf are described in more detail below, 
but for now, for completion, let&apos;s just say that 
for given term t and document (or query) x, 
Tf(t,x) is related to the number of occurrences of 
term t in x - when one increases so does 
the other - and idf(t) is similarly related to the 
inverse of the number of index documents 
containing term t. 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12754745" author="tdunning" created="Sun, 13 Sep 2009 20:24:38 +0100"  >
&lt;blockquote&gt;&lt;p&gt;Thanks for reviewing this Ted.  ...  Might have helped to have better English than mine for this&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No problem reviewing this.  Thanks to you for doing the hard part of actually writing it.  Being a critic is easy in comparison.&lt;/p&gt;

&lt;p&gt;And you English is doing fine.  If you get the ideas down, a hundred people can chime in with grammatical and spelling fixes.  And frankly, your English is so much better than any of my other languages that I would never be brave enough to complain.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think all 3 formulas are required, just the gluing text should improve. ... I think I know how to write it better in this sense.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good point.  This is the essence of my grumpiness.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that Searcher.maxDoc() is used instead of org.apache.lucene.index.IndexReader.numDocs() because it is related to Searcher.docFreq(Term), i.e., when one is inaccurate, so is the other, and in the same direction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, in this case, I think that the motivation is that maxDoc is very commonly exactly correct and typically vastly more efficient.  As you say, when it is wrong, docFreq can also be wrong the same way.  My suggestion would be this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that Searcher.maxDoc() is used instead of org.apache.lucene.index.IndexReader.numDocs() because it is more efficient to compute and is pretty much correct except for when many documents have been deleted.  In any case Searcher.docFreq(Term) is likely to have a similar problem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Regarding the proportional/related issue, I think that your language is fine.  At most, I would suggest &quot;varies with&quot; instead of &quot;related&quot; because it is slightly stronger, but you make the relationship abundantly clear in your text. &lt;/p&gt;
</comment>
                    <comment id="12754759" author="doronc" created="Sun, 13 Sep 2009 22:03:49 +0100"  >&lt;p&gt;Thanks Ted (for both your comments and kindness).&lt;/p&gt;

&lt;p&gt;I modified to &quot;varies&quot; as you suggested, and added the note about efficient computation of maxDoc(), but omitted  the part of &quot;pretty much correct except&quot; because this might not be correct for certain applications. &lt;/p&gt;

&lt;p&gt;Patch to follow...&lt;/p&gt;</comment>
                    <comment id="12754762" author="doronc" created="Sun, 13 Sep 2009 22:09:46 +0100"  >&lt;p&gt;Updated patch according to comments by Ted.&lt;/p&gt;

&lt;p&gt;To review without applying the patch see &lt;a href=&quot;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12754852" author="kuhn" created="Mon, 14 Sep 2009 08:30:42 +0100"  >&lt;p&gt;The last paragraph starts with:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However the resulted norm value is encoded as a single byte before being stored.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe this is an ideal time to document reasons why norms are encoded as bytes.&lt;/p&gt;</comment>
                    <comment id="12754871" author="doronc" created="Mon, 14 Sep 2009 09:34:23 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;However the resulted norm value is encoded as a single byte before being stored.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Maybe this is an ideal time to document reasons why norms are encoded as bytes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Perhaps something like: &quot;Once a field is referenced at search time, its norms - for all documents - are maintained in memory, hence it is important to keep norms footprint low.&quot; ...?&lt;/p&gt;</comment>
                    <comment id="12755003" author="kuhn" created="Mon, 14 Sep 2009 15:34:52 +0100"  >&lt;p&gt;Yes, sounds great. &lt;/p&gt;

&lt;p&gt;The consequence of encoding norms as bytes is that norms can&apos;t be used to fine tune computed document score as I tried to (and failed). I was forced to use function query to achieve my goals.&lt;/p&gt;</comment>
                    <comment id="12755062" author="creamyg" created="Mon, 14 Sep 2009 17:28:27 +0100"  >&lt;p&gt;The rationale behind the coarseness of the norms is that since the accuracy of&lt;br/&gt;
search engines in retrieving the documents that the user really wants is so&lt;br/&gt;
poor, only big differences matter.  (It&apos;s not just poor &quot;recall&quot; against a&lt;br/&gt;
given query, but the difficulty that the user experiences in formulating a&lt;br/&gt;
proper query to express what they&apos;re really looking for in the first place.)&lt;/p&gt;

&lt;p&gt;Doug wrote at least once about this some years back, but I haven&apos;t been &lt;br/&gt;
able to track down the post.&lt;/p&gt;</comment>
                    <comment id="12755219" author="doronc" created="Mon, 14 Sep 2009 23:06:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The rationale behind the coarseness of the norms is that since the accuracy of&lt;br/&gt;
search engines in retrieving the documents that the user really wants is so&lt;br/&gt;
poor, only big differences matter.  (It&apos;s not just poor &quot;recall&quot; against a&lt;br/&gt;
given query, but the difficulty that the user experiences in formulating a&lt;br/&gt;
proper query to express what they&apos;re really looking for in the first place.)&lt;/p&gt;

&lt;p&gt;Doug wrote at least once about this some years back, but I haven&apos;t been&lt;br/&gt;
able to track down the post.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks!  I too failed to find that post.&lt;/p&gt;

&lt;p&gt;I like the part about users difficulty to express their information need in the query.&lt;/p&gt;

&lt;p&gt;So I am updating like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;However the resulted norm value is encoded as a single byte before being 
stored. At search time, the norm byte value is read from the index directory 
and decoded back to a float norm value. This encoding/decoding, while reducing 
index size, comes with the price of precision loss - it is not guaranteed that 
decode(encode(x)) = x. For instance, decode(encode(0.89)) = 0.75. 
 
Compression of norm values to a single byte saves memory at search time, 
because once a field is referenced at search time, its norms - for all 
documents - are maintained in memory. 
 
The rationale supporting such lossy compression of norm values is that 
given the difficulty (and inaccuracy) of users to express their true information 
need by a query, only big differences matter. 
 
Last, note that search time is too late to modify this norm part of scoring, 
e.g. by using a different Similarity for search. 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12755222" author="doronc" created="Mon, 14 Sep 2009 23:17:14 +0100"  >&lt;p&gt;Updated patch according to comments for the norms section&lt;/p&gt;

&lt;p&gt;To review without applying the patch see &lt;a href=&quot;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/sim-docs/org/apache/lucene/search/Similarity.html&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12755608" author="doronc" created="Tue, 15 Sep 2009 18:57:44 +0100"  >&lt;p&gt;Committed, &lt;br/&gt;
Thanks Mark, Shai, Ted, Jiri, and Marvin!&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12435024">LUCENE-1896</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12419574" name="LUCENE-1908.patch" size="19793" author="doronc" created="Mon, 14 Sep 2009 23:17:14 +0100" />
                    <attachment id="12419435" name="LUCENE-1908.patch" size="19170" author="doronc" created="Sun, 13 Sep 2009 22:09:46 +0100" />
                    <attachment id="12419431" name="LUCENE-1908.patch" size="15472" author="doronc" created="Sun, 13 Sep 2009 18:19:16 +0100" />
                    <attachment id="12419397" name="LUCENE-1908.patch" size="15605" author="doronc" created="Sat, 12 Sep 2009 20:31:09 +0100" />
                    <attachment id="12419332" name="LUCENE-1908.patch" size="15390" author="doronc" created="Fri, 11 Sep 2009 20:46:09 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 12 Sep 2009 04:03:22 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11859</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25817</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>