<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:34 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2574/LUCENE-2574.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2574] Optimize copies between IndexInput and Output</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2574</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;We&apos;ve created an optimized copy of files from Directory to Directory. We&apos;ve also optimized copyBytes recently. However, we&apos;re missing the opposite side of the copy - from IndexInput to Output. I&apos;d like to mimic the FileChannel API by having copyTo on IndexInput and copyFrom on IndexOutput. That way, both sides can optimize the copy process, depending on the type of the IndexInput/Output that they need to copy to/from.&lt;/p&gt;

&lt;p&gt;FSIndexInput/Output can use FileChannel if the two are FS types. RAMInput/OutputStream can copy to/from the buffers directly, w/o going through intermediate ones. Actually, for RAMIn/Out this might be a big win, because it doesn&apos;t care about the type of IndexInput/Output given - it just needs to copy to its buffer directly.&lt;/p&gt;

&lt;p&gt;If we do this, I think we can consolidate all Dir.copy() impls down to one (in Directory), and rely on the In/Out ones to do the optimized copy. Plus, it will enable someone to do optimized copies between In/Out outside the scope of Directory.&lt;/p&gt;

&lt;p&gt;If this somehow turns out to be impossible, or won&apos;t make sense, then I&apos;d like to optimize RAMDirectory.copy(Dir, src, dest) to not use an intermediate buffer.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12470371">LUCENE-2574</key>
            <summary>Optimize copies between IndexInput and Output</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="shaie">Shai Erera</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Jul 2010 20:15:49 +0100</created>
                <updated>Thu, 7 Apr 2011 12:34:02 +0100</updated>
                    <resolved>Wed, 4 Aug 2010 00:27:07 +0100</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12893556" author="shaie" created="Thu, 29 Jul 2010 09:50:02 +0100"  >&lt;p&gt;Patch adds copyBytes to IndexInput and overrides in RAM and FS classes. Also optimizes copyBytes in RAMOutputStream. I&apos;d appreciate if someone can review this. Changes are on 3x&lt;/p&gt;</comment>
                    <comment id="12893698" author="mikemccand" created="Thu, 29 Jul 2010 17:59:31 +0100"  >&lt;p&gt;Patch looks good Shai!&lt;/p&gt;

&lt;p&gt;It looks like NIOFSIndexInput.copyBytes doesn&apos;t have an optimized impl (it&apos;s currently the default dir on non-Windows)?&lt;/p&gt;</comment>
                    <comment id="12893710" author="shaie" created="Thu, 29 Jul 2010 18:15:08 +0100"  >&lt;p&gt;I think it borrows the impl from SimpleFSIndexInput, which it overrides? Their impl is the same - both use FileChannel.&lt;/p&gt;</comment>
                    <comment id="12893713" author="mikemccand" created="Thu, 29 Jul 2010 18:19:33 +0100"  >&lt;p&gt;Ahhh you&apos;re right, OK, excellent!&lt;/p&gt;</comment>
                    <comment id="12893941" author="shaie" created="Fri, 30 Jul 2010 07:16:10 +0100"  >&lt;p&gt;Committed revision 980654 (3x).&lt;br/&gt;
Committed revision 980656 (trunk).&lt;/p&gt;</comment>
                    <comment id="12894633" author="mikemccand" created="Mon, 2 Aug 2010 19:23:11 +0100"  >&lt;p&gt;This optimization causes index corruption, to at least stored fields.&lt;/p&gt;

&lt;p&gt;I&apos;ve been iterating w/ Karl Wright (see dev thread subject &quot;busywait hang using extracting update handler on trunk&quot;), and tracked it down to a missing seek call in the FSIndexInput.copyBytes method.&lt;/p&gt;</comment>
                    <comment id="12894636" author="mikemccand" created="Mon, 2 Aug 2010 19:30:28 +0100"  >&lt;p&gt;Adds a seek to the input FileChannel.&lt;/p&gt;

&lt;p&gt;The randomized testcase in TestIW fails (w/o the fix) if you run it enough times.&lt;/p&gt;</comment>
                    <comment id="12894830" author="shaie" created="Tue, 3 Aug 2010 06:59:38 +0100"  >&lt;p&gt;Good catch Mike !&lt;/p&gt;

&lt;p&gt;Calling getChannel() on the first time positions the FileChannel properly - it is the latter times that this seek is needed for. I hope this didn&apos;t cause you too much headache &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="12894858" author="mikemccand" created="Tue, 3 Aug 2010 10:48:30 +0100"  >&lt;p&gt;It was pretty fast to track down once I had a randomized test case showing it...&lt;/p&gt;</comment>
                    <comment id="12894904" author="mikemccand" created="Tue, 3 Aug 2010 16:25:43 +0100"  >&lt;p&gt;Attached patch that shows that we still have a bug, here.&lt;/p&gt;

&lt;p&gt;The patch adds deletions to the randomized test (and disables all other tests in TIW), and sets a seed that fails quickly.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure where the bug is yet...&lt;/p&gt;</comment>
                    <comment id="12894926" author="shaie" created="Tue, 3 Aug 2010 17:34:41 +0100"  >&lt;p&gt;Weird .. I&apos;ve found out that if I disable this call:&lt;/p&gt;

&lt;p&gt;      // flush any bytes in the input&apos;s buffer.&lt;br/&gt;
      numBytes -= fsInput.flushBuffer(this, numBytes);&lt;/p&gt;

&lt;p&gt;from FSIndexOutput.copyBytes, then the test passes.&lt;/p&gt;

&lt;p&gt;But I&apos;m not yet sure why ... I&apos;ve disabled everything else (IndexInput.copyBytes). It&apos;s as if this call copies bytes that should not have been copied. I&apos;ve added this change because I thought there is a bug in the current copyBytes impl: it uses FileChannel to do the optimized copy, but since SimpleFSIndexInput extends BufferedIndexInput, there might be bytes read to its buffer, and not written yet ...&lt;/p&gt;

&lt;p&gt;I&apos;ve made the following changes:&lt;br/&gt;
FSIndexOutput.copyBytes:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      SimpleFSIndexInput fsInput = (SimpleFSIndexInput) input;

&lt;span class=&quot;code-comment&quot;&gt;// change start
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//      // flush any bytes in the input&apos;s buffer.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//      numBytes -= fsInput.flushBuffer(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, numBytes);
&lt;/span&gt;      
      &lt;span class=&quot;code-comment&quot;&gt;// flush any bytes in our buffer
&lt;/span&gt;      flush();
&lt;span class=&quot;code-comment&quot;&gt;// change end
&lt;/span&gt;
      &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; the optimized copy
&lt;/span&gt;      FileChannel in = fsInput.file.getChannel();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and rewrote BufferedIndexInput.flushBuffer:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; toCopy = bufferLength - bufferPosition;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (toCopy &amp;lt; numBytes) {
      &lt;span class=&quot;code-comment&quot;&gt;// We&apos;re copying the entire content of the buffer, so update accordingly.
&lt;/span&gt;      out.writeBytes(buffer, bufferPosition, toCopy);
      bufferPosition = bufferLength = 0;
      bufferStart += toCopy;
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      toCopy = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) numBytes;
      &lt;span class=&quot;code-comment&quot;&gt;// We are asked to copy less bytes than are available in the buffer.
&lt;/span&gt;      out.writeBytes(buffer, bufferPosition, toCopy);
      bufferPosition += toCopy;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; toCopy;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The test now fails on some other exception (not the assert in addRawDocuments). If I remove the call to flushBuffer, it passes. I still need to understand this.&lt;/p&gt;</comment>
                    <comment id="12894934" author="shaie" created="Tue, 3 Aug 2010 17:54:06 +0100"  >&lt;p&gt;Found the problem &amp;#8211; the order of the flushes in FSIndexOutput.copyBytes was wrong. flush() first emptied FSIndexOutput&apos;s buffer, but flushBuffer() filled it back. I reversed the calls and the test passes.&lt;/p&gt;</comment>
                    <comment id="12894936" author="mikemccand" created="Tue, 3 Aug 2010 17:58:36 +0100"  >&lt;p&gt;OK thanks Shai!  I&apos;ll stress test that, and I&apos;ll also add the seek in CSIndexInput.copyBytes.&lt;/p&gt;</comment>
                    <comment id="12895147" author="shaie" created="Wed, 4 Aug 2010 06:18:59 +0100"  >&lt;p&gt;Mike, did you add the seek to CSIndexInput? I don&apos;t see it in the commit log.&lt;/p&gt;</comment>
                    <comment id="12895181" author="shaie" created="Wed, 4 Aug 2010 09:32:49 +0100"  >&lt;p&gt;Seems like it was left out. I&apos;d like to add this fix, could you please review:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Index: lucene/src/java/org/apache/lucene/index/CompoundFileReader.java
===================================================================
--- lucene/src/java/org/apache/lucene/index/CompoundFileReader.java	(revision 982137)
+++ lucene/src/java/org/apache/lucene/index/CompoundFileReader.java	(working copy)
@@ -310,6 +310,11 @@
           &lt;span class=&quot;code-comment&quot;&gt;// If there are more bytes left to copy, delegate the copy task to the
&lt;/span&gt;           &lt;span class=&quot;code-comment&quot;&gt;// base IndexInput, in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; it can &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; an optimized copy.
&lt;/span&gt;           &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (numBytes &amp;gt; 0) {
+            &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = getFilePointer();
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (start + numBytes &amp;gt; length) {
+              &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;read past EOF&quot;&lt;/span&gt;);
+            }
+            base.seek(fileOffset + start);
             base.copyBytes(out, numBytes);
           }
         }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12895191" author="mikemccand" created="Wed, 4 Aug 2010 10:27:02 +0100"  >&lt;p&gt;Woops I did miss this.&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t the if statement be fileOffset + numBytes &amp;gt; length instead?&lt;/p&gt;</comment>
                    <comment id="12895199" author="shaie" created="Wed, 4 Aug 2010 11:06:42 +0100"  >&lt;p&gt;I&apos;ve copied it from readInternal:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = getFilePointer();
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(start + len &amp;gt; length)
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;read past EOF&quot;&lt;/span&gt;);
          base.seek(fileOffset + start);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think it&apos;s ok. fileOffset is where this file starts and length is its length. You want to know if you have enough bytes from &apos;start&apos;, no?&lt;/p&gt;</comment>
                    <comment id="12895203" author="mikemccand" created="Wed, 4 Aug 2010 11:17:23 +0100"  >&lt;p&gt;Duh sorry you are correct!  fileOffset is the &quot;base&quot; of this file within the CFS.&lt;/p&gt;

&lt;p&gt;Better to finish drinking coffee in the morning before thinking too much...&lt;/p&gt;</comment>
                    <comment id="12895206" author="shaie" created="Wed, 4 Aug 2010 11:20:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;Better to finish drinking coffee in the morning before thinking too much...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&quot;Better to finish drinking coffee in the morning&quot; ... period ! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Ok so I&apos;ll commit this. Thanks !&lt;/p&gt;</comment>
                    <comment id="12895214" author="shaie" created="Wed, 4 Aug 2010 11:38:21 +0100"  >&lt;p&gt;Committed to 3x and trunk. Hopefully the last time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="13013346" author="gsingers" created="Wed, 30 Mar 2011 16:50:02 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                    <comment id="13016794" author="matthias.seidel" created="Thu, 7 Apr 2011 11:07:15 +0100"  >&lt;p&gt;Uhm, what happened to these optimizations to FSIndexOutput regarding the direct copying from FSIndexInput via its FileChannel? Can&apos;t find a trace of it anywhere in the 3.1 release or in the trunk. :/&lt;/p&gt;</comment>
                    <comment id="13016804" author="rcmuir" created="Thu, 7 Apr 2011 11:56:11 +0100"  >&lt;p&gt;I removed them after they caused index corruption, twice.&lt;/p&gt;</comment>
                    <comment id="13016807" author="matthias.seidel" created="Thu, 7 Apr 2011 12:00:16 +0100"  >&lt;p&gt;Oh, sorry to here that. Was looking forward to this optimization. Any chance of it coming back anytime soon?&lt;/p&gt;</comment>
                    <comment id="13016808" author="rcmuir" created="Thu, 7 Apr 2011 12:09:17 +0100"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2637&quot; title=&quot;FSDirectory.copyBytes isn&amp;#39;t safe for SimpleFSDirectory&quot;&gt;&lt;del&gt;LUCENE-2637&lt;/del&gt;&lt;/a&gt; for more discussion.&lt;/p&gt;

&lt;p&gt;Personally I&apos;m not sure this optimization is worth the trouble, I haven&apos;t&lt;br/&gt;
seen any benchmarks showing it speeds things up, and its dangerous as hell.&lt;/p&gt;</comment>
                    <comment id="13016816" author="matthias.seidel" created="Thu, 7 Apr 2011 12:34:02 +0100"  >&lt;p&gt;Ok, didn&apos;t know that. Thanks for the quick reply anyway.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12451128" name="LUCENE-2574.patch" size="43861" author="mikemccand" created="Tue, 3 Aug 2010 16:25:43 +0100" />
                    <attachment id="12451059" name="LUCENE-2574.patch" size="4470" author="mikemccand" created="Mon, 2 Aug 2010 19:30:28 +0100" />
                    <attachment id="12450807" name="LUCENE-2574.patch" size="15019" author="shaie" created="Thu, 29 Jul 2010 09:50:01 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 29 Jul 2010 16:59:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11259</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25118</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>