<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:02 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2339/LUCENE-2339.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2339] Allow Directory.copy() to accept a collection of file names to be copied</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2339</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Par example, I want to copy files pertaining to a certain commit, and not everything there is in a Directory.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12459825">LUCENE-2339</key>
            <summary>Allow Directory.copy() to accept a collection of file names to be copied</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="earwin">Earwin Burrfoot</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Mar 2010 07:01:38 +0000</created>
                <updated>Fri, 10 May 2013 11:43:59 +0100</updated>
                    <resolved>Fri, 26 Mar 2010 10:35:35 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12848050" author="earwin" created="Mon, 22 Mar 2010 08:00:04 +0000"  >&lt;p&gt;A simple patch&lt;/p&gt;</comment>
                    <comment id="12848109" author="mikemccand" created="Mon, 22 Mar 2010 12:45:49 +0000"  >&lt;p&gt;Patch looks good Earwin &amp;#8211; simple addition.  I&apos;ll commit later today...  thanks!&lt;/p&gt;</comment>
                    <comment id="12848114" author="earwin" created="Mon, 22 Mar 2010 12:58:02 +0000"  >&lt;p&gt;I wonder if we could convert these methods from static to members, so it becomes  &apos;from.copyTo(to, files)&apos; ?&lt;br/&gt;
This opens up the possibility to override.. and.. hmm.. optimize somehow, if &apos;to&apos; is of the same type as &apos;this&apos;.&lt;br/&gt;
I believe you can rig some nio-based file copier that bypasses Java completely, so you don&apos;t have to pass multi-gb indexes through your heap when, say, backing up.&lt;/p&gt;</comment>
                    <comment id="12848180" author="mikemccand" created="Mon, 22 Mar 2010 16:04:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;I wonder if we could convert these methods from static to members, so it becomes &apos;from.copyTo(to, files)&apos; ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this approach.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I believe you can rig some nio-based file copier that bypasses Java completely, so you don&apos;t have to pass multi-gb indexes through your heap when, say, backing up.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;NIO&apos;s transferTo, right?&lt;/p&gt;

&lt;p&gt;For backups I wonder if we should make a copyTo/From that takes an IndexCommit... but maybe that&apos;s going too far.  EG you&apos;d also want it to be incremental (only copy new files, maybe delete no longer referenced ones, etc.).&lt;/p&gt;</comment>
                    <comment id="12848197" author="earwin" created="Mon, 22 Mar 2010 16:28:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;NIO&apos;s transferTo, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I didn&apos;t remember this at the point of writing, but yes, transferTo.&lt;br/&gt;
Google says that with certain restrictions on the size of the chunk transferred at once (eg. one huge chunk for linux, 64mb-something chunks for windows), this works crossplatform.&lt;br/&gt;
NIO2@Java7 has an even more simple Path.copyTo() method, so happy 7 users can use this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For backups I wonder if we should make a copyTo/From that takes an IndexCommit&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ohmigosh, no! : }&lt;br/&gt;
You can get file list from IC and feed it into copy(). More power with less API surface.&lt;/p&gt;

&lt;p&gt;I&apos;m going to add two methods copyTo(target) and copyTo(target, filenames), rewrite copy(source, target, close) to use these and deprecate it.&lt;br/&gt;
There&apos;s no point in keeping around slightly different versions of the same thing, and I believe people can easily close their source dirs by themselves, what a stupid option.&lt;/p&gt;</comment>
                    <comment id="12848284" author="mikemccand" created="Mon, 22 Mar 2010 19:01:19 +0000"  >&lt;p&gt;OK this sounds like a good plan!&lt;/p&gt;</comment>
                    <comment id="12848331" author="earwin" created="Mon, 22 Mar 2010 20:57:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Google says that with certain restrictions on the size of the chunk transferred at once (eg. one huge chunk for linux, 64mb-something chunks for windows), this works crossplatform.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Heh. The bug existed only on 1.4 and was fixed. So I guess it works everywhere.&lt;/p&gt;</comment>
                    <comment id="12848357" author="earwin" created="Mon, 22 Mar 2010 21:32:38 +0000"  >&lt;p&gt;Patch with overridable copyTo(), based off trunk+&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2328&quot; title=&quot;IndexWriter.synced  field accumulates data leading to a Memory Leak&quot;&gt;&lt;del&gt;LUCENE-2328&lt;/del&gt;&lt;/a&gt; (uses newly introduced method)&lt;/p&gt;

&lt;p&gt;Optimized FSDir-&amp;gt;FSDir case. Should I do special case for RAMDirs? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12848376" author="shaie" created="Mon, 22 Mar 2010 21:52:13 +0000"  >&lt;p&gt;Patch looks good! Few comments:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;is it safe to use NIO for all FSDirs? I thought that on Windows NIO has some bugs/limitations. In that case, would it be safer if just NIOFSDir used NIO?&lt;/li&gt;
	&lt;li&gt;Can copyTo(Directory, Collection&amp;lt;String&amp;gt;) be changed to copyTo(Directory, Iterable&amp;lt;String&amp;gt;)? Unless we think that someone would want to use size() or something.&lt;/li&gt;
	&lt;li&gt;I know it&apos;s a matter of style, but you &quot;import static Arrays.asList&quot;, and then use asList directly in copyTo(Dir). It confuses me because I expect asList to be a method declared on Dir, and so I prefer to see Arrays.asList. But it&apos;s just style, don&apos;t know how others feel about that.&lt;/li&gt;
	&lt;li&gt;On copyTo(Dir), perhaps instead of converting the listAll() to List and then remove elements from it, you can just iterate on whatever listAll() returns and add the files that pass the filter to a list? You can even optimize and if all the files Dir returned pass the filter, you can just pass the array to copyTo(Dir, Iterable), assuming we change the method to accept Iterable. But that&apos;s a minor optimization.&lt;/li&gt;
	&lt;li&gt;copy(src, dest, boolean) - can you add a message to @deprecated so users will know what to replace it with more easily?&lt;/li&gt;
	&lt;li&gt;I see that copy(src, dest) also accepts a boolean of whether to close the src directory. But copyTo(dIr) doesn&apos;t. I personally think it&apos;s ok, as someone can call close on src himself, but am wondering if it wouldn&apos;t be more convenient. I.e. instead of change calls from Directory.copy(src, dest, true), I now need to do src.copyTo(dest) followed by a src.close().&lt;/li&gt;
	&lt;li&gt;closeSafely - perhaps print the stacktrace, even if you don&apos;t throw it?&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12848423" author="earwin" created="Mon, 22 Mar 2010 23:00:07 +0000"  >&lt;p&gt;1 -&amp;gt; I googled all around and nobody mentions any problems save for those with old 1.4 JDK. If problems arise, we can conditionalize code inside - making this optimization NIOFSDir-exclusive is just plain sad, what about MMapDir?&lt;br/&gt;
2 -&amp;gt; Don&apos;t have strong feelings there, but Uwe insists everything should be consistent and if I use Collection for sync(), then I should use it everywhere. Makes sense probably.&lt;br/&gt;
3 -&amp;gt; I feel that static imports are great. They take clutter away, but that&apos;s just my opinion. Can change this.&lt;br/&gt;
4 -&amp;gt; Applied this, without shady &quot;optimizations&quot;.&lt;br/&gt;
5 -&amp;gt; ok&lt;br/&gt;
6 -&amp;gt; Did that on purporse. Directory.copy(src, dest, true) is way less readable than src.copyTo(dest); src.close(). There&apos;s no freaking way to tell what that true means without reading docs.&lt;br/&gt;
7 -&amp;gt; I really, really, really, really hate libraries that print something I didn&apos;t ask them for. Besides, current implementation prints nothing on similar occasion, so I&apos;m following the trend.&lt;/p&gt;</comment>
                    <comment id="12848565" author="shaie" created="Tue, 23 Mar 2010 06:25:17 +0000"  >&lt;p&gt;I personally haven&apos;t seen problem using NIO on Windows, but that&apos;s perhaps just because I haven&apos;t run into them yet &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. I think your proposal makes sense - let&apos;s start w/ NIO bulk-copy and then we can disable if people complain or report errors.&lt;/p&gt;

&lt;p&gt;Consistency is important, I agree. So let&apos;s keep Collection there. I just wanted to avoid converting arrays to a Collection, just so that they can be iterated on. Seems a waste to me, but not so much to argue about &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Re (7), I hate such libraries too. But I hate more the ones that just hide problems away from me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. The ideal thing was if Lucene would use a logging mechanism (I once started it on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1482&quot; title=&quot;Replace infoSteram by a logging framework (SLF4J)&quot;&gt;&lt;del&gt;LUCENE-1482&lt;/del&gt;&lt;/a&gt;) so that you could include the stacktrace print if logging is enabled. But currently the code just hides the problem away ... and I&apos;d hate to debug such thing, not realizing an IO exception is thrown from close().&lt;/p&gt;

&lt;p&gt;So unless &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1482&quot; title=&quot;Replace infoSteram by a logging framework (SLF4J)&quot;&gt;&lt;del&gt;LUCENE-1482&lt;/del&gt;&lt;/a&gt; springs back to life again, what do you suggest we do? Suppressing the exceptions seems wrong to me.&lt;/p&gt;</comment>
                    <comment id="12848591" author="thetaphi" created="Tue, 23 Mar 2010 07:14:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;I just wanted to avoid converting arrays to a Collection, just so that they can be iterated on. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, for the dumb question: In which JDK do arrays implement Iterable? From my knowledge and a quick check with Java 5, it does not. Passing an array to a method taking Iterable does not work. Arrays only work in extended for statement, but not because they are Itearble. The generated code by javac is also totally different (and more effective than creating an iterator, it just uses the conventional for(i=0; i&amp;lt;length; i++) approach - try it out with javac and decompiling with jad or whatever)! Also arrays of native types can hardly implement Iterable without autoboxing.&lt;/p&gt;

&lt;p&gt;See:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1160081/why-is-an-array-not-assignable-to-iterable&quot; class=&quot;external-link&quot;&gt;http://stackoverflow.com/questions/1160081/why-is-an-array-not-assignable-to-iterable&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://72.5.124.102/thread.jspa?threadID=558036&amp;amp;tstart=607&quot; class=&quot;external-link&quot;&gt;http://72.5.124.102/thread.jspa?threadID=558036&amp;amp;tstart=607&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And where is the waste of calling Arrays.asList()? This is exactly the same overhead like creating an iterator() if arrays were Iterable, both are just &quot;views&quot; on the array, so no copy involved.&lt;/p&gt;</comment>
                    <comment id="12848606" author="shaie" created="Tue, 23 Mar 2010 07:57:05 +0000"  >&lt;p&gt;Sorry ... I was confused w/ the for loop of Java 5 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Let&apos;s keep it Collection then. Sorry for the hassle.&lt;/p&gt;</comment>
                    <comment id="12848631" author="mikemccand" created="Tue, 23 Mar 2010 09:19:57 +0000"  >&lt;p&gt;I love CloseSafely!  We do that in a number of places and should simply call it, instead.  But can we change it to throw the first exception it encounters?&lt;/p&gt;

&lt;p&gt;I also prefer Arrays.asList to be explicit.&lt;/p&gt;</comment>
                    <comment id="12848634" author="earwin" created="Tue, 23 Mar 2010 09:32:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;So unless &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1482&quot; title=&quot;Replace infoSteram by a logging framework (SLF4J)&quot;&gt;&lt;del&gt;LUCENE-1482&lt;/del&gt;&lt;/a&gt; springs back to life again, what do you suggest we do? Suppressing the exceptions seems wrong to me.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;But can we change it to throw the first exception it encounters? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s exactly what most of lucene is doing when closing something. If you can&apos;t log, you either suppress, or mask the previous exception.&lt;br/&gt;
Let&apos;s mask it? That way the user may get the wrong exception, but he&apos;s not getting a situation when something failed but looks okay on the surface.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I love CloseSafely! We do that in a number of places and should simply call it, instead.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I did this for readers in my reopen patch, except new utility method does decRef.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I also prefer Arrays.asList to be explicit&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ok :/&lt;/p&gt;</comment>
                    <comment id="12848636" author="shaie" created="Tue, 23 Mar 2010 09:43:14 +0000"  >&lt;p&gt;I don&apos;t want to block the issue. If &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1482&quot; title=&quot;Replace infoSteram by a logging framework (SLF4J)&quot;&gt;&lt;del&gt;LUCENE-1482&lt;/del&gt;&lt;/a&gt; will advance somewhere, we&apos;ll log a message in closeSafely. Otherwise between suppressing to always printing I agree we should suppress. If someone does not want to suppress he should call close(). Which makes me think we should call this method closeNoException because closeSafely is not exactly what it does &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;</comment>
                    <comment id="12848670" author="mikemccand" created="Tue, 23 Mar 2010 12:24:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;Let&apos;s mask it? That way the user may get the wrong exception, but he&apos;s not getting a situation when something failed but looks okay on the surface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By &quot;mask it&quot; you mean hold onto the first exception you hit, continue closing &amp;amp; ignoring any further exceptions, then throw that first exception, right?&lt;/p&gt;</comment>
                    <comment id="12848678" author="earwin" created="Tue, 23 Mar 2010 12:43:48 +0000"  >&lt;p&gt;Not right.&lt;br/&gt;
Imagine exception is thrown when copying, then I try to close the channels. If that close throws another exception, I either has to suppress it, or to throw and thus hide initial exception.&lt;/p&gt;</comment>
                    <comment id="12848685" author="mikemccand" created="Tue, 23 Mar 2010 12:55:14 +0000"  >&lt;p&gt;Urgh... can we add a boolean arg (suppressExceptions) to control that?  Because, if you did not hit an exception when copying, but then hit one when closing, we want to throw it in that case...&lt;/p&gt;
</comment>
                    <comment id="12848729" author="shaie" created="Tue, 23 Mar 2010 14:48:32 +0000"  >&lt;p&gt;Mike, that&apos;s what I wrote above &quot;if someone does not want to suppress, he should call close&quot;. I think that closeSafely (or as I prefer it - closeNoException) should be closed only when you know you&apos;ve hit an exception and you want to close the stream suppressing any exceptions. Otherwise call close().&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;can we add a boolean arg (suppressExceptions) to control that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would beat the purpose of the method no? I mean, currently it does not throw any exception, not even declaring one, and if we add that boolean it will need to declare &quot;throws IOException&quot;, which will force the caller to try-catch that exception and ... suppress it or document &quot;// cannot happen because I&apos;ve passed false&quot;?&lt;/p&gt;

&lt;p&gt;So how about we call it closeNoException, document that it does not throw any exception and intentionally suppresses them, and if you don&apos;t want them to be suppressed, you can call io.close() yourself?&lt;/p&gt;</comment>
                    <comment id="12848744" author="mikemccand" created="Tue, 23 Mar 2010 15:12:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;So how about we call it closeNoException, document that it does not throw any exception and intentionally suppresses them, and if you don&apos;t want them to be suppressed, you can call io.close() yourself?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But there is still a need to &quot;close everything, but do throw the 1st exception you hit&quot;.  We do this in a number of places in Lucene, ad-hoc today.&lt;/p&gt;

&lt;p&gt;However, that need is different from what we&apos;re doing here, so I agree, let&apos;s postpone it and have this issue only create the &quot;closeNoException&quot; method.&lt;/p&gt;</comment>
                    <comment id="12848753" author="shaie" created="Tue, 23 Mar 2010 15:21:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;But there is still a need to &quot;close everything, but do throw the 1st exception you hit&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ohh I see what you mean. My assumption is that when you call closeNoException you already know that you&apos;ve hit an exception and just want to close the stream w/o getting more exceptions. If you don&apos;t know that, don&apos;t call closeNoException?&lt;/p&gt;</comment>
                    <comment id="12848769" author="mikemccand" created="Tue, 23 Mar 2010 15:55:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;My assumption is that when you call closeNoException you already know that you&apos;ve hit an exception and just want to close the stream w/o getting more exceptions. If you don&apos;t know that, don&apos;t call closeNoException?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, for this issue, let&apos;s do that.&lt;/p&gt;

&lt;p&gt;At some point in the future I&apos;d like a &quot;closeAllAndThrowFirstExceptionYouHit&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12848777" author="shaie" created="Tue, 23 Mar 2010 16:09:29 +0000"  >&lt;p&gt;Ok that&apos;s indeed different &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. I guess we can introduce it now, in this issue (it&apos;s tiny and simple). A closeAll which documents it throws the first exception it hits.&lt;/p&gt;</comment>
                    <comment id="12848785" author="earwin" created="Tue, 23 Mar 2010 16:20:25 +0000"  >&lt;p&gt;I&apos;ll get back to the issue in N hours and code something neat. : )&lt;/p&gt;</comment>
                    <comment id="12849182" author="earwin" created="Wed, 24 Mar 2010 13:43:53 +0000"  >&lt;p&gt;&apos;ere we go!&lt;br/&gt;
Read javadocs for &lt;em&gt;closeSafely&lt;/em&gt;, it mimics the way we handle exceptions all over lucene, but is a single method call. Okay, you should still keep track of prior exception by hand, no going around it.&lt;/p&gt;</comment>
                    <comment id="12849185" author="earwin" created="Wed, 24 Mar 2010 13:46:53 +0000"  >&lt;p&gt;Moved default Dir.copyTo to new close/exception handling method too.&lt;/p&gt;</comment>
                    <comment id="12849254" author="mikemccand" created="Wed, 24 Mar 2010 16:15:14 +0000"  >&lt;p&gt;Oooh!  I like the priorException solution &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I think this is ready to commit?  I&apos;ll add a CHANGES entry, and I added missing copyright to IOUtils.java.&lt;/p&gt;</comment>
                    <comment id="12849404" author="shaie" created="Wed, 24 Mar 2010 20:18:51 +0000"  >&lt;p&gt;Do we want to suppress only IOExceptions? What about any RuntimeExceptions - upon hitting any of them the code will fly away? Not saying it&apos;s a bad thing, but pointing it out.&lt;/p&gt;

&lt;p&gt;Other than that, the patch looks good. closeSafely is not exactly what I had in mind about closeNoException because it forces you to catch the IOE if you don&apos;t declare you throw it, or you need to move on, discarding it. But I guess this is a matter for another issue. &lt;/p&gt;</comment>
                    <comment id="12849468" author="earwin" created="Wed, 24 Mar 2010 21:46:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;closeSafely is not exactly what I had in mind about closeNoException because it forces you to catch the IOE if you don&apos;t declare you throw it&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;closeSafely wraps Closeable.close(), which declares IOException. Thus, you don&apos;t have to declare or discard anything new. As a matter of fact it encapsulates exact same code we&apos;re seeing copypasted (with varying degrees of success) all around Lucene.&lt;/p&gt;

&lt;p&gt;As for RuntimeExceptions, I had ones in my Directory implementation, and it flew right through Lucene. When I asked our brainiacs if that is okay, they said that anything expected should be wrapped with IOException, as the operation is zero-cost (for no-exception-happened case), and anything unexpected should kill your app in a blaze of glory. I see the point in that, if I squint hard enough.&lt;/p&gt;

&lt;p&gt;Mike, please mark that closeSagely with whatever.experimental? I think the signature may change, as it gets used in more places, like that type parameter may be an overkill.&lt;/p&gt;</comment>
                    <comment id="12849524" author="mikemccand" created="Wed, 24 Mar 2010 23:27:34 +0000"  >&lt;p&gt;I&apos;ll mark it @lucene.internal.&lt;/p&gt;</comment>
                    <comment id="12850071" author="mikemccand" created="Fri, 26 Mar 2010 10:35:35 +0000"  >&lt;p&gt;Thanks Earwin!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12439659" name="LUCENE-2339.patch" size="9470" author="earwin" created="Wed, 24 Mar 2010 13:46:53 +0000" />
                    <attachment id="12439657" name="LUCENE-2339.patch" size="9014" author="earwin" created="Wed, 24 Mar 2010 13:43:53 +0000" />
                    <attachment id="12439523" name="LUCENE-2339.patch" size="8804" author="earwin" created="Mon, 22 Mar 2010 23:00:07 +0000" />
                    <attachment id="12439508" name="LUCENE-2339.patch" size="8802" author="earwin" created="Mon, 22 Mar 2010 21:32:38 +0000" />
                    <attachment id="12439435" name="LUCENE-2339.patch" size="4005" author="earwin" created="Mon, 22 Mar 2010 08:00:04 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 22 Mar 2010 12:45:49 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11457</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25386</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>