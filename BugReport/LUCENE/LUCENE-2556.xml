<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2556/LUCENE-2556.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2556] (Char)TermAttribute cloning memory consumption</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2556</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The memory consumption problem with cloning a (Char)TermAttributeImpl object was raised on thread &lt;a href=&quot;http://markmail.org/thread/bybuerugbk5w2u6z&quot; class=&quot;external-link&quot;&gt;http://markmail.org/thread/bybuerugbk5w2u6z&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12469976">LUCENE-2556</key>
            <summary>(Char)TermAttribute cloning memory consumption</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="adriano_crestani">Adriano Crestani</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Jul 2010 05:55:20 +0100</created>
                <updated>Wed, 1 Dec 2010 14:49:57 +0000</updated>
                    <resolved>Sat, 30 Oct 2010 12:23:52 +0100</resolved>
                            <version>3.0.2</version>
                                <fixVersion>2.9.4</fixVersion>
                <fixVersion>3.0.3</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12891470" author="adriano_crestani" created="Fri, 23 Jul 2010 06:08:52 +0100"  >&lt;p&gt;This java application demonstrates how much memory CharTermAttributeImpl.clone() might consume in some scenarios.&lt;/p&gt;</comment>
                    <comment id="12891473" author="adriano_crestani" created="Fri, 23 Jul 2010 06:36:20 +0100"  >&lt;p&gt;This patch optimizes the cloning of the CharTermAttributeImpl internal buffer. It keeps using clone() to clone the internal buffer when CharTermAttribute.length() is at least 150 and at least 75% and  of the internal buffer length, otherwise, it uses System.arrayCopy(...) to clone it using CharTermAttribute.length() as the new internal buffer size.&lt;/p&gt;

&lt;p&gt;It&apos;s performing the optimization, because in some scenarios, like cloning long arrays, clone() is usually faster than System.arrayCopy(...). &lt;/p&gt;</comment>
                    <comment id="12891479" author="thetaphi" created="Fri, 23 Jul 2010 06:53:14 +0100"  >&lt;p&gt;Here the patch, I see no problem with applying it to 3.x and trunk.&lt;/p&gt;</comment>
                    <comment id="12891481" author="thetaphi" created="Fri, 23 Jul 2010 06:55:31 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This patch optimizes the cloning of the CharTermAttributeImpl internal buffer. It keeps using clone() to clone the internal buffer when CharTermAttribute.length() is at least 150 and at least 75% and of the internal buffer length, otherwise, it uses System.arrayCopy(...) to clone it using CharTermAttribute.length() as the new internal buffer size. &lt;br/&gt;
It&apos;s performing the optimization, because in some scenarios, like cloning long arrays, clone() is usually faster than System.arrayCopy(...). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Haven&apos;t seen your patch yet. I dont know if the two extra calculations rectify the barnching, because terms are mostly short...&lt;/p&gt;

&lt;p&gt;If we take your patch, the allocations should in all cases be done with ArrayUtils.oversize() to be consistent with the allocation strategy of the rest of CTA.&lt;/p&gt;</comment>
                    <comment id="12891494" author="adriano_crestani" created="Fri, 23 Jul 2010 08:02:56 +0100"  >&lt;p&gt;Hi Uwe,&lt;/p&gt;

&lt;p&gt;Thanks for the quick reply, your patch looks good enough for me. I just added that optimization part in case somebody complains about poor performance of arrayCopy for long arrays, but I agree with you, mostly terms are short and wouldn&apos;t require such optimization.&lt;/p&gt;

&lt;p&gt;+1 to also apply the patch to trunk&lt;/p&gt;</comment>
                    <comment id="12891500" author="adriano_crestani" created="Fri, 23 Jul 2010 08:14:57 +0100"  >&lt;p&gt;I was checking State.clone() method usage and it&apos;s just used store the current AttributeSource state for later use, when it&apos;s restored by invoking AttributeSource.restoreState(), which only copies the valid chars from the stored state to the current CharTermAttribute object the AttributeSource holds. In the end, I see no reason for stored states (the cloned ones) to hold an internal buffer greater than it needs too, once it will never be actually used/changed by any AttributeSource user. &lt;/p&gt;

&lt;p&gt;Please, let me know if I&apos;m missing something.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Adriano Crestani&lt;/p&gt;</comment>
                    <comment id="12892060" author="adriano_crestani" created="Sun, 25 Jul 2010 02:59:39 +0100"  >&lt;p&gt;So, if you guys think my thoughts above are OK, this is a simple patch with code that creates a new internal buffer strictly equals to the term length&lt;/p&gt;</comment>
                    <comment id="12922365" author="rcmuir" created="Tue, 19 Oct 2010 00:54:50 +0100"  >&lt;p&gt;Uwe, whats happening with this issue?&lt;/p&gt;

&lt;p&gt;Indexing terms are typically small, I think we should commit Adriano&apos;s last patch.&lt;br/&gt;
I have problems with clone() being slow with -client on my jvm, I think this is a good improvement.&lt;/p&gt;

&lt;p&gt;And, can prevent some memory issues (the original intent of the issue it seems)&lt;/p&gt;</comment>
                    <comment id="12922446" author="thetaphi" created="Tue, 19 Oct 2010 06:42:32 +0100"  >&lt;p&gt;I have no problem with it.&lt;/p&gt;

&lt;p&gt;The only thing: It still thin it should use an array size calculated by ArrayUtils.oversize() on the clone?&lt;/p&gt;</comment>
                    <comment id="12922523" author="rcmuir" created="Tue, 19 Oct 2010 12:27:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;The only thing: It still thin it should use an array size calculated by ArrayUtils.oversize() on the clone?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think we should. the clone might never be used again: &lt;/p&gt;

&lt;p&gt;So if the clone is never reused, there is no evidence the array will ever grow (most analysis processes, stemming and folding, etc actually shorten the term text)&lt;/p&gt;</comment>
                    <comment id="12922559" author="adriano_crestani" created="Tue, 19 Oct 2010 14:56:31 +0100"  >&lt;p&gt;Robert is right, in the actual use case, a cloned TermAttribute is never modified, it&apos;s at max copied back to the TokenStream&apos;s TermAttribute (when using TokenStream.restoreState(State)), so the only TermAttribute instance that needs to grow is the TokenStream&apos;s.&lt;/p&gt;</comment>
                    <comment id="12922596" author="thetaphi" created="Tue, 19 Oct 2010 16:45:54 +0100"  >&lt;p&gt;There is also no problem with reusing the cloned attribute, as ArrayUtils grows the array correctly also in that case. So you can still apend stuff as usual, with a &lt;b&gt;small&lt;/b&gt; perf penalty maybe.&lt;/p&gt;

&lt;p&gt;I think I will commit this later this evening to trunk and 3.x. Merging is little harder because of sophisticated backwards layer in 3.x. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12922714" author="thetaphi" created="Tue, 19 Oct 2010 22:01:41 +0100"  >&lt;p&gt;Committed trunk revision: 1024408&lt;br/&gt;
Committed 3.x revision: 1024409&lt;/p&gt;

&lt;p&gt;Thanks Adriano!&lt;/p&gt;</comment>
                    <comment id="12922753" author="adriano_crestani" created="Tue, 19 Oct 2010 23:26:15 +0100"  >&lt;p&gt;Thank you for committing the patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12926561" author="thetaphi" created="Sat, 30 Oct 2010 12:01:47 +0100"  >&lt;p&gt;Backport to 2.9 and 3.0.&lt;/p&gt;</comment>
                    <comment id="12926562" author="thetaphi" created="Sat, 30 Oct 2010 12:02:55 +0100"  >&lt;p&gt;Chaning title&lt;/p&gt;</comment>
                    <comment id="12926567" author="thetaphi" created="Sat, 30 Oct 2010 12:22:59 +0100"  >&lt;p&gt;Patch for 3.0 for reference&lt;/p&gt;</comment>
                    <comment id="12926568" author="thetaphi" created="Sat, 30 Oct 2010 12:23:52 +0100"  >&lt;p&gt;Committed branch 3.0 revision: 1029022&lt;br/&gt;
Committed branch 2.9 revision: 1029027&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12450259" name="CharTermAttributeMemoryConsumptionDemo.java" size="1346" author="adriano_crestani" created="Fri, 23 Jul 2010 06:08:52 +0100" />
                    <attachment id="12458477" name="LUCENE-2556-3.0.patch" size="3612" author="thetaphi" created="Sat, 30 Oct 2010 12:22:59 +0100" />
                    <attachment id="12450261" name="lucene_2556_adriano_crestani_07_23_2010.patch" size="887" author="adriano_crestani" created="Fri, 23 Jul 2010 06:36:20 +0100" />
                    <attachment id="12450408" name="lucene_2556_adriano_crestani_07_24_2010.patch" size="807" author="adriano_crestani" created="Sun, 25 Jul 2010 02:59:39 +0100" />
                    <attachment id="12450265" name="LUCENE-2556.patch" size="941" author="thetaphi" created="Fri, 23 Jul 2010 06:53:14 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 23 Jul 2010 05:53:14 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11274</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25136</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>