<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:45 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-395/LUCENE-395.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-395] CoordConstrainedBooleanQuery + QueryParser support</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-395</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Attached 2 new classes:&lt;/p&gt;

&lt;p&gt;1) CoordConstrainedBooleanQuery&lt;br/&gt;
A boolean query that only matches if a specified number of the contained clauses&lt;br/&gt;
match. An example use might be a query that returns a list of books where ANY 2&lt;br/&gt;
people from a list of people were co-authors, eg:&lt;br/&gt;
&quot;Lucene In Action&quot; would match (&quot;Erik Hatcher&quot; &quot;Otis Gospodneti&amp;#263;&quot; &quot;Mark Harwood&quot;&lt;br/&gt;
&quot;Doug Cutting&quot;) with a minRequiredOverlap of 2 because Otis and Erik wrote that.&lt;br/&gt;
The book &quot;Java Development with Ant&quot; would not match because only 1 element in&lt;br/&gt;
the list (Erik) was selected.&lt;/p&gt;

&lt;p&gt;2) CustomQueryParserExample&lt;br/&gt;
A customised QueryParser that allows definition of&lt;br/&gt;
CoordConstrainedBooleanQueries. The solution (mis)uses fieldnames to pass&lt;br/&gt;
parameters to the custom query.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: Other&lt;/p&gt;</environment>
            <key id="12314545">LUCENE-395</key>
            <summary>CoordConstrainedBooleanQuery + QueryParser support</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="markharw00d@yahoo.co.uk">Mark Harwood</reporter>
                        <labels>
                    </labels>
                <created>Thu, 9 Jun 2005 21:01:08 +0100</created>
                <updated>Thu, 2 Jun 2011 23:04:46 +0100</updated>
                    <resolved>Thu, 17 Nov 2005 01:42:23 +0000</resolved>
                                                            <component>core/search</component>
                        <due></due>
                    <votes>2</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322436" author="markharw00d@yahoo.co.uk" created="Thu, 9 Jun 2005 21:05:03 +0100"  >&lt;p&gt;Created an attachment (id=15346)&lt;br/&gt;
CoordConstrainedBooleanQuery class&lt;/p&gt;</comment>
                    <comment id="12322437" author="markharw00d@yahoo.co.uk" created="Thu, 9 Jun 2005 21:05:38 +0100"  >&lt;p&gt;Created an attachment (id=15347)&lt;br/&gt;
CustomQueryParserExample class&lt;/p&gt;</comment>
                    <comment id="12322438" author="markharw00d@yahoo.co.uk" created="Thu, 9 Jun 2005 21:53:41 +0100"  >&lt;p&gt;Damn. This coord trick works nicely on its own, eg&lt;br/&gt;
  authors:(min_coord:2 Erik Otis Doug)&lt;/p&gt;

&lt;p&gt;but doesnt work when combined with other queries like this:&lt;/p&gt;

&lt;p&gt;  title:&quot;lucene in action&quot; AND authors:(min_coord:3 Erik Otis Doug)&lt;/p&gt;

&lt;p&gt;A result is returned even thought the coord restriction of 3 is NOT satisfied&lt;br/&gt;
(Doug was not an author). Needs some more investigation.....&lt;/p&gt;</comment>
                    <comment id="12322439" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:23:36 +0100"  >&lt;p&gt;(From update of attachment 15346)&lt;br/&gt;
Does not work - have rewritten&lt;/p&gt;</comment>
                    <comment id="12322440" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:28:59 +0100"  >&lt;p&gt;Created an attachment (id=15371)&lt;br/&gt;
CoordConstrainedBooleanQuery&lt;/p&gt;

&lt;p&gt;Fixed issues so will work when nested in other Boolean queries - thanks to Paul&lt;br/&gt;
for the scorer tips.&lt;/p&gt;</comment>
                    <comment id="12322441" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:54:51 +0100"  >&lt;p&gt;(From update of attachment 15347)&lt;br/&gt;
New version supports analysis better&lt;/p&gt;</comment>
                    <comment id="12322442" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:56:23 +0100"  >&lt;p&gt;Created an attachment (id=15372)&lt;br/&gt;
CustomQueryParserExample&lt;/p&gt;

&lt;p&gt;Added automatic support for preserving min_coord numeric parameters in query&lt;br/&gt;
string whatever users&apos; choice of analyzer is&lt;/p&gt;</comment>
                    <comment id="12322443" author="paul.elschot@xs4all.nl" created="Sun, 12 Jun 2005 06:32:15 +0100"  >&lt;p&gt;In the trunk this could be implemented by adding a minimumNrShouldMatch &lt;br/&gt;
attribute to BooleanQuery and passing this as a minimum number of &lt;br/&gt;
matchers to the DisjunctionSumScorer that is used to combine the &lt;br/&gt;
clauses that should match, ie. the optional clauses. &lt;br/&gt;
This minimumNrShouldMatchwould would have a role similar to the minimum &lt;br/&gt;
required overlap in the CoordConstrainedBooleanQuery here, &lt;br/&gt;
when disregarding the required and prohibited clauses. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;

</comment>
                    <comment id="12330620" author="hossman" created="Wed, 28 Sep 2005 04:19:57 +0100"  >&lt;p&gt;I don&apos;t really understand BooleanScorer2 very much, but i thought I understaood it enough to take a stab at the changes paul suggested to incorperate this type offunctionality into BooleanQuery using DisjunctionSumScorer.&lt;/p&gt;

&lt;p&gt;Not suprisingly, some of the new tests I wrote for this functionality don&apos;t pass.  I can&apos;t figure out what the problem is.  perhaps It will come to me later, but in the mean time I wanted to post what I had in case the problem is something really silly and trivial that I&apos;m overlooking.&lt;/p&gt;</comment>
                    <comment id="12330622" author="paul.elschot@xs4all.nl" created="Wed, 28 Sep 2005 05:25:38 +0100"  >&lt;p&gt;I glanced through the code quickly, I&apos;ll give it a try in a week or so.&lt;/p&gt;

&lt;p&gt;BooleanScorer2 has one catch for which I did not see a check in the patch:&lt;br/&gt;
A) when there is at least one required clause, none of the optional clauses need to match, but&lt;br/&gt;
B) when there are no required clauses, at least one of the optional clauses needs to match.&lt;/p&gt;

&lt;p&gt;From what I saw (very quickly), only case B is implemented,&lt;br/&gt;
but what should happen in case A?&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12330876" author="hossman" created="Fri, 30 Sep 2005 08:21:30 +0100"  >&lt;p&gt;Paul: i thought i had accounted for both situations, but you&apos;re right &amp;#8211; it&apos;s not enough to make sure that all of the existing usages of DisjunctionSumScorer now use the min cut-off, because when there are required scorers, the existing uses of DisjunctionSumScorer are allways treated as optional.  the internal logic in makeCountingSumScorer basically needs to be &quot;turned inside out&quot; so that if the min value is set, a DisjunctionSumScorer is constructed, and treated as a required scorer.&lt;/p&gt;

&lt;p&gt;I started trying to do this but i haven&apos;t really made any progress, and now i have to go get on a plane, so unless someone else takes a stab at it, I&apos;ll try to post an updated patch on monday.&lt;/p&gt;

&lt;p&gt;in the mean time, here is a revised version of the test class that accounts for more possible code paths in the existing logic (particularly, the difference in behavior when there is one required vs more then one required, and/or one prohibited vs more then one prohibited.&lt;/p&gt;</comment>
                    <comment id="12331211" author="hossman" created="Tue, 4 Oct 2005 05:12:55 +0100"  >&lt;p&gt;Okay - a new patch, and this one (amazingly) seems to work.  All existing tests in SVN pass, as well as the new ones I&apos;ve attached to this bug.&lt;/p&gt;

&lt;p&gt;The one thing still not quite accounted for is what the behavior should be if/when clients set the minNrShouldMatch to be a value higher then the number of optional clauses &amp;#8211; or what the behavior should be if there is only one optional clause, and minNrShouldMatch==1 ... should it be treated as if it&apos;s required, or is that a miss-use of the api?   Should these cases be checked in BooleanScorer2, or in BooleanQuery?&lt;/p&gt;
</comment>
                    <comment id="12331216" author="yseeley@gmail.com" created="Tue, 4 Oct 2005 06:11:13 +0100"  >&lt;p&gt;&amp;gt; if there is only one optional clause, and minNrShouldMatch==1 ... should it be treated as if it&apos;s required&lt;/p&gt;

&lt;p&gt;That would be my vote... it requires less special case checking when generating queries.&lt;/p&gt;

&lt;p&gt;&amp;gt;  if/when clients set the minNrShouldMatch to be a value higher then the number of optional clauses&lt;/p&gt;

&lt;p&gt;Either treat all optional clauses as required, or don&apos;t match any clauses.  I guess I would lean toward being literal and not match anything.&lt;/p&gt;</comment>
                    <comment id="12331219" author="paul.elschot@xs4all.nl" created="Tue, 4 Oct 2005 06:27:30 +0100"  >&lt;p&gt;I agree with Yonik here.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should these cases be checked in BooleanScorer2, or in BooleanQuery? &lt;/p&gt;

&lt;p&gt;The easiest place is BooleanScorer2 since it already does a lot of checking to decide&lt;br/&gt;
which scorers to use. It has this at line 180:&lt;br/&gt;
        return new NonMatchingScorer();  // only prohibited scorers&lt;br/&gt;
which is a nice fit for the case when minNrShouldMatch is too high.&lt;/p&gt;

&lt;p&gt;I&apos;ll try the new code in a few days.&lt;/p&gt;</comment>
                    <comment id="12331229" author="hossman" created="Tue, 4 Oct 2005 09:48:48 +0100"  >&lt;p&gt;Here is:&lt;/p&gt;

&lt;p&gt;1) Revised version of TestBooleanMinShouldMatch with new methods to to test for the border cases of:&lt;br/&gt;
   a) min is higher then the number of optional clauses&lt;br/&gt;
   b) min is equal to the number of optional clauses&lt;br/&gt;
   c) min and number of clauses are both 1&lt;br/&gt;
   d) there are no optional clauses, but a min is specified&lt;/p&gt;

&lt;p&gt;2) Revised version of patch that works against these new tests&lt;/p&gt;</comment>
                    <comment id="12331519" author="paul.elschot@xs4all.nl" created="Fri, 7 Oct 2005 04:28:02 +0100"  >&lt;p&gt;The patch applies cleanly and all tests pass including the new TestBooleanMinShouldMatch.&lt;/p&gt;

&lt;p&gt;The code to tranform the optional scorers into a single required one with a minimum number of matches&lt;br/&gt;
looks good, it&apos;s easy to understand and the tests pass.&lt;br/&gt;
I&apos;m not really happy with the place of this code, it would be better in the initCountingSumScorer()&lt;br/&gt;
method of BooleanScorer2.&lt;/p&gt;

&lt;p&gt;Also I don&apos;t think maxCoord should be increased when this extra required scorer is introduced,&lt;br/&gt;
because this new required scorer can be completely ignored for coordination, it is only a way to&lt;br/&gt;
get the minimum number of required scorers. I&apos;m not sure about this, though.&lt;br/&gt;
Perhaps a testcase could be added that compares the score with and without a minimum&lt;br/&gt;
number of matches on documents that match anyway.&lt;/p&gt;

&lt;p&gt;I&apos;ll keep this in my working copy and work on the code a bit, probably during next week.&lt;br/&gt;
Please feel free to beat me to it.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;
</comment>
                    <comment id="12331531" author="hossman" created="Fri, 7 Oct 2005 06:46:04 +0100"  >&lt;p&gt;I freely admit that I didn&apos;t give a lot of thought to incrimenting maxCoord.  I did it only because if I didn&apos;t, coordinator.coordFactor() generated ArrayIndexOutOfBoundsExceptions  &amp;#8211; it assumes that the number of counted matches (nrMatchers) should be used to determine which element of coordFactor should be used, so I assumed that maxCoord allways needed to be equal the the maximum number of potential counted matches.&lt;/p&gt;

&lt;p&gt;Likewise, I put the code in Coordinator.init() instead of initCountingSumScorer() for the sole reason that since i was incrimenting maxCoord, I needed to do it before coordFactors[] was initialized.  (allthough, I suppose it could have happened in initCountingSumScorer(), prior to the call to coordinator.init()).&lt;/p&gt;


&lt;p&gt;Did I mention I&apos;m way over my head as far as this patch goes? ... I don&apos;t honestly understand the meaning/purpose of &quot;coordination&quot; &amp;#8211; I just kind of did what I did because it seemed to work (and made some sense in the context of hte existing code).&lt;/p&gt;</comment>
                    <comment id="12331650" author="paul.elschot@xs4all.nl" created="Sun, 9 Oct 2005 01:53:45 +0100"  >&lt;p&gt;Some refactoring to make things more compact, no functional changes.&lt;/p&gt;</comment>
                    <comment id="12331651" author="paul.elschot@xs4all.nl" created="Sun, 9 Oct 2005 02:01:53 +0100"  >&lt;p&gt;This a continuation of the earlier patch.&lt;br/&gt;
The basic ideas are now built deep into the logic of determining the actual scorer to be used.&lt;br/&gt;
For this logic needed quite a few changes, simplifying in many places, but also&lt;br/&gt;
one more case (a conjunction scorer over (a) the required scorers and (b) a disjunction&lt;br/&gt;
scorer over optional scorers with a minimum number that should match).&lt;/p&gt;

&lt;p&gt;This obsoletes another patch that splits off the coordination logic when it is not needed.&lt;br/&gt;
I&apos;ll note this there later.&lt;/p&gt;

&lt;p&gt;Some tests for unchanged scoring behaviour are still needed, but those can&lt;br/&gt;
be added later, since this is probably going to work well.&lt;/p&gt;

&lt;p&gt;Again, thanks for this idea and for the test cases.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12331656" author="paul.elschot@xs4all.nl" created="Sun, 9 Oct 2005 05:08:36 +0100"  >&lt;p&gt;The code that is obsoleted by this BooleanScorer2 is at issue &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-364&quot; title=&quot;Further improvements to BooleanScorer2&quot;&gt;&lt;del&gt;LUCENE-364&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="12332637" author="hossman" created="Fri, 21 Oct 2005 07:21:57 +0100"  >&lt;p&gt;fixed a one character typo in a test name that caused the test to not be run...&lt;/p&gt;
</comment>
                    <comment id="12356528" author="hossman" created="Wed, 2 Nov 2005 05:56:02 +0000"  >&lt;p&gt;To recap: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The orriginal bug proposed a new Query class, and provided a sample query parser that leveraged it.&lt;/li&gt;
	&lt;li&gt;subsequent discussions have led to a patch for BooleanQuery and BooleanScorer to support this functionality without needing a new class&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looking at the example query parser for the first time today, I don&apos;t think it&apos;s a very clean way to proceed - if for no other reason then those provided by the other...&lt;/p&gt;

&lt;p&gt;        //Note (mis)use of fieldname &quot;min_coord&quot; to pass the required parameter - a more formal&lt;br/&gt;
        //support for passing query function_names and parameters to user-defined query factories &lt;br/&gt;
        //would be a very useful addition to the QueryParser base class&lt;/p&gt;


&lt;p&gt;One idea that occured to me earlier today, is that &quot;~&quot; could be used to indicate the  minNrShouldMatch.  This occured to me becuase specifying a &quot;tolerance&quot; in the number of optional subclauses seems similar to me to specifying the slop in a phrase query.&lt;/p&gt;

&lt;p&gt;I don&apos;t have a patch for this, i just wanted to post it (in case i get hit by a bus).&lt;/p&gt;</comment>
                    <comment id="12356538" author="paul.elschot@xs4all.nl" created="Wed, 2 Nov 2005 07:06:47 +0000"  >&lt;p&gt;Another way would be to override getBooleanQuery in QueryParser&lt;br/&gt;
and check there whether one of the given clauses has a special form,&lt;br/&gt;
for example _min2 or _min3  indicating the minimum number of remaining&lt;br/&gt;
clauses that should match for this boolean query.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12356746" author="yseeley@gmail.com" created="Fri, 4 Nov 2005 14:10:14 +0000"  >&lt;p&gt;I&apos;ve been reviewing this patch along with BooleanScorer2 in general since It&apos;s my first exposure to it (it&apos;s certaily more complex than the original).&lt;/p&gt;

&lt;p&gt;There are so many decision points in the creation of the scorers that I wrote a test to create random boolean queries to verify that things match the original.&lt;br/&gt;
One thing I found is that when minNrShou ldMatch&amp;gt;0 with nested boolean queries, the scores may not match for those documents that match the same query with minNrShou ldMatch=0.  Is this expected?&lt;/p&gt;</comment>
                    <comment id="12356750" author="hossman" created="Fri, 4 Nov 2005 15:15:25 +0000"  >&lt;p&gt;: One thing I found is that when minNrShouldMatch&amp;gt;0 with &lt;br/&gt;
: nested boolean queries, the scores may not match for those&lt;br/&gt;
: documents that match the same query with &lt;br/&gt;
: minNrShouldMatch=0.  Is this expected?&lt;/p&gt;

&lt;p&gt;...hmm.  assuming you mean that you only set minNrShouldMatch in the root query, and the nested queries are vanilla BooleanQueries &amp;#8211; then no, that doesn&apos;t sound expected.&lt;/p&gt;

&lt;p&gt;If the subqueries had minNrShouldMatch set (regardless of wether or not the root query did), then yes i can imagine some cases where the scores would be different (even if the result set is the same).  Consider the following nesting scenerio...&lt;/p&gt;

&lt;p&gt;   ( (A B X) (C D Y) (E W Z) )&lt;/p&gt;

&lt;p&gt;If document #42 matches A, B, C, D, and E, but does NOT match X, Y or Z, then it will easily match this query.  Even if all of the subqueries are modified so that minNrShouldMatch=2, the result set will be the same &amp;#8211; but the score for document#42 &lt;b&gt;SHOULD&lt;/b&gt; be different, because it no longer matches enough individual clauses in the third sub query to get a score contribution from it (ie: the match on E no longer improves the score)&lt;/p&gt;

&lt;p&gt;But, if all you do is set minNrShouldMatch &amp;gt; 0 on the outermost query ... I can&apos;t think of any reason why the score would chance if the document still matches (other then a bug)&lt;/p&gt;

&lt;p&gt;Can you post your test?&lt;/p&gt;

</comment>
                    <comment id="12356754" author="paul.elschot@xs4all.nl" created="Fri, 4 Nov 2005 17:16:19 +0000"  >&lt;p&gt;&amp;gt;There are so many decision points in the creation of the scorers that I wrote a test to&lt;br/&gt;
&amp;gt; create random boolean queries to verify that things match the original. &lt;/p&gt;

&lt;p&gt;Thank you very much. I think there are not enough tests for boolean queries, so&lt;br/&gt;
such tests are very welcome.&lt;/p&gt;

&lt;p&gt;&amp;gt; One thing I found is that when minNrShou ldMatch&amp;gt;0 with nested boolean queries, the&lt;br/&gt;
&amp;gt; scores may not match for those documents that match the same query with&lt;br/&gt;
&amp;gt; minNrShouldMatch=0. Is this expected? &lt;/p&gt;

&lt;p&gt;Yes, see also Hoss Mann&apos;s comment.&lt;br/&gt;
This can happen in the case that a nested query (eg. (E W Z) above) does&lt;br/&gt;
not match because of its minNrShould match,&lt;br/&gt;
while the full query still matches because it has enough&lt;br/&gt;
matching subqueries left.&lt;br/&gt;
In that case the full query has a smaller score because fewer of its subqueries match.&lt;/p&gt;

&lt;p&gt;Btw. once this has settled I&apos;d like to redo the splitting off the coordation part when&lt;br/&gt;
it is not needed, but that is only for performance.&lt;/p&gt;</comment>
                    <comment id="12356825" author="yseeley@gmail.com" created="Sat, 5 Nov 2005 07:01:01 +0000"  >&lt;p&gt;Thanks for the scoring clarification guys... if I only set minNrShouldMatch&amp;gt;0 on the top level query, all the scores match!&lt;/p&gt;

&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added BooleanQuery.getMinimumNumberShouldMatch()&lt;/li&gt;
	&lt;li&gt;added the syntax Chris (Hoss) suggested to BooleanQuery.toString()... but it&apos;s not too late to change if someone has a better idea&lt;/li&gt;
	&lt;li&gt;added random boolean query testing with variable minMrShouldMatch to TestBooleanMinShouldMatch&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12356890" author="paul.elschot@xs4all.nl" created="Sun, 6 Nov 2005 23:57:57 +0000"  >&lt;p&gt;Patch to TestBoolean2.java to use try/finally to reset the static useScorer14 flag in BooleanQuery&lt;br/&gt;
even when a test fails.&lt;br/&gt;
This has bitten me once when one of the tests started failing...&lt;/p&gt;</comment>
                    <comment id="12357144" author="yseeley@gmail.com" created="Thu, 10 Nov 2005 06:31:09 +0000"  >&lt;p&gt;attaching new BooleanQuery.patch that fixes a toString() typo and syncs with head.&lt;/p&gt;</comment>
                    <comment id="12357277" author="yseeley@gmail.com" created="Fri, 11 Nov 2005 04:02:08 +0000"  >&lt;p&gt;I like this patch, and I&apos;d like to see it committed before 1.9 is released.&lt;br/&gt;
Only two outstanding issues:&lt;br/&gt;
  1) Deciding on a syntax and adding QueryParser support... I think that&apos;s a separate issue and can be addressed later.&lt;br/&gt;
  2) Performance optimizations when coord isn&apos;t needed... that also looks like a separate issue that can be dealt with later.&lt;/p&gt;

&lt;p&gt;So it looks to me like this is ready to be committed.  Does anyone see a reason why it shouldn&apos;t be?&lt;/p&gt;
</comment>
                    <comment id="12357795" author="yseeley@gmail.com" created="Thu, 17 Nov 2005 01:42:23 +0000"  >&lt;p&gt;fixed BooleanQuery hashCode/equals and committed patches.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10020">
                <name>Cloners</name>
                                <outwardlinks description="is cloned as">
                            <issuelink>
            <issuekey id="12325713">LUCENE-466</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12312638" name="ASF.LICENSE.NOT.GRANTED--CoordConstrainedBooleanQuery.java" size="5452" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:28:59 +0100" />
                    <attachment id="12312636" name="ASF.LICENSE.NOT.GRANTED--CoordConstrainedBooleanQuery.java" size="2193" author="markharw00d@yahoo.co.uk" created="Thu, 9 Jun 2005 21:05:03 +0100" />
                    <attachment id="12312639" name="ASF.LICENSE.NOT.GRANTED--CustomQueryParserExample.java" size="4056" author="markharw00d@yahoo.co.uk" created="Sat, 11 Jun 2005 07:56:23 +0100" />
                    <attachment id="12312637" name="ASF.LICENSE.NOT.GRANTED--CustomQueryParserExample.java" size="3124" author="markharw00d@yahoo.co.uk" created="Thu, 9 Jun 2005 21:05:38 +0100" />
                    <attachment id="12320576" name="BooleanQuery.patch" size="3293" author="yseeley@gmail.com" created="Thu, 10 Nov 2005 06:31:09 +0000" />
                    <attachment id="12320483" name="BooleanQuery.patch" size="3299" author="yseeley@gmail.com" created="Sat, 5 Nov 2005 07:01:01 +0000" />
                    <attachment id="12314777" name="BooleanScorer2.java" size="13226" author="paul.elschot@xs4all.nl" created="Sun, 9 Oct 2005 02:01:53 +0100" />
                    <attachment id="12314694" name="LUCENE-395.patch" size="5677" author="hossman" created="Tue, 4 Oct 2005 09:48:48 +0100" />
                    <attachment id="12314692" name="LUCENE-395.patch" size="5444" author="hossman" created="Tue, 4 Oct 2005 05:12:54 +0100" />
                    <attachment id="12314592" name="LUCENE-395.patch" size="4987" author="hossman" created="Wed, 28 Sep 2005 04:19:53 +0100" />
                    <attachment id="12320496" name="TestBoolean2Patch5.txt" size="1050" author="paul.elschot@xs4all.nl" created="Sun, 6 Nov 2005 23:57:57 +0000" />
                    <attachment id="12320484" name="TestBooleanMinShouldMatch.java" size="14049" author="yseeley@gmail.com" created="Sat, 5 Nov 2005 07:01:01 +0000" />
                    <attachment id="12315005" name="TestBooleanMinShouldMatch.java" size="11202" author="hossman" created="Fri, 21 Oct 2005 07:21:57 +0100" />
                    <attachment id="12314775" name="TestBooleanMinShouldMatch.java" size="11201" author="paul.elschot@xs4all.nl" created="Sun, 9 Oct 2005 01:53:45 +0100" />
                    <attachment id="12314695" name="TestBooleanMinShouldMatch.java" size="13398" author="hossman" created="Tue, 4 Oct 2005 09:48:48 +0100" />
                    <attachment id="12314631" name="TestBooleanMinShouldMatch.java" size="10397" author="hossman" created="Fri, 30 Sep 2005 08:21:04 +0100" />
                    <attachment id="12314593" name="TestBooleanMinShouldMatch.java" size="5659" author="hossman" created="Wed, 28 Sep 2005 04:19:56 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>17.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>35284</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 12 Jun 2005 05:32:15 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13354</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27336</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>