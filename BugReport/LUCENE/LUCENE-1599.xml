<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:43 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1599/LUCENE-1599.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1599] SpanRegexQuery and SpanNearQuery is not working with MultiSearcher</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1599</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;MultiSearcher is using:&lt;br/&gt;
queries&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; = searchables&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;.rewrite(original);&lt;br/&gt;
to rewrite query and then use combine to combine them.&lt;/p&gt;

&lt;p&gt;But SpanRegexQuery&apos;s rewrite is different from others.&lt;br/&gt;
After you call it on the same query, it always return the same rewritten queries.&lt;/p&gt;

&lt;p&gt;As a result, only search on the first IndexSearcher work. All others are using the first IndexSearcher&apos;s rewrite queries.&lt;br/&gt;
So many terms are missing and return unexpected result.&lt;/p&gt;

&lt;p&gt;Billow&lt;/p&gt;</description>
                <environment>&lt;p&gt;lucene-core 2.4.1, lucene-regex 2.4.1&lt;/p&gt;</environment>
            <key id="12422708">LUCENE-1599</key>
            <summary>SpanRegexQuery and SpanNearQuery is not working with MultiSearcher</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="billowgao">Billow Gao</reporter>
                        <labels>
                    </labels>
                <created>Mon, 13 Apr 2009 17:45:40 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:22 +0100</updated>
                    <resolved>Sun, 5 Jul 2009 18:16:43 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                          <timeoriginalestimate seconds="7200">2h</timeoriginalestimate>
                    <timeestimate seconds="7200">2h</timeestimate>
                                  <comments>
                    <comment id="12700596" author="markrmiller@gmail.com" created="Sun, 19 Apr 2009 18:22:53 +0100"  >&lt;p&gt;Could you write a quick test case? I just give it a simple go, and for the case I used, I didn&apos;t see the problem. If you can provide some sample code that shows exactly what tickles it, I&apos;ll work on fixing it.&lt;/p&gt;</comment>
                    <comment id="12718396" author="markrmiller@gmail.com" created="Thu, 11 Jun 2009 11:35:31 +0100"  >&lt;p&gt;Hey Billow, do you have anything to add to help us track this down? If not, I&apos;m going to close it as incomplete eventually.&lt;/p&gt;</comment>
                    <comment id="12718418" author="billowgao" created="Thu, 11 Jun 2009 12:53:57 +0100"  >&lt;p&gt;Sorry, I should write the test case earlier.&lt;br/&gt;
Forgot to check my email on this account.&lt;/p&gt;

&lt;p&gt;Here is the testcase.&lt;/p&gt;

&lt;p&gt;The problem is very clear.&lt;br/&gt;
When there is a SpanNearQuery query which have SpanRegexQuery in it.&lt;br/&gt;
And MultiSearcher is used, the query will only be rewritten once on the first IndexSearcher in the MultiSearcher.&lt;br/&gt;
So only terms in the first IndexSearcher are used.&lt;br/&gt;
And of course, it will fail on other IndexSearchers since it didn&apos;t use terms in those IndexSearchers.&lt;/p&gt;

&lt;p&gt;Billow&lt;/p&gt;</comment>
                    <comment id="12718419" author="billowgao" created="Thu, 11 Jun 2009 12:55:04 +0100"  >&lt;p&gt;Just uploaded the testcase  	TestSpanRegexBug.java.&lt;/p&gt;

&lt;p&gt;Sorry, I should write the test case earlier.&lt;br/&gt;
Forgot to check my email on this account.&lt;/p&gt;

&lt;p&gt;Here is the testcase.&lt;/p&gt;

&lt;p&gt;The problem is very clear.&lt;br/&gt;
When there is a SpanNearQuery query which have SpanRegexQuery in it.&lt;br/&gt;
And MultiSearcher is used, the query will only be rewritten once on the first IndexSearcher in the MultiSearcher.&lt;br/&gt;
So only terms in the first IndexSearcher are used.&lt;br/&gt;
And of course, it will fail on other IndexSearchers since it didn&apos;t use terms in those IndexSearchers.&lt;/p&gt;

&lt;p&gt;Billow&lt;/p&gt;</comment>
                    <comment id="12718945" author="mikemccand" created="Fri, 12 Jun 2009 20:11:50 +0100"  >&lt;p&gt;MultiSearcher seems to rewrite against all its searchers, and then uses Query.combine to merge all the the results?  Maybe the issue is in Query.combine?&lt;/p&gt;

&lt;p&gt;Seems like we should fix this for 2.9.&lt;/p&gt;</comment>
                    <comment id="12718948" author="billowgao" created="Fri, 12 Jun 2009 20:20:27 +0100"  >&lt;p&gt;Not there.&lt;br/&gt;
If you use the query one those two IndexSearcher one by one, then you will find that only the first search has a match.&lt;br/&gt;
The second one always fail.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;SpanRegexQuery srq = new SpanRegexQuery(new Term(&quot;field&quot;, &quot;a.*&quot;));&lt;br/&gt;
        SpanRegexQuery stq = new SpanRegexQuery(new Term(&quot;field&quot;, &quot;b.*&quot;));&lt;br/&gt;
        SpanNearQuery query = new SpanNearQuery(new SpanQuery[] &lt;/p&gt;
{ srq, stq }
&lt;p&gt;,&lt;br/&gt;
                6, true);&lt;br/&gt;
IndexSearcher[] arrSearcher = new IndexSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;;&lt;br/&gt;
        arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt; = new IndexSearcher(indexStoreA);&lt;br/&gt;
        arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; = new IndexSearcher(indexStoreB);&lt;/p&gt;

&lt;p&gt;Hits hits = arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.search(query);&lt;br/&gt;
assertEquals(1, hits.length());&lt;/p&gt;

&lt;p&gt;hits = arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.search(query);&lt;/p&gt;

&lt;p&gt;//fail here because query rewrite will not use new term.&lt;br/&gt;
//The problem should sit inside spanquery, maybe it only call rewrite function once.&lt;br/&gt;
//Anyway, I didn&apos;t check its source code yet.&lt;br/&gt;
assertEquals(1, hits.length()); &lt;/p&gt;

&lt;p&gt;arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.close();&lt;br/&gt;
arrSearcher&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.close();&lt;/p&gt;

</comment>
                    <comment id="12718955" author="mikemccand" created="Fri, 12 Jun 2009 20:51:10 +0100"  >&lt;p&gt;Hmm... do you have a patch in mind (to Lucene&apos;s sources) to fix this?&lt;/p&gt;</comment>
                    <comment id="12718958" author="billowgao" created="Fri, 12 Jun 2009 20:59:33 +0100"  >&lt;p&gt;I rewrote the MultiSearcher for my system. Actually, we rewrote most lucene analyzer/parser/search functions...&lt;br/&gt;
So my patch won&apos;t work for others.&lt;/p&gt;

&lt;p&gt;I will look into the SpanQuery function when I get a chance. I believe that our patch should be applied there.&lt;br/&gt;
Also, I don&apos;t like MultiSearcher&apos;s combine function.&lt;/p&gt;</comment>
                    <comment id="12718962" author="mikemccand" created="Fri, 12 Jun 2009 21:08:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;I rewrote the MultiSearcher for my system. Actually, we rewrote most lucene analyzer/parser/search functions...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds interesting!  Anything that could be contributed back?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I don&apos;t like MultiSearcher&apos;s combine function.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t either!  It seems like Lucene should rewrite then search, against each searcher, rather than rewriting all up front and combining.&lt;/p&gt;</comment>
                    <comment id="12718964" author="billowgao" created="Fri, 12 Jun 2009 21:18:48 +0100"  >&lt;p&gt;The system is specially designed for special requirement. So they are not for general purpose.&lt;br/&gt;
Added many limitation and extended some search features.&lt;br/&gt;
I will re-organize and extract those useful for public, and then contribute them.&lt;br/&gt;
But not a good time to do that now. Will wait until they are stable enough.&lt;/p&gt;</comment>
                    <comment id="12719619" author="markrmiller@gmail.com" created="Mon, 15 Jun 2009 17:14:41 +0100"  >&lt;p&gt;Something is modifying the original query itself.&lt;/p&gt;

&lt;p&gt;In MultiSearcher.rewrite:&lt;/p&gt;

&lt;p&gt;  public Query rewrite(Query original) throws IOException {&lt;br/&gt;
    Query[] queries = new Query&lt;span class=&quot;error&quot;&gt;&amp;#91;searchables.length&amp;#93;&lt;/span&gt;;&lt;br/&gt;
    for (int i = 0; i &amp;lt; searchables.length; i++) &lt;/p&gt;
{
      queries[i] = searchables[i].rewrite(original);
    }
&lt;p&gt;    return queries&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;.combine(queries);&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;On the first time through the loop, the SpanRegexQuery will contain the regex pattern, but the first time it hits rewrite, it will be changed to the expanded query. This shouldnt happen.&lt;br/&gt;
On the next time through the loop, original query will not contain a regex pattern, but will instead be the first time through the loop&apos;s rewritten query. Oddness.&lt;/p&gt;

&lt;p&gt;I&apos;ll dig in and try and fix for 2.9.&lt;/p&gt;</comment>
                    <comment id="12721052" author="markrmiller@gmail.com" created="Thu, 18 Jun 2009 05:33:08 +0100"  >&lt;p&gt;Well yuck.&lt;/p&gt;

&lt;p&gt;SpanNearQuery does this clone call in its rewrite method but there is no clone impl - so it looks like it returns a SpanNearQuery with the same clauses instance. So it looks like this gets tangled up with the real query, and the real query gets modified to the rewritten form for the rewrite on searchable2.&lt;/p&gt;

&lt;p&gt;I think anyway. I wanted to just test a fix to if that was right, but SpanNearQuery can contain any span queries, so I guess all of them might need clone impls and we may have to clone the whole chain?&lt;/p&gt;

&lt;p&gt;A little tired to think about it at the moment &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Looks like the issue is with the cloning in SpanNearQuery though.&lt;/p&gt;</comment>
                    <comment id="12723686" author="markrmiller@gmail.com" created="Wed, 24 Jun 2009 20:13:04 +0100"  >&lt;p&gt;Test + Fix (properly implement clone on near,or,not span queries)&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12411686" name="LUCENE-1599.patch" size="8073" author="markrmiller@gmail.com" created="Wed, 24 Jun 2009 20:13:04 +0100" />
                    <attachment id="12410384" name="TestSpanRegexBug.java" size="3479" author="billowgao" created="Thu, 11 Jun 2009 12:53:57 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 19 Apr 2009 17:22:53 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12156</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26129</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>