<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3474/LUCENE-3474.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3474] pass liveDocs Bits down in scorercontext, instead of Weights pulling from the reader </title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3474</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Spinoff from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;, this would allow filters to work in a more flexible way (besides just cleaning up)&lt;/p&gt;</description>
                <environment></environment>
            <key id="12525101">LUCENE-3474</key>
            <summary>pass liveDocs Bits down in scorercontext, instead of Weights pulling from the reader </summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Sep 2011 21:39:27 +0100</created>
                <updated>Fri, 10 May 2013 11:44:51 +0100</updated>
                    <resolved>Sat, 1 Oct 2011 02:04:14 +0100</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13116866" author="rcmuir" created="Wed, 28 Sep 2011 23:40:53 +0100"  >&lt;p&gt;updated patch with javadocs for the acceptDocs, and i had neglected the MatchAllDocsScorer.&lt;/p&gt;

&lt;p&gt;all tests pass&lt;/p&gt;</comment>
                    <comment id="13116872" author="mikemccand" created="Wed, 28 Sep 2011 23:49:18 +0100"  >&lt;p&gt;Patch looks great!  Nice to separate this from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;; after this patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt; will be tiny!&lt;/p&gt;</comment>
                    <comment id="13117120" author="cmale" created="Thu, 29 Sep 2011 09:13:41 +0100"  >&lt;p&gt;Super, lets go ahead and commit this.&lt;/p&gt;</comment>
                    <comment id="13117129" author="simonw" created="Thu, 29 Sep 2011 09:24:48 +0100"  >&lt;p&gt;I kind of liked the ScorerContext#topScorer(boolean) builder like pattern which is way less verbose than using ctors. Can we add those methods back and force a copy on setAcceptsDocs(Bits) that way we don&apos;t need to copy all settings on an incoming context.&lt;/p&gt;</comment>
                    <comment id="13117133" author="rcmuir" created="Thu, 29 Sep 2011 09:30:52 +0100"  >&lt;p&gt;I really hated that thing: Its strange and unintuitive: half the code to the class is explaining the &quot;pattern&quot; that the class uses and how to use it.&lt;/p&gt;

&lt;p&gt;Not good!&lt;/p&gt;</comment>
                    <comment id="13117144" author="simonw" created="Thu, 29 Sep 2011 09:43:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;Its strange and unintuitive: half the code to the class is explaining the &quot;pattern&quot; that the class uses and how to use it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;very straight forward IMO. Well since it used to be that way we should keep it. Just changing stuff like this for &quot;taste&quot; reasons is not acceptable for me though. We already figured out that we have the &quot;builder&quot; vs. &quot;no-builder&quot; camp have here in Lucene and I don&apos;t want to fight this every time something like that comes up. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I really hated that thing&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;thats fine I hate the ctor verbosity so we are deadlocking here. Again &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                    <comment id="13117149" author="rcmuir" created="Thu, 29 Sep 2011 09:47:56 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Just changing stuff like this for &quot;taste&quot; reasons is not acceptable for me though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Really? we can&apos;t write patches that change code in trunk any more? &lt;/p&gt;</comment>
                    <comment id="13117150" author="rcmuir" created="Thu, 29 Sep 2011 09:49:54 +0100"  >&lt;p&gt;By the way, I didnt change this for taste reasons.&lt;/p&gt;

&lt;p&gt;I want the Bitset to be required to build a ScorerContext (Note both ctors take it!)&lt;/p&gt;

&lt;p&gt;So this pretty much blew the existing &quot;pattern&quot; out of the water.&lt;/p&gt;</comment>
                    <comment id="13117152" author="simonw" created="Thu, 29 Sep 2011 09:52:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;I want the Bitset to be required to build a ScorerContext (Note both ctors take it!)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;rename def() to create(Bits), done.&lt;/p&gt;</comment>
                    <comment id="13117154" author="simonw" created="Thu, 29 Sep 2011 09:55:19 +0100"  >&lt;blockquote&gt;&lt;p&gt;So this pretty much blew the existing &quot;pattern&quot; out of the water.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;boolean boolean params are just another start of a big mess here. the named builder like methods here make it very explicit what you are doing here. If we gonna add more which is likely we gonna end up with more boolean params people need to get in the right order. The chance to introduce an error here is way less than with a ctor.&lt;/p&gt;</comment>
                    <comment id="13117158" author="rcmuir" created="Thu, 29 Sep 2011 09:59:56 +0100"  >&lt;p&gt;Simon i have &lt;b&gt;never&lt;/b&gt; seen code with this pattern before.&lt;/p&gt;

&lt;p&gt;The chance to introduce error with that crazy-builder-like-thing is tremendous, because its unnatural.&lt;br/&gt;
(In fact i think i spotted some things doing this patch, for other issues)&lt;/p&gt;

&lt;p&gt;What is wrong with normal java objects?&lt;/p&gt;</comment>
                    <comment id="13117159" author="simonw" created="Thu, 29 Sep 2011 10:09:32 +0100"  >&lt;p&gt;I don&apos;t wanna fight this again, its too demanding for me. Go for it I don&apos;t think my opinion counts here obviously. I don&apos;t want to be in your way really. Sorry for raising an objection on the patch.&lt;/p&gt;</comment>
                    <comment id="13117161" author="rcmuir" created="Thu, 29 Sep 2011 10:13:29 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Go for it I don&apos;t think my opinion counts here obviously&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why? because I disagree with you? Thats pretty natural man, normal for people to disagree on opinions.&lt;/p&gt;

&lt;p&gt;its not like anyone has committed any shit here, so quit overreacting.&lt;/p&gt;</comment>
                    <comment id="13117162" author="thetaphi" created="Thu, 29 Sep 2011 10:19:57 +0100"  >&lt;p&gt;Mr. Muir: I also disagree with you. If this gets committed I will revert it - just as you did with Yonik in the past - if it blows me out of Lucene PMC/Lucene Committers, who cares. Sorry, this pattern is very simple and often used.&lt;/p&gt;</comment>
                    <comment id="13117163" author="rcmuir" created="Thu, 29 Sep 2011 10:22:00 +0100"  >&lt;p&gt;Thats fine Uwe, we can hold search performance hostage over this broken builder pattern&lt;/p&gt;

&lt;p&gt;This is gonna be great.&lt;/p&gt;</comment>
                    <comment id="13117165" author="rcmuir" created="Thu, 29 Sep 2011 10:24:19 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Sorry, this pattern is very simple and often used.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Where? For example where in the JDK uses this .def() etc?&lt;/p&gt;</comment>
                    <comment id="13117166" author="cmale" created="Thu, 29 Sep 2011 10:25:32 +0100"  >&lt;p&gt;Does Simon&apos;s suggestion of replacing def() with create(Bits) solve the mandatory Bits issue? Can we just fix the broken parts of the builder instead of outright replacing it?&lt;/p&gt;</comment>
                    <comment id="13117167" author="simonw" created="Thu, 29 Sep 2011 10:25:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why? because I disagree with you? Thats pretty natural man, normal for people to disagree on opinions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;because I don&apos;t see that you are going away from your opinion whatever I say. You made clear you don&apos;t want to have any builder pattern in lucene so what is the point of discussing then. I need to put up my own patch which uses the builder to make my objections being in the patch obviously which is not what I am used to. Usually we try to find a compromise and by iterating, right? Each time this pattern comes up there is no way that you move a tiny bit from your opinion just because you don&apos;t like it. Well I don&apos;t like things people suggest from a code syte perspective but it makes sense very often, so I change it. I don&apos;t see why this needs to go for rounds and rounds of fighting here. We did this for a reason when ScorerContext has introduced, it served as a little DSL on top of it enforcing immutability. if you want to have Bit mandatory you should just do something like ScorereContext.create(delDocs).topLevel(true).outOfOrder(false) which makes very clear what you want rather than new ScoreContext(delDocs, true, false) and we gonna have more boolean params here in the future.&lt;/p&gt;</comment>
                    <comment id="13117171" author="simonw" created="Thu, 29 Sep 2011 10:31:23 +0100"  >&lt;blockquote&gt;&lt;p&gt;Where? For example where in the JDK uses this .def() etc?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;those are similar patterns:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we use def() as a shortcut for default() (keyword though) we should rather use create(Bits) IMP&lt;/p&gt;</comment>
                    <comment id="13117172" author="rcmuir" created="Thu, 29 Sep 2011 10:32:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;because I don&apos;t see that you are going away from your opinion whatever I say.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats right, I think i&apos;m allowed to have my own opinion?&lt;/p&gt;

&lt;p&gt;All I did was upload a patch: I&apos;m in no rush to commit here, we can just leave the issue open until everyone is happy.&lt;/p&gt;
</comment>
                    <comment id="13117173" author="thetaphi" created="Thu, 29 Sep 2011 10:34:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;we can hold search performance hostage over this broken builder pattern&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You really think that additional method calls and Eden objects on highest level (which are called when creating scorers, not when scorers are consumed) will slowdown your search? Hey, program your stuff in C/C++ and use CLucene in future.&lt;/p&gt;

&lt;p&gt;Ah by the way, recode all toString() methods anywhere in Lucene and rip StringBuilder!&lt;/p&gt;</comment>
                    <comment id="13117177" author="rcmuir" created="Thu, 29 Sep 2011 10:36:51 +0100"  >&lt;blockquote&gt;
&lt;p&gt;You really think that additional method calls and Eden objects on highest level (which are called when creating scorers, not when scorers are consumed) will slowdown your search?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, I don&apos;t. &lt;/p&gt;

&lt;p&gt;I mean that we can hold our filter execution performance hostage over this internal API, since you have clearly voiced you will revert my commit if i commit the patch.&lt;/p&gt;</comment>
                    <comment id="13117178" author="cmale" created="Thu, 29 Sep 2011 10:38:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;I mean that we can hold our filter execution performance hostage over this internal API, since you have clearly voiced you will revert my commit if i commit the patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are you saying you wouldn&apos;t support an updated version of your patch that went back to builder style?&lt;/p&gt;</comment>
                    <comment id="13117179" author="rcmuir" created="Thu, 29 Sep 2011 10:40:09 +0100"  >&lt;blockquote&gt;
&lt;p&gt;those are similar patterns:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html&quot; class=&quot;external-link&quot;&gt;http://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually none of those are similar at all.&lt;/p&gt;

&lt;p&gt;None of those create a new object on each setter, they are normal Builders.&lt;/p&gt;

&lt;p&gt;This ScorerContext is something different entirely.&lt;/p&gt;</comment>
                    <comment id="13117180" author="rcmuir" created="Thu, 29 Sep 2011 10:40:34 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Are you saying you wouldn&apos;t support an updated version of your patch that went back to builder style?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s correct.&lt;/p&gt;</comment>
                    <comment id="13117182" author="thetaphi" created="Thu, 29 Sep 2011 10:43:41 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Are you saying you wouldn&apos;t support an updated version of your patch that went back to builder style?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s correct.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I simply don&apos;t suport your patch - deadlock.&lt;/p&gt;</comment>
                    <comment id="13117191" author="cmale" created="Thu, 29 Sep 2011 10:55:14 +0100"  >&lt;p&gt;Is there anything people are prepared to compromise on here?&lt;/p&gt;</comment>
                    <comment id="13117192" author="rcmuir" created="Thu, 29 Sep 2011 10:57:07 +0100"  >&lt;p&gt;I&apos;d be happy with flags instead of the booleans.&lt;/p&gt;</comment>
                    <comment id="13117262" author="cmale" created="Thu, 29 Sep 2011 13:50:33 +0100"  >&lt;p&gt;I&apos;m not one for rushing discussions but we&apos;re getting close with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt; which this is a large chunk of.  Anyway we can come to an agreement here?&lt;/p&gt;</comment>
                    <comment id="13117270" author="mikemccand" created="Thu, 29 Sep 2011 14:09:29 +0100"  >&lt;p&gt;It would be nice if we could discuss the builder pattern (and other&lt;br/&gt;
heated disagreements) without quickly degrading into deadlock.  We&lt;br/&gt;
need to be able to work through our disagreements so we can get back&lt;br/&gt;
&quot;real&quot; improvements to Lucene and Solr.  In this case &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt; is&lt;br/&gt;
an enormous performance gain.&lt;/p&gt;

&lt;p&gt;Net/net I don&apos;t like the use of the builder pattern for ScorerContext.&lt;br/&gt;
It seems like overkill: we only have 3 settings here.  Even by the&lt;br/&gt;
proponents of the builder pattern this is overkill?&lt;/p&gt;

&lt;p&gt;I think chained setters are less readable (see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2308&quot; title=&quot;Separately specify a field&amp;#39;s type&quot;&gt;&lt;del&gt;LUCENE-2308&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I do agree 2 booleans in a row is asking for sneaky trouble; we can&lt;br/&gt;
add .setX instead (these fields need not be final)?  Or the int flags&lt;br/&gt;
to the ctor is a great solution too (I think we should do this for&lt;br/&gt;
FieldType as well).&lt;/p&gt;

&lt;p&gt;Net/net plain old boring java object would work fine here.&lt;/p&gt;

&lt;p&gt;And, in general, I don&apos;t think we should let the builder pattern seep&lt;br/&gt;
into Lucene, for the simple reason that it&apos;s obviously controversial.&lt;br/&gt;
This is no different from any other controversial change in&lt;br/&gt;
open-source...&lt;/p&gt;

&lt;p&gt;Also, one can always make a shim layer on top of Lucene that exposes&lt;br/&gt;
builder APis for everything?  QueryParser, *Query, *Field/Document,&lt;br/&gt;
IR, IW, merge policies/schedulers, etc., all could be cutover to&lt;br/&gt;
builder APIs &quot;up above&quot; right?  If we can safely apply the builder&lt;br/&gt;
pattern &quot;on top&quot;, ie it need not pollute Lucene&apos;s core, why not do&lt;br/&gt;
that?  We should only make core changes that are not controversial or&lt;br/&gt;
must be done in core.&lt;/p&gt;</comment>
                    <comment id="13117276" author="mikemccand" created="Thu, 29 Sep 2011 14:20:20 +0100"  >&lt;p&gt;I think int flags would work well?  We only have 2 flags here, plus&lt;br/&gt;
required acceptDocs.&lt;/p&gt;

&lt;p&gt;The vast majority of cases use the default flags:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  new ScorerContext(acceptDocs);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then for the few places that change the flags it&apos;d be something&lt;br/&gt;
like this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  new ScorerContext(acceptDocs, ScorerFlags.TOP_LEVEL);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We keep final-ness for the fields.&lt;/p&gt;

&lt;p&gt;This seems like a great solution?&lt;/p&gt;

&lt;p&gt;Failing that.... another option would be to just stop using an object&lt;br/&gt;
here at all, and go back to passing explicit flags down to&lt;br/&gt;
Weight.scorer.&lt;/p&gt;

&lt;p&gt;In fact one benefit of this is we get stronger typing, ie, we force at&lt;br/&gt;
compilation time all Scorer impls to be fixed to handle the new&lt;br/&gt;
setting (vs today where a Scorer can easily silently be missed, thus&lt;br/&gt;
adding latent bug).&lt;/p&gt;

&lt;p&gt;This means on any addition to the scorer API (eg I&apos;ve long wanted for&lt;br/&gt;
caller to declare up front whether they need scores computed vs &quot;only&lt;br/&gt;
matching&quot;, ie MTQWF and CSQ would pass false), we break the API.  But&lt;br/&gt;
I think that&apos;s actually fine, even in 3.x: making your own Scorer is&lt;br/&gt;
very expert.&lt;/p&gt;</comment>
                    <comment id="13117289" author="cmale" created="Thu, 29 Sep 2011 14:22:44 +0100"  >&lt;p&gt;I don&apos;t like the idea of shying away from a change just because it&apos;s controversial.  Sometimes its necessary to shake things up with new ideas.  &lt;/p&gt;

&lt;p&gt;While I do agree that it&apos;d be better if we could get past these arguments and make the real changes, you seem to be asking for those who advocate a builder like API here to compromise and for those who don&apos;t want such an API, to not? Thats a tough pill to swallow.&lt;/p&gt;

&lt;p&gt;Also, this API feels to me to be a lot more internal, so whether or not builders could be built on top of more outward facing concepts like QueryParsers, Field/Document etc, seems a different issue?&lt;/p&gt;</comment>
                    <comment id="13117302" author="rcmuir" created="Thu, 29 Sep 2011 14:55:59 +0100"  >&lt;p&gt;Lucene went a long time without builder APIs, if you like builders, you can do them in your own code (there is no need for us to enforce such antipatterns)&lt;/p&gt;

&lt;p&gt;This API for ScorerContext is an internal API. the intended consumer is a lucene developer (e.g. guys like me). Its not for average joe... especially in 4.x when you can more easily tweak the scoring API, I think very very few users will write custom queries.&lt;/p&gt;

&lt;p&gt;We don&apos;t need to design APIs to baby lucene committers about this stuff, especially about two booleans, but like I said I wouldn&apos;t get too upset about flags (even though personally i think its overkill too).&lt;/p&gt;</comment>
                    <comment id="13117306" author="rcmuir" created="Thu, 29 Sep 2011 15:04:09 +0100"  >&lt;p&gt;Also, given the attitude presented here towards me uploading a &lt;b&gt;patch&lt;/b&gt; (threatening to revert my commits no matter what etc), you can be damned sure I am going to be a total asshole about builder APIs.&lt;/p&gt;

&lt;p&gt;By taking such a ridiculous stance on this internal API you have sealed the fate of builders across the codebase.&lt;/p&gt;

&lt;p&gt;Instead of looking at the actual use case and thinking &apos;does this need a builder&apos; you assume I&apos;m completely against them: actually I don&apos;t have such a blanket opinion: if you look at some classes I have added to lucene you will see that I have even added builders myself... where it makes sense!&lt;/p&gt;

&lt;p&gt;But just because a class has two booleans doesnt mean that it needs a Builder: thats my problem, when you use a pattern as a hammer across the board like this then it becomes an antipattern, because its the wrong solution.&lt;/p&gt;

&lt;p&gt;In some cases Builder makes sense: I think just not here... but this doesn&apos;t matter now. I&apos;m gonna scream about builders now even when they really are a good fit.&lt;/p&gt;

&lt;p&gt;Nice work.&lt;/p&gt;</comment>
                    <comment id="13117315" author="cmale" created="Thu, 29 Sep 2011 15:18:30 +0100"  >&lt;p&gt;I actually agree with a lot of what you&apos;re saying here Robert.  Using the right approach at the right time is key and here you&apos;ve definitely made a good argument for why we should use the constructor + boolean approach.&lt;/p&gt;

&lt;p&gt;I hope we can continue to have discussions on a case by case basis, about what approaches are best?&lt;/p&gt;</comment>
                    <comment id="13117319" author="steve_rowe" created="Thu, 29 Sep 2011 15:28:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m gonna scream about builders now even when they really are a good fit. Nice work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Robert, you&apos;re blaming Uwe for your own future bad behavior when he threatens to use your tactics against you?  Sweet.&lt;/p&gt;</comment>
                    <comment id="13117320" author="mikemccand" created="Thu, 29 Sep 2011 15:29:37 +0100"  >
&lt;blockquote&gt;&lt;p&gt;I don&apos;t like the idea of shying away from a change just because it&apos;s controversial. Sometimes its necessary to shake things up with new ideas.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 I&apos;m all for pushing new ideas that make good, hard improvements to&lt;br/&gt;
Lucene (like &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;you seem to be asking for those who advocate a builder like API here to compromise and for those who don&apos;t want such an API, to not? Thats a tough pill to swallow.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am in fact asking for that, because largely Lucene does not adopt&lt;br/&gt;
the builder pattern today, the builder pattern is relatively new and&lt;br/&gt;
trendy, vs Lucene&apos;s codebase, and now we see it seeping in, in various&lt;br/&gt;
places/patches/etc.  Not only is it new, it&apos;s also controversial&lt;br/&gt;
amongst the committers.&lt;/p&gt;

&lt;p&gt;I think it&apos;s also reasonable because you can naturally layer the&lt;br/&gt;
builder API on top of a simple java APIs, but not really vice/versa.&lt;br/&gt;
One could create a very nice shim &quot;Lucene builder APIs&quot; library.&lt;br/&gt;
It need not be in our core APIs.&lt;/p&gt;

&lt;p&gt;This way apps that love the builder pattern can use the builder shim;&lt;br/&gt;
those that don&apos;t like them can use the plain java APIs.&lt;/p&gt;

&lt;p&gt;As other &quot;popular&quot; patterns try to seep into Lucene, I think we should&lt;br/&gt;
also take a cautious stance: we should not apply a pattern just&lt;br/&gt;
because it exists and has become popular; we should see strong&lt;br/&gt;
technical benefits to Lucene before doing so.&lt;/p&gt;

&lt;p&gt;So, stepping back, &quot;adopting the builder pattern in Lucene&apos;s APIs&quot; is&lt;br/&gt;
the overall change I&apos;m talking about, and I think that is a big&lt;br/&gt;
change.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, this API feels to me to be a lot more internal, so whether or not builders could be built on top of more outward facing concepts like QueryParsers, Field/Document etc, seems a different issue?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right this is an internal API, but for example if you build custom&lt;br/&gt;
queries/scorers you can still use a builder shim on top of Lucene&apos;s&lt;br/&gt;
core ScorerContext.  It could be part of this builder shim library&lt;br/&gt;
too.&lt;/p&gt;

&lt;p&gt;Really &quot;Lucene should adopt the builder pattern&quot; to me is a big&lt;br/&gt;
change, and it&apos;s a codebase-wide, global decision.  It&apos;s actually very&lt;br/&gt;
similar to passionate disagreements on whitespace, and this is why we&lt;br/&gt;
(thankfully) have a hard standard on what our whitespace looks like.&lt;br/&gt;
Otherwise we&apos;d be having huge arguments about whether parens should be&lt;br/&gt;
surrounded by whitespace on every patch.&lt;/p&gt;

&lt;p&gt;So net/net I don&apos;t think Lucene should adopt the builder pattern, for&lt;br/&gt;
internal or external APIs.  Just build a shim library on top.&lt;/p&gt;</comment>
                    <comment id="13117323" author="cmale" created="Thu, 29 Sep 2011 15:34:32 +0100"  >&lt;p&gt;+1 Mike.  I agree.&lt;/p&gt;</comment>
                    <comment id="13117331" author="simonw" created="Thu, 29 Sep 2011 15:45:44 +0100"  >&lt;blockquote&gt;&lt;p&gt;you seem to be asking for those who advocate a builder like API here to compromise and for those who don&apos;t want such an API, to not? Thats a tough pill to swallow.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I can swallow tough pills so +1 - I think this pill is going to change a lot for me on how I see this project and how I feel to contribute. &lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13117334" author="rcmuir" created="Thu, 29 Sep 2011 15:48:26 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Failing that.... another option would be to just stop using an object&lt;br/&gt;
here at all, and go back to passing explicit flags down to&lt;br/&gt;
Weight.scorer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is interesting for discussion too: because a compile-time break is &quot;better&quot; than a runtime break I think in cases of changes to query/weight/scorer?&lt;/p&gt;

&lt;p&gt;Like we can look at a compile-time-break as a feature: if we add a new thing (e.g. imagine adding this bitset after the fact), its crap for us to say &apos;but we didnt break backwards compatibility&apos; when in fact you really do need to change your code!&lt;/p&gt;</comment>
                    <comment id="13117336" author="thetaphi" created="Thu, 29 Sep 2011 15:48:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;So net/net I don&apos;t think Lucene should adopt the builder pattern, for internal or external APIs. Just build a shim library on top.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s start with telescopic ctors again, I am a fan of them! And non-final fields are the best I can think of! And don&apos;t forget freeze(), we should now freeze all development instead and make our opinions guarded by hotspot bugs.&lt;/p&gt;

&lt;p&gt;I will no longer discuss here, I will do something else, more productive, beyond Lucene.&lt;/p&gt;</comment>
                    <comment id="13117342" author="cmale" created="Thu, 29 Sep 2011 15:56:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;This is interesting for discussion too: because a compile-time break is &quot;better&quot; than a runtime break I think in cases of changes to query/weight/scorer?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.  The APIs of Query/Weight/Scorer feel to me to be so important that we should be very wary when making changes, but when we do want to make changes (and we should) then being explicit that something has changed and that people need to look carefully at the new API, seems beneficial.&lt;/p&gt;

&lt;p&gt;At the same time the benefits of the Contexts was that we could more easily make API changes.  But perhaps with these classes some reluctance is beneficial?&lt;/p&gt;

&lt;p&gt;What would the signatures look like if we dumped ScorerContext?&lt;/p&gt;</comment>
                    <comment id="13117346" author="rcmuir" created="Thu, 29 Sep 2011 15:59:13 +0100"  >&lt;blockquote&gt;
&lt;p&gt;At the same time the benefits of the Contexts was that we could more easily make API changes. But perhaps with these classes some reluctance is beneficial?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.&lt;br/&gt;
The context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:&lt;br/&gt;
then your custom query continues to work fine, until you use a filter and its silently wrong!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What would the signatures look like if we dumped ScorerContext?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Like Lucene 3.x: IR, boolean, boolean, Bits&lt;/p&gt;</comment>
                    <comment id="13117347" author="cmale" created="Thu, 29 Sep 2011 16:02:58 +0100"  >&lt;blockquote&gt;
&lt;p&gt;But I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.&lt;br/&gt;
The context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:&lt;br/&gt;
then your custom query continues to work fine, until you use a filter and its silently wrong!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Like Lucene 3.x: IR, boolean, boolean, Bits&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do we have any default value issues or anything with those booleans?&lt;/p&gt;</comment>
                    <comment id="13117352" author="rcmuir" created="Thu, 29 Sep 2011 16:07:01 +0100"  >&lt;p&gt;No, I think the scorercontext was geared at us being able to make changes without breaking the API: After&lt;br/&gt;
Mike&apos;s comment the more I think about it I think this was a bad idea... its being used here like Solr&apos;s NamedList&lt;br/&gt;
hammer...&lt;/p&gt;

&lt;p&gt;I think we should keep type safety on the Q/W/S apis to avoid traps... adding Bits like this to a ScorerContext&lt;br/&gt;
is a great example where we &apos;break backwards compatibility&apos; in a sneaky way... far better to have a compile break.&lt;/p&gt;

&lt;p&gt;So, +1 to go nuclear on ScorerContext completely.&lt;/p&gt;</comment>
                    <comment id="13117354" author="cmale" created="Thu, 29 Sep 2011 16:10:33 +0100"  >&lt;p&gt;Can you want to put together a patch to that regard?  I&apos;m definitely +1 for the idea at the moment.&lt;/p&gt;</comment>
                    <comment id="13117359" author="mikemccand" created="Thu, 29 Sep 2011 16:19:36 +0100"  >&lt;blockquote&gt;
&lt;p&gt;But I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.&lt;br/&gt;
The context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:&lt;br/&gt;
then your custom query continues to work fine, until you use a filter and its silently wrong!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually I think this is a serious problem with what we have today?&lt;/p&gt;

&lt;p&gt;It&apos;s really awful/dangerous if on upgrade, silently, filtering stops working against your custom Query.&lt;/p&gt;

&lt;p&gt;It&apos;s also awful if we internally mess up and miss a Query that should have been fixed to handle .acceptedDocs, which could easily happen today.&lt;/p&gt;

&lt;p&gt;OK I think we should just go back to passing the arguments directly, noting that this API is internal, so that custom queries out there will get a hard compile-time break, not silently get the wrong results, when there&apos;s an important change here.  It&apos;s too dangerous to use a context object.&lt;/p&gt;</comment>
                    <comment id="13117360" author="rcmuir" created="Thu, 29 Sep 2011 16:20:24 +0100"  >&lt;p&gt;sure, I&apos;d be happy too... was gonna wait a little bit to see if anyone grossly objected.&lt;/p&gt;

&lt;p&gt;I still don&apos;t like the fact this dodges the builder discussion completely, but again my real opinion for the record:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I myself have added builders to lucene:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
	&lt;li&gt;PrefixCodedTerms.Builder: &lt;a href=&quot;http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.java&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.java&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;SynonymMap.Builder: &lt;a href=&quot;http://svn.apache.org/repos/asf/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.java&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/repos/asf/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.java&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
	&lt;li&gt;Pretty sure Mike added FST.Builder too!&lt;/li&gt;
	&lt;li&gt;In these cases i think builder is appropriate: its building a complex thing up thru a series of add()s or whtaever and then finalizing into an immutable thing (trie or FST).&lt;/li&gt;
	&lt;li&gt;my problems with Builder are I feel its only appropriate if you are actually Building something. I dont think having 2 booleans counts as &apos;building&apos;, and I().dont().want().lucenes().code().to().read().like().this() ... i think chaining only makes sense in certain cases like StringBuilder, but &lt;b&gt;NOT&lt;/b&gt; for building an FST for example.&lt;/li&gt;
	&lt;li&gt;The builders i mentioned don&apos;t create objects on every add() or set(), and they aren&apos;t going to be in anyone&apos;s tight loop, so I think they make perfect sense.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So really my opinion on Builders is no different than my opinion on ArrayList: you use them when its the appropriate solution and when it makes sense... I think thats when you are actually building stuff.&lt;/p&gt;</comment>
                    <comment id="13117367" author="cmale" created="Thu, 29 Sep 2011 16:29:17 +0100"  >&lt;p&gt;I think its a good idea to go ahead and put a patch together so we can discuss it directly.&lt;/p&gt;</comment>
                    <comment id="13117405" author="rcmuir" created="Thu, 29 Sep 2011 17:30:21 +0100"  >&lt;p&gt;patch with the type-safe API and nuking ScorerContext&lt;/p&gt;</comment>
                    <comment id="13117412" author="rcmuir" created="Thu, 29 Sep 2011 17:36:29 +0100"  >&lt;p&gt;by the way, this worked well for us already: the compile-break found some sneaky little scorers using their own deletedDocs instead of the acceptDocs.&lt;/p&gt;

&lt;p&gt;Ideally before we switch on any filter optimizations, we can hack up AssertingIndexSearcher to randomly use Bits/Filter in different ways to flush out lots of problems in tests.&lt;/p&gt;</comment>
                    <comment id="13117430" author="simonw" created="Thu, 29 Sep 2011 17:54:42 +0100"  >&lt;p&gt;+1 this is much better than anything else! compile time error is good here even if it makes it less comfortable for changes ie. bw break. &lt;/p&gt;</comment>
                    <comment id="13117492" author="mikemccand" created="Thu, 29 Sep 2011 19:12:58 +0100"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;And it&apos;s awesome this already caught places where we were missing the acceptDocs cutover.  Bug averted &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13117830" author="cmale" created="Fri, 30 Sep 2011 03:27:56 +0100"  >&lt;p&gt;I did a quick review:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Should BooleanQuery.BooleanWeight.createConjunctionTermScorer() be passed the acceptDocs too? Its currently using context.reader.liveDocs.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Otherwise, +1, we should maybe commit this and then spin off an issue for improving AssertingIndexSearcher?&lt;/p&gt;</comment>
                    <comment id="13117835" author="rcmuir" created="Fri, 30 Sep 2011 03:36:56 +0100"  >&lt;p&gt;Thanks Chris, good find.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Otherwise, +1, we should maybe commit this and then spin off an issue for improving AssertingIndexSearcher?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually I think this will be more easily done in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;? e.g. if we add the suggested heuristic there, as a boolean protected expert method, subclasses can override the heuristic if they need... and AssertingIndexSearcher could just return random.nextBoolean() &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13117853" author="cmale" created="Fri, 30 Sep 2011 04:46:08 +0100"  >&lt;p&gt;Okay great.  Lets commit this then.&lt;/p&gt;</comment>
                    <comment id="13117857" author="rcmuir" created="Fri, 30 Sep 2011 04:55:03 +0100"  >&lt;blockquote&gt;
&lt;p&gt;This means on any addition to the scorer API (eg I&apos;ve long wanted for&lt;br/&gt;
caller to declare up front whether they need scores computed vs &quot;only&lt;br/&gt;
matching&quot;, ie MTQWF and CSQ would pass false), we break the API. But&lt;br/&gt;
I think that&apos;s actually fine, even in 3.x: making your own Scorer is&lt;br/&gt;
very expert.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just as an FYI: we already have an issue open for that too: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3331&quot; title=&quot;consider allowing ScorerContext to specify that you dont need freqs/scores&quot;&gt;LUCENE-3331&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But I don&apos;t think we will see real gains from that with StandardCodec/DocsEnum today?&lt;/p&gt;</comment>
                    <comment id="13118034" author="mikemccand" created="Fri, 30 Sep 2011 13:48:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;But I don&apos;t think we will see real gains from that with StandardCodec/DocsEnum today?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, not yet (not until our enum impls are able to &lt;span class=&quot;error&quot;&gt;&amp;#91;efficiently&amp;#93;&lt;/span&gt; separately decode docs and docs+freqs), and so we can wait until then.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12497107" name="LUCENE-3474.patch" size="74251" author="rcmuir" created="Fri, 30 Sep 2011 03:36:55 +0100" />
                    <attachment id="12497016" name="LUCENE-3474.patch" size="73063" author="rcmuir" created="Thu, 29 Sep 2011 17:30:21 +0100" />
                    <attachment id="12496939" name="LUCENE-3474.patch" size="54416" author="rcmuir" created="Wed, 28 Sep 2011 23:40:53 +0100" />
                    <attachment id="12496935" name="LUCENE-3474.patch" size="53624" author="rcmuir" created="Wed, 28 Sep 2011 23:13:51 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 28 Sep 2011 22:49:18 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>37555</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24222</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>