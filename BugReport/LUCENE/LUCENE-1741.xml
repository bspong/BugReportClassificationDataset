<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:16:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1741/LUCENE-1741.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1741] Make MMapDirectory.MAX_BBUF user configureable to support chunking the index files in smaller parts</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1741</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a followup for java-user thred: &lt;a href=&quot;http://www.lucidimagination.com/search/document/9ba9137bb5d8cb78/oom_with_2_9#9bf3b5b8f3b1fb9b&quot; class=&quot;external-link&quot;&gt;http://www.lucidimagination.com/search/document/9ba9137bb5d8cb78/oom_with_2_9#9bf3b5b8f3b1fb9b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is easy to implement, just add a setter method for this parameter to MMapDir.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12430211">LUCENE-1741</key>
            <summary>Make MMapDirectory.MAX_BBUF user configureable to support chunking the index files in smaller parts</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Mon, 13 Jul 2009 15:12:53 +0100</created>
                <updated>Tue, 14 Jul 2009 10:34:21 +0100</updated>
                    <resolved>Tue, 14 Jul 2009 10:34:21 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12730365" author="thetaphi" created="Mon, 13 Jul 2009 15:46:49 +0100"  >&lt;p&gt;Patch that allows configuration of chunk size. I will commit in the evening (MEZ).&lt;/p&gt;</comment>
                    <comment id="12730368" author="mikemccand" created="Mon, 13 Jul 2009 15:55:42 +0100"  >&lt;p&gt;Should we default the chunking size to something smaller (128 MB?) on 32 bit JRE?&lt;/p&gt;</comment>
                    <comment id="12730373" author="thetaphi" created="Mon, 13 Jul 2009 16:06:07 +0100"  >&lt;p&gt;Good idea. Do we have still this 64bit detection property in the utils? If yes, this could be easily done.&lt;/p&gt;</comment>
                    <comment id="12730377" author="thetaphi" created="Mon, 13 Jul 2009 16:20:07 +0100"  >&lt;p&gt;Attached is a patch using the JRE_IS_64BIT in Constants. I set the default to 256 MiBytes (128 seems to small for large indexes, if the index is e.g. about 1.5 GiBytes, you would get 6 junks.&lt;/p&gt;

&lt;p&gt;I have no test data which size is good, it is just trying out (and depends e.g. on how often you reboot Windows, as Eks said).&lt;/p&gt;</comment>
                    <comment id="12730378" author="mikemccand" created="Mon, 13 Jul 2009 16:29:35 +0100"  >&lt;p&gt;Patch looks good!&lt;/p&gt;</comment>
                    <comment id="12730543" author="thetaphi" created="Mon, 13 Jul 2009 22:56:54 +0100"  >&lt;p&gt;Eks Dev wrote in java-dev:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I have no test data which size is good, it is just trying out&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, for this you need bad OS and large index, you are not as lucky as I am to have it  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Anyhow, I would argument against default value. An algorithm is quite simple, if you hit OOM on map(), reduce this value until it fits &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
no need to touch it if it works...&lt;/p&gt;</comment>
                    <comment id="12730547" author="thetaphi" created="Mon, 13 Jul 2009 23:03:45 +0100"  >&lt;p&gt;OK, we have two patches, we can think about using one of them.&lt;/p&gt;

&lt;p&gt;In my opinion, there is no problem with limiting the chunk size on 32 bit systems. The overhead of choosing the right chunk is neglectible, as it only affects seeking. Normal sequential reads must only check, if the current chunk has enough data and if not, move to the next. The non-chunked stream does this check, too (to throw EOF). With a chunk size of 256 MB, the theoretical maximum number of chunks is 8 (which can be never reached...).&lt;/p&gt;

&lt;p&gt;Any other comments?&lt;/p&gt;

&lt;p&gt;Eks: What was you value, that fixed your problem without rebooting. And: How big was your biggest index file?&lt;/p&gt;</comment>
                    <comment id="12730551" author="psmith@apache.org" created="Mon, 13 Jul 2009 23:07:10 +0100"  >&lt;p&gt;An algorithm is nice if there are no specific settings specified, but in an environment where large indexes may be opened more frequently than the common use cases, then what is happening is that the Memory layer is getting OOM conditions too much, forcing too much GC activity to attempt the operation.  &lt;/p&gt;

&lt;p&gt;I&apos;d vote for checking if settings have been requested and using them, and if not set rely on a self-tuning algorithm.  &lt;/p&gt;

&lt;p&gt;In a really long running application, the process address space may become more and more fragmented, and the malloc library may not be able to defragment it, so the auto-tuning is nice, but it may not be great for all peoples needs.  &lt;/p&gt;

&lt;p&gt;For example, our specific use case (crazy as this may be) is to have many different indexes open at any one time, closing and opening them frequently (the Realtime Search stuff we are following very closely indeed.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).  I&apos;m just thinking that our VM (64bit) may find it difficult to find the contiguous non-heap space for the MMap operation after many days/weeks in operation.  &lt;/p&gt;

&lt;p&gt;Maybe I&apos;m just paranoid. But for operational purposes, it&apos;d be nice to know we could change the setting based on our observations.&lt;/p&gt;

&lt;p&gt;thanks!&lt;/p&gt;
</comment>
                    <comment id="12730560" author="eksdev" created="Mon, 13 Jul 2009 23:32:13 +0100"  >&lt;p&gt;Uwe, you convinced me, I looked at the code, and indeed, no performance penalty for this. &lt;/p&gt;

&lt;p&gt;what helped me  was 1.1G... (I&apos;ve tried to find maximum); Max file size is 1.4G ... but 1.1 is just OS coincidence, no magic about it. &lt;/p&gt;

&lt;p&gt;I guess 512mb makes a good value, if memory is so fragmented that you cannot allocate 0.5G, you are definitely having some other problems around. We are taliking here about VM memory, and even on windows having 512Mb in block is not an issue (or better said, I have never seen problems with this value).&lt;/p&gt;

&lt;p&gt;@Paul: It is misunderstanding, my &quot;algorithm&quot; was meant to be manual... no catching OOM and retry (I&apos;ve burned my fingers already on catching RuntimeException, do only when absolutely desperate &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. Uwe made this value user settable anyhow.  &lt;/p&gt;

&lt;p&gt;Thanks Uwe!&lt;/p&gt;


</comment>
                    <comment id="12730580" author="mikemccand" created="Tue, 14 Jul 2009 00:10:34 +0100"  >&lt;p&gt;I&apos;d be more comfortable w/ 256 MB (or, smaller); I think fragmentation could easily cause 512MB to give the false OOM.  I don&apos;t think we&apos;ll see real perf costs from buffer switching unless chunk size is very small (eg &amp;lt; 1 MB).&lt;/p&gt;

&lt;p&gt;In any event, Uwe can you add to the javadocs describing this false OOM problem and what to do if you hit it?&lt;/p&gt;</comment>
                    <comment id="12730590" author="thetaphi" created="Tue, 14 Jul 2009 00:28:55 +0100"  >&lt;p&gt;Javadocs state (in FileChannel#map): &quot;For most operating systems, mapping a file into memory is more expensive than reading or writing a few tens of kilobytes of data via the usual read and write methods. From the standpoint of performance it is generally only worth mapping relatively large files into memory.&quot;&lt;/p&gt;

&lt;p&gt;So it should be as big as possible. A second problem with too many buffers is, that the MMU/TLB cannot handle too many of them effective.&lt;/p&gt;

&lt;p&gt;In my opinion, maybe we could enhance MMapDirectory to work together with FileSwitchDirectory or something like that, to only use mmap for large files and all others handled by NIO/Simple. E.g. mapping the segments.gen file into memory is really wasting resources. So MMapDir would only return the MMapIndexInput, if the underlying file is &amp;gt; X Bytes (e.g. 8 Megabytes per default) and fall back to SimpleFSIndexInput otherwise.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In any event, Uwe can you add to the javadocs describing this false OOM problem and what to do if you hit it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will do this tomorrow, will go to bed now.&lt;/p&gt;

&lt;p&gt;Here are also some other numbers about this problem: &lt;a href=&quot;http://groups.google.com/group/jsr203-interest/browse_thread/thread/66f6a5042f2b0c4a/12228bbd57d1956d&quot; class=&quot;external-link&quot;&gt;http://groups.google.com/group/jsr203-interest/browse_thread/thread/66f6a5042f2b0c4a/12228bbd57d1956d&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12730731" author="thetaphi" created="Tue, 14 Jul 2009 08:58:30 +0100"  >&lt;p&gt;Updated patch with Mike&apos;s suggestion.&lt;/p&gt;</comment>
                    <comment id="12730745" author="mikemccand" created="Tue, 14 Jul 2009 10:15:35 +0100"  >&lt;p&gt;Patch looks good; thanks Uwe.&lt;/p&gt;</comment>
                    <comment id="12730750" author="thetaphi" created="Tue, 14 Jul 2009 10:34:21 +0100"  >&lt;p&gt;Committed revision: 793826&lt;/p&gt;

&lt;p&gt;Thanks Eks!&lt;/p&gt;

&lt;p&gt;About the automatic fallback to a SimpleFSIndexInput for small files like segment*, *.del, I open another issue targeted to 3.1. MMapping of small files is wasting system resources and may be slower than just reading a few bytes with SimpleFSIndexInput.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12413399" name="LUCENE-1741.patch" size="4091" author="thetaphi" created="Tue, 14 Jul 2009 08:58:30 +0100" />
                    <attachment id="12413305" name="LUCENE-1741.patch" size="3992" author="thetaphi" created="Mon, 13 Jul 2009 16:20:07 +0100" />
                    <attachment id="12413301" name="LUCENE-1741.patch" size="3599" author="thetaphi" created="Mon, 13 Jul 2009 15:46:49 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 13 Jul 2009 14:55:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12018</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25985</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>