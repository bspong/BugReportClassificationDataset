<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:14:22 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2514/LUCENE-2514.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2514] Change Term to use bytes</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2514</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2426&quot; title=&quot;change sort order to binary order&quot;&gt;&lt;del&gt;LUCENE-2426&lt;/del&gt;&lt;/a&gt;, the sort order was changed to codepoint order.&lt;/p&gt;

&lt;p&gt;unfortunately, Term is still using string internally, and more importantly its compareTo() uses the wrong order &lt;span class=&quot;error&quot;&gt;&amp;#91;utf-16&amp;#93;&lt;/span&gt;.&lt;br/&gt;
So MultiTermQuery, etc (especially its priority queues) are currently wrong.&lt;/p&gt;

&lt;p&gt;By changing Term to use bytes, we can also support terms encoded as bytes such as numerics, instead of using&lt;br/&gt;
strange string encodings.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12467818">LUCENE-2514</key>
            <summary>Change Term to use bytes</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Thu, 24 Jun 2010 17:28:51 +0100</created>
                <updated>Fri, 10 May 2013 11:43:41 +0100</updated>
                    <resolved>Mon, 28 Feb 2011 05:16:46 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12882210" author="rcmuir" created="Thu, 24 Jun 2010 17:31:37 +0100"  >&lt;p&gt;attached is one option: use bytesref behind the scenes but also support String ctors like we do today.&lt;/p&gt;

&lt;p&gt;i tried the &apos;hard cutover&apos; mike suggested, but this is a massive change and I think typically users will just be using String.&lt;/p&gt;

&lt;p&gt;personally I don&apos;t see the harm in supporting Strings this way, any perf-sensitive stuff creating a lot of Term objects (e.g. MultiTermQuery) should be using BytesRef anyway.&lt;/p&gt;

&lt;p&gt;one test fails: the preflex TestSurrogates... does this test create terms with unpaired surrogates? If so this would explain the failures I think.&lt;/p&gt;</comment>
                    <comment id="12882239" author="mikemccand" created="Thu, 24 Jun 2010 18:43:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;one test fails: the preflex TestSurrogates... does this test create terms with unpaired surrogates? If so this would explain the failures I think.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh man not that one!!&lt;/p&gt;

&lt;p&gt;It is not supposed to create unpaired surrogates (it uses _TestUtil.makeRandomUnicodeString).  I&apos;ll dig...&lt;/p&gt;</comment>
                    <comment id="12882241" author="rcmuir" created="Thu, 24 Jun 2010 18:47:47 +0100"  >&lt;p&gt;its my fault. preflex codec still uses Term.compareTo (and this is expected) in several places.&lt;/p&gt;

&lt;p&gt;so, i need to add back UTF8SortedAsUTF16Comparator to bytesref, and add a utf-16 compare to Term that uses it for the old behavior (or accomplish the equiv logic somewhere else)&lt;/p&gt;</comment>
                    <comment id="12882251" author="rcmuir" created="Thu, 24 Jun 2010 19:00:58 +0100"  >&lt;p&gt;i tried to fix the preflex problem like this, but it didnt work... maybe something (sort or other) is still relying on the old utf-16 compareTo() that i didnt find????&lt;/p&gt;</comment>
                    <comment id="12882252" author="mikemccand" created="Thu, 24 Jun 2010 19:01:57 +0100"  >&lt;p&gt;Ahh sorry I do indeed seek to an unpaired high surrogate &amp;#8211; easy to fix (pair it up w/ minimum low surrogate).&lt;/p&gt;

&lt;p&gt;But, there&apos;s another problem, which is that the pre-flex codec uses Term.compareTo, and it needs that to be based on UTF16.  We can just fix the preflex codec to use its own (UTF8inUTF16order) comparator.  I &lt;b&gt;think&lt;/b&gt; once we fix those two the test should pass again (crossing fingers...).&lt;/p&gt;</comment>
                    <comment id="12882255" author="mikemccand" created="Thu, 24 Jun 2010 19:06:42 +0100"  >&lt;p&gt;Attached patch to fix (I think) the unpaired surrogate passed to Term... not yet tested.&lt;/p&gt;</comment>
                    <comment id="12882267" author="rcmuir" created="Thu, 24 Jun 2010 19:24:11 +0100"  >&lt;p&gt;ok i combined my patch with yours, and fixed a typo (thats what i get for copy/paste)...&lt;/p&gt;

&lt;p&gt;i think it might be ok&lt;/p&gt;</comment>
                    <comment id="12882272" author="yseeley@gmail.com" created="Thu, 24 Jun 2010 19:35:30 +0100"  >&lt;p&gt;Looks good!&lt;br/&gt;
Might want to just add a doc on the Term constructor that the provided BytesRef is not copied, and should not be modified after construction (i.e. if you create a Term w/ the BytesRef provided by a TermsEnum or something, you&apos;re in trouble).&lt;/p&gt;</comment>
                    <comment id="12882276" author="rcmuir" created="Thu, 24 Jun 2010 19:39:15 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Might want to just add a doc on the Term constructor that the provided BytesRef is not copied, and should not be modified after construction (i.e. if you create a Term w/ the BytesRef provided by a TermsEnum or something, you&apos;re in trouble).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, I agree. I&apos;d also like to improve some of the perf sensitive spots to never create strings at all before committing (e.g. MultiTermQuery rewrites). &lt;/p&gt;</comment>
                    <comment id="12882298" author="rcmuir" created="Thu, 24 Jun 2010 20:37:26 +0100"  >&lt;p&gt;here&apos;s an updated patch with yonik&apos;s suggested note (might need wording changes).&lt;/p&gt;

&lt;p&gt;Also i started converting some various code to use the bytes(), queries and such...&lt;/p&gt;</comment>
                    <comment id="12882300" author="rcmuir" created="Thu, 24 Jun 2010 20:39:57 +0100"  >&lt;p&gt;Mike, can you review some of the preflex changes to bytes() in the patch? &lt;br/&gt;
I wonder if in some of these places we even need &apos;scratchBytesRef&apos; at all now...&lt;/p&gt;</comment>
                    <comment id="12882312" author="mikemccand" created="Thu, 24 Jun 2010 21:23:12 +0100"  >&lt;p&gt;preflex changes look good.&lt;/p&gt;

&lt;p&gt;I think with this we can eliminate the scratchBytesRef entirely in PreFlexFields and instead just use termEnum.term().bytes()!&lt;/p&gt;</comment>
                    <comment id="12882315" author="thetaphi" created="Thu, 24 Jun 2010 21:31:36 +0100"  >&lt;p&gt;Robert: I can take MTQ tomorrow. I think we can remove the whole backwards stuff from MTQ and change completely to BytesRef (internally). This makes the steps TermsEnum (bytes) -&amp;gt; TermCollector -&amp;gt; TermQuery which converts all the time simplier. The collector abstract class in the MTQ rewrites will be much nicer.&lt;br/&gt;
I can also remove the rest of pre-BoostAttribute stuff from TopTermsRewrite.&lt;/p&gt;

&lt;p&gt;I will go to sleep now, tomorrow more...&lt;/p&gt;</comment>
                    <comment id="12882318" author="rcmuir" created="Thu, 24 Jun 2010 21:38:18 +0100"  >&lt;p&gt;Uwe thanks, I would prefer if you did MTQ too.&lt;/p&gt;

&lt;p&gt;I agree it should completely use BytesRef... i think it should also not create new Terms even until rewriting.&lt;/p&gt;

&lt;p&gt;For example, currently the priority queue in TopTerms does BytesRef -&amp;gt; String conversion and creates a new Term for each add, but this might be entirely useless as it could fall off the pq, so i think its ScoreTerm or whatever should not hold term at all but just bytesref.&lt;/p&gt;</comment>
                    <comment id="12882321" author="thetaphi" created="Thu, 24 Jun 2010 21:43:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;For example, currently the priority queue in TopTerms does BytesRef -&amp;gt; String conversion and creates a new Term for each add, but this might be entirely useless as it could fall off the pq, so i think its ScoreTerm or whatever should not hold term at all but just bytesref&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Exactly! We removed support for TermEnum (without s), so field name is never null. You can always take the field from the MTQ when building TermQueries. And for that we create the Term using new Term(field, BytesRef) or with the non-interning placeholder (see also below). This makes MTQ much simplier, I started to do it...&lt;/p&gt;

&lt;p&gt;By the way: we could remove all String interning for field names now? We don&apos;t compare fields anymore?&lt;/p&gt;</comment>
                    <comment id="12882323" author="yseeley@gmail.com" created="Thu, 24 Jun 2010 21:49:06 +0100"  >&lt;blockquote&gt;&lt;p&gt;By the way: we could remove all String interning for field names now? We don&apos;t compare fields anymore?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, I noticed that too... I think so.&lt;/p&gt;</comment>
                    <comment id="12882325" author="mikemccand" created="Thu, 24 Jun 2010 21:50:51 +0100"  >&lt;p&gt;We also need to fix FieldCache/TermRangeQuery, since they now take separate String upper/lower.  We could just add corresponding BytesRef methods?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By the way: we could remove all String interning for field names now? We don&apos;t compare fields anymore?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We should be careful with this!&lt;/p&gt;</comment>
                    <comment id="12882326" author="rcmuir" created="Thu, 24 Jun 2010 21:53:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;We also need to fix FieldCache/TermRangeQuery, since they now take separate String upper/lower. We could just add corresponding BytesRef methods?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll fix these. I didnt notice them since they don&apos;t use Term, but String directly. The patch is also generally incomplete in other ways... mainly I am searching on uses of Term.text() and such to ensure I do not introduce performance regressions.&lt;/p&gt;</comment>
                    <comment id="12882339" author="thetaphi" created="Thu, 24 Jun 2010 22:27:00 +0100"  >&lt;p&gt;Here robert&apos;s patch with MTQ changed.&lt;/p&gt;

&lt;p&gt;It currently still uses placeholderTerms to not need to intern every time. If we remove string interning from Term, we can replace this by simple new Term() in MTQ.&lt;/p&gt;

&lt;p&gt;I delayed cloning of BytesRef until the BytesRef is put into a TermQuery or PQ or whenever it is set aside. But it no longer clones it e.g. if the term is never accepted by the PQ. Also the PQ reuses its ScoreTerm instances and so, the term bytes are simply copied over &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I also removed a Java 1.6 interface override - the Generics Policeman gives a ticket! I don&apos;t understand where those come from, Java 1.6 should also fail to compile as the ant build uses -source 1.5...?&lt;/p&gt;</comment>
                    <comment id="12882341" author="rcmuir" created="Thu, 24 Jun 2010 22:35:53 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I also removed a Java 1.6 interface override - the Generics Policeman gives a ticket! I don&apos;t understand where those come from, Java 1.6 should also fail to compile as the ant build uses -source 1.5...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, i am on a mac right now and i dont think i configured it correctly... (though ant test never complained... this is wierd).&lt;br/&gt;
Normallly my IDE does not generate this... but at the same time it is something we should fix the build for, as i think Eclipse&lt;br/&gt;
will generate these by default if configured for Java 6, which solr uses.&lt;/p&gt;</comment>
                    <comment id="12882342" author="thetaphi" created="Thu, 24 Jun 2010 22:35:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;mainly I am searching on uses of Term.text() and such to ensure I do not introduce performance regressions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would temporary remove all String methods from Term and try to compile core. If this works you should find all perf regressions in both directions.&lt;/p&gt;</comment>
                    <comment id="12882346" author="rcmuir" created="Thu, 24 Jun 2010 22:44:46 +0100"  >&lt;p&gt;attached is an updated patch, with uwe&apos;s changes, plus some additional conversions like TermsFilter and FieldCacheTermsFilter&lt;/p&gt;

&lt;p&gt;The range ones are a bit tricky, mainly because they work with collators with makes no sense with byte[]. but if collator is null then byte[] makes sense.&lt;/p&gt;

&lt;p&gt;the collator stuff is silly in a way, if we switch collation to byte[] it will use less ram than even the original String in lucene 3.x, and sort much faster.&lt;/p&gt;

&lt;p&gt;one option might be to split the collating range stuff into its own classes or something, i think its a bit confusing how collation is mixed in with &apos;binary&apos; order... it tricks you into thinking the &apos;default&apos; is UCA or default locale or something, but is neither. &lt;/p&gt;</comment>
                    <comment id="12882347" author="rcmuir" created="Thu, 24 Jun 2010 22:46:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;I would temporary remove all String methods from Term and try to compile core. If this works you should find all perf regressions in both directions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;i did this, but there is a lot of unrelated stuff that uses Term string methods and is perfectly fine. especially many tests and things like queryparser.&lt;/p&gt;</comment>
                    <comment id="12882352" author="thetaphi" created="Thu, 24 Jun 2010 22:54:53 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I would temporary remove all String methods from Term and try to compile core. If this works you should find all perf regressions in both directions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;i did this, but there is a lot of unrelated stuff that uses Term string methods and is perfectly fine. especially many tests and things like queryparser.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah tests can use string methods, i meant only core classes should compile without Term&apos;s String methods.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;one option might be to split the collating range stuff into its own classes or something, i think its a bit confusing how collation is mixed in with &apos;binary&apos; order... it tricks you into thinking the &apos;default&apos; is UCA or default locale or something, but is neither. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was always thinking about factoring out collation stuff from TermRangeQuery. I would like to have a pure TermRangeQuery without any collations things and maybe a CollationTermRangeQuery or whatever...&lt;/p&gt;</comment>
                    <comment id="12882364" author="rcmuir" created="Thu, 24 Jun 2010 23:16:06 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Yeah tests can use string methods, i meant only core classes should compile without Term&apos;s String methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, i will have another look at this (ignoring tests and queryparser and such). Maybe i will find something interesting.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I was always thinking about factoring out collation stuff from TermRangeQuery. I would like to have a pure TermRangeQuery without any collations things and maybe a CollationTermRangeQuery or whatever...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah, i think this would be better in the future too. but for now, i can work with what we have. it just means lots of things like String lowerBound; /* only used when collator != null */ and such&lt;/p&gt;</comment>
                    <comment id="12882395" author="thetaphi" created="Fri, 25 Jun 2010 00:21:44 +0100"  >&lt;p&gt;Here an improvement of the MTQ only patch:&lt;/p&gt;

&lt;p&gt;The auto MTQ rewrite mode now collects all terms into a PagedBytes until cutoff. This maybe better memory-wise, not sure if this is really needed. For me it was just some usage training &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and the number of objects is lower, especially for large cutoff numbers.&lt;/p&gt;

&lt;p&gt;Mike?&lt;/p&gt;</comment>
                    <comment id="12882422" author="rcmuir" created="Fri, 25 Jun 2010 02:54:44 +0100"  >&lt;p&gt;edit: i added newlines and reformatted so the issue is readable. sorry.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We also need to fix FieldCache/TermRangeQuery, since they now take separate String upper/lower. We could just add corresponding BytesRef methods?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This actually makes the api ugly and problematic for ctors, because of open-ended values (null). it would be nice to avoid requiring users to cast here...&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 
reference to TermRangeQuery is ambiguous, both method 
TermRangeQuery(java.lang.String,java.lang.String,java.lang.String,boolean,boolean) 
in org.apache.lucene.search.TermRangeQuery and method 
TermRangeQuery(java.lang.String,org.apache.lucene.util.BytesRef,
org.apache.lucene.util.BytesRef,boolean,boolean) 
in org.apache.lucene.search.TermRangeQuery match
    [javac]     TermRangeQuery query = new TermRangeQuery(&quot;content&quot;, null, null, true, true);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;attached is my updates to TermRangeQuery etc before realizing this. it also includes updated FieldCacheRangeQuery complete with generics violations.&lt;/p&gt;

&lt;p&gt;maybe when the policeman wakes up he will have ideas. i don&apos;t want the api to be ugly.&lt;/p&gt;</comment>
                    <comment id="12882526" author="thetaphi" created="Fri, 25 Jun 2010 11:47:53 +0100"  >&lt;p&gt;Improved version of PagedBytes MTQ cut off collector. It adds a method to PagedBytes.Reader to sequentially read all BytesRefs without a separate offset array.&lt;/p&gt;

&lt;p&gt;Mike, if you are fine with that, we should add this to the global patch for this issue.&lt;/p&gt;

&lt;p&gt;We should maybe also fix PagedBytes.freeze(boolean), as the parameter is currently unused. For the use case here, reallocating the last block is not really needed, it can stay as is. Maybe we should readd support for this parameter.&lt;/p&gt;</comment>
                    <comment id="12882573" author="thetaphi" created="Fri, 25 Jun 2010 14:31:39 +0100"  >&lt;p&gt;This patch only adds a correct trim to PagesBytes.freeze(boolean). The impl was missing, but is important here for performance.&lt;/p&gt;</comment>
                    <comment id="12882588" author="rcmuir" created="Fri, 25 Jun 2010 15:11:05 +0100"  >&lt;p&gt;Uwe, thanks for the MTQ updates. i will merge them with my previous patch (not my latest broken one!)&lt;/p&gt;

&lt;p&gt;After looking at RangeQuery/Filter, i think i would prefer to make a subtask to refactor the collation part out.&lt;br/&gt;
For example, we could make CollatedRangeQuery.&lt;/p&gt;

&lt;p&gt;In my opinion this is really very different from an ordinary binary-ordered range query and is confusing to both&lt;br/&gt;
users and the code to be mixed in. I think we should consider fixing the API by splitting these and adding&lt;br/&gt;
documentation to the migrate.txt&lt;/p&gt;</comment>
                    <comment id="12882591" author="thetaphi" created="Fri, 25 Jun 2010 15:25:02 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12882635" author="rcmuir" created="Fri, 25 Jun 2010 17:58:31 +0100"  >&lt;p&gt;updated patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;dropped the range query/filter changes so we can refactor those separately.&lt;/li&gt;
	&lt;li&gt;removed the BytesRef.EMPTY, uwe pointed out this is very dangerous since we cant prevent someone from modifying it.&lt;/li&gt;
	&lt;li&gt;tried to optimize preflex codec, removing more conversions and removing scratchbytesref copying... i think more can be done here.&lt;/li&gt;
	&lt;li&gt;merged in uwe&apos;s latest multitermquery changes.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12882666" author="rcmuir" created="Fri, 25 Jun 2010 19:16:43 +0100"  >&lt;p&gt;ok i added a couple more optimizations to preflex, to avoid creating so many strings.&lt;/p&gt;

&lt;p&gt;i still don&apos;t like all the conversions for dealing with terms: is the problem just the shared prefixes and surrogate dance? I wonder if we can do something tricky to avoid this.&lt;/p&gt;</comment>
                    <comment id="12882753" author="thetaphi" created="Sat, 26 Jun 2010 00:16:13 +0100"  >&lt;p&gt;Converted the rest of TestSurrogates (removed FieldAnText class, now direktly uses Term, as Term now supports BytesRef directly). Test respects verbose param.&lt;/p&gt;</comment>
                    <comment id="12882800" author="rcmuir" created="Sat, 26 Jun 2010 03:35:47 +0100"  >&lt;p&gt;Thanks Uwe. I added some additional changes:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;naive switch of MemoryIndex to byte terms (this one can use pagedbytes maybe too)&lt;/li&gt;
	&lt;li&gt;removed some more unnecessary byte-&amp;gt;string in instantiated, uninvertedfield&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12882913" author="rcmuir" created="Sun, 27 Jun 2010 05:19:33 +0100"  >&lt;p&gt;the term vectors api should be in sync with Term, but still uses String.&lt;br/&gt;
this patch switches them to bytesref too.&lt;/p&gt;</comment>
                    <comment id="12885059" author="thetaphi" created="Sun, 4 Jul 2010 18:51:05 +0100"  >&lt;p&gt;Updated patch with recent trunk commits (TestTV, TestSurrogates)&lt;/p&gt;</comment>
                    <comment id="12885061" author="thetaphi" created="Sun, 4 Jul 2010 19:02:12 +0100"  >&lt;p&gt;We should commit this soon and solve the rest separately?&lt;/p&gt;

&lt;p&gt;Robert? Mike?&lt;/p&gt;</comment>
                    <comment id="12885062" author="mikemccand" created="Sun, 4 Jul 2010 19:09:53 +0100"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12885065" author="rcmuir" created="Sun, 4 Jul 2010 19:18:29 +0100"  >&lt;p&gt;I don&apos;t have a real computer for a few days, so take it if you want!&lt;/p&gt;</comment>
                    <comment id="12885074" author="thetaphi" created="Sun, 4 Jul 2010 20:45:50 +0100"  >&lt;p&gt;I take it and will commit it tomorrow.&lt;/p&gt;</comment>
                    <comment id="12885141" author="thetaphi" created="Mon, 5 Jul 2010 09:36:24 +0100"  >&lt;p&gt;Committed this patch revision: 960484&lt;/p&gt;

&lt;p&gt;I keep this open, as more improvements may be added (e.g. TermRangeQuery)&lt;/p&gt;</comment>
                    <comment id="12890289" author="rcmuir" created="Tue, 20 Jul 2010 17:08:47 +0100"  >&lt;p&gt;With Term as byte, and tokenstreams can encode terms to byte however they want with TermToBytesRefAttribute, it makes sense for queryparsers to consume bytes like the indexer, and build terms without an intermediate String. &lt;/p&gt;

&lt;p&gt;This way non-unicode terms (e.g. collation) work as expected.&lt;/p&gt;

&lt;p&gt;This patch updates the queryparsers, except for contrib/queryparser (which will be more serious and cause API changes), and the range query building AnalyzingQueryParser (we need to fix TermRangeQuery first).&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="12890509" author="rcmuir" created="Wed, 21 Jul 2010 01:12:06 +0100"  >&lt;p&gt;I&apos;d like to commit this queryparser patch tomorrow if no one objects. Then I think we should look at range query, etc.&lt;/p&gt;</comment>
                    <comment id="12890630" author="mikemccand" created="Wed, 21 Jul 2010 10:30:02 +0100"  >&lt;p&gt;+1 to commit&lt;/p&gt;

&lt;p&gt;This would also mean the BOCU-1 encoding could be used drop-in w/ QueryParser for basic (Term, Phrase) queries right?&lt;/p&gt;</comment>
                    <comment id="12890646" author="rcmuir" created="Wed, 21 Jul 2010 12:18:49 +0100"  >&lt;blockquote&gt;&lt;p&gt;This would also mean the BOCU-1 encoding could be used drop-in w/ QueryParser for basic (Term, Phrase) queries right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, they should then work (or there is a bug!)&lt;/p&gt;</comment>
                    <comment id="12890740" author="rcmuir" created="Wed, 21 Jul 2010 15:40:38 +0100"  >&lt;p&gt;Committed &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2514&quot; title=&quot;Change Term to use bytes&quot;&gt;&lt;del&gt;LUCENE-2514&lt;/del&gt;&lt;/a&gt;_qp.patch revision 966254&lt;/p&gt;</comment>
                    <comment id="12895576" author="rcmuir" created="Thu, 5 Aug 2010 08:04:48 +0100"  >&lt;p&gt;In order to move forward with collation-keys-as-byte and other improvements, we need to fix TermRangeQuery.&lt;br/&gt;
But this is difficult when the String-only Collation support exists mixed with the byte-order TermRangeQuery... &lt;/p&gt;

&lt;p&gt;As discussed previously on this issue, here is a patch that splits this into a separate CollatedTermRangeQuery/Filter&lt;/p&gt;</comment>
                    <comment id="12895579" author="rcmuir" created="Thu, 5 Aug 2010 08:17:00 +0100"  >&lt;p&gt;by the way, i was thinking it would be nice to really move this slow collatedtermrangequery stuff either out of lucene alltogether or at least into contrib/queries.&lt;/p&gt;

&lt;p&gt;we could make things even better by removing queryparser&apos;s get/setRangeCollator method.&lt;br/&gt;
instead in its place, it could have something like a boolean &apos;analyzeRangeQueries&apos; ?&lt;br/&gt;
it could then analyze the endpoints (producing byte collation keys) and use a regular fast term range query.&lt;/p&gt;

&lt;p&gt;I think its good to support collation order for people who want it, but we should make it easy to do things the fast way, &lt;br/&gt;
right now we make it easy to do things the slow way and hard to do it fast.&lt;/p&gt;</comment>
                    <comment id="12895624" author="mikemccand" created="Thu, 5 Aug 2010 10:45:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;by the way, i was thinking it would be nice to really move this slow collatedtermrangequery stuff either out of lucene alltogether or at least into contrib/queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I agree we have it backwards now.  The &quot;obvious&quot; approach should be the performant one.&lt;/p&gt;</comment>
                    <comment id="12895630" author="thetaphi" created="Thu, 5 Aug 2010 11:02:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;by the way, i was thinking it would be nice to really move this slow collatedtermrangequery stuff either out of lucene alltogether or at least into contrib/queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;By the way, the problem BytesRef vs. String is not yet solved for core TRQ. I would prefer to do it like for NRQ/FCRF with static factory methods. Then its also consistent accross all RQ parts.&lt;/p&gt;</comment>
                    <comment id="12895674" author="steve_rowe" created="Thu, 5 Aug 2010 14:24:54 +0100"  >&lt;blockquote&gt;&lt;p&gt;by the way, i was thinking it would be nice to really move this slow collatedtermrangequery stuff either out of lucene alltogether or at least into contrib/queries. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12895700" author="rcmuir" created="Thu, 5 Aug 2010 15:40:05 +0100"  >&lt;blockquote&gt;&lt;p&gt;By the way, the problem BytesRef vs. String is not yet solved for core TRQ. I would prefer to do it like for NRQ/FCRF with static factory methods. Then its also consistent accross all RQ parts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes I know! I was leaving this for you, but if you have no time, I can take care of it.&lt;br/&gt;
When that too is done, finally I think then I can commit &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2551&quot; title=&quot;change jdk &amp;amp; icu collation to use byte[]&quot;&gt;&lt;del&gt;LUCENE-2551&lt;/del&gt;&lt;/a&gt; !&lt;/p&gt;</comment>
                    <comment id="12900080" author="rcmuir" created="Wed, 18 Aug 2010 23:43:59 +0100"  >&lt;p&gt;just checkpointing progress, here&apos;s my latest patch.&lt;/p&gt;

&lt;p&gt;Here i moved the slow functionality (range,sort) out of core and into contrib/queries.&lt;br/&gt;
So TermRangeQuery just does byte comparison, nothing fancy.&lt;br/&gt;
Additionally TermRangeQuery&apos;s API is changed to be more like NumericRangeQuery&apos;s, with newStringRange and newByteRange.&lt;/p&gt;

&lt;p&gt;TODO:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;QP&apos;s newRangeQuery args should be changed to BytesRef, and newRangeQuery should build ranges with newByteRange&lt;/li&gt;
	&lt;li&gt;contrib/qp needs a new attribute and some other work, and some of the other queryparsers need more changes too.&lt;/li&gt;
	&lt;li&gt;need to add tests (the ones i removed from core) for SlowCollatedRangeQuery and friends.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12900661" author="mikemccand" created="Fri, 20 Aug 2010 11:40:20 +0100"  >&lt;p&gt;Patch looks good Robert!&lt;/p&gt;

&lt;p&gt;I like the TermRangeQuery/Filter.newStringRange static factory.  You need to add the Slow prefix to the class names in MIGRATE.txt, and also mention the slow collated comparator has also moved.&lt;/p&gt;</comment>
                    <comment id="12900663" author="thetaphi" created="Fri, 20 Aug 2010 11:57:31 +0100"  >&lt;p&gt;Yah, the factory makes it easy for new users to create string ranges (as one exspects, like with NRQ, NRF, FCRF), but as the query itsself works on BytesRef, its ctor takes BytesRef. With the static factory, compile errors when you use null as bounds are not happening.&lt;/p&gt;

&lt;p&gt;Do we need a LessString() or should we completely remove the useless static factories named Less in the filter?&lt;/p&gt;</comment>
                    <comment id="12900673" author="rcmuir" created="Fri, 20 Aug 2010 12:45:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;I like the TermRangeQuery/Filter.newStringRange static factory. You need to add the Slow prefix to the class names in MIGRATE.txt, and also mention the slow collated comparator has also moved.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, i forgot this from my TODO list!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;or should we completely remove the useless static factories named Less in the filter?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1. I didnt see these used anywhere. If we aren&apos;t going to remove them, then we should at least deprecate IMO&lt;/p&gt;</comment>
                    <comment id="12919991" author="rcmuir" created="Mon, 11 Oct 2010 22:14:20 +0100"  >&lt;p&gt;I brought the patch up to trunk, it was very out of date.&lt;br/&gt;
Will try to make it committable soon!&lt;/p&gt;</comment>
                    <comment id="12999962" author="thetaphi" created="Sun, 27 Feb 2011 14:24:30 +0000"  >&lt;p&gt;Robert, can you commit your updates if its time to do it? You can assign to youself, if you like!&lt;/p&gt;</comment>
                    <comment id="12999978" author="rcmuir" created="Sun, 27 Feb 2011 15:30:15 +0000"  >&lt;p&gt;Uwe, thanks for the reminder. I will try to actually wrap this one up today... needs some tests etc.&lt;/p&gt;

&lt;p&gt;If you get a chance, can you take a quick glance at the Attributes-code in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2551&quot; title=&quot;change jdk &amp;amp; icu collation to use byte[]&quot;&gt;&lt;del&gt;LUCENE-2551&lt;/del&gt;&lt;/a&gt; ?&lt;br/&gt;
I would like to resolve both issues together so that no functionality is lost.&lt;/p&gt;</comment>
                    <comment id="13000037" author="rcmuir" created="Sun, 27 Feb 2011 20:55:07 +0000"  >&lt;p&gt;attached is an updated patch. Its ready to go, I plan on committing soon.&lt;/p&gt;

&lt;p&gt;Unrelated: i wrote a nasty random test for the SlowCollation stuff, but it fails if you get an executor service (some unrelated synchronization thing). This is some existing problem, I&apos;ll open another issue for this.&lt;/p&gt;</comment>
                    <comment id="13000074" author="thetaphi" created="Mon, 28 Feb 2011 00:59:14 +0000"  >&lt;p&gt;I think this patch is fine! Will go to bed now, I just wanted you to know that I am really fine with it! Great work!&lt;/p&gt;</comment>
                    <comment id="13000111" author="rcmuir" created="Mon, 28 Feb 2011 05:16:46 +0000"  >&lt;p&gt;Committed revision 1075210.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12461116">LUCENE-2364</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12469664">LUCENE-2551</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12456893" name="LUCENE-2514_collatedrange.patch" size="154503" author="rcmuir" created="Mon, 11 Oct 2010 22:14:20 +0100" />
                    <attachment id="12452461" name="LUCENE-2514_collatedrange.patch" size="153035" author="rcmuir" created="Wed, 18 Aug 2010 23:43:59 +0100" />
                    <attachment id="12451308" name="LUCENE-2514_collatedrange.patch" size="50228" author="rcmuir" created="Thu, 5 Aug 2010 08:04:48 +0100" />
                    <attachment id="12448055" name="LUCENE-2514-MTQPagedBytes.patch" size="12363" author="thetaphi" created="Fri, 25 Jun 2010 14:31:39 +0100" />
                    <attachment id="12448048" name="LUCENE-2514-MTQPagedBytes.patch" size="11978" author="thetaphi" created="Fri, 25 Jun 2010 11:47:53 +0100" />
                    <attachment id="12447998" name="LUCENE-2514-MTQPagedBytes.patch" size="10679" author="thetaphi" created="Fri, 25 Jun 2010 00:21:44 +0100" />
                    <attachment id="12472124" name="LUCENE-2514.patch" size="192193" author="rcmuir" created="Sun, 27 Feb 2011 20:55:07 +0000" />
                    <attachment id="12448674" name="LUCENE-2514.patch" size="114408" author="thetaphi" created="Mon, 5 Jul 2010 09:36:24 +0100" />
                    <attachment id="12448652" name="LUCENE-2514.patch" size="114987" author="thetaphi" created="Sun, 4 Jul 2010 18:51:05 +0100" />
                    <attachment id="12448144" name="LUCENE-2514.patch" size="113423" author="rcmuir" created="Sun, 27 Jun 2010 05:19:33 +0100" />
                    <attachment id="12448115" name="LUCENE-2514.patch" size="63471" author="rcmuir" created="Sat, 26 Jun 2010 03:35:46 +0100" />
                    <attachment id="12448104" name="LUCENE-2514.patch" size="53344" author="thetaphi" created="Sat, 26 Jun 2010 00:16:12 +0100" />
                    <attachment id="12448077" name="LUCENE-2514.patch" size="49761" author="rcmuir" created="Fri, 25 Jun 2010 19:16:42 +0100" />
                    <attachment id="12448071" name="LUCENE-2514.patch" size="46570" author="rcmuir" created="Fri, 25 Jun 2010 17:58:31 +0100" />
                    <attachment id="12448007" name="LUCENE-2514.patch" size="55655" author="rcmuir" created="Fri, 25 Jun 2010 02:54:44 +0100" />
                    <attachment id="12447987" name="LUCENE-2514.patch" size="41771" author="rcmuir" created="Thu, 24 Jun 2010 22:44:46 +0100" />
                    <attachment id="12447985" name="LUCENE-2514.patch" size="39886" author="thetaphi" created="Thu, 24 Jun 2010 22:27:00 +0100" />
                    <attachment id="12447979" name="LUCENE-2514.patch" size="30380" author="rcmuir" created="Thu, 24 Jun 2010 20:37:26 +0100" />
                    <attachment id="12447969" name="LUCENE-2514.patch" size="14693" author="rcmuir" created="Thu, 24 Jun 2010 19:24:11 +0100" />
                    <attachment id="12447967" name="LUCENE-2514.patch" size="13125" author="rcmuir" created="Thu, 24 Jun 2010 19:00:58 +0100" />
                    <attachment id="12447954" name="LUCENE-2514.patch" size="8546" author="rcmuir" created="Thu, 24 Jun 2010 17:31:37 +0100" />
                    <attachment id="12449930" name="LUCENE-2514_qp.patch" size="22376" author="rcmuir" created="Tue, 20 Jul 2010 17:08:47 +0100" />
                    <attachment id="12447968" name="LUCENE-2514-surrogates-dance.patch" size="1570" author="mikemccand" created="Thu, 24 Jun 2010 19:06:42 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 24 Jun 2010 17:43:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11310</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25178</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>