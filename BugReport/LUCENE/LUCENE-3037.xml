<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:34 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3037/LUCENE-3037.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3037] TestFSTs.testRealTerms produces a corrupt index</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3037</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;seems to be prox/skip related: the test passes, but the checkindex upon closing fails.&lt;/p&gt;

&lt;p&gt;ant test-core -Dtestcase=TestFSTs -Dtests.seed=-4012305283315171209:0 -Dtests.multiplier=3 -Dtests.nightly=true -Dtests.linedocsfile=c:/data/enwiki.random.lines.txt.gz&lt;/p&gt;

&lt;p&gt;Note: to get the enwiki.random.lines.txt.gz you have to fetch it from hudson (warning 1 gigabyte file).&lt;br/&gt;
you also have to run the test a few times to trigger it.&lt;/p&gt;

&lt;p&gt;ill upload the index this thing makes to this issue.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12504601">LUCENE-3037</key>
            <summary>TestFSTs.testRealTerms produces a corrupt index</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Mon, 18 Apr 2011 21:54:29 +0100</created>
                <updated>Fri, 10 May 2013 11:43:24 +0100</updated>
                    <resolved>Tue, 19 Apr 2011 18:51:02 +0100</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13021252" author="rcmuir" created="Mon, 18 Apr 2011 21:54:52 +0100"  >&lt;p&gt;see &lt;a href=&quot;https://hudson.apache.org/hudson/job/Lucene-trunk/1533/testReport/junit/org.apache.lucene.util.automaton.fst/TestFSTs/testRealTerms/&quot; class=&quot;external-link&quot;&gt;https://hudson.apache.org/hudson/job/Lucene-trunk/1533/testReport/junit/org.apache.lucene.util.automaton.fst/TestFSTs/testRealTerms/&lt;/a&gt; for the exception.&lt;/p&gt;</comment>
                    <comment id="13021349" author="rcmuir" created="Tue, 19 Apr 2011 01:05:49 +0100"  >&lt;p&gt;attached is the broken segment (3 files).&lt;/p&gt;

&lt;p&gt;i played around with disabling d&amp;amp;penum/skipper reuse to figure out why we have a bad offset in the skip, but i didnt get anywhere...&lt;/p&gt;</comment>
                    <comment id="13021562" author="rcmuir" created="Tue, 19 Apr 2011 13:45:34 +0100"  >&lt;p&gt;I think this is an off-by-one, lots of terms pass thru checkindex fine, but then the problematic term happens to have df=1000... this segment has skipInterval=10&lt;/p&gt;</comment>
                    <comment id="13021571" author="rcmuir" created="Tue, 19 Apr 2011 14:03:58 +0100"  >&lt;p&gt;here&apos;s a much faster (fails in 2 seconds) test case. &lt;/p&gt;

&lt;p&gt;I noticed with this one, it fails with StandardPostingsReader, so I think the problem is general to multi-level skipping.&lt;/p&gt;

&lt;p&gt;The patch forces our random skip interval to be &lt;span class=&quot;error&quot;&gt;&amp;#91;2,10&amp;#93;&lt;/span&gt; instead of &lt;span class=&quot;error&quot;&gt;&amp;#91;2,64&amp;#93;&lt;/span&gt;, thus causing us to test higher skiplevels more than usual.&lt;/p&gt;

&lt;p&gt;ant test-core -Dtestcase=TestLongPostings -Dtestmethod=testLongPostings -Dtests.seed=7951749419575219720:5894148324166575802 -Dtests.codec=MockRandom&lt;/p&gt;</comment>
                    <comment id="13021578" author="rcmuir" created="Tue, 19 Apr 2011 14:26:30 +0100"  >&lt;p&gt;again the same pattern here, it fails when docFreq is a skipInterval^N, in this case docFreq=243, skipInterval=3&lt;/p&gt;</comment>
                    <comment id="13021621" author="rcmuir" created="Tue, 19 Apr 2011 16:15:22 +0100"  >&lt;p&gt;the problem is in our computation of number of skip Levels:&lt;br/&gt;
in this case: Math.log(243) / Math.log(3) == 0.499999999999, which is floored to 4, but there are really 5 skipLevels here.&lt;/p&gt;

&lt;p&gt;Attached is a patch to use StrictMath, which fixes the bug. Maybe there is a cleaner way though... I don&apos;t like the floating point math here?&lt;/p&gt;</comment>
                    <comment id="13021622" author="rcmuir" created="Tue, 19 Apr 2011 16:19:32 +0100"  >&lt;p&gt;by the way, existing indexes (all with skipInterval=16) are unaffected.&lt;/p&gt;</comment>
                    <comment id="13021636" author="rcmuir" created="Tue, 19 Apr 2011 17:08:53 +0100"  >&lt;p&gt;I&apos;ll commit this patch for now, but keep the issue open in case someone is willing to write an integer version here (which would be greatly preferred!)&lt;/p&gt;</comment>
                    <comment id="13021684" author="rcmuir" created="Tue, 19 Apr 2011 18:51:02 +0100"  >&lt;p&gt;Committed revision 1095147&lt;/p&gt;</comment>
                    <comment id="13021690" author="dweiss" created="Tue, 19 Apr 2011 19:01:42 +0100"  >&lt;p&gt;I don&apos;t know how applicable is this, but &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;floor(log(n)/log(m)) = p&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;can be transformed into a simple equation: find first &apos;p&apos; for which n &amp;lt;= m^p is true. Assuming m^p grows quickly, this can be computed in a tight loop, quite fast and with an exact result.&lt;/p&gt;</comment>
                    <comment id="13021692" author="rcmuir" created="Tue, 19 Apr 2011 19:07:04 +0100"  >&lt;p&gt;hi dawid, thanks, i used this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */
 static int log(int x, int base) {
    int ret = 0;
    while (x &amp;gt;= base) {
      x /= base;
      ret++;
    }
    return ret;
 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;i did a quick test and this seems faster than our old calculation, but speed isn&apos;t particularly important here though: when initting the skipper at this place we are doing i/o... its more important that the calculation isnt wrong.&lt;/p&gt;</comment>
                    <comment id="13021714" author="yseeley@gmail.com" created="Tue, 19 Apr 2011 19:49:06 +0100"  >&lt;p&gt;This should be even faster:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; log(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; base) {
   &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; base&amp;gt;=2;
   &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ret = 0;
   &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; n = base; &lt;span class=&quot;code-comment&quot;&gt;// needs to be a &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; to avoid overflow
&lt;/span&gt;   &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (x &amp;gt;= n) {
     n *= base;
     ret++;
   }
   &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ret;
 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13021716" author="rcmuir" created="Tue, 19 Apr 2011 19:52:07 +0100"  >&lt;p&gt;Hi Yonik: looks good, you want to just commit it?&lt;/p&gt;</comment>
                    <comment id="13021738" author="yseeley@gmail.com" created="Tue, 19 Apr 2011 20:11:38 +0100"  >&lt;p&gt;committed.&lt;/p&gt;

&lt;p&gt;Robert, your instinct to avoid floating point was good.  StrictMath would not have eliminated all of the errors.&lt;br/&gt;
For example log(380204032,52) using StrictMath still returns 4, while the integer versions correctly return 5.&lt;/p&gt;</comment>
                    <comment id="13021742" author="rcmuir" created="Tue, 19 Apr 2011 20:17:36 +0100"  >&lt;p&gt;yeah, strictmath didnt really help that much actually, it only fixed a few cases but many were still broken.&lt;/p&gt;

&lt;p&gt;log(1000, 10) with strictmath is another example, it will still be 2 instead of 3.&lt;/p&gt;

&lt;p&gt;personally I really like that we eliminated the floating point stuff here, maybe we should think about backporting to 3.x. It should be safe, as there aren&apos;t any problems with a base of 16.&lt;/p&gt;</comment>
                    <comment id="13021757" author="steve_rowe" created="Tue, 19 Apr 2011 21:04:36 +0100"  >&lt;p&gt;I implemented the theoretically O(log log n) complexity algorithm described &lt;a href=&quot;http://bonsaicode.wordpress.com/2010/05/07/programming-praxis-integer-logarithms/&quot; class=&quot;external-link&quot;&gt;here&lt;/a&gt; and compared timing for Robert&apos;s, Yonik&apos;s, and my implementation.  Yonik&apos;s is fastest &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Timings (log1 is Robert&apos;s, log2 is Yonik&apos;s, and log3 is mine):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;log1: 2384ms for 100000000 iterations.
log2: 1068ms for 100000000 iterations.
log3: 1697ms for 100000000 iterations.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here&apos;s the test, which also compares log2 and log3 against log1 for correctness, or at least consistency (&lt;tt&gt;-Xmx4g&lt;/tt&gt; required to avoid OOMs with 100M iterations):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testLogMethodPerformance() {
    Random r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; iterations = 100000000;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] docFreqs = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] skipIntervals = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] log1Results = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] log2Results = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] log3Results = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
      docFreqs[i] = r.nextInt(1000000000);
      skipIntervals[i] = r.nextInt(1023) + 2;
    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
      log1Results[i] = MultiLevelSkipListReader.log(docFreqs[i], skipIntervals[i]);
    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; stop = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;log1: &quot;&lt;/span&gt; + (stop - start) + &lt;span class=&quot;code-quote&quot;&gt;&quot;ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + iterations + &lt;span class=&quot;code-quote&quot;&gt;&quot; iterations.&quot;&lt;/span&gt;);

    start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
      log2Results[i] = MultiLevelSkipListReader.log2(docFreqs[i], skipIntervals[i]);
    }
    stop = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;log2: &quot;&lt;/span&gt; + (stop - start) + &lt;span class=&quot;code-quote&quot;&gt;&quot;ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + iterations + &lt;span class=&quot;code-quote&quot;&gt;&quot; iterations.&quot;&lt;/span&gt;);

    start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
      log3Results[i] = MultiLevelSkipListReader.log3(docFreqs[i], skipIntervals[i]);
    }
    stop = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;log3: &quot;&lt;/span&gt; + (stop - start) + &lt;span class=&quot;code-quote&quot;&gt;&quot;ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + iterations + &lt;span class=&quot;code-quote&quot;&gt;&quot; iterations.&quot;&lt;/span&gt;);
    
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
      assertEquals(log1Results[i], log2Results[i]);
      assertEquals(log1Results[i], log3Results[i]);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here&apos;s my implementation:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; log3(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; b) {
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; b_lo = 1;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; b_hi = b;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; b_mid;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; lo = 0;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hi = 1;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; mid;
    &lt;span class=&quot;code-comment&quot;&gt;// Bracket the solution by recursively squaring the base
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// until the result exceeds x
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (b_hi &amp;lt; x) {
      b_lo = b_hi;
      b_hi *= b_hi;
      lo = hi;
      hi &amp;lt;&amp;lt;= 1;
    }
    &lt;span class=&quot;code-comment&quot;&gt;// Find the solution by performing a binary search between
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// the bracketing values (lo,hi) found above
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (hi - lo &amp;gt; 1) {
      mid = (lo + hi) &amp;gt;&amp;gt; 1;
      &lt;span class=&quot;code-comment&quot;&gt;// b_mid = b_lo * b**(mid-lo)
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// Java has no integer pow() method - use a loop instead.
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// Yes, &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.pow(&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt;) would work, but it&apos;s slower than &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
&lt;/span&gt;      b_mid = b_lo;
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; mid - lo ; ++i) {
        b_mid *= b;
      }
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b_mid &amp;gt; x) {
        hi = mid;
        b_hi = b_mid;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (b_mid &amp;lt; x) {
        lo = mid;
        b_lo = b_mid;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; mid;
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; b_hi == x ? hi : lo;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="13021778" author="rcmuir" created="Tue, 19 Apr 2011 21:39:30 +0100"  >&lt;p&gt;Guys, again keep in mind that this log calculation is less than one-thousandth of the time spent in this skipper init....&lt;/p&gt;</comment>
                    <comment id="13021783" author="steve_rowe" created="Tue, 19 Apr 2011 21:44:17 +0100"  >&lt;p&gt;The original method was waaaaaaaaay slower.  I added this to my test:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[] log0Results = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;[iterations];
  ...
  start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0 ; i &amp;lt; iterations ; ++i) {
    log0Results[i] = (docFreqs[i] == 0 
                   ? 0 : (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.floor( StrictMath.log(docFreqs[i]) 
                                         / StrictMath.log(skipIntervals[i])));
  }
  stop = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
  &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.err.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;log0: &quot;&lt;/span&gt; + (stop - start) + &lt;span class=&quot;code-quote&quot;&gt;&quot;ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; + iterations + &lt;span class=&quot;code-quote&quot;&gt;&quot; iterations.&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;log0: 17933ms for 100000000 iterations.
log1: 2420ms for 100000000 iterations.
log2: 1139ms for 100000000 iterations.
log3: 1697ms for 100000000 iterations.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13021786" author="steve_rowe" created="Tue, 19 Apr 2011 21:45:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;Guys, again keep in mind that this log calculation is less than one-thousandth of the time spent in this skipper init....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, just having fun.&lt;/p&gt;</comment>
                    <comment id="13021794" author="rcmuir" created="Tue, 19 Apr 2011 21:51:51 +0100"  >&lt;p&gt;I know! can you speed up the rest of the skipping too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                    <comment id="13021798" author="steve_rowe" created="Tue, 19 Apr 2011 21:57:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;can you speed up the rest of the skipping too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, the code I posted is &lt;b&gt;slower&lt;/b&gt;, so I&apos;m afraid that if history is any guide here, I can only promise pessimization...&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12476671" name="index.7z.001" size="9437184" author="rcmuir" created="Tue, 19 Apr 2011 01:05:48 +0100" />
                    <attachment id="12476672" name="index.7z.002" size="9437184" author="rcmuir" created="Tue, 19 Apr 2011 01:05:48 +0100" />
                    <attachment id="12476673" name="index.7z.003" size="4333466" author="rcmuir" created="Tue, 19 Apr 2011 01:05:48 +0100" />
                    <attachment id="12476740" name="LUCENE-3037.patch" size="2502" author="rcmuir" created="Tue, 19 Apr 2011 16:15:22 +0100" />
                    <attachment id="12476729" name="LUCENE-3037_test.patch" size="883" author="rcmuir" created="Tue, 19 Apr 2011 14:03:58 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 19 Apr 2011 18:01:42 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10864</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24655</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>