<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:15:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1646/LUCENE-1646.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1646] QueryParser throws new exceptions even if custom parsing logic threw a better one</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1646</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;We have subclassed QueryParser and have various custom fields.  When these fields contain invalid values, we throw a subclass of ParseException which has a more useful message (and also a localised message.)&lt;/p&gt;

&lt;p&gt;Problem is, Lucene&apos;s QueryParser is doing this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ParseException tme) {
        &lt;span class=&quot;code-comment&quot;&gt;// rethrow to include the original query:
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ParseException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cannot parse &apos;&quot;&lt;/span&gt; +query+ &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos;: &quot;&lt;/span&gt; + tme.getMessage());
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus, our nice and useful ParseException is thrown away, replaced by one with no information about what&apos;s actually wrong with the query (it does append getMessage() but that isn&apos;t localised.  And it also throws away the underlying cause for the exception.)&lt;/p&gt;

&lt;p&gt;I am about to patch our copy to simply remove these four lines; the caller knows what the query string was (they have to have a copy of it because they are passing it in!) so having it in the error message itself is not useful.  Furthermore, when the query string is very big, what the user wants to know is not that the whole query was bad, but which part of it was bad.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12425875">LUCENE-1646</key>
            <summary>QueryParser throws new exceptions even if custom parsing logic threw a better one</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="trejkaz">Trejkaz</reporter>
                        <labels>
                    </labels>
                <created>Wed, 20 May 2009 02:57:23 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:24 +0100</updated>
                    <resolved>Tue, 23 Jun 2009 20:55:48 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12711096" author="mikemccand" created="Wed, 20 May 2009 12:03:27 +0100"  >&lt;p&gt;I agree it&apos;s bad that the root cause (stack trace) is discarded by the exception handler, so we should fix that, but I think adding the query text in the exception&apos;s message is in fact useful for debugging &amp;#8211; this exception will likely get captured &amp;amp; generically logged somewhere, only to be seen later at which point you really do want to know which query text caused it.&lt;/p&gt;</comment>
                    <comment id="12711412" author="trejkaz" created="Thu, 21 May 2009 00:22:30 +0100"  >&lt;p&gt;I guess that&apos;s true if you look at exceptions as a logging mechanism, but in our case it&apos;s a parsing exception for text coming from the user.  Because of this, our use case is for the user to get a useful error message, and it&apos;s not useful at all if we just tell them their entire query was bad.  Thus we have inserted improvements (in our subclass) to make it complain only about the fragment of the query which is actually a problem, so they know which part to fix.&lt;/p&gt;

&lt;p&gt;Related, but is there any way it could at least be reduced to the portion of the query which caused the problem?   In a way it would be nice if ParseException had methods to get out the problematic fragment (my subclass has it...)  I&apos;m guessing this is much easier for exceptions relating to values inside fields which otherwise parsed correctly, but a lot harder to do for exceptions from the parser proper.&lt;/p&gt;
</comment>
                    <comment id="12711570" author="mikemccand" created="Thu, 21 May 2009 12:25:15 +0100"  >&lt;blockquote&gt;&lt;p&gt;I guess that&apos;s true if you look at exceptions as a logging mechanism, but in our case it&apos;s a parsing exception for text coming from the user. Because of this, our use case is for the user to get a useful error message, and it&apos;s not useful at all if we just tell them their entire query was bad. Thus we have inserted improvements (in our subclass) to make it complain only about the fragment of the query which is actually a problem, so they know which part to fix.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, in general an app ought to be catching this ParseException&lt;br/&gt;
and messaging something much more succinct/digestible to the end&lt;br/&gt;
user.&lt;/p&gt;

&lt;p&gt;When QueryParser throws ParseException, it does attempt to explain&lt;br/&gt;
what went wrong in many cases.  It sounds like you&apos;ve modified it&lt;br/&gt;
further to do a better job?  Is this something you could donate back?&lt;/p&gt;

&lt;p&gt;I agree we should make it easier to customize the ParseException, but&lt;br/&gt;
I think by default having the exception message include the full query&lt;br/&gt;
is useful for those apps that simply log the exception.  This way we&lt;br/&gt;
can have our cake and eat it too...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Related, but is there any way it could at least be reduced to the portion of the query which caused the problem? In a way it would be nice if ParseException had methods to get out the problematic fragment (my subclass has it...) I&apos;m guessing this is much easier for exceptions relating to values inside fields which otherwise parsed correctly, but a lot harder to do for exceptions from the parser proper.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It seems like it already makes some effort here?  Eg it has&lt;br/&gt;
attrs like currentToken, expectedTokenSequences,&lt;br/&gt;
etc., recorded when the exception is thrown.  And getMessage()&lt;br/&gt;
pulls from these attrs to build up the message?  Can you post a patch&lt;br/&gt;
with your improvements here?&lt;/p&gt;</comment>
                    <comment id="12711850" author="trejkaz" created="Thu, 21 May 2009 23:47:51 +0100"  >&lt;p&gt;Our improvements are (so far) specific to our subclass of QueryParser, in that we use it when getFieldQuery() gets a value which doesn&apos;t make sense for the given field.&lt;/p&gt;

&lt;p&gt;So in a sense, in our case the query was parsed successfully by the parser, but the input was invalid within one of the fields.  As such our custom ParseException subclass has the field name and field value, but it isn&apos;t useful to the Lucene project as-is, as the only things throwing it are called from our subclass. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12721427" author="hossman" created="Thu, 18 Jun 2009 20:34:29 +0100"  >&lt;p&gt;As a general rule, code catching an execption and throwing a new exception with more details should (almost always) call initCause (unless the new Exception has a constructor that takes care of that part) to preserve all of the stack history.&lt;/p&gt;

&lt;p&gt;Client code that wants to get at the root exception can do so using getCause()&lt;/p&gt;

&lt;p&gt;In QueryParser...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ParseException tme) {
   &lt;span class=&quot;code-comment&quot;&gt;// rethrow to include the original query:
&lt;/span&gt;   ParseException e = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ParseException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cannot parse &apos;&quot;&lt;/span&gt; +query+ &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos;: &quot;&lt;/span&gt; + tme.getMessage());
   e.initCause(tme);
   &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Trejkaz&apos;s code, something like...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ParseException pexp) {
   &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Throwable t = pexp; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != t; t = t.getCause()) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; OurCustomException) {
         takeActionOnCustomException((OurCustomException)t);
      }
      takeActionOnLuceneQueryParserException(exp)
   }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12723265" author="mikemccand" created="Tue, 23 Jun 2009 20:40:54 +0100"  >&lt;p&gt;I agree Hoss; I&apos;ll fix QueryParser to initCause when it catches &amp;amp; rethrows.&lt;/p&gt;</comment>
                    <comment id="12723268" author="mikemccand" created="Tue, 23 Jun 2009 20:55:48 +0100"  >&lt;p&gt;Thanks Trejkaz and Hoss!&lt;/p&gt;</comment>
                    <comment id="12727209" author="thetaphi" created="Sat, 4 Jul 2009 10:08:12 +0100"  >&lt;p&gt;Mike: For &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1713&quot; title=&quot;Rename RangeQuery -&amp;gt; TermRangeQuery&quot;&gt;&lt;del&gt;LUCENE-1713&lt;/del&gt;&lt;/a&gt;, I recreated the QueryParser with javacc (because some changes in creation of RangeQueries), but the produced QueryParser.java did not contain your changes.&lt;/p&gt;

&lt;p&gt;I copied your initCause() lines to QueryParser.jj and then it worked, I commit this together with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1713&quot; title=&quot;Rename RangeQuery -&amp;gt; TermRangeQuery&quot;&gt;&lt;del&gt;LUCENE-1713&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;By the way: The query parser is only created correctly with JavaCC 4.1, version 4.2 produces some wrong escaped chars.&lt;/p&gt;</comment>
                    <comment id="12727212" author="mikemccand" created="Sat, 4 Jul 2009 10:33:22 +0100"  >&lt;p&gt;Woops, thanks Uwe.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 20 May 2009 11:03:27 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12112</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26081</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>