<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:58 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2590/LUCENE-2590.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2590] Enable access to the freq information in a Query&apos;s sub-scorers</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2590</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The ability to gather more details than just the score, of how a given&lt;br/&gt;
doc matches the current query, has come up a number of times on the&lt;br/&gt;
user&apos;s lists.  (most recently in the thread &quot;Query Match Count&quot; by&lt;br/&gt;
Ryan McV on java-user).&lt;/p&gt;

&lt;p&gt;EG if you have a simple TermQuery &quot;foo&quot;, on each hit you&apos;d like to&lt;br/&gt;
know how many times &quot;foo&quot; occurred in that doc; or a BooleanQuery +foo&lt;br/&gt;
+bar, being able to separately see the freq of foo and bar for the&lt;br/&gt;
current hit.&lt;/p&gt;

&lt;p&gt;Lucene doesn&apos;t make this possible today, which is a shame because&lt;br/&gt;
Lucene in fact does compute exactly this information; it&apos;s just not&lt;br/&gt;
accessible from the Collector.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12471063">LUCENE-2590</key>
            <summary>Enable access to the freq information in a Query&apos;s sub-scorers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sun, 8 Aug 2010 15:08:58 +0100</created>
                <updated>Thu, 26 Apr 2012 17:47:11 +0100</updated>
                    <resolved>Wed, 1 Sep 2010 14:54:23 +0100</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12896364" author="mikemccand" created="Sun, 8 Aug 2010 15:13:31 +0100"  >&lt;p&gt;Attached patch.&lt;/p&gt;

&lt;p&gt;There were two things to fix.  First, I added Scorer.freq() so that&lt;br/&gt;
you could get the freq of the current match.  Second, I added a way to&lt;br/&gt;
visit all sub-scorers for a given Scorer.  The functionality is&lt;br/&gt;
definitely expert level &amp;#8211; you&apos;ll have to make a custom Collector that&lt;br/&gt;
gathers these stats &amp;amp; saves them away in your PQ, to use this &quot;for&lt;br/&gt;
real&quot;.  But it&apos;s a good start I think; there&apos;s a simple test case&lt;br/&gt;
showing how it works.&lt;/p&gt;</comment>
                    <comment id="12898589" author="mikemccand" created="Sat, 14 Aug 2010 15:07:10 +0100"  >&lt;p&gt;Another iter of this patch; I think it&apos;s ready to commit.  I commented out BooleanScorer&apos;s handling of required=true since we never use it (but left TODOs in there to re-enable this code if/when we go back to sending required clauses to BooleanScorer).  I also added CHANGES entry.&lt;/p&gt;</comment>
                    <comment id="12898638" author="simonw" created="Sat, 14 Aug 2010 20:59:03 +0100"  >&lt;p&gt;Mike, eventually we are getting this feature - I guess many are waiting for this!&lt;/p&gt;

&lt;p&gt;I wonder if we really need to pass the BooleanClause.Occur to the visit method of if we rather defined a visit method for each boolean relationship. We could make it an abstract class and if you are not interested in Prohibited or Optional scorers you can simply leave the method empty. JIT compiler might be able to optimize this method calls away. if we go this way I&apos;d make &lt;tt&gt;VisitSubScorer&lt;/tt&gt; abstract  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class VisitSubScorer {
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void visitRequired(Query parent, Query child, Scorer childScorer){}
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void visitOptional(Query parent, Query child, Scorer childScorer){}
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void visitProhibited(Query parent, Query child, Scorer childScorer){}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I we could also make parent and child &amp;lt;P extends Query, C extends Query, S extends Scorer&amp;gt; in certain (I have to admit rather rare) situations this could make users code simpler as they might know how their queries look like and the cast is done implicitly. For all others nothing really changes though. Its just an idea and I thought I&apos;d mention it.&lt;/p&gt;
</comment>
                    <comment id="12898854" author="mikemccand" created="Mon, 16 Aug 2010 12:07:22 +0100"  >&lt;p&gt;OK I like the 3 methods instead of the single method with BooleanClause.OCCUR param.&lt;/p&gt;

&lt;p&gt;The heavy generics would be useful for apps that eg have a fixed structure to all Queries right?  Eg if you know your app only ever makes BooleanQuery w/ TermQuery sub-classes, you&apos;d parameterize the instantiation as &amp;lt;BooleanQuery,TermQuery,TermScrorer&amp;gt; (hmm though TermScorer isn&apos;t public; maybe just leave S as Scorer)?  I think this makes sense.&lt;/p&gt;

&lt;p&gt;I&apos;ll work on these but it&apos;ll be a little while &amp;#8211; I&apos;m out on &quot;vacation&quot;.&lt;/p&gt;</comment>
                    <comment id="12899000" author="simonw" created="Mon, 16 Aug 2010 18:34:40 +0100"  >&lt;blockquote&gt;
&lt;p&gt;The heavy generics would be useful for apps that eg have a fixed structure to all Queries right? Eg if you know your app only ever makes BooleanQuery w/ TermQuery sub-classes, you&apos;d parameterize the instantiation as &amp;lt;BooleanQuery,TermQuery,TermScrorer&amp;gt; (hmm though TermScorer isn&apos;t public; maybe just leave S as Scorer)? I think this makes sense.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;jep, this is exactly what I was aiming at. Scorer might be an exception but in general this it what you would do. A special case where I could think of is FuzzyQuery where you can tell from the rewrite method what kind of query will be constructed and where this information could be useful (think of spellchecking of similar usecases)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;ll work on these but it&apos;ll be a little while - I&apos;m out on &quot;vacation&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good to hear, enjoy! I might update you patch accordingly before you come back though!&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12899370" author="mikemccand" created="Tue, 17 Aug 2010 11:50:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;Good to hear, enjoy! I might update you patch accordingly before you come back though!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please do!!  Feel free &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12901201" author="simonw" created="Sun, 22 Aug 2010 19:54:14 +0100"  >&lt;p&gt;Attaching a slightly new version of the patch incorporating roughly the idea of 3-distinct methods. Yet, having 3 methods instead of one was kind of ugly to implement and I didn&apos;t want to add switch case statements to visitSubScorer methods just to call a different method.&lt;/p&gt;

&lt;p&gt;Anyway, I changed the 3  parameter methods to take a single argument holding all required information. This is way more extensible and flexible since we don&apos;t need to change a method signature just to add a new param. &lt;br/&gt;
I am not sure about the 3 different callbacks but I thought I would leave it in the patch for now.&lt;/p&gt;

&lt;p&gt;Parent, Child and Scorer became generic arguments.&lt;/p&gt;

&lt;p&gt;simon &lt;/p&gt;</comment>
                    <comment id="12901344" author="mikemccand" created="Mon, 23 Aug 2010 11:32:29 +0100"  >&lt;p&gt;I think the API changes are too complex/heavyweight here!&lt;/p&gt;

&lt;p&gt;With this new patch we&apos;ve added Scorer.ScorerVisitor,&lt;br/&gt;
Scorer.SubScorerCallback, Scorer.ScorerContext, and two new&lt;br/&gt;
Scorer.accept methods.&lt;/p&gt;

&lt;p&gt;The original patch added only a 1-method interface&lt;br/&gt;
&quot;VisitSubScorer&quot;.&lt;/p&gt;

&lt;p&gt;Can&apos;t we simplify this?  I liked your original proposal, breaking out&lt;br/&gt;
explicit visitRequired, visitOptional, etc., but keeping this as a&lt;br/&gt;
single class.  Or we can go back to the original patch (just passing&lt;br/&gt;
an arg expressing the relationship)?&lt;/p&gt;

&lt;p&gt;I also don&apos;t like the &quot;context&quot; approach, setting attrs on a shared&lt;br/&gt;
instance.  This is basically setting up arguments to pass to the&lt;br/&gt;
callback &amp;#8211; why not simply pass these arguments (on the stack)&lt;br/&gt;
instead?&lt;/p&gt;

&lt;p&gt;I don&apos;t like the &quot;accept&quot; name &amp;#8211; it&apos;s very generic &amp;#8211; can we put this&lt;br/&gt;
back to visitSubScorers or something that makes it clear you&apos;re&lt;br/&gt;
visiting the full sub-tree (visitScorers?  visitScorerTree?)?&lt;/p&gt;</comment>
                    <comment id="12901349" author="simonw" created="Mon, 23 Aug 2010 12:01:43 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Can&apos;t we simplify this? I liked your original proposal, breaking out&lt;br/&gt;
explicit visitRequired, visitOptional, etc., but keeping this as a&lt;br/&gt;
single class. Or we can go back to the original patch (just passing&lt;br/&gt;
an arg expressing the relationship)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem leading to this quiet heavy change was that I wanted to call a specific function for each Boolean.Occur relationship. That turned out to be ugly since I had to either add a switch / case statement to each of the visitSubScorers methods or add  a visitSubScorers method for each relationship. I didn&apos;t like that at all so I moved forward to specify a callback for each relationship. I see your point of being to heavy though. I guess we should go back to the original approach since I don&apos;t want to decide it on a switch case basis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; also don&apos;t like the &quot;context&quot; approach, setting attrs on a shared&lt;br/&gt;
instance. This is basically setting up arguments to pass to the&lt;br/&gt;
callback - why not simply pass these arguments (on the stack)&lt;br/&gt;
instead?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Passing it on the stack has one limitation which is that if I want to pass more information around in the future I need to change the interface while I only add a member to the &quot;context&quot; if I pass it that way. Another reason was that if I want to pass custom info  from a custom query scorer to another I can not do that since there is not context. &lt;/p&gt;

&lt;p&gt;One other solution would be to reduce the interface back to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; class ScorerVisitor&amp;lt;P &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Query, C &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Query, S &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Scorer&amp;gt;{
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Occur relationship;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; void visit(P parent, C child, S childScorer);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but hold the relationship as an attribute that way we don&apos;t  have it in the method signature which I don&apos;t like though.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I don&apos;t like the &quot;accept&quot; name - it&apos;s very generic - can we put this&lt;br/&gt;
back to visitSubScorers or something that makes it clear you&apos;re&lt;br/&gt;
visiting the full sub-tree (visitScorers? visitScorerTree?)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m ok with visitScorers&lt;/p&gt;</comment>
                    <comment id="12901500" author="simonw" created="Mon, 23 Aug 2010 18:40:37 +0100"  >&lt;p&gt;another iteration moving back to the originally discussed approach. The switch case block shouldn&apos;t be any bottleneck since the visitor should not run for each scored doc anyway.&lt;/p&gt;
</comment>
                    <comment id="12901843" author="mikemccand" created="Tue, 24 Aug 2010 13:21:33 +0100"  >&lt;p&gt;Patch looks good!  Thanks, Simon.&lt;/p&gt;

&lt;p&gt;Can we factor out that switch statement into super&apos;s visitSubScorers?  This way the base (Scorer) impl would be responsible for visiting &quot;this&quot;, and then the subclass would override only if it had subs (ie BS, BS2)?&lt;/p&gt;

&lt;p&gt;Also, we are missing some scorers (SpanScorer, ConstantScoreQuery.ConstantScorer, probably others), but if we do the super approach, we&apos;d get these &quot;for free&quot; (I think?).&lt;/p&gt;

&lt;p&gt;Oh I see we can&apos;t quite have Scorer impl this because it doesn&apos;t know the query.   But maybe we can factor out a common method, that the subclass passed the query to?&lt;/p&gt;</comment>
                    <comment id="12902379" author="simonw" created="Wed, 25 Aug 2010 12:17:47 +0100"  >&lt;blockquote&gt;&lt;p&gt;Oh I see we can&apos;t quite have Scorer impl this because it doesn&apos;t know the query. But maybe we can factor out a common method, that the subclass passed the query to?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I had the same idea in a previous iteration but since Scorer doesn&apos;t know about the Query the scorer concerns I can not do the call. One way of doing it would be adding the scorers &lt;tt&gt;Weight&lt;/tt&gt; as a protected final member since &lt;tt&gt;Weight&lt;/tt&gt; already has a &lt;tt&gt;#getQuery()&lt;/tt&gt; method we can easily access it or throw an UnsupportedOperationException if the weight is null (force it via ctor and have a default one which sets it to null).&lt;/p&gt;

&lt;p&gt;Since the most of the scorers know their &lt;tt&gt;Weight&lt;/tt&gt; anyway and would need to call the visitor we can also factor it out.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Also, we are missing some scorers (SpanScorer, ConstantScoreQuery.ConstantScorer, probably others), but if we do the super approach, we&apos;d get these &quot;for free&quot; (I think?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;most of them would then be for free though!&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                    <comment id="12903952" author="mikemccand" created="Sun, 29 Aug 2010 11:30:17 +0100"  >&lt;blockquote&gt;
&lt;p&gt;One way of doing it would be adding the scorers Weight as a protected final member since Weight already has a #getQuery() method we can easily access it or throw an UnsupportedOperationException if the weight is null (force it via ctor and have a default one which sets it to null).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;This would then make a default base impl work well for all leaf queries.&lt;/p&gt;</comment>
                    <comment id="12904204" author="simonw" created="Mon, 30 Aug 2010 15:15:23 +0100"  >&lt;p&gt;Another iteration with Weight as a protected member or Scorer. All scorers I looked at had the weight already as a member so this change makes things way simpler though. I think this is close to commit.&lt;/p&gt;</comment>
                    <comment id="12904250" author="mikemccand" created="Mon, 30 Aug 2010 17:58:18 +0100"  >&lt;p&gt;Looks great!&lt;/p&gt;

&lt;p&gt;Though, can&apos;t BS and BS2 just call super.visitSubScorers first, and then visit their subs?  (Ie right now they dup super&apos;s code right?).&lt;/p&gt;</comment>
                    <comment id="12904313" author="simonw" created="Mon, 30 Aug 2010 21:13:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Though, can&apos;t BS and BS2 just call super.visitSubScorers first, and then visit their subs? (Ie right now they dup super&apos;s code right?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nah, good point mike &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I missed that, nice code reuse though! - will fix that soon.&lt;/p&gt;</comment>
                    <comment id="12904318" author="simonw" created="Mon, 30 Aug 2010 21:20:59 +0100"  >&lt;p&gt;new patch - fixed the code dup&lt;/p&gt;</comment>
                    <comment id="12904729" author="mikemccand" created="Tue, 31 Aug 2010 20:00:52 +0100"  >&lt;p&gt;Patch looks great Simon, thanks!  +1 to commit.&lt;/p&gt;</comment>
                    <comment id="12904745" author="simonw" created="Tue, 31 Aug 2010 20:52:14 +0100"  >&lt;p&gt;Committed revision 991310 &lt;/p&gt;

&lt;p&gt;Thanks Mike&lt;/p&gt;</comment>
                    <comment id="12904751" author="mikemccand" created="Tue, 31 Aug 2010 21:16:09 +0100"  >&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;I think we should also backport to 3.x?&lt;/p&gt;</comment>
                    <comment id="12904753" author="simonw" created="Tue, 31 Aug 2010 21:19:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we should also backport to 3.x?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah we should I guess - I will look into this tomorrow. &lt;/p&gt;</comment>
                    <comment id="12904757" author="mikemccand" created="Tue, 31 Aug 2010 21:23:13 +0100"  >&lt;p&gt;OK sounds good...&lt;/p&gt;</comment>
                    <comment id="12905028" author="simonw" created="Wed, 1 Sep 2010 14:54:23 +0100"  >&lt;p&gt;Ported back to 3.x&lt;/p&gt;

&lt;p&gt;Committed revision 991537.&lt;/p&gt;</comment>
                    <comment id="13013390" author="gsingers" created="Wed, 30 Mar 2011 16:50:11 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310050">
                <name>Regression</name>
                                                <inwardlinks description="is broken by">
                            <issuelink>
            <issuekey id="12475780">LUCENE-2686</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12453457" name="LUCENE-2590.patch" size="32158" author="simonw" created="Mon, 30 Aug 2010 21:20:59 +0100" />
                    <attachment id="12453421" name="LUCENE-2590.patch" size="32484" author="simonw" created="Mon, 30 Aug 2010 15:15:23 +0100" />
                    <attachment id="12452836" name="LUCENE-2590.patch" size="26465" author="simonw" created="Mon, 23 Aug 2010 18:40:37 +0100" />
                    <attachment id="12452750" name="LUCENE-2590.patch" size="31066" author="simonw" created="Sun, 22 Aug 2010 19:54:14 +0100" />
                    <attachment id="12452094" name="LUCENE-2590.patch" size="19231" author="mikemccand" created="Sat, 14 Aug 2010 15:07:10 +0100" />
                    <attachment id="12451517" name="LUCENE-2590.patch" size="16877" author="mikemccand" created="Sun, 8 Aug 2010 15:13:31 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 14 Aug 2010 19:59:03 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11244</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25102</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>