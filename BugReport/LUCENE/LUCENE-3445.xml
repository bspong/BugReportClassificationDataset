<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:35:18 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3445/LUCENE-3445.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3445] Add SearcherManager, to manage IndexSearcher usage across threads and reopens</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3445</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a simple helper class I wrote for Lucene in Action 2nd ed.&lt;br/&gt;
I&apos;d like to commit under Lucene (contrib/misc).&lt;/p&gt;

&lt;p&gt;It simplifies using &amp;amp; reopening an IndexSearcher across multiple&lt;br/&gt;
threads, by using IndexReader&apos;s ref counts to know when it&apos;s safe&lt;br/&gt;
to close the reader.&lt;/p&gt;

&lt;p&gt;In the process I also factored out a test base class for tests that&lt;br/&gt;
want to make lots of simultaneous indexing and searching threads, and&lt;br/&gt;
fixed TestNRTThreads (core), TestNRTManager (contrib/misc) and the new&lt;br/&gt;
TestSearcherManager (contrib/misc) to use this base class.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12523891">LUCENE-3445</key>
            <summary>Add SearcherManager, to manage IndexSearcher usage across threads and reopens</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Sep 2011 18:41:35 +0100</created>
                <updated>Sun, 27 Nov 2011 12:29:29 +0000</updated>
                    <resolved>Sun, 25 Sep 2011 17:08:37 +0100</resolved>
                                            <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13109768" author="shaie" created="Wed, 21 Sep 2011 19:43:20 +0100"  >&lt;p&gt;This is great Mike !&lt;/p&gt;

&lt;p&gt;I reviewed SearcherManager and have a comment about the TODO on whether or not to call warm in the ctor. If an extending class relies on some internal members to be initialized before warm() can safely be called, then this will lead to exceptions. I think that warm() should not be called in the ctor, or at least add a ctor which accepts a boolean doWarm, while the other ctors call it with &apos;true&apos;.&lt;/p&gt;

&lt;p&gt;Calling warm() in the ctor is useful if one wants to warm the IndexSearcher instance before SearcherManager is ready for use. So perhaps an additional ctor with the boolean gives the most flexibility.&lt;/p&gt;

&lt;p&gt;Also, I remember there was a ctor which took IndexWriter, to allow for an NRT-SearcherManager. What happened to it? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13109869" author="simonw" created="Wed, 21 Sep 2011 21:51:16 +0100"  >&lt;p&gt;Mike, would it be possible to merge the NRT and SearcherManager into one class / manager or that maybe both implement the same interface?&lt;/p&gt;</comment>
                    <comment id="13112195" author="mikemccand" created="Wed, 21 Sep 2011 23:51:11 +0100"  >&lt;p&gt;Maybe we just shouldn&apos;t ever call warm from the ctor?  Caller can easily call warm themselves... we can just jdoc this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I remember there was a ctor which took IndexWriter, to allow for an NRT-SearcherManager. What happened to it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, I removed it because we have NRTManager now.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mike, would it be possible to merge the NRT and SearcherManager into one class / manager or that maybe both implement the same interface?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, they used to be merged.... we could consider merging them again?&lt;/p&gt;

&lt;p&gt;NRTManager is more feature-full, though, because it offers add/updateDocument(s) APIs that invoke the writer but return a &lt;span class=&quot;error&quot;&gt;&amp;#91;long&amp;#93;&lt;/span&gt; gen, which you can then turnaround and pass to .get() to ensure the returned searcher includes those changes.  SearcherManager doesn&apos;t have notion... unless we somehow tie in the IndexReader.getVersion() somehow?  I&apos;m torn... they seem different enough that maybe they should remain separate.  Plus, users usually know quite strongly if they use NRT or not and could pick the right manager accordingly...&lt;/p&gt;</comment>
                    <comment id="13112363" author="shaie" created="Thu, 22 Sep 2011 07:43:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Caller can easily call warm themselves&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;warm() is protected. If you don&apos;t want to extend SearcherManager, how would you ensure it&apos;s warmed-up after creation?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I removed it because we have NRTManager now&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, I wasn&apos;t aware of that.&lt;/p&gt;</comment>
                    <comment id="13112910" author="mikemccand" created="Thu, 22 Sep 2011 22:07:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;warm() is protected. If you don&apos;t want to extend SearcherManager, how would you ensure it&apos;s warmed-up after creation?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, warm() is a no-op if you don&apos;t extend SearcherManager, so, if you extend, you&apos;d impl warm, and then in your ctor you should call warm on the initial searcher if need be.  Definitely trappy so we should jdoc that subclass&apos;s ctor must handle warming initial searcher....&lt;/p&gt;</comment>
                    <comment id="13112918" author="simonw" created="Thu, 22 Sep 2011 22:16:09 +0100"  >&lt;blockquote&gt;&lt;p&gt;Well, warm() is a no-op if you don&apos;t extend SearcherManager, so, if you extend, you&apos;d impl warm, and then in your ctor you should call warm on the initial searcher if need be. Definitely trappy so we should jdoc that subclass&apos;s ctor must handle warming initial searcher....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;it seems pretty trappy to have this in the ctor though. Since this is a noop by default and it requires subclassing to do something with it it might be worth introducing a SearchWarmer interface and simply pass this interface into the ctor ie. have two ctors where by default we pass a noop warmer?&lt;/p&gt;</comment>
                    <comment id="13112930" author="mikemccand" created="Thu, 22 Sep 2011 22:32:20 +0100"  >&lt;p&gt;I like that approach; we can then use that same interface for passing to NRTManager.  I&apos;ll do that.&lt;/p&gt;</comment>
                    <comment id="13113559" author="mikemccand" created="Fri, 23 Sep 2011 17:57:45 +0100"  >&lt;p&gt;New patch, adds a SearcherWarmer interface (also in contrib/misc), and switches Searcher/NRTManager to accepting a warmer to their ctors instead of subclassing.&lt;/p&gt;

&lt;p&gt;I think it&apos;s ready for commit!&lt;/p&gt;</comment>
                    <comment id="13115900" author="gsteff" created="Tue, 27 Sep 2011 21:40:42 +0100"  >&lt;p&gt;What are the different use cases for this and NRTManager?&lt;/p&gt;</comment>
                    <comment id="13115954" author="simonw" created="Tue, 27 Sep 2011 22:39:36 +0100"  >&lt;p&gt;I have a couple of smallish improvements to SearcherManager making the hottest method in SM non-blocking. I added a tryIncRef to index reader that makes is easier to work with IR refcounts in a non-blocking fashion. I also renamed SM#get to SM#acquire which seems to be more clear about what happens here (also kind of stronger than get - so you&apos;d better release it). &lt;/p&gt;
</comment>
                    <comment id="13115957" author="mikemccand" created="Tue, 27 Sep 2011 22:49:06 +0100"  >&lt;p&gt;+1 &amp;#8211; changes look great!  Nice to have .acquire be lock free.&lt;/p&gt;</comment>
                    <comment id="13116277" author="simonw" created="Wed, 28 Sep 2011 09:02:31 +0100"  >&lt;p&gt;Committed the last patch in revision 1176772. Thanks for review mike.&lt;/p&gt;</comment>
                    <comment id="13116560" author="simonw" created="Wed, 28 Sep 2011 16:52:23 +0100"  >&lt;p&gt;backported to 3.x in rev. 1176933&lt;/p&gt;</comment>
                    <comment id="13116608" author="mikemccand" created="Wed, 28 Sep 2011 18:07:39 +0100"  >&lt;p&gt;Thanks Simon!&lt;/p&gt;</comment>
                    <comment id="13157772" author="thetaphi" created="Sun, 27 Nov 2011 12:29:29 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12496802" name="LUCENE-3445.patch" size="7616" author="simonw" created="Tue, 27 Sep 2011 22:39:36 +0100" />
                    <attachment id="12496284" name="LUCENE-3445.patch" size="107411" author="mikemccand" created="Fri, 23 Sep 2011 17:57:45 +0100" />
                    <attachment id="12495410" name="LUCENE-3445.patch" size="96528" author="mikemccand" created="Wed, 21 Sep 2011 18:44:23 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 21 Sep 2011 18:43:20 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2680</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24251</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>