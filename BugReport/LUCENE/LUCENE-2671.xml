<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2671/LUCENE-2671.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2671] Add sort missing first/last ability to SortField and ValueComparator</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2671</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;When SortField and ValueComparator use EntryCreators (from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2649&quot; title=&quot;FieldCache should include a BitSet for matching docs&quot;&gt;&lt;del&gt;LUCENE-2649&lt;/del&gt;&lt;/a&gt;) they use a special sort value when the field is missing.&lt;/p&gt;

&lt;p&gt;This enables lucene to implement &apos;sort missing last&apos; or &apos;sort missing first&apos; for numeric values from the FieldCache.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12475148">LUCENE-2671</key>
            <summary>Add sort missing first/last ability to SortField and ValueComparator</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="ryantxu">Ryan McKinley</assignee>
                                <reporter username="ryantxu">Ryan McKinley</reporter>
                        <labels>
                    </labels>
                <created>Sun, 26 Sep 2010 23:07:49 +0100</created>
                <updated>Fri, 10 May 2013 11:44:37 +0100</updated>
                    <resolved>Sat, 29 Jan 2011 18:31:40 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12915055" author="ryantxu" created="Sun, 26 Sep 2010 23:13:09 +0100"  >&lt;p&gt;This is the lucene only parts of &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2134&quot; title=&quot;Trie* fields should support sortMissingLast=true, and deprecate Sortable* Field Types&quot;&gt;&lt;del&gt;SOLR-2134&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12915083" author="yseeley@gmail.com" created="Mon, 27 Sep 2010 01:23:57 +0100"  >&lt;p&gt;Ah - I was just about to report &quot;hmmm, doesn&apos;t seem to be working&quot;.  But then I realized you separated them out and this is the lucene part only.&lt;/p&gt;

&lt;p&gt;IMO - if you&apos;re working on these together (and esp if the original motivation was to ultimately get the functionallity into Solr, it&apos;s simpler to keep it as a single issue / single patch).&lt;/p&gt;

&lt;p&gt;edit: and two patches are tougher to deal with - in fact, I can&apos;t apply the solr one either with or without this patch... not sure what&apos;s up.&lt;/p&gt;</comment>
                    <comment id="12916008" author="ryantxu" created="Wed, 29 Sep 2010 05:15:34 +0100"  >&lt;p&gt;added in #1002460 &amp;#8211; this can be backported to 3.x when &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2665&quot; title=&quot;Rework FieldCache to be more flexible/general&quot;&gt;&lt;del&gt;LUCENE-2665&lt;/del&gt;&lt;/a&gt; is stabalized&lt;/p&gt;</comment>
                    <comment id="12916009" author="ryantxu" created="Wed, 29 Sep 2010 05:21:45 +0100"  >&lt;p&gt;Note, this solution does not (yet) address Uwe&apos;s concern about sorting NaN and real POSITIVE_INFINITY/NEGATIVE_INFINITY values.&lt;/p&gt;

&lt;p&gt;I&apos;m going to punt that to a different issues since it preexisted this one&lt;/p&gt;</comment>
                    <comment id="12917022" author="thetaphi" created="Fri, 1 Oct 2010 21:21:09 +0100"  >&lt;p&gt;Hi Ryan,&lt;/p&gt;

&lt;p&gt;this patch causes tons of unchecked warnings, without it, Lucene compiles without any.&lt;/p&gt;

&lt;p&gt;The generics policeman does not understand this code so he cannot fix:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:209: warning: [unchecked] unchecked cast
    [javac] found   : java.lang.Object
    [javac] required: T
    [javac]         key.creator.validate( (T)value, reader);
    [javac]                                  ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:278: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (ByteValues)caches.get(Byte.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                          ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:278: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (ByteValues)caches.get(Byte.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                 ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:293: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (ShortValues)caches.get(Short.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                            ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:293: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (ShortValues)caches.get(Short.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                   ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:308: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (IntValues)caches.get(Integer.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                            ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:308: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (IntValues)caches.get(Integer.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                   ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:323: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (FloatValues)caches.get(Float.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                            ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:323: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (FloatValues)caches.get(Float.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                   ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:337: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (LongValues)caches.get(Long.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                          ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:337: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (LongValues)caches.get(Long.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                 ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:352: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (DoubleValues)caches.get(Double.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                              ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:352: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (DoubleValues)caches.get(Double.TYPE).get(reader, new Entry(field, creator));
    [javac]                                                     ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:366: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (DocTermsIndex)caches.get(DocTermsIndex.class).get(reader, new Entry(field, creator));
    [javac]                                                                       ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:366: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (DocTermsIndex)caches.get(DocTermsIndex.class).get(reader, new Entry(field, creator));
    [javac]                                                              ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:382: warning: [unchecked] unchecked call to Entry(java.lang.String,org.apache.lucene.search.cache.EntryCreator&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Entry
    [javac]     return (DocTerms)caches.get(DocTerms.class).get(reader, new Entry(field, creator));
    [javac]                                                             ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\FieldCacheImpl.java:382: warning: [unchecked] unchecked call to get(org.apache.lucene.index.IndexReader,org.apache.lucene.search.FieldCacheImpl.Entry&amp;lt;T&amp;gt;) as a member of the raw type org.apache.lucene.search.FieldCacheImpl.Cache
    [javac]     return (DocTerms)caches.get(DocTerms.class).get(reader, new Entry(field, creator));
    [javac]                                                    ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\cache\DocTermsCreator.java:137: warning: [unchecked] unchecked cast
    [javac] found   : org.apache.lucene.search.cache.DocTermsCreator.DocTermsImpl
    [javac] required: T
    [javac]     return (T)new DocTermsImpl(bytes.freeze(true), docToOffset.getMutable());
    [javac]               ^
    [javac] C:\Users\Uwe Schindler\Projects\lucene\trunk-solr\lucene\src\java\org\apache\lucene\search\cache\DocTermsIndexCreator.java:169: warning: [unchecked] unchecked cast
    [javac] found   : org.apache.lucene.search.cache.DocTermsIndexCreator.DocTermsIndexImpl
    [javac] required: T
    [javac]     return (T)new DocTermsIndexImpl(bytes.freeze(true), termOrdToBytesOffset.getMutable(), docToTermOrd.getMutable(), termOrd);
    [javac]               ^
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12917023" author="thetaphi" created="Fri, 1 Oct 2010 21:22:28 +0100"  >&lt;p&gt;Additionally, the source code formatting is not Lucene-conform (should be no newline before {, no extra space around method parameters).&lt;/p&gt;</comment>
                    <comment id="12920817" author="ryantxu" created="Thu, 14 Oct 2010 01:28:39 +0100"  >&lt;p&gt;here is a patch that ignores all the unchecked casts&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 @SuppressWarnings(&lt;span class=&quot;code-quote&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think there is any way around this for the current design &amp;#8211; in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2665&quot; title=&quot;Rework FieldCache to be more flexible/general&quot;&gt;&lt;del&gt;LUCENE-2665&lt;/del&gt;&lt;/a&gt;, the cache would directly use the generic map, but for the baby step it needs a cast.&lt;/p&gt;

&lt;p&gt;The issues is that we have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt;,Cache&amp;gt; caches;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and really need to be able to define something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;X&amp;gt;,Cache&amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; X&amp;gt;&amp;gt; caches;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where X depends on what you put into the map...  but that is not possible as far as I know.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;- -&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I would commit this, but the build is failing for other reasons....  &lt;/p&gt;
</comment>
                    <comment id="12921686" author="rcmuir" created="Sat, 16 Oct 2010 14:04:03 +0100"  >&lt;p&gt;I am concerned about the @SuppressWarnings here, for two reasons:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;I don&apos;t think we should use this except in limited circumstances where its not our fault (see below)&lt;/li&gt;
	&lt;li&gt;I don&apos;t think we should leave the API broken pending some massive &quot;rework fieldcache&quot; issue, which it appears has been attempted before...&lt;/li&gt;
	&lt;li&gt;I don&apos;t understand the generics in the current API at all&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In general with SuppressWarnings, i think we should limit our uses to cases where its really a false warning&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;generic collections/array problems&lt;/li&gt;
	&lt;li&gt;documenting intentional fallthroughs in switch statements&lt;/li&gt;
	&lt;li&gt;possibly autogenerated code from something else like javacc/jflex&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;d like for us to remove the SuppressWarnings and look at what we can do to fix the API right now as-is.&lt;/p&gt;</comment>
                    <comment id="12921725" author="ryantxu" created="Sat, 16 Oct 2010 19:16:20 +0100"  >
&lt;blockquote&gt;&lt;p&gt;I don&apos;t think we should leave the API broken pending some massive &quot;rework fieldcache&quot; issue, which it appears has been attempted before...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What part of the API is broken?  The assumptions about what is in the Map are are internal to a private member that can not be touched outside this ugly class.  My reference to &lt;/p&gt;


&lt;p&gt;To avoid the compiler warning, we could do something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DoubleValues getDoubles(IndexReader reader, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; field, EntryCreator&amp;lt;DoubleValues&amp;gt; creator ) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; v = caches.get(&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt;.TYPE).get(reader, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Entry(field, creator));
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( v &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; DoubleValues ) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (DoubleValues)v;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException( &lt;span class=&quot;code-quote&quot;&gt;&quot;should be of type DoubleValues rather then: &quot;&lt;/span&gt;+v.getClass() );
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But this is more complex and equivalent to the ClassCastException that would be thrown with the original code.&lt;/p&gt;

&lt;p&gt;Another option is to drop the caches Map&amp;lt;Class,Cache&amp;gt; since that is where we lose what type the output should be.  I will post a patch with this option&lt;/p&gt;</comment>
                    <comment id="12921728" author="ryantxu" created="Sat, 16 Oct 2010 19:24:01 +0100"  >&lt;p&gt;This patch reduces the number of compiler warnings by removing a Map and replacing it with specific classes.  That is rather then:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt;,Cache&amp;gt; caches;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;we would have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;ByteValues&amp;gt; byteCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;ShortValues&amp;gt; shortCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;IntValues&amp;gt; intCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;FloatValues&amp;gt; floatCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;LongValues&amp;gt; longCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;DoubleValues&amp;gt; doubleCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;DocTermsIndex&amp;gt; docTermsIndexCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; Cache&amp;lt;DocTerms&amp;gt; docTermsCache;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Cache&amp;lt;?&amp;gt;&amp;gt; caches = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Cache&amp;lt;?&amp;gt;&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and then each type looks up its values directly:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; IntValues getInts(IndexReader reader, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; field, EntryCreator&amp;lt;IntValues&amp;gt; creator ) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; intCache.get(reader, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Entry&amp;lt;IntValues&amp;gt;(field, creator));
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, this approach still leaves one place that has class cast.  since the Cache holds a CreationPlaceholder while it is making the object, we can not use a simple generic Map.  Again, we could add some extra instanceof checks, but I don&apos;t think that adds anything&lt;/p&gt;
</comment>
                    <comment id="12921732" author="yseeley@gmail.com" created="Sat, 16 Oct 2010 19:39:27 +0100"  >&lt;p&gt;Hopefully if/when this cache moves to IndexReader, we will still be able to cache arbitrary stuff on the reader?&lt;/p&gt;</comment>
                    <comment id="12921759" author="ryantxu" created="Sat, 16 Oct 2010 21:34:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hopefully if/when this cache moves to IndexReader, we will still be able to cache arbitrary stuff on the reader? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ya, the ReaderCache proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2665&quot; title=&quot;Rework FieldCache to be more flexible/general&quot;&gt;&lt;del&gt;LUCENE-2665&lt;/del&gt;&lt;/a&gt; simply uses the key from EntryCreator.getCacheKey().&lt;/p&gt;

</comment>
                    <comment id="12921760" author="rcmuir" created="Sat, 16 Oct 2010 21:44:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;What part of the API is broken? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DocTermsCreator&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The assumptions about what is in the Map are are internal to a private member that can not be touched outside this ugly class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a public class.&lt;/p&gt;

&lt;p&gt;It is parameterized as T extends DocTerms, but &lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  @Override
  public T create(IndexReader reader) throws IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is not true, it returns DocTermCreator.DocTermsImpl and gives an ugly cast&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    final T t =
      (T)new DocTermsImpl(bytes.freeze(true), docToOffset.getMutable());
    return t;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The api doesn&apos;t look extensible to me, I&apos;m surprised it works. I guess this is why the compiler complains.&lt;/p&gt;

&lt;p&gt;Granted i didnt take a lot of time to look it over, but the compiler warnings speak loudly enough in my favor.&lt;/p&gt;</comment>
                    <comment id="12921763" author="ryantxu" created="Sat, 16 Oct 2010 22:29:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;This is not true, it returns DocTermCreator.DocTermsImpl and gives an ugly cast&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DocTermCreator.DocTermsImpl (a private class only accessible within DocTermCreator) extends DocTerms and so it is true.&lt;/p&gt;

&lt;p&gt;I won&apos;t argue about the ugly cast. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;in #1023379 I changed DocTermsCreator and DocTermsIndexCreator to bind directly to the class (rather then T extends XXX)  This is a bit more clear, but does not let you extend the generic API (not that you need to)&lt;/p&gt;</comment>
                    <comment id="12921768" author="rcmuir" created="Sat, 16 Oct 2010 22:57:18 +0100"  >&lt;blockquote&gt;
&lt;p&gt;in #1023379 I changed DocTermsCreator and DocTermsIndexCreator to bind directly to the class (rather then T extends XXX) This is a bit more clear, but does not let you extend the generic API (not that you need to)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;thanks Ryan!&lt;/p&gt;</comment>
                    <comment id="12921837" author="ryantxu" created="Sun, 17 Oct 2010 13:34:45 +0100"  >&lt;p&gt;here is a new patch that applies cleanly.&lt;/p&gt;

&lt;p&gt;I could go either way for &amp;#8211; keep it as it is, vs drop the first layer generic map&lt;/p&gt;</comment>
                    <comment id="12969386" author="yseeley@gmail.com" created="Wed, 8 Dec 2010 17:26:52 +0000"  >&lt;p&gt;(carried over from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2649&quot; title=&quot;FieldCache should include a BitSet for matching docs&quot;&gt;&lt;del&gt;LUCENE-2649&lt;/del&gt;&lt;/a&gt;... I guess my last patch should have been here.)&lt;/p&gt;

&lt;p&gt;Actually, looking a bit further at these comparators, it seems like we have an unnecessary cast in the inner-loop method compareBottom (because of type erasure)?&lt;br/&gt;
Seems like we should just cache the int[] or whatever to avoid that.&lt;br/&gt;
I&apos;ll work up another patch for consideration.&lt;/p&gt;</comment>
                    <comment id="12969390" author="yseeley@gmail.com" created="Wed, 8 Dec 2010 17:43:44 +0000"  >&lt;p&gt;OK, here&apos;s a patch that caches the typed array as &quot;docValues&quot;&lt;br/&gt;
and moves the ShortComparator next to the other numeric comparators (since it wasn&apos;t next to the others, I actually missed it in my first patch).&lt;/p&gt;</comment>
                    <comment id="12970235" author="ryantxu" created="Fri, 10 Dec 2010 17:05:11 +0000"  >&lt;p&gt;Looks good &amp;#8211; should we also get rid of the lazy initialization that then allocates at the end anyway (with FloatValuesCreator, LongValuesCreator, and DoubleValuesCreator)?  &lt;/p&gt;</comment>
                    <comment id="12988491" author="ryantxu" created="Sat, 29 Jan 2011 18:31:40 +0000"  >&lt;p&gt;This was fixed a while ago &amp;#8211; i think it fixes all concerns...&lt;/p&gt;

&lt;p&gt;Does this mean we should now deprecate:&lt;br/&gt;
 org.apache.solr.schema.Sortable*&lt;br/&gt;
?&lt;/p&gt;

</comment>
                    <comment id="12988492" author="yseeley@gmail.com" created="Sat, 29 Jan 2011 18:48:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does this mean we should now deprecate: org.apache.solr.schema.Sortable*&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure - I already removed references to those classes from the example schema.&lt;/p&gt;</comment>
                    <comment id="12988496" author="ryantxu" created="Sat, 29 Jan 2011 19:44:31 +0000"  >&lt;p&gt;in r1065093, i deprecated the sortable* fields and noted they will be removed in 5.x (seems so far away!)&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12519669">LUCENE-3390</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12474983">LUCENE-2665</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12475117">SOLR-2134</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12457373" name="LUCENE-2671-caches.patch" size="8853" author="ryantxu" created="Sun, 17 Oct 2010 13:34:45 +0100" />
                    <attachment id="12457347" name="LUCENE-2671-caches.patch" size="12827" author="ryantxu" created="Sat, 16 Oct 2010 19:24:01 +0100" />
                    <attachment id="12465816" name="LUCENE-2671.patch" size="11805" author="yseeley@gmail.com" created="Wed, 8 Dec 2010 17:43:44 +0000" />
                    <attachment id="12455626" name="LUCENE-2671-SortMissingLast.patch" size="35586" author="ryantxu" created="Sun, 26 Sep 2010 23:13:09 +0100" />
                    <attachment id="12457114" name="LUCENE-2671-suppress-unchecked.patch" size="4170" author="ryantxu" created="Thu, 14 Oct 2010 01:28:39 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 27 Sep 2010 00:23:57 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11170</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25021</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>