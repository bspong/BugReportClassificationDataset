<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:23:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-323/LUCENE-323.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-323] [PATCH] MultiFieldQueryParser and BooleanQuery do not provide adequate support for queries across multiple fields</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-323</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The attached test case demonstrates this problem and provides a fix:&lt;br/&gt;
  1.  Use a custom similarity to eliminate all tf and idf effects, just to &lt;br/&gt;
isolate what is being tested.&lt;br/&gt;
  2.  Create two documents doc1 and doc2, each with two fields title and &lt;br/&gt;
description.  doc1 has &quot;elephant&quot; in title and &quot;elephant&quot; in description.  &lt;br/&gt;
doc2 has &quot;elephant&quot; in title and &quot;albino&quot; in description.&lt;br/&gt;
  3.  Express query for &quot;albino elephant&quot; against both fields.&lt;br/&gt;
Problems:&lt;br/&gt;
      a.  MultiFieldQueryParser won&apos;t recognize either document as containing &lt;br/&gt;
both terms, due to the way it expands the query across fields.&lt;br/&gt;
      b.  Expressing query as &quot;title:albino description:albino title:elephant &lt;br/&gt;
description:elephant&quot; will score both documents equivalently, since each &lt;br/&gt;
matches two query terms.&lt;br/&gt;
  4.  Comparison to MaxDisjunctionQuery and my method for expanding queries &lt;br/&gt;
across fields.  Using notation that () represents a BooleanQuery and ( | ) &lt;br/&gt;
represents a MaxDisjunctionQuery, &quot;albino elephant&quot; expands to:&lt;br/&gt;
        ( (title:albino | description:albino)&lt;br/&gt;
          (title:elephant | description:elephant) )&lt;br/&gt;
This will recognize that doc2 has both terms matched while doc1 only has 1 &lt;br/&gt;
term matched, score doc2 over doc1.&lt;/p&gt;

&lt;p&gt;Refinement note:  the actual expansion for &quot;albino query&quot; that I use is:&lt;br/&gt;
        ( (title:albino | description:albino)~0.1&lt;br/&gt;
          (title:elephant | description:elephant)~0.1 )&lt;br/&gt;
This causes the score of each MaxDisjunctionQuery to be the score of highest &lt;br/&gt;
scoring MDQ subclause plus 0.1 times the sum of the scores of the other MDQ &lt;br/&gt;
subclauses.  Thus, doc1 gets some credit for also having &quot;elephant&quot; in the &lt;br/&gt;
description but only 1/10 as much as doc2 gets for covering another query term &lt;br/&gt;
in its description.  If doc3 has &quot;elephant&quot; in title and both &quot;albino&quot; &lt;br/&gt;
and &quot;elephant&quot; in the description, then with the actual refined expansion, it &lt;br/&gt;
gets the highest score of all (whereas with pure max, without the 0.1, it &lt;br/&gt;
would get the same score as doc2).&lt;/p&gt;

&lt;p&gt;In real apps, tf&apos;s and idf&apos;s also come into play of course, but can affect &lt;br/&gt;
these either way (i.e., mitigate this fundamental problem or exacerbate it).&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: Windows XP&lt;br/&gt;
Platform: PC&lt;/p&gt;</environment>
            <key id="12314473">LUCENE-323</key>
            <summary>[PATCH] MultiFieldQueryParser and BooleanQuery do not provide adequate support for queries across multiple fields</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chuck@manawiz.com">Chuck Williams</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Dec 2004 06:10:37 +0000</created>
                <updated>Fri, 3 Mar 2006 04:30:25 +0000</updated>
                    <resolved>Fri, 3 Mar 2006 04:30:25 +0000</resolved>
                            <version>1.4</version>
                                <fixVersion>1.9</fixVersion>
                                <component>core/queryparser</component>
                        <due></due>
                    <votes>4</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12322058" author="chuck@manawiz.com" created="Tue, 14 Dec 2004 06:13:24 +0000"  >&lt;p&gt;Created an attachment (id=13747)&lt;br/&gt;
Test case to demonstrate problem, and fix to fix it.&lt;/p&gt;

&lt;p&gt;Run TestQuery with Lucene on classpath.  All test output to System.out.&lt;br/&gt;
MaxDisjunctionQuery is ready for use (alhthough provides no QueryParser&lt;br/&gt;
integration).  DistributedMultiFieldQueryParser is not complete as it contains&lt;br/&gt;
only the functionality I&apos;ve needed.&lt;/p&gt;</comment>
                    <comment id="12322059" author="daniel.naber@t-online.de" created="Tue, 14 Dec 2004 07:31:00 +0000"  >&lt;p&gt;Unfortunately for this to become part of Lucene the dependencies to Java 1.5 &lt;br/&gt;
will need to be removed I think. Anyway, I finally understand the problem now. &lt;br/&gt;
The reason that nobody complained so far might be that people use mostly AND &lt;br/&gt;
queries today (and for cases where AND queries don&apos;t make sense, e.g. synonym &lt;br/&gt;
expansion, the current scoring implementation is okay I think). &lt;/p&gt;</comment>
                    <comment id="12322060" author="chuck@manawiz.com" created="Tue, 14 Dec 2004 07:51:24 +0000"  >&lt;p&gt;Oops, forgot I use Java 1.5 and forgot I had improved this class by taking&lt;br/&gt;
advatnage of it.  I don&apos;t believe the original version of MaxDisjunctionQuery&lt;br/&gt;
that I sent in email sometime ago had this issue, but it seems moot nonetheless&lt;br/&gt;
as Paul Elschot&apos;s DisjunctionQuery is going into Lucene and can be used to get&lt;br/&gt;
the same effect.  This can be done easily if it is factored such that&lt;br/&gt;
DisjunctionQuery provides a general mechanism for subclasses to initialize&lt;br/&gt;
state, update state, and produce the final score as it combines the subscorers,&lt;br/&gt;
while DisjunctionSumQuery overrides this to implement an optimized version that&lt;br/&gt;
doesn&apos;t require the method calls.&lt;/p&gt;

&lt;p&gt;So my recommendation, would be to factor DisjunctionQuery to make overriding for&lt;br/&gt;
different combining operators easy and to include a version of&lt;br/&gt;
DisjunctionMaxQuery that uses this to implement the MaxDisjunctionQuery scoring&lt;br/&gt;
semantics (i.e., combining operator = max plus constant times sum of other&lt;br/&gt;
terms).  I&apos;d be happy to write that version of DisjunctionMaxQuery once&lt;br/&gt;
DisjunctionQuery comes out in a released version of Lucene if it&apos;s not done for&lt;br/&gt;
the release.&lt;/p&gt;</comment>
                    <comment id="12322061" author="chuck@manawiz.com" created="Mon, 20 Dec 2004 14:57:41 +0000"  >&lt;p&gt;(From update of attachment 13747)&lt;br/&gt;
About to upload a new version that fixes a bug.&lt;/p&gt;</comment>
                    <comment id="12322062" author="chuck@manawiz.com" created="Mon, 20 Dec 2004 15:02:55 +0000"  >&lt;p&gt;Created an attachment (id=13791)&lt;br/&gt;
TestRanking, with MaxDisjunctionQuery and DistributingMultiFieldQueryParser&lt;/p&gt;

&lt;p&gt;New version of attachment that fixes a bug in MaxDisjunctionScorer.skipTo()&lt;br/&gt;
(didn&apos;t want to leave a buggy version posted here).  MaxDisjunctionQuery&lt;br/&gt;
requires Java 1.5, although it would be easy to elimiante the dependencies.&lt;/p&gt;</comment>
                    <comment id="12322063" author="miles@runtime-collective.com" created="Tue, 4 Jan 2005 20:22:42 +0000"  >&lt;p&gt;Created an attachment (id=13883)&lt;br/&gt;
Previous attachment ported to Java 1.4&lt;/p&gt;

&lt;p&gt;I&apos;ve modified MaxDisjunctionQuery and MaxDisjunctionScorer so they compile&lt;br/&gt;
against Java 1.4.&lt;/p&gt;</comment>
                    <comment id="12322064" author="chuck@manawiz.com" created="Sat, 29 Jan 2005 06:14:17 +0000"  >&lt;p&gt;Created an attachment (id=14131)&lt;br/&gt;
Initial Similarity for use with Wikipedia benchmark relevance test&lt;/p&gt;

&lt;p&gt;This is the untuned Similarity to initially try on the Wikipedia relevanc&lt;br/&gt;
benchmark.  It assumes there are two fields called &quot;title&quot; and &quot;body&quot; (actually&lt;br/&gt;
own &quot;body&quot; is referenced).  It is designed for use with&lt;br/&gt;
DistributingMultiFieldQueryParser using these initial settings:&lt;/p&gt;

&lt;p&gt;  private static final String[] DEFAULT_FIELDS = &lt;/p&gt;
{&quot;title&quot;, &quot;body&quot;}
&lt;p&gt;;&lt;br/&gt;
  private static final float[] DEFAULT_BOOSTS = &lt;/p&gt;
{3.0f, 1.0f}
&lt;p&gt;;&lt;/p&gt;

&lt;p&gt;DEFAULT_BOOSTS may need tuning as well.&lt;/p&gt;</comment>
                    <comment id="12322065" author="chuck@manawiz.com" created="Sat, 29 Jan 2005 08:04:54 +0000"  >&lt;p&gt;Created an attachment (id=14132)&lt;br/&gt;
Revised WikipediaSimilarity for Java 1.4&lt;/p&gt;

&lt;p&gt;WikipediaSimilarity revised to not use Math.log10 since it isn&apos;t in Java 1.4&lt;br/&gt;
platform.  Also generalized to make the log base a tunable parameter.&lt;/p&gt;</comment>
                    <comment id="12322066" author="chuck@manawiz.com" created="Sun, 30 Jan 2005 10:44:34 +0000"  >&lt;p&gt;Created an attachment (id=14136)&lt;br/&gt;
WikipediaSimilarity for Java 1.4 refactored for interactive parameter tuning&lt;/p&gt;

&lt;p&gt;This is the same WikipediaSimilarity as the previous, but parameterized so that&lt;br/&gt;
the tf &amp;amp; idf logarithm bases can be interactively tuned if required.&lt;/p&gt;</comment>
                    <comment id="12330499" author="hossman" created="Tue, 27 Sep 2005 04:56:28 +0100"  >&lt;p&gt;2cents:&lt;/p&gt;

&lt;p&gt;Even if the DistributingMultiFieldQueryParser isn&apos;t deemd &quot;core worthy&quot; (the comments suggest it should be treated more as an example then a complete parser) I definitely think MaxDisjunctionQuery.java should be added to the core.  I&apos;ve been playing with it for a few weeks now in progromaticaly constructed queries, and I love it &amp;#8211; I can&apos;t remember how i lived with out it.&lt;/p&gt;</comment>
                    <comment id="12330532" author="manawiz" created="Tue, 27 Sep 2005 11:53:33 +0100"  >&lt;p&gt;Thanks Hoss, that&apos;s nice to hear.  I&apos;ve been out of the community for a while doing other things, but am about to start a large Lucene-based project that I hope will lead to some interesting contributions along the way.&lt;/p&gt;</comment>
                    <comment id="12331327" author="hossman" created="Wed, 5 Oct 2005 09:10:21 +0100"  >&lt;p&gt;In the interest of encouraging commitment, i&apos;ve written a UnitTest to demonstrate/prove the expected behavior of a MaxDisjunctionQuery, with and without a tiebreaker, and in combination with a BooleanQuery wrapper.&lt;/p&gt;</comment>
                    <comment id="12331330" author="hossman" created="Wed, 5 Oct 2005 09:13:40 +0100"  >&lt;p&gt;Be advised: in 1.9, Query.createWeight is declared to throw IOException (it didn&apos;t used to in 1.4) so in order for MaxDisjunctionQuery.java to compile against 1.9, the MaxDisjunctionWeight constructor and MaxDisjunctionQuery.createWeight must be declared to throw IOException as well.&lt;/p&gt;</comment>
                    <comment id="12357449" author="yseeley@gmail.com" created="Sat, 12 Nov 2005 07:41:04 +0000"  >&lt;p&gt;I&apos;d love to see MaxDisjunctionQuery committed before lucene 1.9 is final.&lt;br/&gt;
I&apos;d vote to commit the current version, as I think Chuck&apos;s recommendations would not change the MaxDisjunctionQuery public interface, correct?&lt;/p&gt;

&lt;p&gt;I assume that the DisjunctionQuery that Chuck mentions would actually be DisjunctionScorer or DisjunctionSumScorer?&lt;/p&gt;

&lt;p&gt;QueryParser support can also be handled later.&lt;/p&gt;</comment>
                    <comment id="12357611" author="paul.elschot@xs4all.nl" created="Tue, 15 Nov 2005 04:24:06 +0000"  >&lt;p&gt;There is an issue with the MaxDisjunctionScorer in the .zip attachment, I&apos;m&lt;br/&gt;
sorry I did not see this earlier when I posted on java-dev about this.&lt;/p&gt;

&lt;p&gt;The problem is that MaxDisjunctionScorer uses bubble sort to keep the subscorer&lt;br/&gt;
sorted over the documents in the next() method (line 103), and this does not scale nicely&lt;br/&gt;
when the number of subscorers increases.&lt;br/&gt;
Supposing the number of subscores that match the document is N,&lt;br/&gt;
the amount of work to be done is proportional to (N*N) per document.&lt;br/&gt;
In DisjunctionSumScorer a priority queue is used, and there the amount of work is&lt;br/&gt;
proportional to (N log(N)) per document.&lt;br/&gt;
So I would recommend to rewrite MaxDisjunctionScorer to inherit from a new common&lt;br/&gt;
super class with DisjunctionSumScorer, sharing everything except the&lt;br/&gt;
advanceAfterCurrent() method (which could be abstract in the new superclass).&lt;br/&gt;
It&apos;s possible to be more aggressive in refactoring by initializing and adapting&lt;br/&gt;
the score per index document using different methods, but this would take N&lt;br/&gt;
extra method calls per document.&lt;/p&gt;

&lt;p&gt;At the same time the name could be changed to DisjunctionMaxScorer&lt;br/&gt;
for consistency in the org.lucene.search package.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12357615" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 04:50:25 +0000"  >&lt;p&gt;Changes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;renamed MaxDisjunction* to DisjunctionMax*&lt;/li&gt;
	&lt;li&gt;added DisjunctionMaxQuery.getClauses()&lt;/li&gt;
	&lt;li&gt;fixed DisjunctionMaxQuery.hashCode()  &amp;amp; equals()&lt;/li&gt;
	&lt;li&gt;made DisjunctionMaxScorer package protected (for now at least)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12357618" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 04:59:18 +0000"  >&lt;p&gt;I&apos;d rather have something right now  that worked well for a small number clauses, even if it didn&apos;t scale to a large number of clauses.  All of my usecases consist of small numbers of clauses.&lt;/p&gt;

&lt;p&gt;Since the scorer isn&apos;t public, a rewrite can easily be dropped in later when it&apos;s done, right?&lt;/p&gt;

&lt;p&gt;For the very common two clause case, will the rewrite you have in mind be as fast as the current version?&lt;/p&gt;</comment>
                    <comment id="12357635" author="manawiz" created="Tue, 15 Nov 2005 07:55:22 +0000"  >&lt;p&gt;The code only uses bubble sort for the incremental resorting of an already-sorted list.  The initial sort is done with Arrays.sort() which is O(n*logn).  The incremental resort is O(k*n) where k is the number of clauses that match the document last generated.  Even if n is large, k will usually be small.  Theoretically this is O(n^2) because k could be as high as n, but this is extremely unlikely especially when n is large.    More likely is that k is bounded by a small constant, in which case the algorithm is O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;19&quot; width=&quot;19&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  It&apos;s like Quicksort in that regard &amp;#8211; there are outlier cases where it won&apos;t perform well, but it will perform better than most alternatives for the vast majority of cases.&lt;/p&gt;

&lt;p&gt;Resorting the whole list every time would perform worse.  The best algorithm would probably be to use the standard insert and delete operations on a heap (as in heap sort):&lt;/p&gt;

&lt;p&gt;    while top element generated last doc&lt;br/&gt;
        heap remove it&lt;br/&gt;
        generate it&lt;br/&gt;
        heap insert it&lt;/p&gt;

&lt;p&gt;This would yield total time O(k*logn), as with a PriorityQueue.&lt;/p&gt;

&lt;p&gt;I don&apos;t think this is much of an issue to worry about, but the algorithm could be revised to use the heap sort operations if others think it is important.&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12357721" author="paul.elschot@xs4all.nl" created="Wed, 16 Nov 2005 04:12:46 +0000"  >&lt;p&gt;The ScorerDocQueue.java here has a single operation for something&lt;br/&gt;
very similar to the heap-remove/generate/heap-insert:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-365&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-365&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also a test class for testing performance of disjunction scorers&lt;br/&gt;
which could be used to find out which k is big enough to warrant the use&lt;br/&gt;
of a heap (priority queue).&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12357806" author="yseeley@gmail.com" created="Thu, 17 Nov 2005 03:54:12 +0000"  >&lt;p&gt;Added Iterable to DisjunctionMaxQuery as a semi Java5 friendly way to iterate over the disjuncts.  Added ability to add all disjuncts from an Iterable (Collection, List, another DisjunctionMaxQuery, etc).&lt;/p&gt;

&lt;p&gt;I Committed DisjunctionMaxQuery/Scorer/Test since the Interface should be stable, and the implementation seems to work fine for the common cases.  I&apos;ll be happy to evaluate &amp;amp; commit performance updates when they become available.&lt;/p&gt;

&lt;p&gt;I&apos;ll leave this bug open since it contains multiple issues.&lt;/p&gt;
</comment>
                    <comment id="12358868" author="manawiz" created="Wed, 30 Nov 2005 12:43:06 +0000"  >&lt;p&gt;The attached archive contains a revised DisjunctionMaxScorer that maintains the disjunct scorers as a min heap instead of a sorted list.  This reduces the time per next() to O(k*log&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;19&quot; width=&quot;19&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) instead of O(k*n) per Paul&apos;s earlier comment.  Most of the class changed, so I included both a patch and the new class.  This is only lightly tested; the junit test passes, along with the entire Lucene test suite.  I&apos;m not working on the project anymore that led to the original class and so have not tested it on that.  I&apos;m working on a new project that will use this and so it will get thoroughly tested there, but am not yet to an appropriate point.  I thought it was best to post the patch now as I believe it is correct and the unit test does pass.  Perhaps others would like to try it out.  E.g., it would be interesting to run the performance test that Paul mentions.&lt;/p&gt;

&lt;p&gt;Also, I found and fixed another bug while updating the class.  In the current committed version, there is a problem if skipTo() exhausts all the scorers.  It did not set more to false, and so a subsequent call to next() would attempt to access the non-existent first scorer.&lt;/p&gt;

&lt;p&gt;It would be nice to get some form of DistributingMultiFieldQueryParser in so that this is easy to use.&lt;/p&gt;

&lt;p&gt;Thanks to Yonik for committing this functionality!&lt;/p&gt;

&lt;p&gt;Chuck&lt;/p&gt;</comment>
                    <comment id="12360275" author="yseeley@gmail.com" created="Tue, 13 Dec 2005 11:20:27 +0000"  >&lt;p&gt;Thanks for the changes Chuck!&lt;/p&gt;

&lt;p&gt;Your patch was backwards, BTW &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I haven&apos;t had a chance to run any benchmarks, but I committed this because it also fixes a bug.&lt;br/&gt;
Since it also looks like the uses of /2 and *2 were all unsigned, I replaced them with shifts.  The multiply doesn&apos;t matter much, but IDIV is horribly slow (between 20 and 80 cycles, depending on the arch and operands).  Not that I thought it was a bottleneck, but I have problems avoiding that &quot;root of all evil&quot;, premature optimization &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12361003" author="otis" created="Wed, 21 Dec 2005 09:30:19 +0000"  >&lt;p&gt;Yonik - you committed this?  The case is still showing as open, so you may want to close it if you&apos;re done with it.&lt;/p&gt;</comment>
                    <comment id="12361012" author="yseeley@gmail.com" created="Wed, 21 Dec 2005 10:44:40 +0000"  >&lt;p&gt;&amp;gt; Yonik - you committed this? The case is still showing as open, so you may want to close it if you&apos;re done with it. &lt;/p&gt;

&lt;p&gt;This bug also contains a different Similarity implementation, as well as a DistributingMultiFieldQueryParser.  I only committed the DisjunctionMaxQuery part of it  and that&apos;s why I left it open.&lt;/p&gt;</comment>
                    <comment id="12361018" author="manawiz" created="Wed, 21 Dec 2005 13:57:28 +0000"  >&lt;p&gt;FYI, I&apos;ve recently noticed the new implementation of MultiFieldQueryParser (new to me since I was out of touch for about 6 months or so).  This now does the distribution, so I&apos;m no longer of the opinion that DistributingMultiFieldQueryParser should be committed.  A better approach would be to generalize MultiFieldQueryParser to be able use MaxDisjunctionQuery as its container instead of BooleanQuery in the appropriate places.  FYI, I&apos;ll look at this soon and will submit a revised patch unless there is some reason the details don&apos;t sort out.  Even it that case, the same approach used in MultiFieldQueryParser of specializing certain methods of QueryParser could be used for DistributingMultiFieldQueryParser, rather than the post parsing traversal/transformation it currently does.&lt;/p&gt;</comment>
                    <comment id="12365858" author="hossman" created="Fri, 10 Feb 2006 17:40:44 +0000"  >&lt;p&gt;The WIkipediaSimilarity seems to only have been included as an example for the purposes of comparison testing, not as an item to be commited.&lt;/p&gt;

&lt;p&gt;Given Chuck&apos;s comment on 21/Dec/05 I&apos;m of the opinion this issue should be closed.&lt;/p&gt;</comment>
                    <comment id="12368575" author="yseeley@gmail.com" created="Fri, 3 Mar 2006 04:30:25 +0000"  >&lt;p&gt;OK, closing this bug.&lt;br/&gt;
We can open separate bugs for any alternate Similarity, or any query parser enhancements.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312458" name="ASF.LICENSE.NOT.GRANTED--TestRanking.zip" size="10665" author="miles@runtime-collective.com" created="Tue, 4 Jan 2005 20:22:42 +0000" />
                    <attachment id="12312457" name="ASF.LICENSE.NOT.GRANTED--TestRanking.zip" size="10221" author="chuck@manawiz.com" created="Mon, 20 Dec 2004 15:02:55 +0000" />
                    <attachment id="12312456" name="ASF.LICENSE.NOT.GRANTED--TestRanking.zip" size="10199" author="chuck@manawiz.com" created="Tue, 14 Dec 2004 06:13:24 +0000" />
                    <attachment id="12312461" name="ASF.LICENSE.NOT.GRANTED--WikipediaSimilarity.java" size="2327" author="chuck@manawiz.com" created="Sun, 30 Jan 2005 10:44:34 +0000" />
                    <attachment id="12312460" name="ASF.LICENSE.NOT.GRANTED--WikipediaSimilarity.java" size="2333" author="chuck@manawiz.com" created="Sat, 29 Jan 2005 08:04:54 +0000" />
                    <attachment id="12312459" name="ASF.LICENSE.NOT.GRANTED--WikipediaSimilarity.java" size="1933" author="chuck@manawiz.com" created="Sat, 29 Jan 2005 06:14:17 +0000" />
                    <attachment id="12320681" name="DisjunctionMaxQuery.java" size="10496" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 04:50:25 +0000" />
                    <attachment id="12320682" name="DisjunctionMaxScorer.java" size="7040" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 04:50:25 +0000" />
                    <attachment id="12321036" name="dms.tar.gz" size="5172" author="manawiz" created="Wed, 30 Nov 2005 12:43:06 +0000" />
                    <attachment id="12320683" name="TestDisjunctionMaxQuery.java" size="14186" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 04:50:25 +0000" />
                    <attachment id="12314731" name="TestMaxDisjunctionQuery.java" size="14649" author="hossman" created="Wed, 5 Oct 2005 09:10:21 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>32674</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 14 Dec 2004 07:31:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13426</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27408</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>