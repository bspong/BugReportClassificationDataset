<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:19:19 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2541/LUCENE-2541.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2541] NumericRangeQuery errors with endpoints near long min and max values</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2541</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This problem first reported in Solr:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lucene.472066.n3.nabble.com/range-query-on-TrieLongField-strange-result-tt970974.html#a970974&quot; class=&quot;external-link&quot;&gt;http://lucene.472066.n3.nabble.com/range-query-on-TrieLongField-strange-result-tt970974.html#a970974&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12469440">LUCENE-2541</key>
            <summary>NumericRangeQuery errors with endpoints near long min and max values</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="koji">Koji Sekiguchi</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Jul 2010 12:18:04 +0100</created>
                <updated>Wed, 1 Dec 2010 14:49:56 +0000</updated>
                    <resolved>Sat, 17 Jul 2010 18:21:45 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9.4</fixVersion>
                <fixVersion>3.0.3</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12889133" author="koji" created="Fri, 16 Jul 2010 12:20:11 +0100"  >&lt;p&gt;I attached the test case. I expect totalHits is 1, but it is 3.&lt;/p&gt;</comment>
                    <comment id="12889163" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 14:10:35 +0100"  >&lt;p&gt;Ouch. I just tried Solr 1.4.1, and this shows a bug there too... so this bug would seem to go back to the 2.9 line&lt;/p&gt;</comment>
                    <comment id="12889182" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 15:08:33 +0100"  >&lt;p&gt;The bug is due to an overflow in splitRange.&lt;br/&gt;
This patch seems to fix the issue (it would happen with very small or very large numbers).&lt;/p&gt;</comment>
                    <comment id="12889258" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 19:23:11 +0100"  >&lt;p&gt;It&apos;s difficult to nail down exactly when things fail (in order to describe it in CHANGES.txt) since overflow can occur on the last shift, but the code stops on the last shift regardless (the &quot;shift+precisionStep&amp;gt;=valSize&quot; test). So a lower bound of 1 with an upper bound of MAX_VALUE will overflow but still work, but a lower bound greater than MAX_VALUE-(1L&amp;lt;&amp;lt;60)+2 will fail for example.&lt;/p&gt;</comment>
                    <comment id="12889259" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 19:23:50 +0100"  >&lt;p&gt;I&apos;m currently working on putting together a random test to catch this.&lt;/p&gt;</comment>
                    <comment id="12889289" author="thetaphi" created="Fri, 16 Jul 2010 20:48:34 +0100"  >&lt;p&gt;When I am awake from my Tokyo trip, I will take care... Give me a few hours.&lt;/p&gt;</comment>
                    <comment id="12889292" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 20:55:56 +0100"  >&lt;p&gt;OK, here&apos;s an updated patch with random tests that consistently fail w/o checking for both underflow and overflow.&lt;/p&gt;</comment>
                    <comment id="12889305" author="thetaphi" created="Fri, 16 Jul 2010 21:27:12 +0100"  >&lt;p&gt;Yonik: there is a Test framework in TestNumericUtils, that asserts the correctness of ranges. It just tests no random ranges with large/low ranges. I will update the patch to use the framework.&lt;/p&gt;

&lt;p&gt;Else your test should be in TestNumericRangeQuery64&lt;/p&gt;</comment>
                    <comment id="12889314" author="thetaphi" created="Fri, 16 Jul 2010 21:42:49 +0100"  >&lt;p&gt;The explanation (for changes):&lt;br/&gt;
The bug happens when the range covers abs(bounds)&amp;gt;2^31 and both bounds are close together in the same range bracket (as Mike calls it). The problem is, as yonik corrected, the exit condition, because the &amp;lt;-comparision is invalid for all these numbers, because their signed longs are compares signed not unsigned.&lt;/p&gt;

&lt;p&gt;Please let me also confirm that the solution is correct and embed the test in my splitRange tests in TestNumericUtils. The bug is not inside NRQ, its the underlying bit magic, so it should be added to TestNumericUtils.&lt;/p&gt;</comment>
                    <comment id="12889337" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 22:26:49 +0100"  >&lt;blockquote&gt;&lt;p&gt;The bug happens when the range covers abs(bounds)&amp;gt;2^31 and both bounds are close together in the same range bracket (as Mike calls it). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you mean 2^63 (we&apos;re talking longs here)?&lt;/p&gt;

&lt;p&gt;Anyway, it&apos;s much more complex than that and depends on the precision step also.  Numbers less than 2^63 (and with a distance between them less than 2^63) can still cause failures.&lt;/p&gt;</comment>
                    <comment id="12889341" author="thetaphi" created="Fri, 16 Jul 2010 22:33:50 +0100"  >&lt;p&gt;Here my solution (its yours), but different test. The tests in NumericRangeQuery also verify that the range is really covered completely, so I tend to use these tests.&lt;/p&gt;

&lt;p&gt;I just tried some values, we have to add randomness and other precsteps. Its just a start before going to sleep - will extend tests tomorrow, to test different precSteps.&lt;/p&gt;

&lt;p&gt;Yonik: The bug appears with 2^63 and, yes, it depends on precStep. What I meant is, that the outer bounds must be in the &quot;bracket&quot; that covers the 2^63 limit. So with larger precision steps, also smaller values overflow (but only for longs, ints are safe, as they internally also use longs).&lt;/p&gt;</comment>
                    <comment id="12889355" author="thetaphi" created="Fri, 16 Jul 2010 23:05:46 +0100"  >&lt;p&gt;After going to sleep I found out the following (in my dreams...):&lt;/p&gt;

&lt;p&gt;Your patch fixes the &lt;b&gt;bug&lt;/b&gt; but it breaks NRQ for such bounds. Whenever the &quot;+/- diff&quot; operation overflows the long, it stops creating new sub ranges. This leads to the fact that NRQ will enumerate &lt;b&gt;all&lt;/b&gt; terms and not use lower precisions! So as soon as the min or max bound is near +/- MAX_VALUE, the NRQ behaves like TRQ - bummer.&lt;/p&gt;

&lt;p&gt;The easy solution would be to use BigIntegers with 65 bits &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Maybe thats the easiest solution to correctly calculate this crazy stuff.&lt;/p&gt;</comment>
                    <comment id="12889364" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 23:22:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;our patch fixes the bug but it breaks NRQ for such bounds. Whenever the &quot;+/- diff&quot; operation overflows the long, it stops creating new sub ranges.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmmm, I had the same fear earlier, but then I discounted it.&lt;br/&gt;
If nextMinBound wraps, isn&apos;t it the case that if we did use BigIntegers that nextMinBound would be greater than nextMaxBound anyway (and hence the &quot;nextMinBound&amp;gt;nextMaxBound&quot; clause would still stop creating subranges)?&lt;/p&gt;</comment>
                    <comment id="12889378" author="thetaphi" created="Fri, 16 Jul 2010 23:49:34 +0100"  >&lt;p&gt;Hi Yonik,&lt;/p&gt;

&lt;p&gt;here the biginteger variant that works exactly as the old long-based variant (without your extra checks). This is my favourite solution as it never overflows and we can maybe extend the whole NumericRange to BigInteger &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; To reduce object creation, it uses a precalculated (1&amp;lt;&amp;lt;shift) array. I had to change the logic a little bit as it was broken with precStep=Integer.MAX_VALUE (OOME).&lt;/p&gt;

&lt;p&gt;The tests pass, I did not test your additional test, but I think it should too.&lt;/p&gt;

&lt;p&gt;I will test some range splits tomorrow on the solution you found but as far as i see without trying out, it seem to not work.&lt;/p&gt;</comment>
                    <comment id="12889384" author="thetaphi" created="Sat, 17 Jul 2010 00:00:24 +0100"  >&lt;p&gt;Missed one shift...&lt;/p&gt;</comment>
                    <comment id="12889407" author="yseeley@gmail.com" created="Sat, 17 Jul 2010 00:34:08 +0100"  >&lt;p&gt;Uwe I &amp;amp; discussed some on IRC, but for others following along, I believe the original patch (checking for overflow) will generate the same ranges as BigIneger use would.&lt;/p&gt;

&lt;p&gt;Here&apos;s the logic for the overflow case: nextMaxBound always either stays the same or decreases.&lt;br/&gt;
If nextMinBound does overflow a long, then if we had been using BigInts, it would be bigger than MAX_LONG, and thus the &quot;nextMinBound&amp;gt;nextMaxBound&quot; condition would be satisfied to break out of the loop.  Thus, &quot;nextMinBound&amp;gt;nextMaxBound&quot; using Bigints, is equivalent to &quot;nextMinBound&amp;gt;nextMaxBound || lowerWrapped&quot; using longs.&lt;/p&gt;

&lt;p&gt;The same logic applies to the lower bound.&lt;/p&gt;</comment>
                    <comment id="12889488" author="thetaphi" created="Sat, 17 Jul 2010 11:30:10 +0100"  >&lt;p&gt;Here again the BigDecimal patch with additional tests. When writing the tests, I verified, that also Yoniks patch works correct, although it looks more &quot;hackish&quot;. The Bigdecimal approach looks in my eyes much better, the overhead is neglectible (the range split is in no inner loop and object creation is minimized by precalculated 1&amp;lt;&amp;lt;shifts and corresponding masks. This makes the code look much more easy (and its also more easy to understand ant all - I also added more comments).&lt;/p&gt;

&lt;p&gt;I also added a test for these extreme values and also to verify that the range split works as exspected (maybe also check shift values vor each bound by also adding to list - will post updated patch later).&lt;/p&gt;

&lt;p&gt;The problem happens when the following is true:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the range contains a minimum bound that is &amp;gt; (MAX_VALUE - 1L&amp;lt;&amp;lt;precisionStep)&lt;/li&gt;
	&lt;li&gt;the range contains a maximum bound that is &amp;lt; (MIN_VALUE + 1L&amp;lt;&amp;lt;precisionStep)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This affects dates not really and also for doubles its only happening for values near +/-infinity when the lower bound is close to the +infinity or the upper bound is close to -infinity. The same for longs (as noted before).&lt;/p&gt;</comment>
                    <comment id="12889505" author="thetaphi" created="Sat, 17 Jul 2010 15:09:36 +0100"  >&lt;p&gt;Here two final variants:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;one with BigDecimals and improved range spliut logic (I like this patch more!)&lt;/li&gt;
	&lt;li&gt;one with Yoniks fix&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Both patches contain the same tests that pass. I converted Yoniks test and added to TestNumericUtils, which tests more intensive, if the spliutted range is correct: I ensures that all sub range bounds are inside the whole range and that there are no holes in the range. It also checks (important for yoniks fix) that one example range is splitted into the correct sub-ranges. I removed inverse ranges from yoniks patch, as they can never break (NRQ and also splitRange exits early if lower &amp;gt; upper). Also to enable the tests for ranges without holes, the bitset size cannot grow unlimited, so the maximum length of the range is limited to 8192*1024.&lt;/p&gt;

&lt;p&gt;I still did not use autoboxing and varargs in the TestNumericUtils, as now this patch should apply easy to 2.9 (with minor changes), so the initial merging works. After committing this to all branches, i would update 3.x and trunk to use varargs and autoboxing, which makes the test more readable.&lt;/p&gt;

&lt;p&gt;Without NumericUtils fix, the new testcases both fail.&lt;/p&gt;

&lt;p&gt;I just want to know: Which patch do you prefer? Else this is ready to commit with the cleanup work in 3.x and trunk later.&lt;/p&gt;</comment>
                    <comment id="12889507" author="yseeley@gmail.com" created="Sat, 17 Jul 2010 15:22:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;Which patch do you prefer? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Look at the size difference in code changes... it&apos;s no contest &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I also did a quick performance test of splitRange with 1M random bounds.&lt;br/&gt;
patch with longs: 250ms (and no garbage creation)&lt;br/&gt;
patch with BigInts: 11714ms (and a lot of garbage creation)&lt;/p&gt;

&lt;p&gt;BigInts was 46x slower.&lt;/p&gt;</comment>
                    <comment id="12889509" author="thetaphi" created="Sat, 17 Jul 2010 15:42:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;BigInts was 46x slower.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You convinced me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I go with your fix - its verified to work correct, thanks!&lt;/p&gt;</comment>
                    <comment id="12889514" author="thetaphi" created="Sat, 17 Jul 2010 16:41:05 +0100"  >&lt;p&gt;I will commit the long variant soon to trunk and merge 3x, then backport to 3.0 and 2.9.&lt;/p&gt;

&lt;p&gt;After that i optimize the test in trunk/3x for varargs and autoboxing, which makes it more readable.&lt;/p&gt;</comment>
                    <comment id="12889519" author="thetaphi" created="Sat, 17 Jul 2010 17:59:22 +0100"  >&lt;p&gt;Committed trunk revision: 965103&lt;br/&gt;
Committed 3.x branch revision: 965104&lt;br/&gt;
Committed 3.0 branch revision: 965105&lt;br/&gt;
Committed 2.9 branch revision: 965107&lt;/p&gt;

&lt;p&gt;Thanks Yonik! This bug was really crazy and is severe (maybe rectifies a 2.9.4 / 3.0.3).&lt;/p&gt;</comment>
                    <comment id="12889524" author="thetaphi" created="Sat, 17 Jul 2010 18:21:45 +0100"  >&lt;p&gt;Committed test improvements in trunk revision: 965110&lt;br/&gt;
Committed test improvements in branch 3x revision: 965111&lt;/p&gt;</comment>
                    <comment id="12889598" author="thetaphi" created="Sun, 18 Jul 2010 11:19:05 +0100"  >&lt;p&gt;For completeness I added the patch for 2.9 and 3.0, too. If we dont release a new bugfix version, somebody has the chance to patch his checkout!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12449785" name="LUCENE-2541-29.patch" size="17299" author="thetaphi" created="Sun, 18 Jul 2010 11:19:05 +0100" />
                    <attachment id="12449786" name="LUCENE-2541-30.patch" size="17891" author="thetaphi" created="Sun, 18 Jul 2010 11:19:05 +0100" />
                    <attachment id="12449695" name="LUCENE-2541.patch" size="6883" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 20:55:56 +0100" />
                    <attachment id="12449665" name="LUCENE-2541.patch" size="896" author="yseeley@gmail.com" created="Fri, 16 Jul 2010 15:08:33 +0100" />
                    <attachment id="12449759" name="LUCENE-2541-trunk+3x.patch" size="18256" author="thetaphi" created="Sat, 17 Jul 2010 16:42:25 +0100" />
                    <attachment id="12449756" name="LUCENE-2541-uwe-BigDecimal.patch" size="21796" author="thetaphi" created="Sat, 17 Jul 2010 15:09:35 +0100" />
                    <attachment id="12449757" name="LUCENE-2541-uwe-longs.patch" size="17508" author="thetaphi" created="Sat, 17 Jul 2010 15:09:36 +0100" />
                    <attachment id="12449727" name="LUCENE-2541-uwe.patch" size="6834" author="thetaphi" created="Sat, 17 Jul 2010 00:00:24 +0100" />
                    <attachment id="12449707" name="LUCENE-2541-uwe.patch" size="2689" author="thetaphi" created="Fri, 16 Jul 2010 22:33:50 +0100" />
                    <attachment id="12449654" name="TestNumericRangeQuery.java" size="1877" author="koji" created="Fri, 16 Jul 2010 12:20:10 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 16 Jul 2010 13:10:35 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11287</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25151</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>