<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:23:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1951/LUCENE-1951.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1951] wildcardquery rewrite improvements</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1951</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;wildcardquery has logic to rewrite to termquery if there is no wildcard character, but&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;it needs to pass along the boost if it does this&lt;/li&gt;
	&lt;li&gt;if the user asked for a &apos;constant score&apos; rewriteMethod, it should rewrite to a constant score query for consistency.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;additionally, if the query is really a prefixquery, it would be nice to rewrite to prefix query.&lt;br/&gt;
both will enumerate the same number of terms, but prefixquery has a simpler comparison function.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12437489">LUCENE-1951</key>
            <summary>wildcardquery rewrite improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 Oct 2009 11:41:33 +0100</created>
                <updated>Wed, 25 Nov 2009 16:47:51 +0000</updated>
                    <resolved>Thu, 8 Oct 2009 22:13:09 +0100</resolved>
                                            <fixVersion>3.0</fixVersion>
                                <component>core/query/scoring</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12763118" author="rcmuir" created="Wed, 7 Oct 2009 17:47:13 +0100"  >&lt;p&gt;here are some stats for rewriting wildcards that should be prefix.&lt;br/&gt;
i query on a field with about ~10M numeric terms (a unique database id), average length 10 characters or so.&lt;br/&gt;
i copied this into ramdirectory to try to rule out i/o a bit (its only 1GB index and i use 4GB heap)&lt;/p&gt;

&lt;p&gt;I look for all the ones starting with &quot;1&quot; (about 1.5 million of these). I did 3 runs, 100 queries each.&lt;br/&gt;
here are average times for each.&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Run&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;wildcardquery(&quot;1*&quot;)&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;prefixquery(&quot;1&quot;)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1181ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;973ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1179ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;966ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1079ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;963ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;So, its not a big optimization, but seems consistent, and maybe more important if avg term length is longer: in this case wildcard&apos;s comparison function might have to do even more work.&lt;/p&gt;

&lt;p&gt;I&apos;ll work on a patch to fix the boost/constant score and include a prefixquery rewrite for this case.&lt;/p&gt;</comment>
                    <comment id="12763280" author="rcmuir" created="Wed, 7 Oct 2009 22:40:08 +0100"  >&lt;p&gt;patch for these issues.&lt;br/&gt;
note: the existing TestWildCardQuery.testTermWithoutWildcard had a bad test, and needs to be fixed for bw-compat branch.&lt;/p&gt;

&lt;p&gt;it did the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Query wq = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WildcardQuery(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Term(&lt;span class=&quot;code-quote&quot;&gt;&quot;field&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;nowildcard&quot;&lt;/span&gt;));
wq = searcher.rewrite(wq);
assertTrue(wq &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; TermQuery);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this is not correct, it should only be TermQuery when rewriteMethod is SCORING_BOOLEAN_QUERY_REWRITE. and this is not the default, constant score is.&lt;/p&gt;

&lt;p&gt;easiest way to fix the old test is to setRewriteMethod(SCORING_BOOLEAN_QUERY_REWRITE), its the only time it should rewrite to TermQuery.&lt;/p&gt;</comment>
                    <comment id="12763288" author="rcmuir" created="Wed, 7 Oct 2009 23:13:13 +0100"  >&lt;p&gt;patch to the back compat branch to fix the buggy wildcard rewrite test.&lt;/p&gt;</comment>
                    <comment id="12763429" author="mikemccand" created="Thu, 8 Oct 2009 10:29:31 +0100"  >&lt;p&gt;Patch looks good, thanks Robert!  And those are good perf numbers;&lt;br/&gt;
rewriting to PrefixQuery seems a clear win.&lt;/p&gt;

&lt;p&gt;The only thing that makes me nervous here is we&apos;ve baked-in MTQ&apos;s&lt;br/&gt;
rewrite logic into WildcardQuery.rewrite.  Ie, MTQ in general accepts&lt;br/&gt;
any rewrite method, and so conceivably one could create their own&lt;br/&gt;
rewrite method and then see that it&apos;s unused in the special case where&lt;br/&gt;
WildcardQuery is a single term.&lt;/p&gt;

&lt;p&gt;And while it&apos;s true today that if the rewrite method != scoring&lt;br/&gt;
boolean query, it must be a constant scoring one, that could&lt;br/&gt;
conceivably some day change.&lt;/p&gt;

&lt;p&gt;Maybe a different approach would be to make a degenerate&lt;br/&gt;
&quot;SingleTermEnum&quot; (subclasses FilteredTermEnum) that produces only a&lt;br/&gt;
single term?  Then in getEnum we could return that, instead, so the&lt;br/&gt;
rewrite method remains intact?&lt;/p&gt;</comment>
                    <comment id="12763468" author="rcmuir" created="Thu, 8 Oct 2009 13:34:25 +0100"  >&lt;p&gt;Michael, I thought about this problem too, but didnt know what to do.&lt;/p&gt;

&lt;p&gt;I rather like the SingleTermEnum idea. I&apos;ll do it.&lt;/p&gt;</comment>
                    <comment id="12763507" author="rcmuir" created="Thu, 8 Oct 2009 15:44:54 +0100"  >&lt;p&gt;think there would be objection to making this proposed SingleTermEnum public?&lt;/p&gt;

&lt;p&gt;I would like to use it in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1606&quot; title=&quot;Automaton Query/Filter (scalable regex)&quot;&gt;&lt;del&gt;LUCENE-1606&lt;/del&gt;&lt;/a&gt; (contrib) to have consistency there as well.&lt;/p&gt;</comment>
                    <comment id="12763521" author="mikemccand" created="Thu, 8 Oct 2009 16:26:51 +0100"  >&lt;blockquote&gt;&lt;p&gt;think there would be objection to making this proposed SingleTermEnum public?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that&apos;s fine.&lt;/p&gt;</comment>
                    <comment id="12763527" author="rcmuir" created="Thu, 8 Oct 2009 16:36:25 +0100"  >&lt;p&gt;updated patch, using SingleTermEnum instead of TermQuery rewrite when there are no wildcards to preserve all the MultiTermQuery semantics.&lt;/p&gt;</comment>
                    <comment id="12763579" author="mikemccand" created="Thu, 8 Oct 2009 18:26:10 +0100"  >&lt;p&gt;Patch looks good Robert!  Thanks.  I&apos;ll commit soon.&lt;/p&gt;</comment>
                    <comment id="12763580" author="rcmuir" created="Thu, 8 Oct 2009 18:29:46 +0100"  >&lt;p&gt;Michael, cool. The bw_compat patch is still valid with these changes.&lt;/p&gt;

&lt;p&gt;I will mention one concern, just for the record (you can tell me if it is an issue).&lt;/p&gt;

&lt;p&gt;These tests test that for example, a WildcardQuery with SCORING_REWRITE rewrites to a TermQuery, which is correct, but now its a bit wierd how this happens.&lt;/p&gt;

&lt;p&gt;SingleTermEnum -&amp;gt; MultiTermQuery -&amp;gt; BooleanQuery with one term -&amp;gt; TermQuery.&lt;/p&gt;

&lt;p&gt;I couldnt think of a better way to test the correct behavior, but it is testing a bit more than just what happens in WildcardQuery...&lt;/p&gt;</comment>
                    <comment id="12763597" author="mikemccand" created="Thu, 8 Oct 2009 18:56:26 +0100"  >&lt;p&gt;That is a rather roundabout way to arrive at the TermQuery, but I think the test is fine?&lt;/p&gt;</comment>
                    <comment id="12763599" author="rcmuir" created="Thu, 8 Oct 2009 19:01:57 +0100"  >&lt;blockquote&gt;&lt;p&gt;That is a rather roundabout way to arrive at the TermQuery, but I think the test is fine? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, that was my only concern, the test. I like the SingleTermEnum otherwise, I think it will reduce maintenance.&lt;/p&gt;</comment>
                    <comment id="12763702" author="mikemccand" created="Thu, 8 Oct 2009 22:13:09 +0100"  >&lt;p&gt;Thanks Robert!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12421588" name="LUCENE-1951_bwcompatbranch.patch" size="886" author="rcmuir" created="Wed, 7 Oct 2009 23:13:13 +0100" />
                    <attachment id="12421629" name="LUCENE-1951.patch" size="8808" author="rcmuir" created="Thu, 8 Oct 2009 16:36:25 +0100" />
                    <attachment id="12421584" name="LUCENE-1951.patch" size="6433" author="rcmuir" created="Wed, 7 Oct 2009 22:40:08 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 8 Oct 2009 09:29:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11820</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25774</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>