<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:33:22 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1543/LUCENE-1543.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1543] Field specified norms in MatchAllDocumentsScorer </title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1543</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This patch allows for optionally setting a field to use for norms factoring when scoring a MatchingAllDocumentsQuery.&lt;/p&gt;

&lt;p&gt;From the test case:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;.
    RAMDirectory dir = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RAMDirectory();
    IndexWriter iw = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexWriter(dir, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StandardAnalyzer(), &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;, IndexWriter.MaxFieldLength.LIMITED);
    iw.setMaxBufferedDocs(2);  &lt;span class=&quot;code-comment&quot;&gt;// force multi-segment
&lt;/span&gt;    addDoc(&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, iw, 1f);
    addDoc(&lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, iw, 20f);
    addDoc(&lt;span class=&quot;code-quote&quot;&gt;&quot;three four&quot;&lt;/span&gt;, iw, 300f);
    iw.close();

    IndexReader ir = IndexReader.open(dir);
    IndexSearcher is = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexSearcher(ir);
    ScoreDoc[] hits;

    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; with norms scoring turned off
&lt;/span&gt;
    hits = is.search(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MatchAllDocsQuery(), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, 1000).scoreDocs;
    assertEquals(3, hits.length);
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, ir.document(hits[0].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, ir.document(hits[1].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;three four&quot;&lt;/span&gt;, ir.document(hits[2].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));

    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; with norms scoring turned on
&lt;/span&gt;
    MatchAllDocsQuery normsQuery = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MatchAllDocsQuery(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;);
    assertEquals(3, hits.length);
&lt;span class=&quot;code-comment&quot;&gt;//    is.explain(normsQuery, hits[0].doc);
&lt;/span&gt;    hits = is.search(normsQuery, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, 1000).scoreDocs;

    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;three four&quot;&lt;/span&gt;, ir.document(hits[0].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));    
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;two&quot;&lt;/span&gt;, ir.document(hits[1].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));
    assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;one&quot;&lt;/span&gt;, ir.document(hits[2].doc).get(&lt;span class=&quot;code-quote&quot;&gt;&quot;key&quot;&lt;/span&gt;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
            <key id="12415150">LUCENE-1543</key>
            <summary>Field specified norms in MatchAllDocumentsScorer </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="karl.wettin">Karl Wettin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Feb 2009 16:24:37 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:18 +0100</updated>
                    <resolved>Thu, 19 Mar 2009 14:41:17 +0000</resolved>
                            <version>2.4</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/query/scoring</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12675115" author="yseeley@gmail.com" created="Thu, 19 Feb 2009 20:13:02 +0000"  >&lt;p&gt;Couldn&apos;t you just use a TermQuery?&lt;br/&gt;
Or a BooleanQuery with a MatchAllDocsQuery and an optional TermQuery?&lt;/p&gt;</comment>
                    <comment id="12675118" author="karl.wettin" created="Thu, 19 Feb 2009 20:28:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Couldn&apos;t you just use a TermQuery? Or a BooleanQuery with a MatchAllDocsQuery and an optional TermQuery?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wouldn&apos;t that require a TermQuery that match all documents? I.e. adding a term to a field in all documents?&lt;/p&gt;

&lt;p&gt;The following stuff doesn&apos;t really fit in this issue, but still. It&apos;s rather related to column stride payloads &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1231&quot; title=&quot;Column-stride fields (aka per-document Payloads)&quot;&gt;&lt;del&gt;LUCENE-1231&lt;/del&gt;&lt;/a&gt; . I&apos;ve been considering adding a new &quot;norms&quot; field at document level for a couple of years now. 8 more bits at document level would allow for moving general document boosting to move it out the norms-boost-per-field-blob and increase the length normalization and per field boost resolution quite a bit at a low cost. &lt;/p&gt;

&lt;p&gt;(I hope that is not yet another can of worms I get to open.)&lt;/p&gt;</comment>
                    <comment id="12675570" author="mikemccand" created="Sat, 21 Feb 2009 15:47:11 +0000"  >
&lt;p&gt;It seems like this is quite similar to function queries, which also&lt;br/&gt;
match all docs but then let you to set your own score for each doc (eg&lt;br/&gt;
based on values from FieldCache).&lt;/p&gt;

&lt;p&gt;Once we create column-stride fields, and merge norms into it, then&lt;br/&gt;
presumably MatchAllDocsQuery &amp;amp; function queries would simply be the&lt;br/&gt;
same thing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;ve been considering adding a new &quot;norms&quot; field at document level for a couple of years now. 8 more bits at document level would allow for moving general document boosting to move it out the norms-boost-per-field-blob and increase the length normalization and per field boost resolution quite a bit at a low cost.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This seems interesting &amp;#8211; it would double the precision for boosting,&lt;br/&gt;
but would require the equivalent of one more field&apos;s norms enabled of&lt;br/&gt;
RAM storage (ie a byte[] of length maxDoc()).  Also, it would slow&lt;br/&gt;
down scoring to have to lookup &amp;amp; multiply in doc&apos;s contributation, and&lt;br/&gt;
the field&apos;s.  I don&apos;t have a good sense of how often the added&lt;br/&gt;
precision is helpful though.  Karl have you tested that?  EG using&lt;br/&gt;
function queries you could easily emulate &quot;per-document norms&quot;.&lt;/p&gt;</comment>
                    <comment id="12683391" author="mikemccand" created="Thu, 19 Mar 2009 09:43:07 +0000"  >&lt;p&gt;Karl, is there a reason why a function query can&apos;t be used in your situation?  It seems like it should work?&lt;/p&gt;</comment>
                    <comment id="12683423" author="karl.wettin" created="Thu, 19 Mar 2009 10:51:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Karl, is there a reason why a function query can&apos;t be used in your situation? It seems like it should work?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m sure it would. : ) &lt;/p&gt;

&lt;p&gt;I do however not understand why you think it is a more correct/nice/better/what not solution than to use this patch. This is how I reason: if the feature of norms scoring is available in all other low level queries, than it also makes sense to have it in the low level MatchAllDocumentsQuery&lt;/p&gt;</comment>
                    <comment id="12683440" author="mikemccand" created="Thu, 19 Mar 2009 11:50:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is how I reason: if the feature of norms scoring is available in all other low level queries, than it also makes sense to have it in the low level MatchAllDocumentsQuery&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I agree.  Since the index would already have norms for the field,&lt;br/&gt;
it makes sense to provide a way to tap solely those norms as the basis&lt;br/&gt;
for scoring.&lt;/p&gt;</comment>
                    <comment id="12683479" author="mikemccand" created="Thu, 19 Mar 2009 14:41:16 +0000"  >&lt;p&gt;Thanks Karl!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12400524" name="LUCENE-1543.txt" size="4741" author="karl.wettin" created="Thu, 19 Feb 2009 16:25:17 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 19 Feb 2009 20:13:02 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12211</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26186</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>