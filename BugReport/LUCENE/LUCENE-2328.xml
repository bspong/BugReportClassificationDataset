<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:30:02 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2328/LUCENE-2328.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2328] IndexWriter.synced  field accumulates data leading to a Memory Leak</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2328</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I am running into a strange OutOfMemoryError. My small test application does&lt;br/&gt;
index and delete some few files. This is repeated for 60k times. Optimization&lt;br/&gt;
is run from every 2k times a file is indexed. Index size is 50KB. I did analyze&lt;br/&gt;
the HeapDumpFile and realized that IndexWriter.synced field occupied more than&lt;br/&gt;
half of the heap. That field is a private HashSet without a getter. Its task is&lt;br/&gt;
to hold files which have been synced already.&lt;/p&gt;

&lt;p&gt;There are two calls to addAll and one call to add on synced but no remove or&lt;br/&gt;
clear throughout the lifecycle of the IndexWriter instance.&lt;/p&gt;

&lt;p&gt;According to the Eclipse Memory Analyzer synced contains 32618 entries which&lt;br/&gt;
look like file names &quot;_e065_1.del&quot; or &quot;_e067.cfs&quot;&lt;/p&gt;

&lt;p&gt;The index directory contains 10 files only.&lt;/p&gt;

&lt;p&gt;I guess synced is holding obsolete data &lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
            <key id="12459421">LUCENE-2328</key>
            <summary>IndexWriter.synced  field accumulates data leading to a Memory Leak</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="gregor.kaczor">Gregor Kaczor</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Mar 2010 20:14:30 +0000</created>
                <updated>Wed, 1 Dec 2010 14:49:53 +0000</updated>
                    <resolved>Sat, 30 Oct 2010 14:46:44 +0100</resolved>
                            <version>2.9.1</version>
                <version>2.9.2</version>
                <version>3.0</version>
                <version>3.0.1</version>
                                <fixVersion>2.9.4</fixVersion>
                <fixVersion>3.0.3</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="3600">1h</timeoriginalestimate>
                    <timeestimate seconds="3600">1h</timeestimate>
                                  <comments>
                    <comment id="12846811" author="mikemccand" created="Thu, 18 Mar 2010 09:26:22 +0000"  >&lt;p&gt;Anyone wanna cons up a patch here...?&lt;/p&gt;</comment>
                    <comment id="12846821" author="shaie" created="Thu, 18 Mar 2010 09:59:40 +0000"  >&lt;p&gt;Would that mean removing files from synced whenever &apos;deleter&apos; (which is an IndexFileDeleter) calls delete*? Are there other places to look for?&lt;/p&gt;</comment>
                    <comment id="12846825" author="mikemccand" created="Thu, 18 Mar 2010 10:16:59 +0000"  >&lt;p&gt;Yes I think that&apos;s it.&lt;/p&gt;</comment>
                    <comment id="12846835" author="earwin" created="Thu, 18 Mar 2010 10:44:36 +0000"  >&lt;p&gt;A shot in the sky (didn&apos;t delve deep into the problem, could definetly miss stuff):&lt;/p&gt;

&lt;p&gt;What about tracking &apos;syncidness&apos; from within Directory?&lt;br/&gt;
There shouldn&apos;t be more than one writer anyway (unless your locking is broken), so that&apos;s a single set of &apos;files-to-be-synced&apos; for each given moment of time. Might as well keep track of it inside the directory, and have a syncAllUnsyncedGuys() on it.&lt;/p&gt;

&lt;p&gt;This will also remove the need to transfer that list around when transferring write lock (IR hell).&lt;/p&gt;

&lt;p&gt;And all-round that sounds quite logical, as the need/method of syncing depends solely on directory. If you&apos;re working with RAMDirectory, you don&apos;t need to keep track of these files at all.&lt;br/&gt;
Probably same for some of DB impls.&lt;br/&gt;
Also some filesystems sync everything, when you ask to sync a single file, so if you&apos;re syncing a batch of them in a row, that&apos;s some overhead that you can theoretically work around with a special flag to FSDir.&lt;/p&gt;</comment>
                    <comment id="12846872" author="mikemccand" created="Thu, 18 Mar 2010 12:23:06 +0000"  >&lt;p&gt;I like this idea!&lt;/p&gt;

&lt;p&gt;But, we don&apos;t want to simply sync all new files.  When IW commits,&lt;br/&gt;
it&apos;s possibly a subset of all new files.  EG running merges (or any&lt;br/&gt;
still-open files) should not be sync&apos;d.&lt;/p&gt;

&lt;p&gt;Not necessarily all closed files should be sync&apos;d either &amp;#8211; eg any&lt;br/&gt;
files that were opened &amp;amp; closed while we were syncing (since syncing&lt;br/&gt;
can take some time) should not then be sync&apos;d.&lt;/p&gt;

&lt;p&gt;Maybe we change Dir.sync to take a Collection&amp;lt;String&amp;gt;?&lt;/p&gt;

&lt;p&gt;Then dir would be the one place that keeps track of what&apos;s already&lt;br/&gt;
been sync&apos;d and what hasn&apos;t.&lt;/p&gt;

&lt;p&gt;Or... I wonder if calling sync on a file that&apos;s already been sync&apos;d is&lt;br/&gt;
really that wasteful... I mean it&apos;s technically a no-op, so it&apos;s just&lt;br/&gt;
the overhead of a no-op system call from way up in javaland.&lt;/p&gt;</comment>
                    <comment id="12846880" author="earwin" created="Thu, 18 Mar 2010 12:41:17 +0000"  >&lt;p&gt;&amp;gt; EG running merges (or any still-open files) should not be sync&apos;d.&lt;br/&gt;
Files that are still being written should not be synced, that&apos;s kinda obvious.&lt;/p&gt;

&lt;p&gt;&amp;gt; Not necessarily all closed files should be sync&apos;d either - eg any files that were opened &amp;amp; closed while we were syncing (since syncing can take some time) should not then be sync&apos;d.&lt;br/&gt;
This one is not so obvious.&lt;br/&gt;
I assume that on calling syncEveryoneAndHisDog() you should sync all files that have been written to, and were closed, and not yet deleted.&lt;/p&gt;

&lt;p&gt;&amp;gt; Maybe we change Dir.sync to take a Collection&amp;lt;String&amp;gt;?&lt;br/&gt;
What does that alone give us over the current situation? You can call Dir.sync() repeatedly, it&apos;s all the same.&lt;/p&gt;

&lt;p&gt;&amp;gt; Or... I wonder if calling sync on a file that&apos;s already been sync&apos;d is really that wasteful... &lt;br/&gt;
It can be on these systems, that just sync down everything. I don&apos;t believe in people writing good software : }&lt;/p&gt;</comment>
                    <comment id="12846890" author="shaie" created="Thu, 18 Mar 2010 13:15:53 +0000"  >&lt;p&gt;ok so let me see if I understand this. Before Earwin suggested adding synced to Directory, the approach (as I understood it) was - whenever deleter deletes a file, remove it from synced as well.&lt;/p&gt;

&lt;p&gt;After Earwin&apos;s suggestion, which I like very much, as it moves more stuff out of IW, which could use some simplification, I initially thought that we should do this: when dir.sync is called, add that file to dir.synced. Then when dir.delete is called, remove it from there. When dir.commit is called, add all changed/synced files to the set (probably all of them). Something very straightforward and simple.&lt;/p&gt;

&lt;p&gt;However, the last two posts seem to try to complicate it ... and I don&apos;t understand why. So I&apos;d appreciate if you can explain what am I missing.&lt;/p&gt;</comment>
                    <comment id="12846899" author="earwin" created="Thu, 18 Mar 2010 13:39:25 +0000"  >&lt;p&gt;I&apos;m proposing something even more dead simple.&lt;/p&gt;

&lt;p&gt;1. We remove Directory.sync(String) completely.&lt;br/&gt;
2. Each time you call IndexOutput.close(), Dir adds this file to its internal set (if it cares about it at all).&lt;br/&gt;
3. If you call Directory.delete(), it also removes file from the set (though not strictly necessary).&lt;br/&gt;
4. When you commit at IW, it calls Directory.sync() and everything in its internal set gets synced. &lt;/p&gt;</comment>
                    <comment id="12846902" author="earwin" created="Thu, 18 Mar 2010 13:43:35 +0000"  >&lt;p&gt;Btw, initial problem stems from the fact that IW/IR keeps track of the files it &lt;b&gt;has already&lt;/b&gt; synced, instead of the files it &lt;b&gt;has not yet&lt;/b&gt; synced. Which is kinda upside down, and requires upkeep, unlike straightforward approach in which this set gets cleared anew after each commit call.&lt;/p&gt;

&lt;p&gt;I can conjure up a patch in a day or two.&lt;/p&gt;</comment>
                    <comment id="12846913" author="shaie" created="Thu, 18 Mar 2010 14:04:12 +0000"  >&lt;p&gt;How would IndexInput report back to the Directory when its close() was called? I&apos;ve checked a couple of Directories and when they openInput, they don&apos;t pass themselves to the IndexInput. I think what you say makes sense, but I don&apos;t see how this can be implemented w/ the current implementations (and w/o relying on broken Directory impls out there). Broken in the sense that they don&apos;t expect to get any notification from IndexInput.close().&lt;/p&gt;

&lt;p&gt;Other than that, I like that approach. Also, what you wrote about IW keeping track on already synced files - I guess you&apos;ll change that when it moves into Directory, so that it will track the files it hasn&apos;t synced yet?&lt;/p&gt;</comment>
                    <comment id="12846938" author="earwin" created="Thu, 18 Mar 2010 14:41:30 +0000"  >&lt;p&gt;&amp;gt; How would IndexInput report back to the Directory when its close() was called? I&apos;ve checked a couple of Directories and when they openInput, they don&apos;t pass themselves to the IndexInput.&lt;br/&gt;
Hmm. I guess I have to change IndexOutput impls?&lt;/p&gt;

&lt;p&gt;&amp;gt; so that it will track the files it hasn&apos;t synced yet?&lt;br/&gt;
Sure&lt;/p&gt;</comment>
                    <comment id="12846944" author="mikemccand" created="Thu, 18 Mar 2010 14:57:22 +0000"  >&lt;p&gt;Keeping track of not-yet-sync&apos;d files instead of sync&apos;d files is&lt;br/&gt;
better, but it still requires upkeep (ie when file is deleted you have&lt;br/&gt;
to remove it) because files can be opened, written to, closed, deleted&lt;br/&gt;
without ever being sync&apos;d.&lt;/p&gt;

&lt;p&gt;And I like moving this tracking under Dir &amp;#8211; that&apos;s where it belongs.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I assume that on calling syncEveryoneAndHisDog() you should sync all files that have been written to, and were closed, and not yet deleted.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This will over-sync in some situations.&lt;/p&gt;

&lt;p&gt;Ie, causing commit to take longer than it should.&lt;/p&gt;

&lt;p&gt;EG say a merge has finished with the first set of files (say _X.fdx/t,&lt;br/&gt;
since it merges fields first) but is still working on postings, when&lt;br/&gt;
the user calls commit.  We should not then sync _X.fdx/t because they&lt;br/&gt;
are unreferenced by the segments_N we are committing.&lt;/p&gt;

&lt;p&gt;Or the merge has finished (so _X.* has been created) but is now off&lt;br/&gt;
building the _X.cfs file &amp;#8211; we don&apos;t want to sync _X.*, only _X.cfs&lt;br/&gt;
when its done.&lt;/p&gt;

&lt;p&gt;Another example: we don&apos;t do this today, but, addIndexes should really&lt;br/&gt;
run fully outside of IW&apos;s normal segments file, merging away, and then&lt;br/&gt;
only on final success alter IW&apos;s segmentInfos.  If we switch to that,&lt;br/&gt;
we don&apos;t want to sync all the files that addIndexes is temporarily&lt;br/&gt;
writing...&lt;/p&gt;

&lt;p&gt;The knowledge of which files &quot;make up&quot; the transaction lives above&lt;br/&gt;
Directory... so I think we should retain the per-file control.&lt;/p&gt;

&lt;p&gt;I proposed the bulk-sync API so that Dir impls could choose to do a&lt;br/&gt;
system-wide sync.  Or, more generally, any Dir which can be more&lt;br/&gt;
efficient if it knows the precise set of files that must be sync&apos;d&lt;br/&gt;
right now.&lt;/p&gt;

&lt;p&gt;If we stick with file-by-file API, doing a system-wide sync is&lt;br/&gt;
somewhat trickier... because you can&apos;t assume from one call to the&lt;br/&gt;
next that nothing had changed.&lt;/p&gt;

&lt;p&gt;Also, bulk sync better matches the semantics IW/IR require: these&lt;br/&gt;
consumers don&apos;t care the order in which these files are sync&apos;d.  They&lt;br/&gt;
just care that the requested set is sync&apos;d.  So it exposes a degree of&lt;br/&gt;
freedom to the Dir impls that&apos;s otherwise hidden today.&lt;/p&gt;</comment>
                    <comment id="12846956" author="earwin" created="Thu, 18 Mar 2010 15:23:34 +0000"  >&lt;p&gt;&amp;gt; Keeping track of not-yet-sync&apos;d files instead of sync&apos;d files is better, but it still requires upkeep (ie when file is deleted you have to remove it) because files can be opened, written to, closed, deleted without ever being sync&apos;d.&lt;br/&gt;
You can just skip this and handle FileNotFound exception when syncing. Have to handle it anyway, no guarantees some file won&apos;t be snatched from under your nose.&lt;/p&gt;

&lt;p&gt;&amp;gt; This will over-sync in some situations.&lt;br/&gt;
Don&apos;t feel this is a serious problem. If you over-sync (in fact sync some files a little bit earlier than strictly required), in a few seconds you will under-sync, so total time is still the same.&lt;/p&gt;

&lt;p&gt;But I feel you&apos;re somewhat missing the point. System-wide sync is not the original aim, it&apos;s just a possible byproduct of what is the original aim - to move sync tracking code from IW to Directory. And I don&apos;t see at all how adding batch-syncs achieves this.&lt;br/&gt;
If you&apos;re calling sync(Collection&amp;lt;String&amp;gt;), damn, you should keep that collection somewhere &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and it is supposed to be inside!&lt;/p&gt;</comment>
                    <comment id="12846960" author="mikemccand" created="Thu, 18 Mar 2010 15:47:32 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Keeping track of not-yet-sync&apos;d files instead of sync&apos;d files is better, but it still requires upkeep (ie when file is deleted you have to remove it) because files can be opened, written to, closed, deleted without ever being sync&apos;d.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can just skip this and handle FileNotFound exception when syncing. Have to handle it anyway, no guarantees some file won&apos;t be snatched from under your nose.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IW &amp;amp; IR do in fact guarantee they will never ask for a deleted file to&lt;br/&gt;
be sync&apos;d.  If they ever do that we have more serious problems &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This will over-sync in some situations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Don&apos;t feel this is a serious problem. If you over-sync (in fact sync some files a little bit earlier than strictly required), in a few seconds you will under-sync, so total time is still the same.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this is important &amp;#8211; commit is already slow enough &amp;#8211; why make&lt;br/&gt;
it slower?&lt;/p&gt;

&lt;p&gt;Further, the extra files you sync&apos;d may never have needed to be sync&apos;d&lt;br/&gt;
(they will be merged away).  My examples above include such cases.&lt;/p&gt;

&lt;p&gt;Turning this around... what&apos;s so bad about keeping the sync per file?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;System-wide sync is not the original aim, it&apos;s just a possible byproduct of what is the original aim&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know this is not the aim of this issue, rather just a nice&lt;br/&gt;
by-product if we switch to a &quot;global sync&quot; method.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;to move sync tracking code from IW to Directory.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right this is a great step forward, as long as long as we don&apos;t slow&lt;br/&gt;
commit by dumbing down the API &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And I don&apos;t see at all how adding batch-syncs achieves this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re right: this doesn&apos;t achieve / is not required for &quot;moving&lt;br/&gt;
sync&apos;d file tracking&quot; down to Dir.  It&apos;s orthogonal, but, is another&lt;br/&gt;
way that we could allow Dir impls to do global sync.&lt;/p&gt;

&lt;p&gt;I&apos;m proposing this as a different change, to make the API better match&lt;br/&gt;
the needs of its consumers.  In fact, really the OS ought to allow for&lt;br/&gt;
this as well (but I know of none that do) since it&apos;d give the IO&lt;br/&gt;
scheduler more freedom on which bytes need to be moved to disk.&lt;/p&gt;

&lt;p&gt;We can open this one as a separate issue...&lt;/p&gt;</comment>
                    <comment id="12846991" author="earwin" created="Thu, 18 Mar 2010 16:47:08 +0000"  >&lt;p&gt;Okay, summing up.&lt;/p&gt;

&lt;p&gt;1. Directory gets a new method - sync(Collection&amp;lt;String&amp;gt;), it will become abstract in 4.0, but now by default delegates to current sync(String), which is deprecated.&lt;br/&gt;
2. FSDirectory tracks newly written, closed and not deleted files, by changing FSD.IndexOutput accordingly.&lt;br/&gt;
3. sync() semantics changes from &quot;sync this now&quot; to &quot;sync this now, if you think it&apos;s needed&quot;. Noop sync() impls like RAMDir continue to be noop, FSDir syncs only those files that exist in its tracking set and ignores all others.&lt;br/&gt;
4. IW/IR stop tracking synced files completely (lots of garbage code gone from IW), and instead call sync(Collection) on commit with a list of all files that constitute said commit.&lt;/p&gt;

&lt;p&gt;These steps preserve back-compatibility (Except for cases of custom Directory impls in which calling sync on the same file sequentially is costly. They will suffer performance degradation), ensure that for each commit only strictly requested subset of files is synced (thing Mike insisted on), and will completely remove sync-tracking code from IW and IR.&lt;/p&gt;

&lt;p&gt;5. We open another issue to experiment with batch syncing and various filesystems. Some relevant fun data: &lt;a href=&quot;http://www.humboldt.co.uk/2009/03/fsync-across-platforms.html&quot; class=&quot;external-link&quot;&gt;http://www.humboldt.co.uk/2009/03/fsync-across-platforms.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12846996" author="shaie" created="Thu, 18 Mar 2010 16:57:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;.... changing FSD.IndexOutput accordingly&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This worries me a bit. If only FSD.IndexOutput will do that, I&apos;m afraid other Directory implementations won&apos;t realize that they should do so as well (NIO?). I&apos;d prefer if IndexOutput in its contract is supposed to callback on Directory upon close ... not sure - maybe just put some heave documentation around createOutput? If we could enforce this API-wise, and let the Dirs that don&apos;t care simply ignore, then it&apos;d be better. It&apos;ll also allow for someone to extend FSD.createOutput, return his own IndexOutput and not worry (or do, but knowingly) about calling back to Dir.&lt;/p&gt;

&lt;p&gt;Other than that - this looks great.&lt;/p&gt;</comment>
                    <comment id="12847010" author="earwin" created="Thu, 18 Mar 2010 17:22:54 +0000"  >&lt;p&gt;Every Directory implementation decides how to handle sync() calls on its own. The fact that FSDir (and descendants) do this performance optimization is their implementation details.&lt;br/&gt;
I don&apos;t want to bind this somehow into the base class. But, I will note in javadocs to sync() that clients may pass the same file over and over again, so you might want to optimize for this.&lt;/p&gt;</comment>
                    <comment id="12847015" author="mikemccand" created="Thu, 18 Mar 2010 17:43:22 +0000"  >&lt;p&gt;Must the Dir insist the file is closed in order to sync it?&lt;/p&gt;

&lt;p&gt;Why not enroll newly created files in the &quot;to be sync&apos;d&quot; set?&lt;/p&gt;</comment>
                    <comment id="12847036" author="shaie" created="Thu, 18 Mar 2010 18:09:49 +0000"  >&lt;p&gt;Yeah I guess I wasn&apos;t clear enough. So suppose someone sub-classes FSDir and overrides createOutput. How should he know his IndexOutput should call dir.sync()? How should he know he needs to pass the Dir to his IndexOutput? So I suggested to either mention it in the Javadocs, or somehow make all of FSDir&apos;s outputs know about that, API-wise ...&lt;/p&gt;

&lt;p&gt;So today a file is closed only upon commit &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, and it&apos;s then that it&apos;s synced? If so, why would you want to sync a file that is still open? I guess it cannot harm, but what&apos;s the use case?&lt;/p&gt;</comment>
                    <comment id="12847050" author="mikemccand" created="Thu, 18 Mar 2010 18:25:25 +0000"  >&lt;p&gt;In the current proposal, IndexOutput won&apos;t call dir.sync.  All it will do is notify the dir when it was closed so the dir will record that filename as &quot;eligible for commit&quot;.&lt;/p&gt;

&lt;p&gt;Lucene today never syncs a file until after it&apos;s closed, but, conceivably some day it could.  Or others who use the Dir API to write their own files could.&lt;/p&gt;

&lt;p&gt;At the OS level this is perfectly fine (in fact you have to pass an open fd to fsync).  It seems presumptuous of the directory to silently ignore a call to sync just because the file hadn&apos;t been closed yet...&lt;/p&gt;</comment>
                    <comment id="12847053" author="earwin" created="Thu, 18 Mar 2010 18:29:24 +0000"  >&lt;p&gt;&amp;gt; Must the Dir insist the file is closed in order to sync it?&lt;br/&gt;
Well, no, this can be relaxed.&lt;br/&gt;
Because default Directory clients - IW+IR will never call sync() on a file they didn&apos;t close yet.&lt;br/&gt;
Also this client behaviour is guaranteed with current implementation - if someone calls current sync() on an open file, it will fail on &apos;new RandomAccessFile&apos;?&lt;/p&gt;

&lt;p&gt;Shai:&lt;br/&gt;
Currently, if someone subclasses FSDir, he already always needs to call initOutput(name) before creating IndexOutput. This class is obviously not designed for easy extension &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Plus, someone might extend FSDir to change syncing behaviour, so we should allow this and not force people?&lt;/p&gt;

&lt;p&gt;My hands are itching to do minor cleanups on classes touched by the patch, like moving fields to the beginning of the class, so you damn know what it contains from the first glance, declaring most of said fields final (will help with &quot;Sync on non-final field&quot; warnings too), replacing HEX_DIGITS voodoo with Integer.toHexString, moving createIndexOutput to FSDir, as it is a copypasted in all three child classes and has ugly &quot;always call initOutput&quot; comment.&lt;br/&gt;
Is that acceptable or should be rolled into another issue?&lt;/p&gt;</comment>
                    <comment id="12847063" author="mikemccand" created="Thu, 18 Mar 2010 18:45:49 +0000"  >&lt;p&gt;Yes please clean as you go Earwin &amp;#8211; those sound great.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Must the Dir insist the file is closed in order to sync it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, no, this can be relaxed.&lt;br/&gt;
Because default Directory clients - IW+IR will never call sync() on a file they didn&apos;t close yet.&lt;br/&gt;
Also this client behaviour is guaranteed with current implementation - if someone calls current sync() on an open file, it will fail on &apos;new RandomAccessFile&apos;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d like to allow for this to work in the future, even if current FSDir impls cannot sync an open file.  EG conceivably they could reach in and get the RAF that IndexOutput has open and sync it.&lt;/p&gt;

&lt;p&gt;So I think we just note this as a limitation of FSDir impls today, but, the API allows for it?&lt;/p&gt;</comment>
                    <comment id="12847448" author="shaie" created="Fri, 19 Mar 2010 17:07:51 +0000"  >&lt;p&gt;Earwin, I agree that sub-classing FSDir is not that easy. So I guess you&apos;ll add another piece of jdoc to createOutput, to notify Dir when it&apos;s closed? This seems reasonable.&lt;/p&gt;</comment>
                    <comment id="12847492" author="mikemccand" created="Fri, 19 Mar 2010 18:13:16 +0000"  >&lt;p&gt;When it&apos;s opened, not closed, right?&lt;/p&gt;</comment>
                    <comment id="12847512" author="earwin" created="Fri, 19 Mar 2010 18:55:20 +0000"  >&lt;p&gt;I&apos;ll either jdoc this, or move createOutput to FSDir, as all three current impls are a copy of each other. In such a case someone overriding createOutput can look at the original and decide for himself if he wants to keep and call this functionality, or not.&lt;/p&gt;

&lt;p&gt;&amp;gt; When it&apos;s opened, not closed, right? &lt;br/&gt;
Mike, I thought about it once again. If you allow sync()ing open files, you still need to track when they are closed. Or the following may happen:&lt;/p&gt;

&lt;p&gt;io = dir.createIndexOutput(name); // registers &apos;name&apos; as a stale file&lt;br/&gt;
dir.sync(name) // syncs &apos;name&apos;, removes it from registry&lt;br/&gt;
... // do stuff&lt;br/&gt;
io.close()&lt;br/&gt;
dir.sync(name) // does not sync &apos;name&apos;, as it is no longer in the registry&lt;br/&gt;
... // BZZWHAM!!&lt;br/&gt;
... // crash happens, the data is lost&lt;/p&gt;</comment>
                    <comment id="12847515" author="earwin" created="Fri, 19 Mar 2010 18:57:49 +0000"  >&lt;p&gt;Thus, I think we should officially disallow syncing open files. This operation is impossible right now and pointless, anyway.&lt;/p&gt;</comment>
                    <comment id="12847536" author="mikemccand" created="Fri, 19 Mar 2010 19:37:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you allow sync()ing open files, you still need to track when they are closed. Or the following may happen:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh right.&lt;/p&gt;

&lt;p&gt;OK so let&apos;s disallow that in the API.  You can only sync a file after it&apos;s been closed.  Trying to sync a file that hasn&apos;t yet been closed will be undefined.  (and it sounds like *FSDir will silently ignore the request).&lt;/p&gt;</comment>
                    <comment id="12847585" author="shaie" created="Fri, 19 Mar 2010 21:21:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;Trying to sync a file that hasn&apos;t yet been closed will be undefined&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we avoid &apos;undefined&apos;? We have an issue open about SegmentInfos.fileLength() not clearly defined and it causes confusion. If it&apos;s undefined, then someone might attempt to call sync before he closes the file, and only then close ... can we throw an exception in that case?&lt;/p&gt;

&lt;p&gt;We can have close(), sync() and closeAndSync(). Would the latter make sense?&lt;/p&gt;

&lt;p&gt;I prefer if the API will be explicit,, and I think that throwing an exception (StillOpenException?) if sync() is called before close() is very explicit, and reasonable if accompanied by a proper jdoc.&lt;/p&gt;</comment>
                    <comment id="12847642" author="mikemccand" created="Fri, 19 Mar 2010 23:09:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can have close(), sync() and closeAndSync(). Would the latter make sense?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think closeAndSync could be used by Lucene, at least today.  Typically, at the time these files are closed, Lucene has no idea whether sync is needed (ie, whether a commit() will be called by the app before the segment gets merged).  So I don&apos;t think we should add it now?  (Design for today).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I prefer if the API will be explicit,, and I think that throwing an exception (StillOpenException?) if sync() is called before close() is very explicit, and reasonable if accompanied by a proper jdoc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be great... I think, especially, for something as important as sync(), we should not silently ignore you when you think you&apos;ve sync&apos;d an open file.&lt;/p&gt;</comment>
                    <comment id="12848101" author="earwin" created="Mon, 22 Mar 2010 12:32:24 +0000"  >&lt;p&gt;Okay, dirty patch go!&lt;/p&gt;

&lt;p&gt;I threw in FSyncStrategy, so we choose to sync like before, don&apos;t sync at all or do ext3-geared sync.&lt;br/&gt;
Tell me what you think? We can allow subclasses to define sync strategy or maybe user himself (it&apos;s hardwired now). We can also just inline default and if people want action - they override.&lt;/p&gt;</comment>
                    <comment id="12848102" author="earwin" created="Mon, 22 Mar 2010 12:34:06 +0000"  >&lt;p&gt;Ah, patch is based off &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2339&quot; title=&quot;Allow Directory.copy() to accept a collection of file names to be copied&quot;&gt;&lt;del&gt;LUCENE-2339&lt;/del&gt;&lt;/a&gt;. If applied over trunk, there may be some import conflicts in Directory.java&lt;/p&gt;</comment>
                    <comment id="12848159" author="mikemccand" created="Mon, 22 Mar 2010 15:15:49 +0000"  >&lt;p&gt;BTW on the sync of still-open files non-supported case, if we ever did want to support, I think we&apos;d add sync to IndexOutput.&lt;/p&gt;

&lt;p&gt;Ie it makes sense that this dir-level sync only works after the file is closed.&lt;/p&gt;</comment>
                    <comment id="12848212" author="mikemccand" created="Mon, 22 Mar 2010 17:13:45 +0000"  >&lt;p&gt;Patch looks great &amp;#8211; what a sweet cleanup!  I love all the code removed from IW  &amp;amp; DR &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Can we remove NoFSync &amp;amp; Ext3StyleFSync?  People can write these if they want...&lt;/p&gt;

&lt;p&gt;Also, you moved SimpleFSDir.SimpleFSIndexOutput -&amp;gt; FSDir.FSIndexOutput... but this is a break in back-compat right?  Ie subclasses &quot;out there&quot; may be using this?&lt;/p&gt;

&lt;p&gt;Can you add a CHANGES entry?&lt;/p&gt;</comment>
                    <comment id="12848306" author="earwin" created="Mon, 22 Mar 2010 19:58:37 +0000"  >&lt;p&gt;New patch.&lt;br/&gt;
FSyncStrategy removed, default inlined. All our Directory impls override deprecated sync() to preserve back-compat.&lt;br/&gt;
Preserving back-compat for IO move is impossible, mentioned in CHANGES.txt, which probably needs some love.&lt;/p&gt;</comment>
                    <comment id="12848314" author="earwin" created="Mon, 22 Mar 2010 20:19:30 +0000"  >&lt;p&gt;Clean patch against trunk&lt;/p&gt;</comment>
                    <comment id="12848324" author="mikemccand" created="Mon, 22 Mar 2010 20:44:25 +0000"  >&lt;p&gt;Patch looks great Earwin &amp;#8211; I&apos;ll commit in a day or two.  Thanks!&lt;/p&gt;</comment>
                    <comment id="12848341" author="shaie" created="Mon, 22 Mar 2010 21:15:38 +0000"  >&lt;p&gt;Earwin, can you add a deprecation message to sync(String)? When I upgraded from 2.9 to 3.0 some methods were deprecated w/o any explanation as to what I should use instead. I think a message like &quot;@deprecated use #sync(Collection) instead. For easy migration you can change your code to call sync(Colllections.singleton(name))&quot; ... or something along those lines.&lt;/p&gt;

&lt;p&gt;Other than that, patch looks great! I really like the code cleanup from IW.&lt;/p&gt;</comment>
                    <comment id="12848383" author="earwin" created="Mon, 22 Mar 2010 22:04:57 +0000"  >&lt;p&gt;added comment to jdocs&lt;/p&gt;</comment>
                    <comment id="12848385" author="thetaphi" created="Mon, 22 Mar 2010 22:07:07 +0000"  >&lt;p&gt;Ahm,&lt;/p&gt;

&lt;p&gt;one question, why does this patch reimplement the deprecated and removed FSIndexInput/FSIndexOutput? They have to be and are in SimpleFSIndexOutput. You are reverting to the pre-2.9 state. This is not obvious to me, so I am -1 about this patch without explanation.&lt;/p&gt;</comment>
                    <comment id="12848427" author="earwin" created="Mon, 22 Mar 2010 23:05:45 +0000"  >&lt;p&gt;I do not touch *IndexInput, these should stay where they are.&lt;br/&gt;
FSIndexOutput is used in &lt;b&gt;all&lt;/b&gt; child classes, without changes, so it&apos;s only logical to move it to parent. It is also tied in now with sync tracking logic, and required for it to work properly.&lt;br/&gt;
Preserving backwards-compatibility here is impossible because we need FSIO to call back its parent, whether it&apos;s by declaring it non-static, or passing a new explicit parameter to constructor, it is required and it is a break.&lt;/p&gt;</comment>
                    <comment id="12848632" author="mikemccand" created="Tue, 23 Mar 2010 09:22:59 +0000"  >&lt;p&gt;I think it&apos;s OK to make an exception to back-compat here.  Users who subclass FSDir, and also &quot;borrow&quot; SimpleFDDir&apos;s IndexOutput impl, are very advanced and can change their code.  The break will also be very clear &amp;#8211; compilation error, which you must fix to move on &amp;#8211; so we&apos;re not making a trap here.&lt;/p&gt;

&lt;p&gt;Uwe are you OK with the rename?  I think it actually does make sense that it be in the base class...&lt;/p&gt;</comment>
                    <comment id="12848778" author="thetaphi" created="Tue, 23 Mar 2010 16:15:26 +0000"  >&lt;p&gt;I am fine now! Go for it! Policeman is happy.&lt;/p&gt;</comment>
                    <comment id="12848789" author="mikemccand" created="Tue, 23 Mar 2010 16:35:00 +0000"  >&lt;p&gt;OK I will commit shortly!  Thanks Earwin &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12848973" author="earwin" created="Wed, 24 Mar 2010 00:07:48 +0000"  >&lt;p&gt;Mike, you missed latest patch, with Shai-requested comment:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@@ -85,6 +85,8 @@
    * stable storage.  Lucene uses &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; to properly commit
    * changes to the index, to prevent a machine/OS crash
    * from corrupting the index.
+   * @deprecated use {@link #sync(Collection)} instead.
+   * For easy migration you can change your code to call sync(Collections.singleton(name))
    */
   @Deprecated
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void sync(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException { &lt;span class=&quot;code-comment&quot;&gt;// TODO 4.0 kill me&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12849076" author="mikemccand" created="Wed, 24 Mar 2010 06:25:17 +0000"  >&lt;p&gt;Woops, fixed, thanks!&lt;/p&gt;</comment>
                    <comment id="12926504" author="mikemccand" created="Sat, 30 Oct 2010 00:52:34 +0100"  >&lt;p&gt;Attached patch with a simpler fix for 3.0/2.9.&lt;/p&gt;

&lt;p&gt;IndexWriter and IndexReader now pass the synced set to IndexFileDeleter, which in turn removes files from it once they are deleted.  This means the set can only be as big as the number of sync&apos;d but not yet deleted files in the index.&lt;/p&gt;</comment>
                    <comment id="12926553" author="mikemccand" created="Sat, 30 Oct 2010 10:46:05 +0100"  >&lt;p&gt;Reopen for backport.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12458462" name="LUCENE-2328.patch" size="6331" author="mikemccand" created="Sat, 30 Oct 2010 00:52:34 +0100" />
                    <attachment id="12439512" name="LUCENE-2328.patch" size="28368" author="earwin" created="Mon, 22 Mar 2010 22:04:57 +0000" />
                    <attachment id="12439497" name="LUCENE-2328.patch" size="28219" author="earwin" created="Mon, 22 Mar 2010 20:19:30 +0000" />
                    <attachment id="12439495" name="LUCENE-2328.patch" size="28311" author="earwin" created="Mon, 22 Mar 2010 19:58:37 +0000" />
                    <attachment id="12439449" name="LUCENE-2328.patch" size="26874" author="earwin" created="Mon, 22 Mar 2010 12:32:23 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 18 Mar 2010 09:26:22 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11466</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25397</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>