<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2392/LUCENE-2392.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2392] Enable flexible scoring</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2392</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a first step (nowhere near committable!), implementing the&lt;br/&gt;
design iterated to in the recent &quot;Baby steps towards making Lucene&apos;s&lt;br/&gt;
scoring more flexible&quot; java-dev thread.&lt;/p&gt;

&lt;p&gt;The idea is (if you turn it on for your Field; it&apos;s off by default) to&lt;br/&gt;
store full stats in the index, into a new _X.sts file, per doc (X&lt;br/&gt;
field) in the index.&lt;/p&gt;

&lt;p&gt;And then have FieldSimilarityProvider impls that compute doc&apos;s boost&lt;br/&gt;
bytes (norms) from these stats.&lt;/p&gt;

&lt;p&gt;The patch is able to index the stats, merge them when segments are&lt;br/&gt;
merged, and provides an iterator-only API.  It also has starting point&lt;br/&gt;
for per-field Sims that use the stats iterator API to compute boost&lt;br/&gt;
bytes.  But it&apos;s not at all tied into actual searching!  There&apos;s still&lt;br/&gt;
tons left to do, eg, how does one configure via Field/FieldType which&lt;br/&gt;
stats one wants indexed.&lt;/p&gt;

&lt;p&gt;All tests pass, and I added one new TestStats unit test.&lt;/p&gt;

&lt;p&gt;The stats I record now are:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;field&apos;s boost&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;field&apos;s unique term count (a b c a a b --&amp;gt; 3)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;field&apos;s total term count (a b c a a b --&amp;gt; 6)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;total term count per-term (sum of total term count for all docs&lt;br/&gt;
    that have this term)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Still need at least the total term count for each field.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12461758">LUCENE-2392</key>
            <summary>Enable flexible scoring</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sun, 11 Apr 2010 18:29:40 +0100</created>
                <updated>Fri, 10 May 2013 11:44:31 +0100</updated>
                    <resolved>Fri, 8 Jul 2011 06:08:44 +0100</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                <fixVersion>flexscoring branch</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>12</watches>
                                                    <comments>
                    <comment id="12855757" author="mikemccand" created="Sun, 11 Apr 2010 18:30:11 +0100"  >&lt;p&gt;Rough first patch attached....&lt;/p&gt;</comment>
                    <comment id="12855802" author="rcmuir" created="Mon, 12 Apr 2010 02:11:45 +0100"  >&lt;p&gt;Mike, I don&apos;t think overlapTermCount should really exist in the Stats.&lt;br/&gt;
Trying to implement some concrete FieldSimProviders, it starts getting messy.&lt;br/&gt;
When using term unique pivoted length norm, i don&apos;t want to count these positionIncrement=0 terms either...&lt;br/&gt;
so do we need a uniqueOverlapTermCount?&lt;br/&gt;
Even when using non-unique (BM25) pivoted length norm, we don&apos;t want to count these when summing to calculate &lt;br/&gt;
averages either.&lt;/p&gt;

&lt;p&gt;So i know you probably see this as &apos;baking something into the index&apos; but I think positionIncrement=0 means &lt;br/&gt;
&quot;doesn&apos;t contribute to the document length&quot; by definition, and the discountOverlaps=false (no longer the default)&lt;br/&gt;
should be considered deprecated compatibility behavior &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12855875" author="shaie" created="Mon, 12 Apr 2010 08:35:40 +0100"  >&lt;p&gt;Mike - it&apos;ll also be great if we can store the length of the document in a custom way. I think what I&apos;m saying is that if we can open up the norms computation to custom code - that will do what I want, right? Maybe we can have a class like DocLengthProvider which apps can plug in if they want to customize how that length is computed. Wherever we write the norms, we&apos;ll call that impl, which by default will do what Lucene does today?&lt;br/&gt;
I think though that it&apos;s not a field-level setting, but an IW one?&lt;/p&gt;</comment>
                    <comment id="12855905" author="mikemccand" created="Mon, 12 Apr 2010 10:48:59 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike, I don&apos;t think overlapTermCount should really exist in the Stats.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I will remove it &amp;#8211; I was unsure whether it was overkill &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  So&lt;br/&gt;
it&apos;s purely an index time decision, whether the posIncr 0 tokens&lt;br/&gt;
&quot;count&quot;.&lt;/p&gt;

&lt;p&gt;Hmm, but... we have a problem, which is that these posIncr 0 tokens&lt;br/&gt;
are now counted in the unique token count.  Have to mull how to avoid&lt;br/&gt;
that...hmm... to do it correctly, I think means &quot;count this token as&lt;br/&gt;
+1 on the unique tokens for this doc if ever it has non-zero posIncr&quot;?&lt;/p&gt;

&lt;p&gt;Really, maybe somehow we should be using at attr about the token&lt;br/&gt;
itself?  Instead of posIncr == 0?  I mean a broken synonym injector&lt;br/&gt;
could conceivably provide the synonyms first (w/ first one having&lt;br/&gt;
posIncr 1), followed by the real term (w/ posIncr 0)?&lt;/p&gt;

&lt;p&gt;BTW the cost of storing the stats isn&apos;t that bad &amp;#8211; it increases index&lt;br/&gt;
size by 1.5%, on a 10M wikipedia index where each doc is 1KB of text&lt;br/&gt;
(~171 words per doc on avg).&lt;/p&gt;</comment>
                    <comment id="12855906" author="mikemccand" created="Mon, 12 Apr 2010 10:57:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think what I&apos;m saying is that if we can open up the norms computation to custom code - that will do what I want, right? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m calling the norms &quot;boost bytes&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  This was Marvin&apos;s term.. I&lt;br/&gt;
like it.&lt;/p&gt;

&lt;p&gt;This patch makes boost byte computation completely private to the&lt;br/&gt;
sim (see the *FieldSimProvider).  Ie the sim providers walk the stats&lt;br/&gt;
and do whatever they want to &quot;prepare&quot; for real searching.  EG if you&lt;br/&gt;
have the RAM maybe you want to use a true float[] not boost bytes.  Or&lt;br/&gt;
if you really don&apos;t have the RAM maybe you use only 4 bits per-doc,&lt;br/&gt;
not 8.  The FieldSim just provides a &quot;float boost(int docID)&quot; so what&lt;br/&gt;
it does under the hood is private.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we can have a class like DocLengthProvider which apps can plug in if they want to customize how that length is computed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So... I&apos;m actually trying to avoid extensibility on the first go, here&lt;br/&gt;
(this is the &quot;baby steps&quot; part of the original thread).&lt;/p&gt;

&lt;p&gt;Ie, the IR world seems to have converged on a smallish set of &quot;stats&quot;&lt;br/&gt;
that are commonly required, so I&apos;d like to make those initial stats&lt;br/&gt;
work well, for starters.  Commit that (it enables all sorts of state&lt;br/&gt;
of the art scoring models), and perhaps cutover to the default Robert&lt;br/&gt;
created in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2187&quot; title=&quot;improve lucene&amp;#39;s similarity algorithm defaults&quot;&gt;LUCENE-2187&lt;/a&gt; (which needs stats to work correctly).  And&lt;br/&gt;
then (phase 2) work out plugability so you can put your own stats&lt;br/&gt;
in....&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Wherever we write the norms, we&apos;ll call that impl, which by default will do what Lucene does today?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, this is the DefaultSimProvider in my current patch &amp;#8211; it simply&lt;br/&gt;
computes the same thing Lucene does today, but uses the stats at IR&lt;br/&gt;
open time (once it&apos;s hooked up) to do, instead of doing so during&lt;br/&gt;
indexing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think though that it&apos;s not a field-level setting, but an IW one?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s field level now and I think we should keep it that way.  EG&lt;br/&gt;
Terrier was apparently document oriented in the past but has now&lt;br/&gt;
deprecated that and moved to per-field.&lt;/p&gt;

&lt;p&gt;You can always make a catch-all field if you &quot;really&quot; want aggregated&lt;br/&gt;
stats across the entire doc?&lt;/p&gt;</comment>
                    <comment id="12855913" author="shaie" created="Mon, 12 Apr 2010 11:18:12 +0100"  >&lt;p&gt;I&apos;d like to withdraw my request from above. I misunderstood that the stats I need are stored per-field per-doc. So that will allow me to compute the docLength as I want.&lt;/p&gt;</comment>
                    <comment id="12855934" author="rcmuir" created="Mon, 12 Apr 2010 12:49:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Really, maybe somehow we should be using at attr about the token&lt;br/&gt;
itself? Instead of posIncr == 0? I mean a broken synonym injector&lt;br/&gt;
could conceivably provide the synonyms first (w/ first one having&lt;br/&gt;
posIncr 1), followed by the real term (w/ posIncr 0)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, its my opinion all along (others disagree with me) that since&lt;br/&gt;
we have this &apos;ordered (incrementToken) Attributesource&apos; / Token*Stream* that &lt;br/&gt;
this sorta broken filter isn&apos;t a valid equivalent..., its definitely a different&lt;br/&gt;
TokenStream,even if its treated in some ways today as the same... we gotta&lt;br/&gt;
break away from this for reasons like this.&lt;/p&gt;

&lt;p&gt;otherwise why have it ordered at all?&lt;/p&gt;</comment>
                    <comment id="12922091" author="rcmuir" created="Mon, 18 Oct 2010 15:52:39 +0100"  >&lt;p&gt;i brought the patch up to trunk: didn&apos;t fix any problems &lt;br/&gt;
(e.g. some tests still fail, things outside of core lucene won&apos;t even compile)&lt;/p&gt;</comment>
                    <comment id="12986531" author="rcmuir" created="Tue, 25 Jan 2011 17:24:38 +0000"  >&lt;p&gt;here&apos;s a really really rough &quot;take 2&quot; at the problem.&lt;/p&gt;

&lt;p&gt;The general idea is to take a smaller &quot;baby-step&quot; as Mike calls it, to the problem.&lt;br/&gt;
Really we have been working our way towards this anyway, exposing additional statistics,&lt;br/&gt;
making Similarity per-field, fixing up inconsistencies... and this is the way I prefer, as we&lt;br/&gt;
get things actually committed and moving.&lt;/p&gt;

&lt;p&gt;So whatever is in this patch (which is full of nocommits, but all tests pass and all queries work with it),&lt;br/&gt;
we could possibly then split up into other issues and continue slowly proceeding, or maybe&lt;br/&gt;
create a branch, whatever.&lt;/p&gt;

&lt;p&gt;My problem with the other patch is it requires a ton more work to make any progress on it...&lt;br/&gt;
and things don&apos;t even compile with it, forget about tests.&lt;/p&gt;

&lt;p&gt;The basics here are to:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Split the &quot;matching&quot; and &quot;scoring calculations&quot; of Scorer. All responsibility of calculations belongs&lt;br/&gt;
in the Similarity, the Scorer should be matching positions, working docsEnums, etc etc.&lt;/li&gt;
	&lt;li&gt;Similarity as we know it now, gets a more low-level API, and TFIDFSimilarity implements this API,&lt;br/&gt;
but exposes its customizations via the tf(), idf(), etc we know now.&lt;/li&gt;
	&lt;li&gt;Things like score-caching and specialization of calculations are the responsibility of the Similarity,&lt;br/&gt;
as these depend upon the formula being used. For TFIDFSimilarity, i added some optimizations here,&lt;br/&gt;
for example it specializes its norms == null case away to remove the per-doc &quot;if&quot;.&lt;/li&gt;
	&lt;li&gt;Since all Weights create PerReaderTermState (&amp;lt;-- this one needs a new name), to separate the&lt;br/&gt;
seeking/stats collection from the calculations, i also optimized PhraseQuery&apos;s Weight/Scorer construction&lt;br/&gt;
to be single-pass. &lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Also I like to benchmark every step of the way, so we don&apos;t come up with&lt;br/&gt;
this design that won&apos;t be performant: here are the scores for lucene&apos;s default Sim with the patch:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS trunk&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS patch&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;unit, state&amp;#93;&lt;/span&gt;, 10, true)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.92&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-4.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctitle:.&lt;b&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Uu&amp;#93;&lt;/span&gt;nited.&lt;/b&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.00&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+unit +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.12&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.36&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.40&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18.70&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18.93&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.54&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.71&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanFirst(unit, 5)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.35&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.59&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.69&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.91&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.03&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.23&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;~3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.74&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.86&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;3.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.72&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17.30&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;3.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;19.24&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;4.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;49.42&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;51.55&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;4.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.31&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;5.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+nebraska +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;140.74&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;151.85&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;7.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.66&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.55&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18.77&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.41&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctimesecnum:&lt;span class=&quot;error&quot;&gt;&amp;#91;10000 TO 60000&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.97&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.70&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;10.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;All Lucene/Solr tests pass, but there are lots of nocommits, especially&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;No Javadocs&lt;/li&gt;
	&lt;li&gt;Explains need to be fixed: in general the explanation of &quot;matching&quot; belongs where it is now,&lt;br/&gt;
but the explanation of &quot;score calculations&quot; belongs in the Similarity.&lt;/li&gt;
	&lt;li&gt;need to refactor more out of Weight, currently we pass it to the docscorer, but&lt;br/&gt;
its the wrong object, as it can only &quot;hold&quot; a single float.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Anyway, its gonna take some time to rough all this out I&apos;m sure, but I wanted&lt;br/&gt;
to show some progress/invite ideas, and also show we can do this stuff&lt;br/&gt;
without losing performance.&lt;/p&gt;

&lt;p&gt;I have separate patches that need to be integrated/relevance tested e.g. &lt;br/&gt;
for average doc length... maybe i&apos;ll do that next so we can get some concrete&lt;br/&gt;
alternate sims in here before going any further.&lt;/p&gt;
</comment>
                    <comment id="13011900" author="rcmuir" created="Mon, 28 Mar 2011 03:49:26 +0100"  >&lt;p&gt;Updated patch, i brought the patch to trunk, cleaned up, enabled some more of the stats in scoring (e.g. totalTermFreq/sumOfTotalTermFreq).&lt;/p&gt;

&lt;p&gt;In src/test i added a MockLMSimilarity, that implements &quot;Bayesian smoothing using Dirichlet priors&quot; from &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.136.8113&quot; class=&quot;external-link&quot;&gt;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.136.8113&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is interesting, as its faster than lucene&apos;s scoring formula today &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I want to get some of this stuff in shape for David (or any other GSOC students) to be able to implement their algorithms, but there is a lot of refactoring (e.g. explains) to do.&lt;/p&gt;

&lt;p&gt;I&apos;ll create a branch under &lt;a href=&quot;https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring&quot; class=&quot;external-link&quot;&gt;https://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring&lt;/a&gt; with this infrastructure in a bit.&lt;/p&gt;

&lt;p&gt;Tonight i&apos;ll see if i can get the avg doc length stuff in the branch too.&lt;/p&gt;</comment>
                    <comment id="13061332" author="rcmuir" created="Thu, 7 Jul 2011 15:10:28 +0100"  >&lt;p&gt;I think we need to commit the refactoring portions (separating TF-IDF out) to trunk very soon, because its really difficult&lt;br/&gt;
to keep this branch in sync with trunk, e.g. lots of activity and refactoring going on.&lt;/p&gt;

&lt;p&gt;I&apos;d like to get this merged in as quickly as possible. I don&apos;t think the svn history is interesting, especially given&lt;br/&gt;
all the frustrations I am having with merging... The easiest way will be to commit a patch, I&apos;ll get everything in shape&lt;br/&gt;
and upload one soon, like, today.&lt;/p&gt;</comment>
                    <comment id="13061420" author="simonw" created="Thu, 7 Jul 2011 17:32:20 +0100"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;d like to get this merged in as quickly as possible. I don&apos;t think the svn history is interesting, especially given&lt;br/&gt;
all the frustrations I am having with merging... The easiest way will be to commit a patch, I&apos;ll get everything in shape&lt;br/&gt;
and upload one soon, like, today.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 even if this is not entirely in shape we can still iterate on trunk. &lt;/p&gt;</comment>
                    <comment id="13061433" author="rcmuir" created="Thu, 7 Jul 2011 17:45:49 +0100"  >&lt;p&gt;Attached is a patch, with this CHANGES entry:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;* LUCENE-2392: Decoupled vector space scoring from Query/Weight/Scorer. If you
  extended Similarity directly before, you should extend TFIDFSimilarity instead.
  Similarity is now a lower-level API to implement other scoring algorithms.
  See MIGRATE.txt for more details.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would like to commit this, and then proceed onward with issues such as &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3220&quot; title=&quot;Implement various ranking models as Similarities&quot;&gt;&lt;del&gt;LUCENE-3220&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3221&quot; title=&quot;improve docvalues integration with scoring&quot;&gt;LUCENE-3221&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13061769" author="rcmuir" created="Fri, 8 Jul 2011 06:08:44 +0100"  >&lt;p&gt;Committed revision 1144158.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12501006">LUCENE-2959</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12441412" name="ASF.LICENSE.NOT.GRANTED--LUCENE-2392.patch" size="71208" author="mikemccand" created="Sun, 11 Apr 2010 18:30:11 +0100" />
                    <attachment id="12485621" name="LUCENE-2392.patch" size="254088" author="rcmuir" created="Thu, 7 Jul 2011 17:45:49 +0100" />
                    <attachment id="12474750" name="LUCENE-2392.patch" size="123864" author="rcmuir" created="Mon, 28 Mar 2011 03:49:26 +0100" />
                    <attachment id="12457447" name="LUCENE-2392.patch" size="121585" author="rcmuir" created="Mon, 18 Oct 2010 15:52:39 +0100" />
                    <attachment id="12469301" name="LUCENE-2392_take2.patch" size="105944" author="rcmuir" created="Tue, 25 Jan 2011 17:24:38 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 12 Apr 2010 01:11:45 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11409</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25299</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>