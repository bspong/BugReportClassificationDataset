<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:34 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1987/LUCENE-1987.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1987] Remove rest of analysis deprecations (Token, CharacterCache)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1987</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;These removes the rest of the deprecations in the analysis package:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;del&gt;Token&apos;s termText field&lt;/del&gt;- (DONE)&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;eventually un-deprecate ctors of Token taking Strings (they are still useful) -&amp;gt; if yes remove deprec in 2.9.1&lt;/del&gt; (DONE)&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;remove CharacterCache and use Character.valueOf() from Java5&lt;/del&gt; (DONE)&lt;/li&gt;
	&lt;li&gt;Stopwords lists&lt;/li&gt;
	&lt;li&gt;Remove the backwards settings from analyzers (acronym, posIncr,...). They are deprecated, but we still have the VERSION constants. Do not know, how to proceed. Keep the settings alive for index compatibility? Or remove it together with the version constants (which were undeprecated).&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
            <key id="12438341">LUCENE-1987</key>
            <summary>Remove rest of analysis deprecations (Token, CharacterCache)</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Fri, 16 Oct 2009 22:33:23 +0100</created>
                <updated>Sat, 7 Nov 2009 14:57:30 +0000</updated>
                    <resolved>Wed, 21 Oct 2009 13:13:11 +0100</resolved>
                                            <fixVersion>2.9.1</fixVersion>
                <fixVersion>3.0</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12766719" author="thetaphi" created="Fri, 16 Oct 2009 22:36:52 +0100"  >&lt;p&gt;Pastch with the first three points. The three deprecated methods should stay alive in my opinion. Copying the string to the termbuffer in the ctor is the same linke copying the initial termbuffer. If we remove these ctors, we should also remove the setTermBuffer(String) method. This is no consistency.&lt;/p&gt;

&lt;p&gt;If the others agree to keep these three ctors alive I will apply an undeprecation in 2.9 branch.&lt;/p&gt;</comment>
                    <comment id="12766870" author="thetaphi" created="Sat, 17 Oct 2009 11:01:04 +0100"  >&lt;p&gt;Updated patch to last generics additions&lt;/p&gt;</comment>
                    <comment id="12767041" author="thetaphi" created="Sun, 18 Oct 2009 11:26:16 +0100"  >&lt;p&gt;New patch. Will commit soon (+bw branch). I will also commit the un-depreactions to 2.9 branch.&lt;/p&gt;

&lt;p&gt;Still open are the StopFilter/StopAnalyzer patches (not sure, how to proceed here).&lt;/p&gt;</comment>
                    <comment id="12767042" author="thetaphi" created="Sun, 18 Oct 2009 11:38:30 +0100"  >&lt;p&gt;Committed revision: 826404 and also in 2.9 branch.&lt;/p&gt;</comment>
                    <comment id="12767049" author="thetaphi" created="Sun, 18 Oct 2009 13:02:27 +0100"  >&lt;p&gt;Mike:&lt;br/&gt;
You invented the VERSION constants for StandardAnalyzer and so on. How should we handle the deprecated settings inside? Just remove the get/setters and only use the version constant to enable the backwards settings? If I remove these settings internally in StopAnalyzer and StopFilter and Standard*, too, I also have to remove some version support.&lt;/p&gt;

&lt;p&gt;How would you proceed?&lt;/p&gt;

&lt;p&gt;Furthermore: The &quot;deprecated&quot; check for overridden tokenStream methods to fix this bug, if somebody subclasses a core-Analyzer, what to do with them. As the tokenStream methods is not deprecated in favour of reusableTokenStream, how to prevent this in future. Keep this reflection checks? Or make the Analyzers final?&lt;/p&gt;</comment>
                    <comment id="12767063" author="mikemccand" created="Sun, 18 Oct 2009 14:28:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;How should we handle the deprecated settings inside? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For &quot;replace invalid acronym&quot; in StandardAnalyzer, there is no version setting that enables that currently, so I&apos;m afraid we must keep those until 4.0 (since they impact your index by altering analysis)?  Or, maybe we could add a Versions.LUCENE_23, which&apos;d re-enable that bug (the default for that setting changed to &quot;true&quot; (= fix the bug) in 2.4).  Hmm.&lt;/p&gt;

&lt;p&gt;For &quot;stop position increments&quot; in StandardAnalyzer, I think we should remove the direct getter/setters and expose only Versions.LUCENE_24 to get back to that behavior?&lt;/p&gt;

&lt;p&gt;StopFilter should keep its &quot;stop position increments&quot; setting (it&apos;s not deprecated).&lt;/p&gt;</comment>
                    <comment id="12767064" author="mikemccand" created="Sun, 18 Oct 2009 14:29:47 +0100"  >&lt;blockquote&gt;&lt;p&gt;Or make the Analyzers final?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12767261" author="thetaphi" created="Mon, 19 Oct 2009 10:40:32 +0100"  >&lt;p&gt;Hallo Mike,&lt;/p&gt;

&lt;p&gt;attached is a patch with all deprecated methods removed (only the setOverridesTokenStream is still there, making Analyzers final is another thing to do).&lt;/p&gt;

&lt;p&gt;Also StopFilter and its stopWord ets were generified (to &amp;lt;?&amp;gt;, which is ok for every type of set, as CharArraySet uses toString() to convert everything to string when testing, so any set is fine)&lt;/p&gt;

&lt;p&gt;I only had the following problems and solution is here (StandardAnalyzer):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
enableStopPositionIncrements = matchVersion.onOrAfter(Version.LUCENE_29);
replaceInvalidAcronym = matchVersion.onOrAfter(Version.LUCENE_23);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The setting defaultPosIncr was removed (static method, so there is no default anymore). Because of that, the pre 2.9 default was false (which is now not changeable). So I set the posIncr to false for all older versions (this was the default before, but is now fixed as no static setter/sysprop anymore)&lt;/p&gt;

&lt;p&gt;For the invalid acronyms I added LUCENE_23 version constant, so for all versions &amp;gt;=2.3 it is enabled. If you want old behaviour, use LUCENE_22 or below.&lt;/p&gt;

&lt;p&gt;Mike: Can you review this?&lt;/p&gt;

&lt;p&gt;If you&apos;re ok with it I have to change 175 &quot;new StandardAnalyzer()&quot; occurences in tests &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12767262" author="thetaphi" created="Mon, 19 Oct 2009 10:41:20 +0100"  >&lt;p&gt;If we are fine with that, I would backport the version constants and the default setting to 2.9.x&lt;/p&gt;</comment>
                    <comment id="12767263" author="thetaphi" created="Mon, 19 Oct 2009 10:44:37 +0100"  >&lt;p&gt;Correct patch.&lt;/p&gt;</comment>
                    <comment id="12767264" author="mikemccand" created="Mon, 19 Oct 2009 10:46:09 +0100"  >&lt;p&gt;I&apos;ll have a look, but one thing is invalid acronym replacement should be enabled if version &amp;gt;= 2.4, not &amp;gt;= 2.3.  Ie, if version is 2.3, the bug is still present.&lt;/p&gt;</comment>
                    <comment id="12767265" author="thetaphi" created="Mon, 19 Oct 2009 10:53:49 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1068&quot; title=&quot;Invalid behavior of StandardTokenizerImpl&quot;&gt;&lt;del&gt;LUCENE-1068&lt;/del&gt;&lt;/a&gt; says: Fix version 2.3&lt;/p&gt;</comment>
                    <comment id="12767266" author="thetaphi" created="Mon, 19 Oct 2009 10:54:33 +0100"  >&lt;p&gt;Javadocs fixes.&lt;/p&gt;</comment>
                    <comment id="12767267" author="mikemccand" created="Mon, 19 Oct 2009 10:54:40 +0100"  >&lt;p&gt;Why add 2.0, 2.1. 2.2 versions?  We don&apos;t anywhere emulate bugs based on those, right?  Otherwise, patch looks great!  Thanks Uwe.  Nice to see StandardAnalyzer clean again.&lt;/p&gt;</comment>
                    <comment id="12767269" author="thetaphi" created="Mon, 19 Oct 2009 10:57:27 +0100"  >&lt;p&gt;I just added also 20 and 21. I can remove them again (20 and 21).&lt;br/&gt;
22 is needed because the invalidAcronym thing is there in 2.2 and fixed in 2.3 (according to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1068&quot; title=&quot;Invalid behavior of StandardTokenizerImpl&quot;&gt;&lt;del&gt;LUCENE-1068&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                    <comment id="12767270" author="mikemccand" created="Mon, 19 Oct 2009 10:59:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1068&quot; title=&quot;Invalid behavior of StandardTokenizerImpl&quot;&gt;&lt;del&gt;LUCENE-1068&lt;/del&gt;&lt;/a&gt; says: Fix version 2.3&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, that bug was fixed in 2.3, however with that fix the buggy behavior was kept by default.  In 2.4 we then fixed the default to be true, ie, the bug would be fixed by default.  So if I were to specify VERSION_23, I should get the buggy behavior, but if I specify VERSION_24, I should get the correct behavior.&lt;/p&gt;

&lt;p&gt;Going forward, when we fix a bug but need to conditionally preserve the bug for back compat, we should use the version switching so that by default for new users (VERSION_CURRENT or VERSION_XX if XX is the next release) the bug is fixed.&lt;/p&gt;</comment>
                    <comment id="12767271" author="thetaphi" created="Mon, 19 Oct 2009 11:09:40 +0100"  >&lt;p&gt;Updated patch with LUCENE_24. I did not remove the other version constants, because then we have them and can use them anywhere else. And a user coming from e.g. 2.2 to 3.0 can just use LUCENE_22 to match his old behaviour. The user should be free to give his version he used before for this backwards compatibility.&lt;/p&gt;

&lt;p&gt;Mike: Should I backport the setting for 2.4 to 2.9 to enable plugin-replacements from 2.9.1 to 3.0?&lt;/p&gt;</comment>
                    <comment id="12767273" author="thetaphi" created="Mon, 19 Oct 2009 11:13:41 +0100"  >&lt;blockquote&gt;&lt;p&gt;Going forward, when we fix a bug but need to conditionally preserve the bug for back compat, we should use the version switching so that by default for new users (VERSION_CURRENT or VERSION_XX if XX is the next release) the bug is fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you mean I should add the default ctor of StandardAnalyzer() and rewire it to LUCENE_CURRENT? We have to put this in the docs, that from 3.0 on, the standard analyzer&apos;s default ctor now no longer behaves like 2.4, but always uses the newest features.&lt;/p&gt;

&lt;p&gt;That would help me lot with the tests....&lt;/p&gt;</comment>
                    <comment id="12767299" author="mikemccand" created="Mon, 19 Oct 2009 12:44:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;I did not remove the other version constants, because then we have them and can use them anywhere else. And a user coming from e.g. 2.2 to 3.0 can just use LUCENE_22 to match his old behaviour. The user should be free to give his version he used before for this backwards compatibility.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I think that&apos;s reasonable.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mike: Should I backport the setting for 2.4 to 2.9 to enable plugin-replacements from 2.9.1 to 3.0?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Going forward, when we fix a bug but need to conditionally preserve the bug for back compat, we should use the version switching so that by default for new users (VERSION_CURRENT or VERSION_XX if XX is the next release) the bug is fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you mean I should add the default ctor of StandardAnalyzer() and rewire it to LUCENE_CURRENT?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, I wasn&apos;t clear...&lt;/p&gt;

&lt;p&gt;No &amp;#8211; I don&apos;t think we should ever have a ctor that defaults to LUCENE_CURRENT.  That&apos;s a back compat trap (and it just gets us back to where we started when we had no explicit version).  Users must be explicit about which version they want.&lt;/p&gt;

&lt;p&gt;What I meant was: when fixing some sneaky bug in the future, we should never set the default so that the bug is still present (as we did on the first go of &quot;invalid acronyms&quot;), expecting new users to realize they have to go out of their way to tell Lucene not to emulate the bug.  Instead, the default going forward (if version &amp;gt;= next-release-version) should be &quot;the bug is fixed&quot;.&lt;/p&gt;</comment>
                    <comment id="12767304" author="thetaphi" created="Mon, 19 Oct 2009 12:58:32 +0100"  >&lt;p&gt;OK, I fix the tests using find/grep/sed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12767421" author="thetaphi" created="Mon, 19 Oct 2009 18:52:17 +0100"  >&lt;p&gt;Here 2 mega patches and one backport to 2.9 (want to get this in before 2.9.1):&lt;/p&gt;

&lt;p&gt;All core tests pass, all bw tests pass. Most contrib tests also pass, but we have the following problems and inconsistencies:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;benchmark does not work any longer, because StandardAnalyzer has no default ctor anymore and cannot be instantiated by reflection, same with StopAnalyzer&lt;/li&gt;
	&lt;li&gt;Highlighter only works, if StandardAnalyzer is in 2.4 mde, in 2.9 mode (current) it fails because the position increments of stop words are not correctly respected. This fails in addition/combination with the following:&lt;/li&gt;
	&lt;li&gt;Very bad inconsistency: The default of QueryParser is to ignore position increments, but the current version of StandardAnalyzer uses posIncr for stop words -&amp;gt; b&#228;ng. We should change the default for QueryParser(+ contrib QP), too. There is march rework needed and much documentation. The tests in core now pass, as most parts use StandardAnalyzer in 2.9 mode but have no stop words. And the special tests explicitely set the posIncr flag. This is totally disturbed, it needs fixing! (it also affects 2.9.0, if somebody uses the new StandardAnalyzer with LUCENE_CURRENT).&lt;/li&gt;
	&lt;li&gt;XMLQueryParser also fails with latest StandardAnalyzer version, because it cannot set the flag in QueryParser. In my opinion, the query parser should take the flag from the analyzer, but this is not easy to fix.&lt;/li&gt;
	&lt;li&gt;All contrib analyzers have stopWordPosIncr turned off (backwards compatibility). Maybe we need a Version Parameter in all analyzers there too!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What to do? After this StopFilter/StandardAnalyzer-hell-day Aspirin and Paracetamol and beer is not enough to think clear again...&lt;/p&gt;

&lt;p&gt;And please: next time when we deprecate APIs: remove all deprecated calls from tests and contrib and mark all deprecated-test as such!&lt;/p&gt;</comment>
                    <comment id="12767435" author="rcmuir" created="Mon, 19 Oct 2009 19:17:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;All contrib analyzers have stopWordPosIncr turned off (backwards compatibility). Maybe we need a Version Parameter in all analyzers there too! &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Personally I would not be against this, not sure yet... downside would be more complexity and maintenance&lt;br/&gt;
Upside would be that we could improve these analyzers in various ways, without annoying users&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;benchmark does not work any longer, because StandardAnalyzer has no default ctor anymore and cannot be instantiated by reflection, same with StopAnalyzer &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I also personally like having default ctor... its convienient and nice to be able to look at what these analyzers do in Luke, etc&lt;br/&gt;
But I think this goes against the version flag concept? (because if users just set it to LUCENE_CURRENT then its doing nothing?)&lt;br/&gt;
But I wonder if users do this anyway... maybe the default should really be LUCENE_CURRENT, and if you want the back compat-buggy behavior, the onus is on you as the user to set the flag right if you don&apos;t want to reindex?&lt;/p&gt;
</comment>
                    <comment id="12767449" author="mikemccand" created="Mon, 19 Oct 2009 19:53:44 +0100"  >&lt;blockquote&gt;&lt;p&gt;All contrib analyzers have stopWordPosIncr turned off (backwards compatibility). Maybe we need a Version Parameter in all analyzers there too!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ugh, this is because they embed StopFilter, right?  One option might be to simply keep StopFilter&apos;s deprecated static methods for setting the default?  Though I think adding Version to them over time is the right thing to do (though more work, today).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;benchmark does not work any longer, because StandardAnalyzer has no default ctor anymore and cannot be instantiated by reflection, same with StopAnalyzer&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When the no-arg ctor is unavailable, can we fallback to looking for a ctor that takes Version?  For now we should just pass LUCENE_CURRENT; a future enhancement to benchmark can allow specifying version compat.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The default of QueryParser is to ignore position increments, but the current version of StandardAnalyzer uses posIncr for stop words&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm.  How about adding Version to QP ctor?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And please: next time when we deprecate APIs: remove all deprecated calls from tests and contrib and mark all deprecated-test as such!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, I agree.  I&apos;ll try to do this in the future!&lt;/p&gt;</comment>
                    <comment id="12767450" author="mikemccand" created="Mon, 19 Oct 2009 19:56:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;maybe the default should really be LUCENE_CURRENT, and if you want the back compat-buggy behavior, the onus is on you as the user to set the flag right if you don&apos;t want to reindex?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem is that this is not very different from saying &quot;the onus is on the user to call the setXYZ method to get back  to the old buggy behavior&quot;, which at least last time we discussed back-compat was controversial (ie, it&apos;s a change to our drop-in back-compat policy).&lt;/p&gt;</comment>
                    <comment id="12767453" author="rcmuir" created="Mon, 19 Oct 2009 19:58:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;Ugh, this is because they embed StopFilter, right? One option might be to simply keep StopFilter&apos;s deprecated static methods for setting the default? Though I think adding Version to them over time is the right thing to do (though more work, today).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;not just this. Many use StandardTokenizer, so they have same invalid acronym, etc issues StandardAnalyzer has. But, this versioning/etc is all managed at StandardAnalyzer level (system properties, version numbers, etc)... when it also affects these other analyzers too.&lt;/p&gt;</comment>
                    <comment id="12767463" author="rcmuir" created="Mon, 19 Oct 2009 20:23:46 +0100"  >&lt;blockquote&gt;&lt;p&gt;The problem is that this is not very different from saying &quot;the onus is on the user to call the setXYZ method to get back to the old buggy behavior&quot;, which at least last time we discussed back-compat was controversial (ie, it&apos;s a change to our drop-in back-compat policy).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Michael, yes I agree with you. What I am wondering is: is it really working in practice/in spirit? Forcing the user to supply the version, well it does make them look at the warning in the Version class, which is good.  But nothing stops them from just using CURRENT.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Use this to get the latest &amp;amp; greatest settings, bug fixes, etc, for Lucene.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;followed by the big bold warning about backwards compatibility. just curious what most users are doing, sacrificing drop-in for &quot;latest and greatest?&quot;&lt;/p&gt;

&lt;p&gt;I do think we should do things to improve contrib analyzers that are still stuck with this buggy behavior at some point: i.e &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1373&quot; title=&quot;Most of the contributed Analyzers suffer from invalid recognition of acronyms.&quot;&gt;&lt;del&gt;LUCENE-1373&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
But maybe we don&apos;t need the Version with contrib analyzers, since you should be able to use an older lucene-analyzers jar file with new lucene if you want the back compat????&lt;/p&gt;

&lt;p&gt;(sorry to stray somewhat off-topic)&lt;/p&gt;</comment>
                    <comment id="12767548" author="thetaphi" created="Mon, 19 Oct 2009 22:12:13 +0100"  >&lt;p&gt;To move back to my other problem:&lt;br/&gt;
How to handle the problem with LUCENE_29 setting and the posIncr of stopwords together with QueryParser that has a default setting of ignoring posIncr?:&lt;/p&gt;

&lt;p&gt;This leads to the problem, that a phrase query does not hit anything if you index with StandardAnalyzer=LUCENE_29 and QueryParser using the same analyzer but with setEnablePositionIncrements(false) &lt;span class=&quot;error&quot;&gt;&amp;#91;the current default for QueryParser&amp;#93;&lt;/span&gt;.&lt;/p&gt;</comment>
                    <comment id="12767779" author="mikemccand" created="Tue, 20 Oct 2009 12:51:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;How to handle the problem with LUCENE_29 setting and the posIncr of stopwords together with QueryParser that has a default setting of ignoring posIncr?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How about adding required Version to QP ctor?&lt;/p&gt;</comment>
                    <comment id="12768164" author="thetaphi" created="Wed, 21 Oct 2009 11:26:25 +0100"  >&lt;p&gt;A new patch which resolves the Benchmark problem by adding a static method in NewAnalyzerTask that loads an analyzer by class name:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Analyzer createAnalyzer(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; className) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception{
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Analyzer&amp;gt; clazz = &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;.forName(className).asSubclass(Analyzer.class);
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;code-comment&quot;&gt;// first &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; to use a ctor with version parameter (needed &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; many &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Analyzers that have no &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; one anymore
&lt;/span&gt;      Constructor&amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Analyzer&amp;gt; cnstr = clazz.getConstructor(Version.class);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cnstr.newInstance(Version.LUCENE_CURRENT);
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (NoSuchMethodException nsme) {
      &lt;span class=&quot;code-comment&quot;&gt;// otherwise use &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; ctor
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; clazz.newInstance();
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method is reused at other places where an Analyzer is created by a config property.&lt;/p&gt;

&lt;p&gt;This patch now passes all test. There are still the problems with Analyzer and QueryParsr with wrong default properties, but I would like to commit this first and then solve the problems, also in 2.9.1.&lt;/p&gt;

&lt;p&gt;Mike, are you OK with that?&lt;/p&gt;</comment>
                    <comment id="12768167" author="mikemccand" created="Wed, 21 Oct 2009 11:35:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike, are you OK with that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looks great!  Not only am I OK with it, it&apos;s exactly what I proposed (above &amp;#8211; &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1987?focusedCommentId=12767449&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12767449&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1987?focusedCommentId=12767449&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12767449&lt;/a&gt;).  Maybe you missed my response there?  (I also suggested adding Version to QP ctor).&lt;/p&gt;</comment>
                    <comment id="12768178" author="thetaphi" created="Wed, 21 Oct 2009 12:21:37 +0100"  >&lt;p&gt;I have seen your comment yesterday and implemented the benchmark thing that way.&lt;/p&gt;

&lt;p&gt;The QP ctor with Version param also looks good, but we have to add this to 2.9, too, to be able to remove the no-arg ctor, too.&lt;/p&gt;

&lt;p&gt;My patch still has a failed test int the ant task (missing no-arg ctor), will look into it, but fix is same like for benchmark.&lt;/p&gt;</comment>
                    <comment id="12768182" author="thetaphi" created="Wed, 21 Oct 2009 12:33:01 +0100"  >&lt;p&gt;Fix ant task.&lt;/p&gt;</comment>
                    <comment id="12768190" author="thetaphi" created="Wed, 21 Oct 2009 13:13:11 +0100"  >&lt;p&gt;Committed in 2.9, 3.0, backwards branch.&lt;/p&gt;

&lt;p&gt;For the QueryParser problems and other additions of version constants I will open another issue.&lt;/p&gt;</comment>
                    <comment id="12774617" author="mikemccand" created="Sat, 7 Nov 2009 14:57:30 +0000"  >&lt;p&gt;Bulk close all 2.9.1 issues.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12438367">LUCENE-1989</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12438361">LUCENE-1988</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12438692">LUCENE-2002</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12438740">LUCENE-2003</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12422479" name="LUCENE-1987.patch" size="15177" author="thetaphi" created="Sun, 18 Oct 2009 11:26:16 +0100" />
                    <attachment id="12422447" name="LUCENE-1987.patch" size="14460" author="thetaphi" created="Sat, 17 Oct 2009 11:01:04 +0100" />
                    <attachment id="12422402" name="LUCENE-1987.patch" size="14469" author="thetaphi" created="Fri, 16 Oct 2009 22:36:52 +0100" />
                    <attachment id="12422582" name="LUCENE-1987-StopFilter-backport29.patch" size="2069" author="thetaphi" created="Mon, 19 Oct 2009 18:52:17 +0100" />
                    <attachment id="12422581" name="LUCENE-1987-StopFilter-BW.patch" size="80691" author="thetaphi" created="Mon, 19 Oct 2009 18:52:17 +0100" />
                    <attachment id="12422797" name="LUCENE-1987-StopFilter.patch" size="196931" author="thetaphi" created="Wed, 21 Oct 2009 12:33:01 +0100" />
                    <attachment id="12422792" name="LUCENE-1987-StopFilter.patch" size="194715" author="thetaphi" created="Wed, 21 Oct 2009 11:26:25 +0100" />
                    <attachment id="12422580" name="LUCENE-1987-StopFilter.patch" size="186523" author="thetaphi" created="Mon, 19 Oct 2009 18:52:17 +0100" />
                    <attachment id="12422541" name="LUCENE-1987-StopFilter.patch" size="32337" author="thetaphi" created="Mon, 19 Oct 2009 11:09:40 +0100" />
                    <attachment id="12422540" name="LUCENE-1987-StopFilter.patch" size="32337" author="thetaphi" created="Mon, 19 Oct 2009 10:54:33 +0100" />
                    <attachment id="12422538" name="LUCENE-1987-StopFilter.patch" size="31966" author="thetaphi" created="Mon, 19 Oct 2009 10:44:37 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 18 Oct 2009 13:28:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11784</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25738</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>