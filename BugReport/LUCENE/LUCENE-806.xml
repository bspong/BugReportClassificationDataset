<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:05:43 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-806/LUCENE-806.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-806] Synchronization bottleneck in FieldSortedHitQueue with many concurrent readers</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-806</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The below is from a post by (my colleague) Paul Smith to the java-users list:&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;Hi ho peoples.&lt;/p&gt;

&lt;p&gt;We have an application that is internationalized, and stores data from many languages (each project has it&apos;s own index, mostly aligned with a single language, maybe 2).&lt;/p&gt;

&lt;p&gt;Anyway, I&apos;ve noticed during some thread dumps diagnosing some performance issues, that there appears to be a &lt;em&gt;potential&lt;/em&gt; synchronization bottleneck using Locale-based sorting of Strings.  I don&apos;t think this problem is the root cause of our performance problem, but I thought I&apos;d mention it here.  Here&apos;s the stack dump of a thread waiting:&lt;/p&gt;

&lt;p&gt;&quot;http-1001-Processor245&quot; daemon prio=1 tid=0x31434da0 nid=0x3744 waiting for monitor entry &lt;span class=&quot;error&quot;&gt;&amp;#91;0x2cd44000..0x2cd45f30&amp;#93;&lt;/span&gt;&lt;br/&gt;
        at java.text.RuleBasedCollator.compare(RuleBasedCollator.java)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;waiting to lock &amp;lt;0x6b1e8c68&amp;gt; (a java.text.RuleBasedCollator)&lt;br/&gt;
        at org.apache.lucene.search.FieldSortedHitQueue$4.compare(FieldSortedHitQueue.java:320)&lt;br/&gt;
        at org.apache.lucene.search.FieldSortedHitQueue.lessThan(FieldSortedHitQueue.java:114)&lt;br/&gt;
        at org.apache.lucene.util.PriorityQueue.upHeap(PriorityQueue.java:120)&lt;br/&gt;
        at org.apache.lucene.util.PriorityQueue.put(PriorityQueue.java:47)&lt;br/&gt;
        at org.apache.lucene.util.PriorityQueue.insert(PriorityQueue.java:58)&lt;br/&gt;
        at org.apache.lucene.search.FieldSortedHitQueue.insert(FieldSortedHitQueue.java:90)&lt;br/&gt;
        at org.apache.lucene.search.FieldSortedHitQueue.insert(FieldSortedHitQueue.java:97)&lt;br/&gt;
        at org.apache.lucene.search.TopFieldDocCollector.collect(TopFieldDocCollector.java:47)&lt;br/&gt;
        at org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:291)&lt;br/&gt;
        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:132)&lt;br/&gt;
        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:110)&lt;br/&gt;
        at com.aconex.index.search.FastLocaleSortIndexSearcher.search(FastLocaleSortIndexSearcher.java:90)&lt;br/&gt;
.....&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In our case we had 12 threads waiting like this, while one thread had the lock on the RuleBasedCollator.  Turns out RuleBasedCollator&apos;s.compare(...) method is synchronized.  I wonder if a ThreadLocal based collator would be better here... ?  There doesn&apos;t appear to be a reason for other threads searching the same index to wait on this sort.  Be just as easy to use their own.  (Is RuleBasedCollator a &quot;heavy&quot; object memory wise?  Wouldn&apos;t have thought so, per thread)&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;I&apos;ve investigated this somewhat, and agree that this is a potential problem with a series of possible workarounds. Further discussion (including proof-of-concept patch) to follow.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12363067">LUCENE-806</key>
            <summary>Synchronization bottleneck in FieldSortedHitQueue with many concurrent readers</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="pcowan">Paul Cowan</reporter>
                        <labels>
                    </labels>
                <created>Sat, 17 Feb 2007 03:34:08 +0000</created>
                <updated>Sat, 25 Apr 2009 14:54:57 +0100</updated>
                    <resolved>Sat, 25 Apr 2009 14:54:57 +0100</resolved>
                            <version>2.0.0</version>
                                                <component>core/search</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12473875" author="pcowan" created="Sat, 17 Feb 2007 04:13:05 +0000"  >&lt;p&gt;Just to clarify, the specific issue here is that RuleBasedCollator (the only concrete implementation of Collator in the JDK, and the one that is always returned by Collator.getInstance(Locale)) has a synchronized compare(), meaning that if you have many threads building FieldSortedHitQueues with large results and locale-sensitive sorting, and they share a Collator, they end up waiting for each other in that method (which can obviously be called tens of thousands of times during a very large search). The way to get a Collator is by calling Collator.getInstance(Locale), which makes it look like this problem is the JDK&apos;s fault; however, Collator.getInstance(Locale) actually returns a clone() of the object from the cache. The caching mechanism seems to be to prevent having to rebuld the rule tables, rather than the objects themselves. Therefore, the JDK version balances performance and thread safety quite well. &lt;/p&gt;

&lt;p&gt;On the Lucene end, though, the FieldSortedHitQueue implements its own caching mechanism, meaning that the generated ScoreDocComparators are cached (with no way to disable this behaviour, even if you wanted to). Therefore, one you&apos;ve got your comparator (the unique key being &lt;/p&gt;
{reader, fieldname, type, locale, factory}
&lt;p&gt;), every search using sorting on the same field in the same way on the same reader will use the same Collator, possibly causing a synchronization bottleneck. Even providong your own factory to the SortField doesn&apos;t REALLY help, as they&apos;re cached one level &apos;above&apos; that (you can work around this; see below)&lt;/p&gt;

&lt;p&gt;Attached is a patch which provides a &apos;quick and dirty&apos; way of dealing with this. NOTE: THIS PATCH IS NOT PRODUCTION QUALITY, it&apos;s just a proof of concept. If people like the idea, I&apos;ll tidy it up substantially.&lt;/p&gt;

&lt;p&gt;This works by adding a flag, usePerThreadLocaleComparators, set by a static method, to FieldSortedHitQueue. If this flag is NOT set, behaviour remains the same. If it&apos;s set to true, however, createValue calls a per-thread version of comparatorStringLocale, which returns a simple wrapper ScoreDocComparator which delegates to the one created by comparatorStringLocale, using a ThreadLocal to make sure they&apos;re not shared between threads.&lt;/p&gt;

&lt;p&gt;For demonstration purposes, I have added a quick demo main() method to FieldSortedHitQueue, which does a simple timing test &amp;#8211; 20 threads each inserting 20000 dummy documents into a 200-element FieldSortedHitQueue. Note that it uses CountDownLatches to coordinate the threads, so this dummy test will only run under Java 5. Sorry, but as a quick demo it will do for now. By changing the values of&lt;br/&gt;
    final int threadCount = 20;&lt;br/&gt;
    final int docCount = 10000;&lt;br/&gt;
    final int queueSize = 200;&lt;br/&gt;
you can change the parameters I mentioned above. However, the figures seem to roughly the same proportion regardless of how high or low those numbers are, within reason; the parameters provided are  enough to spend a LOT of time waiting for locks; making them higher doesn&apos;t really make that much difference. If anything, making the queuesize larger makes the new version of the code (with the flag set) look better in comparison. On my dev machine (1.8 GHz Celeron laptop) the test as-is gives the following figures:&lt;br/&gt;
   Shared=5219ms&lt;br/&gt;
   PerThread=2140ms&lt;br/&gt;
this is a pretty substantial difference, and (I think) makes it worth pursuing this further. Your mileage may vary, but between 2x-4x faster seems typical for anywhere above, say, 5 threads, 1000 docs, and queue size of 50.&lt;/p&gt;

&lt;p&gt;So if people are happy for me to proceed down this path, I&apos;m equally happy to tidy up and produce a cleaner, documented etc. version of this patch. However, the more I look at this, the more I&apos;d like to refactor this code &amp;#8211; it&apos;s not the nicest code in Lucene, and I think it could be tidied up (personally). My proposal would be something along the lines of changing all those static methods in FieldSortedHitQueue (comparatorXXXX) to be implementations of SortComparatorSource. There&apos;d be a StringComparatorSource, AutoComparatorSource, etc. Everything in FSHQ would be made to deal with the SortComparatorSources only, abstracting out all the hard work. The logic of the create() method  could be replaced by a PerFieldComparatorSource, which produces one or more of the others depending on the field type, much as it does now. Everything else could be implemented (possibly) using the Decorator pattern to implement new SortComparatorSources. Namely, a CachingComparatorSource would use some sort of caching mechanism (possibly the FieldCacheImpl.Cache, as it does now, though that seems like an odd coupling) to cache the SortComparatorSources produced by the PerFieldComparatorSource; then we&apos;re basically back where we are now. Along comes the PerThreadComparatorSource, which uses ThreadLocals to do basically what my patch above does. All these classes would be available externally, for people to wrap around their own SortComparatorSources when setting up their SortFields; if no factory is provided in the SortField, things work much as they do now.&lt;/p&gt;

&lt;p&gt;What do people think? Is the quick and dirty way (a) worthwhile, and (b) good enough? Should I look at implementing the bigger, fancier patch which will be more work and more complicated but ultimately (I think) make FieldSortedHitQueues much cleaner? Or is there another alternative (for example, another low-impact option would be doing something like what  I&apos;ve done now, but instead using a ThreadLocal in a Comparator implementation, which could mean that the API for FieldSortedHitQueue doesn&apos;t need to change at all). Or is this not worth making part of the source tree, given that there are ways around it (supplying your own SortComparatorSource which manages its own ThreadLocals).  The performance gain IS substantial, though...&lt;/p&gt;

&lt;p&gt;Apologies for length, this is quite a confusing area and I wanted to make sure I hadn&apos;t forgotten anything.&lt;/p&gt;</comment>
                    <comment id="12482965" author="pcowan" created="Thu, 22 Mar 2007 00:07:42 +0000"  >&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;Attached is a patch which BEGINS to address (but by no means completes) the refactoring proposal I mentioned earlier. That is, it works towards removing the logic in FieldSortedHitQueue, replacing all of the comparatorXXX() methods with individual implementations of SortComparatorSource. This lets me work towards the next step, replacing the logic in the FieldCacheImpl.Cache &lt;/p&gt;
{ createValue() }
&lt;p&gt; with another SCS, using some sort of &apos;pluggable&apos; mechanism rather than just creating new SCSes on the fly.&lt;/p&gt;

&lt;p&gt;Attached primarily for review/discussion, as there&apos;s a lot more to do.&lt;/p&gt;</comment>
                    <comment id="12483322" author="otis" created="Thu, 22 Mar 2007 21:07:44 +0000"  >&lt;p&gt;Paul:&lt;br/&gt;
Haven&apos;t looked at the patch, but liked that 2x-4x performance increase (even though I personally don&apos;t use Sort with Locale).  I didn&apos;t follow everything you said, but it sounds like a lot of internal shuffling.  Perhaps, to address just the performance, you can just go with adding ThreadLocal RuleBasedCollators in FSHQ and do the other changes in a separate issue and patch, if people think this would be an improvement.&lt;/p&gt;</comment>
                    <comment id="12483409" author="hossman" created="Fri, 23 Mar 2007 05:37:08 +0000"  >&lt;p&gt;Paul: I have not had a chance to look at your patch (or most patches i&apos;ve wanted to look at the last few weeks) but skimming the mail this sentence jumped out at me...&lt;/p&gt;

&lt;p&gt;&amp;gt; This lets me work towards the next step, replacing the logic in the FieldCacheImpl.Cache &lt;br/&gt;
&amp;gt; &lt;/p&gt;
{ createValue() }
&lt;p&gt; with another SCS, using some sort of &apos;pluggable&apos; mechanism rather &lt;br/&gt;
&amp;gt; than just creating new SCSes on the fly&lt;/p&gt;

&lt;p&gt;I&apos;m curious as to what you think of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-831&quot; title=&quot;Complete overhaul of FieldCache API/Implementation&quot;&gt;LUCENE-831&lt;/a&gt; ... does that patch go in the direction you&apos;re thinking?&lt;/p&gt;


</comment>
                    <comment id="12486252" author="pcowan" created="Tue, 3 Apr 2007 08:35:54 +0100"  >&lt;p&gt;Otis, you&apos;re probably right &amp;#8211; it may not be wise to tackle two birds with one stone. My concern is that if I do this a quick and dirty way, it may involve exposing an API to enable/disable this behaviour which a subsequent refactor would then remove, and I&apos;d obviously rather keep the API stable.&lt;/p&gt;

&lt;p&gt;I&apos;m about to attach 3 patches, with varying levels of effect on the code. I&apos;d be interested to see what people think is the best approach given the possible refactor.&lt;/p&gt;

&lt;p&gt;Hoss, I&apos;ve had a look at your patch, and rather like it. That&apos;s kind of tackling a slightly different problem; that&apos;s cleaning up the FieldCache (which is a great idea) whereas cleaning up FSHQ is only incidentally related to FieldCache. It uses it (and if it was broken up, each comparator source would be using your much cleaner API) but I think the two coexist quite happily. I&apos;d like to see both, in other words!&lt;/p&gt;</comment>
                    <comment id="12486253" author="pcowan" created="Tue, 3 Apr 2007 08:39:15 +0100"  >&lt;p&gt;Minimal ThreadLocal wrapper, Implementation #1: an always-on version. This is used all the time, which may not be ideal (not sure if there are any major disadvantages, mind you; I think ThreadLocals are very low-impact, Collators are quite lightweight, and there shouldn&apos;t be any duplicated object instances floating around)&lt;/p&gt;

&lt;p&gt;Note that with this version, the original comparatorStringLocale() method can be removed; I&apos;ve left it in-place for now though.&lt;/p&gt;</comment>
                    <comment id="12486255" author="pcowan" created="Tue, 3 Apr 2007 08:41:29 +0100"  >&lt;p&gt;Minimal ThreadLocal wrapper, Implementation #2: based on a system property (org.apache.lucene.usePerThreadLocaleComparators). This is messy, but leaves the current behaviour as default and is not unprecedented in the Lucene codebase. If it&apos;s decided the behaviour shouldn&apos;t be &apos;always-on&apos;, this may be the best compromise as it&apos;s still (in a way) exposing a public API, but as it&apos;s a system property it&apos;s less &quot;visible&quot; and it may be less painful if it&apos;s yanked later.&lt;/p&gt;</comment>
                    <comment id="12486256" author="pcowan" created="Tue, 3 Apr 2007 08:43:09 +0100"  >&lt;p&gt;Minimal ThreadLocal wrapper, Implementation #3: public static API. This is the easiest way to do this, but means that if it&apos;s later refactored to be unnecessary (or, more accurately, be done in a cleaner way) the API may get yanked after only a relatively short lifespan.&lt;/p&gt;</comment>
                    <comment id="12563940" author="pcowan" created="Wed, 30 Jan 2008 10:19:38 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;patch crossposted from LUCENE-1162&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Attaching patch (lucene-threadlocal.patch) which provides an alternative solution to the above 3 in a much more high-impact (but more flexible and I think much nicer) way. This builds on my suggested FSHQ architecture improvements (see my first patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1162&quot; title=&quot;Improve architecture of FieldSortedHitQueue&quot;&gt;&lt;del&gt;LUCENE-1162&lt;/del&gt;&lt;/a&gt;) to alleviate the problem in this issue. Enabling this functionality would be as simple as:&lt;br/&gt;
  FieldSortedHitQueue.registerComparatorSource(SortField.STRING, new ThreadLocalStringComparatorSource());&lt;br/&gt;
and the new threadlocal behaviour would take over.&lt;/p&gt;

&lt;p&gt;This patch depends on the previous patch, but provides a new version of StringComparatorSource, which replaces the one from that patch.&lt;/p&gt;</comment>
                    <comment id="12702700" author="markrmiller@gmail.com" created="Sat, 25 Apr 2009 14:54:57 +0100"  >&lt;p&gt;fshq is deprecated - we can reopen if the same thing makes sense for the new api and new code is provided&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12387458">LUCENE-1162</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12354815" name="LUCENE-806-minimal-publicapi.patch" size="6354" author="pcowan" created="Tue, 3 Apr 2007 08:43:09 +0100" />
                    <attachment id="12354814" name="LUCENE-806-minimal-systemproperty.patch" size="6005" author="pcowan" created="Tue, 3 Apr 2007 08:41:28 +0100" />
                    <attachment id="12354812" name="LUCENE-806-minimal-usealways.patch" size="5266" author="pcowan" created="Tue, 3 Apr 2007 08:39:12 +0100" />
                    <attachment id="12351413" name="lucene-806.patch" size="8295" author="pcowan" created="Sat, 17 Feb 2007 04:13:05 +0000" />
                    <attachment id="12353907" name="lucene-806-proposed-direction.patch" size="17119" author="pcowan" created="Thu, 22 Mar 2007 00:07:42 +0000" />
                    <attachment id="12374360" name="lucene-threadlocal.patch" size="6204" author="pcowan" created="Wed, 30 Jan 2008 10:19:37 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 22 Mar 2007 21:07:44 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12934</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26924</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>