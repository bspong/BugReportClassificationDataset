<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:05:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2074/LUCENE-2074.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2074] Use a separate JFlex generated Unicode 4 by Java 5 compatible StandardTokenizer</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2074</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The current trunk version of StandardTokenizerImpl was generated by Java 1.4 (according to the warning). In Java 3.0 we switch to Java 1.5, so we should regenerate the file.&lt;/p&gt;

&lt;p&gt;After regeneration the Tokenizer behaves different for some characters. Because of that we should only use the new TokenizerImpl when Version.LUCENE_30 or LUCENE_31 is used as matchVersion.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12440859">LUCENE-2074</key>
            <summary>Use a separate JFlex generated Unicode 4 by Java 5 compatible StandardTokenizer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Nov 2009 21:30:20 +0000</created>
                <updated>Thu, 2 May 2013 03:29:28 +0100</updated>
                    <resolved>Thu, 8 Apr 2010 23:57:13 +0100</resolved>
                            <version>3.0</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                                                  <comments>
                    <comment id="12778553" author="thetaphi" created="Mon, 16 Nov 2009 21:32:15 +0000"  >&lt;p&gt;Here the patch. It uses an interface containing the needed methods to easyliy switch between both impl. The old one was deprecated and stays there (little modified) without any jflex (which is no longer needed). If we want to change the syntax, we must generate  new JFlex file and reenerate a new parser from it (using separate class name)&lt;/p&gt;</comment>
                    <comment id="12778559" author="simonw" created="Mon, 16 Nov 2009 21:40:16 +0000"  >&lt;p&gt;This might be the wrong place to mention it but I feel bad about this whole Version Enum. It became a pest spread all over the code. Lucene Code begins to look like the C++ Boost library where you see more precompiler statements than template code. We should really try hard to find different solutions than spreading Version all over the place.&lt;br/&gt;
I know this is a hard problem but I want to make sure that we do not spread is out in every corner of the code. The Version thing is already annoying enough in Contrib/analyzer.&lt;/p&gt;</comment>
                    <comment id="12778562" author="thetaphi" created="Mon, 16 Nov 2009 21:41:54 +0000"  >&lt;p&gt;For this one it&apos;s not new, it was there before my patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12778568" author="markrmiller@gmail.com" created="Mon, 16 Nov 2009 21:45:18 +0000"  >&lt;p&gt;I still think we also still need a more prominent warning system.&lt;/p&gt;</comment>
                    <comment id="12778569" author="rcmuir" created="Mon, 16 Nov 2009 21:45:56 +0000"  >&lt;p&gt;I am anti-Version too in a lot of ways. I worry it will spread everywhere and make things a mess, and maybe we can come up with more creative solutions to get rid of it in the future.&lt;/p&gt;

&lt;p&gt;But I think Uwe&apos;s patch is ok, Version was actually created with StandardTokenizer in mind I believe...&lt;/p&gt;</comment>
                    <comment id="12778570" author="simonw" created="Mon, 16 Nov 2009 21:45:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;For this one it&apos;s not new, it was there before my patch  &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is just the latest issue I found related to that stuff. The version member was there already but the conditional was introduced. Don&apos;t get me wrong I just wanna make sure we are not using it as a general purpose conditional! This is going to be a nightmare otherwise. I would only use it if there is NO other way at all.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12778571" author="markrmiller@gmail.com" created="Mon, 16 Nov 2009 21:48:06 +0000"  >&lt;blockquote&gt;&lt;p&gt; We should really try hard to find different solutions than spreading Version all over the place.&lt;br/&gt;
I know this is a hard problem but I want to make sure that we do not spread is out in every corner of the code. The Version thing is already annoying enough in Contrib/analyzer. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem is, these are the hard backwards compat situations that it was created for - the whole analyzer package was/is bound to have lots of Version stuff.&lt;/p&gt;</comment>
                    <comment id="12778573" author="thetaphi" created="Mon, 16 Nov 2009 21:49:10 +0000"  >&lt;p&gt;Updated patch with comment fixed and dead Token-related code removed.&lt;/p&gt;</comment>
                    <comment id="12778574" author="simonw" created="Mon, 16 Nov 2009 21:49:32 +0000"  >&lt;p&gt;nothing against the patch! I just used this issue as a channel and I agree there would have been a better choice though.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12778575" author="thetaphi" created="Mon, 16 Nov 2009 21:50:59 +0000"  >&lt;p&gt;I add the warning to my patch! Thanks. What do you think about the patch, should we go that way?&lt;/p&gt;</comment>
                    <comment id="12778579" author="rcmuir" created="Mon, 16 Nov 2009 21:57:27 +0000"  >&lt;p&gt;Uwe, also, just checking, i don&apos;t know javacc at all, does it use unicode properties? We have a lot of queryparsers out there...&lt;/p&gt;</comment>
                    <comment id="12778580" author="simonw" created="Mon, 16 Nov 2009 21:58:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;The problem is, these are the hard backwards compat situations that it was created for - the whole analyzer package was/is bound to have lots of Version stuff.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Afaik in the contrib/analyzis package this is only used because of STDAnalyzer and StopFilter. It seems like a kind of an overkill. But again I should on do any &quot;issue - high-jacking&quot; here. The thing is even if you come up with a better solution this will most likely stay forever - just like all the IFDEF stuff in Boost &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12778582" author="thetaphi" created="Mon, 16 Nov 2009 21:59:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Uwe, also, just checking, i don&apos;t know javacc at all, does it use unicode properties? We have a lot of queryparsers out there... &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I do not know it, too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The only query parser using jflex is the new one. And the new one should normally use no unicode properties. Can you check the JFlex file? All other query parsers use JavaCC&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;No Jflex is used by any query parser. But WikipediaTokenizer uses JFlex...&lt;/p&gt;</comment>
                    <comment id="12778583" author="mikemccand" created="Mon, 16 Nov 2009 22:02:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;I feel bad about this whole Version Enum&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this is simply a sign of 1) Lucene&apos;s maturity, and 2) that we&lt;br/&gt;
take back compat seriously.  I actually think we don&apos;t yet use it&lt;br/&gt;
enough...&lt;/p&gt;

&lt;p&gt;EG, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1255&quot; title=&quot;CheckIndex should allow term position = -1&quot;&gt;&lt;del&gt;LUCENE-1255&lt;/del&gt;&lt;/a&gt; was one nasty bug, that we at first fixed, but then&lt;br/&gt;
rolled back, because of the back-compat break.  Then it was&lt;br/&gt;
rediscovered and opened again, as &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1542&quot; title=&quot;Lucene can incorrectly set the position of tokens that start a field with positonInc 0.&quot;&gt;&lt;del&gt;LUCENE-1542&lt;/del&gt;&lt;/a&gt;, when we decided it was&lt;br/&gt;
nasty enough to just fix it and put an entry in CHANGES that you&lt;br/&gt;
hopefully will read.&lt;/p&gt;

&lt;p&gt;But it really is a back-compat break, in that apps could quite easily&lt;br/&gt;
be relying on the buggy behavior.  I think that bug would have been a&lt;br/&gt;
good reason to add Version to IW.&lt;/p&gt;

&lt;p&gt;Fixing invalid acronyms in StandardAnalyzer, but then leaving it&lt;br/&gt;
broken by default, was the original &quot;inspiration&quot; for Version.  We&lt;br/&gt;
shouldn&apos;t every fix a bug, but then be forced to leave the bug in&lt;br/&gt;
place due to back compat.&lt;/p&gt;

&lt;p&gt;Version lets us fix bugs, change defaults for the better, etc., w/o&lt;br/&gt;
compromising on our back compat policy.  It&apos;s an impoprtant&lt;br/&gt;
tool...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The problem is, these are the hard backwards compat situations that it was created for - the whole analyzer package was/is bound to have lots of Version stuff.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, I think Version will especially find its way into changes that&lt;br/&gt;
alter what&apos;s indexed (analyzers, bugs like &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1255&quot; title=&quot;CheckIndex should allow term position = -1&quot;&gt;&lt;del&gt;LUCENE-1255&lt;/del&gt;&lt;/a&gt;, etc.).&lt;/p&gt;</comment>
                    <comment id="12778585" author="rcmuir" created="Mon, 16 Nov 2009 22:05:45 +0000"  >&lt;p&gt;well, the wikipediatokenizer at least is similar to standardtokenizer, except it does not use unicodeproperties, instead hardcoded ranges.&lt;/p&gt;

&lt;p&gt;so the behavior won&apos;t change from 2.9.x, but it wont be unicode 4 either, don&apos;t know if we should worry about this?&lt;/p&gt;</comment>
                    <comment id="12778598" author="thetaphi" created="Mon, 16 Nov 2009 22:17:31 +0000"  >&lt;p&gt;It uses hardcode char ranges, the parser is therefore not JDK-dependent. Let&apos;s keep it as it is for now. Mediawiki itsself is not unicode conform, because it&apos;s written in PHP and PHP only gets unicode in 6.0 (&lt;b&gt;lol&lt;/b&gt;) (that says a PHP core committer named U.S. from Bremen in Germany...)&lt;/p&gt;</comment>
                    <comment id="12778614" author="thetaphi" created="Mon, 16 Nov 2009 22:41:34 +0000"  >&lt;p&gt;Should we fix this for 3.0 or not?&lt;br/&gt;
The current JFlex file in trunk/lucene_30 is generated by Java 1.4 (I verified), so it does not break. So we could wait for 3.1 and provide there a new StandardTokenizer with unicode 5 support&lt;/p&gt;</comment>
                    <comment id="12778615" author="rcmuir" created="Mon, 16 Nov 2009 22:45:22 +0000"  >&lt;p&gt;Uwe, we could fix in 3.1 (but we should commit the warning no matter what I think!)&lt;/p&gt;

&lt;p&gt;If we commit for 3.0, then its still not really correct for Unicode 4.&lt;br/&gt;
in my opinion, better would be to wait for 3.1 and use this interface you built, along with a new version of Jflex for much better unicode support?&lt;/p&gt;</comment>
                    <comment id="12778617" author="thetaphi" created="Mon, 16 Nov 2009 22:50:22 +0000"  >&lt;p&gt;This is the patch for version 3.0, that keeps the old jflex file but adds an extra warning.&lt;/p&gt;</comment>
                    <comment id="12778622" author="thetaphi" created="Mon, 16 Nov 2009 22:54:10 +0000"  >&lt;p&gt;Patch for trunk using Version.LUCENE_31&lt;/p&gt;</comment>
                    <comment id="12778799" author="thetaphi" created="Tue, 17 Nov 2009 10:06:13 +0000"  >&lt;p&gt;Do we agree, that this patch should wait for 3.1, as the JFlex parser is already ok and backwards compatible in 3.0, so no need to do anything? In 3.1 together with the other unicode changes, we will update StandardTokenizer with Version.LUCENE_31?&lt;/p&gt;</comment>
                    <comment id="12778858" author="markrmiller@gmail.com" created="Tue, 17 Nov 2009 13:18:49 +0000"  >&lt;p&gt;+1 here&lt;/p&gt;</comment>
                    <comment id="12778922" author="thetaphi" created="Tue, 17 Nov 2009 15:04:13 +0000"  >&lt;p&gt;Committed 3.0 part in revision: 881317&lt;br/&gt;
I also committed this to trunk, to have the warning also in trunk.&lt;/p&gt;</comment>
                    <comment id="12778924" author="thetaphi" created="Tue, 17 Nov 2009 15:07:27 +0000"  >&lt;p&gt;Updated patch for current trunk (merged). It also minimalized the interface declaration for simple upgrades to JFlex 1.5&lt;/p&gt;</comment>
                    <comment id="12784716" author="thetaphi" created="Wed, 2 Dec 2009 08:54:41 +0000"  >&lt;p&gt;I think we can go forward with this now?&lt;/p&gt;

&lt;p&gt;I would like to also add a check in the build.xml, that tests before running jflex, that the Java version is as exspected.&lt;/p&gt;</comment>
                    <comment id="12784720" author="rcmuir" created="Wed, 2 Dec 2009 08:59:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we can go forward with this now? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should we wait for Jflex 1.5? I do not know how close it is. Steven Rowe will know.&lt;br/&gt;
But I think the unicode branch he was working has been merged to their trunk so we could check to make sure your interface will work for it, at the least.&lt;/p&gt;</comment>
                    <comment id="12784788" author="thetaphi" created="Wed, 2 Dec 2009 12:02:45 +0000"  >&lt;p&gt;I tried with JFlex 1.5 svn trunk version from today, built with maven. The produced java file is almost identical, the big array is 100% identical. There are only some new private methods and one switch was reordered. The interface works for both versions, so nothing to change.&lt;/p&gt;

&lt;p&gt;I am not sure, which unicode version this JFlex now uses and if Steven&apos;s changes are in it. I cannot test with Java 1.4, as this version requires 1.5.&lt;/p&gt;

&lt;p&gt;I attached a patch with the difference between the JFlex-1.4.1 on Java 5 generated java file and the snapshot version (also Java 5). You can see that the big DFA array was not changed at all.&lt;/p&gt;</comment>
                    <comment id="12784863" author="rcmuir" created="Wed, 2 Dec 2009 14:56:19 +0000"  >&lt;p&gt;Uwe, I think you need to change your grammar to take advantage of the new  features &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12784865" author="thetaphi" created="Wed, 2 Dec 2009 15:03:49 +0000"  >&lt;p&gt;That&apos;s obvious. But do we want to do this? I thought the only interesting &quot;new feature&quot; was that it uses an internal unicode impl, that is not JVM specific&#180;, so the JVM of the jflex compilation is not relevant. This issue only waits for this, doesn&apos;t it?&lt;/p&gt;

&lt;p&gt;So I think we only have to change the grammar to specify a specific unicode version in the header?&lt;/p&gt;</comment>
                    <comment id="12784867" author="rcmuir" created="Wed, 2 Dec 2009 15:11:11 +0000"  >&lt;p&gt;Uwe, thats not the only interesting new feature. The other is it supports the properties necessary to actually tokenize text according to unicode standards, instead of words just being runs of IsLetter=True. &lt;/p&gt;

&lt;p&gt;You can see such a grammar here: &lt;a href=&quot;http://jflex.svn.sourceforge.net/viewvc/jflex/trunk/testsuite/testcases/src/test/cases/unicode-word-break/UnicodeWordBreakRules_5_2.flex?revision=578&amp;amp;view=markup&quot; class=&quot;external-link&quot;&gt;http://jflex.svn.sourceforge.net/viewvc/jflex/trunk/testsuite/testcases/src/test/cases/unicode-word-break/UnicodeWordBreakRules_5_2.flex?revision=578&amp;amp;view=markup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you should try %unicode 5.2 for now, but we shouldn&apos;t wimp out with that for 3.1.&lt;/p&gt;</comment>
                    <comment id="12784868" author="thetaphi" created="Wed, 2 Dec 2009 15:17:25 +0000"  >&lt;p&gt;So I should also be able to regenerate the old grammar with %Unicode 3.1 (that was the version of JDK 1.4?) - that would be fine, because I could simply provide another grammar file to regenerate all parsers!&lt;/p&gt;

&lt;p&gt;That would be helpful as a first step for 3.1!&lt;/p&gt;</comment>
                    <comment id="12784871" author="rcmuir" created="Wed, 2 Dec 2009 15:20:42 +0000"  >&lt;p&gt;ooh i actually do liek that... it should work... give it a try &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12784872" author="thetaphi" created="Wed, 2 Dec 2009 15:22:43 +0000"  >&lt;p&gt;Accoring to the title of this issue, we should regenerate two parsers with %unicode 3.1 for the legacy !onOrAfter(LUCENE_31) parser and one for Java 5, which is %unicode 4.0. Then we can close the issue and work with later improvements as you suggested (which may be language dependent, what this tokenizer should &lt;b&gt;not&lt;/b&gt; be).&lt;/p&gt;</comment>
                    <comment id="12784877" author="rcmuir" created="Wed, 2 Dec 2009 15:28:17 +0000"  >&lt;p&gt;Uwe I agree, I am just answering your questions about &quot;only interesting new feature&quot;...&lt;/p&gt;

&lt;p&gt;i don&apos;t think we shoudl do anything here (except experiment) until we have an official jflex release either...&lt;/p&gt;</comment>
                    <comment id="12784896" author="thetaphi" created="Wed, 2 Dec 2009 16:56:47 +0000"  >&lt;p&gt;Attached is a patch.&lt;/p&gt;

&lt;p&gt;To regenerate the parsers you can run &quot;ant jflex&quot;, but the sysprop jflex.home has to point to the JFlex trunk checkout, where mvn install has run before (I changed build.xml and common-build.xml to work correctly).&lt;/p&gt;

&lt;p&gt;I added a test that tests the tokenization in Java 1.4 (Version.LUCENE_30) and Java 1.5 mode (Version.LUCENE_CURRENT). There are two JFlex files, one that is Unicode 3.0 (Java 1.4.1) compatible (and even when run in JDK 5, it produces now an Java 1.4 compatible parser!) and one with unicode version 4.0 (Java 5).&lt;/p&gt;</comment>
                    <comment id="12784898" author="rcmuir" created="Wed, 2 Dec 2009 17:00:48 +0000"  >&lt;p&gt;Hi Uwe, do we even need READ_BEFORE_REGENERATING.txt after this patch?&lt;/p&gt;

&lt;p&gt;Will the old jflex fail on %unicode &lt;/p&gt;
{x.y}
&lt;p&gt; syntax ???&lt;/p&gt;</comment>
                    <comment id="12784905" author="thetaphi" created="Wed, 2 Dec 2009 17:20:14 +0000"  >&lt;p&gt;I will try out if it fails. But you cannot even regenerate, because the package name of Flex changed in 1.5 (because of that I had to change build.xml).&lt;/p&gt;

&lt;p&gt;One thing: I will rename the generated classes:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;StandardTokenizerImplOrig (the initial one without Version)&lt;/li&gt;
	&lt;li&gt;StandardTokenizerImpl31 for the new one&lt;/li&gt;
	&lt;li&gt;... newer ones come after that&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;By this whenever we create a new version/syntax, we can name it exactly like the first version it is supported. Will upload (not commit &lt;b&gt;g&lt;/b&gt;) a patch later.&lt;/p&gt;</comment>
                    <comment id="12784906" author="rcmuir" created="Wed, 2 Dec 2009 17:22:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;By this whenever we create a new version/syntax, we can name it exactly like the first version it is supported. Will commit a patch later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;commit a patch? or upload a patch? I still think we should wait for official Jflex release, unless a jflex developer comments on this issue otherwise &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12785037" author="thetaphi" created="Wed, 2 Dec 2009 22:47:46 +0000"  >&lt;p&gt;This patch now implements my latest proposal about the filenames. To easy see, what changed in the TokenizerImpls, the patch cannot be applied before doing some copy/rename before.&lt;/p&gt;

&lt;p&gt;Do the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;svn copy StandardTokenizerImpl.* to StandardTokenizerImplOrig.*&lt;/li&gt;
	&lt;li&gt;svn move StandardTokenizerImpl.* to StandardTokenizerImpl31.*&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After that you have two copies of the original Tokenizer Impls. After that apply the patch. The patch clearly shows, that even after regeneration with Java 1.5, the original version using Java 1.4 (Unicode 3) is equal to before (esp. the DFA matrix). The 31-version is different (other matrix).&lt;/p&gt;

&lt;p&gt;If we later create new versions, we can call them 32 etc.&lt;/p&gt;

&lt;p&gt;This patch solves the JFlex 1.4 problem with needing the explicit java version. It currently requires the trunk version of JFlex, which would be no problem for this parsers (as verified, that they produce the same DFA &amp;amp; code for 1.4). So other speak up, Steven Rowe? What do you think. Only developers need the trunk version at the moment as the generated files are in the checkout.&lt;/p&gt;

&lt;p&gt;Hopefully JFlex 1.5 comes out until we release 3.1, I would be happy. In later issues we can optimize the newly added 31 version with more unicode features, the Orig version stays as it is. We could also remove the special cases in the latest version like replaceInvlaidAcronym and so on, as this only applies for Version.LUCENE_2x.&lt;/p&gt;</comment>
                    <comment id="12785344" author="steve_rowe" created="Thu, 3 Dec 2009 14:40:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will the old jflex fail on %unicode {x.y} syntax ???&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t tested it, but JFlex &amp;lt;1.5 likely will fail on this syntax, since nothing is expected after the %unicode directive.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hopefully JFlex 1.5 comes out until we release 3.1, I would be happy.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the JFlex 1.5 release will happen before March of next year, since we&apos;re down to just a few blocking issues.&lt;/p&gt;</comment>
                    <comment id="12785348" author="thetaphi" created="Thu, 3 Dec 2009 14:58:01 +0000"  >&lt;p&gt;Thanks Steve.&lt;/p&gt;

&lt;p&gt;Do you see a problem with just requiring Flex 1.5 for Lucene trunk at the moment? It would hep us to not require a Java 1.4 JRE just to convert the jflex files.&lt;/p&gt;

&lt;p&gt;The new parsers (see patch) are pre-generated in SVN, so somebody compiling lucene from source does need to use jflex. And the parsers for StandardTokenizer are verified to work correct and are even identical (DFA wise) for the old Java 1.4 / Unicode 3.0 case.&lt;/p&gt;</comment>
                    <comment id="12785414" author="steve_rowe" created="Thu, 3 Dec 2009 17:47:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you see a problem with just requiring Flex 1.5 for Lucene trunk at the moment?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it&apos;s fine to do that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The new parsers (see patch) are pre-generated in SVN, so somebody compiling lucene from source does need to use jflex. And the parsers for StandardTokenizer are verified to work correct and are even identical (DFA wise) for the old Java 1.4 / Unicode 3.0 case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Most of the StandardTokenizerImpl.jflex grammar is expressed in absolute terms - the only JVM-/Unicode-version-sensistive usages are &lt;span class=&quot;error&quot;&gt;&amp;#91;:letter:&amp;#93;&lt;/span&gt; and &lt;span class=&quot;error&quot;&gt;&amp;#91;:digit:&amp;#93;&lt;/span&gt;, which under JFlex &amp;lt;1.5 were expanded using the scanner-generation-time JVM&apos;s Character.isLetter() and .isDigit() definitions, but under JFlex 1.5-SNAPSHOT depend on the declared Unicode version definitions (i.e., &lt;span class=&quot;error&quot;&gt;&amp;#91;:letter:&amp;#93;&lt;/span&gt; = \p&lt;/p&gt;
{Letter}
&lt;p&gt;).&lt;/p&gt;

&lt;p&gt;I&apos;m actually surprised that the DFAs are identical, since I&apos;m almost certain that the set of characters matching &lt;span class=&quot;error&quot;&gt;&amp;#91;:letter:&amp;#93;&lt;/span&gt; changed between Unicode 3.0 and Unicode 4.0 (maybe &lt;span class=&quot;error&quot;&gt;&amp;#91;:digit:&amp;#93;&lt;/span&gt; too).  I&apos;ll take a look this weekend.&lt;/p&gt;</comment>
                    <comment id="12785416" author="thetaphi" created="Thu, 3 Dec 2009 17:52:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m actually surprised that the DFAs are identical, since I&apos;m almost certain that the set of characters matching &lt;span class=&quot;error&quot;&gt;&amp;#91;:letter:&amp;#93;&lt;/span&gt; changed between Unicode 3.0 and Unicode 4.0 (maybe &lt;span class=&quot;error&quot;&gt;&amp;#91;:digit:&amp;#93;&lt;/span&gt; too). I&apos;ll take a look this weekend.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because of that we have the patch: We now have two flex files, one with %unicode 3.0, which produces the same DFA as the old flex file when processed with Java 1.4 (as it was in Lucene 2.x). This is used for backwards compatibiulity (using the matchVersion parameter of ctor).&lt;/p&gt;

&lt;p&gt;For later Lucene versions we will have a new jflex file (currently unicode 4.0) and that produces the same matrix as java 1.5 in jflex 1.4 (at the moment).&lt;/p&gt;

&lt;p&gt;By that we simply made the parser regeneration invariant to the developer&apos;s JVM. About nothing more is this issue at the moment.&lt;/p&gt;</comment>
                    <comment id="12785524" author="steve_rowe" created="Thu, 3 Dec 2009 21:10:35 +0000"  >&lt;p&gt;Thanks, Uwe, that makes sense.  My bad, I only skimmed the patch, and misunderstood &quot;3.0&quot; in one of the new files to refer to the Lucene version, not the Unicode version. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12838101" author="rcmuir" created="Thu, 25 Feb 2010 00:01:04 +0000"  >&lt;p&gt;Uwe, given Steven&apos;s comment above, I think we should move forward with this issue and flex 1.5?&lt;/p&gt;</comment>
                    <comment id="12838216" author="thetaphi" created="Thu, 25 Feb 2010 07:11:06 +0000"  >&lt;p&gt;I will update the patch (using TEST_VERSION and so on) later and then we can proceed.&lt;/p&gt;</comment>
                    <comment id="12838248" author="thetaphi" created="Thu, 25 Feb 2010 08:39:16 +0000"  >&lt;p&gt;Here updated patch, svn copy/move before apply as mentioned above.&lt;/p&gt;</comment>
                    <comment id="12854882" author="thetaphi" created="Thu, 8 Apr 2010 11:03:02 +0100"  >&lt;p&gt;As requested on the mailing list, I will look into resetting the zzBuffer on Tokenizer.reset(Reader).&lt;/p&gt;</comment>
                    <comment id="12854885" author="shaie" created="Thu, 8 Apr 2010 11:09:41 +0100"  >&lt;p&gt;Uwe, must this be coupled with that issue? This one waits for a long time (why? for JFlex 1.5 release?) and protecting against a huge buffer allocation can be a real quick and tiny fix. And this one also focuses on getting Unicode 5 to work, which is unrelated to the buffer size. But the buffer size is not a critical issue either that we need to move fast with it ... so it&apos;s your call. Just thought they are two unrelated problems.&lt;/p&gt;</comment>
                    <comment id="12854886" author="thetaphi" created="Thu, 8 Apr 2010 11:13:36 +0100"  >&lt;p&gt;I plan to commit this soon! So any patch will get outdated, thats why i want to fix this here. And as this patch removes direct access from the Tokenizer to the lexer (as it is only accessible through an interface now), we have to change the jflex file to do it &quot;correctly&quot;.&lt;/p&gt;</comment>
                    <comment id="12854887" author="shaie" created="Thu, 8 Apr 2010 11:19:00 +0100"  >&lt;blockquote&gt;&lt;p&gt;I plan to commit this soon! &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s great news !&lt;/p&gt;

&lt;p&gt;BTW - what are you going to do w/ the JFlex 1.5 binary? Are you going to check it in somewhere? because it hasn&apos;t been released last I checked. I&apos;m asking for general knowledge, because I know the scripts are downloading it, or rely on it to exist somewhere.&lt;/p&gt;

&lt;p&gt;In that case, then yes, let&apos;s fix it here.&lt;/p&gt;</comment>
                    <comment id="12854890" author="thetaphi" created="Thu, 8 Apr 2010 11:23:06 +0100"  >&lt;p&gt;You dont need the jflex binaries in general, only if you reconstruct the source files (using &quot;ant jflex&quot;). And its easy to generate, check out and start &quot;mvn install&quot;.&lt;/p&gt;</comment>
                    <comment id="12854893" author="thetaphi" created="Thu, 8 Apr 2010 11:36:49 +0100"  >&lt;p&gt;Here a new patch, with the zzBuffer reset to default implemented in a separate reset(Reader) method. As yyReset is generated as final, I had to change the name.&lt;/p&gt;

&lt;p&gt;Before apply, run:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn copy StandardTokenizerImpl.* to StandardTokenizerImplOrig.* 
svn move StandardTokenizerImpl.* to StandardTokenizerImpl31.* 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I will commit this in a day or two!&lt;/p&gt;</comment>
                    <comment id="12854898" author="thetaphi" created="Thu, 8 Apr 2010 12:00:50 +0100"  >&lt;p&gt;Updated also the error message about missing jflex when calling &quot;ant jflex&quot; to regenerate the lexers. The message now contains instructions for downloading and building JFlex. Also add CHANGES.txt.&lt;/p&gt;</comment>
                    <comment id="12854899" author="markrmiller@gmail.com" created="Thu, 8 Apr 2010 12:02:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;Uwe, must this be coupled with that issue? This one waits for a long time (why? for JFlex 1.5 release?) and protecting against a huge buffer allocation can be a real quick and tiny fix. And this one also focuses on getting Unicode 5 to work, which is unrelated to the buffer size. But the buffer size is not a critical issue either that we need to move fast with it ... so it&apos;s your call. Just thought they are two unrelated problems.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. Whether its fixed as part of this commit or not, it really deserves its own issue anyway, for changes and tracking. It has nothing to do with this issue other than convenience. &lt;/p&gt;</comment>
                    <comment id="12854900" author="thetaphi" created="Thu, 8 Apr 2010 12:06:42 +0100"  >&lt;p&gt;Created sub-issue: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2384&quot; title=&quot;Reset zzBuffer in StandardTokenizerImpl* when lexer is reset.&quot;&gt;&lt;del&gt;LUCENE-2384&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12855185" author="thetaphi" created="Thu, 8 Apr 2010 23:15:06 +0100"  >&lt;p&gt;New patch with replacement of deprecated TermAttribute -&amp;gt; CharTermAttribute. It also fixes the reset()/reset(Reader) methods to be conform to all other Tokenizers and the documentations. The current one was resetting multiple times. This has no effect on backwards. Also improve the JFlex classpath detection to work with svn checkouts or future release zips.&lt;/p&gt;

&lt;p&gt;I will commit this soon when all tests ran.&lt;/p&gt;</comment>
                    <comment id="12855197" author="thetaphi" created="Thu, 8 Apr 2010 23:57:13 +0100"  >&lt;p&gt;Committed revision: 932163&lt;/p&gt;</comment>
                    <comment id="13013518" author="gsingers" created="Wed, 30 Mar 2011 16:50:32 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12461522">LUCENE-2384</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12447097">LUCENE-2244</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12426659" name="jflex-1.4.1-vs-1.5-snapshot.diff" size="4787" author="thetaphi" created="Wed, 2 Dec 2009 12:02:44 +0000" />
                    <attachment id="12425152" name="jflexwarning.patch" size="719" author="markrmiller@gmail.com" created="Mon, 16 Nov 2009 21:45:18 +0000" />
                    <attachment id="12425161" name="LUCENE-2074-lucene30.patch" size="3367" author="thetaphi" created="Mon, 16 Nov 2009 22:50:22 +0000" />
                    <attachment id="12441215" name="LUCENE-2074.patch" size="71052" author="thetaphi" created="Thu, 8 Apr 2010 23:15:06 +0100" />
                    <attachment id="12441138" name="LUCENE-2074.patch" size="68760" author="thetaphi" created="Thu, 8 Apr 2010 12:03:03 +0100" />
                    <attachment id="12441135" name="LUCENE-2074.patch" size="66247" author="thetaphi" created="Thu, 8 Apr 2010 11:36:49 +0100" />
                    <attachment id="12436977" name="LUCENE-2074.patch" size="64765" author="thetaphi" created="Thu, 25 Feb 2010 08:39:16 +0000" />
                    <attachment id="12426708" name="LUCENE-2074.patch" size="66993" author="thetaphi" created="Wed, 2 Dec 2009 22:47:46 +0000" />
                    <attachment id="12426682" name="LUCENE-2074.patch" size="55950" author="thetaphi" created="Wed, 2 Dec 2009 16:56:47 +0000" />
                    <attachment id="12425227" name="LUCENE-2074.patch" size="41317" author="thetaphi" created="Tue, 17 Nov 2009 15:07:27 +0000" />
                    <attachment id="12425164" name="LUCENE-2074.patch" size="42037" author="thetaphi" created="Mon, 16 Nov 2009 22:54:10 +0000" />
                    <attachment id="12425153" name="LUCENE-2074.patch" size="41079" author="thetaphi" created="Mon, 16 Nov 2009 21:49:10 +0000" />
                    <attachment id="12425145" name="LUCENE-2074.patch" size="41309" author="thetaphi" created="Mon, 16 Nov 2009 21:32:15 +0000" />
                </attachments>
            <subtasks>
            <subtask id="12461522">LUCENE-2384</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 16 Nov 2009 21:40:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11704</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25651</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>