<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:02:09 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2609/LUCENE-2609.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2609] Generate jar containing test classes.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2609</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The test classes are useful for writing unit tests for code external to the Lucene project. It would be helpful to build a jar of these classes and publish them as a maven dependency.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12472184">LUCENE-2609</key>
            <summary>Generate jar containing test classes.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="steve_rowe">Steve Rowe</assignee>
                                <reporter username="drew.farris">Drew Farris</reporter>
                        <labels>
                    </labels>
                <created>Sun, 22 Aug 2010 13:18:39 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:14 +0100</updated>
                    <resolved>Fri, 25 Mar 2011 22:13:00 +0000</resolved>
                            <version>3.0.2</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>3.2</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>general/build</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12901154" author="drew.farris" created="Sun, 22 Aug 2010 13:19:51 +0100"  >&lt;p&gt;Here&apos;s the patch.&lt;/p&gt;</comment>
                    <comment id="12901394" author="gsingers" created="Mon, 23 Aug 2010 14:32:17 +0100"  >&lt;p&gt;Drew,&lt;/p&gt;

&lt;p&gt;If you want this to be pub&apos;d as a maven dependency, it&apos;s going to need a POM template for it.  Also, I don&apos;t see the files actually included in the distribution (ant dist)&lt;/p&gt;

&lt;p&gt;-Grant&lt;/p&gt;</comment>
                    <comment id="12901523" author="drew.farris" created="Mon, 23 Aug 2010 19:26:29 +0100"  >&lt;p&gt;Grant, thanks for taking the time to look at this. &lt;/p&gt;

&lt;p&gt;The -tests jar is similar in nature to the -src and -javadoc jars. It gets pushed to the maven repo by virtue of attaching it to the core jar artifact. A separate pom is not needed in this case and the tests jar can be added as a dependency using something like the following:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.apache.lucene&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;lucene-core&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${lucene.version}&amp;lt;/version&amp;gt;
      &amp;lt;classifier&amp;gt;tests&amp;lt;/classifier&amp;gt;
      &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Good point about including the -tests jar in the dist. This updated patch adds the -tests jar to the distribution. The core-javadoc and core-src, demo-javadoc and demo-src files were also not present in the distribution so I added these as well.&lt;/p&gt;





</comment>
                    <comment id="12904330" author="gsingers" created="Mon, 30 Aug 2010 21:38:25 +0100"  >&lt;p&gt;ant generate-maven-artifacts does not appear to work.  I don&apos;t think it is the fault of this patch, but until it does, I can&apos;t test this.&lt;/p&gt;</comment>
                    <comment id="12904337" author="drew.farris" created="Mon, 30 Aug 2010 22:13:39 +0100"  >&lt;p&gt;Grant, I&apos;ll take a look. So I can reproduce the issue you&apos;re running into, which directory are you executing &apos;ant generate-maven-artifacts&apos; from, branch_3x or branch_3x/lucene?&lt;/p&gt;
</comment>
                    <comment id="12904367" author="gsingers" created="Mon, 30 Aug 2010 23:08:43 +0100"  >&lt;p&gt;Both trunk and 3.x of Lucene.&lt;/p&gt;</comment>
                    <comment id="12904595" author="gsingers" created="Tue, 31 Aug 2010 11:59:10 +0100"  >&lt;p&gt;The issue is the artifact id, etc. are not being set.  There is some Ant variable $&lt;/p&gt;
{maven.final.build.name}
&lt;p&gt; or something that is not set, AFAICT.&lt;/p&gt;</comment>
                    <comment id="12904613" author="drew.farris" created="Tue, 31 Aug 2010 13:46:38 +0100"  >&lt;p&gt;Grant, What version of maven-ant-tasks are you running? I recall having a similar problem until I updated to 2.1.1 (with ant 1.7.1)&lt;/p&gt;</comment>
                    <comment id="12987404" author="shaie" created="Thu, 27 Jan 2011 06:46:40 +0000"  >&lt;p&gt;Was the purpose of this issue to create a .jar with all test classes, or just the classes that comprise the framework, e.g. LuceneTestCase, MockAnalyzer, RandomIndexWriter etc.? I was thinking we want to publish just a select few of classes with perhaps a README which explains what each class does. I think it&apos;ll be more compelling to users, than a 7 MB .jar, no?&lt;/p&gt;</comment>
                    <comment id="12987406" author="simonw" created="Thu, 27 Jan 2011 06:51:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;think it&apos;ll be more compelling to users, than a 7 MB .jar, no?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this includes the testindices for bw. etc. too - I think Shai is right here - did you have any particular class in mind grant?&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12987424" author="shaie" created="Thu, 27 Jan 2011 07:52:42 +0000"  >&lt;p&gt;The generated .jar is too big (7 MB) for someone to do something useful with it. Mostly because it contains the test indices and all the test classes. I think instead we should have a tiny .jar with few selected files that comprise our &apos;test framework&apos;. I found a way to do that in Ant, so I&apos;ll add a patch shortly. Also, I think &quot;jar-core-test&quot; should be in build.xml and not common-build.xml &amp;#8211; it should only be run from the root folder.&lt;/p&gt;</comment>
                    <comment id="12987427" author="thetaphi" created="Thu, 27 Jan 2011 08:00:47 +0000"  >&lt;p&gt;+1, the main problem with this JAR file is currently that it&apos;s useless as you cannot run the tests from it (mainly because lots of tests need the test indexes as real files in the classpath). Its only useful to get e.g. LuceneTestCase and Mock*.&lt;/p&gt;

&lt;p&gt;I was thinking of putting the whole test base classes into a separate folder and compile separate before the main task. The problem with selecting a subset of .class files from an already built tree is, that you cannot be sure that the extraction is self-contained (so there are lots of dependencies and all those anonymous inner classes).&lt;/p&gt;</comment>
                    <comment id="12987429" author="simonw" created="Thu, 27 Jan 2011 08:07:05 +0000"  >&lt;p&gt;Hey shai,&lt;/p&gt;

&lt;p&gt;I just collected some classes I would find useful for testing applications. &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;/lucene/src/test/org/apache/lucene/util/_TestUtil.java
/lucene/src/test/org/apache/lucene/util/LineFileDocs.java
/lucene/src/test/org/apache/lucene/util/LuceneJUnitDividingSelector.java
/lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
/lucene/src/test/org/apache/lucene/util/LuceneTestCase.java

/lucene/src/test/org/apache/lucene/search/QueryUtils.java
/lucene/src/test/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
/lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java
/lucene/src/test/org/apache/lucene/analysis/MockPayloadAnalyzer.java
/lucene/src/test/org/apache/lucene/analysis/MockTokenFilter.java
/lucene/src/test/org/apache/lucene/analysis/MockTokenizer.java

/lucene/src/test/org/apache/lucene/index/MockIndexInput.java
/lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java
/lucene/src/test/org/apache/lucene/index/DocHelper.java

/lucene/src/test/org/apache/lucene/codecs/preflexrw/PreFlexFieldsWriter.java
/lucene/src/test/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec.java
/lucene/src/test/org/apache/lucene/codecs/preflexrw/TermInfosWriter.java
/lucene/src/test/org/apache/lucene/codecs/mockrandom/MockRandomCodec.java

/lucene/src/test/org/apache/lucene/store/_TestHelper.java
/lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java
/lucene/src/test/org/apache/lucene/store/MockIndexInputWrapper.java
/lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper.java

/lucene/src/test/org/apache/lucene/util/automaton/AutomatonTestUtil.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I think &quot;jar-core-test&quot; should be in build.xml and not common-build.xml - it should only be run from the root folder.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12987436" author="shaie" created="Thu, 27 Jan 2011 08:45:55 +0000"  >&lt;ul&gt;
	&lt;li&gt;Moves jar-core-test to build.xml&lt;/li&gt;
	&lt;li&gt;Adds dev-tools/testjar/testfiles with a list of files (includes what Simon listed so far) &amp;#8211; we can add more as we go
	&lt;ul&gt;
		&lt;li&gt;Both .java and .class are added.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12987444" author="thetaphi" created="Thu, 27 Jan 2011 09:02:15 +0000"  >&lt;p&gt;+1&lt;br/&gt;
That was exactly wht I had in mind. I would only prefer to have 2 jar files, tests-src.jar and tests.jar&lt;/p&gt;</comment>
                    <comment id="12987447" author="simonw" created="Thu, 27 Jan 2011 09:14:42 +0000"  >&lt;p&gt;looks good to me!&lt;/p&gt;</comment>
                    <comment id="12987450" author="shaie" created="Thu, 27 Jan 2011 09:16:57 +0000"  >&lt;p&gt;I think two files for such a tiny .jar is an overkill. I don&apos;t mind splitting them up to test-src.zip and tests.jar if it matters much. Otherwise, I think I&apos;ll commit this and we can add more classes to the &apos;testfiles&apos; as we go along.&lt;/p&gt;</comment>
                    <comment id="12987460" author="thetaphi" created="Thu, 27 Jan 2011 09:38:48 +0000"  >&lt;p&gt;Commit it, was just a suggestion because I am anti-mixed-jars.&lt;/p&gt;</comment>
                    <comment id="12987474" author="shaie" created="Thu, 27 Jan 2011 10:11:41 +0000"  >&lt;p&gt;Committed revision 1064066 (3x).&lt;br/&gt;
Committed revision 1064068 (trunk) &amp;#8211; added more files to testfiles that exist only in trunk.&lt;/p&gt;</comment>
                    <comment id="12987496" author="rcmuir" created="Thu, 27 Jan 2011 11:01:44 +0000"  >&lt;p&gt;I don&apos;t know about the changes here guys... if I add a new test class&lt;br/&gt;
and one of these test jars depends upon it, then suddenly this thing breaks?&lt;/p&gt;

&lt;p&gt;I think it should be the huge jar file, or no test jar file at all.&lt;/p&gt;

&lt;p&gt;otherwise this change is making it harder for us to improve tests.&lt;/p&gt;</comment>
                    <comment id="12987497" author="rcmuir" created="Thu, 27 Jan 2011 11:02:26 +0000"  >&lt;p&gt;Reopening for discussion: I&apos;m not happy with the tradeoff that its harder for us&lt;br/&gt;
to improve/maintain tests at the expense of the special jars.&lt;/p&gt;</comment>
                    <comment id="12987499" author="shaie" created="Thu, 27 Jan 2011 11:07:38 +0000"  >&lt;p&gt;This is good point Robert, but I don&apos;t like the one huge .jar either, just because it contains everything. I think that it&apos;s ok if this .jar breaks - we don&apos;t guarantee anything. If something breaks, we can add the needed classes?&lt;/p&gt;

&lt;p&gt;I see a different tradeoff: &apos;maybe&apos; breaking an unsupporte .jar to &apos;always&apos; fetching a 7MB useless file ...&lt;/p&gt;

&lt;p&gt;I don&apos;t think this should hold us back when maintaining tests. It&apos;s like &quot;ant eclipse/idea/maven&quot; &amp;#8211; not too many guarantees besides &quot;we&apos;re gonna do the best we can to maintain it&quot; (it being the .jar, not tests).&lt;/p&gt;</comment>
                    <comment id="12987502" author="rcmuir" created="Thu, 27 Jan 2011 11:16:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t think this should hold us back when maintaining tests. It&apos;s like &quot;ant eclipse/idea/maven&quot; - not too many guarantees besides &quot;we&apos;re gonna do the best we can to maintain it&quot; (it being the .jar, not tests).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;except its called from &apos;ant package&apos;, so I will see &apos;BUILD FAILED&apos; if i refactor something that breaks this (lets say I split up LuceneTestCase, etc).&lt;/p&gt;

&lt;p&gt;Furthermore, take an example where i add something to LuceneTestCase, where it reads data from a 10MB file, or something that breaks this design.&lt;br/&gt;
If my idea is good for tests, it should be committed, and not &quot;reconsidered because of test.jar packaging&quot;.&lt;br/&gt;
This example is a totally ridiculous/absurd/extreme one: but there are also cases not-so-extreme.&lt;/p&gt;

&lt;p&gt;I think its vital that its easy for us to be able to refactor tests with wreckless abandon with only three goals in mind:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Test Coverage&lt;/li&gt;
	&lt;li&gt;Test Coverage&lt;/li&gt;
	&lt;li&gt;Test Coverage&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I am getting worried that src/test starts getting held to a &quot;higher standard&quot; here, when its a tool to ensure test coverage.&lt;br/&gt;
I agree when possible, we should try to keep the code quality high in src/test, but this is really just completely optional.&lt;/p&gt;</comment>
                    <comment id="12987508" author="gsingers" created="Thu, 27 Jan 2011 11:39:43 +0000"  >&lt;p&gt;Mostly, I think I need the SolrTestCaseJ4 (and thus the Lucene test case, Solr change is coming soon) as it is really useful for writing down stream tests that test applications that use Lucene/Solr, but if it&apos;s too big of a problem, I&apos;m fine with reverting this and Drew and I can just publish our own Jar file.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;except its called from &apos;ant package&apos;, so I will see &apos;BUILD FAILED&apos; if i refactor something that breaks this (lets say I split up LuceneTestCase, etc).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While agree with the &quot;Build Failed&quot; notion in general, I often think that it&apos;s a bit short sighted in that we make something marginally less annoying for us the committers (really, is it that hard to fix?) and much harder for our users b/c they have to go re-invent the wheel.  Not everyone is an expert.  We have to balance those two.  I think instead of putting up roadblocks on principal to these kinds of things, we need to figure out ways to automate them and validate them so that it is hard to break.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I see a different tradeoff: &apos;maybe&apos; breaking an unsupporte .jar to &apos;always&apos; fetching a 7MB useless file ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As for the 7mb file, really, that&apos;s an issue these days?  OK, well if it is useless than maybe, but...  At any rate, what, does that take like 30 seconds to download, tops?  I downloaded the Freebase dataset last night (1.6GB) for fun!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Committed revision 1064066 (3x).&lt;br/&gt;
Committed revision 1064068 (trunk) - added more files to testfiles that exist only in trunk. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How about some common courtesy here?  Making a decision in the middle of the night (for me) to commit something I was working on without getting my input is pretty rude.  Is the issue really that urgent that it couldn&apos;t wait a few hours?  I mean were you all of a sudden forced to download a 7mb file?&lt;/p&gt;</comment>
                    <comment id="12987509" author="rcmuir" created="Thu, 27 Jan 2011 11:39:47 +0000"  >&lt;p&gt;Just to sum up, I think we should go back to the huge jar like the initial patch.&lt;/p&gt;

&lt;p&gt;I had no problems with this: its a test jar, its going to be part of someone&apos;s test infrastructure &lt;br/&gt;
(not shipped to clients or anything). So I think size is not really a concern here, unlike the &lt;br/&gt;
lucene-core jar for example.&lt;/p&gt;

&lt;p&gt;Furthermore, if someone is concerned about size for some reason, lets place that  burden &lt;br/&gt;
on them to deal with (e.g. just taking the classes they care about), instead of on us.&lt;/p&gt;</comment>
                    <comment id="12987512" author="rcmuir" created="Thu, 27 Jan 2011 11:46:56 +0000"  >&lt;blockquote&gt;
&lt;p&gt;While agree with the &quot;Build Failed&quot; notion in general, I often think that it&apos;s a bit short sighted in that we make something marginally less annoying for us the committers (really, is it that hard to fix?) and much harder for our users b/c they have to go re-invent the wheel. Not everyone is an expert. We have to balance those two. I think instead of putting up roadblocks on principal to these kinds of things, we need to figure out ways to automate them and validate them so that it is hard to break.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hard to break what? I dont think we should have to jump through hoops to improve tests...&lt;br/&gt;
I guess where we disagree here is that I don&apos;t think tests are for end users, they are for development.&lt;br/&gt;
I don&apos;t think there is a balance here at all, its 100% tipped in favor of our test coverage.&lt;/p&gt;

&lt;p&gt;If we can jar all them up easily, like this original patch (which won&apos;t slow down development at all,&lt;br/&gt;
since it will just compile all of them, no additional maintenance cost), then thats great if someone&lt;br/&gt;
can make use of them...&lt;/p&gt;</comment>
                    <comment id="12987513" author="gsingers" created="Thu, 27 Jan 2011 11:53:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hard to break what?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I just meant in general I agree w/ the build failed principal, but some of these development tools/tests are really useful, so I&apos;m inclined to want to add them even if it makes things marginally harder for us.&lt;/p&gt;

&lt;p&gt;And, yes, I agree we should do the whole jar. &lt;/p&gt;</comment>
                    <comment id="12987514" author="shaie" created="Thu, 27 Jan 2011 11:55:21 +0000"  >&lt;p&gt;So Robert, I don&apos;t really follow the BUILD FAILURE thing - what could fail? Those files are compiled against the test.classpath so whatever changes you make to test classes, this sample of files won&apos;t be affected at compile time. It&apos;s only at runtime, meaning when someone actually integrating them into his test env. that a problem may be discovered.&lt;/p&gt;

&lt;p&gt;If you split LTC to LTC1 and LTC2, then all it means is that LTC won&apos;t be included (b/c the copy task won&apos;t find it) and we&apos;ll need to fix the testfiles file to include LTC1 and 2.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How about some common courtesy here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Grant, I didn&apos;t mean to hastily commit something in the middle of your night, in order to slip it through. We did discuss it here and over IRC and it seemed ok to commit. And it was part of rapid issues solving phase. Sorry if I offended you in any way.&lt;/p&gt;

&lt;p&gt;We can jar up all *.java to reduce the file size. I&apos;m not too concerned about the file size but more of the usability of it. If we&apos;re doing some service, then let&apos;s do it properly. If we jar dozens, or tens of dozens of .java files, how will users use the .jar? Vs if we just jar the relevant classes that make up the framework?&lt;/p&gt;</comment>
                    <comment id="12987515" author="rcmuir" created="Thu, 27 Jan 2011 12:01:34 +0000"  >&lt;blockquote&gt;
&lt;p&gt;We can jar up all *.java to reduce the file size. I&apos;m not too concerned about the file size but more of the usability of it. If we&apos;re doing some service, then let&apos;s do it properly. If we jar dozens, or tens of dozens of .java files, how will users use the .jar? Vs if we just jar the relevant classes that make up the framework?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But is anyone concerned about the file size of the tests jar?&lt;br/&gt;
It just goes into someone&apos;s test mechanism, I think if its 7MB this is no problem.&lt;/p&gt;

&lt;p&gt;Thats why I looked at the changes and felt we are over-engineering this, but &lt;br/&gt;
to only to make things more complex for us...&lt;/p&gt;

&lt;p&gt;Also keep in mind that as Grant mentioned, if he wants to use the Solr tests jar, it will &lt;br/&gt;
depend upon this lucene tests jar. So I think its safest to include everything, otherwise &lt;br/&gt;
the Solr tests jar might not work. I know for sure SolrTestCaseJ4 extends LuceneTestCase,&lt;br/&gt;
but what else does it use/might it use in the future?&lt;/p&gt;
</comment>
                    <comment id="12987516" author="thetaphi" created="Thu, 27 Jan 2011 12:08:25 +0000"  >&lt;p&gt;My problem with the large JAR file is: as its build on &quot;ant package&quot; its shipped with final binary ZIP and this one is huge already!&lt;/p&gt;

&lt;p&gt;I (and lots of others) prefer to ship a small jar file to the user, that helps developing Lucene-based test cases, e.g to check TokenStreams (thats my main issue). BaseTokenSteamTestCase should be really available to everyone as a public and supported JAR file. This was my personal idea behind that one.&lt;/p&gt;

&lt;p&gt;I propose to do it in a different way:&lt;/p&gt;

&lt;p&gt;Let&apos;s split up test source and build files into two folders: src/test-base and src/test, compiled to build/test-base and build/test and can separately zipped.&lt;br/&gt;
Both of them are compiled separately so self-contained. The test simply import both target lib folders and all should work. The test-base build foder is the only one jared as class files and mabe also get javadocs. The original tests are not part of this.&lt;/p&gt;

&lt;p&gt;This would help both developers and users:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;new developers have a set of javadoced base classes againt those they need to write their tests&lt;/li&gt;
	&lt;li&gt;users can reuse our cool checker/assert/... classes to check their own developments by simply adding a jar file (please, withot sources, we also dont package sources into lucene-core.jar).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Comments?&lt;/p&gt;</comment>
                    <comment id="12987520" author="thetaphi" created="Thu, 27 Jan 2011 12:15:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;But is anyone concerned about the file size of the tests jar? It just goes into someone&apos;s test mechanism, I think if its 7MB this is no problem.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My problem is that you cannot run the tests from this jar file, as lots of tests need the files in classpath, but as real files. We may work around that, but all tests that call new File(Class.getResource().toURI()) will of course fail (and there are lots of them).&lt;/p&gt;

&lt;p&gt;So I prefer a small JAR file without crap that can also be shipped in the binary zip and helps the user. The large one &lt;b&gt;confuses totally&lt;/b&gt;. If you want to use the whole test build incl all files, you can simply run &quot;ant compile-tests&quot; and point your IDE to build/classes/test. I think we want more a subset of &quot;usefull&quot; classes for external developers to test their own implementations like TokenStreams, Similarities, CustomScoreQueries,....&lt;/p&gt;</comment>
                    <comment id="12987521" author="rcmuir" created="Thu, 27 Jan 2011 12:15:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;BaseTokenSteamTestCase should be really available to everyone as a public and supported JAR file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;new developers have a set of javadoced base classes againt those they need to write their tests&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What does this mean? whats the backwards compatibility policy when we rip the API completely apart to improve test coverage 0.01%?&lt;/p&gt;

&lt;p&gt;What is the discussion when its gone completely and part of the analyzers module, in order to move more analysis classes&lt;br/&gt;
to the analyzers module itself, perhaps because we are separating analysis from the indexer more and want to start adding &lt;br/&gt;
&apos;alternative&apos; analysis APIs completely to the analyzers module (so we want this one pulled out of core) ?&lt;/p&gt;

&lt;p&gt;Thats a big concrete concern of mine, if we introduce barriers to this kind of refactoring, but also other test improvements.&lt;/p&gt;</comment>
                    <comment id="12987523" author="shaie" created="Thu, 27 Jan 2011 12:16:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;but what else does it use/might it use in the future?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s always hard to argue with arguments like that. I don&apos;t know what it will need in the future, but I&apos;d bet not much more. And if it will, we can just include that file.&lt;/p&gt;

&lt;p&gt;Let&apos;s remember what&apos;s the purpose of this issue - to allow people to use the great tools that we have (mostly b/c of you !) in their test environment. Like Uwe mentions, test someone&apos;s TokenStream is a very useful utility. I don&apos;t believe they want to run TestIndexWriter in their environment, and extending it doesn&apos;t sound very useful. So I dunno, I feel that shipping just a few select files will help users eventually and ease our life (c&apos;mon, how complicated is adding another file to the list of files?). We can attach a README in the .jar which explains what does each class do.&lt;/p&gt;</comment>
                    <comment id="12987524" author="shaie" created="Thu, 27 Jan 2011 12:19:22 +0000"  >&lt;p&gt;What backwards compatibility policy Robert? This .jar is not under any back-compat policy. And if we realize it gets more and more complicated maintaining it, we can either jar src/test or delete the .jar. This is just a tiny service we&apos;re giving to users (and ourselves). Nothing more.&lt;/p&gt;</comment>
                    <comment id="12987525" author="rcmuir" created="Thu, 27 Jan 2011 12:22:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;It&apos;s always hard to argue with arguments like that. I don&apos;t know what it will need in the future, but I&apos;d bet not much more. And if it will, we can just include that file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree it was a bad argument, here&apos;s what I was trying to express:&lt;/p&gt;

&lt;p&gt;My concerns rotate around slowing down the development of the tests themselves, which are not sexy to work on&lt;br/&gt;
and always need more improvements, serious cleanup work, complete rewrites, mega-refactors, etc. So I think &lt;br/&gt;
if we are going to provide test stuff to users, we need to be extra cautious about hindering our own development.&lt;/p&gt;</comment>
                    <comment id="12987526" author="shaie" created="Thu, 27 Jan 2011 12:28:57 +0000"  >&lt;p&gt;Agreed - tests improvement should be our main concern. That&apos;s why I said this .jar is just a service, we don&apos;t commit to anything besides saying &quot;for each release, tests.jar includes the classes that make up our framework&quot;. If it will make things any simpler, then let&apos;s put all the framework classes under src/test/o.a.l/framework and have simple target which jars up everything underneath it.&lt;/p&gt;

&lt;p&gt;But I don&apos;t have any intentions complicating tests development, improvement and refactoring. Indeed, including specific files by path would mean some more work when we refactor those classes (e.g. move them around), but I don&apos;t think it&apos;s such a big deal if they&apos;ll be absent from the .jar. It&apos;s easily fixed. However, if we agree to put everything under */framework, then it won&apos;t happen, right?&lt;/p&gt;

&lt;p&gt;And if the Solr tests depend on actual test cases, because e.g. they extend them, then let&apos;s discuss that too - Uwe&apos;s proposal makes sense too.&lt;/p&gt;</comment>
                    <comment id="12987530" author="rcmuir" created="Thu, 27 Jan 2011 12:39:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;If it will make things any simpler, then let&apos;s put all the framework classes under src/test/o.a.l/framework and have simple target which jars up everything underneath it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well i mean sounds good (so do parts of Uwe&apos;s idea too).&lt;/p&gt;

&lt;p&gt;But, some of this stuff is in packages for a reason, it uses package-private hacks to improve test-coverage, etc.&lt;br/&gt;
So if we do this, we need to expose lots of things as &apos;public&apos; and @lucene.internal for testing, possibly even whole &lt;br/&gt;
classes (haven&apos;t looked in a while).&lt;/p&gt;

&lt;p&gt;Currently we use tricks like this often in tests: unlike other software (e.g. JRE itself) we don&apos;t have a separate impl &lt;br/&gt;
namespace to manage things like this without polluting the API... we have to use @internal for a lot of things.&lt;/p&gt;

&lt;p&gt;Just saying I don&apos;t think its simple, sure if someone wants to do the work to reorganize all of this stuff, thats great.&lt;br/&gt;
its also a bit scary right before a release, considering modifications of core src/java stuff would be involved (how much,&lt;br/&gt;
I am not sure).&lt;/p&gt;

&lt;p&gt;Do we have to do this for 3.1? Or can we include the huge jar file for 3.1 and work on this stuff for a future release?&lt;/p&gt;</comment>
                    <comment id="12987534" author="shaie" created="Thu, 27 Jan 2011 12:50:43 +0000"  >&lt;p&gt;It was just a suggestion. If we have utilities that use package-private API (though their API can be public) then let&apos;s keep them where we are. I don&apos;t want to over-complicate our tests, just because we want to give users (and ourselves) some useful utilities.&lt;/p&gt;

&lt;p&gt;BTW, I modified the target to jar only the *.java files and it resulted in a 1.2 MB file (just .class ones). It&apos;s less intimidating, but it still contains 254 classes which is a lot. I wouldn&apos;t even know where to start.&lt;/p&gt;

&lt;p&gt;To me, what I see with the &apos;focused&apos; file is that I (think) can easily understand what should I use for what purpose. We can start with even a smaller set of files, like _TestUtil, LuceneTestCase and BaseTokenStreamTestCase (and maybe the MockDirWrapper and RandomIndexWriter?).&lt;/p&gt;

&lt;p&gt;Alternatively, we can .jar up all .class files for convenience, and include a README that describes what you should be looking at when you use this .jar. But personally, I don&apos;t think refactoring to tests will severely affect our ability to maintain that .jar. Really, it&apos;s just renaming of some classes, and/or adding few more.&lt;/p&gt;</comment>
                    <comment id="12987536" author="thetaphi" created="Thu, 27 Jan 2011 12:54:59 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If it will make things any simpler, then let&apos;s put all the framework classes under src/test/o.a.l/framework and have simple target which jars up everything underneath it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well i mean sounds good (so do parts of Uwe&apos;s idea too).&lt;/p&gt;

&lt;p&gt;But, some of this stuff is in packages for a reason, it uses package-private hacks to improve test-coverage, etc.&lt;br/&gt;
So if we do this, we need to expose lots of things as &apos;public&apos; and @lucene.internal for testing, possibly even whole &lt;br/&gt;
classes (haven&apos;t looked in a while).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is different in my proposal. The copy task from shais task would be done one time to a different and self-contained src/test-base (need better name). That gets compiled separate and produces jar file.&lt;/p&gt;

&lt;p&gt;The real tests are compiled later and not jared and reference the jar or build/classes/test-base in classpath. Then packages are identical and no problems occur.&lt;/p&gt;</comment>
                    <comment id="12987540" author="rcmuir" created="Thu, 27 Jan 2011 13:04:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;The real tests are compiled later and not jared and reference the jar or build/classes/test-base in classpath. Then packages are identical and no problems occur.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is much better, because it resolves some practical concerns.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the package namespace is unchanged, we can still use pkg-private stuff&lt;/li&gt;
	&lt;li&gt;there is no hardcoded list, we can still eclipse-refactor and run &apos;ant test&apos; and the build will not break. So, its&lt;br/&gt;
still easy to refactor tests.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It would require some up-front work to the build etc, but could be good, for example to simplify up2date macros&lt;br/&gt;
where moduleA&apos;s tests depend upon base classes of moduleB (this is currently messy).&lt;/p&gt;</comment>
                    <comment id="12987552" author="shaie" created="Thu, 27 Jan 2011 13:36:01 +0000"  >&lt;p&gt;To summarize the plan then:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We&apos;ll separate tests into src/test and src/test-base (you&apos;re welcome to suggest better name)
	&lt;ul&gt;
		&lt;li&gt;Under test-base we put the framework classes&lt;/li&gt;
		&lt;li&gt;Under test we put the actual test cases (and all other classes that are not &apos;framework&apos;?)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Keep package names the same under each&lt;/li&gt;
	&lt;li&gt;jar-test-core will jar up test-base&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In a follow on issue, we fix the build to depend on test-base when compiling tests. We can also make the same changes to Solr tests and let Solr&apos;s test-base depend on Lucene&apos;s test-base and Solr&apos;s test depend on Solr&apos;s test-base. Maybe this is an issue to open under Solr&apos;s JIRA as a follow on?&lt;/p&gt;</comment>
                    <comment id="12987560" author="thetaphi" created="Thu, 27 Jan 2011 13:42:47 +0000"  >&lt;p&gt;That was exactly my proposal. In addition I would also change module and contrib test compile/run to only depend on the test-base to be compiled. We have to change their build.xml in all cases, as we need to change classpath.&lt;/p&gt;</comment>
                    <comment id="12987568" author="gsingers" created="Thu, 27 Jan 2011 14:08:09 +0000"  >&lt;p&gt;Sounds good.  I think we can make the Solr changes here on this issue.  I don&apos;t think we need a separate JIRA.&lt;/p&gt;</comment>
                    <comment id="12987578" author="thetaphi" created="Thu, 27 Jan 2011 14:15:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we can make the Solr changes here on this issue. I don&apos;t think we need a separate JIRA. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We must do them on this issue, as solr and also contrib/modules build will fail after the changes in core only: The base classes will be at a different build folder (build/classes/test-base), so all build.xmls need some changes.&lt;/p&gt;

&lt;p&gt;Else i would prefer simply: &quot;test-framework&quot;. I can work on a patch later!&lt;/p&gt;</comment>
                    <comment id="12988993" author="rcmuir" created="Tue, 1 Feb 2011 01:43:49 +0000"  >&lt;p&gt;Sorry, wrong jira issue&lt;/p&gt;</comment>
                    <comment id="12988994" author="rcmuir" created="Tue, 1 Feb 2011 01:45:21 +0000"  >&lt;p&gt;Sorry Shai... I&apos;ll try to blame this one on the new JIRA.&lt;/p&gt;</comment>
                    <comment id="12989512" author="shaie" created="Wed, 2 Feb 2011 04:58:54 +0000"  >&lt;p&gt;Patch includes changes to build.xmls (ignore the other changes, they are caused by svn moves &amp;#8211; I didn&apos;t touch the source files). I&apos;d appreciate an Ant &apos;expert&apos; looking at them.&lt;/p&gt;

&lt;p&gt;Since some tests depend on other tests (e.g. through extension) and other classes that are not under test-framework, I couldn&apos;t make a test.classpath that references test-framework only. So I modified test.classpath to reference both classes/test and classes/test-framework.&lt;/p&gt;

&lt;p&gt;If you want to apply the patch, make sure to run the following commands:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn mkdir lucene/src/test-framework
svn mv --parents lucene/src/test/org/apache/lucene/util/_TestUtil.java lucene/src/test-framework/org/apache/lucene/util/_TestUtil.java
svn mv --parents lucene/src/test/org/apache/lucene/util/LineFileDocs.java lucene/src/test-framework/org/apache/lucene/util/LineFileDocs.java
svn mv --parents lucene/src/test/org/apache/lucene/util/LuceneJUnitDividingSelector.java lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitDividingSelector.java
svn mv --parents lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java lucene/src/test-framework/org/apache/lucene/util/LuceneJUnitResultFormatter.java
svn mv --parents lucene/src/test/org/apache/lucene/util/LuceneTestCase.java lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java
svn mv --parents lucene/src/test/org/apache/lucene/search/QueryUtils.java lucene/src/test-framework/org/apache/lucene/search/QueryUtils.java
svn mv --parents lucene/src/test/org/apache/lucene/search/CheckHits.java lucene/src/test-framework/org/apache/lucene/search/CheckHits.java
svn mv --parents lucene/src/test/org/apache/lucene/analysis/BaseTokenStreamTestCase.java lucene/src/test-framework/org/apache/lucene/analysis/BaseTokenStreamTestCase.java
svn mv --parents lucene/src/test/org/apache/lucene/analysis/MockAnalyzer.java lucene/src/test-framework/org/apache/lucene/analysis/MockAnalyzer.java
svn mv --parents lucene/src/test/org/apache/lucene/index/MockIndexInput.java lucene/src/test-framework/org/apache/lucene/index/MockIndexInput.java
svn mv --parents lucene/src/test/org/apache/lucene/index/RandomIndexWriter.java lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter.java
svn mv --parents lucene/src/test/org/apache/lucene/index/DocHelper.java lucene/src/test-framework/org/apache/lucene/index/DocHelper.java
svn mv --parents lucene/src/test/org/apache/lucene/store/_TestHelper.java lucene/src/test-framework/org/apache/lucene/store/_TestHelper.java
svn mv --parents lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper.java lucene/src/test-framework/org/apache/lucene/store/MockDirectoryWrapper.java
svn mv --parents lucene/src/test/org/apache/lucene/store/MockIndexInputWrapper.java lucene/src/test-framework/org/apache/lucene/store/MockIndexInputWrapper.java
svn mv --parents lucene/src/test/org/apache/lucene/store/MockIndexOutputWrapper.java lucene/src/test-framework/org/apache/lucene/store/MockIndexOutputWrapper.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I did not convert Solr build yet - will do so after we review the &apos;lucene&apos; patch.&lt;/p&gt;

&lt;p&gt;Also, can someone please list the Solr test-framework classes? I will handle them as well.&lt;/p&gt;</comment>
                    <comment id="12989564" author="shaie" created="Wed, 2 Feb 2011 08:53:26 +0000"  >&lt;p&gt;Previous patch was hard to review IMO. This patch includes the changes to the .xml files only. If you run the &apos;svn mv&apos; commands I pasted before and then apply this patch, all should work.&lt;/p&gt;</comment>
                    <comment id="12989727" author="shaie" created="Wed, 2 Feb 2011 18:02:09 +0000"  >&lt;p&gt;I think we should compile test-framework under classes/test as well. It will only simplify the build.xml, and tests have to reference both test and test-framework in their classpath.&lt;/p&gt;

&lt;p&gt;I forgot to modify jar-test-core, but I will do so in my next patch. I will rename to jar-test-framework and remove dev-tools/testjar.&lt;/p&gt;</comment>
                    <comment id="12989786" author="shaie" created="Wed, 2 Feb 2011 20:43:23 +0000"  >&lt;p&gt;Patch fixes Solr build.xmls to depend only on lucene&apos;s test-framework, as well as removing dev-tools/testjar.&lt;/p&gt;

&lt;p&gt;Again, I only included the .xml changes in the path - the rest are just svn moves.&lt;/p&gt;</comment>
                    <comment id="12989995" author="shaie" created="Thu, 3 Feb 2011 07:33:58 +0000"  >&lt;p&gt;I plan to commit this sometime today or tomorrow if there are no objections. I will then make the same changes (+ move the extra files) to trunk&lt;/p&gt;</comment>
                    <comment id="12990002" author="thetaphi" created="Thu, 3 Feb 2011 07:43:36 +0000"  >&lt;p&gt;Hi Shai,&lt;br/&gt;
I will try this out today, also with Clover. In the Clover part of build.xml may some changes needed, as Clover needs to find test source files to create the statistics!&lt;/p&gt;</comment>
                    <comment id="12990012" author="shaie" created="Thu, 3 Feb 2011 08:40:09 +0000"  >&lt;p&gt;Fix some more Ant targets and adds javadocs-test-framework and jar-test-framework-src. Also adds dependencies on both of these.&lt;/p&gt;

&lt;p&gt;Don&apos;t forget to run the &quot;svn mv&quot; commands from above and also &quot;svn rm dev-tools/testjar&quot;&lt;/p&gt;</comment>
                    <comment id="12990016" author="shaie" created="Thu, 3 Feb 2011 08:46:47 +0000"  >&lt;p&gt;Last patch had misplaced text outside a target.&lt;/p&gt;</comment>
                    <comment id="12990027" author="thetaphi" created="Thu, 3 Feb 2011 09:33:31 +0000"  >&lt;p&gt;Hi Shai, patch looks fine (applies only to 3.x with Tortoise, I assume you used 3.x), with something minor not easy to fix: The JAR files&apos; MANIFEST of the test-framework still contain the project name &quot;-core&quot; because &amp;lt;build-manifest&amp;gt; uses the ANT project name. To fix we need to add another parameter to build-manifest which is hairy, so I would leave that out for now.&lt;/p&gt;

&lt;p&gt;I would commit it, I tested almost every combination and my build-release script!&lt;/p&gt;

&lt;p&gt;Nice work!&lt;/p&gt;</comment>
                    <comment id="12990029" author="shaie" created="Thu, 3 Feb 2011 09:41:38 +0000"  >&lt;p&gt;Patch fixes the manifest issue Uwe raised. I exposed a title attribute in jarify, which defaults to whatever build-manifest defaults, and is set by jar-test-framework to &quot;Lucene Search Engine: Test Framework&quot;.&lt;/p&gt;</comment>
                    <comment id="12990588" author="steve_rowe" created="Fri, 4 Feb 2011 15:55:25 +0000"  >&lt;p&gt;This patch includes a new POM template for the Lucene test framework.  I ran into an issue with circular dependence: Lucene core can&apos;t depend on the test framework, because the test framework depends on Lucene core.  I solved this problem by including &lt;tt&gt;src/test-framework/&lt;/tt&gt; in Lucene core&apos;s test source directories, so that no dependency is required on the test framework.  &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; is also modified to include the binary, source, and javadoc jars for the test framework.&lt;/p&gt;

&lt;p&gt;I tried to make all other modules depend only on the test framework, but several Lucene contrib modules refer to Lucene test classes that were not included in &lt;tt&gt;src/test-framework&lt;/tt&gt;: analyzers/common, icu, misc, queryparser, and remote.  For these, I kept the previous dependency on the full Lucene tests jar.&lt;/p&gt;

&lt;p&gt;One other minor change in this patch: the &lt;tt&gt;jarify&lt;/tt&gt; macro now has an optional &lt;tt&gt;excludes&lt;/tt&gt; attribute that defaults to &lt;tt&gt;**/pom.xml&lt;/tt&gt;, so that &lt;tt&gt;pom.xml&lt;/tt&gt; files don&apos;t end up in any jars.&lt;/p&gt;

&lt;p&gt;This patch includes all of Shai&apos;s patch, as well as a minor addition mentioned by Uwe on IRC: title attributes are included for all test-framework jarify calls.  Like Shai&apos;s patch, I excluded the moved java files from the patch.&lt;/p&gt;</comment>
                    <comment id="12991132" author="shaie" created="Sun, 6 Feb 2011 09:41:50 +0000"  >&lt;p&gt;Thanks Steven !&lt;/p&gt;

&lt;p&gt;Committed revision 1067623 (3x).&lt;/p&gt;

&lt;p&gt;Merging to trunk now ...&lt;/p&gt;</comment>
                    <comment id="12991204" author="shaie" created="Sun, 6 Feb 2011 19:52:12 +0000"  >&lt;p&gt;Committed revision 1067738.&lt;/p&gt;

&lt;p&gt;Thanks all for your comments and help !&lt;/p&gt;</comment>
                    <comment id="13011277" author="steve_rowe" created="Fri, 25 Mar 2011 16:45:17 +0000"  >&lt;p&gt;The Lucene test-framework jar name should include &quot;test-framework&quot;.  Also, the test-framework maven artifacts should not have a &quot;tests&quot; classifier (or &quot;test-sources&quot; or &quot;test-javadoc&quot;) - rather, they should be named as any other module&apos;s non-test artifacts are named: &lt;tt&gt;artifactId-version.jar&lt;/tt&gt;, &lt;tt&gt;artifactId-version-javadoc.jar&lt;/tt&gt;, and &lt;tt&gt;artifactId-version-sources.jar&lt;/tt&gt;.&lt;/p&gt;</comment>
                    <comment id="13011299" author="steve_rowe" created="Fri, 25 Mar 2011 17:33:32 +0000"  >&lt;p&gt;Patch against branches/lucene_solr_3_1 that addresses the naming issues.  Testing now - if no problems, I will commit shortly.&lt;/p&gt;</comment>
                    <comment id="13011322" author="steve_rowe" created="Fri, 25 Mar 2011 18:10:55 +0000"  >&lt;p&gt;This version of the patch adds an include pattern to &lt;tt&gt;lucene/build.xml&lt;/tt&gt;&apos;s &lt;tt&gt;binary.build.dist.patterns&lt;/tt&gt; patternset for the renamed &lt;tt&gt;lucene-test-framework-version.jar&lt;/tt&gt;, so that the test-framework binary and javaodc jars will be included in the binary packages, and adds an exclude pattern so that the test-framework source jar is excluded from the non-Maven binary packages.&lt;/p&gt;

&lt;p&gt;Everything seems to work with this patch.&lt;/p&gt;

&lt;p&gt;Committing shortly.&lt;/p&gt;</comment>
                    <comment id="13011451" author="steve_rowe" created="Fri, 25 Mar 2011 22:13:00 +0000"  >&lt;p&gt;Committed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;r1085499: lucene_solr_3_1&lt;/li&gt;
	&lt;li&gt;r1085558: branch_3x&lt;/li&gt;
	&lt;li&gt;r1085581: trunk&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13013408" author="gsingers" created="Wed, 30 Mar 2011 16:50:14 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12472185">SOLR-2061</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12474640" name="LUCENE-2609-naming-fixes.patch" size="22666" author="steve_rowe" created="Fri, 25 Mar 2011 18:10:55 +0000" />
                    <attachment id="12474636" name="LUCENE-2609-naming-fixes.patch" size="22133" author="steve_rowe" created="Fri, 25 Mar 2011 17:33:32 +0000" />
                    <attachment id="12470240" name="LUCENE-2609.patch" size="42670" author="steve_rowe" created="Fri, 4 Feb 2011 15:55:25 +0000" />
                    <attachment id="12470122" name="LUCENE-2609.patch" size="17808" author="shaie" created="Thu, 3 Feb 2011 09:41:38 +0000" />
                    <attachment id="12470119" name="LUCENE-2609.patch" size="17326" author="shaie" created="Thu, 3 Feb 2011 08:46:47 +0000" />
                    <attachment id="12470118" name="LUCENE-2609.patch" size="17328" author="shaie" created="Thu, 3 Feb 2011 08:40:09 +0000" />
                    <attachment id="12470068" name="LUCENE-2609.patch" size="13488" author="shaie" created="Wed, 2 Feb 2011 20:43:23 +0000" />
                    <attachment id="12470026" name="LUCENE-2609.patch" size="5898" author="shaie" created="Wed, 2 Feb 2011 08:53:26 +0000" />
                    <attachment id="12470018" name="LUCENE-2609.patch" size="180519" author="shaie" created="Wed, 2 Feb 2011 04:58:54 +0000" />
                    <attachment id="12469527" name="LUCENE-2609.patch" size="2622" author="shaie" created="Thu, 27 Jan 2011 08:45:55 +0000" />
                    <attachment id="12452839" name="LUCENE-2609.patch" size="2344" author="drew.farris" created="Mon, 23 Aug 2010 19:26:29 +0100" />
                    <attachment id="12452733" name="LUCENE-2609.patch" size="1701" author="drew.farris" created="Sun, 22 Aug 2010 13:19:51 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 23 Aug 2010 13:32:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11226</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25083</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>