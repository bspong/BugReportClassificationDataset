<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:42 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2037/LUCENE-2037.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2037] Allow Junit4 tests in our environment.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2037</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Now that we&apos;re dropping Java 1.4 compatibility for 3.0, we can incorporate Junit4 in testing. Junit3 and junit4 tests can coexist, so no tests should have to be rewritten. We should start this for the 3.1 release so we can get a clean 3.0 out smoothly.&lt;/p&gt;

&lt;p&gt;It&apos;s probably worthwhile to convert a small set of tests as an exemplar.&lt;/p&gt;

</description>
                <environment>&lt;p&gt;Development&lt;/p&gt;</environment>
            <key id="12439993">LUCENE-2037</key>
            <summary>Allow Junit4 tests in our environment.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="erickoerickson">Erick Erickson</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Nov 2009 00:51:55 +0000</created>
                <updated>Fri, 10 May 2013 11:43:47 +0100</updated>
                    <resolved>Sat, 5 Dec 2009 18:30:40 +0000</resolved>
                            <version>3.1</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/other</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                          <timeoriginalestimate seconds="28800">8h</timeoriginalestimate>
                    <timeestimate seconds="28800">8h</timeestimate>
                                  <comments>
                    <comment id="12777685" author="hossman" created="Fri, 13 Nov 2009 21:58:16 +0000"  >&lt;p&gt;It&apos;s all yours Erick.&lt;/p&gt;</comment>
                    <comment id="12778035" author="erickoerickson" created="Sun, 15 Nov 2009 01:40:50 +0000"  >&lt;p&gt;LuceneTestCaseJ4 should replace LuceneTestCase. There&apos;s a bit of overkill here to emulate the override of runBare in LuceneTestCase, but I thought it was worth it to work out the mechanisms.&lt;/p&gt;

&lt;p&gt;We&apos;ll need to put the lucene 4.7 jar in the right place.&lt;/p&gt;</comment>
                    <comment id="12778086" author="thetaphi" created="Sun, 15 Nov 2009 11:15:50 +0000"  >&lt;p&gt;One thing that would also be good:&lt;br/&gt;
We have LocalizedTestCase, which has the possibility to run each test for all available Locales (it overrides currently runBare() and iterates while setting Locale.setDefault()). As this test should only be ran for specific methods, how about adding a annotation in addition to @Test (with Retention(&quot;method&quot;) like @TestLocalized.&lt;/p&gt;

&lt;p&gt;What to do with BaseTokenStreamTestCase? In 2.9 it had also overridden runBare(), but not anymore (because we only have the new TS API anymore), but this is also a typical example when we want to rerun tests multiple times. One on our plan is that this test now runs all analyzer test for different default versions (iterate over Version enum constants). We need then something like @TestAllVersions or something like that. If we jump to JUnit4, we should use the new features for a more elegant solution of these multiple-run tests.&lt;/p&gt;

&lt;p&gt;One note: It would be good to &lt;b&gt;not&lt;/b&gt; reformat the whole tests with an Eclipse cleanup, just change the lines you modified, not reformat everything or organize imports and so on. Its hard to find out what has changed.&lt;/p&gt;</comment>
                    <comment id="12778101" author="rcmuir" created="Sun, 15 Nov 2009 13:45:11 +0000"  >&lt;p&gt;Is there some way to use Junit4 parameterized tests to do this LocalizedTestCase-type thing, so we don&apos;t have to override runBare()?&lt;/p&gt;</comment>
                    <comment id="12779251" author="erickoerickson" created="Wed, 18 Nov 2009 01:48:39 +0000"  >&lt;p&gt;Well, it all depend on how you feel about 10 seconds as far as LocalizedTestCase is concerned.&lt;/p&gt;

&lt;p&gt;JUnit4 is really not built to run some tests in a class with the @Parameterized notation and some not, it runs all the tests in the class with all the parameters. In the case of TestQueryParser, which is the only test class I saw that made use of the &quot;include some tests but not others&apos; in LocalizedTestCase, I hacked in running all the tests with all the locales available (152 in my case). Which pushes the number of tests in that one class up over 4,000 FWIW.&lt;/p&gt;

&lt;p&gt;Running that test case went from around 5 seconds to around 15 seconds on my 2 year old Macbook Pro, from inside IntelliJ.&lt;/p&gt;

&lt;p&gt;I don&apos;t think it&apos;s worth trying to refactor that class into two classes, one that has all the tests run with all the locales and one that has the rest of the tests run only with the default locale (which is how I read the code in LocalizedTestcase) for 10 seconds worth of time savings. One could emulate the old process of excluding some tests by returning immediately from those tests that &lt;b&gt;weren&apos;t&lt;/b&gt; intended to be run with all locales if the current locale wasn&apos;t the default, but I don&apos;t see that as worth the effort, although I could be convinced otherwise if people feel strongly.&lt;/p&gt;

&lt;p&gt;I&apos;ll provide a patch for this if there are no objections later this week, perhaps I&apos;ll get a chance to look at BaseTokenStreamTestCase before then.&lt;/p&gt;

&lt;p&gt;This will make LocalizedTestCase obsolete and I&apos;ll remove it in the patch.&lt;/p&gt;
</comment>
                    <comment id="12779262" author="rcmuir" created="Wed, 18 Nov 2009 02:17:14 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t think it&apos;s worth trying to refactor that class into two classes, one that has all the tests run with all the locales and one that has the rest of the tests run only with the default locale (which is how I read the code in LocalizedTestcase) for 10 seconds worth of time savings. One could emulate the old process of excluding some tests by returning immediately from those tests that weren&apos;t intended to be run with all locales if the current locale wasn&apos;t the default, but I don&apos;t see that as worth the effort, although I could be convinced otherwise if people feel strongly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hi, the current behavior is a little silly.&lt;br/&gt;
I thought it would be user-friendly to run the default locale first, then all the other locales (including a duplicate run of the default locale).&lt;br/&gt;
This way if you broke a test, you would see failures in your native language/format rather than some very strange language.&lt;/p&gt;

&lt;p&gt;On the other hand, by using LocalizedTestCase, you are saying &apos;hey i am saying this thing has locale-sensitive behavior and it better work&apos;, so in my opinion, getting rid of this &apos;first run tests under default locale&apos; doesn&apos;t harm a thing.&lt;br/&gt;
instead, just run under all locales, or maybe sort them so the default one is first, or something else?&lt;/p&gt;</comment>
                    <comment id="12779449" author="erickerickson" created="Wed, 18 Nov 2009 13:43:42 +0000"  >&lt;p&gt;I was thinking more about TestQueryParser. One of the features of the&lt;br/&gt;
current setup is that you specify which tests in a class you want to have&lt;br/&gt;
run under all locales. Tests not in that list are run only under the default&lt;br/&gt;
locale.Always assuming I&apos;m reading things right...&lt;/p&gt;

&lt;p&gt;I don&apos;t see a clean way to emulate that part of the behavior without either&lt;br/&gt;
refactoring or introducing a test in the tests we don&apos;t want to run under&lt;br/&gt;
all locales and aborting early.&lt;/p&gt;

&lt;p&gt;But I think we&apos;re finding different ways to agree here. I&apos;m interpreting&lt;br/&gt;
your comments that running all the tests in the class is OK at least for&lt;br/&gt;
now...&lt;/p&gt;

&lt;p&gt;But I did notice last night that a number of tests in contrib reference&lt;br/&gt;
LocalizedTestCase (I have two separate projects, core and contrib so it&lt;br/&gt;
wasn&apos;t obvious until I ran the ant task). I&apos;ll look into those tonight or&lt;br/&gt;
tomorrow night.&lt;/p&gt;

&lt;p&gt;Erick&lt;/p&gt;

</comment>
                    <comment id="12779453" author="rcmuir" created="Wed, 18 Nov 2009 13:51:20 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I was thinking more about TestQueryParser. One of the features of the&lt;br/&gt;
current setup is that you specify which tests in a class you want to have&lt;br/&gt;
run under all locales. Tests not in that list are run only under the default&lt;br/&gt;
locale.Always assuming I&apos;m reading things right..&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Erick, oh I am sorry, I completely misread your comment!&lt;/p&gt;

&lt;p&gt;This feature that allows only a subset of tests to be run &quot;localized&quot; where the others will be run &quot;normally&quot; is just a performance optimization.&lt;br/&gt;
all tests should (have not checked since 2.9) pass under all locales.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But I did notice last night that a number of tests in contrib reference&lt;br/&gt;
LocalizedTestCase (I have two separate projects, core and contrib so it&lt;br/&gt;
wasn&apos;t obvious until I ran the ant task). I&apos;ll look into those tonight or&lt;br/&gt;
tomorrow night.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I do feel we should keep LocalizedTestCase. It is handy, we might use it in more places to prevent test failures in other locales for new code.&lt;br/&gt;
But this &quot;allowing only a subset of tests to be test in a localized way&quot; is only a performance optimization.&lt;br/&gt;
If there is some test class that is really slow because all the tests are run under every locale, perhaps the locale-sensitive tests should be refactored into a separate test class that extends LocalizedTestCase.&lt;br/&gt;
The ones that are not locale-sensitive could be in a test class that extends LuceneTestCase&lt;/p&gt;</comment>
                    <comment id="12779465" author="thetaphi" created="Wed, 18 Nov 2009 14:27:48 +0000"  >&lt;p&gt;I already made a propsal for LocalizedTestCase: Just mark all test to run under all Locales with a Annotation like @AllLocales.&lt;/p&gt;</comment>
                    <comment id="12779481" author="rcmuir" created="Wed, 18 Nov 2009 15:10:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;I already made a propsal for LocalizedTestCase: Just mark all test to run under all Locales with a Annotation like @AllLocales. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;looks like Parameterized supports limiting params on a per-method basis via annotation?: &lt;a href=&quot;http://junit.org/apidocs/org/junit/runners/Parameterized.Parameters.html&quot; class=&quot;external-link&quot;&gt;http://junit.org/apidocs/org/junit/runners/Parameterized.Parameters.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12779491" author="erickerickson" created="Wed, 18 Nov 2009 15:35:43 +0000"  >&lt;p&gt;I think you&apos;re mis-reading this. This is the annotation for the static&lt;br/&gt;
method that return a list of parameters, not for a method that is an actual&lt;br/&gt;
test.....&lt;/p&gt;

&lt;p&gt;The thing that causes the framework to gather the list and run test for each&lt;br/&gt;
element on the list is the @RunWith annotation on the class AFAIK.&lt;/p&gt;

&lt;p&gt;Or I&apos;m misreading it....&lt;/p&gt;

&lt;p&gt;Erick&lt;/p&gt;

</comment>
                    <comment id="12779492" author="erickerickson" created="Wed, 18 Nov 2009 15:35:44 +0000"  >&lt;p&gt;Frankly, I don&apos;t see how that would work without getting into the guts of&lt;br/&gt;
the @RunWith(value = Parameterized.class) Junit4 annotation. As I understand&lt;br/&gt;
it, that annotation &lt;b&gt;on the class&lt;/b&gt; causes the framework to make a call to&lt;br/&gt;
the static method that provides a list of parameters (annotated with&lt;br/&gt;
@Parameters). The framework then takes the returned list and, *for each&lt;br/&gt;
element in the list* calls a constructor with that element and runs all the&lt;br/&gt;
tests in the class.&lt;/p&gt;

&lt;p&gt;So annotating a test with @AllLocales would somehow have to get in there and&lt;br/&gt;
change what the framework does. No doubt it&apos;s do-able, but until I see more&lt;br/&gt;
than 10 seconds difference in running the tests I&apos;m not sure it&apos;s worth it.&lt;br/&gt;
Nor would I advocate altering the behavior of the framework for back-compat,&lt;br/&gt;
I&apos;d far rather refactor the tests into those that run for all locales and&lt;br/&gt;
those that don&apos;t.&lt;/p&gt;

&lt;p&gt;I suppose one could to the inverse, that is create an annotation&lt;br/&gt;
@DefaultLocaleOnly that aborts early if the locale isn&apos;t the default, but&lt;br/&gt;
again I think the first approach I&apos;d advocate would be to work within the&lt;br/&gt;
framework until it was too painful....&lt;/p&gt;

&lt;p&gt;FWIW&lt;br/&gt;
Erick&lt;/p&gt;

</comment>
                    <comment id="12779530" author="erickerickson" created="Wed, 18 Nov 2009 17:11:40 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Yes, I do feel we should keep LocalizedTestCase. It is handy, we might use&lt;br/&gt;
it in more places to prevent test failures in other locales for new code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Light went off when walking around. I think I can just change the&lt;br/&gt;
LocalizedTestCase class and put the @RunWith() and @Parameters &lt;b&gt;there&lt;/b&gt;.&lt;br/&gt;
Which makes waaaaaay more sense than what I was doing which was putting&lt;br/&gt;
those in every subclass of the current LocalizedTestCase. Doh! I&apos;ll take a&lt;br/&gt;
peek tonight. Although last night I was thinking &quot;Gee, this is&lt;br/&gt;
repetitive&quot;....&lt;/p&gt;

&lt;p&gt;There are only two classes in core that use LocalizedTestCase, but there are&lt;br/&gt;
several in contrib too. They&apos;ll all require the @Test annotation if I munge&lt;br/&gt;
LocalizedTesCase, but that should be the only change necessary then,&lt;br/&gt;
assuming we&apos;re content to run all the locales past all the test cases in all&lt;br/&gt;
derived classes.....&lt;/p&gt;

&lt;p&gt;Hmmmm, why was subclassing invented again? Something about putting common&lt;br/&gt;
behavior in one place or some nonsense like that &amp;lt;G&amp;gt;.&lt;/p&gt;

&lt;p&gt;Erick&lt;/p&gt;

</comment>
                    <comment id="12779535" author="thetaphi" created="Wed, 18 Nov 2009 17:21:26 +0000"  >&lt;p&gt;We have a second place (I did not implement this for 3.0, because no time), we need to sometimes test something for all Version enum constants. So @Parameters would return EnumSet.allOf(Version.class) and the ctor of this TestCase would get the version, and store it per instance. Tests would then run for each possible version to test compatibility.&lt;/p&gt;

&lt;p&gt;Problem, it interferes with LoalizedTestCase, because e.g. QueryParser needs a test in all versions &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;19&quot; width=&quot;19&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, but also in all Locales (m). Produces n x m test runs &lt;b&gt;arrrgh&lt;/b&gt;. Any idea? On the other hand, TestHighlighter only needs the version iteration to test fully.&lt;/p&gt;</comment>
                    <comment id="12779538" author="rcmuir" created="Wed, 18 Nov 2009 17:27:54 +0000"  >&lt;p&gt;Uwe, can you elaborate more on how the Version testing would work?&lt;/p&gt;

&lt;p&gt;do you mean the case where you have unchanged behavior across all versions, and you want to run the test against all of them, but then some tests only apply to specific versions?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Problem, it interferes with LoalizedTestCase, because e.g. QueryParser needs a test in all versions , but also in all Locales (m). Produces n x m test runs arrrgh. Any idea?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;at least the old tokenstream api is done, imagine if you wanted to test version, locales, and tokenstream api &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12780368" author="erickerickson" created="Fri, 20 Nov 2009 01:43:41 +0000"  >&lt;p&gt;Well, last night I changed LocalizedTestCase to do the @RunWith and&lt;br/&gt;
@Parameterized thing and it works just fine with a minimal change to&lt;br/&gt;
subclasses, mainly adding @Test and a c&apos;tor with a Locale parameter. Total,&lt;br/&gt;
it adds probably a minute to the test run.&lt;/p&gt;

&lt;p&gt;About the cross product of versions and locales. The @Parameterized thingy&lt;br/&gt;
returns a list of Object[], where the elements of the list are matched&lt;br/&gt;
against a c&apos;tor. So if each object[] in your list has, say, an (int, float,&lt;br/&gt;
int), then as long as you have a matching c&apos;tor with a signature that takes&lt;br/&gt;
an (int, float, int) you&apos;re good to go. So to handle the mXn case you&lt;br/&gt;
mentioned, if your @Parameters method returned a list of object[], one&lt;br/&gt;
object[] for each &amp;lt;Locale, Version&amp;gt; pair, you&apos;d get all your Locales run&lt;br/&gt;
against all your versions.&lt;/p&gt;

&lt;p&gt;Whether we &lt;b&gt;want&lt;/b&gt; this to happen or not is another question. It&apos;s a&lt;br/&gt;
worthwhile question whether we really &lt;b&gt;need&lt;/b&gt; to run all the possible locales&lt;br/&gt;
or if there&apos;s a subset of locales that would serve.&lt;/p&gt;

&lt;p&gt;It&apos;s kind of ironic that I have a patch waiting to be applied that cuts down&lt;br/&gt;
on the time it takes to run the unit tests and another patch that adds to&lt;br/&gt;
the time it takes. Two steps forward, one step back and a jink sideways just&lt;br/&gt;
for fun.....&lt;/p&gt;

&lt;p&gt;Best&lt;br/&gt;
Erick&lt;/p&gt;

</comment>
                    <comment id="12780388" author="rcmuir" created="Fri, 20 Nov 2009 02:37:19 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It&apos;s a worthwhile question whether we really need to run all the possible locales&lt;br/&gt;
or if there&apos;s a subset of locales that would serve.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I won&apos;t rant too much on this, except to say that before this localizedtestcase,&lt;br/&gt;
various parts failed under say, only Korean, or only Thai locale, it was always a corner case.&lt;/p&gt;

&lt;p&gt;I think its important that someone from say Korea, can download lucene source code,&lt;br/&gt;
and run &apos;ant test&apos;. how else are they supposed to contribute if this does not work?&lt;/p&gt;</comment>
                    <comment id="12782823" author="mikemccand" created="Thu, 26 Nov 2009 10:04:45 +0000"  >&lt;p&gt;Can we, for this issue, focus on not altering what&apos;s tested, ie, simply cutover to juni4?  And then open new issues for, eg, parameterizing tests across different Versions?  If we do that, then Erick if you post your latest patch (that cuts over LocalizedTestCase -&amp;gt; new junit4 capabilities), then is that committable?&lt;/p&gt;</comment>
                    <comment id="12782916" author="erickoerickson" created="Thu, 26 Nov 2009 15:12:49 +0000"  >&lt;p&gt;Hold off on this patch until I get a chance to submit a new one, we&apos;re straightening out &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1844&quot; title=&quot;Speed up junit tests&quot;&gt;&lt;del&gt;LUCENE-1844&lt;/del&gt;&lt;/a&gt; interdependencies between patches.....&lt;/p&gt;</comment>
                    <comment id="12783440" author="erickoerickson" created="Sun, 29 Nov 2009 17:58:43 +0000"  >&lt;p&gt;See JIRA comments&lt;/p&gt;</comment>
                    <comment id="12783442" author="erickoerickson" created="Sun, 29 Nov 2009 18:19:18 +0000"  >&lt;p&gt;Darn it! I&apos;ll get the comments right sometime and not have to retype them after making an attachment....&lt;/p&gt;

&lt;p&gt;Anyway, this patch allows us to use Junit4 constructs as well as Junit3 constructs. It includes a sibling class to LuceneTestCase called LuceneTestCaseJ4 that provides the functionality we used to get from LuceneTestCase.&lt;/p&gt;

&lt;p&gt;When creating Junit4-style tests, preferentially import from org.junit rather than from junit.framework.&lt;/p&gt;

&lt;p&gt;Junit-3.8.2.jar may (should?) be removed from the distro, all tests run just fine under Junit-4.7,jar, which is attached to this issue. I wrote a little script that compares the results of running the tests and we run exactly the same number of TestSuites and each runs exactly the same number of tests, so I&apos;m pretty confident about this one. I may be wrong, but I&apos;m not uncertain. Single data-points aren&apos;t worth much, but on my Macbook Pro, running under Junit4 took about a minute longer than Junit3 (about 23 1/2 minutes). Which could have been the result of my Time Machine running for all I know....&lt;/p&gt;

&lt;p&gt;All the tests in test...search.function have been converted to use LuceneTestCaseJ4 as an exemplar. I&apos;ve deprecated LuceneTestCase to prompt people. When you derive from LuceneTestCaseJ4, you &lt;b&gt;must&lt;/b&gt; use the @Before, @After and @Test annotations to get the functionality you expect, as must &lt;b&gt;all&lt;/b&gt; subclasses. So one gotcha people will surely run across is deriving form J4 and failing to put @Test.... &lt;/p&gt;

&lt;p&gt;Converting all the tests was my way of working through the derivation issues. I don&apos;t particularly see the value in doing a massive conversion just for the heck of it. Unless someone has a real urge. More along the lines of &quot;I&apos;m in this test anyway, lets upgrade it and add new ones&quot;.&lt;/p&gt;

&lt;p&gt;What about new tests? Should we encourage new patches to use Junit4 rather than Junit3? If so, how?&lt;/p&gt;

&lt;p&gt;I&apos;ve noticed the convention of putting underscores in front of some tests to keep them from running. The Junit4 convention is the @Ignore annotation, which will cause the @Ignored tests to be reported (something like 1300 successful, 0 failures, 23 ignored), which is a nice way to keep these from getting lost in the shuffle.&lt;/p&gt;

&lt;p&gt;When this gets applied, I can put up the patch for LocalizedTestCase and we can give that a whirl....&lt;/p&gt;</comment>
                    <comment id="12785408" author="mikemccand" created="Thu, 3 Dec 2009 17:34:11 +0000"  >&lt;p&gt;Anyone have any concerns upgrading to Junit4?  I plan to commit in a few days...&lt;/p&gt;</comment>
                    <comment id="12785448" author="kaykay.unique" created="Thu, 3 Dec 2009 18:57:35 +0000"  >&lt;p&gt;+1 w.r.t JUnit 4 .&lt;/p&gt;

&lt;p&gt;Unrelated to this - but there is another patch - &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2065&quot; title=&quot;Java 5 port phase II &quot;&gt;&lt;del&gt;LUCENE-2065&lt;/del&gt;&lt;/a&gt; to port the existing tests to Java 5 generics . May be - somebody can have a look at it before it becomes out of sync with the trunk altogether.&lt;/p&gt;</comment>
                    <comment id="12785479" author="mikemccand" created="Thu, 3 Dec 2009 20:13:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;but there is another patch - &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2065&quot; title=&quot;Java 5 port phase II &quot;&gt;&lt;del&gt;LUCENE-2065&lt;/del&gt;&lt;/a&gt; to port the existing tests to Java 5 generics&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahh thanks for the reminder &amp;#8211; I can take this one as well, but, there will be conflicts b/w the two patches, I think.  Should we do the generics first (simpler change, but touches many files), and then the junit4 upgrade?&lt;/p&gt;</comment>
                    <comment id="12785811" author="kaykay.unique" created="Fri, 4 Dec 2009 08:07:24 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  	 Ahh thanks for the reminder - I can take this one as well, but, there will be conflicts b/w the two patches, I think. Should we do the generics first (simpler change, but touches many files), and then the junit4 upgrade?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Personally I favor the generics patch can go in first since as mentioned - it is a large patchset but very simple in nature. I would be happy to rewire this patch ( 2037) once that goes into the tree,  just in case. &lt;/p&gt;</comment>
                    <comment id="12786133" author="kaykay.unique" created="Fri, 4 Dec 2009 20:22:43 +0000"  >&lt;p&gt;Revised patch in sync with trunk in place. &lt;/p&gt;

&lt;p&gt;TODO: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;TestCustomScoreQuery&lt;/li&gt;
	&lt;li&gt;TestFieldScoreQuery&lt;/li&gt;
	&lt;li&gt;TestDocValues&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;patches have been removed due to conflicts. &lt;/p&gt;

&lt;p&gt;Should be able to revisit them separately again soon. &lt;/p&gt;
</comment>
                    <comment id="12786143" author="kaykay.unique" created="Fri, 4 Dec 2009 20:32:04 +0000"  >&lt;p&gt;Submitting revised patch to fix test failure due to the necessity of no-arg ctor in TestCustomQuery . &lt;/p&gt;</comment>
                    <comment id="12786367" author="mikemccand" created="Sat, 5 Dec 2009 09:47:55 +0000"  >&lt;p&gt;Thanks Kay Kay.  Erick, once you&apos;ve had a chance to review/iterate, I plan to commit... then we can make use of junit4 features in our tests.&lt;/p&gt;</comment>
                    <comment id="12786423" author="erickoerickson" created="Sat, 5 Dec 2009 14:57:46 +0000"  >&lt;p&gt;Had enough time this morning to reconcile this with Kay Kay&apos;s changes,&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;

&lt;p&gt;Junit 3.X no longer necessary, running with Junit 4.7 jar runs junit 3 style tests as well as annotated Junit4 style tests.&lt;/p&gt;

&lt;p&gt;It&apos;s preferable (but not necessary) to import from org.junit rather than junit.framework.&lt;/p&gt;</comment>
                    <comment id="12786460" author="mikemccand" created="Sat, 5 Dec 2009 18:23:50 +0000"  >&lt;p&gt;OK patch looks good, thanks Erick &amp;amp; Kay Kay!  I&apos;ll commit shortly.&lt;/p&gt;</comment>
                    <comment id="12838670" author="erickoerickson" created="Fri, 26 Feb 2010 02:05:10 +0000"  >&lt;p&gt;Removed unnecessary derivation from TestWatchman.&lt;/p&gt;

&lt;p&gt;Corrected minor typo in comment.&lt;/p&gt;</comment>
                    <comment id="12838736" author="thetaphi" created="Fri, 26 Feb 2010 07:37:10 +0000"  >&lt;p&gt;I just committed this.&lt;/p&gt;

&lt;p&gt;One quetsion: In JUnit3, the call to getName() always created a correct testName (because JUnit3 took care about the current test running). If I inject one bug into a random test using newRandom() that is not using the ctor with name param, the additional error message about the random seed simply prints &quot;&quot; as test name. In the past this worked. Ideally it should print ot the current @Test method name as before.&lt;/p&gt;

&lt;p&gt;How to do this? I would like to have this and remove the getName() stuff from the class.&lt;/p&gt;</comment>
                    <comment id="12838744" author="thetaphi" created="Fri, 26 Feb 2010 07:59:38 +0000"  >&lt;p&gt;Hi Erik,&lt;/p&gt;

&lt;p&gt;I have &lt;span class=&quot;error&quot;&gt;&amp;#91;after I understood the code  :-) &amp;#93;&lt;/span&gt; rewritten the TestWatchman code to now only work inside LuceneTestCaseJ4, no reflection use and added a startup(), that simply sets the correct test name in the enclosing class. I see no usage in making the InterceptTestCase public, as it is only used inside LuceneTestCaseJ4. If a subclass or localized one needs this watchman, too, you can siply create a second one. I also made the field final.&lt;/p&gt;

&lt;p&gt;Now the tests for random failures behave like before. I would like to commit this soon. This change also affects the uncaught exception handler.&lt;/p&gt;</comment>
                    <comment id="12838872" author="thetaphi" created="Fri, 26 Feb 2010 14:02:24 +0000"  >&lt;p&gt;Committed revision: 916685&lt;/p&gt;</comment>
                    <comment id="12839126" author="erickoerickson" created="Sat, 27 Feb 2010 01:58:35 +0000"  >&lt;p&gt;Uwe:&lt;/p&gt;

&lt;p&gt;You were asking about getName in LuceneTestCaseJ4. It appears that you&apos;ve taken care of this, is there still anything to do? There&apos;s no longer a c&apos;tor that takes the test name.&lt;/p&gt;

&lt;p&gt;But I did some poking around and came up with the following from &quot;someplace on the web&quot;. &lt;/p&gt;

&lt;p&gt;The only two place I could find that used getName were TestFieldScoreQuery and TestOrdValues. This bit of code works if you put it in these classes.&lt;/p&gt;

&lt;p&gt; private String testName() &lt;/p&gt;
{
    return getClass().getName()+&quot;.&quot;+ name.getMethodName(); // was getName() from LuceneTestCaseJ4...
  }

&lt;p&gt;  @Rule&lt;br/&gt;
  public final TestName name = new TestName();&lt;/p&gt;

&lt;p&gt;See:&lt;br/&gt;
&lt;a href=&quot;http://kentbeck.github.com/junit/javadoc/4.7/org/junit/rules/TestName.html&quot; class=&quot;external-link&quot;&gt;http://kentbeck.github.com/junit/javadoc/4.7/org/junit/rules/TestName.html&lt;/a&gt; Note that this site is better than anything I could find at junit.org....&lt;/p&gt;

&lt;p&gt;Once  I found that, I thought &quot;gee, if I put that in the base class, it would be available to everyone&quot;. Which is exactly what you made LuceneTestCaseJ4.getName() do &amp;lt;G&amp;gt;. But at least I found Kent Beck&apos;s version of the docs, which is a plus...&lt;/p&gt;

&lt;p&gt;So I guess there&apos;s nothing to do as far as getName is concerned.... If there is, let me know....&lt;/p&gt;

&lt;p&gt;Erick&lt;/p&gt;</comment>
                    <comment id="12839191" author="thetaphi" created="Sat, 27 Feb 2010 08:16:02 +0000"  >&lt;p&gt;Erick,&lt;/p&gt;

&lt;p&gt;thats already fixed in trunk with my last commit, as you noticed! It exactly does what also rules.TestName does &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &amp;#8211; I found this class later too and realized that it does the same &amp;#8211; only that lucene has the method in the base class for better migration experience &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;Yesterday I also wrote an extra test assertion, that verifies, that the ported test class has all methods starting with &quot;test&quot; annotated with @Test. Robert and me wants to maybe apply this patch during the migration phase when developers are not yet using Junit4 so long and forget to add @Test. The path is very rough and maybe optimized (if @BeforeClass could be used, but cannot as static).&lt;/p&gt;

&lt;p&gt;The string-ctors are not used in lucene, as the testName in Lucene should be automatically from the current method. The additional ctors in Lucene&apos;s tests were only very very very old junit3 relicts (later versions of junit3 also do not need it anymore, they set the test name after instantiating).&lt;/p&gt;</comment>
                    <comment id="12839192" author="thetaphi" created="Sat, 27 Feb 2010 08:18:26 +0000"  >&lt;p&gt;Here the patch for the additional assertion to test if all ported test classes have all @Test added to all methods starting with &quot;test&quot;.&lt;/p&gt;</comment>
                    <comment id="12845101" author="thetaphi" created="Sun, 14 Mar 2010 16:31:51 +0000"  >&lt;p&gt;Committed the assertion patch revision: 922887&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12424986" name="junit-4.7.jar" size="232354" author="erickoerickson" created="Sun, 15 Nov 2009 01:40:50 +0000" />
                    <attachment id="12437136" name="LUCENE-2037-getName.patch" size="3702" author="thetaphi" created="Fri, 26 Feb 2010 07:59:38 +0000" />
                    <attachment id="12437324" name="LUCENE-2037-LegacyChecker.patch" size="2146" author="thetaphi" created="Sat, 27 Feb 2010 08:18:26 +0000" />
                    <attachment id="12427045" name="LUCENE-2037.patch" size="59008" author="erickoerickson" created="Sat, 5 Dec 2009 14:57:46 +0000" />
                    <attachment id="12426362" name="LUCENE-2037.patch" size="59770" author="erickoerickson" created="Sun, 29 Nov 2009 17:58:42 +0000" />
                    <attachment id="12424985" name="LUCENE-2037.patch" size="60932" author="erickoerickson" created="Sun, 15 Nov 2009 01:40:50 +0000" />
                    <attachment id="12437095" name="LUCENE-2037_remove_testwatchman.patch" size="1240" author="erickoerickson" created="Fri, 26 Feb 2010 02:05:10 +0000" />
                    <attachment id="12426982" name="LUCENE-2037_revised_2.patch" size="39294" author="kaykay.unique" created="Fri, 4 Dec 2009 22:07:56 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 13 Nov 2009 21:58:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11740</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25688</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>