<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:29:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-793/LUCENE-793.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-793] Javadocs should explain possible causes for IOExceptions</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-793</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>
&lt;p&gt;Most methods in Lucene reserve the right to throw an IOException.  This can occur for nearly all methods from low level problems like wrong permissions, transient IO errors, bad hard drive or corrupted file system, corrupted index, etc, but for some methods there are also more interesting causes that we should try to document.&lt;/p&gt;

&lt;p&gt;Spinoff of this thread:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-user/44929&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-user/44929&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12361830">LUCENE-793</key>
            <summary>Javadocs should explain possible causes for IOExceptions</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Feb 2007 10:17:28 +0000</created>
                <updated>Tue, 19 Jun 2007 09:14:51 +0100</updated>
                    <resolved>Wed, 21 Feb 2007 20:02:57 +0000</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>general/javadocs</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12469819" author="cutting" created="Fri, 2 Feb 2007 18:03:22 +0000"  >&lt;p&gt;Should we add more precise exceptions for these cases, and add them to the &apos;throws&apos; for these methods?  If we make these subclasses of IOException then this would be back-compatible.&lt;/p&gt;</comment>
                    <comment id="12469837" author="mikemccand" created="Fri, 2 Feb 2007 19:06:19 +0000"  >&lt;p&gt;Good idea!  I will take that approach.&lt;/p&gt;</comment>
                    <comment id="12473789" author="mikemccand" created="Fri, 16 Feb 2007 18:59:21 +0000"  >
&lt;p&gt;OK I created 3 subclasses of IOException:&lt;/p&gt;

&lt;p&gt;  org.apache.lucene.store.LockObtainFailedException&lt;br/&gt;
  org.apache.lucene.index.CorruptIndexException&lt;br/&gt;
  org.apache.lucene.index.StaleReaderException&lt;/p&gt;

&lt;p&gt;and then changed most places where we throw a newly created&lt;br/&gt;
IOException to instead throw one of these.  We still throw an&lt;br/&gt;
IOException for low-level errors (eg &quot;can&apos;t read directory&quot; or &quot;can&apos;t&lt;br/&gt;
find segments_N file&quot;).&lt;/p&gt;

&lt;p&gt;I updated javadocs to reflect these changes.&lt;/p&gt;

&lt;p&gt;Other small changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Fixed IndexReader to throw IOException if you try to&lt;br/&gt;
    delete/setNorm/undeleteAll after the reader is closed (it wasn&apos;t&lt;br/&gt;
    previously).  Added unit test for this.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed one respelling in private method (aquireWriteLock -&amp;gt;&lt;br/&gt;
    acquireWriteLock)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Changed some places where we were throwing IllegalStateException&lt;br/&gt;
    to throw CorruptIndexException instead&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed some javadoc warnings&lt;/li&gt;
&lt;/ul&gt;

</comment>
                    <comment id="12473798" author="hossman" created="Fri, 16 Feb 2007 19:31:14 +0000"  >
&lt;p&gt;&amp;gt;  * Changed some places where we were throwing IllegalStateException&lt;br/&gt;
&amp;gt;    to throw CorruptIndexException instead&lt;/p&gt;

&lt;p&gt;shouldn&apos;t this be considered a major API change? people previously catching IllegalStateException to try and deal with this differently from an IOException will now be caching the &quot;CorruptIndexException&quot; as a subclass of IOException.&lt;/p&gt;

&lt;p&gt;I haven&apos;t read the details of the patch, but perhaps CorruptIndexException should be a subclass of IllegalStateException to be backwards compatible?&lt;/p&gt;</comment>
                    <comment id="12473814" author="mikemccand" created="Fri, 16 Feb 2007 20:06:54 +0000"  >
&lt;p&gt;You&apos;re right, technically this is an API change.&lt;/p&gt;

&lt;p&gt;The only cases I changed were the ones stemming from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-140&quot; title=&quot;docs out of order&quot;&gt;&lt;del&gt;LUCENE-140&lt;/del&gt;&lt;/a&gt;: the&lt;br/&gt;
original &quot;docs out of order&quot; corruption plus 2 other consisteny checks&lt;br/&gt;
I had added as part of the fix for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-140&quot; title=&quot;docs out of order&quot;&gt;&lt;del&gt;LUCENE-140&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(There are other places where Lucene throws a IllegalStateException&lt;br/&gt;
that I did not change.)&lt;/p&gt;

&lt;p&gt;I think it&apos;s extremely unlikely users are relying on the&lt;br/&gt;
IllegalStateException specifically (ie catching it explicitly and&lt;br/&gt;
doing something about it)?&lt;/p&gt;

&lt;p&gt;EG these particular cases were never listed in the &quot;throws&quot;&lt;br/&gt;
(IllegalStateException is unchecked).  And if you hit this exception&lt;br/&gt;
your index truly is corrupt.&lt;/p&gt;

&lt;p&gt;Since these really are cases of severe index corruption I thought it&lt;br/&gt;
best to throw CorruptIndexException instead?&lt;/p&gt;</comment>
                    <comment id="12473847" author="hossman" created="Fri, 16 Feb 2007 22:58:27 +0000"  >&lt;p&gt;&amp;gt; Since these really are cases of severe index corruption I thought it&lt;br/&gt;
&amp;gt; best to throw CorruptIndexException instead? &lt;/p&gt;

&lt;p&gt;no disagreement, i&apos;m just not clear on why &quot;CorruptIndexException&quot; (which is a completley new Exception type created by your patch correct?) should be a subclass of IOException instead of IllegalStateException.&lt;/p&gt;
</comment>
                    <comment id="12473857" author="mikemccand" created="Fri, 16 Feb 2007 23:53:59 +0000"  >&lt;p&gt;Ahh, OK, good question.  Yes this a new exception created by this patch.&lt;/p&gt;

&lt;p&gt;There are quite a few places (8 actually) where we previously threw an&lt;br/&gt;
IOException and I&apos;ve now changed to a CorruptIndexException.  Also&lt;br/&gt;
since IOException is checked, there are presumably many catch clauses&lt;br/&gt;
out there that would at least catch (yet probably not handle) these&lt;br/&gt;
corruption cases now.&lt;/p&gt;

&lt;p&gt;All of these cases, plus the IllegalStateException cases, &lt;b&gt;should&lt;/b&gt; be&lt;br/&gt;
exceptionally rare, but I think it&apos;s &quot;more&quot; backwards compatible to&lt;br/&gt;
leave the base class of the new CorruptIndexException as IOException?&lt;/p&gt;</comment>
                    <comment id="12473890" author="hossman" created="Sat, 17 Feb 2007 07:55:28 +0000"  >&lt;p&gt;Hmmm... well my paranoia says that if we are trying to make the Exceptions more explicit, then any place we currently &quot;throw Foo&quot; we should &quot;throw Bar&quot; where &quot;Foo.class.isAssignable(Bar.class)&quot; ... but if we currently mix/match IOException/IllegalStateException in cases of corruption then I guess it makes sense to use  CorruptIndexException extends IOException.&lt;/p&gt;

&lt;p&gt;(the only alternative i can think of would be a CorruptIndexIOException and a CorruptIndexStateException .. but you&apos;re probably right .. i don&apos;t very many people are worried about catching the IllegalStateException and doing anyhitng special that they aren&apos;t already doing when they catch the IOException.&lt;/p&gt;</comment>
                    <comment id="12474812" author="mikemccand" created="Wed, 21 Feb 2007 20:02:57 +0000"  >&lt;p&gt;OK, I just committed this.   I stuck with the original approach (basing CorruptIndexException on IOException).&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12351390" name="LUCENE-793.patch" size="92050" author="mikemccand" created="Fri, 16 Feb 2007 18:59:20 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 2 Feb 2007 18:03:22 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12960</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26937</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>