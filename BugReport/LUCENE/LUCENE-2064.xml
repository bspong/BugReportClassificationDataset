<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2064/LUCENE-2064.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2064] Highlighter should support all MultiTermQuery subclasses without casts</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2064</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;In order to support MultiTermQuery subclasses the Highlighter component applies instanceof checks for concrete classes from the lucene core. This prevents classes like RegexQuery in contrib from being supported. Introducing dependencies on other contribs is not feasible just for being supported by the highlighter.&lt;/p&gt;

&lt;p&gt;While the instanceof checks and subsequent casts might hopefully go somehow away  in the future but for supporting more multterm queries I have a alternative approach using a fake IndexReader that uses a RewriteMethod to force the MTQ to pass the field name to the given reader without doing any real work. It is easier to explain once you see the patch - I will upload shortly.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12440664">LUCENE-2064</key>
            <summary>Highlighter should support all MultiTermQuery subclasses without casts</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Nov 2009 20:48:50 +0000</created>
                <updated>Thu, 2 May 2013 03:29:22 +0100</updated>
                    <resolved>Sat, 14 Nov 2009 12:26:48 +0000</resolved>
                            <version>2.9.1</version>
                                <fixVersion>3.0</fixVersion>
                                <component>modules/highlighter</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12777652" author="simonw" created="Fri, 13 Nov 2009 20:52:26 +0000"  >&lt;p&gt;This is the patch - please let me know if I miss something especially related to the removed copyMultiTermQuery method which I replaced with a clone call.  - All tests pass.&lt;/p&gt;

</comment>
                    <comment id="12777684" author="rcmuir" created="Fri, 13 Nov 2009 21:56:16 +0000"  >&lt;p&gt;Uwe, I agree, I think you should set to 3.0&lt;/p&gt;

&lt;p&gt;I think there was some discussion on the list about allow a getField() or something for multitermqueries, but in the meantime, this patch will work for now, and its internal to the highlighter so its not like it would have to be deprecated later.&lt;/p&gt;</comment>
                    <comment id="12777686" author="thetaphi" created="Fri, 13 Nov 2009 21:59:48 +0000"  >&lt;p&gt;This is cool.&lt;/p&gt;

&lt;p&gt;Highlighter &amp;amp; MTQ is broken in 2.9.1. This patch looks completely broken, but it isn&apos;t - and my mind was also broken when I first saw the patch - because of that. This patch is cooler than all heavy commiting during ApacheCon.&lt;/p&gt;

&lt;p&gt;+1 for 3.0 with this patch.That was what I wanted to say with my complete nonsense comment.&lt;/p&gt;</comment>
                    <comment id="12777688" author="thetaphi" created="Fri, 13 Nov 2009 22:05:53 +0000"  >&lt;p&gt;Sorry I was somehow like completely drunk.... I laughed so much about this patch! Only UnexpectedSuccessException is missing in it.&lt;/p&gt;</comment>
                    <comment id="12777714" author="thetaphi" created="Fri, 13 Nov 2009 22:51:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think there was some discussion on the list about allow a getField() or something for multitermqueries, but in the meantime, this patch will work for now, and its internal to the highlighter so its not like it would have to be deprecated later.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We discussed on ApacheCon about that. My idea was a Fieldable interface that provides getField and the highlighter must only check instanceof Fieldable. And cloning is really the simpliest to create a copy of MTQ, as &lt;b&gt;all&lt;/b&gt; Query instances are cloneable (because Query implements Cloneable)&lt;/p&gt;</comment>
                    <comment id="12777717" author="markrmiller@gmail.com" created="Fri, 13 Nov 2009 23:02:21 +0000"  >&lt;p&gt;It is clever - personally I think I&apos;d prefer the getFields method - this is kind of a hack to get the field - though a pretty clever hack. I suppose we could make the argument that this can tide us over - but it will only take a couple of minutes to add getFields as well.&lt;/p&gt;

&lt;p&gt;I think Simon may argue that this will work in more cases by default - where external queries would have to implement the getFeilds method. Which is a good point. Still would prefer something cleaner, but perhaps that makes this worth it nonetheless. It would prob make sense to fall back to this if getFields returned an empty set anyway - which almost makes it not even worth it to do getFields as things don&apos;t get any cleaner ...&lt;/p&gt;

&lt;p&gt;We def want the multitermquery clone - thats for sure - Uwe recently mentioned that as well and I&apos;d been meaning to get around to it myself.&lt;/p&gt;</comment>
                    <comment id="12777755" author="thetaphi" created="Sat, 14 Nov 2009 00:03:47 +0000"  >&lt;p&gt;Maybe we should add this patch for 3.0 to not break anything after upgrading to 3.0. As it is completely internal in Highlighter, it would not break anything. Requiring a method in 3.0, whcih should be 2.9 compatible and no new functionality would be not good.&lt;/p&gt;

&lt;p&gt;In 3.1 we could add a Fieldable interface that defines getField and eerybody (could) implement it. If not, we could still use this fallback.&lt;/p&gt;</comment>
                    <comment id="12777756" author="thetaphi" created="Sat, 14 Nov 2009 00:10:58 +0000"  >&lt;p&gt;One comment to the patch:&lt;br/&gt;
If a MTQ subclass does something special during rewrite or in its FilteredTermEnum and calls any other method of FakeReader, it throws NPE. You should catch this Exception and in this case fall back to extract no terms.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;EDIT&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Or simply use the passed in reader as delegate of FakeReader, then it will behave correctly for all methods.&lt;/p&gt;</comment>
                    <comment id="12777762" author="markrmiller@gmail.com" created="Sat, 14 Nov 2009 00:26:39 +0000"  >&lt;p&gt;I still think getFields on multitermquery is a better option than a Fieldable interface. But if we would drop back to this method anyway, I see no reason to anything with field and multitermquery at all really - unless another use case prompts it.&lt;/p&gt;</comment>
                    <comment id="12777764" author="simonw" created="Sat, 14 Nov 2009 00:30:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or simply use the passed in reader as delegate of FakeReader, then it will behave correctly for all methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with the exception, but which reader are you talking about. &lt;/p&gt;

&lt;p&gt;Btw. I was close to name it SmartFakeReader &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12777769" author="simonw" created="Sat, 14 Nov 2009 00:34:48 +0000"  >&lt;p&gt;As I stated above, i see this as a neat workaround until we fix this class / contrib eventually. It won&apos;t hurt performance or breaks any compatibility, its hidden deep inside the abysses of Highlighter. Most importantly it adds little functionality to the highlighter component which I believe a lot of people still using.&lt;/p&gt;

&lt;p&gt;I will add another patch tomorrow which catches the exception.&lt;/p&gt;</comment>
                    <comment id="12777774" author="thetaphi" created="Sat, 14 Nov 2009 00:43:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;I agree with the exception, but which reader are you talking about. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You are right, there is no IR available when instantiating (Smart)FakeReader. So catching the NPE is the only way, or implement all methods of IR to return something valid / use an empty static final unmodifiable MemoryIndex as delegate of the FakeReader.&lt;/p&gt;</comment>
                    <comment id="12777776" author="markrmiller@gmail.com" created="Sat, 14 Nov 2009 00:45:19 +0000"  >&lt;p&gt;As I said, thinking about it, I don&apos;t think we can end up fixing it in a better way. We can&apos;t force older impls out there to implement what we need - sure we can fix it in core easy enough, but its a real hassle to do this in another way that doesnt require outside multitermquery impls to change - we are going to have to fall back to this anyway with any current plans. So might as well nix those plans for now. I&apos;d prefer our &quot;futurebetterhighlighter&quot; prompt any changes that require so much hassle. Its prob best just to stick with this method.&lt;/p&gt;

&lt;p&gt;I&apos;d just make it so the rest of the IndexReader methods act as if the thing is empty - letting it throw a null pointer exception and catching it makes those impls unhighlightable when they likely could be.&lt;/p&gt;</comment>
                    <comment id="12777780" author="thetaphi" created="Sat, 14 Nov 2009 00:56:49 +0000"  >&lt;p&gt;Here the solution with empty MemoryIndex. This seems to be the quickest solution.&lt;/p&gt;</comment>
                    <comment id="12777781" author="markrmiller@gmail.com" created="Sat, 14 Nov 2009 00:58:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Introducing dependencies on other contribs is not feasible just for being supported by the highlighter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh its feasible &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; We already depend on the only contrib that currently has a multiterm query - regex - and memory index. But it looks like the regex dependency snuck in there while working on the spanregexquery support - I don&apos;t think its actually needed anymore - we should remove it. Its only a build dependency, so its not actually a big deal - just annoying if it happened to keep growing.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Hmm - actually, it looks like we can&apos;t avoid those dependencies after all - not if we want to test those queries - looks like the contrib dependency on regex stays anyway. Forgot its just there for the tests now.&lt;/p&gt;</comment>
                    <comment id="12777782" author="markrmiller@gmail.com" created="Sat, 14 Nov 2009 01:00:15 +0000"  >&lt;p&gt;Nice Uwe! - good idea.&lt;/p&gt;</comment>
                    <comment id="12777853" author="thetaphi" created="Sat, 14 Nov 2009 09:41:56 +0000"  >&lt;p&gt;More simple, as MemoryIndex also provides the empty TermEnum.&lt;/p&gt;</comment>
                    <comment id="12777884" author="simonw" created="Sat, 14 Nov 2009 11:09:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;More simple, as MemoryIndex also provides the empty TermEnum. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good stuff - I plan to commit this soon if nobody objects.&lt;/p&gt;</comment>
                    <comment id="12777897" author="thetaphi" created="Sat, 14 Nov 2009 12:19:21 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                    <comment id="12777898" author="simonw" created="Sat, 14 Nov 2009 12:26:37 +0000"  >&lt;p&gt;Commited in revision 836161&lt;/p&gt;</comment>
                    <comment id="12777906" author="thetaphi" created="Sat, 14 Nov 2009 12:34:56 +0000"  >&lt;p&gt;You did not use the latest patch, which was simplier and had extra checks? The am pm problem again.&lt;/p&gt;</comment>
                    <comment id="12777923" author="simonw" created="Sat, 14 Nov 2009 13:45:33 +0000"  >&lt;p&gt;Argh! Fixed in rev. 836176 &lt;br/&gt;
Thanks uwe I did look at the right one first - I hate that AM / PM issue.&lt;/p&gt;</comment>
                    <comment id="12777960" author="rcmuir" created="Sat, 14 Nov 2009 16:28:54 +0000"  >&lt;p&gt;someone at apachecon told me you can fix this in your prefs... &lt;/p&gt;

&lt;p&gt;but i don&apos;t have a preference to change dateformat!&lt;br/&gt;
How can we fix this problem, its very annoying?&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12440682">LUCENE-2066</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12424944" name="LUCENE-2064.patch" size="3955" author="thetaphi" created="Sat, 14 Nov 2009 09:41:56 +0000" />
                    <attachment id="12424925" name="LUCENE-2064.patch" size="4217" author="thetaphi" created="Sat, 14 Nov 2009 00:56:49 +0000" />
                    <attachment id="12424896" name="LUCENE-2064.txt" size="4056" author="simonw" created="Fri, 13 Nov 2009 20:52:26 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 13 Nov 2009 21:56:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11713</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25661</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>