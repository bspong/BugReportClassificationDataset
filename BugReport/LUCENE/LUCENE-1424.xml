<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:13:22 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1424/LUCENE-1424.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1424] Change all multi-term querys so that they extend MultiTermQuery and allow for a constant score mode</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1424</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Cleans up a bunch of code duplication, closer to how things should be - design wise, gives us constant score for all the multi term queries, and allows us at least the option of highlighting the constant score queries without much further work.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12406757">LUCENE-1424</key>
            <summary>Change all multi-term querys so that they extend MultiTermQuery and allow for a constant score mode</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="markrmiller@gmail.com">Mark Miller</reporter>
                        <labels>
                    </labels>
                <created>Sun, 19 Oct 2008 14:21:00 +0100</created>
                <updated>Thu, 2 May 2013 03:29:19 +0100</updated>
                    <resolved>Thu, 13 Nov 2008 09:31:35 +0000</resolved>
                                            <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12642563" author="markrmiller@gmail.com" created="Fri, 24 Oct 2008 23:57:56 +0100"  >&lt;p&gt;What do people think about putting these classes in? They have no max clause limitations, and reports have been that they can be &lt;b&gt;much&lt;/b&gt; more efficient on large indexes. Solr has switched from using the boolean rewriting WildcardQuery,PrefixQuery to ConstantScore queries. We already put in the ConstantScoreRange query for just these reasons, so I think it makes since to add the rest of the family. An upside will be that I can add support for these queries to the Span highlighter. That will put our Highlighter in a position of being able to highlight pretty much every major query type, which I think is an important goal.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12642605" author="mikemccand" created="Sat, 25 Oct 2008 10:58:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;What do people think about putting these classes in?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I think in general we should more aggressively slurp useful things like this from Solr into Lucene.&lt;/p&gt;

&lt;p&gt;Is there any reason to keep the rewrite-to-BooleanQuery version of these (vs, deprecating them in favor of the ConstantScore variety)?  Are the score differences caused by the rewrite-to-BooleanQuery implementations ever &quot;useful&quot;?&lt;/p&gt;</comment>
                    <comment id="12642606" author="mikemccand" created="Sat, 25 Oct 2008 11:03:34 +0100"  >&lt;p&gt;Woops... patch uses @Override (Java 5 only):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;common.compile-core:
    [mkdir] Created dir: /lucene/lucene.constant/build/classes/java
    [javac] Compiling 333 source files to /lucene/lucene.constant/build/classes/java
    [javac] /lucene/lucene.constant/src/java/org/apache/lucene/search/ConstantScoreWildcardQuery.java:69: annotations are not supported in -source 1.4
    [javac] (use -source 5 or higher to enable annotations)
    [javac]   @Override
    [javac]    ^
    [javac] /lucene/lucene.constant/src/java/org/apache/lucene/search/WildcardFilter.java:49: annotations are not supported in -source 1.4
    [javac] (use -source 5 or higher to enable annotations)
    [javac]   @Override
    [javac]    ^
    [javac] 2 errors
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll fix in my local checkout.&lt;/p&gt;</comment>
                    <comment id="12642611" author="mikemccand" created="Sat, 25 Oct 2008 11:24:02 +0100"  >&lt;p&gt;Patch looks good.  I plan to commit in a day or two.&lt;/p&gt;</comment>
                    <comment id="12642615" author="markh" created="Sat, 25 Oct 2008 13:56:11 +0100"  >&lt;p&gt;&amp;gt;&amp;gt; Are the score differences caused by the rewrite-to-BooleanQuery implementations ever &quot;useful&quot;?&lt;/p&gt;

&lt;p&gt;So we need to consider what we are losing - TF, IDF, coordination, length norm, doc boosts.&lt;/p&gt;

&lt;p&gt;I can only think of one use case which relates to coordination factor.&lt;/p&gt;

&lt;p&gt;If you have a &quot;category&quot; field for a product e.g. given Lucene docs for these books:&lt;/p&gt;

&lt;p&gt;Title:            Lucene in Action&lt;br/&gt;
Category:   /Books/Computing/Languages/Java&lt;br/&gt;
                    /Books/Computing/InformationRetrieval&lt;/p&gt;

&lt;p&gt;Title:           The Long Tail&lt;br/&gt;
Category:  /Books/Business/Internet&lt;br/&gt;
                   /Books/Computing&lt;/p&gt;

&lt;p&gt;You might then use a wildcard search of /Books/Computing/* and &quot;Lucene in Action&quot; would rank higher than &quot;The Long Tail&quot; because a BooleanQuery would score a higher coordination factor suggesting LIA got more hits under this &quot;/Books/Computing..&quot; category. There would still be the issue of IDF potentially skewing results but the coordination factor is potentially useful here. &lt;/p&gt;

&lt;p&gt;I think in general IDF tends to be useless for &quot;auto-expanded&quot; terms e.g. Wildcard, fuzzy etc. Incidentally, we still see that IDF issue in fuzzy queries ranking rare mis-spellings higher but that&apos;s another issue (one I resolved in contrib&apos;s FuzzyLikeThisQuery).&lt;/p&gt;

&lt;p&gt;I suppose one other consideration is for people who have created any doc boosts e.g. trying to use this to boost by date.&lt;/p&gt;

&lt;p&gt;I don&apos;t think any of these cases necessarily outweigh the benefit to be obtained from switching &quot;wildcard/prefix to constant score queries&quot;&lt;/p&gt;


&lt;p&gt;Cheers,&lt;br/&gt;
Mark&lt;/p&gt;




</comment>
                    <comment id="12642617" author="thetaphi" created="Sat, 25 Oct 2008 14:10:45 +0100"  >&lt;p&gt;Just a suggestion:&lt;br/&gt;
How about &lt;b&gt;not&lt;/b&gt; inventing new Class names. Just include both code parts into e.g. (Range|Prefix|Wildcard)Query&apos;s rewrite() method. It would then be possible to just switch the QueryParser or other code by e.g. setting a global (static) flag in (Range|Prefix|Wildcard)Query that switches between both implementations).&lt;/p&gt;

&lt;p&gt;To your patch:&lt;br/&gt;
For printing out the boost in toString(): there is a nice helper routine (instead of &quot;if (getBoost()!=1.0f)....&quot;). I think it should be consistent with toString() of all other core query types.&lt;/p&gt;</comment>
                    <comment id="12642628" author="hossman" created="Sat, 25 Oct 2008 16:48:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;Is there any reason to keep the rewrite-to-BooleanQuery&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In addition to the coord example Mark mentioned, there are also cases where the tf and idf values for terms matching a wildcard/prefix are meaningful ... but the other advantage to keeping the existing implementations is use cases where the number of unique terms a query expands to is  is very small, but the number of documents matched is very large ... in theory (but i haven&apos;t tested this) the expanding queries should be more efficient in space and equally efficient in time as the ConstantScore equivalents.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It would then be possible to just switch the QueryParser or other code by e.g. setting a global (static) flag.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m loath to see more static &quot;setter&quot; methods added to query clauses, but there&apos;s no reason this couldn&apos;t be a member property on instances of the classes with corresponding properties on QueryParser.&lt;/p&gt;

&lt;p&gt;In theory it could even be a tertiary state property: REWRITE_TO_BOOLEAN, REWRITE_TO_CONSTANT_SCORE. REWRITE_GUESS ... where the third option caused the REWRITE method to make it&apos;s best guess using a first pass at the TermEnum iteration and aborting if the number of terms get&apos;s above some threshold.&lt;/p&gt;

&lt;p&gt;(but that kind of &quot;optimization&quot; would be premature without testing .. the point is it would be possible)&lt;/p&gt;</comment>
                    <comment id="12642651" author="markrmiller@gmail.com" created="Sat, 25 Oct 2008 20:57:10 +0100"  >&lt;p&gt;Sorry bout the @overrides...grabbed/copied from solr and forgot the java 1.4 cleanse. There was also one StringBuilder in the wildcardfilter that this patch pulls.&lt;/p&gt;</comment>
                    <comment id="12643219" author="mikemccand" created="Tue, 28 Oct 2008 14:16:50 +0000"  >&lt;p&gt;OK, it sounds like we should preserve the rewrite-to-BooleanQuery&lt;br/&gt;
option for each of these Query classes since there are clear use cases&lt;br/&gt;
where it makes sense.&lt;/p&gt;

&lt;p&gt;I do like the idea of adding &quot;constant score capability&quot; to the&lt;br/&gt;
existing query classes, instead of adding new ConstantScoreXXXQuery&lt;br/&gt;
classes.&lt;/p&gt;

&lt;p&gt;I don&apos;t really like the REWRITE_GUESS option because it could lead to&lt;br/&gt;
strange inconsistent results as seen by the end user &amp;#8211; eg prefix1&lt;br/&gt;
sorts one way but then a relaxed prefix2 sorts another way.  I think a&lt;br/&gt;
simple static binary choice is good?&lt;/p&gt;

&lt;p&gt;Couldn&apos;t we build this functionality (get/setRewriteMethod(...)) into&lt;br/&gt;
MultiTermQuery?  And then fix those queries that don&apos;t already to&lt;br/&gt;
subclass MultiTermQuery (at least RangeQuery and PrefixQuery)?&lt;/p&gt;

&lt;p&gt;Finally, I would also prefer non-static methods to instruct&lt;br/&gt;
QueryParser which rewrite method to use.  In fact we already have&lt;br/&gt;
setUseOldRangeQuery &amp;#8211; maybe change this to&lt;br/&gt;
setUseConstantScoreRewriteMethod (defaulting to true)?&lt;/p&gt;</comment>
                    <comment id="12644756" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 17:12:18 +0000"  >&lt;p&gt;Heres an early review patch.&lt;/p&gt;

&lt;p&gt;I switched range and prefix to use multiterm query, but its debatable if thats necessary. Prob a few clock cycles slower, and the benefits are slim beyond overall code design niceness (which counts a lot to me &amp;lt;g&amp;gt;). Just not sure every mutlitermquery would want to have to implement a constantscore version, and the amount of code reuse saved is low (it could do a bit more with something like getConstantScoreQuery, but thats not much either - I may put it in come to think of it).&lt;/p&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;p&gt;look over&lt;br/&gt;
some comments maybe&lt;br/&gt;
some tests for the constant score versions&lt;br/&gt;
rangequery is not as expressive as constantscorequery, which can have separate inclusive/exclusive ends.&lt;/p&gt;


&lt;p&gt;When I was talking about deprecating constantscorequery being awkward, its wasnt really in the implementation sense (i think we can leave it as is), but more the deprecating one of the newest queries already &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Still don&apos;t consider that a huge deal though.&lt;/p&gt;</comment>
                    <comment id="12644802" author="mikemccand" created="Mon, 3 Nov 2008 20:48:27 +0000"  >&lt;p&gt;Patch looks good!  Thanks Mark.&lt;/p&gt;

&lt;p&gt;I think we should indeed &quot;factor up&quot; into MultiTermQuery the ability to create a ConstantScoreQuery out of the filter generated by enumerating the terms and walking the docs for those terms?  Then we don&apos;t need to special case in each of the subclasses.&lt;/p&gt;

&lt;p&gt;Maybe we can then fix Wildcard/Prefix/RangeFilter to create the corresponding query and then ask it for its filter (assuming we make a method eg &quot;getDocIdSet&quot; in MultiTermQuery)?  Or I guess we could just make a QueryWrapperFilter around the corresponding query, though that seems rather roundabout.  I don&apos;t think we need to have duplicated code in PrefixFilter, RangeFilter, WildcardFilter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When I was talking about deprecating constantscorequery being awkward, its wasnt really in the implementation sense (i think we can leave it as is), but more the deprecating one of the newest queries already  Still don&apos;t consider that a huge deal though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well ... this is just how software evolves &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  You can&apos;t control which code will be the &quot;victim&quot; of a nice refactoring.  It&apos;s a healthy sign of progress, and progress is good!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;rangequery is not as expressive as constantscorequery, which can have separate inclusive/exclusive ends.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we do deprecate ConstantScoreRangeQuery (I think we should) then we could add a ctor to RangeQuery matching ConstantScoreRangeQuery&apos;s more expressive one?&lt;/p&gt;</comment>
                    <comment id="12644805" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 20:56:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should indeed &quot;factor up&quot; into MultiTermQuery...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ah, I see...I hadn&apos;t thought all way up that path - it goes a bit further than was in my mind. The way to go for sure.&lt;/p&gt;

&lt;p&gt;All the comments make perfect sense, I&apos;ll work up a new patch while I&apos;m at apachcon.&lt;/p&gt;</comment>
                    <comment id="12644833" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 22:25:41 +0000"  >&lt;p&gt;bq In favor of new QueryWrapperFilter(new XXXQuery(...))? &lt;/p&gt;

&lt;p&gt;I didn&apos;t end up going with the wrapper. Check out this patch just so we get back on the same page sooner rather than later...does this look like a doable way of doing it? It kills all the dupe code I think.&lt;/p&gt;

&lt;p&gt;We can just leave Prefixfilter since its their anyway, but the prefixquery wont use it.&lt;/p&gt;</comment>
                    <comment id="12644842" author="mikemccand" created="Mon, 3 Nov 2008 22:54:20 +0000"  >&lt;p&gt;Excellent!&lt;/p&gt;

&lt;p&gt;Looks like PrefixGenerator got lost.  Why not have it just get its bits by creating a PrefixQuery and calling getFilter().getDocIdSet()?&lt;/p&gt;

&lt;p&gt;WildcardFilter is still in the patch.&lt;/p&gt;

&lt;p&gt;Maybe fix getDocIdSet to not call bits() (since that&apos;s 2-pass, it&apos;s slower).  In fact, does that Filter even need to implement bits?  Can we throw a not implemented exception, since it&apos;s a new Filter?&lt;/p&gt;</comment>
                    <comment id="12644848" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 23:24:45 +0000"  >&lt;p&gt;No worries, I&apos;m still in the thick of it - plenty of little strings to &lt;br/&gt;
wrap up, just wanted to make sure I was on the right track.&lt;/p&gt;

</comment>
                    <comment id="12644882" author="markrmiller@gmail.com" created="Tue, 4 Nov 2008 02:46:29 +0000"  >&lt;p&gt;Ahhhh...satisfying bringing order to all of that. It kaleidoscopes up quite nicely. Thanks for the help Michael.&lt;/p&gt;

&lt;p&gt;Back to just needing:&lt;/p&gt;

&lt;p&gt;review&lt;br/&gt;
possibly some comments/comment changes&lt;br/&gt;
tests for the constantscore side of the queries&lt;/p&gt;</comment>
                    <comment id="12645006" author="mikemccand" created="Tue, 4 Nov 2008 17:09:28 +0000"  >&lt;p&gt;Looks good!  I think we&apos;re almost done here...&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t we deprecate ConstantScoreRangeQuery, and maybe change it to&lt;br/&gt;
simply subclass RangeQuery and set useConstantScoreRewrite to true?&lt;/p&gt;

&lt;p&gt;Should we match the ctor of ConstantScoreRangeQuery (field, lower, upper,&lt;br/&gt;
inclLower, inclUpper) with RangeQuery?  Right now you have Term for&lt;br/&gt;
lower &amp;amp; upper, not String.&lt;/p&gt;

&lt;p&gt;Can we rename MultiTermQuery.isUseConstantScoreRewrite() to&lt;br/&gt;
getUseConstantScoreRewrite()?  Or maybe set/getConstantScoreRewrite()?&lt;/p&gt;

&lt;p&gt;There seems to be a leftover &quot;abstract class TermGenerator implements&lt;br/&gt;
IdGenerator&quot; at the bottom of Prefixquery.java.&lt;/p&gt;

&lt;p&gt;Small whitespace issue: you need to insert a space in &quot;if(...&quot; in a&lt;br/&gt;
few places.&lt;/p&gt;</comment>
                    <comment id="12645313" author="markrmiller@gmail.com" created="Wed, 5 Nov 2008 20:35:07 +0000"  >&lt;p&gt;Okay, almost there. Making constantscorerange query extend rangequery exposed a small problem though - there is scoring difference when using multiserver vs single searcher. The simple rangequery test in the multisearcher scoring test fails. The single searcher returns a score of 1 and the multi 1.4 - still trying to figure out how the heck that is happening...there is not a lot going on, so its prob obvious, but not sticking out at the moment...&lt;/p&gt;</comment>
                    <comment id="12645556" author="markrmiller@gmail.com" created="Thu, 6 Nov 2008 19:52:46 +0000"  >&lt;p&gt;Okay, this should be good. Thanks for the guidance.&lt;/p&gt;</comment>
                    <comment id="12646005" author="mikemccand" created="Sat, 8 Nov 2008 17:33:18 +0000"  >&lt;p&gt;I&apos;m having trouble applying the latest patch &amp;#8211; I get failed Hunks, and, patch can&apos;t find one of the source files:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;patching file contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java
patching file src/java/org/apache/lucene/queryParser/QueryParser.java
patching file src/java/org/apache/lucene/search/ConstantScoreRangeQuery.java
Hunk #2 FAILED at 29.
1 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/search/ConstantScoreRangeQuery.java.rej
patching file src/java/org/apache/lucene/search/MultiTermQuery.java
patching file src/java/org/apache/lucene/search/PrefixFilter.java
patching file src/java/org/apache/lucene/search/PrefixQuery.java
patching file src/java/org/apache/lucene/search/PrefixTermEnum.java
patching file src/java/org/apache/lucene/search/RangeFilter.java
patching file src/java/org/apache/lucene/search/RangeQuery.java
Hunk #1 FAILED at 21.
1 out of 3 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/search/RangeQuery.java.rej
patching file src/java/org/apache/lucene/search/RangeTermEnum.java
patching file src/java/org/apache/lucene/search/WildcardQuery.java
patching file src/java/org/apache/lucene/search/WildcardTermEnum.java
patching file src/test/org/apache/lucene/queryParser/TestQueryParser.java
patching file src/test/org/apache/lucene/search/TestConstantScoreRangeQuery.java
can&apos;t find file to patch at input line 1952
Perhaps you used the wrong -p or --strip option?
The text leading up to &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; was:
--------------------------
|Index: src/test/org/apache/lucene/search/TestMultiTermConstantScore.java
|===================================================================
|--- src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(revision 710055)
|+++ src/test/org/apache/lucene/search/TestMultiTermConstantScore.java	(working copy)
--------------------------
File to patch: 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Did you turn off keyword expansion in your local svn checkout?  That seems to explain the first to failures (if I manually undo the $Id$ keyword expansion then the patch applies cleanly).&lt;/p&gt;

&lt;p&gt;On the 3rd failure, it seems like you renamed TestConstantScoreRangeQuery.java to TestMultiTermConstantScore.java, and then modified it?  This confuses my patch client.&lt;/p&gt;

&lt;p&gt;I think I can work through these, but I sure hope this is the last patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12646012" author="markrmiller@gmail.com" created="Sat, 8 Nov 2008 18:04:45 +0000"  >&lt;p&gt;Don&apos;t work through it. I&apos;m just using eclipse And did nothing  &lt;br/&gt;
different, but don&apos;t waste your time.  Let me figure it out. I&apos;ll make  &lt;br/&gt;
sure it works without eclipse before putting it up.&lt;/p&gt;

&lt;p&gt;That test was just an eclipse name refactor.&lt;/p&gt;

&lt;p&gt;Sorry about all the patches by the way. Tends to be my style &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I tried to indicate which were merely progress patches (if someone has the interest, it allows my ,any wrong directions to be pointed out sooner) and which were something that should be considered more final review worthy. I am sure I can do a better job on that though. Certainly not my intention to waste anyones time, especially when that time could be better spent improving Lucene &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mark&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On Nov 8, 2008, at 12:34 PM, &quot;Michael McCandless (JIRA)&quot; &amp;lt;jira@apache.org &lt;/p&gt;
</comment>
                    <comment id="12646023" author="mikemccand" created="Sat, 8 Nov 2008 19:27:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sorry about all the patches by the way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Whoa, no need to apologize &amp;#8211; I in fact love all the patches and fast feedback/iterations.  That&apos;s definitely the right way to do it.  When I said &quot;...but I sure hope this is the last patch&quot; I meant &quot;if I need to manually fix the patch failures&quot;.  Since you are fixing the patch problems (thanks!) then it&apos;s all good &amp;#8211; keep the patch iterations going.&lt;/p&gt;</comment>
                    <comment id="12646026" author="markrmiller@gmail.com" created="Sat, 8 Nov 2008 20:17:59 +0000"  >&lt;p&gt;Okay, fingers crossed, this is good.&lt;/p&gt;

&lt;p&gt;Eclipse was displaying the $id correctly, but it wasn&apos;t going out in the patch. Also, I didn&apos;t realize refactoring can cause issues like that, so I deleted and created a new class. Personally, I think thats fine, but let me know if you disagree. I also tested applying the patch to a fresh checkout and ran the tests. Should be good.&lt;/p&gt;

&lt;p&gt;I think I&apos;m done unless (probably when) you prompt something else / something I missed.&lt;/p&gt;</comment>
                    <comment id="12646027" author="markrmiller@gmail.com" created="Sat, 8 Nov 2008 20:25:21 +0000"  >&lt;p&gt;This time granting license to ASF&lt;/p&gt;</comment>
                    <comment id="12646029" author="mikemccand" created="Sat, 8 Nov 2008 21:09:29 +0000"  >&lt;p&gt;Excellent &amp;#8211; patch applies perfectly and all tests pass.  I&apos;ll review the changes.  Thanks Mark!&lt;/p&gt;</comment>
                    <comment id="12646034" author="markrmiller@gmail.com" created="Sat, 8 Nov 2008 22:37:24 +0000"  >&lt;p&gt;It looks like termContainsWildcard; and the check code can come out of wildcardquery. I pretty much got around that by making wc enum not blow up when the term doesn&apos;t contain a wildcard. There are other ways to do it that would keep the check if we prefer (a simple override of rewrite on wildcardquery would be the other option I like). I just liked the idea of WCTermEnum not blowing up like WCQuery doesnt blow up.&lt;/p&gt;</comment>
                    <comment id="12646084" author="mikemccand" created="Sun, 9 Nov 2008 12:27:37 +0000"  >
&lt;p&gt;OK I made some changes to the patch &amp;#8211; I think we are real close now:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Overrode WildcardQuery.rewrite to return TermQuery if the pattern has&lt;br/&gt;
    no wildcards (your suggestion above).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Simplified MultiTermFilter: made it a static inner class, moved&lt;br/&gt;
    TermGenerator inside it (absorbed IdGenerator interface into it),&lt;br/&gt;
    move bits() and getDocIdSet() out of the anonymous class,&lt;br/&gt;
    simplified the equals method.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removed extra TermGenerator class from PrefixQuery.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Fixed but RangeFilter&apos;s ctor &amp;#8211; I think you could have gotten null&lt;br/&gt;
    rangeQuery if you pass in null collator.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Various small javadoc fixes, renaming, refactoring.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Deprecated ConstantScoreRangeQuery in favor of RangeQuery.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Overrode FuzzyQuery.setConstantScoreRewrite to throw&lt;br/&gt;
    UnsupportedOperationException, because it overrides rewrite.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Added set/getConstantScoreRewrite to QueryParser (defaults to&lt;br/&gt;
    true) and deprecated set/getUseOldRangeQuery.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Deprecated the ctor&apos;s of RangeQuery that take Term (in favor of&lt;br/&gt;
    String versions); removed new ctors in RangeQuery that take Term&lt;br/&gt;
    for upper/lower val.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Mark can you look this over and see if the changes are OK?  Thanks.&lt;/p&gt;</comment>
                    <comment id="12646097" author="markrmiller@gmail.com" created="Sun, 9 Nov 2008 17:26:54 +0000"  >&lt;p&gt;+1 on all of your changes.&lt;/p&gt;

&lt;p&gt;Still had an issue with your patch with the two $id classes - I have no clue whats up with that, so I just manually paste the expanded line into my patch.&lt;/p&gt;

&lt;p&gt;Removed some unused imports in new/modified classes and further added/tweaked appropriate javadoc.&lt;/p&gt;

&lt;p&gt;Changed RangeQuery tests to use non deprecated constructors, exposed a null pointer issue with RangeQuery.equals and hashcode, fixed.&lt;/p&gt;</comment>
                    <comment id="12646108" author="mikemccand" created="Sun, 9 Nov 2008 19:38:50 +0000"  >
&lt;p&gt;Excellent!  OK I made a few more changes, new patch attached.  This is like playing ping-pong &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed QueryParser.jj to match our changes to QueryParser.java&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed a few more unused imports, unused assignments, deprecated&lt;br/&gt;
    calls, javadocs, etc&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12646161" author="markrmiller@gmail.com" created="Mon, 10 Nov 2008 03:42:04 +0000"  >&lt;p&gt;looks great!&lt;/p&gt;

&lt;p&gt;Sorry to do this, but I had to touch up the javadoc on RangeQuery as it no longer requires at least one term. I promise thats my last!&lt;/p&gt;

&lt;p&gt;Oh yeah, and co credit would probably be more accurate.&lt;/p&gt;</comment>
                    <comment id="12646215" author="mikemccand" created="Mon, 10 Nov 2008 09:42:07 +0000"  >&lt;p&gt;OK this version looks good!  I plan to commit sometime later today... thanks Mark!&lt;/p&gt;</comment>
                    <comment id="12646424" author="mikemccand" created="Tue, 11 Nov 2008 00:41:01 +0000"  >&lt;p&gt;Committed revision 712890.&lt;/p&gt;

&lt;p&gt;Thanks Mark!&lt;/p&gt;</comment>
                    <comment id="12646594" author="michaelbusch" created="Tue, 11 Nov 2008 17:03:52 +0000"  >&lt;p&gt;Since this was committed I get a test failure when I run&lt;br/&gt;
  &apos;ant -Dtag=lucene_2_4_0 test-tag&apos;&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Testcase: testRange(org.apache.lucene.queryParser.TestQueryParser):FAILED&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; null&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; junit.framework.AssertionFailedError&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.lucene.queryParser.TestQueryParser.testRange(TestQueryParser.java:418)&lt;/p&gt;

&lt;p&gt;Seems like this might have broken backwards-compatibility. I haven&apos;t looked into the reason yet.&lt;/p&gt;</comment>
                    <comment id="12646596" author="michaelbusch" created="Tue, 11 Nov 2008 17:07:41 +0000"  >&lt;p&gt;Hmm the culprit is this line in 2.4&apos;s TestQueryParser.testRange():&lt;/p&gt;

&lt;p&gt;    assertTrue(getQuery(&quot;[ a TO z]&quot;, null) instanceof ConstantScoreRangeQuery);&lt;/p&gt;</comment>
                    <comment id="12646602" author="markrmiller@gmail.com" created="Tue, 11 Nov 2008 17:16:45 +0000"  >&lt;p&gt;Now it returns a RangeQuery that is set for constant score mode. Its &lt;br/&gt;
behavior is back compatible with  ConstantScoreRangeQuery, but we no &lt;br/&gt;
longer return it...&lt;/p&gt;

</comment>
                    <comment id="12646606" author="michaelbusch" created="Tue, 11 Nov 2008 17:31:50 +0000"  >&lt;p&gt;Yeah, I understand the reason... and easy &quot;fix&quot; would be in QueryParser#newRangeQuery():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Query newRangeQuery(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; field, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; part1, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; part2, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; inclusive) {
    RangeQuery query;  
  
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (constantScoreRewrite) {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO: remove in Lucene 3.0
&lt;/span&gt;      query = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConstantScoreRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      query = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);
    }
    query.setConstantScoreRewrite(constantScoreRewrite);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; query;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since ConstantScoreRangeQuery extends RangeQuery this works and should not change any behavior, right?&lt;br/&gt;
I tried it out, &quot;ant test-core test-tag&quot; passes with this change.&lt;/p&gt;</comment>
                    <comment id="12646609" author="markrmiller@gmail.com" created="Tue, 11 Nov 2008 17:48:46 +0000"  >&lt;p&gt;Looks like a fine solution to me. Cool tests.&lt;/p&gt;

</comment>
                    <comment id="12646613" author="michaelbusch" created="Tue, 11 Nov 2008 18:07:43 +0000"  >&lt;p&gt;Thanks Mark.&lt;/p&gt;

&lt;p&gt;OK, I&apos;ll make a patch and commit it later today.&lt;/p&gt;</comment>
                    <comment id="12646639" author="mikemccand" created="Tue, 11 Nov 2008 19:34:20 +0000"  >&lt;p&gt;Thanks Michael!&lt;/p&gt;</comment>
                    <comment id="12646721" author="markrmiller@gmail.com" created="Tue, 11 Nov 2008 23:09:27 +0000"  >&lt;p&gt;For kicks, I tried implementing the MultiTermGenerator so that it returns an inner class DocSetId iterator that iterates over matching terms/docs, thinking we could save some speed by avoiding the OpenBitSet creation, population, read. Instead, even in tests that didn&apos;t involve any skip-to (not sure what/if any of these cases actually do, still wrapping my head around that), the non generate the bitset first approach was a tad slower rather than faster. Don&apos;t know exactly why I the moment, but thought I&apos;d chronicle the attempt for future optimizers. Probably all the stuff that happens between next calls slows down the enumeration quite a bit, so that doing it all at once saves enough time to make up for the OpenBitSet stuff.&lt;/p&gt;</comment>
                    <comment id="12646733" author="michaelbusch" created="Tue, 11 Nov 2008 23:53:39 +0000"  >&lt;p&gt;Here&apos;s the patch. &lt;br/&gt;
&apos;ant test test-tag&apos; passes now.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit shortly.&lt;/p&gt;</comment>
                    <comment id="12646739" author="michaelbusch" created="Wed, 12 Nov 2008 00:03:28 +0000"  >&lt;p&gt;Committed revision 713225.&lt;/p&gt;</comment>
                    <comment id="12646935" author="markrmiller@gmail.com" created="Wed, 12 Nov 2008 16:04:58 +0000"  >&lt;p&gt;Another one: looks like as we were iterating back and forth, after I changed the constructors to the non deprecated, we lost the ability of the deprecated constructors to accept null properly. Doh! I&apos;ll try and fix it tonight.&lt;/p&gt;</comment>
                    <comment id="12647122" author="markrmiller@gmail.com" created="Wed, 12 Nov 2008 23:38:01 +0000"  >&lt;p&gt;Fixes the null problem with deprecated RangeQuery constructors and adds unit test for it.&lt;/p&gt;</comment>
                    <comment id="12647237" author="mikemccand" created="Thu, 13 Nov 2008 09:31:35 +0000"  >&lt;p&gt;Thanks Mark &amp;#8211; I just committed that.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310000">
                <name>Duplicate</name>
                                <outwardlinks description="duplicates">
                            <issuelink>
            <issuekey id="12314561">LUCENE-411</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12408312">LUCENE-1450</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12314479">LUCENE-329</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12330404">LUCENE-524</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12343601">LUCENE-582</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12406758">LUCENE-1425</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12393826" name="LUCENE-1424-dep_rng_cstr_fix.patch" size="2479" author="markrmiller@gmail.com" created="Wed, 12 Nov 2008 23:38:01 +0000" />
                    <attachment id="12393744" name="lucene-1424.patch" size="3987" author="michaelbusch" created="Tue, 11 Nov 2008 23:53:38 +0000" />
                    <attachment id="12393605" name="LUCENE-1424.patch" size="130837" author="markrmiller@gmail.com" created="Mon, 10 Nov 2008 03:42:04 +0000" />
                    <attachment id="12393593" name="LUCENE-1424.patch" size="130801" author="mikemccand" created="Sun, 9 Nov 2008 19:38:50 +0000" />
                    <attachment id="12393590" name="LUCENE-1424.patch" size="118711" author="markrmiller@gmail.com" created="Sun, 9 Nov 2008 17:26:54 +0000" />
                    <attachment id="12393586" name="LUCENE-1424.patch" size="109592" author="mikemccand" created="Sun, 9 Nov 2008 12:27:37 +0000" />
                    <attachment id="12393578" name="LUCENE-1424.patch" size="101678" author="markrmiller@gmail.com" created="Sat, 8 Nov 2008 20:25:21 +0000" />
                    <attachment id="12393514" name="LUCENE-1424.patch" size="117030" author="markrmiller@gmail.com" created="Fri, 7 Nov 2008 15:35:07 +0000" />
                    <attachment id="12393459" name="LUCENE-1424.patch" size="114081" author="markrmiller@gmail.com" created="Thu, 6 Nov 2008 19:52:46 +0000" />
                    <attachment id="12393394" name="LUCENE-1424.patch" size="48139" author="markrmiller@gmail.com" created="Wed, 5 Nov 2008 20:35:07 +0000" />
                    <attachment id="12393278" name="LUCENE-1424.patch" size="39751" author="markrmiller@gmail.com" created="Tue, 4 Nov 2008 02:46:29 +0000" />
                    <attachment id="12393271" name="LUCENE-1424.patch" size="26510" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 22:25:41 +0000" />
                    <attachment id="12393256" name="LUCENE-1424.patch" size="22524" author="markrmiller@gmail.com" created="Mon, 3 Nov 2008 17:12:18 +0000" />
                    <attachment id="12392826" name="LUCENE-1424.patch" size="18949" author="markrmiller@gmail.com" created="Sat, 25 Oct 2008 20:57:10 +0100" />
                    <attachment id="12392808" name="LUCENE-1424.patch" size="19029" author="markrmiller@gmail.com" created="Fri, 24 Oct 2008 23:57:56 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>15.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sat, 25 Oct 2008 09:58:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12327</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26304</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>