<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:29:01 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-475/LUCENE-475.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-475]  RAMDirectory(Directory dir, boolean closeDir)  constructor uses memory inefficiently.</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-475</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;recently I found that  RAMDirectory(Directory dir, boolean closeDir)  constructor uses memory inefficiently.&lt;br/&gt;
files from source index are read entirely intro memory as single byte array which is after all is thrown away. And if I want to load my 200M optimized, compound format index to memory for faster search I should give JVM at least 400Mb memory limit. For larger indexes this can be an issue.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached patch how to solve this problem.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12326239">LUCENE-475</key>
            <summary> RAMDirectory(Directory dir, boolean closeDir)  constructor uses memory inefficiently.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="vbychkoviak">Volodymyr Bychkoviak</reporter>
                        <labels>
                    </labels>
                <created>Thu, 1 Dec 2005 20:58:14 +0000</created>
                <updated>Thu, 2 Jun 2011 23:03:43 +0100</updated>
                    <resolved>Sat, 3 Dec 2005 02:41:10 +0000</resolved>
                                                            <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12359036" author="vbychkoviak" created="Thu, 1 Dec 2005 21:04:21 +0000"  >&lt;p&gt;Oh, I didn&apos;t described my solution...&lt;br/&gt;
Solution is simle: use 1k buffer to copy files from source  index to ram files&lt;/p&gt;</comment>
                    <comment id="12359068" author="hossman" created="Fri, 2 Dec 2005 03:36:32 +0000"  >
&lt;p&gt;I&apos;m no expert on File I/O, so i don&apos;t know if this is/isn&apos;t a good change to make, but i deplore constants:&lt;/p&gt;

&lt;p&gt;If this patch is a good idea, then i&apos;d like to suggest that instead of a static constant for the buffer size, a new constructor arg be added specifying the buffer size, with the default (ie: no value, or &quot;0&quot; specified) being to use the old behavior (ie: a buffer the same size as the file)&lt;/p&gt;</comment>
                    <comment id="12359083" author="bernhard.messer@intrafind.de" created="Fri, 2 Dec 2005 06:36:15 +0000"  >&lt;p&gt;I like the patch and find it very helpful if one tries to load larger indices into RAMDirectory.&lt;/p&gt;

&lt;p&gt;Hoss Man,&lt;/p&gt;

&lt;p&gt;why do you would like to have a new constructor to adjust the internal buffer size. I do not see any reason to make the buffersize configurable from outside. The tests i made with different sizes didn&apos;t show any difference on performace or disk usage. The new implementation would be similar to BufferedIndexOutput where the internal buffer size couldn&apos;t be changed either. Do i miss something ?&lt;/p&gt;</comment>
                    <comment id="12359097" author="hossman" created="Fri, 2 Dec 2005 08:16:29 +0000"  >&lt;p&gt;Using different buffer sizes may not make a big difference in your performacne tests &amp;#8211; but that doesn&apos;t mean it won&apos;t mke a differnece for other people running with different heap sizees, or on different hardware.  &lt;/p&gt;

&lt;p&gt;As i understand it, the point of this patch is to give people the ability to use memory more efficiently,  and I applaud that &amp;#8211; but why not go all out and let users control he buffer size so they can tune it to their hearts content?&lt;/p&gt;</comment>
                    <comment id="12359098" author="cutting" created="Fri, 2 Dec 2005 08:30:59 +0000"  >&lt;p&gt;Why not just use BufferedIndexOutput.BUFFER_SIZE, a constant declared elsewhere and already used for all RAMDirectory buffers?  That way you&apos;re not introducing any new constants and disturbing the constant averse...&lt;/p&gt;

&lt;p&gt;And I disagree that the default behaviour should be as before:  there&apos;s no good reason to buffer the entire file.  That was a bug that this patch fixes.&lt;/p&gt;</comment>
                    <comment id="12359122" author="alex+news@olmisoft.com" created="Fri, 2 Dec 2005 15:38:16 +0000"  >&lt;p&gt;byte[] buf = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;READ_BUFFER_SIZE&amp;#93;&lt;/span&gt;;&lt;br/&gt;
should be moved before the for-loop, so the single buffer can be used to load all the files.&lt;/p&gt;</comment>
                    <comment id="12359132" author="vbychkoviak" created="Fri, 2 Dec 2005 17:52:52 +0000"  >&lt;p&gt;second version of patch which  uses  BufferedIndexOutput.BUFFER_SIZE as buffer size and same buffer for all files.&lt;/p&gt;</comment>
                    <comment id="12359144" author="kuhn" created="Fri, 2 Dec 2005 20:13:43 +0000"  >&lt;p&gt;Wouldn&apos;t it be nice to have special method to copy two directories? Like:&lt;/p&gt;

&lt;p&gt;public abstract class Directory {&lt;br/&gt;
    ...&lt;br/&gt;
    public static void copyDirectory(Directory from, Directory to) throws IOException &lt;/p&gt;
{
          // patched code here
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Because I have different problem how to flush RAMDirectory to FSDirectory. The copy operation is more general to be only in RAMDirectory.&lt;/p&gt;</comment>
                    <comment id="12359150" author="vbychkoviak" created="Fri, 2 Dec 2005 21:37:24 +0000"  >&lt;p&gt;agree&lt;/p&gt;</comment>
                    <comment id="12359170" author="yseeley@gmail.com" created="Sat, 3 Dec 2005 02:09:21 +0000"  >&lt;p&gt;super minor nit:&lt;/p&gt;

&lt;p&gt;  toRead = Math.min(len-readCount, BufferedIndexOutput.BUFFER_SIZE)&lt;/p&gt;

&lt;p&gt;is easier on my eyes than&lt;/p&gt;

&lt;p&gt;+        int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE &amp;gt; len ? len - readCount : BufferedIndexOutput.BUFFER_SIZE;&lt;/p&gt;</comment>
                    <comment id="12359171" author="bernhard.messer@intrafind.de" created="Sat, 3 Dec 2005 02:41:10 +0000"  >&lt;p&gt;Volodymyr,&lt;/p&gt;

&lt;p&gt;thanks for the fix. It&apos;s reviewed and commited.&lt;/p&gt;

&lt;p&gt;Bernhard&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12321092" name="RamDirectory2.diff" size="1342" author="vbychkoviak" created="Fri, 2 Dec 2005 17:52:52 +0000" />
                    <attachment id="12321068" name="RamDirectory.diff" size="1275" author="vbychkoviak" created="Thu, 1 Dec 2005 20:59:21 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 2 Dec 2005 03:36:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13274</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27256</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>