<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3225/LUCENE-3225.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3225] Optimize TermsEnum.seek when caller doesn&apos;t need next term</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3225</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Some codecs are able to save CPU if the caller is only interested in&lt;br/&gt;
exact matches.  EG, Memory codec and SimpleText can do more efficient&lt;br/&gt;
FSTEnum lookup if they know the caller doesn&apos;t need to know the term&lt;br/&gt;
following the seek term.&lt;/p&gt;

&lt;p&gt;We have cases like this in Lucene, eg when IW deletes documents by&lt;br/&gt;
Term, if the term is not found in a given segment then it doesn&apos;t need&lt;br/&gt;
to know the ceiling term.  Likewise when TermQuery looks up the term&lt;br/&gt;
in each segment.&lt;/p&gt;

&lt;p&gt;I had done this change as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3030&quot; title=&quot;Block tree terms dict &amp;amp; index&quot;&gt;&lt;del&gt;LUCENE-3030&lt;/del&gt;&lt;/a&gt;, which is a new terms&lt;br/&gt;
index that&apos;s able to save seeking for exact-only lookups, but now that&lt;br/&gt;
we have Memory codec that can also save CPU I think we should commit&lt;br/&gt;
this today.&lt;/p&gt;

&lt;p&gt;The change adds a &quot;boolean onlyExact&quot; param to seek(BytesRef).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12511176">LUCENE-3225</key>
            <summary>Optimize TermsEnum.seek when caller doesn&apos;t need next term</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Jun 2011 23:12:39 +0100</created>
                <updated>Fri, 10 May 2013 11:44:05 +0100</updated>
                    <resolved>Sun, 26 Jun 2011 14:34:02 +0100</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13052885" author="mikemccand" created="Tue, 21 Jun 2011 23:13:51 +0100"  >&lt;p&gt;Patch.  All tests pass... I think it&apos;s ready!&lt;/p&gt;</comment>
                    <comment id="13053603" author="yseeley@gmail.com" created="Thu, 23 Jun 2011 03:15:19 +0100"  >&lt;p&gt;+1, looks good.&lt;/p&gt;</comment>
                    <comment id="13053675" author="simonw" created="Thu, 23 Jun 2011 08:04:27 +0100"  >&lt;p&gt;Mike this seems like a good improvement but I think letting a user change the behavior of method X by passing true / false to method Y is no good. I think this is kind of error prone plus its cluttering the seek method though. Once Boolean is enough here. I think we should rather restrict this to allow users to pull an exactMatchOnly TermsEnum which does only support exact matches and throws a clear exception if next is called. I know that makes things slightly harder especially to deal with our ThreadLocal cached TermsEnum instances but I think that is better here. Can we somehow leave the extra CPU work to the term() call and make this entirely lazy?&lt;/p&gt;</comment>
                    <comment id="13053844" author="mikemccand" created="Thu, 23 Jun 2011 14:34:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;Mike this seems like a good improvement but I think letting a user change the behavior of method X by passing true / false to method Y is no good. I think this is kind of error prone plus its cluttering the seek method though. Once Boolean is enough here. I think we should rather restrict this to allow users to pull an exactMatchOnly TermsEnum which does only support exact matches and throws a clear exception if next is called. I know that makes things slightly harder especially to deal with our ThreadLocal cached TermsEnum instances but I think that is better here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, it only means the enum is unpositioned if you get back&lt;br/&gt;
NOT_FOUND?  Ie, it&apos;s just like if you get back null from next(), or&lt;br/&gt;
END from seek(): in these cases, the enum is unpositioned and you need&lt;br/&gt;
to call seek again.&lt;/p&gt;

&lt;p&gt;My worry if we force an up-front decision here (&quot;exact only&quot; enum vs&lt;br/&gt;
&quot;non-exact only enum&quot;) is we prevent legitimate use cases where the&lt;br/&gt;
caller wants to mix &amp;amp; match with one enum.&lt;/p&gt;

&lt;p&gt;EG, when AutomatonQuery intersects w/ the terms, when it hits are&lt;br/&gt;
region where terms are denser than what the automaton will accept&lt;br/&gt;
(such as an &quot;infinite&quot; part), it should use exact seeking, but then&lt;br/&gt;
when it&apos;s in a region where terms are less dense (eg a &quot;finite&quot; part)&lt;br/&gt;
it should use exact seeking.... I&apos;ll open a separate issue for this.&lt;/p&gt;

&lt;p&gt;The TermsEnum impls can be efficient in this case, ie re-using&lt;br/&gt;
internal seek state for the exat and non-exact cases (MemoryCodec does&lt;br/&gt;
this).&lt;/p&gt;

&lt;p&gt;But I agree another boolean to seek isn&apos;t great; maybe instead we can&lt;br/&gt;
make a seperate seekExact method?  Default impl would just call seek&lt;br/&gt;
(and get no perf gains).&lt;/p&gt;

&lt;p&gt;BTW, similarly, I think we have a missing API in DISI (for&lt;br/&gt;
scoring): advance always does a next() if the target doc doesn&apos;t&lt;br/&gt;
match.  But we can get substantial performance gains in some cases&lt;br/&gt;
(see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;) if we had an advanceExact that would not do the&lt;br/&gt;
next and simply tell us if this doc matched or not.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we somehow leave the extra CPU work to the term() call and make this entirely lazy?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure what you meant here?&lt;/p&gt;</comment>
                    <comment id="13053846" author="mikemccand" created="Thu, 23 Jun 2011 14:35:36 +0100"  >&lt;p&gt;This patch gives nice gains for MemoryCodec: I did a quick test w/ my&lt;br/&gt;
NRT stress test (reopen at 2X Twitter&apos;s peak indexing rate) and the&lt;br/&gt;
reopen time dropped from ~49 msec to ~43 msec (~12% faster).  This is&lt;br/&gt;
impressive because resolving deletes is just one part of opening the&lt;br/&gt;
NRT reader, ie we also must write the new segment, open SegmentReader&lt;br/&gt;
against it, etc.&lt;/p&gt;</comment>
                    <comment id="13053885" author="simonw" created="Thu, 23 Jun 2011 15:32:26 +0100"  >&lt;blockquote&gt;
&lt;p&gt;BTW, similarly, I think we have a missing API in DISI (for&lt;br/&gt;
scoring): advance always does a next() if the target doc doesn&apos;t&lt;br/&gt;
match. But we can get substantial performance gains in some cases&lt;br/&gt;
(see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1536&quot; title=&quot;if a filter can support random access API, we should use it&quot;&gt;&lt;del&gt;LUCENE-1536&lt;/del&gt;&lt;/a&gt;) if we had an advanceExact that would not do the&lt;br/&gt;
next and simply tell us if this doc matched or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But I agree another boolean to seek isn&apos;t great; maybe instead we can&lt;br/&gt;
make a seperate seekExact method? Default impl would just call seek&lt;br/&gt;
(and get no perf gains).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;thats another option and I like that better though. Yet the other should the be seekFloor no?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;not sure what you meant here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;nevermind I only looked at the top of the patch and figured that we only safe the loading into bytesref but there is more about it...&lt;/p&gt;
</comment>
                    <comment id="13053964" author="mikemccand" created="Thu, 23 Jun 2011 17:59:55 +0100"  >&lt;blockquote&gt;&lt;p&gt;Yet the other should the be seekFloor no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahhh right, we had discussed on the dev list.  I agree!&lt;/p&gt;

&lt;p&gt;But, we should do this in another issue.  Though, I think we should rename the current seek to seekCeil; I&apos;ll do that here.&lt;/p&gt;</comment>
                    <comment id="13054354" author="mikemccand" created="Fri, 24 Jun 2011 11:44:50 +0100"  >&lt;p&gt;OK, new patch: I added a new seekExact method (instead of new boolean to seek); renamed existing seek methods to either seekCeil or seekExact; changed seekExact(long ord) to not return a value (it&apos;s an error to pass out-of-bounds ord to this method).  I think it&apos;s ready!&lt;/p&gt;</comment>
                    <comment id="13054360" author="dweiss" created="Fri, 24 Jun 2011 11:53:18 +0100"  >&lt;p&gt;I like this one better. boolean args are cryptic (even if I do use them from time to time).&lt;/p&gt;</comment>
                    <comment id="13054364" author="simonw" created="Fri, 24 Jun 2011 11:57:37 +0100"  >&lt;p&gt;looks good +1 to commit! thanks for working on that&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12483688" name="LUCENE-3225.patch" size="82177" author="mikemccand" created="Fri, 24 Jun 2011 11:44:50 +0100" />
                    <attachment id="12483361" name="LUCENE-3225.patch" size="32973" author="mikemccand" created="Tue, 21 Jun 2011 23:13:51 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 23 Jun 2011 02:15:19 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10772</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24472</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>