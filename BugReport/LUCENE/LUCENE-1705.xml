<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:14 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1705/LUCENE-1705.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1705] Add deleteAllDocuments() method to IndexWriter</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1705</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Ideally, there would be a deleteAllDocuments() or clear() method on the IndexWriter&lt;/p&gt;

&lt;p&gt;This method should have the same performance and characteristics as:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;currentWriter.close()&lt;/li&gt;
	&lt;li&gt;currentWriter = new IndexWriter(..., create=true,...)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would greatly optimize a delete all documents case. Using deleteDocuments(new MatchAllDocsQuery()) could be expensive given a large existing index.&lt;/p&gt;

&lt;p&gt;IndexWriter.deleteAllDocuments() should have the same semantics as a commit(), as far as index visibility goes (new IndexReader opening would get the empty index)&lt;/p&gt;

&lt;p&gt;I see this was previously asked for in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-932&quot; title=&quot;delete complete index&quot;&gt;&lt;del&gt;LUCENE-932&lt;/del&gt;&lt;/a&gt;, however it would be nice to finally see this added such that the IndexWriter would not need to be closed to perform the &quot;clear&quot; as this seems to be the general recommendation for working with an IndexWriter now&lt;/p&gt;

&lt;p&gt;deleteAllDocuments() method should:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;abort any background merges (they are pointless once a deleteAll has been received)&lt;/li&gt;
	&lt;li&gt;write new segments file referencing no segments&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This method would remove one of the final reasons i would ever need to close an IndexWriter and reopen a new one &lt;/p&gt;</description>
                <environment></environment>
            <key id="12428404">LUCENE-1705</key>
            <summary>Add deleteAllDocuments() method to IndexWriter</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="tsmith">Tim Smith</reporter>
                        <labels>
                    </labels>
                <created>Fri, 19 Jun 2009 21:17:39 +0100</created>
                <updated>Thu, 2 May 2013 03:29:37 +0100</updated>
                    <resolved>Tue, 30 Jun 2009 11:19:57 +0100</resolved>
                            <version>2.4</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12722006" author="shaie" created="Fri, 19 Jun 2009 22:00:43 +0100"  >&lt;p&gt;My search app has such a scenario, and currently we just delete all the documents given a certain criteria (something similar to the above MatchAllDocsQuery. But I actually think that&apos;s the wrong approach. If you want to delete all the documents from the index, you&apos;d better create a new one. The main reason is that if your index has, say, 10M documents, a deleteAll() will keep those 10M in the index, and when you&apos;ll re-index, the index size will be doubled. Worth still, the deleted documents may belong to segments which will not be merged/optimized right away (depends on your mergeFactor setting), and therefore will stick around for a long time (until you call optimize() or expungeDeletes()).&lt;/p&gt;

&lt;p&gt;But, creating a new IndexWriter right away, while overriding the current one is not so smart, because your users will be left w/ no search results until the index has accumulated enough documents. Therefore I think the solution for such an approach should be:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Call writer.rollback() - abort all current operations, cancel everything until the last commit.&lt;/li&gt;
	&lt;li&gt;Create a new IndexWriter in a new directory and re-index everything.&lt;/li&gt;
	&lt;li&gt;In the meantime, all your search operations go against the current index, which you know is not going to change until the other one is re-built, and therefore you can also optimize things, by opening an IndexReader and stop any accounting your code may do - just leave it open.&lt;/li&gt;
	&lt;li&gt;When re-indexing has complete, sync all your code and:
	&lt;ul&gt;
		&lt;li&gt;Define your workDir to be the new index dir. That way new searches can begin right away on the index index)&lt;/li&gt;
		&lt;li&gt;Safely delete the old index dir (probably need to do something here to ensure no readers are open against this dir etc.).&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;That&apos;s a high-level description and I realize it may have some holes here and there, but you get the point.&lt;/p&gt;

&lt;p&gt;If we were to create a deleteAll() method, I&apos;d expect it to work that way. I.e., the solution you proposed above (write a new segments file referencing no segments) would prevent all searches until something new is actually re-indexed right?&lt;/p&gt;

&lt;p&gt;I have to admit though, that I don&apos;t have an idea yet on how it can be done inside Lucene, such that new readers will see the old segments, while when I finish re-indexing and call commit, the previous segments will just be deleted.&lt;/p&gt;

&lt;p&gt;A wild shot (and then I&apos;ll go to sleep on it) - how about if you re-index everything, not committing during that time at all. Readers that are open against the current directory will see all the documents, EXCEPT the new ones you&apos;re adding (same for new readers that you may open). When you&apos;re done re-indexing, you&apos;ll call a commitNewOnly, which will create an empty segments file and then call commit. That way, assuming you&apos;re using KeepOnlyLastCommitDeletionPolicy, after the existing readers will close, any new reader that will be opened will see the new segments only, and the next time you commit, the old segments will be deleted.&lt;/p&gt;

&lt;p&gt;That will move the deleteAll() method to the application side, since it knows when it can safely delete all the current segments. If you don&apos;t have such a requirement (keeping an index for searches until re-indexing is complete), then I think you can safely close() the index and re-create it?&lt;/p&gt;</comment>
                    <comment id="12722021" author="tsmith" created="Fri, 19 Jun 2009 22:25:30 +0100"  >&lt;p&gt;My use case is like so:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;IndexReader opened against old index (the last committed index)&lt;/li&gt;
	&lt;li&gt;user requests &quot;clearing the index&quot; (for whatever reason, up to them to decide)
	&lt;ul&gt;
		&lt;li&gt;this will close the current IndexWriter and reopen with create=true (ideally this would just call writer.deleteAll())&lt;/li&gt;
		&lt;li&gt;IndexWriter.init() writes out new segments.gen file referencing no segments with create=true (old segments are not yet deleted as IndexReader is still open for them)&lt;/li&gt;
		&lt;li&gt;NOTE: new IndexReader not yet opened because they haven&apos;t said &quot;commit&quot; yet&lt;/li&gt;
		&lt;li&gt;(previous commit will still be the &quot;live&quot; index seen by searches - obviously this means disk is not reclaimed yet)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;user may then feed new documents, or not, (up to them)&lt;/li&gt;
	&lt;li&gt;user will then eventually say commit&lt;/li&gt;
	&lt;li&gt;new IndexReader will be opened, which should only contain documents added since the &quot;deleteAll()&quot; operation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Ideally, i want to perform this delete all operation very efficiently without needing to reopen an IndexWriter &lt;br/&gt;
The rollback() call would possibly slightly optimize what i am currently doing, but even better still would be a highly efficient deleteAll() method (as all the semantics of this operation would be handled nicely (without jumping through hoops to clear the index))&lt;/p&gt;

&lt;p&gt;Creating a new IndexWriter in the same directory with create=true works like a champ, (existing IndexReaders still see the previous commit)&lt;br/&gt;
just want do avoid the IndexWriter.close() call&lt;/p&gt;
</comment>
                    <comment id="12722172" author="mikemccand" created="Sat, 20 Jun 2009 12:03:09 +0100"  >&lt;p&gt;This should be simple to implement, by taking the logic that&apos;s now in IndexWriter&apos;s init method (under the &lt;tt&gt;if (create) {&lt;/tt&gt;) and pulling out into a separate method.&lt;/p&gt;

&lt;p&gt;From IndexWriter&apos;s standpoint, this is just another commit, on equal footing with all prior commits even though it up and deleted all segments.  So eg a deletion policy could choose to keep those past commits around, IndexReaders can open those past commits, etc.&lt;/p&gt;

&lt;p&gt;One good functional gain by offering this method is it could be done within a single IndexWriter transaction.  Ie you could deleteAll, make further changes, etc., but then change your mind and rollback the entire transaction.  Whereas, requiring if you close &amp;amp; re-open the writer with create=true, you&apos;ve necessarily committed the change to the index.&lt;/p&gt;

&lt;p&gt;So I don&apos;t think we should implicitly do a commit() from within deleteAll(); I think the user should call commit() on their own.&lt;/p&gt;</comment>
                    <comment id="12722583" author="tsmith" created="Mon, 22 Jun 2009 13:58:01 +0100"  >&lt;p&gt;I agree, it would be best if the deleteAll() could be rolled back and was just like any other add/update/delete operation on the index (provided it doesn&apos;t cause performance of the operation to degrade to a delete by query with a &amp;#42;:&amp;#42;)&lt;/p&gt;

&lt;p&gt;That then greatly improves the current way that deleteAll() must be done (either sending a &amp;#42;:&amp;#42; to query delete method, or closing IndexWriter and reopening)&lt;/p&gt;
</comment>
                    <comment id="12722612" author="mikemccand" created="Mon, 22 Jun 2009 15:12:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;provided it doesn&apos;t cause performance of the operation to degrade to a delete by query with a &lt;b&gt;:&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The delete actually would not be with a &lt;b&gt;:&lt;/b&gt; query; instead, we simple remove all referenced segments from the segments_N file.  So, it would be exceptionally fast.&lt;/p&gt;

&lt;p&gt;Do you wanna cons up a patch?  It should be a refactoring of what&apos;s now done inside IndexWriter&apos;s init method...&lt;/p&gt;</comment>
                    <comment id="12722627" author="tsmith" created="Mon, 22 Jun 2009 16:08:13 +0100"  >&lt;blockquote&gt;&lt;p&gt;Do you wanna cons up a patch? It should be a refactoring of what&apos;s now done inside IndexWriter&apos;s init method...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Had a feeling this was coming.  &lt;/p&gt;

&lt;p&gt;I&apos;ll give it a shot, (unless someone else volunteers)&lt;/p&gt;

</comment>
                    <comment id="12722634" author="shaie" created="Mon, 22 Jun 2009 16:21:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;I&apos;ll give it a shot, (unless someone else volunteers)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t mind to have a deep dive here, if you&apos;re willing to wait a couple days.&lt;/p&gt;</comment>
                    <comment id="12722649" author="tsmith" created="Mon, 22 Jun 2009 16:49:07 +0100"  >&lt;p&gt;It seems like this method could be very simple (obviously i&apos;m not an expert on IndexWriter code (yet))&lt;/p&gt;

&lt;p&gt;seems like this is pretty close:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void deleteAll() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  rollbackTransaction(); &lt;span class=&quot;code-comment&quot;&gt;// might need to unroll &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; and not &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; everything here
&lt;/span&gt;  segmentInfos.clear();
  checkpoint(); &lt;span class=&quot;code-comment&quot;&gt;// should we &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; here? or just let the inevitable commit &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;?
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, i suppose we could just copy rollbackTransaction to a deleteAll() method with the one change of not restoring the rollbackSegmentInfos (just leave it cleared)&lt;/p&gt;

&lt;p&gt;This may result in doing less work (and be more self contained&lt;/p&gt;




</comment>
                    <comment id="12722655" author="tsmith" created="Mon, 22 Jun 2009 16:57:27 +0100"  >&lt;p&gt;Looking closer, rollbackTransaction() isn&apos;t the right thing to use here (but it looks pretty close to the right thing)&lt;/p&gt;

&lt;p&gt;will work up a patch adapting rollbackTransaction() to a deleteAll() method&lt;/p&gt;

&lt;p&gt;might also need to borrow some from rollbackInternal() (not sure if i see rollbackTransaction rolling back any documents buffered in memory)&lt;/p&gt;</comment>
                    <comment id="12722776" author="tsmith" created="Mon, 22 Jun 2009 20:34:15 +0100"  >&lt;p&gt;Here&apos;s a patch adding a deleteAll() method (based on internalRollback())&lt;/p&gt;

&lt;p&gt;Patch includes tests.&lt;/p&gt;

&lt;p&gt;deleteAll() method can be rolled back (if IndexWriter supports rollback)&lt;/p&gt;

&lt;p&gt;This seems to work quite nicely&lt;/p&gt;

&lt;p&gt;please comment if there are any edge cases not being handled.&lt;/p&gt;</comment>
                    <comment id="12724022" author="mikemccand" created="Thu, 25 Jun 2009 11:52:59 +0100"  >&lt;p&gt;Patch looks good Tim!&lt;/p&gt;

&lt;p&gt;I added another test case (for NRT reader), removed the un-needed notifyAll &amp;amp; assert, and tweaked javadocs.  I think it&apos;s ready to go in... I&apos;ll wait a day or two.&lt;/p&gt;</comment>
                    <comment id="12724634" author="mikemccand" created="Fri, 26 Jun 2009 18:45:51 +0100"  >&lt;p&gt;Thanks Tim!&lt;/p&gt;</comment>
                    <comment id="12725228" author="tsmith" created="Mon, 29 Jun 2009 17:00:33 +0100"  >&lt;p&gt;Looks like i found an issue with this&lt;/p&gt;

&lt;p&gt;The deleteAll() method isn&apos;t resetting the nextDocID on the DocumentsWriter (or some similar behaviour)&lt;/p&gt;

&lt;p&gt;so, the following state will result in an error:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;deleteAll()&lt;/li&gt;
	&lt;li&gt;updateDocument(&quot;5&quot;, doc)&lt;/li&gt;
	&lt;li&gt;commit()&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;this results in a delete for doc &quot;5&quot; getting buffered, but with a very high &quot;maxDocId&quot;&lt;br/&gt;
at the same time, doc is added, however, the following will then occur on commit:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;flush segments to disk&lt;/li&gt;
	&lt;li&gt;doc &quot;5&quot; is now in a segment on disk&lt;/li&gt;
	&lt;li&gt;run deletes&lt;/li&gt;
	&lt;li&gt;doc &quot;5&quot; is now blacklisted from segment&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Will work on fixing this and post a new patch (along with updated test case)&lt;/p&gt;

&lt;p&gt;(was worried i was missing an edge case)&lt;/p&gt;</comment>
                    <comment id="12725262" author="tsmith" created="Mon, 29 Jun 2009 18:25:14 +0100"  >&lt;p&gt;Here&apos;s a patch to TestIndexWriterDelete that shows the problem&lt;/p&gt;

&lt;p&gt;after the deleteAll(), a document is added and a document is updated&lt;br/&gt;
the added document gets indexed, the updated document does not&lt;/p&gt;</comment>
                    <comment id="12725285" author="tsmith" created="Mon, 29 Jun 2009 19:00:01 +0100"  >&lt;p&gt;Here&apos;s a patch that fixes the deleteAll() + updateDocument() issue&lt;/p&gt;

&lt;p&gt;just needed to set the FlushDocCount to 0 after aborting the outstanding documents&lt;/p&gt;</comment>
                    <comment id="12725560" author="mikemccand" created="Tue, 30 Jun 2009 11:19:57 +0100"  >&lt;p&gt;Thanks Tim!  I just committed this.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12502005">SOLR-2437</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12412090" name="DeleteAllFlushDocCountFix.patch" size="1820" author="tsmith" created="Mon, 29 Jun 2009 19:00:01 +0100" />
                    <attachment id="12411444" name="IndexWriterDeleteAll.patch" size="4614" author="tsmith" created="Mon, 22 Jun 2009 20:34:15 +0100" />
                    <attachment id="12411794" name="LUCENE-1705.patch" size="5929" author="mikemccand" created="Thu, 25 Jun 2009 11:52:59 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 19 Jun 2009 21:00:43 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12053</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26021</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>