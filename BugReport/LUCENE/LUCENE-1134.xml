<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1134/LUCENE-1134.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1134] BooleanQuery.rewrite does not work properly for minNumberShouldMatch</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1134</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;BooleanQuery.rewrite does not respect minNumberShouldMatch if the number of clauses is 1. This causes inconsistencies for the queries &quot;+def&quot; and &quot;+abc +def&quot;, while setting the minNumShouldMatch to &apos;1&apos; for both.&lt;br/&gt;
For the first query, results are returned although there are no SHOULD clauses in the query.&lt;br/&gt;
For the second query no results are returned.&lt;br/&gt;
The reason lies in the optimization BooleanQuery.rewrite has for one clauses queries.&lt;br/&gt;
Patch included - optimize the query for a single clause only if the minNumShouldMatch &amp;lt;= 0.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12386294">LUCENE-1134</key>
            <summary>BooleanQuery.rewrite does not work properly for minNumberShouldMatch</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="shaie">Shai Erera</reporter>
                        <labels>
                    </labels>
                <created>Tue, 15 Jan 2008 19:08:56 +0000</created>
                <updated>Sun, 3 Feb 2008 08:21:49 +0000</updated>
                    <resolved>Sun, 3 Feb 2008 08:21:49 +0000</resolved>
                            <version>2.4</version>
                                                <component>core/search</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12559180" author="shaie" created="Tue, 15 Jan 2008 19:10:48 +0000"  >&lt;p&gt;The fix is very trivial. Which tests should I run to ensure this doesn&apos;t break anything?&lt;/p&gt;</comment>
                    <comment id="12559183" author="paul.elschot@xs4all.nl" created="Tue, 15 Jan 2008 19:19:31 +0000"  >&lt;p&gt;I&apos;d start with these tests:&lt;/p&gt;

&lt;p&gt;ant -Dtestcase=&apos;Test*Bool*&apos; test-core&lt;/p&gt;

&lt;p&gt;You might also consider adding a test case in one of those tests that shows the bug without the patch applied.&lt;/p&gt;</comment>
                    <comment id="12559194" author="hossman" created="Tue, 15 Jan 2008 19:34:55 +0000"  >&lt;p&gt;At first glance, the patch seems right .. but an optimization can probably be made ... if there is only once clause, and minNrShouldMatch is greater then 1, the query can rewrite itself to a &quot;no-op&quot; type query that doesn&apos;t match any docs.&lt;/p&gt;

&lt;p&gt;Actually: BooleanQuery.rewrite can do something like that anytime minNrShouldMath is greater then the number of optional clauses.&lt;/p&gt;</comment>
                    <comment id="12559200" author="paul.elschot@xs4all.nl" created="Tue, 15 Jan 2008 19:44:57 +0000"  >&lt;p&gt;There is no real need for this optimization because BooleanScorer2 already uses a NonMatchingScorer for this case.&lt;/p&gt;</comment>
                    <comment id="12559210" author="hossman" created="Tue, 15 Jan 2008 20:06:19 +0000"  >&lt;p&gt;Ah... good call.&lt;/p&gt;

&lt;p&gt;(Hmmm.... it stil might be worth doing just to make it clear to clients earlier rather then later that they won&apos;t match anything.  ie:If you inspect a rewritten FuzzyQuery you get to see right away how many clauses it has ... why not let people inspecting a rewritten BooleanQuery in cases  like this see right away that their query is a No-Op ?)&lt;/p&gt;</comment>
                    <comment id="12559242" author="paul.elschot@xs4all.nl" created="Tue, 15 Jan 2008 21:42:05 +0000"  >&lt;p&gt;A FuzzyQuery rewrites to a BooleanQuery with SHOULD clauses only, so a check and cast to BooleanQuery and then a clauses().size() == 0 can check for a No-Op after a rewrite().&lt;/p&gt;</comment>
                    <comment id="12559247" author="hossman" created="Tue, 15 Jan 2008 21:48:45 +0000"  >&lt;p&gt;I think you&apos;re misunderstanding me Paul: i was just trying to make an analogy &amp;#8211; even if the Scorer optimizes away a BooleanQuery that can never match anything into a NonMatchingScorer, there are other advantages to having rewrite detect these situations (when it can) ... inspection of the rewritten queries being an example.&lt;/p&gt;</comment>
                    <comment id="12559360" author="shaie" created="Wed, 16 Jan 2008 06:03:55 +0000"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;W.r.t. testing, I found TestBooleanMinShouldMatch. It had testNoOptionalButMin which added two MUST clauses. I added testNoOptionalButMin2 that adds only a single clause. It fails without the patch and passes with the patch. Other than that the tests in this class pass.&lt;br/&gt;
I updated the patch to include the additional test.&lt;/p&gt;

&lt;p&gt;W.r.t. the optimization that was discussed: I don&apos;t understand how it can be done. BooleanQuery has a clauses list. It is not aware of any SHOULD, MUST or MUST_NOT clauses in its rewrite() method. So how exactly this optimization can be done? The only class that seems to be aware of the type of clauses is BooleanScorer2 in its add() method.&lt;/p&gt;</comment>
                    <comment id="12559361" author="shaie" created="Wed, 16 Jan 2008 06:07:01 +0000"  >&lt;p&gt;Fix + Test&lt;/p&gt;</comment>
                    <comment id="12565152" author="michaelbusch" created="Sun, 3 Feb 2008 08:21:49 +0000"  >&lt;p&gt;Committed. Thanks, Shai!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12373239" name="LUCENE-1134.patch" size="1486" author="shaie" created="Wed, 16 Jan 2008 06:07:00 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 15 Jan 2008 19:19:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12611</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26595</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>