<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1169/LUCENE-1169.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1169] Search with Filter does not work!</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1169</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;See attached JUnitTest, self-explanatory&lt;/p&gt;

</description>
                <environment></environment>
            <key id="12388100">LUCENE-1169</key>
            <summary>Search with Filter does not work!</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="eksdev">Eks Dev</reporter>
                        <labels>
                    </labels>
                <created>Thu, 7 Feb 2008 16:02:19 +0000</created>
                <updated>Sat, 9 Feb 2008 20:03:50 +0000</updated>
                    <resolved>Thu, 7 Feb 2008 23:11:02 +0000</resolved>
                                                            <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12566654" author="eksdev" created="Thu, 7 Feb 2008 16:03:42 +0000"  >&lt;p&gt;Filter Bug&lt;/p&gt;</comment>
                    <comment id="12566828" author="michaelbusch" created="Thu, 7 Feb 2008 22:38:36 +0000"  >&lt;p&gt;The problem is that in IndexSearcher#search() scorer.skipTo() is called without checking if the scorer is already at the same doc as the Filter&apos;s docIdSetIterator. And scorer.skipTo(scorer.doc()) behaves as scorer.next():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  /** Skips entries to the first beyond the current whose document number is
     * greater than or equal to &amp;lt;i&amp;gt;target&amp;lt;/i&amp;gt;. &amp;lt;p&amp;gt;Returns &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; iff there is such
     * an entry.  &amp;lt;p&amp;gt;Behaves as &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; written: &amp;lt;pre&amp;gt;
     *   &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; skipTo(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; target) {
     *     &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; {
     *       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!next())
     *         &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
     *     } &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (target &amp;gt; doc());
     *     &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
     *   }
     * &amp;lt;/pre&amp;gt;
     * Some implementations are considerably more efficient than that.
     */
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; skipTo(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; target) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which means that it is possible to miss the current doc (as Eks&apos; testcase shows). &lt;/p&gt;

&lt;p&gt;All tests (including the new one) pass with this patch. I&apos;ll commit soon.&lt;/p&gt;</comment>
                    <comment id="12566836" author="michaelbusch" created="Thu, 7 Feb 2008 23:11:02 +0000"  >&lt;p&gt;Committed. Thanks for finding this Eks!&lt;/p&gt;</comment>
                    <comment id="12566840" author="paul.elschot@xs4all.nl" created="Thu, 7 Feb 2008 23:15:52 +0000"  >&lt;p&gt;The patch looks correct to me, I missed the skipTo() precondition.&lt;br/&gt;
I wonder how that passed all the filter tests, but ok.&lt;/p&gt;

&lt;p&gt;Can I request to rename docSetIdIterator to filterDocIdIterator?&lt;/p&gt;</comment>
                    <comment id="12566842" author="paul.elschot@xs4all.nl" created="Thu, 7 Feb 2008 23:17:52 +0000"  >&lt;p&gt;Oops, I missed the commit for that request. Life goes fast sometimes.&lt;/p&gt;</comment>
                    <comment id="12566848" author="michaelbusch" created="Thu, 7 Feb 2008 23:39:59 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Oops, I missed the commit for that request. Life goes fast sometimes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually I committed it after I read your request. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12566971" author="eksdev" created="Fri, 8 Feb 2008 10:08:47 +0000"  >&lt;p&gt;Thank you for fixing it in no time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But...&lt;/p&gt;

&lt;p&gt;I am getting confused with skipping iterators semantics,&lt;/p&gt;

&lt;p&gt;is this requirement for the other DocIdSetIterators, of only for scorers (should be, I guess)?&lt;/p&gt;

&lt;p&gt;iterator.skipTo(iterator.doc()) &amp;lt;=&amp;gt; iterator.next();// is this contract?&lt;/p&gt;

&lt;p&gt;if that is the case,  we have another bug in OpenBitSetIterator (border condition)&lt;/p&gt;

&lt;p&gt;//this is the code in javadoc, &quot;official contract&quot;&lt;br/&gt;
  boolean simulatedSkipTo(DocIdSetIterator i, int target) throws IOException {&lt;br/&gt;
    do &lt;/p&gt;
{
      if (!i.next())
    return false;
    }
&lt;p&gt; while (target &amp;gt; i.doc());&lt;br/&gt;
    return true;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;  public void testOpenBitSetBorderCondition() throws IOException &lt;/p&gt;
{
    OpenBitSet bs = new OpenBitSet();
    bs.set(0);
    DocIdSetIterator i = bs.iterator();

    i.skipTo(i.doc());
    assertEquals(0, i.doc()); //cool, moved to the first legal position

    assertFalse(&quot;End of Matcher&quot;, i.skipTo(i.doc())); //NOT OK according to the javadoc
  }

&lt;p&gt;  public void testOpenBitSetBorderConditionSimulated() throws IOException &lt;/p&gt;
{
    OpenBitSet bs = new OpenBitSet();
    bs.set(0);
    DocIdSetIterator i = bs.iterator();

    simulatedSkipTo(i, i.doc());
    assertEquals(0, i.doc()); //cool, moved to the first legal position

    assertFalse(&quot;End of Matcher&quot;, simulatedSkipTo(i, i.doc())); //OK according to the javadoc!!
  }</comment>
                    <comment id="12567115" author="cutting" created="Fri, 8 Feb 2008 17:33:01 +0000"  >&lt;p&gt;&amp;gt; iterator.skipTo(iterator.doc()) &amp;lt;=&amp;gt; iterator.next();// is this contract?&lt;/p&gt;

&lt;p&gt;Yes.  The reason is that TermDocs#doc() cannot be called when a TermDocs is first created, since it is then positioned before the first entry.  One must call next() at least once before first calling doc().  If the TermDocs is empty, then doc() should never be called.  Consider the case of passing an empty TermDocs to skipTo(int): the call to next must be made, so that &apos;false&apos; is returned without ever calling doc().&lt;/p&gt;

&lt;p&gt;There are other ways of doing this, like defining that doc() returns -1 before next() has ever been called, and/or returning Integer.MAX_VALUE after the last document.  But, for better or worse, that&apos;s not the design that was chosen.&lt;/p&gt;</comment>
                    <comment id="12567306" author="eksdev" created="Sat, 9 Feb 2008 13:27:55 +0000"  >&lt;p&gt;Thank for explaining it!&lt;/p&gt;

&lt;p&gt;So we have now classes implementing DocIdSetIterator (OpenBitSetIterator, SortedVIntList...) that are strictly speaking not conforming to the specification for skipTo().  Side-effects we had here  are probably local for this issue, but I have somehow bad feeling having different behaving implementations of the same interface. Sounds paranoid, no &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;To make things better, new classes in core like eg. OpenBitSet cover the case you described, when we have iterator positioned one before the first one, but they do not comply to other side effects.&lt;/p&gt;

&lt;p&gt;Mainly, invoking iterator.skipTo(anything &amp;lt;= iterator.doc()) should have the same effect as next(), meaning that iterator gets moved not only in iterator.skipTo(iterator.doc()) ...&lt;/p&gt;

&lt;p&gt;to cut to the chase, should we attempt to fix all OpenDocIdSetIterator implementations to comply to these effects, or it will be enough to comment these differences &quot;relaxed skipTo contract&quot;? Current usage of  these classes is in Filter related code and is practically replacement for BitSet iteration, therefore &quot;under control&quot;. But if we move on using these classes tightly with Scorers I am afraid we could expect &quot;one off&quot; and similar bugs.&lt;/p&gt;

&lt;p&gt;Another option would be to change specification and use this sentinel -1 approach, but honestly, this is way above my  head to comment...    &lt;/p&gt;

</comment>
                    <comment id="12567351" author="paul.elschot@xs4all.nl" created="Sat, 9 Feb 2008 20:03:50 +0000"  >&lt;p&gt;Some of the bugs caused by this skipTo() behaviour are hard to catch:&lt;br/&gt;
&lt;a href=&quot;http://issues.apache.org/bugzilla/show_bug.cgi?id=35823&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/bugzilla/show_bug.cgi?id=35823&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically the fix was to guard every invocation of skipTo() with a target &amp;gt; doc()&lt;br/&gt;
test when no advancing should be done.&lt;/p&gt;

&lt;p&gt;In the above case I still don&apos;t know what the exact cause was, as the last patch&lt;br/&gt;
added this guarding test in more than one place.&lt;/p&gt;

&lt;p&gt;One way to &apos;fix&apos; this is by adding to the javadoc of skipTo() that the behaviour is&lt;br/&gt;
undefined when target &amp;lt;= doc(), and otherwise the behaviour is the old behaviour.&lt;br/&gt;
Implementations should then define the behaviour when target &amp;lt;= doc().&lt;br/&gt;
This has the advantage that the only way to fix it is by reviewing all the&lt;br/&gt;
skipTo(targetDocId) code when the javadoc does not completely define the behaviour&lt;br/&gt;
of an implementation.&lt;/p&gt;

&lt;p&gt;Another way to go about this is to consider target&amp;lt;=doc() on entry of skipTo a bug,&lt;br/&gt;
and add sth like this:&lt;br/&gt;
assert (notInitialized and (target &amp;gt;= 0) or (target &amp;gt; doc());&lt;br/&gt;
at the entry of each skipTo implementation in the trunk and fix the bugs as they show up.&lt;/p&gt;

&lt;p&gt;For the moment I prefer the latter, it is a bit drastic, but it gets rid of a lot of uncertainty.&lt;br/&gt;
Anyway, when taking it that far, it&apos;s another issue.&lt;/p&gt;

</comment>
                </comments>
                    <attachments>
                    <attachment id="12375027" name="lucene-1169.patch" size="4446" author="michaelbusch" created="Thu, 7 Feb 2008 22:38:36 +0000" />
                    <attachment id="12374985" name="TestFilteredSearch.java" size="3147" author="eksdev" created="Thu, 7 Feb 2008 16:03:42 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 7 Feb 2008 22:38:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12576</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26560</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>