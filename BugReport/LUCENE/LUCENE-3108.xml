<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:18:47 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3108/LUCENE-3108.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3108] Land DocValues on trunk</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3108</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Its time to move another feature from branch to trunk. I want to start this process now while still a couple of issues remain on the branch. Currently I am down to a single nocommit (javadocs on DocValues.java) and a couple of testing TODOs (explicit multithreaded tests and unoptimized with deletions) but I think those are not worth separate issues so we can resolve them as we go. &lt;br/&gt;
The already created issues (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3075&quot; title=&quot;DocValues should be optionally be stored in a PerCodec CFS file to prevent too many files in the index&quot;&gt;&lt;del&gt;LUCENE-3075&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3074&quot; title=&quot;SimpleTextCodec needs SimpleText DocValues impl&quot;&gt;&lt;del&gt;LUCENE-3074&lt;/del&gt;&lt;/a&gt;) should not block this process here IMO, we can fix them once we are on trunk. &lt;/p&gt;

&lt;p&gt;Here is a quick feature overview of what has been implemented:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;DocValues implementations for Ints (based on PackedInts), Float 32 / 64, Bytes (fixed / variable size each in sorted, straight and deref variations)&lt;/li&gt;
	&lt;li&gt;Integration into Flex-API, Codec provides a PerDocConsumer-&amp;gt;DocValuesConsumer (write) / PerDocValues-&amp;gt;DocValues (read)&lt;/li&gt;
	&lt;li&gt;By-Default enabled in all codecs except of PreFlex&lt;/li&gt;
	&lt;li&gt;Follows other flex-API patterns like non-segment reader throw UOE forcing MultiPerDocValues if on DirReader etc.&lt;/li&gt;
	&lt;li&gt;Integration into IndexWriter, FieldInfos etc.&lt;/li&gt;
	&lt;li&gt;Random-testing enabled via RandomIW - injecting random DocValues into documents&lt;/li&gt;
	&lt;li&gt;Basic checks in CheckIndex (which runs after each test)&lt;/li&gt;
	&lt;li&gt;FieldComparator for int and float variants (Sorting, currently directly integrated into SortField, this might go into a separate DocValuesSortField eventually)&lt;/li&gt;
	&lt;li&gt;Extended TestSort for DocValues&lt;/li&gt;
	&lt;li&gt;RAM-Resident random access API plus on-disk DocValuesEnum (currently only sequential access) -&amp;gt; Source.java / DocValuesEnum.java&lt;/li&gt;
	&lt;li&gt;Extensible Cache implementation for RAM-Resident DocValues (by-default loaded into RAM only once and freed once IR is closed) -&amp;gt; SourceCache.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;PS: Currently the RAM resident API is named Source (Source.java) which seems too generic. I think we should rename it into RamDocValues or something like that, suggestion welcome!   &lt;/p&gt;


&lt;p&gt;Any comments, questions (rants &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) are very much appreciated.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12507454">LUCENE-3108</key>
            <summary>Land DocValues on trunk</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 17 May 2011 09:07:39 +0100</created>
                <updated>Fri, 10 May 2013 11:44:52 +0100</updated>
                    <resolved>Fri, 10 Jun 2011 14:21:36 +0100</resolved>
                            <version>4.0-ALPHA</version>
                <version>CSF branch</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                <component>core/search</component>
                <component>core/store</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="13034645" author="mikemccand" created="Tue, 17 May 2011 10:35:52 +0100"  >&lt;p&gt;+1, excellent!&lt;/p&gt;</comment>
                    <comment id="13035017" author="mikemccand" created="Tue, 17 May 2011 21:05:52 +0100"  >&lt;p&gt;This is an awesome change!&lt;/p&gt;

&lt;p&gt;Phew been a long time since I looked at this branch!&lt;/p&gt;

&lt;p&gt;Some questions on a quick pass &amp;#8211; still need to iterate/dig deeper:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;We have some stale jdocs that reference .setIntValue methods (they&lt;br/&gt;
    are now .setInt)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Hmm do we have byte ordering problems?  Ie, if I write index on&lt;br/&gt;
    machine with little-endian but then try to load values on&lt;br/&gt;
    big-endian...?  I think we&apos;re OK (we seem to always use&lt;br/&gt;
    IndexOutput.writeInt, and we convert float-to-raw-int-bits using&lt;br/&gt;
    java&apos;s APIs)?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Since we dynamically reserve a value to mean &quot;unset&quot;, does that&lt;br/&gt;
    mean there are some datasets we cannot index?  Or... do we tap&lt;br/&gt;
    into the unused bit of a long, ie the sentinel value can be&lt;br/&gt;
    negative?  But if the data set spans Long.MIN_VALUE to&lt;br/&gt;
    Long.MAX_VALUE, what do we do...?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;How come codecID changed from String to int on the branch?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;What are oal.util.Pair and ParallelArray for?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;FloatsRef should state in the jdocs that it&apos;s really slicing a&lt;br/&gt;
    double[]?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Can SortField somehow detect whether the needed field was stored&lt;br/&gt;
    in FC vs DV and pick the right comparator accordingly...?  Kind of&lt;br/&gt;
    like how NumericField can detect whether the ints are encoded as&lt;br/&gt;
    &quot;plain text&quot; or as NF?  We can open a new issue for this,&lt;br/&gt;
    post-landing...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;It looks like we can sort by int/long/float/double pulled from DV,&lt;br/&gt;
    but not by terms?  This is fine for landing... but I think we&lt;br/&gt;
    should open a post-landing issue to also make FieldComparators for&lt;br/&gt;
    the Terms cases?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Should we rename oal.index.values.Type -&amp;gt; .ValueType?  Just&lt;br/&gt;
    because... it looks so generic when its imported &amp;amp; used as &quot;Type&quot;&lt;br/&gt;
    somewhere?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13035234" author="simonw" created="Wed, 18 May 2011 09:18:39 +0100"  >&lt;p&gt;Mike thanks for the review!!!!!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Phew been a long time since I looked at this branch!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;its been changing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; We have some stale jdocs that reference .setIntValue methods (they&lt;br/&gt;
are now .setInt)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;True - thanks I will fix.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Hmm do we have byte ordering problems? Ie, if I write index on&lt;br/&gt;
machine with little-endian but then try to load values on&lt;br/&gt;
big-endian...? I think we&apos;re OK (we seem to always use&lt;br/&gt;
IndexOutput.writeInt, and we convert float-to-raw-int-bits using&lt;br/&gt;
java&apos;s APIs)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We are ok here since we write big-endian (enforced by DataOutput) and read it back in as plain bytes. The created ByteBuffer will always use BIG_ENDIAN as the default order. I added a comment for this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How come codecID changed from String to int on the branch?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;due to DocValues I need to compare the ID to certain fields to see for what field I stored and need to open docValues. I always had to parse the given string which is kind of odd. I think its more natural to have the same datatype on FieldInfo, SegmentCodecs and eventually in the Codec#files() method. Making a string out of it is way simpler / less risky than parsing IMO.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; What are oal.util.Pair and ParallelArray for?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;legacy I will remove&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; FloatsRef should state in the jdocs that it&apos;s really slicing a&lt;br/&gt;
double[]?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yep done!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Can SortField somehow detect whether the needed field was stored&lt;br/&gt;
in FC vs DV and pick the right comparator accordingly...? Kind of&lt;br/&gt;
like how NumericField can detect whether the ints are encoded as&lt;br/&gt;
&quot;plain text&quot; or as NF? We can open a new issue for this,&lt;br/&gt;
post-landing...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is tricky though. You can have a DV field that is indexed too so its hard to tell if we can reliably do it. If we can&apos;t make it reliable I think we should not do it at all.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;It looks like we can sort by int/long/float/double pulled from DV,&lt;br/&gt;
but not by terms? This is fine for landing... but I think we&lt;br/&gt;
should open a post-landing issue to also make FieldComparators for&lt;br/&gt;
the Terms cases?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah true. I didn&apos;t add a FieldComparator for bytes yet. I think this is post landing!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Should we rename oal.index.values.Type -&amp;gt; .ValueType? Just&lt;br/&gt;
because... it looks so generic when its imported &amp;amp; used as &quot;Type&quot;&lt;br/&gt;
somewhere?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;agreed. I also think we should rename Source but I don&apos;t have a good name yet. Any idea?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt; Since we dynamically reserve a value to mean &quot;unset&quot;, does that&lt;br/&gt;
mean there are some datasets we cannot index? Or... do we tap&lt;br/&gt;
into the unused bit of a long, ie the sentinel value can be&lt;br/&gt;
negative? But if the data set spans Long.MIN_VALUE to&lt;br/&gt;
Long.MAX_VALUE, what do we do...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, tricky! The quick answer is yes, but we can&apos;t do that anyway since I have not normalize the range to be 0 based since PackedInts doesn&apos;t allow negative values. so the range we can store is (2^63) -1. So essentially with the current impl we can store (2^63)-2 and the max value is Long#MAX_VALUE-1. Currently there is no assert for this which is needed I think but to get around this we need to have a different impl I think or do I miss something? &lt;/p&gt;

&lt;p&gt;I will make the changes once SVN is writeable again.&lt;/p&gt;
</comment>
                    <comment id="13035386" author="simonw" created="Wed, 18 May 2011 14:55:54 +0100"  >&lt;p&gt;FYI. I ran indexing benchmarks trunk vs. branch and they are super close together. its like 3 sec difference while branch was faster so its in the noise. I also indexed one docvalues field (floats) which was also about the same 2 sec. slower including merges etc. So we are on the save side that this feature does not influence indexing performance. I didn&apos;t expect anything else really since the only difference is a single condition in DocFieldProcessor.&lt;/p&gt;</comment>
                    <comment id="13036165" author="simonw" created="Thu, 19 May 2011 13:59:44 +0100"  >&lt;p&gt;I found some problems with tracking the used bytes during indexing. The AtomicLong was passed only to BytesRefHash but not to the block Allocator. I moved the tracking direct block allocator from DWPT into ByteBlockPool and use it in each of the Bytes Writers now.&lt;/p&gt;

&lt;p&gt;I also made some minor cleanups here and there and added more try / finally around Closeables.&lt;/p&gt;

&lt;p&gt;I plan to commit soon since this is really work in progress.&lt;/p&gt;
</comment>
                    <comment id="13036284" author="mikemccand" created="Thu, 19 May 2011 17:37:08 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;How come codecID changed from String to int on the branch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;due to DocValues I need to compare the ID to certain fields to see for&lt;br/&gt;
what field I stored and need to open docValues. I always had to parse&lt;br/&gt;
the given string which is kind of odd. I think its more natural to&lt;br/&gt;
have the same datatype on FieldInfo, SegmentCodecs and eventually in&lt;br/&gt;
the Codec#files() method. Making a string out of it is way simpler /&lt;br/&gt;
less risky than parsing IMO.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK that sounds great.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Can SortField somehow detect whether the needed field was stored in FC vs DV&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is tricky though. You can have a DV field that is indexed too so its hard to tell if we can reliably do it. If we can&apos;t make it reliable I think we should not do it at all.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is tricky... but, eg, when someone does SortField(&quot;title&quot;,&lt;br/&gt;
SortField.STRING), which cache (DV or FC) should we populate?&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Should we rename oal.index.values.Type -&amp;gt; .ValueType?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;agreed. I also think we should rename Source but I don&apos;t have a good name yet. Any idea?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ValueSource?  (conflicts w/ FQs though) Though, maybe we can just&lt;br/&gt;
refer to it as DocValues.Source, then it&apos;s clear?&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Since we dynamically reserve a value to mean &quot;unset&quot;, does that mean there are some datasets we cannot index?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, tricky! The quick answer is yes, but we can&apos;t do that anyway since I have not normalize the range to be 0 based since PackedInts doesn&apos;t allow negative values. so the range we can store is (2^63) -1. So essentially with the current impl we can store (2^63)-2 and the max value is Long#MAX_VALUE-1. Currently there is no assert for this which is needed I think but to get around this we need to have a different impl I think or do I miss something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, but I think if we make a &quot;straight longs&quot; impl (ie no packed ints at all) then we can handle all long values?  But in that case we&apos;d require the app to pick a sentinel to mean &quot;unset&quot;?&lt;/p&gt;</comment>
                    <comment id="13036290" author="yseeley@gmail.com" created="Thu, 19 May 2011 17:47:31 +0100"  >&lt;blockquote&gt;&lt;p&gt;ValueSource? (conflicts w/ FQs though) Though, maybe we can just refer to it as DocValues.Source, then it&apos;s clear?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Both ValueSource and DocValues have long been used by function queries.&lt;/p&gt;</comment>
                    <comment id="13036798" author="simonw" created="Fri, 20 May 2011 13:32:08 +0100"  >&lt;blockquote&gt;&lt;p&gt;It is tricky... but, eg, when someone does SortField(&quot;title&quot;, SortField.STRING), which cache (DV or FC) should we populate?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should have a specialized sort field eventually. FCSortField / DVSortField?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Both ValueSource and DocValues have long been used by function queries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Suggestions welcome - nothing is fixed yet so we should find non-conflicting names. Maybe we can call it o.a.l.index.columns.Columns and o.a.l.index.columns.ColumnsEnum / ColumnsArray (instead of source) &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;OK, but I think if we make a &quot;straight longs&quot; impl (ie no packed ints at all) then we can handle all long values? But in that case we&apos;d require the app to pick a sentinel to mean &quot;unset&quot;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, I will open an issue.&lt;/p&gt;</comment>
                    <comment id="13043446" author="simonw" created="Fri, 3 Jun 2011 17:25:28 +0100"  >&lt;p&gt;Hey folks,&lt;br/&gt;
we are ready for the final review rounds here, I resolved the naming conflict by renaming DocValues to IndexDocValues, fixed all the outstanding documentation issues and added a fixed ints impl that automatically switches over to fixed int/long if packed ints can not handle the range of the values in a field.&lt;/p&gt;

&lt;p&gt;I am preparing a review patch now.&lt;/p&gt;</comment>
                    <comment id="13043565" author="simonw" created="Fri, 3 Jun 2011 17:43:27 +0100"  >&lt;p&gt;here is a first patch for review. Any comments very much appreciated!&lt;/p&gt;

&lt;p&gt;I know its big but what can I say &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13044112" author="simonw" created="Fri, 3 Jun 2011 23:58:44 +0100"  >&lt;p&gt;here is a smaller version that doesn&apos;t contain all the solr svn attribute changes etc.&lt;/p&gt;</comment>
                    <comment id="13046451" author="mikemccand" created="Thu, 9 Jun 2011 11:23:15 +0100"  >&lt;p&gt;I did another review here &amp;#8211; I think it&apos;s ready to land on trunk!  Nice work Simon!&lt;/p&gt;</comment>
                    <comment id="13046472" author="simonw" created="Thu, 9 Jun 2011 12:19:51 +0100"  >&lt;p&gt;here is a changes entry for docvalues - comments welcome&lt;/p&gt;</comment>
                    <comment id="13046473" author="thetaphi" created="Thu, 9 Jun 2011 12:21:09 +0100"  >&lt;p&gt;One small issue:&lt;/p&gt;

&lt;p&gt;There seems to be a merge missing in file TestIndexSplitter, the changes in there are unrelated, so this reverts a commit on trunk for improving tests.&lt;/p&gt;

&lt;p&gt;The problem with the README.txt is already fixed.&lt;/p&gt;

&lt;p&gt;...still digging&lt;/p&gt;</comment>
                    <comment id="13046474" author="simonw" created="Thu, 9 Jun 2011 12:25:14 +0100"  >&lt;blockquote&gt;&lt;p&gt;There seems to be a merge missing in file TestIndexSplitter, the changes in there are unrelated, so this reverts a commit on trunk for improving tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;fixed revision 1133794&lt;/p&gt;

&lt;p&gt;thanks uwe!&lt;/p&gt;</comment>
                    <comment id="13046506" author="simonw" created="Thu, 9 Jun 2011 13:32:00 +0100"  >&lt;p&gt;here is the latest diff for docvalues I will now reintegrate the branch and post diffs later.&lt;/p&gt;</comment>
                    <comment id="13046524" author="simonw" created="Thu, 9 Jun 2011 14:15:55 +0100"  >&lt;p&gt;Patch that reflects the last changes to sync with trunk after I ran svn merge -reintegrate &lt;br/&gt;
The reintegrated branch looks good, no unchanged additions etc. &lt;/p&gt;

&lt;p&gt;I think we are ready to land this on trunk... I will wait a day or two if somebody has objections. &lt;/p&gt;

&lt;p&gt;here is my +1 to commit&lt;/p&gt;</comment>
                    <comment id="13046537" author="ryantxu" created="Thu, 9 Jun 2011 14:38:26 +0100"  >&lt;p&gt;+1   This looks great.  &lt;/p&gt;

&lt;p&gt;To avoid more svn work, I think committing soon is better then later.&lt;/p&gt;</comment>
                    <comment id="13047175" author="simonw" created="Fri, 10 Jun 2011 14:21:36 +0100"  >&lt;p&gt;Reintegrated, Tested, Committed to trunk in revision  1134311&lt;/p&gt;

&lt;p&gt;thanks guys, its in eventually!&lt;/p&gt;</comment>
                    <comment id="13289361" author="zhygr" created="Tue, 5 Jun 2012 13:10:42 +0100"  >&lt;p&gt;Hi, Simon. Can doc values be optional? I am looking into org.apache.lucene.codecs.DocValuesConsumer#merge and see that the logic assumes that for every docId we have a existing value. Or we use the default value instead?   &lt;/p&gt;</comment>
                    <comment id="13289401" author="simonw" created="Tue, 5 Jun 2012 14:28:32 +0100"  >&lt;blockquote&gt;&lt;p&gt;Hi, Simon. Can doc values be optional? I am looking into org.apache.lucene.codecs.DocValuesConsumer#merge and see that the logic assumes that for every docId we have a existing value. Or we use the default value instead?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;hey, DocValues are dense and assume a value for each document. Yet, if you don&apos;t enable DocValues on a fields its not stored so you only store it for certain fields. If you have just a small set of repeated values DocValues can store them efficiently and dedupliate if you are concerned about that.&lt;/p&gt;

&lt;p&gt;in general you should rather ask these kind of questions on the main dev mailing list.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13289667" author="zhygr" created="Tue, 5 Jun 2012 20:52:13 +0100"  >&lt;p&gt;Thank you. The thing that make me ask this question is that in the org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl.FixedBytesWriterBase#add we have logic that handles cases when =&amp;gt; (lastDocID+1 &amp;lt; docID) so I assumed that docId may have gap greater than 1.&lt;/p&gt;

&lt;p&gt;&quot;in general you should rather ask these kind of questions on the main dev mailing list.&quot;&lt;br/&gt;
Sure. &lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12481914" name="LUCENE-3108_CHANGES.patch" size="1619" author="simonw" created="Thu, 9 Jun 2011 12:19:51 +0100" />
                    <attachment id="12481926" name="LUCENE-3108.patch" size="461382" author="simonw" created="Thu, 9 Jun 2011 14:15:55 +0100" />
                    <attachment id="12481921" name="LUCENE-3108.patch" size="462866" author="simonw" created="Thu, 9 Jun 2011 13:32:00 +0100" />
                    <attachment id="12481415" name="LUCENE-3108.patch" size="423955" author="simonw" created="Fri, 3 Jun 2011 23:58:44 +0100" />
                    <attachment id="12481370" name="LUCENE-3108.patch" size="783315" author="simonw" created="Fri, 3 Jun 2011 17:43:27 +0100" />
                    <attachment id="12479767" name="LUCENE-3108.patch" size="21146" author="simonw" created="Thu, 19 May 2011 13:59:44 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 17 May 2011 09:35:52 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10821</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24586</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>