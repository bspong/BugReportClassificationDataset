<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:18:38 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2657/LUCENE-2657.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2657] Replace Maven POM templates with full POMs, and change documentation accordingly</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2657</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The current Maven POM templates only contain dependency information, the bare bones necessary for uploading artifacts to the Maven repository.&lt;/p&gt;

&lt;p&gt;The full Maven POMs in the attached patch include the information necessary to run a multi-module Maven build, in addition to serving the same purpose as the current POM templates.&lt;/p&gt;

&lt;p&gt;Several dependencies are not available through public maven repositories.  A profile in the top-level POM can be activated to install these dependencies from the various &lt;tt&gt;lib/&lt;/tt&gt; directories into your local repository.  From the top-level directory:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -N -Pbootstrap install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once these non-Maven dependencies have been installed, to run all Lucene/Solr tests via Maven&apos;s surefire plugin, and populate your local repository with all artifacts, from the top level directory, run:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When one Lucene/Solr module depends on another, the dependency is declared on the &lt;b&gt;artifact(s)&lt;/b&gt; produced by the other module and deposited in your local repository, rather than on the other module&apos;s un-jarred compiler output in the &lt;tt&gt;build/&lt;/tt&gt; directory, so you must run &lt;tt&gt;mvn install&lt;/tt&gt; on the other module before its changes are visible to the module that depends on it.&lt;/p&gt;

&lt;p&gt;To create all the artifacts without running tests:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -DskipTests install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I almost always include the &lt;tt&gt;clean&lt;/tt&gt; phase when I do a build, e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -DskipTests clean install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
            <key id="12474598">LUCENE-2657</key>
            <summary>Replace Maven POM templates with full POMs, and change documentation accordingly</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="steve_rowe">Steve Rowe</assignee>
                                <reporter username="steve_rowe">Steve Rowe</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Sep 2010 15:39:29 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:29 +0100</updated>
                    <resolved>Sat, 22 Jan 2011 07:42:54 +0000</resolved>
                            <version>3.1</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>general/build</component>
                        <due></due>
                    <votes>6</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12912487" author="rcmuir" created="Mon, 20 Sep 2010 15:58:32 +0100"  >&lt;p&gt;How would the BuildListener interface know about dependencies? Does it have some magic way to know this?&lt;/p&gt;

&lt;p&gt;As an example, lets take modules/analysis/icu which has 3 dependencies:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Lucene core itself (implicit from contrib-build.xml)&lt;/li&gt;
	&lt;li&gt;external dependency: ICU&lt;/li&gt;
	&lt;li&gt;internal dependency: modules/analysis/common&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;take a look at modules/analysis/icu&apos;s pom.xml which has:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  &amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;com.ibm.icu&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;icu4j&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;${icu-version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
  &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, our ant builds (that depend on common-build/contrib-build) declare their dependencies in a semi-standard way:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;External dependencies:
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;path id=&quot;additional.dependencies&quot;&amp;gt;
  &amp;lt;fileset dir=&quot;lib&quot; includes=&quot;icu4j-*.jar&quot;/&amp;gt;
&amp;lt;/path&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Internal dependencies:
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;module-uptodate name=&quot;analysis/common&quot; 
jarfile=&quot;../build/common/lucene-analyzers-common-${version}.jar&quot;
  property=&quot;analyzers-common.uptodate&quot; classpath.property=&quot;analyzers-common.jar&quot;/&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The contrib-build.xml already has a &apos;dist-maven&apos; target, that is called recursively. Perhaps an alternative would be to improve contrib-build.xml for it to have a &apos;generate-maven&apos; target, also called recursively.&lt;br/&gt;
I&apos;ve already prototyped/proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2002&quot; title=&quot;improve build/tests&quot;&gt;&lt;del&gt;SOLR-2002&lt;/del&gt;&lt;/a&gt; that we migrate the solr build to extend the lucene build, so everywhere would use it.&lt;/p&gt;

&lt;p&gt;Furthermore, couldnt we also make a recursive &apos;test-maven&apos; target, that generates a maven project to &apos;download&apos; or whatever it needs, then tries to run all the tests?&lt;br/&gt;
If somehow the maven is broken, the tests simply won&apos;t pass.&lt;/p&gt;

&lt;p&gt;I realize that running all of a modules tests again redundantly via &apos;maven&apos; might not be the most elegant solution, but it seems like it would test that everything is working.&lt;/p&gt;</comment>
                    <comment id="12912495" author="steve_rowe" created="Mon, 20 Sep 2010 16:19:02 +0100"  >&lt;blockquote&gt;&lt;p&gt;How would the BuildListener interface know about dependencies? Does it have some magic way to know this? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;BuildListener has hooks for build task onset and completion events (inter alia).  ant2ide listens for Javac task completion, and captures from it the source and target directories, as well as the build classpath.  You have to invoke compilation from an Ant build in order for this to work.&lt;/p&gt;

&lt;p&gt;Seems kinda magical to me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The missing part here is figuring out the maven groupId/artifactId/version, and I &lt;b&gt;think&lt;/b&gt; this can be dealt with by looking at the manifest in the jar.  Maven-produced jars also contain their POMs, and pulling from there would be even simpler.&lt;/p&gt;</comment>
                    <comment id="12912548" author="rcmuir" created="Mon, 20 Sep 2010 16:45:52 +0100"  >&lt;blockquote&gt;
&lt;p&gt;BuildListener has hooks for build task onset and completion events (inter alia). ant2ide listens for Javac task completion, and captures from it the source and target directories, as well as the build classpath. You have to invoke compilation from an Ant build in order for this to work.&lt;/p&gt;

&lt;p&gt;Seems kinda magical to me&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, i guess this is similar to when I open the project up in eclipse and say &apos;from existing ant build.xml file&apos; and it sets up my eclipse project. &lt;/p&gt;</comment>
                    <comment id="12913350" author="cmale" created="Wed, 22 Sep 2010 03:07:35 +0100"  >&lt;p&gt;I&apos;m wondering whether generating poms is just going to make them more mysterious.  While they are templates I can at least see them and they can be validated by XML validators (including IDEs).  Suddenly they are created through a more complex process which we also have to maintain.  &lt;/p&gt;

&lt;p&gt;Assuming we have well-structured poms in the first place (huge assumption, different issue), are developers unprepared to add the appropriate dependency to the necessary pom? It doesn&apos;t seem like it&apos;ll happen very often, most of our artifacts have very few dependencies and we resist increasing them.  We can document the process, make it very clear exactly what needs to be added and where.&lt;/p&gt;

&lt;p&gt;Also, I&apos;m not sure all jars are going to have the appropriate manifest.  If the pom is generated (like Artifactory can do btw), I&apos;m not sure it is packaged in the jar?&lt;/p&gt;

&lt;p&gt;I think Robert was onto the right idea with this original proposal: If we consider our modules section and if we add a pom at the modules level and then one for each module, running a build from the modules level will recursively build each module.  If there is something wrong with the poms themselves, maven will fail.  If a dependency is omitted meaning the code cannot be built, maven will fail.  If any of these 2 issues occur, then the build would fail and an issue can be created for those more comfortable with maven to fix.&lt;/p&gt;</comment>
                    <comment id="12913361" author="steve_rowe" created="Wed, 22 Sep 2010 03:44:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;Assuming we have well-structured poms in the first place (huge assumption, different issue), are developers unprepared to add the appropriate dependency to the necessary pom? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If nothing else, it is abundantly clear that there are more than a couple of Lucene/Solr developers that don&apos;t want to put in &lt;b&gt;any&lt;/b&gt; effort for Maven&apos;s sake.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I&apos;m not sure all jars are going to have the appropriate manifest. If the pom is generated (like Artifactory can do btw), I&apos;m not sure it is packaged in the jar?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve looked into 10-15 jars, and very few have the required info.  Some even have the wrong information in the manifest...&lt;/p&gt;

&lt;p&gt;I think we can use .jar digest (SHA-1) as identifiers to look up the appropriate Maven info to automatically set up POM dependencies.  I wrote a script to crawl the central Maven repo for SHA-1 keyed Maven coordinates (groupId:artifactId:version), and it seems to work, but at the rate it&apos;s progressing, it will take 4 days to finish.  Anyway, it seems like overkill to gather info on all of the ~250k artifacts in the Maven central repo, just to handle the ~80 .jar files in the Lucene/Solr source tree.  &lt;/p&gt;

&lt;p&gt;I found a free service that provides Maven central repo search, including by artifact digest: &lt;a href=&quot;http://www.jarvana.com/jarvana/search&quot; class=&quot;external-link&quot;&gt;http://www.jarvana.com/jarvana/search&lt;/a&gt; - it uses Lucene to power the search &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  I plan on using this as the basis for automatic Maven coordinate lookup for arbitrary .jars.&lt;/p&gt;</comment>
                    <comment id="12913373" author="cmale" created="Wed, 22 Sep 2010 04:47:48 +0100"  >&lt;blockquote&gt;&lt;p&gt;If nothing else, it is abundantly clear that there are more than a couple of Lucene/Solr developers that don&apos;t want to put in any effort for Maven&apos;s sake.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If developers are willing to add the dependency jar and lines to the ant file but not add the 5 lines to the pom, then I&apos;m not sure any of these attempts are really going to succeed.  Sure many developers don&apos;t like maven, but I haven&apos;t seen any straight out refuse to use it yet (unless I misread the large email thread), they are just demanding ease of use.&lt;/p&gt;

&lt;p&gt;My concern here is this process is going in the opposite direction by making it vastly more complicated.  What your proposing sounds like a great app independent of Lucene - a way to convert from an ant build system to a maven one, but I&apos;m unsure its something that should be part of a build process instead of a once off thing.  Certainly when we are trying to simplify said build process.&lt;/p&gt;</comment>
                    <comment id="12913379" author="steve_rowe" created="Wed, 22 Sep 2010 05:06:46 +0100"  >&lt;blockquote&gt;&lt;p&gt;My concern here is this process is going in the opposite direction by making it vastly more complicated. What your proposing sounds like a great app independent of Lucene - a way to convert from an ant build system to a maven one, but I&apos;m unsure its something that should be part of a build process instead of a once off thing. Certainly when we are trying to simplify said build process.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is not the build process that requires simplification (is anybody really calling for that?), but rather developers&apos; interaction with it?&lt;/p&gt;</comment>
                    <comment id="12913386" author="steve_rowe" created="Wed, 22 Sep 2010 05:24:51 +0100"  >&lt;p&gt;I don&apos;t see this issue as providing a complete Ant-&amp;gt;Maven conversion system.  The poms I envision will look just like the POM templates after they are interpolated - they will provide Maven coordinates for artifacts and their dependencies, nothing more.  And the process to produce them can be carried out as part of generating Maven artifacts.  I don&apos;t think they will need to be checked in, but they certainly could be.&lt;/p&gt;

&lt;p&gt;In other words, I don&apos;t plan on building a complete Maven build configuration here.  Just the bare-bones POMs required to upload artifacts, like the manually synched system we have now.   Only without the manual synching part. &lt;/p&gt;

&lt;p&gt;Vive la simplification!&lt;/p&gt;</comment>
                    <comment id="12913387" author="rcmuir" created="Wed, 22 Sep 2010 05:26:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;It is not the build process that requires simplification (is anybody really calling for that?), but rather developers&apos; interaction with it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am trying to simplify the build, with the prototype in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2002&quot; title=&quot;improve build/tests&quot;&gt;&lt;del&gt;SOLR-2002&lt;/del&gt;&lt;/a&gt;, whereas most things are in a single common-build and we invoke them recursively (things like rat, dist, test, javadocs).&lt;/p&gt;

&lt;p&gt;Right now it is complicated mostly because there are actually many build setups that are essentially standalone, and then have been linked to depend on each other.&lt;/p&gt;</comment>
                    <comment id="12913391" author="steve_rowe" created="Wed, 22 Sep 2010 05:36:11 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It is not the build process that requires simplification (is anybody really calling for that?), but rather developers&apos; interaction with it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am trying to simplify the build, with the prototype in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2002&quot; title=&quot;improve build/tests&quot;&gt;&lt;del&gt;SOLR-2002&lt;/del&gt;&lt;/a&gt;, whereas most things are in a single common-build and we invoke them recursively (things like rat, dist, test, javadocs).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I stand corrected.  Build simplification is certainly a goal I support; without the flexibility afforded by a coherent build system, issues like this one would definitely be more difficult to implement.&lt;/p&gt;</comment>
                    <comment id="12913393" author="rcmuir" created="Wed, 22 Sep 2010 05:43:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;I stand corrected. Build simplification is certainly a goal I support; without the flexibility afforded by a coherent build system, issues like this one would definitely be more difficult to implement.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Exactly, because if you were to write a patch for this issue today, you have to implement it in 4 or 5 different places at the moment (or at least employ dirty ant hacks)&lt;/p&gt;

&lt;p&gt;The same problem prevents us from really improving our build in other ways: for example we should probably support findbugs/pmd integration and things like that, and it should be simple.&lt;/p&gt;</comment>
                    <comment id="12913445" author="cmale" created="Wed, 22 Sep 2010 08:47:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t see this issue as providing a complete Ant-&amp;gt;Maven conversion system. The poms I envision will look just like the POM templates after they are interpolated - they will provide Maven coordinates for artifacts and their dependencies, nothing more. And the process to produce them can be carried out as part of generating Maven artifacts. I don&apos;t think they will need to be checked in, but they certainly could be.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Its this sort of middle ground that I&apos;m unsure about.  We basically have maven support today but not really.  Some people understand how it works, but I&apos;ve certainly seen users who are dabbling in some development and are confused by our maven support.  I cant think of another project that generates its poms (even ant itself has the poms well-formed inside its codebase) so suddenly our support has become more unusual.&lt;/p&gt;

&lt;p&gt;What I&apos;m hoping is that we can actually add quality support for maven in such a way that users wouldn&apos;t be surprised, developers like you and I can get the benefits we know maven has, and that also simplifies what Robert has to do.  &lt;/p&gt;

&lt;p&gt;If all we can do at the moment is bolt bits of maven onto ant, I&apos;m unsure its worth while.&lt;/p&gt;</comment>
                    <comment id="12913450" author="cmale" created="Wed, 22 Sep 2010 08:53:06 +0100"  >&lt;p&gt;I should add that I&apos;m currently looking at how ant supports maven releases since it does have a contrib-like folder of poms, well formed.&lt;/p&gt;</comment>
                    <comment id="12913578" author="steve_rowe" created="Wed, 22 Sep 2010 15:35:50 +0100"  >&lt;p&gt;I have changed the issue summary and description to manual generation of authoritative POMs, rather than automatic synching of POM templates with Ant dependencies, which can be pursued later.&lt;/p&gt;</comment>
                    <comment id="12914104" author="yseeley@gmail.com" created="Thu, 23 Sep 2010 18:12:18 +0100"  >&lt;blockquote&gt;&lt;p&gt;Full Maven POMs will include the information necessary to run a multi-module Maven build&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sort of sounds like a parallel build process (i.e. you would be able to build lucene/solr itself with maven).  Is it?&lt;br/&gt;
We&apos;ve avoided that type of thing in the past.&lt;/p&gt;</comment>
                    <comment id="12914112" author="steve_rowe" created="Thu, 23 Sep 2010 18:28:55 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Full Maven POMs will include the information necessary to run a multi-module Maven build&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sort of sounds like a parallel build process (i.e. you would be able to build lucene/solr itself with maven). Is it?&lt;br/&gt;
We&apos;ve avoided that type of thing in the past.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, it constitutes a parallel build process, but the Ant build process would remain the official build.  For example, the artifacts produced by the Maven build will not be exactly the same as those produced by the Ant build process, and so cannot be used as release artifacts.&lt;/p&gt;

&lt;p&gt;It has been noted elsewhere that a Maven build has never been produced for Lucene.  I hope in this issue to provide that, so that the discussion about whether or not to include it in the source tree has a concrete reference point.&lt;/p&gt;</comment>
                    <comment id="12917364" author="steve_rowe" created="Sun, 3 Oct 2010 18:04:57 +0100"  >&lt;p&gt;First cut at Maven POMs for Lucene and Solr.&lt;/p&gt;

&lt;p&gt;The following script, which installs non-mavenized artifacts into the user&apos;s local Maven repository, must be run before the Maven build works:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 mvn install:install-file -DgroupId=com.ibm.icu -DartifactId=icu4j -Dversion=4.4 -Dpackaging=jar -Dfile=modules/analysis/icu/lib/icu4j-4_4.jar
 mvn install:install-file -DgroupId=xerces -DartifactId=xercesImpl -Dversion=2.9.1-patched-XERCESJ-1257 -Dpackaging=jar -Dfile=lucene/contrib/benchmark/lib/xerces-2.9.1-patched-XERCESJ-1257.jar
 mvn install:install-file -DgroupId=com.sleepycat -DartifactId=berkeleydb -Dversion=4.7.25 -Dpackaging=jar -Dfile=lucene/contrib/db/bdb/lib/db-4.7.25.jar
 mvn install:install-file -DgroupId=com.sleepycat -DartifactId=berkeleydb-je -Dversion=3.3.93 -Dpackaging=jar -Dfile=lucene/contrib/db/bdb-je/lib/je-3.3.93.jar
 mvn install:install-file -DgroupId=org.apache.solr -DartifactId=solr-commons-csv -Dversion=4.0-SNAPSHOT -Dpackaging=jar -Dfile=solr/lib/commons-csv-1.0-SNAPSHOT-r966014.jar
 mvn install:install-file -DgroupId=org.apache.solr -DartifactId=solr-noggit -Dversion=r944541 -Dpackaging=jar -Dfile=solr/lib/apache-solr-noggit-r944541.jar
 mvn install:install-file -DgroupId=org.apache.tika -DartifactId=tika-core -Dversion=0.8-SNAPSHOT -Dpackaging=jar -Dfile=solr/contrib/extraction/lib/tika-core-0.8-SNAPSHOT.jar
 jar xvf solr/contrib/extraction/lib/tika-parsers-0.8-SNAPSHOT.jar META-INF/maven/org.apache.tika/tika-parsers/pom.xml
 mvn install:install-file -Dfile=solr/contrib/extraction/lib/tika-parsers-0.8-SNAPSHOT.jar -DpomFile=META-INF/maven/org.apache.tika/tika-parsers/pom.xml
 rm -rf META-INF
 &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everything compiles (using &lt;tt&gt;mvn -DskipTests clean install&lt;/tt&gt;).  Except for two Solr tests, all tests pass. The two tests that fail for me (on Win Vista 64, Sun JDK 1.6.0_13) are: JettyWebAppTest and Solr Cell&apos;s ExtractingRequestHandlerTest.testArabicPDF().&lt;/p&gt;

&lt;p&gt;I have added configurations for running appassembler-maven-plugin (to produce run-time windows and linux scripts with lib/ dirs containing dependencies) for all classes with main() functions that are intended as tools rather than static tests.&lt;/p&gt;

&lt;p&gt;I haven&apos;t tried using the POMs as project configuration for IntelliJ, so I&apos;m not sure how that will go.&lt;/p&gt;

&lt;p&gt;This is a work-in-progress.  Please test and let me know if you find problems, or would like to see more stuff added, or if you think the design is all wrong.&lt;/p&gt;

&lt;p&gt;One challenge worth noting is that Maven disallows aggregator POMs (those with a &lt;tt&gt;&amp;lt;modules&amp;gt;&lt;/tt&gt; section directing nested Maven invocations) from producing any artifacts other than the POM itself.  As a result, the 4 or 5 locations in the Lucene/Solr build that have &quot;mixed content&quot; (to borrow the XML term for mixed nested element and text content) have to be fudged; e.g. the Lucene and Solr core POMs are located in &lt;tt&gt;lucene/src/&lt;/tt&gt; and &lt;tt&gt;solr/src/&lt;/tt&gt;, because the aggregator POMs at &lt;tt&gt;lucene/&lt;/tt&gt; and &lt;tt&gt;solr/&lt;/tt&gt; can&apos;t produce binary artifacts.  (The conventional Maven way to address this kind of issue is to make the &quot;core&quot; modules be siblings of the nested modules.)&lt;/p&gt;</comment>
                    <comment id="12917368" author="rcmuir" created="Sun, 3 Oct 2010 18:38:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;Except for two Solr tests, all tests pass. The two tests that fail for me (on Win Vista 64, Sun JDK 1.6.0_13) are: JettyWebAppTest and Solr Cell&apos;s ExtractingRequestHandlerTest.testArabicPDF().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;maybe it is an icu classpath issue. modules/analysis and solr/contrib/extraction both use different, out of date versions.&lt;br/&gt;
i opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2683&quot; title=&quot;upgrade icu libraries to 4.4.2&quot;&gt;&lt;del&gt;LUCENE-2683&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12917438" author="cmale" created="Mon, 4 Oct 2010 01:36:04 +0100"  >&lt;p&gt;Hi Steven,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The following script, which installs non-mavenized artifacts into the user&apos;s local Maven repository&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would system scope dependencies be an alternative way? Then we can specify the systemPath to where the jars are in the lib folders.&lt;br/&gt;
Reason I suggest this is that if someone replaces one of those jar (which will happen I&apos;m sure) or simply adds another, then we cannot&lt;br/&gt;
simply update the appropriate pom.  We&apos;d also need to install the jars locally (possibly again).&lt;/p&gt;</comment>
                    <comment id="12917448" author="steve_rowe" created="Mon, 4 Oct 2010 03:10:24 +0100"  >&lt;blockquote&gt;&lt;p&gt;Would system scope dependencies be an alternative way?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought of that, and it probably makes sense for most of them.&lt;/p&gt;

&lt;p&gt;But a jar like tika-parsers-0.8-SNAPSHOT.jar, with 10 or 15 dependencies, would be even messier to deal with as a system dependency than as a locally installed artifact.  We would have to go look at the POM for it (contained conveniently within the jar, as it happens), compare the dependencies against the versions of the local dependencies (which would have previously had to be transferred to the both the Solr Cell and the DIH Extras POMs) and make changes in both places.&lt;/p&gt;
</comment>
                    <comment id="12917503" author="steve_rowe" created="Mon, 4 Oct 2010 08:25:56 +0100"  >&lt;p&gt;This version of the patch puts the third-party non-mavenized .jar installation stuff into a profile in the top-level POM.&lt;/p&gt;

&lt;p&gt;So instead of running the above-listed script, instead just run the following Maven invocation:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -N -Pbootstrap install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;tt&gt;-N&lt;/tt&gt; disables recursive building, &lt;tt&gt;-Pbootstrap&lt;/tt&gt; activates the &quot;bootstrap&quot; profile (defined in the POM) and the local repo artifact installation stuff is bound to the &quot;install&quot; phase in the &quot;bootstrap&quot; profile.&lt;/p&gt;

&lt;p&gt;I discovered that the Tika artifact snapshots (tika-core and tika-parsers) are hosted at the Apache snapshots repository, and that was causing these dependencies not to work properly, so I switched their coordinates to org.apache.solr:solr-tika-*:4.0-SNAPSHOT, so that they will remain stable.&lt;/p&gt;

&lt;p&gt;Also, the previous patch had some weirdness with the Solr DIH Extras POM - it wasn&apos;t being treated as a new file, but rather a diff from some other file (the POM template, I think) - anyway, this patch fixes the problem.&lt;/p&gt;

&lt;p&gt;Everything still compiles, and all tests except the two previously failing tests still pass.&lt;/p&gt;</comment>
                    <comment id="12917636" author="steve_rowe" created="Mon, 4 Oct 2010 16:14:00 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Except for two Solr tests, all tests pass. The two tests that fail for me (on Win Vista 64, Sun JDK 1.6.0_13) are: JettyWebAppTest and Solr Cell&apos;s ExtractingRequestHandlerTest.testArabicPDF().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;maybe it is an icu classpath issue. modules/analysis and solr/contrib/extraction both use different, out of date versions.&lt;br/&gt;
i opened &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2683&quot; title=&quot;upgrade icu libraries to 4.4.2&quot;&gt;&lt;del&gt;LUCENE-2683&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I dropped in the ICU4J 4.4.2 jar, and everything compiled and all tests succeeded under Maven except for the same two tests, which continued to fail.&lt;/p&gt;</comment>
                    <comment id="12917720" author="rcmuir" created="Mon, 4 Oct 2010 20:23:52 +0100"  >&lt;blockquote&gt;&lt;p&gt;I dropped in the ICU4J 4.4.2 jar, and everything compiled and all tests succeeded under Maven except for the same two tests, which continued to fail.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well it wasn&apos;t the icu issue then, but we needed to upgrade anyway for the bugfixes, no loss.&lt;/p&gt;

&lt;p&gt;What failure are you seeing? When prototyping the the ant system refactor (&lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2002&quot; title=&quot;improve build/tests&quot;&gt;&lt;del&gt;SOLR-2002&lt;/del&gt;&lt;/a&gt; / &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2002&quot; title=&quot;improve build/tests&quot;&gt;&lt;del&gt;SOLR-2002&lt;/del&gt;&lt;/a&gt;_merged.patch), i had a few issues&lt;br/&gt;
with some tests but I don&apos;t remember the details. I remember it was really important to get the CWD of the junit run correct, e.g. in that patch its:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&amp;lt;property name=&quot;tests.userdir&quot; location=&quot;src/test/resources&quot;/&amp;gt;
  and later invoked as junit&apos;s dir=&quot;${tests.userdir}&quot; attribute
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12917750" author="steve_rowe" created="Mon, 4 Oct 2010 21:30:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;What failure are you seeing?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Two apparently unrelated errors:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;&lt;tt&gt;JettyWebappTest.testJSP()&lt;/tt&gt; returns an HTTP 500 error as soon as it attempts to connect to the Jetty &lt;tt&gt;Server&lt;/tt&gt; instantiated in &lt;tt&gt;setUp()&lt;/tt&gt;, on line #88.  I haven&apos;t figured out how to set Jetty Logging up so that I have visibility on what&apos;s happening yet.  I see a call setting the &lt;tt&gt;solr.solr.home&lt;/tt&gt; property in setUp() on line #49, so maybe that value is not in sync with the current directory I transferred from the Ant configuration.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;solr/contrib/extraction&lt;/tt&gt;&apos;s &lt;tt&gt;ExtractingRequestHandlerTest.testArabicPDF()&lt;/tt&gt; test fails because no result is found containing the extracted Arabic term (line #353).  I have traced content extraction up through plain text extraction from the PDF, and that seems to be working, so I don&apos;t think it&apos;s a classpath issue with Tika or PDFBox.  I need to keep tracing to see happens after the text extraction.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12919172" author="steve_rowe" created="Fri, 8 Oct 2010 07:20:35 +0100"  >&lt;p&gt;Both of the failing tests were caused by missing dependencies: jetty jsp-2.1 (scope=provided) was missing from &lt;tt&gt;solr/src/pom.xml&lt;/tt&gt;, and icu4j was missing from &lt;tt&gt;solr/contrib/extraction/pom.xml&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;With this version of the patch, all tests now pass.&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA project import from the Maven configuration mostly works, with the exception that because the Solr core and Solrj modules each include two source directories, and IntelliJ doesn&apos;t grok this fact from the POMs (specified via &lt;tt&gt;build-helper-maven-plugin&lt;/tt&gt; configuration), builds including these two modules fail, since they aren&apos;t seeing all of their source code. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://youtrack.jetbrains.net/issue/IDEA-27176&quot; class=&quot;external-link&quot;&gt;http://youtrack.jetbrains.net/issue/IDEA-27176&lt;/a&gt; has a work-around for this issue: click on &quot;update folders for all projects&quot; button in the maven projects pane - this works for Solr core (&lt;tt&gt;webapp/src/&lt;/tt&gt; is added a source root), but not for Solrj, likely because the second source root &lt;tt&gt;solr/src/common/&lt;/tt&gt; is a sibling of the module root &lt;tt&gt;solr/src/solrj/&lt;/tt&gt;, rather than a child.&lt;/p&gt;</comment>
                    <comment id="12919252" author="steve_rowe" created="Fri, 8 Oct 2010 13:02:01 +0100"  >&lt;blockquote&gt;&lt;p&gt;icu4j was missing from solr/contrib/extraction/pom.xml&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1813&quot; title=&quot;Support Arabic PDF extraction&quot;&gt;&lt;del&gt;SOLR-1813&lt;/del&gt;&lt;/a&gt; for details.&lt;/p&gt;</comment>
                    <comment id="12919703" author="steve_rowe" created="Mon, 11 Oct 2010 04:23:46 +0100"  >&lt;p&gt;Synch&apos;d to trunk (ICU4J and Xerces-J dependency upgrades).  Use &lt;tt&gt;mvn -N -Pbootstrap install&lt;/tt&gt; from the top-level directory in order to install the new dependencies.&lt;/p&gt;</comment>
                    <comment id="12972746" author="steve_rowe" created="Sat, 18 Dec 2010 06:04:04 +0000"  >&lt;p&gt;Updated to trunk, including addition of a POM for &lt;tt&gt;solr/contrib/analysis-extras/&lt;/tt&gt; and upgraded dependencies.&lt;/p&gt;

&lt;p&gt;All tests pass.&lt;/p&gt;</comment>
                    <comment id="12975750" author="steve_rowe" created="Wed, 29 Dec 2010 09:46:49 +0000"  >&lt;p&gt;Earlier Maven work&lt;/p&gt;</comment>
                    <comment id="12975755" author="steve_rowe" created="Wed, 29 Dec 2010 10:51:14 +0000"  >&lt;p&gt;Changes in this version of the patch:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Reduced configuration redundancy: as much as possible, shared configuration is now located in the &lt;tt&gt;lucene-parent&lt;/tt&gt; POM.&lt;/li&gt;
	&lt;li&gt;The &lt;tt&gt;solr-aggregator&lt;/tt&gt; POM is converted to a &lt;tt&gt;solr-parent&lt;/tt&gt; POM, and all Solr modules are now children of it rather than of &lt;tt&gt;lucene-parent&lt;/tt&gt;.  This POM hosts Solr-specific shared configuration.&lt;/li&gt;
	&lt;li&gt;The solr war is now generated in a new POM located in &lt;tt&gt;solr/src/webapp/&lt;/tt&gt;.  This POM also includes an &lt;b&gt;untested&lt;/b&gt; &lt;tt&gt;maven-jetty-plugin&lt;/tt&gt; configuration, for use in starting up Solr from Maven, as requested in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-1218&quot; title=&quot;maven artifact for webapp&quot;&gt;&lt;del&gt;SOLR-1218&lt;/del&gt;&lt;/a&gt;.&lt;/li&gt;
	&lt;li&gt;A profile in the &lt;tt&gt;lucene-parent&lt;/tt&gt; POM to generate source jars for each module: &lt;tt&gt;source-jar&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;A profile in the &lt;tt&gt;lucene-parent&lt;/tt&gt; POM to generate javadoc jars for each module: &lt;tt&gt;javadocs-jar&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;Consistent MANIFEST.MF entries in all archives, including timestamps generated using embedded Groovy via &lt;tt&gt;gmaven-plugin&lt;/tt&gt; and the Subversion revision from &lt;tt&gt;buildhelper-maven-plugin&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;NOTICE.txt and LICENSE.txt are now placed in META-INF/ in all archives&lt;/li&gt;
	&lt;li&gt;The Maven plugin versions are updated to the latest available.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All tests pass.&lt;/p&gt;

&lt;p&gt;If you have used previous versions of the patch, you should re-run &lt;tt&gt;mvn -N -P bootstrap install&lt;/tt&gt; from the top level, to install the non-maven dependencies in your local Maven repository.  (Some of the jar names have changed to better reflect their names as used in Solr.)&lt;/p&gt;

&lt;p&gt;To create binary, javadoc and source jars, and install them in your local repository, run the following at any level:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -DskipTests -P javadocs-jar,source-jar clean install
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12976641" author="steve_rowe" created="Mon, 3 Jan 2011 08:16:10 +0000"  >&lt;p&gt;All tests pass again with this patch. Solr test resource structrual changes from &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2299&quot; title=&quot;improve test-running from eclipse&quot;&gt;&lt;del&gt;SOLR-2299&lt;/del&gt;&lt;/a&gt; (r1054169) are now accounted for.  All test CWDs are set to {{$&lt;/p&gt;
{project.build.testOutputDirectory}
&lt;p&gt;}}, so that any stray files put on the CWD by tests will be cleaned up using either &lt;tt&gt;mvn clean&lt;/tt&gt; or &lt;tt&gt;ant clean&lt;/tt&gt;.&lt;/p&gt;</comment>
                    <comment id="12977313" author="steve_rowe" created="Tue, 4 Jan 2011 15:17:59 +0000"  >&lt;p&gt;Resync with trunk to move &lt;tt&gt;lucene/contrib/benchmark/&lt;/tt&gt; to &lt;tt&gt;modules/benchmark/&lt;/tt&gt;: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2845&quot; title=&quot;move contrib/benchmark to modules/benchmark&quot;&gt;&lt;del&gt;LUCENE-2845&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12977788" author="steve_rowe" created="Wed, 5 Jan 2011 15:06:05 +0000"  >&lt;p&gt;Removed &lt;tt&gt;lucene/contrib/remote/&lt;/tt&gt; (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2837&quot; title=&quot;Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher&quot;&gt;&lt;del&gt;LUCENE-2837&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;</comment>
                    <comment id="12979496" author="steve_rowe" created="Mon, 10 Jan 2011 07:37:54 +0000"  >&lt;p&gt;Added profiles to populate internal repositories at &lt;tt&gt;lucene/dist/maven/&lt;/tt&gt; and &lt;tt&gt;solr/dist/maven/&lt;/tt&gt; with generated artifacts.&lt;/p&gt;

&lt;p&gt;To populate &lt;tt&gt;lucene/dist/maven/&lt;/tt&gt; with POMs and binary, source and javadoc artifacts, run the following from the top level Lucene/Solr directory:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -N -P bootstrap,deploy-to-lucene-dist-maven-repository deploy
cd lucene
mvn -DskipTests -Pdeploy-to-lucene-dist-maven-repository,javadocs-jar,source-jar deploy
cd ../modules
mvn -DskipTests -Pdeploy-to-lucene-dist-maven-repository,javadocs-jar,source-jar deploy
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To populate &lt;tt&gt;solr/dist/maven/&lt;/tt&gt;, run the following from the top level Lucene/Solr directory:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -N -P bootstrap install
cd solr
mvn -DskipTests -Pdeploy-to-solr-dist-maven-repository,javadocs-jar,source-jar deploy
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12979579" author="steve_rowe" created="Mon, 10 Jan 2011 13:58:45 +0000"  >&lt;p&gt;carrot2 dependency upgraded to 3.4.2: &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2296&quot; title=&quot;Upgrade Carrot2 binaries to version 3.4.2&quot;&gt;&lt;del&gt;SOLR-2296&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12979606" author="ryantxu" created="Mon, 10 Jan 2011 15:30:56 +0000"  >&lt;p&gt;This is looking good!&lt;/p&gt;

&lt;p&gt;IIUC, this will be a parallel build system to ant.  The build and test is independent of anything the ant build does.&lt;/p&gt;

&lt;p&gt;If we take this route, we should probably drop the -pom.xml.templates and the and --generate-maven-artifacts target.&lt;/p&gt;
</comment>
                    <comment id="12979635" author="steve_rowe" created="Mon, 10 Jan 2011 16:51:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;IIUC, this will be a parallel build system to ant. The build and test is independent of anything the ant build does.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, except that the two systems share build output directories.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we take this route, we should probably drop the -pom.xml.templates and the and --generate-maven-artifacts target.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree.  &lt;/p&gt;

&lt;p&gt;The -pom.xml.templates have never been fully correct (e.g. missing dependencies) and are unmaintained.  &lt;/p&gt;

&lt;p&gt;I&apos;m working on replacing generate-maven-artifacts.&lt;/p&gt;</comment>
                    <comment id="12981662" author="steve_rowe" created="Fri, 14 Jan 2011 07:44:51 +0000"  >&lt;ul&gt;
	&lt;li&gt;Set snapshot &lt;tt&gt;updatePolicy&lt;/tt&gt; to &lt;tt&gt;never&lt;/tt&gt; for both the &lt;tt&gt;apache.snapshots&lt;/tt&gt; and the &lt;tt&gt;carrot2.org&lt;/tt&gt; Maven repositories, so that they won&apos;t constantly be checked for snapshot updates.&lt;/li&gt;
	&lt;li&gt;Consolidated distribution-related profiles to just one named &lt;tt&gt;dist&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;Solr-specific noggit and commons-csv jars are now properly placed in &lt;tt&gt;solr/dist/maven/&lt;/tt&gt; when deploying with the &lt;tt&gt;dist&lt;/tt&gt; profile&lt;/li&gt;
	&lt;li&gt;No longer setting the repositories&apos; &lt;tt&gt;uniqueVersion&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt; when deploying under the &lt;tt&gt;dist&lt;/tt&gt; profile; as a result, snapshot artifacts&apos; names will include build timestamps instead of &quot;&lt;tt&gt;SNAPSHOT&lt;/tt&gt;&quot; in &lt;tt&gt;*/dist/maven/&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;mvn clean&lt;/tt&gt; from &lt;tt&gt;lucene/src/&lt;/tt&gt; and &lt;tt&gt;solr/src/&lt;/tt&gt; now removes &lt;tt&gt;lucene/dist/&lt;/tt&gt; and &lt;tt&gt;solr/dist/&lt;/tt&gt;, respectively, in addition to the build directories already being removed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To populate both &lt;tt&gt;lucene/dist/maven/&lt;/tt&gt; and &lt;tt&gt;solr/dist/maven/&lt;/tt&gt;, run from the top level:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -Pdist -DskipTests deploy
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To populate only &lt;tt&gt;lucene/dist/maven/&lt;/tt&gt;, run from the top level:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
mvn -N -Pdist deploy
cd lucene
mvn -Pdist -DskipTests deploy
cd ../modules
mvn -Pdist -DskipTests deploy
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12982151" author="steve_rowe" created="Sat, 15 Jan 2011 18:58:16 +0000"  >&lt;p&gt;This patch cuts over &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; to directly use &lt;tt&gt;mvn&lt;/tt&gt;.  After applying this patch, Maven 2.2.1 (and maybe 3.0.X? - untested) must be installed on your machine in order to run &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Other changes in this patch:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Dropped all use of Maven Ant Tasks.&lt;/li&gt;
	&lt;li&gt;The top-level &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; now works and is the best way to perform this task, since it will create a single timestamp for all artifacts; this target can also be run from either &lt;tt&gt;solr/&lt;/tt&gt; or &lt;tt&gt;lucene/&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;Removed the &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; target from &lt;tt&gt;modules/build.xml&lt;/tt&gt;, and transferred the responsibility for generating &lt;tt&gt;modules/*&lt;/tt&gt; maven artifacts to &lt;tt&gt;lucene/build.xml&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;The &lt;tt&gt;solr/src/webapp/&lt;/tt&gt; module no longer installs or deploys its (empty) sources jar.&lt;/li&gt;
	&lt;li&gt;Remote Maven artifact deployment is no longer included in the Ant build - this can be performed by the Maven build.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;mvn clean&lt;/tt&gt; no longer removes &lt;tt&gt;solr/dist/&lt;/tt&gt; or &lt;tt&gt;lucene/dist/&lt;/tt&gt;, for two reasons:
	&lt;ol&gt;
		&lt;li&gt;The Ant build populates &lt;tt&gt;dist/&lt;/tt&gt; with things that the Maven build should not remove.  Removing just &lt;tt&gt;dist/maven/&lt;/tt&gt; won&apos;t work, because:&lt;/li&gt;
		&lt;li&gt;I couldn&apos;t find a nice/simple way to remove a directory just once in the reactor build.  The previous patch attempted to do this from the lucene core and solr core modules, but that solution was deleting their deployed parent POMs, since the reactor build orders the Solr and Lucene parent POMs before the core modules (the parent relationship requires this).&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Left to do:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Add Ant targets to test the Maven artifacts&lt;/li&gt;
	&lt;li&gt;Backport to branch_3x&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12982797" author="chrismattmann" created="Mon, 17 Jan 2011 18:53:55 +0000"  >&lt;p&gt;Hey Guys,&lt;/p&gt;

&lt;p&gt;I&apos;ve set this up on some other Apache projects (Nutch, Tika &lt;span class=&quot;error&quot;&gt;&amp;#91;NetCDF4&amp;#93;&lt;/span&gt; and SIS so far), and basically it involved:&lt;/p&gt;

&lt;p&gt;1. moddin&apos;g build.xml according to Sonatype&apos;s guide (see build.xml section)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide&quot; class=&quot;external-link&quot;&gt;https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. adding pom.xmls for each artifact to be published&lt;/p&gt;

&lt;p&gt;I&apos;ll throw together a patch for this and see if I can&apos;t make this process a bit easier.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Chris&lt;/p&gt;</comment>
                    <comment id="12983100" author="steve_rowe" created="Tue, 18 Jan 2011 09:51:46 +0000"  >&lt;p&gt;In this patch:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;&lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; now works the same as it does on trunk without this patch &amp;#8211; using &lt;tt&gt;maven-ant-tasks&lt;/tt&gt; &amp;#8211; except that instead of using the POM templates, the POMs provided in the patch are used.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; now functions properly at the top level, from &lt;tt&gt;lucene/&lt;/tt&gt;, from &lt;tt&gt;modules/&lt;/tt&gt;, and from &lt;tt&gt;solr/&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;Removed all &lt;tt&gt;&lt;b&gt;-source.jar&lt;/tt&gt; and &lt;tt&gt;&lt;/b&gt;-javadoc.jar&lt;/tt&gt; generation related functionality from the POMs, as well as the &lt;tt&gt;dist&lt;/tt&gt; profile - the Ant build is responsible for putting together the maven artifacts.&lt;/li&gt;
	&lt;li&gt;Removed the POM templates, except for the two required to deploy the &lt;tt&gt;solr-noggit&lt;/tt&gt; and &lt;tt&gt;solr-commons-csv&lt;/tt&gt; artifacts from the Ant build.&lt;/li&gt;
	&lt;li&gt;Modified the Maven artifact handling in the Ant build, including artifact signing, to be correct.&lt;/li&gt;
	&lt;li&gt;Based on feedback from Stevo Slavi&#263; &amp;lt;&lt;a href=&quot;http://www.mail-archive.com/solr-user@lucene.apache.org/msg45656.html&quot; class=&quot;external-link&quot;&gt;http://www.mail-archive.com/solr-user@lucene.apache.org/msg45656.html&lt;/a&gt;&amp;gt;, added explicit &lt;tt&gt;&amp;lt;groupId&amp;gt;&lt;/tt&gt;&apos;s to the POMs that didn&apos;t have them, and added explicit &lt;tt&gt;&amp;lt;relativePath&amp;gt;&lt;/tt&gt;&apos;s to the &lt;tt&gt;&amp;lt;parent&amp;gt;&lt;/tt&gt; declarations in all POMs.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I think this patch is ready to be committed to trunk.&lt;/p&gt;

&lt;p&gt;I&apos;ll post a branch_3x version of this patch tomorrow, and then I think the patches on this issue will be complete.&lt;/p&gt;</comment>
                    <comment id="12983113" author="rcmuir" created="Tue, 18 Jan 2011 10:10:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think this patch is ready to be committed to trunk.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well first of all, you obviously worked hard on this, but we need to think this one through before committing.&lt;br/&gt;
Can we put this code in a separate project, that takes care of maven support for lucene?&lt;br/&gt;
The problem is there are two camps &quot;die maven die&quot; and &quot;maven or die&quot;. There will &lt;b&gt;never&lt;/b&gt; be consensus.&lt;/p&gt;

&lt;p&gt;The only way for maven to survive, is for the users that care about it, to support itself, just like other packaging systems&lt;br/&gt;
such as debian, redhat rpm, freebsd/mac ports, etc etc that we lucene, don&apos;t deal with.&lt;br/&gt;
They can&apos;t continue to whine to people like me, who don&apos;t give a shit about it, to support it and produce its crazy ass&lt;br/&gt;
complicated artifacts.&lt;/p&gt;

&lt;p&gt;Instead the people who care about these packaging systems, and know how to make them work must deal with them.&lt;/p&gt;

&lt;p&gt;Personally I really don&apos;t like:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Having two build systems&lt;/li&gt;
	&lt;li&gt;Having one build system (ant) rely upon the other (maven) to create release artifacts.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Basically, the ant build system is our build. I think it needs to be able to fully build lucene for a &lt;br/&gt;
release without involving any other build systems such as Make or Maven.&lt;/p&gt;</comment>
                    <comment id="12983123" author="steve_rowe" created="Tue, 18 Jan 2011 10:26:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can we put this code in a separate project, that takes care of maven support for lucene?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d rather not.  The Lucene project has published Maven artifacts since the 1.9.1 release.  I think we should continue to do that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The only way for maven to survive, is for the users that care about it, to support itself, just like other packaging systems such as debian, redhat rpm, freebsd/mac ports, etc etc that we lucene, don&apos;t deal with.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, those are pretty obviously red herrings.  Can we concentrate on the actual issue here without dragging in those extraneous things?  Maven artifacts, not those other things, have been provided by Lucene since the 1.9.1 release.  We obviously &lt;b&gt;do&lt;/b&gt; deal with Maven.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;They can&apos;t continue to whine to people like me, who don&apos;t give a shit about it, to support it and produce its crazy ass complicated artifacts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The latest patch on this release uses the Ant artifacts directly.  POMs are provided.  You know, just like it has been since the 1.9.1 release.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Instead the people who care about these packaging systems, and know how to make them work must deal with them.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Um, like the patch on this issue is doing?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Basically, the ant build system is our build. I think it needs to be able to fully build lucene for a release without involving any other build systems such as Make or Maven.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This patch uses the Ant-produced artifacts to prepare for Maven artifact publishing.  Maven itself is not invoked in the process.  An Ant plugin handles the artifact deployment.&lt;/p&gt;

&lt;p&gt;I seriously do not understand why this is such a big deal.  Why can&apos;t we just keep publishing Maven artifacts?  You know, like we have for the past 15-20 releases.&lt;/p&gt;</comment>
                    <comment id="12983130" author="rcmuir" created="Tue, 18 Jan 2011 10:43:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d rather not. The Lucene project has published Maven artifacts since the 1.9.1 release. I think we should continue to do that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well I disagree, and I definitely don&apos;t think we should have 2 build systems.&lt;/p&gt;

&lt;p&gt;As I stated before, I don&apos;t think we are going to see consensus on this issue, because maven is too &quot;imposing&quot; on people&lt;br/&gt;
who don&apos;t care about it... it seems maven users are only happy if every project they depend on is itself a maven project.&lt;/p&gt;</comment>
                    <comment id="12983135" author="cmale" created="Tue, 18 Jan 2011 10:49:53 +0000"  >&lt;p&gt;I&apos;m a little lost at what this patch introduces that is imposing? Ant itself has maven support as part of its trunk code base so its clearly not too imposing for them.&lt;/p&gt;

&lt;p&gt;Is your issue that this patch introduces things that get in your way somehow with using ant to do builds? or are you against committing this due to your general concerns with Maven?&lt;/p&gt;</comment>
                    <comment id="12983139" author="rcmuir" created="Tue, 18 Jan 2011 11:00:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is your issue that this patch introduces things that get in your way somehow with using ant to do builds? or are you against committing this due to your general concerns with Maven?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Personally I don&apos;t care for maven, but I would be bringing up these same objections if we proposed&lt;br/&gt;
building Redhat RPMs or FreeBSD ports. I would say, its best for us to stay out of the business&lt;br/&gt;
of building packages for various systems, instead let the people that work with those packaging&lt;br/&gt;
systems do it themselves, they will do a better job and supporting N build/packaging systems is&lt;br/&gt;
too expensive for us. It makes releasing more complicated to deploy these special packages&lt;br/&gt;
to the various repositories where they want to be, it forces the release manager to know about&lt;br/&gt;
N packaging systems instead of concentrating on releasing the source code to an open&lt;br/&gt;
source search engine library, which is what we should be doing.&lt;/p&gt;</comment>
                    <comment id="12983141" author="cmale" created="Tue, 18 Jan 2011 11:08:53 +0000"  >&lt;p&gt;Alright I can appreciate your concern.  I think comparing Maven to RPM or FreeBSD ports is going a little far, but I can understand the point you&apos;re making.&lt;/p&gt;

&lt;p&gt;What if this were committed so that those of us who do understand maven and do like using it, could?  &lt;br/&gt;
This issue about whether maven artifacts need to then be released or not can be part of a greater discussion (as is already taking place).&lt;/p&gt;

&lt;p&gt;By committing this we then make it easier for someone else outside of the project to create the correct artifacts which are then available from the&lt;br/&gt;
central maven repository, if thats the decision thats made which is also the one you support.&lt;/p&gt;</comment>
                    <comment id="12983146" author="rcmuir" created="Tue, 18 Jan 2011 11:15:43 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What if this were committed so that those of us who do understand maven and do like using it, could? &lt;br/&gt;
This issue about whether maven artifacts need to then be released or not can be part of a greater discussion (as is already taking place).&lt;/p&gt;

&lt;p&gt;By committing this we then make it easier for someone else outside of the project to create the correct artifacts which are then available from the&lt;br/&gt;
central maven repository, if thats the decision thats made which is also the one you support.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why does it need to be committed to &lt;b&gt;our&lt;/b&gt; trunk? why can&apos;t it be on e.g. apache-extras and do all of this.&lt;/p&gt;

&lt;p&gt;This way, we can continue to evolve lucene (e.g. merge lucene and solr better), maintaining only &lt;b&gt;ONE&lt;/b&gt; build system,&lt;br/&gt;
and hopefully! release more often... if downstream maven support falls behind, it falls behind, but it shouldn&apos;t&lt;br/&gt;
slow us down.&lt;/p&gt;</comment>
                    <comment id="12983151" author="cmale" created="Tue, 18 Jan 2011 11:24:31 +0000"  >&lt;p&gt;I can appreciate the need to keep our trunk lean and mean and I hope that your assertion that that&apos;ll mean more frequent releases holds true.&lt;br/&gt;
I hope we also shine the light on other code in the trunk to see if it belongs there or could be spun off.&lt;/p&gt;

&lt;p&gt;I do continue to support the committing of this code but as you rightly pointed out, there won&apos;t be any consensus on the issue so I&apos;ll leave it at that.&lt;/p&gt;</comment>
                    <comment id="12983152" author="earwin" created="Tue, 18 Jan 2011 11:27:07 +0000"  >&lt;p&gt;&amp;lt;irony&amp;gt;&lt;br/&gt;
I am &lt;b&gt;amazed&lt;/b&gt; at how idea/eclipse ant tasks managed to get into trunk.&lt;br/&gt;
No, really, emacs is just enough for Lucene development, as proven by one of our most seasoned developers.&lt;br/&gt;
So why the hell are those extras polluting main tree?&lt;br/&gt;
&amp;lt;/irony&amp;gt;&lt;/p&gt;</comment>
                    <comment id="12983153" author="rcmuir" created="Tue, 18 Jan 2011 11:30:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;I am amazed at how idea/eclipse ant tasks managed to get into trunk.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I already stated on the &quot;maven thread&quot;, that I have no problem with something like this patch being committed to dev-tools/&lt;br/&gt;
alongside the eclipse and idea support... some others might object, but personally I see no problem.&lt;/p&gt;

&lt;p&gt;we already agreed these folders are simply developer tools, and if they start to rot, we will just delete them.&lt;/p&gt;

&lt;p&gt;my problem is with the release process and artifacts... so if we do this we need to be very clear that we are&lt;br/&gt;
agreeing to put the maven support in dev-tools/ as &quot;developer-support&quot;, but its not a build system, and it has&lt;br/&gt;
no effect on artifacts... we don&apos;t release dev-tools, its just checked into svn to help developers.&lt;/p&gt;</comment>
                    <comment id="12983158" author="cmale" created="Tue, 18 Jan 2011 11:38:49 +0000"  >&lt;p&gt;That was basically what I was getting at (perhaps not clearly enough).  &lt;/p&gt;

&lt;p&gt;Would a satisfactory compromise be to view this patch as adding development support for maven, which is not to do with whether maven artifacts are released or not? &lt;/p&gt;

&lt;p&gt;The discussion about release process, artifacts and build system flamewars can then happen outside of this.&lt;/p&gt;</comment>
                    <comment id="12983160" author="earwin" created="Tue, 18 Jan 2011 11:44:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;we need to be very clear .... and it has no effect on artifacts&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I feel something was missed in the heat of debate. Eg:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The latest patch on this release uses the Ant artifacts directly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This patch uses the Ant-produced artifacts to prepare for Maven artifact publishing. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Maven itself is not invoked in the process. An Ant plugin handles the artifact deployment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will now try to decipher these quotes.&lt;br/&gt;
It seems the patch takes the artifacts produced by Ant, as a part of our usual (and only) build process, and shoves it down Maven repository&apos;s throat along with a bunch of pom-descriptors.&lt;br/&gt;
Nothing else is happening.&lt;/p&gt;

&lt;p&gt;Also, after everything that has been said, I think nobody in his right mind will &lt;b&gt;force&lt;/b&gt; anyone to actually use the Ant target in question as a part of release. But it&apos;s nice to have it around, in case some user-friendly commiter would like to push (I&apos;d like to reiterate - ant generated) artifacts into Maven.&lt;/p&gt;</comment>
                    <comment id="12983161" author="rcmuir" created="Tue, 18 Jan 2011 11:47:44 +0000"  >&lt;p&gt;Chris: well thats the problem with maven, it tries to be too many things, a dependency management tool,&lt;br/&gt;
a packaging system, a build system, ...&lt;/p&gt;

&lt;p&gt;So, thats why I said we have to just be very clear about which exact scope of maven we are discussing.&lt;br/&gt;
If the patch presented here is against /dev-tools, and is to assist developers who like maven, then as&lt;br/&gt;
I said before I am totally ok with this, but I&apos;m only speaking for myself.&lt;/p&gt;

&lt;p&gt;Because maven is so many things, and due to Earwin&apos;s confusion, I think it would be good in general to &lt;br/&gt;
add a README.txt to dev-tools anyway, that states what exactly it is (tools to assist lucene/solr developers,&lt;br/&gt;
that aren&apos;t supported, its not bugs if they stop working, and will be deleted if they rot).&lt;/p&gt;

&lt;p&gt;Separately what you said about other code in trunk is totally true... for example its my opinion that there is &lt;br/&gt;
a lot of code in lucene&apos;s contrib that should be moved out to something like apache-extras... currently lucene&apos;s &lt;br/&gt;
contrib has to compile and pass tests or the build fails... there is definitely some stuff in there that is more&lt;br/&gt;
&quot;sandboxy&quot;, slows down lucene core development, but itself isnt getting much maintenance other than devs&lt;br/&gt;
doing the minimum work to make them pass tests... and we should be keep other options in mind for stuff like this.&lt;/p&gt;
</comment>
                    <comment id="12983162" author="earwin" created="Tue, 18 Jan 2011 11:55:00 +0000"  >&lt;p&gt;Thanks, but I&apos;m not the one confused here. : )&lt;/p&gt;</comment>
                    <comment id="12983163" author="cmale" created="Tue, 18 Jan 2011 11:56:14 +0000"  >&lt;p&gt;Ant does many things too and we use it in a specific way so I see no problem defining what we intend our maven support to be for.&lt;/p&gt;

&lt;p&gt;So I&apos;m feeling some consensus (fortunately I spoke too soon before) that if we target this toward being a development tool which is not&lt;br/&gt;
forced upon any users / release managers.&lt;/p&gt;

&lt;p&gt;Is this okay with you Steven?&lt;/p&gt;

&lt;p&gt;A README.txt describing the scope of the dev-tools sounds appropriate irrespective of what happens here.  I certainly wasn&apos;t aware of what&lt;br/&gt;
their maintenance plan was.&lt;/p&gt;</comment>
                    <comment id="12983234" author="ryantxu" created="Tue, 18 Jan 2011 15:51:21 +0000"  >&lt;p&gt;Steve, great work with this patch &amp;#8211; it takes care of all the previous concerns about our problematic maven support.&lt;/p&gt;

&lt;p&gt;With this patch, we now have:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;testable maven artifacts&lt;/li&gt;
	&lt;li&gt;easy repo distribution&lt;/li&gt;
	&lt;li&gt;ant is still &lt;b&gt;the&lt;/b&gt; build system&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The RM can choose to ignore the generate-maven-artifacts target and let someone else push the artifacts.  &lt;/p&gt;

&lt;p&gt;As with most religious conflicts &amp;#8211; I hope the resolution is not conversion, rather something that lets everyone to live (work)  in peace.  &lt;/p&gt;


</comment>
                    <comment id="12983247" author="chrismattmann" created="Tue, 18 Jan 2011 16:21:04 +0000"  >&lt;p&gt;+1 for Steve&apos;s patch, great work and you beat me to it. &lt;/p&gt;</comment>
                    <comment id="12983488" author="steve_rowe" created="Wed, 19 Jan 2011 01:30:35 +0000"  >&lt;p&gt;Final version of trunk patch.  Added CHANGES.txt entries; converted old &lt;tt&gt;solr-tika-parsers-&amp;lt;version&amp;gt;&lt;/tt&gt; dependency to &lt;tt&gt;tika-parsers-0.8&lt;/tt&gt;; and changed Solr snapshot artifact generation to use default &lt;tt&gt;uniqueVersion&lt;/tt&gt; value (&lt;tt&gt;true&lt;/tt&gt;), like Lucene&apos;s.&lt;/p&gt;</comment>
                    <comment id="12983491" author="steve_rowe" created="Wed, 19 Jan 2011 01:45:40 +0000"  >&lt;p&gt;branch_3x patch.  Maven build works, all tests pass, &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; works.&lt;/p&gt;

&lt;p&gt;There is one extra private artifact required in order to build with Java 5 (trunk required Java 6, so doesn&apos;t have this issue): &lt;tt&gt;solr/contrib/clustering/lib/carrot2-core-3.4.2.jar&lt;/tt&gt;.  The artifact in Maven central repo was compiled with Java 6, but the private artifact was specially compiled with Java 5.  I added populating the local repo with this .jar to the &lt;tt&gt;bootstrap&lt;/tt&gt; profile, and pulled the POM from the artifact in Maven central, to enable transitive dependency resolution.&lt;/p&gt;</comment>
                    <comment id="12983729" author="steve_rowe" created="Wed, 19 Jan 2011 14:34:22 +0000"  >&lt;p&gt;I plan on committing these patches tomorrow.&lt;/p&gt;</comment>
                    <comment id="12983730" author="rcmuir" created="Wed, 19 Jan 2011 14:36:56 +0000"  >&lt;p&gt;as I said before... i really think the patches need to be against /dev-tools&lt;/p&gt;</comment>
                    <comment id="12983739" author="ryantxu" created="Wed, 19 Jan 2011 14:51:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;i really think the patches need to be against /dev-tools &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sadly, given the way maven works, that is not possible.  (without reinventing a crazy wheel)&lt;/p&gt;

&lt;p&gt;Previous attempts at fakey fakey pom generation have not been so good &amp;#8211; this approach is better since it is testable and works well with core maven tools.&lt;/p&gt;</comment>
                    <comment id="12983746" author="rcmuir" created="Wed, 19 Jan 2011 14:56:39 +0000"  >&lt;p&gt;Sorry, but introducing a parallel build system (somehow such that maven can &quot;sneak&quot; its way into being a 2nd supported build) is not acceptable to me.&lt;br/&gt;
I feel this will slow down development.&lt;br/&gt;
Putting it in /dev-tools clarifies the level of support: i don&apos;t want someone telling me &quot;I broke the build&quot; because these poms dont work if i refactor something.&lt;/p&gt;

&lt;p&gt;So I am -1 to the patch, unless it is in /dev-tools.&lt;br/&gt;
if maven cannot work with its files in /dev-tools, perhaps a patch to maven itself is needed instead.&lt;/p&gt;</comment>
                    <comment id="12983748" author="dsmiley" created="Wed, 19 Jan 2011 15:00:07 +0000"  >&lt;p&gt;Perhaps a compromise would be to put them in /dev-tools and have an ant task that will copy (or symbolically link them when possible) to where Maven wants them?  Developers opposed to maven stuff can choose to never invoke this ant task and thus leave the maven stuff hidden.&lt;/p&gt;</comment>
                    <comment id="12983749" author="rcmuir" created="Wed, 19 Jan 2011 15:03:47 +0000"  >&lt;p&gt;David: sounds perfect to me, great idea.&lt;/p&gt;</comment>
                    <comment id="12983768" author="gsingers" created="Wed, 19 Jan 2011 16:10:06 +0000"  >&lt;p&gt;Here&apos;s my suggestion: Let&apos;s put the stuff in and do a release.  I am pretty sure that we have enough PMC members who want Maven that they can vote on said artifacts w/o those who don&apos;t want Maven to have to bother (even though they are the same artifacts).  Also, Robert, I would specifically ask you, once Steve has done the work, assuming you are the RM, to honestly evaluate whether the production of the artifacts is a burden for you.  If you don&apos;t want to, then I would suggest you do all the main RM work and you let one of us handle producing the artifacts to be released/voted on at the same time.  If it really is a burden, then we can move it to dev-tools or external.&lt;/p&gt;

&lt;p&gt;And, for the record, there are more than two camps for Maven besides &quot;die maven die&quot; and &quot;maven or die&quot;:  I personally think distributing artifacts via the central repository and the explicit requirement to list out dependencies and their versions is a great service and significantly increases uptake of artifacts, but I can live just fine without the day to day crap that is the result of running &quot;mvn XXXX&quot; (where XXXX is not equal to one of the simpler things like compile or test).   Let&apos;s not be confused about what we are doing when we say we are supporting Maven.  We are just using it to publish artifacts.  The only time that should ever need to be run is during a release (hence it doesn&apos;t slow down us deciding to do a release, it just slows down, marginally, the actual release process.)  &lt;/p&gt;

&lt;p&gt;I totally agree we don&apos;t want two build systems and I am totally against switching to Maven as a build for all the reasons Robert is (parallel tests, etc.).  All I have ever wanted is reliable published artifacts and I think we have enough support amongst committers to do that and we have strong enough interest in the community to warrant it.&lt;/p&gt;
</comment>
                    <comment id="12983774" author="rcmuir" created="Wed, 19 Jan 2011 16:16:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;If it really is a burden, then we can move it to dev-tools or external.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please re-read my comment above.&lt;/p&gt;

&lt;p&gt;I won&apos;t stand for two build systems to deal with during development. If all you care about is reliable published artifacts, then its not an issue&lt;br/&gt;
if the stuff to generate that is in /dev-tools or mixed in with the code.&lt;/p&gt;

&lt;p&gt;I feel this is the maven users trying to sneak maven in as a fully supported build system, if not to then sneak it in as the only build system. &lt;/p&gt;

&lt;p&gt;I will do everything possible to stop this.&lt;/p&gt;</comment>
                    <comment id="12983782" author="steve_rowe" created="Wed, 19 Jan 2011 16:30:16 +0000"  >&lt;p&gt;I&apos;m sensitive to the two-build-systems problem. While I like being able to produce local Maven artifacts, I agree that mixed build systems for new users will be confusing.&lt;/p&gt;

&lt;p&gt;I&apos;m okay with putting the POMs themselves under &lt;tt&gt;dev-tools/&lt;/tt&gt;.  But I want the &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; target to stay in Ant&apos;s build, not under &lt;tt&gt;dev-tools/&lt;/tt&gt;, and a new target &lt;tt&gt;get-maven-poms&lt;/tt&gt; added to the top-level &lt;tt&gt;build.xml&lt;/tt&gt;; &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; would depend on &lt;tt&gt;get-maven-poms&lt;/tt&gt;.  All &lt;tt&gt;pom.xml&lt;/tt&gt;&apos;s would be added to &lt;tt&gt;svn:ignore&lt;/tt&gt; entries where they are placed by &lt;tt&gt;get-maven-poms&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Robert, would you agree to keeping &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; and adding &lt;tt&gt;get-maven-poms&lt;/tt&gt;?&lt;/p&gt;</comment>
                    <comment id="12983783" author="rcmuir" created="Wed, 19 Jan 2011 16:35:56 +0000"  >&lt;p&gt;Steven, i totally dont mind if we change the whole way the ant build works with regards to maven, to depend on the dev-tools scenario.&lt;/p&gt;

&lt;p&gt;For example, you could have &apos;ant maven&apos; that:&lt;br/&gt;
1. copies the stuff from /dev-tools wherever it needs to be to make maven happy.&lt;br/&gt;
2. does whatever is necessary (invoke maven, whatever) to make the artifacts.&lt;/p&gt;

&lt;p&gt;Or you could have &apos;ant maven&apos; that only does part #1, but &apos;ant maven-artifacts&apos; that does part #2, and depends on part #1.&lt;/p&gt;

&lt;p&gt;i just want it to be in /dev-tools, because if i see build.xml in a directory, i think its supported by Ant. If i see Makefile&lt;br/&gt;
in a directory, I think its supported by Make, pom.xml by Maven, and so on.&lt;/p&gt;

&lt;p&gt;we could also add pom.xml to the svn:ignore for all the directories too, so that there are no problems with people&lt;br/&gt;
using the maven framework in dev-tools.&lt;/p&gt;</comment>
                    <comment id="12983827" author="steve_rowe" created="Wed, 19 Jan 2011 18:26:40 +0000"  >&lt;p&gt;A chat on IRC confirms that Robert is okay with my proposal:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;All POMs will be stored under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; will stay in the Ant build.&lt;/li&gt;
	&lt;li&gt;A new &lt;tt&gt;get-maven-poms&lt;/tt&gt; target will be added to the Ant build to copy the POMs from &lt;tt&gt;dev-tools/&lt;/tt&gt; to their target locations: in the top-level directory, and in each module&apos;s subdirectory under &lt;tt&gt;lucene/&lt;/tt&gt;, &lt;tt&gt;solr/&lt;/tt&gt;, and &lt;tt&gt;modules/&lt;/tt&gt; (trunk only).&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;svn:ignore&lt;/tt&gt; properties will be changed to include &lt;tt&gt;pom.xml&lt;/tt&gt; in their target locations.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; will depend on &lt;tt&gt;get-maven-poms&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;ll work up modified patches for trunk and branch_3x along these lines.&lt;/p&gt;</comment>
                    <comment id="12984108" author="steve_rowe" created="Thu, 20 Jan 2011 09:27:53 +0000"  >&lt;p&gt;Patches implementing my proposal to place the Maven POMs in &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; and add a new top-level Ant target &lt;tt&gt;get-maven-poms&lt;/tt&gt;, which is invoked by &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt;.  &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; remains in the top-level &lt;tt&gt;build.xml&lt;/tt&gt;, as well as in &lt;tt&gt;lucene/&lt;/tt&gt;, &lt;tt&gt;solr/&lt;/tt&gt;, and &lt;tt&gt;modules/&lt;/tt&gt; (trunk only).&lt;/p&gt;

&lt;p&gt;I couldn&apos;t figure out a way for &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; under child directories &lt;tt&gt;lucene/&lt;/tt&gt;, &lt;tt&gt;solr/&lt;/tt&gt; and &lt;tt&gt;modules/&lt;/tt&gt; to depend on the top-level &lt;tt&gt;get-maven-poms&lt;/tt&gt; target, so I instead have &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; in the child directories explicitly run the &lt;tt&gt;get-maven-poms&lt;/tt&gt; target via the &lt;tt&gt;&amp;lt;ant&amp;gt;&lt;/tt&gt; task.  As a result, running &lt;tt&gt;generate-maven-artifacts&lt;/tt&gt; from the top level will cause &lt;tt&gt;get-maven-poms&lt;/tt&gt; to be run once for each child directory, but the repeated copy operation doesn&apos;t hurt anything, and the process is quick.&lt;/p&gt;

&lt;p&gt;Unless there are objections, I will commit this tomorrow.&lt;/p&gt;</comment>
                    <comment id="12984333" author="rcmuir" created="Thu, 20 Jan 2011 19:09:09 +0000"  >&lt;p&gt;+1, patch looks good.&lt;/p&gt;</comment>
                    <comment id="12984545" author="steve_rowe" created="Fri, 21 Jan 2011 03:46:09 +0000"  >&lt;p&gt;Committed to trunk rev. 1061613, branch_3x rev. 1061612&lt;/p&gt;</comment>
                    <comment id="12984994" author="steve_rowe" created="Fri, 21 Jan 2011 23:22:23 +0000"  >&lt;p&gt;Uwe pointed out on IRC that the POMs under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; have a fixed version, and as it now is written, &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt; no longer respects the maven version property given on the command line.&lt;/p&gt;

&lt;p&gt;This should be fixed by converting the &lt;tt&gt;pom.xml&lt;/tt&gt; files back into templates (and renaming the files accordingly), so that the version in the POMs can be modified during &lt;tt&gt;ant generate-maven-artifacts&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;ant get-maven-poms&lt;/tt&gt; will be responsible for the substitution and renaming, in addition to the copying from &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; that it currently does.&lt;/p&gt;</comment>
                    <comment id="12985014" author="cmale" created="Sat, 22 Jan 2011 00:42:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;This should be fixed by converting the pom.xml files back into templates (and renaming the files accordingly), so that the version in the POMs can be modified during ant generate-maven-artifacts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wasn&apos;t the fact we were using templates part of the problem that spawned this issue?  I feel we&apos;ve gone full circle here and are now back with maven templates that may or may not be maintained.&lt;/p&gt;</comment>
                    <comment id="12985056" author="steve_rowe" created="Sat, 22 Jan 2011 06:06:17 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This should be fixed by converting the pom.xml files back into templates (and renaming the files accordingly), so that the version in the POMs can be modified during ant generate-maven-artifacts.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wasn&apos;t the fact we were using templates part of the problem that spawned this issue? I feel we&apos;ve gone full circle here and are now back with maven templates that may or may not be maintained.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since the POMs don&apos;t represent an official build, the number of people &lt;b&gt;using&lt;/b&gt; them to build will be small.  It is this, IMHO, rather than whether the POMs are stored as templates under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt;,  that will directly affect the quality/regularity of their maintenance.&lt;/p&gt;

&lt;p&gt;In fact, I think whether the POMs are stored as templates under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; is really a non-issue, since they won&apos;t be used there.  The way it&apos;s set up right now, if you want to use the POMs to drive a build, is that you run &lt;tt&gt;ant get-maven-poms&lt;/tt&gt; to copy them over to their target locations.  The way it will be set up once I convert the POMs under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; to templates is that you run &lt;tt&gt;ant get-maven-poms&lt;/tt&gt; to copy them over to their target locations, as well as naming them to &lt;tt&gt;pom.xml&lt;/tt&gt; and interpolating the desired version.  In other words, for the end-user, the experience will be &lt;b&gt;exactly&lt;/b&gt; the same: you run &lt;tt&gt;ant get-maven-poms&lt;/tt&gt;, and then you can use Maven to build/test/install artifacts.  &lt;/p&gt;

&lt;p&gt;Templating the POMs will not change usability of them at all, so neither the number of people using them nor their effective maintenance will be affected by this change.&lt;/p&gt;

&lt;p&gt;All that said, I agree with you that maintenance is the big deal here, and I welcome other suggestions about how to simplify and enable that process.&lt;/p&gt;</comment>
                    <comment id="12985065" author="steve_rowe" created="Sat, 22 Jan 2011 07:11:54 +0000"  >&lt;p&gt;Rather than post a patch attachment for this change, I&apos;ll put the diffs here.  I&apos;ll commit these shortly.&lt;/p&gt;

&lt;p&gt;First, all &lt;tt&gt;pom.xml&lt;/tt&gt; files under &lt;tt&gt;dev-tools/maven/&lt;/tt&gt; will be renamed to &lt;tt&gt;pom.xml.template&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Second, all &lt;tt&gt;pom.xml.template&lt;/tt&gt; files will get this change (a representative version of it is given here - different original version for trunk&apos;s &lt;tt&gt;build.xml&lt;/tt&gt; of course):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-  &amp;lt;version&amp;gt;3.1-SNAPSHOT&amp;lt;/version&amp;gt;
+  &amp;lt;version&amp;gt;@version@&amp;lt;/version&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Third, the top-level &lt;tt&gt;build.xml&lt;/tt&gt; gets this change (different version for trunk&apos;s &lt;tt&gt;build.xml&lt;/tt&gt; of course):&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;@@ -39,10 +39,15 @@
     &amp;lt;/sequential&amp;gt;
   &amp;lt;/target&amp;gt;
 
+  &amp;lt;property name=&quot;version&quot; value=&quot;3.1-SNAPSHOT&quot;/&amp;gt;
   &amp;lt;target name=&quot;get-maven-poms&quot; 
           description=&quot;Copy Maven POMs from dev-tools/maven/ to their target locations&quot;&amp;gt;
     &amp;lt;copy todir=&quot;.&quot;&amp;gt;
       &amp;lt;fileset dir=&quot;${basedir}/dev-tools/maven&quot;/&amp;gt;
+      &amp;lt;filterset begintoken=&quot;@&quot; endtoken=&quot;@&quot;&amp;gt;
+        &amp;lt;filter token=&quot;version&quot; value=&quot;${version}&quot;/&amp;gt;
+      &amp;lt;/filterset&amp;gt;
+      &amp;lt;globmapper from=&quot;*.template&quot; to=&quot;*&quot;/&amp;gt;
     &amp;lt;/copy&amp;gt;
   &amp;lt;/target&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12985071" author="steve_rowe" created="Sat, 22 Jan 2011 07:42:54 +0000"  >&lt;p&gt;Committed the template interpolation and renaming patches from my previous comment here, to trunk rev. 1062111 and branch_3x rev. r1062112&lt;/p&gt;</comment>
                    <comment id="12985730" author="dsmiley" created="Mon, 24 Jan 2011 15:15:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Since the POMs don&apos;t represent an official build, the number of people using them to build will be small. It is this, IMHO, rather than whether the POMs are stored as templates under dev-tools/maven/, that will directly affect the quality/regularity of their maintenance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;FWIW, I&apos;ll start using the generated POMs for my builds (aside from my use of IntelliJ for day to day development).  If there are ever problems then I&apos;ll of course report/fix them.  Thanks so much Steven for creating this alternative build system (one that I prefer).&lt;/p&gt;</comment>
                    <comment id="12985849" author="steve_rowe" created="Mon, 24 Jan 2011 17:52:58 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Since the POMs don&apos;t represent an official build, the number of people using them to build will be small. It is this, IMHO, rather than whether the POMs are stored as templates under dev-tools/maven/, that will directly affect the quality/regularity of their maintenance.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;FWIW, I&apos;ll start using the generated POMs for my builds (aside from my use of IntelliJ for day to day development). If there are ever problems then I&apos;ll of course report/fix them. Thanks so much Steven for creating this alternative build system (one that I prefer).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cool!  The more the merrier.&lt;/p&gt;</comment>
                    <comment id="13013499" author="gsingers" created="Wed, 30 Mar 2011 16:50:29 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                <outwardlinks description="incorporates">
                            <issuelink>
            <issuekey id="12427801">SOLR-1218</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12467333">SOLR-1964</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12372001">LUCENE-935</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12345394">LUCENE-622</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12468841" name="LUCENE-2657-branch_3x.patch" size="221708" author="steve_rowe" created="Thu, 20 Jan 2011 09:27:53 +0000" />
                    <attachment id="12468713" name="LUCENE-2657-branch_3x.patch" size="211161" author="steve_rowe" created="Wed, 19 Jan 2011 01:45:40 +0000" />
                    <attachment id="12468840" name="LUCENE-2657.patch" size="219029" author="steve_rowe" created="Thu, 20 Jan 2011 09:27:53 +0000" />
                    <attachment id="12468711" name="LUCENE-2657.patch" size="207781" author="steve_rowe" created="Wed, 19 Jan 2011 01:30:35 +0000" />
                    <attachment id="12468629" name="LUCENE-2657.patch" size="206957" author="steve_rowe" created="Tue, 18 Jan 2011 09:51:46 +0000" />
                    <attachment id="12468465" name="LUCENE-2657.patch" size="237464" author="steve_rowe" created="Sat, 15 Jan 2011 18:58:16 +0000" />
                    <attachment id="12468353" name="LUCENE-2657.patch" size="222079" author="steve_rowe" created="Fri, 14 Jan 2011 07:44:51 +0000" />
                    <attachment id="12467889" name="LUCENE-2657.patch" size="225177" author="steve_rowe" created="Mon, 10 Jan 2011 13:58:45 +0000" />
                    <attachment id="12467872" name="LUCENE-2657.patch" size="225177" author="steve_rowe" created="Mon, 10 Jan 2011 07:37:54 +0000" />
                    <attachment id="12467545" name="LUCENE-2657.patch" size="198948" author="steve_rowe" created="Wed, 5 Jan 2011 15:06:05 +0000" />
                    <attachment id="12467427" name="LUCENE-2657.patch" size="203074" author="steve_rowe" created="Tue, 4 Jan 2011 15:17:59 +0000" />
                    <attachment id="12467308" name="LUCENE-2657.patch" size="203133" author="steve_rowe" created="Mon, 3 Jan 2011 08:16:10 +0000" />
                    <attachment id="12467107" name="LUCENE-2657.patch" size="202335" author="steve_rowe" created="Wed, 29 Dec 2010 10:51:14 +0000" />
                    <attachment id="12466525" name="LUCENE-2657.patch" size="238520" author="steve_rowe" created="Sat, 18 Dec 2010 06:04:03 +0000" />
                    <attachment id="12456821" name="LUCENE-2657.patch" size="233267" author="steve_rowe" created="Mon, 11 Oct 2010 04:23:45 +0100" />
                    <attachment id="12456676" name="LUCENE-2657.patch" size="232729" author="steve_rowe" created="Fri, 8 Oct 2010 07:20:35 +0100" />
                    <attachment id="12456274" name="LUCENE-2657.patch" size="234744" author="steve_rowe" created="Mon, 4 Oct 2010 08:25:55 +0100" />
                    <attachment id="12456251" name="LUCENE-2657.patch" size="227148" author="steve_rowe" created="Sun, 3 Oct 2010 18:04:57 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>18.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 20 Sep 2010 14:58:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11182</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25035</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>