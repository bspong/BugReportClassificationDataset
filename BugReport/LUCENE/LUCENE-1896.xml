<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:38 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1896/LUCENE-1896.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1896] Modify confusing javadoc for queryNorm</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1896</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;See &lt;a href=&quot;http://markmail.org/message/arai6silfiktwcer&quot; class=&quot;external-link&quot;&gt;http://markmail.org/message/arai6silfiktwcer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The javadoc confuses me as well.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12435024">LUCENE-1896</key>
            <summary>Modify confusing javadoc for queryNorm</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="kuhn">Jiri Kuhn</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Sep 2009 17:32:20 +0100</created>
                <updated>Sun, 10 Oct 2010 23:16:59 +0100</updated>
                    <resolved>Tue, 15 Sep 2009 13:40:13 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>general/javadocs</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12752270" author="markrmiller@gmail.com" created="Mon, 7 Sep 2009 22:47:11 +0100"  >&lt;p&gt;Suggestions? I am no IR guy.&lt;/p&gt;

&lt;p&gt;It would appear to me that this component is simply the part where you convert the vectors to unit vectors. Or are you are just dividing by the product of the euclidean lengths - it appears to be the same in either case to me.&lt;/p&gt;

&lt;p&gt;So it looks like we kind of factor that out as a constant (I barley understand myself too - don&apos;t worry) -&lt;/p&gt;

&lt;p&gt;In which case, why do we need it? Is it just there as a reminent of the math? Yes, it will give us the sim measure as the cosine - by why do we care if its a scaled cosine (eg not the cosine, but the same &lt;b&gt;relative&lt;/b&gt; scores) for less work? What do we need 1/(Sum(W^2))^1/2 for?  Seems like wasted calculations. Who is the academic that kept this in! ... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Actually, I don&apos;t have a clue if it makes sense to keep it or not. Or even whether or not I am talking out my ...&lt;/p&gt;

&lt;p&gt;Wherefore art thou Doug Cutting.&lt;/p&gt;</comment>
                    <comment id="12752271" author="markrmiller@gmail.com" created="Mon, 7 Sep 2009 22:55:20 +0100"  >&lt;p&gt;Hmm .. so perhaps the idea that the query scores are more comparable comes from:&lt;/p&gt;

&lt;p&gt;if we take it out, that means the score will be the cosine times the euclidean distance - the distance will be rather large for a small query vector and a large doc vector (in magnitude). So a query that matched many large docs would could scale a lot harder than a query that hit small docs?&lt;/p&gt;

&lt;p&gt;I guess that makes sense - scores not being very comparable anyway though, it hardly seems worth the extra compute cost ...&lt;/p&gt;</comment>
                    <comment id="12752273" author="markrmiller@gmail.com" created="Mon, 7 Sep 2009 23:04:53 +0100"  >&lt;p&gt;heh - the javadoc actually makes sense to me now. It is correct, and its even not confusing - perhaps cryptic, but not confusing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;It makes scores from different queries more comparable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12752302" author="markrmiller@gmail.com" created="Tue, 8 Sep 2009 03:10:12 +0100"  >&lt;blockquote&gt;&lt;p&gt;it hardly seems worth the extra compute cost&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Marvin mentioned the compute cost is essentially 0, so that statement is likely bs ...&lt;/p&gt;

&lt;p&gt;At essentially no cost, I can see why the IR dudes leave it in.&lt;/p&gt;</comment>
                    <comment id="12752311" author="creamyg" created="Tue, 8 Sep 2009 03:52:43 +0100"  >&lt;p&gt;FWIW, after all that &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200802.mbox/%3C9396E8E7-46FF-4B78-9427-13E9A7E584E4@rectangular.com%3E&quot; class=&quot;external-link&quot;&gt;fuss&lt;/a&gt;, &lt;br/&gt;
I would up leaving it in.&lt;/p&gt;

&lt;p&gt;From the standpoint of ordinary users, queryNorm() is harmless or mildly &lt;br/&gt;
beneficial. Scores are never going to be comparable across multiple queries &lt;br/&gt;
without what &lt;em&gt;I&lt;/em&gt; normally think of as &quot;normalization&quot; (given my background &lt;br/&gt;
in audio): setting the top score to 1.0, and multiplying all other scores by the &lt;br/&gt;
same factor. Nevertheless, it&apos;s better for them to be closer together than &lt;br/&gt;
farther apart.&lt;/p&gt;

&lt;p&gt;From the standpoint of users trying to write Query subclasses, it&apos;s a wash.&lt;br/&gt;
On the one hand, it&apos;s not the most important method, since it doesn&apos;t affect&lt;br/&gt;
ranking within a single query &amp;#8211; and zapping it would mean one less thing to&lt;br/&gt;
think about.  On the other hand, it&apos;s nice to have it in there for the sake of&lt;br/&gt;
completeness in the implementation of cosine similarity.&lt;/p&gt;

&lt;p&gt;I eventually would up messing with &lt;b&gt;how&lt;/b&gt; the query norm gets applied to&lt;br/&gt;
achieve my de-voodoo-fication goals.  Essentially, I hid away queryNorm() so&lt;br/&gt;
that you don&apos;t need to think about it unless you really need it.&lt;/p&gt;</comment>
                    <comment id="12752530" author="gsingers" created="Tue, 8 Sep 2009 15:06:36 +0100"  >&lt;p&gt;I know the queryNorm was based on some long ago research on it, but I don&apos;t know that it has proven to be all that useful.  There are certainly others who have done work on this, too.  In the end, I don&apos;t think the current implementation is all that useful and we could likely save a few ops by removing it, or giving people more powerful ways of changing it.&lt;/p&gt;

&lt;p&gt;The bottom line, I think, is you shouldn&apos;t compare scores across queries.  Often times, you can&apos;t even compare scores for the same query if the underlying index changed.  I also don&apos;t understand Marvin&apos;s comment about &quot;completeness in the implementation of cosine similarity&quot; nor the comment about scores being &quot;closer together than farther apart&quot;.&lt;/p&gt;</comment>
                    <comment id="12752533" author="markrmiller@gmail.com" created="Tue, 8 Sep 2009 15:20:22 +0100"  >&lt;p&gt;bq . The bottom line, I think, is you shouldn&apos;t compare scores across queries. Often times, you can&apos;t even compare scores for the same query if the underlying index changed. I also don&apos;t understand Marvin&apos;s comment about &quot;completeness in the implementation of cosine similarity&quot; nor the comment about scores being &quot;closer together than farther apart&quot;.&lt;/p&gt;

&lt;p&gt;Its not about being able to compare scores across queries per say.&lt;/p&gt;

&lt;p&gt;The cosine similarity is calc&apos;d using the definition &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 cos(a) = V(q) dot V(d) /  |V(q)||V(d)|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;queryNorm corresponds to the denominator of the right side of that equation. Suppose we take it out - that like multiplying the cos(a) by the product of the magnitude of the vectors:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 |V(q)||V(d)| * cos(a) = V(q) dot V(d)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So rather than getting the cos as a factor, we get cos * a number that depends on the euclidean length of the query/doc vectors.&lt;/p&gt;

&lt;p&gt;Thats what he means by completeness of the imp of the cosine sim. Rather than getting a cosine score, you get the cosine scaled by a somewhat arbitrary amount (that depends on the doc vector mostly).&lt;/p&gt;

&lt;p&gt;To get rid of that skew at no essentially no cost makes a lot of sense to me - which jives with why IR lit and Doug keep it around. Its not there to make scores between queries comparable - but it makes them way more comparable than they would be, and it adds to the &quot;completeness in the implementation of cosine similarity&quot; - at what I am trusting is essentially no cost. Its a keeper from my point of view. Its not based on research - its just the math of the formula - and if it had any real expense, it would likely have been tossed long ago (in the IR world).&lt;/p&gt;</comment>
                    <comment id="12752544" author="markrmiller@gmail.com" created="Tue, 8 Sep 2009 15:37:36 +0100"  >&lt;p&gt;In other words - we get a measure that relates to the angle between vectors, not a measure that relates to the angle as well as the magnitude of the vectors (which doesn&apos;t help as a sim measurement and skews the scores across queries). Another way to think of it is that we are converting the vectors to unit vectors, and just considering the angles between them - not entirely necessary, but nice if its free.&lt;/p&gt;</comment>
                    <comment id="12752591" author="creamyg" created="Tue, 8 Sep 2009 17:07:38 +0100"  >&lt;p&gt;&amp;gt; at what I am trusting is essentially no cost.&lt;/p&gt;

&lt;p&gt;Here&apos;s the snippet from TermQuery.score() where queryNorm() actually &lt;br/&gt;
gets applied to each document&apos;s score:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt; raw =                                   &lt;span class=&quot;code-comment&quot;&gt;// compute tf(f)*weight
&lt;/span&gt;  f &amp;lt; SCORE_CACHE_SIZE                        &lt;span class=&quot;code-comment&quot;&gt;// check cache
&lt;/span&gt;  ? scoreCache[f]                             &lt;span class=&quot;code-comment&quot;&gt;// cache hit
&lt;/span&gt;  : getSimilarity().tf(f)*weightValue;        &lt;span class=&quot;code-comment&quot;&gt;// cache miss&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point, queryNorm() has already been factored into weightValue (and&lt;br/&gt;
scoreCache).  It happens during setup. You can either scale weightValue by&lt;br/&gt;
queryNorm() during setup or not &amp;#8211; the per-document computational cost is &lt;br/&gt;
unaffected.&lt;/p&gt;</comment>
                    <comment id="12752763" author="hossman" created="Tue, 8 Sep 2009 22:42:41 +0100"  >&lt;p&gt;as i mentioned in the linked thread, the biggest advantage i know of for queryNorm is that it is a reduction factor applied to the constituent parts of a complex score prior to multiplication &amp;#8211; so it helps prevent loss of information due to floating point accuracy that could arrise otherwise.&lt;/p&gt;

&lt;p&gt;but then again: that&apos;swhat the &lt;b&gt;default&lt;/b&gt; queryNorm does ... an alternate queryNorm could do something (like be a no-op)&lt;/p&gt;

&lt;p&gt;Since the target audience of the Similarity javadocs are mainly people who are interested in customizing the scoring, perhaps it should be something like...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The queryNorm is a uniform normalization factor computed from the sumOfSquareWeights for the query which is then applied to each of the clauses of the query.  In some cases this can be useful for attempting to keep scores from simple queries semi-comparable.  The Default implementation is...&lt;/p&gt;&lt;/blockquote&gt; </comment>
                    <comment id="12752775" author="markrmiller@gmail.com" created="Tue, 8 Sep 2009 22:55:13 +0100"  >&lt;p&gt;We can&apos;t be that worried about decimal accuracy - we use float which is good for 6 digits - if we were, wouldn&apos;t we use double (good for over double that) -&lt;/p&gt;

&lt;p&gt;something about this argument hasn&apos;t clicked in my head yet.&lt;/p&gt;

&lt;p&gt;If that was helpful (to scale by a some what arbitrary dampening factor) we would just start by multiplying every score by .01 or whatever. It doesn&apos;t make sense to me.&lt;/p&gt;</comment>
                    <comment id="12752780" author="hossman" created="Tue, 8 Sep 2009 23:03:17 +0100"  >&lt;p&gt;you could have a queryNorm implementation that always returned 0.01f ... but if you were dealing with weights that were all really large, it might not be enough ... and ify ou were dealing with weights that were &lt;b&gt;extremely&lt;/b&gt; small low, it might actually be counter productive.  that&apos;s why the default isn&apos;t arbitrary &amp;#8211; it&apos;s a function of the weight.&lt;/p&gt;

&lt;p&gt;i never said it was a &lt;b&gt;reason&lt;/b&gt; why queryNorm was there ... i just said it was an advatnge i&apos;ve observed in having it.&lt;/p&gt;

&lt;p&gt;I also didn&apos;t argue in favor of adding anything about that to hte javadocs &amp;#8211; i mentioned it only to explain one type of benefit that can arise from have &quot;a uniform normalization factor computed from the sumOfSquareWeights for the query which is then applied to each of the clauses of the query&quot;&lt;/p&gt;</comment>
                    <comment id="12752786" author="markrmiller@gmail.com" created="Tue, 8 Sep 2009 23:11:47 +0100"  >&lt;p&gt;I&apos;m not arguing about it, I&apos;m just trying to understand it, and whether its actually helpful or not. Since it doesn&apos;t click in my head yet, I wouldn&apos;t have a leg to stand on in terms of an argument.&lt;/p&gt;</comment>
                    <comment id="12752787" author="hossman" created="Tue, 8 Sep 2009 23:14:52 +0100"  >&lt;p&gt;argue was a poor choice of word, it implies someone is arguing back.  what i should have said was that i don&apos;t &lt;b&gt;advocate&lt;/b&gt; adding a mention of it to the docs.&lt;/p&gt;</comment>
                    <comment id="12753377" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 03:01:08 +0100"  >&lt;p&gt;Okay - think I was a tad off base -&lt;/p&gt;

&lt;p&gt;Here is the cosine def used:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
cos(a) = V(q) dot V(d) /  |V(q)||V(d)|
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So the cosine is the query vector dot the document vector divided by the magnitude of the vectors. Classically, |V(q)||V(d)| is a normalization factor that takes the vectors to unit vectors (so you get the real cosine)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
cos(a) = v(q) dot v(d) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because the magnitude of a unit vector is 1 be definition.&lt;/p&gt;

&lt;p&gt;But we don&apos;t care about absolute numbers, just relative numbers (as has been often pointed out) - so the IR guys already fudge this stuff.&lt;/p&gt;

&lt;p&gt;While I thought that the queryNorm correlates to |V(q)||V(d)| before, I was off - its just |V(q)|.  |V(d)| is replaced with the document length normalization, a much faster calculation with similar properties - a longer doc would have a larger magnitude most likely. &lt;b&gt;edit&lt;/b&gt; not just similar properties - but many times better properties - the standard normalization would not factor in document length at all - it essentially removes it.&lt;/p&gt;

&lt;p&gt;So one strategy is just to not normalize query - though the lit i see doing this is very inefficiently calculating the query norm in the inner loop - we are not doing that, and so its not much of an optimization for us.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
cos(a) = V(q) dot V(d) /  |V(d)| == cos(a) * |V(q)| = v(q) dot v(d)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it does make queries more comparable (an odd goal I know, but for free?) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Sorry I was a little off earlier - just tried to learn all this myself - and linear alg was years ago - and open book tests lured my younger, more irresponsible self to not go to the classes ...&lt;/p&gt;

&lt;p&gt;Anyhow, thats my current understanding - please point out if you know I have something wrong.&lt;/p&gt;</comment>
                    <comment id="12753383" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 03:13:07 +0100"  >&lt;p&gt;The real problem with this, is that while it wants to pluggable, because the sumOfSquared scores is calculated in the Weight, its really not so pluggable.&lt;/p&gt;

&lt;p&gt;The alg is not properly contained - this queryNorm is one divided by the square root of the sumOfSquared weights - but thats the whole norm. If you wanted to&lt;br/&gt;
replace it with one, you shouldnt still be doing sumOfSquaredWeights.&lt;/p&gt;

&lt;p&gt;Perhaps its a compromise on a difficult piece (have not considered) - but technically its kind of off..&lt;/p&gt;</comment>
                    <comment id="12753388" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 03:22:36 +0100"  >&lt;p&gt;Finally, after all that hot air, an attempt at a patch to address the issue &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;edit&lt;/b&gt; Ill fix the atrocious spelling before committing.&lt;/p&gt;</comment>
                    <comment id="12753400" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 04:03:30 +0100"  >&lt;p&gt;I&apos;ve committed for RC4 - I&apos;ll leave open in case someone has an issue, and we can modify for final if we need to.&lt;/p&gt;</comment>
                    <comment id="12753409" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 04:56:19 +0100"  >&lt;p&gt;This is a tricky change I think, but shoudnt it be more like this?&lt;/p&gt;

&lt;p&gt;queryNorm takes the Weight rather than sumSquared - and then you can call sumSquared on the weight or skip it, saving the few calcs, and isolating the work to the queryNorm impl.&lt;/p&gt;

&lt;p&gt;The patch is unfinished though -&lt;/p&gt;

&lt;p&gt;its an issue that queryNorm throws IOException - I don&apos;t think it should and i removed it here, but thats not back compat. Pain in the butt.&lt;/p&gt;

&lt;p&gt;also, I havn&apos;t given much thought to how we would migrate without breaking back compat - I guess the introspection again ...&lt;/p&gt;

&lt;p&gt;And perhaps we just leave it.&lt;/p&gt;</comment>
                    <comment id="12753892" author="doronc" created="Fri, 11 Sep 2009 00:24:09 +0100"  >&lt;p&gt;I kinda like the modification of queryNorm to get Weight as parameter.&lt;br/&gt;
And I don&apos;t mind about it throwing an exception - besides being perhaps redundant, is it a real problem?&lt;br/&gt;
But in any case, perhaps this part (modifying the API) belongs to a separate issue?&lt;/p&gt;

&lt;p&gt;Back to the original queryNorm discussion, thanks Mark and Hoss for the explanations - I just realized I did not fully understand the use of query norm. (Now I think I do, but I thought so too before this discussion.... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) &lt;/p&gt;

&lt;p&gt;I am working on a patch to the large javadoc part in the top of Similarity - to show more tightly how the scoring formula described there today (which I think is accurate) evolves from VSM - something in the lines of Mark&apos;s description above. I hope to complete it over the weekend, and I hope the added text would also clear the confusion about the purpose and practice of the query norm.&lt;/p&gt;</comment>
                    <comment id="12754302" author="doronc" created="Fri, 11 Sep 2009 20:52:00 +0100"  >&lt;p&gt;hi Mark, I moved the work on the Similarity javadoc for scoring to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1908&quot; title=&quot;Similarity javadocs for scoring function to relate more tightly to scoring models in effect&quot;&gt;&lt;del&gt;LUCENE-1908&lt;/del&gt;&lt;/a&gt;, so I think this one can be closed?&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12435370">LUCENE-1907</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12435467">LUCENE-1908</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12419125" name="LUCENE-1896.patch" size="1200" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 03:22:36 +0100" />
                    <attachment id="12419133" name="queryNormAlternate.patch" size="11576" author="markrmiller@gmail.com" created="Thu, 10 Sep 2009 04:56:19 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 7 Sep 2009 21:47:11 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11871</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25829</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>