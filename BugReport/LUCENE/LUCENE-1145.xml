<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:00:24 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1145/LUCENE-1145.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1145] DisjunctionSumScorer small tweak</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1145</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Move ScorerDocQueue initialization from next() and skipTo() methods to the Constructor. Makes DisjunctionSumScorer a bit faster (less than 1% on my tests). &lt;/p&gt;

&lt;p&gt;Downside (if this is one, I cannot judge) would be throwing IOException from DisjunctionSumScorer constructors as we touch HardDisk there. I see no problem as this IOException does not propagate too far (the only modification I made is in BooleanScorer2)&lt;/p&gt;

&lt;p&gt;if (scorerDocQueue == null) {&lt;br/&gt;
      initScorerDocQueue();&lt;br/&gt;
}&lt;/p&gt;


&lt;p&gt;Attached test is just quick &amp;amp; dirty rip of  TestScorerPerf from standard Lucene test package. Not included as patch as I do not like it.&lt;/p&gt;


&lt;p&gt;All test pass, patch made on trunk revision 613923&lt;/p&gt;</description>
                <environment>&lt;p&gt;all&lt;/p&gt;</environment>
            <key id="12386789">LUCENE-1145</key>
            <summary>DisjunctionSumScorer small tweak</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="eksdev">Eks Dev</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Jan 2008 16:34:20 +0000</created>
                <updated>Fri, 25 Sep 2009 17:23:06 +0100</updated>
                    <resolved>Wed, 18 Mar 2009 16:45:33 +0000</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12561718" author="eksdev" created="Wed, 23 Jan 2008 15:51:23 +0000"  >&lt;p&gt;Simplification of the DisjunctionSumScorer. &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed cached field &quot;private int queueSize&quot; which mirrored ScorerDocQueue.size()  and&lt;br/&gt;
replaced it with method call.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It is faster with this patch, but hardly measurable (test made with attached TestScorerPerformance) 585660ms vs 586090ms. Test on WIN XP  Prof. Dual Core Intel T7300 2GHz with 6.0 java -server -Xbatch&lt;/p&gt;

&lt;p&gt;At a moment, I have no other configurations to test it, it would be good to see what happens on jvm 1.4   &lt;/p&gt;

&lt;p&gt;It makes sense to commit this as it simplifies (pff, ok, simpifies it a bit &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; already complex code in DSScorer and is not slower. &lt;/p&gt;</comment>
                    <comment id="12561752" author="paul.elschot@xs4all.nl" created="Wed, 23 Jan 2008 18:11:21 +0000"  >&lt;p&gt;When I wrote it, using the queueSize variable did make a minor difference in performance.&lt;br/&gt;
But with the result you have, I think it&apos;s better use the size() call only.&lt;/p&gt;</comment>
                    <comment id="12561836" author="eksdev" created="Wed, 23 Jan 2008 22:18:42 +0000"  >&lt;p&gt;Well, I do not know how it behaves on earlier jvm-s and what would be the &quot;jvm we optimize&quot;, I would not be surprised if jvm 6+ evolved optimization methods. &lt;br/&gt;
These patches are just side effects of trying to get familiar with scorer family inner working in light of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-584&quot; title=&quot;Decouple Filter from BitSet&quot;&gt;&lt;del&gt;LUCENE-584&lt;/del&gt;&lt;/a&gt;. Boolean arithmetic on multiple skipping  iterators in Scorers can hardly be beaten and can be recycled for cases like BooleanFilter... and maybe one day merged to avoid code duplication &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Anyhow, if it proves that performance on 1.4 behaves similarly, I would opt for size(), makes code slightly cleaner. If not, I would suggest to replace the only size() usage  in next() with cached queueSize&lt;/p&gt;</comment>
                    <comment id="12566961" author="eksdev" created="Fri, 8 Feb 2008 08:54:49 +0000"  >&lt;p&gt;test using Sun 1.4 jvm on the same hardware showed the same &quot;a bit faster&quot; behavior, so this is in my opinion OK to be committed.   &lt;/p&gt;</comment>
                    <comment id="12683058" author="mikemccand" created="Wed, 18 Mar 2009 16:24:59 +0000"  >&lt;p&gt;I plan to commit shortly.&lt;/p&gt;</comment>
                    <comment id="12683070" author="mikemccand" created="Wed, 18 Mar 2009 16:45:33 +0000"  >&lt;p&gt;Thanks Eks and Paul!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12373687" name="DisjunctionSumScorerOptimization.patch" size="2762" author="eksdev" created="Mon, 21 Jan 2008 16:35:03 +0000" />
                    <attachment id="12373839" name="DSSQueueSizeOptimization.patch" size="2250" author="eksdev" created="Wed, 23 Jan 2008 15:51:23 +0000" />
                    <attachment id="12373688" name="TestScorerPerformance.java" size="8451" author="eksdev" created="Mon, 21 Jan 2008 16:37:17 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 23 Jan 2008 18:11:21 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12600</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26584</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>