<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:14:43 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-469/LUCENE-469.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-469] (Parallel-)MultiSearcher: using Sort object changes the scores</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-469</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Example: &lt;br/&gt;
Hits hits=multiSearcher.search(query);&lt;br/&gt;
returns different scores for some documents than&lt;br/&gt;
Hits hits=multiSearcher.search(query, Sort.RELEVANCE);&lt;br/&gt;
(both for MultiSearcher and ParallelMultiSearcher)&lt;/p&gt;

&lt;p&gt;The documents returned will be the same and in the same order, but the scores in the second case will seem out of order.&lt;/p&gt;

&lt;p&gt;Inspecting the Explanation objects shows that the scores themselves are ok, but there&apos;s a bug in the normalization of the scores.&lt;/p&gt;

&lt;p&gt;The document with the highest score should have score 1.0, so all document scores are divided by the highest score.  (Assuming the highest score was&amp;gt;1.0)&lt;/p&gt;

&lt;p&gt;However, for MultiSearcher and ParallelMultiSearcher, this normalization factor is applied &lt;b&gt;per index&lt;/b&gt;, before merging the results together (the merge itself is ok though).&lt;/p&gt;

&lt;p&gt;An example: if you use&lt;br/&gt;
Hits hits=multiSearcher.search(query, Sort.RELEVANCE);&lt;br/&gt;
for a MultiSearcher with two subsearchers, the first document will have score 1.0.&lt;br/&gt;
The next documents from the same subsearcher will have decreasing scores.&lt;br/&gt;
The first document from the other subsearcher will however have score 1.0 again !&lt;/p&gt;

&lt;p&gt;The same applies for other Sort objects, but it is less visible.&lt;/p&gt;

&lt;p&gt;I will post a TestCase demonstrating the problem and suggested patches to solve it in a moment...&lt;/p&gt;</description>
                <environment>&lt;p&gt;21 november 2005, revision 345901&lt;/p&gt;</environment>
            <key id="12325892">LUCENE-469</key>
            <summary>(Parallel-)MultiSearcher: using Sort object changes the scores</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="lvl">Luc Vanlerberghe</reporter>
                        <labels>
                    </labels>
                <created>Tue, 22 Nov 2005 02:37:11 +0000</created>
                <updated>Thu, 2 Jun 2011 23:03:23 +0100</updated>
                    <resolved>Thu, 8 Dec 2005 02:49:17 +0000</resolved>
                                            <fixVersion>1.9</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12358174" author="lvl" created="Tue, 22 Nov 2005 03:08:52 +0000"  >&lt;p&gt;This adds a test to TestMultiSearcher (and ParallelMultiSearcher since TestParallelMultiSearcher &lt;br/&gt;
runs this code too) demonstrating the problem.&lt;/p&gt;

&lt;p&gt;Two document sets are created, both with ten documents, and a query that matches exactly one of each.&lt;br/&gt;
Since the documents in the second set have more terms, the scores for those document should be lower.&lt;/p&gt;

&lt;p&gt;Putting all documents in one index demonstrates this, and the scores from that are used to check the ones&lt;br/&gt;
obtained by MultiSearcher when the document sets are put in two different indexes.&lt;/p&gt;

&lt;p&gt;Using searcher.search(query), the results are ok,&lt;br/&gt;
using searcher.search(query, Sort.RELEVANCE), they are not (both scores are 1.0)&lt;/p&gt;</comment>
                    <comment id="12358176" author="yseeley@gmail.com" created="Tue, 22 Nov 2005 03:09:28 +0000"  >&lt;p&gt;I sent an email to dev on this a month ago:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/java-dev@lucene.apache.org/msg02443.html&quot; class=&quot;external-link&quot;&gt;http://www.mail-archive.com/java-dev@lucene.apache.org/msg02443.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I took little steps to make it easier to do the right thing (keeping track of the real maxScore and adding getMaxScore() to FieldSortedHitQueue)&lt;/p&gt;

&lt;p&gt;My personal feeling is that the expert level search routines should not normalize the score, and there should be a maxScore property in TopDocs to allow normalization by other search methods (Hits).&lt;/p&gt;</comment>
                    <comment id="12358180" author="lvl" created="Tue, 22 Nov 2005 03:35:54 +0000"  >&lt;p&gt;My thoughts exactly!&lt;/p&gt;

&lt;p&gt;For the expert routines, there&apos;s no mention in the javadoc about the scoring being applied, so nobody should depend on it.  If they did, well, they&apos;re experts, right? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This is my complete patch to correct the problem and I do indeed propose to add a field maxScore to TopDocs that is used in Hits to normalize the results at as the very last step.&lt;/p&gt;

&lt;p&gt;All the TestCases pass after applying this patch.&lt;/p&gt;</comment>
                    <comment id="12358183" author="yseeley@gmail.com" created="Tue, 22 Nov 2005 04:17:37 +0000"  >&lt;p&gt;Thanks Luc!&lt;br/&gt;
a couple of things:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;changing expert level search functions to not normalize.  +1 from me, but I&apos;d like to hear from some others on a change like this.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TopDocs and TopFieldDocs are public... this patch changes the constructors.  Although this is a great way to test if we got all the cases within Lucene, if anyone created their own instances outside lucene, it would break backward compatibility.  This is beyond expert level though... so perhaps it shouldn&apos;t worry us.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;m not sure if the MultiSearcher implementation is correct for other Sorts.&lt;br/&gt;
  FieldDocSortedHitQueue.getMaxScore() is only the max score of docs inserted... I think you need to reference  docs.maxScore() rather than relying on the  FieldDocSortedHitQueue in this case, right?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12358189" author="cutting" created="Tue, 22 Nov 2005 04:51:35 +0000"  >&lt;p&gt;TopDocs.maxScore should be private with public accessors.&lt;/p&gt;

&lt;p&gt;I also agree that score normalization should only appear in scores from Hits.java.  (FYI, the score normalization &quot;feature&quot; was added in the early days of Lucene when lots of folks seemed to find scores greater than 1.0 disturbing.)&lt;/p&gt;</comment>
                    <comment id="12358233" author="lvl" created="Tue, 22 Nov 2005 22:13:57 +0000"  >&lt;p&gt;I discovered the problem in my production system a while ago, assumed it would have been fixed in 1.9 and noticed it wasn&apos;t.&lt;/p&gt;

&lt;p&gt;I created test cases to reproduce it and used them to find and eliminate the problem.  I didn&apos;t pay much attention to compatibility issues yet.&lt;/p&gt;

&lt;p&gt;I backported the patches to 1.4.3 now, tested it and put it in production.&lt;br/&gt;
I&apos;ll post those 1.4.3 version of the patches later&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TopDocs and TopFieldDocs are indeed public.  I could add the old constructor again with a @deprecated tag that sets maxScore to 1.0&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Other Sorts: You are right, I made a mistake by concentrating too much on the Sort.RELEVANCE case.  A similar problem exists for ParallelMultiSearcher.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I am also in favour of making maxScore private with public accessors.  I only made it public because the other members where public...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;ll post corrected patches later today...&lt;/p&gt;</comment>
                    <comment id="12358527" author="lvl" created="Sat, 26 Nov 2005 05:28:08 +0000"  >&lt;p&gt;Here&apos;s the updated patch (at last....)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the redundant changes to FieldDocSortedHitQueue are reverted.&lt;/li&gt;
	&lt;li&gt;maxScore is private with public accessors.&lt;/li&gt;
	&lt;li&gt;TopFieldDocs search (Weight weight, Filter filter, int n, Sort sort) is corrected in MultiSearcher and ParallelMultiSearcher.&lt;/li&gt;
	&lt;li&gt;I didn&apos;t add compatible but deprecated constructors for TopDocs and TopFieldDocs.  Those constructors where package private, so they couldn&apos;t be used by derived classes anyway.  So I think risk of breaking backwards compatibility for existing applications by changing these classes is fairly low.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12359607" author="yseeley@gmail.com" created="Thu, 8 Dec 2005 02:49:16 +0000"  >&lt;p&gt;Fixed a small bug in the test (passing a null analyzer which causes a NPE with the new getPositionIncrement code), and committed.&lt;/p&gt;

&lt;p&gt;Thanks Luke!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12320959" name="MultiSearcherSort.patch" size="8098" author="lvl" created="Sat, 26 Nov 2005 05:28:08 +0000" />
                    <attachment id="12320839" name="MultiSearcherSort.patch" size="8047" author="lvl" created="Tue, 22 Nov 2005 03:35:54 +0000" />
                    <attachment id="12320837" name="TestMultiSearcher.patch" size="4504" author="lvl" created="Tue, 22 Nov 2005 03:08:52 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 22 Nov 2005 03:09:28 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13280</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27262</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>