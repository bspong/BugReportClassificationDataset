<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:01:44 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2265/LUCENE-2265.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2265] improve automaton performance by running on byte[]</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2265</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Currently, when enumerating terms, automaton must convert entire terms from flex&apos;s native utf-8 byte[] to char[] first, then step each char thru the state machine.&lt;/p&gt;

&lt;p&gt;we can make this more efficient, by allowing the state machine to run on byte[], so it can return true/false faster.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12456265">LUCENE-2265</key>
            <summary>improve automaton performance by running on byte[]</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Sun, 14 Feb 2010 14:47:55 +0000</created>
                <updated>Fri, 10 May 2013 11:44:56 +0100</updated>
                    <resolved>Tue, 4 May 2010 00:26:43 +0100</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12833574" author="rcmuir" created="Sun, 14 Feb 2010 14:49:51 +0000"  >&lt;p&gt;attached is a patch. at most it only improves performance around 10% for Latin-1 text.&lt;br/&gt;
I haven&apos;t benchmarked non-Latin test yet.&lt;/p&gt;

&lt;p&gt;Even if its better, I am not sure we want to do this (is the performance worth the complexity?), but all the tests pass.&lt;/p&gt;</comment>
                    <comment id="12833580" author="rcmuir" created="Sun, 14 Feb 2010 15:31:45 +0000"  >&lt;p&gt;I tested this with Hindi text as well, it gives no benefit there. So it only helps english, will leave the patch out here in case someone has a better idea &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12852896" author="rcmuir" created="Fri, 2 Apr 2010 19:05:30 +0100"  >&lt;p&gt;I discussed this situation with Mike McCandless and I think we might have something of a plan.&lt;/p&gt;

&lt;p&gt;For reference, here is the problem: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;In flex the terms are byte[] (typically UTF-8)&lt;/li&gt;
	&lt;li&gt;Automaton transitions work on UTF-16 intervals (char)&lt;/li&gt;
	&lt;li&gt;RunAutomaton is an array-compiled form that also works on UTF-16 (char[])&lt;/li&gt;
	&lt;li&gt;Because of this, we have a lot of unicode conversion overhead between byte[] and char[] hurting performance.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here is the current idea:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Switch Automaton to work on UTF-32 intervals (int)&lt;/li&gt;
	&lt;li&gt;Create a method to convert a UTF-32 Automaton to an equivalent UTF-8 Automaton.&lt;/li&gt;
	&lt;li&gt;Create a UTF-8 RunAutomaton that works on byte[]&lt;/li&gt;
	&lt;li&gt;We could also create a UTF-32 RunAutomaton that works on codepoints, for use in analysis, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would have some nice benefits besides performance, &lt;br/&gt;
for example a wildcard operator of &quot;?&quot; or regex operator of &quot;.&quot; would match a real unicode codepoint, &lt;br/&gt;
not a single code unit like it always has. So if somehow we can make this work, we would have better&lt;br/&gt;
performance and better unicode support.&lt;/p&gt;

&lt;p&gt;The trick is to do this UTF-32 DFA -&amp;gt; UTF-8 DFA conversion efficiently, especially keeping determinism,&lt;br/&gt;
and not causing some nasty explosion&lt;/p&gt;</comment>
                    <comment id="12852998" author="earwin" created="Sat, 3 Apr 2010 00:25:49 +0100"  >&lt;p&gt;I probably missed something.&lt;/p&gt;

&lt;p&gt;Why can&apos;t you create UTF-8 Automaton from the get go?&lt;/p&gt;</comment>
                    <comment id="12853002" author="rcmuir" created="Sat, 3 Apr 2010 00:30:37 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why can&apos;t you create UTF-8 Automaton from the get go?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because high-level, users want automaton transitions to represent real characters &lt;br/&gt;
(eg regular expressions, wildcards, etc) and do not much care about bytes!&lt;/p&gt;

&lt;p&gt;So the utf-16 Automaton/RunAutomaton pair makes sense for the library...&lt;/p&gt;

&lt;p&gt;But utf-32 is still easy to work with high-level (we just represent codepoint intervals instead of codeunit),&lt;br/&gt;
and utf-8 is faster for working with lucene.&lt;/p&gt;</comment>
                    <comment id="12853005" author="earwin" created="Sat, 3 Apr 2010 00:40:48 +0100"  >&lt;p&gt;So? You aren&apos;t making some generic automaton library, are you?&lt;br/&gt;
Get these user regexes/wildcards/etc, convert them to utf-8, build utf-8 automaton, run it against lucene data.&lt;/p&gt;</comment>
                    <comment id="12853006" author="earwin" created="Sat, 3 Apr 2010 00:44:14 +0100"  >&lt;p&gt;I mean, high-level, users don&apos;t care about your automaton at all, much less transitions. They want their regexes and wildcards to work.&lt;/p&gt;</comment>
                    <comment id="12853007" author="rcmuir" created="Sat, 3 Apr 2010 00:45:34 +0100"  >&lt;blockquote&gt;
&lt;p&gt;So? You aren&apos;t making some generic automaton library, are you?&lt;br/&gt;
Get these user regexes/wildcards/etc, convert them to utf-8, build utf-8 automaton, run it against lucene data. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This just pushes the complexity into the parsers. and yes, it makes sense to support high-level (char[]) operations&lt;br/&gt;
with automaton too, such as analysis.&lt;/p&gt;

&lt;p&gt;I encourage you to take a look at the existing code. In general a lot of parsers (see wildcard and regex) are implemented &lt;br/&gt;
with primitive automata like &apos;makeAnyChar&apos;. &apos;makeAnyByte&apos; makes no sense.&lt;/p&gt;

&lt;p&gt;So its generic in the sense that fuzzy, regex, wildcard, all of our users are defined on unicode characters. high&lt;br/&gt;
level operations such as parsing, intersection, and union belong in utf16 or utf32 space, not with bytes.&lt;/p&gt;

&lt;p&gt;bytes is an implementation detail, and we shouldnt operate on UTF-8 except behind the scenes.&lt;/p&gt;</comment>
                    <comment id="12853008" author="rcmuir" created="Sat, 3 Apr 2010 00:47:20 +0100"  >&lt;blockquote&gt;&lt;p&gt;I mean, high-level, users don&apos;t care about your automaton at all, much less transitions. They want their regexes and wildcards to work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but you have it backwards. users want their regexes and wildcards to work. they want wildcard &quot;?&quot; or regex &quot;.&quot; to match unicode&lt;br/&gt;
characters, not bytes. no one cares about bytes.&lt;/p&gt;</comment>
                    <comment id="12853010" author="earwin" created="Sat, 3 Apr 2010 00:52:41 +0100"  >&lt;p&gt;Hmmmmm.&lt;/p&gt;

&lt;p&gt;I&apos;d say that your highlevel operations like intersection and union remain exactly the same regardless of the alphabet you&apos;re operating on.&lt;br/&gt;
The primitive automata, like AnyChar will have to cease being so primitive and generate a pair of states instead of one, but that&apos;s essentially it - after primitive automatas are fixed to recognize utf-8 bytes, you don&apos;t even have to change parsing code that much.&lt;/p&gt;

&lt;p&gt;The only true problem I see is that you lose the ability to operate on char[]. But then, I ask that again, do you write a generic library, or you borrowed automata code from one with a single aim of having fast lucene queries?&lt;/p&gt;</comment>
                    <comment id="12853013" author="rcmuir" created="Sat, 3 Apr 2010 01:01:42 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Hmmmmm.&lt;/p&gt;

&lt;p&gt;I&apos;d say that your highlevel operations like intersection and union remain exactly the same regardless of the alphabet you&apos;re operating on.&lt;br/&gt;
The primitive automata, like AnyChar will have to cease being so primitive and generate a pair of states instead of one, but that&apos;s essentially it - after primitive automatas are fixed to recognize utf-8 bytes, you don&apos;t even have to change parsing code that much.&lt;/p&gt;

&lt;p&gt;The only true problem I see is that you lose the ability to operate on char[]. But then, I ask that again, do you write a generic library, or you borrowed automata code from one with a single aim of having fast lucene queries?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well this is a borrowed library, but that doesnt really matter. The trick is that UTF-16 and UTF-32 are much more efficient for the kind of processing the high-level component needs: doing things like NFA-&amp;gt;DFA conversion and minimization. Its much better to do some of these quadratic algorithms on high-level unicode instead of byte, and get a minimal DFA. At the same time the intervals represent real things, so its debuggable, etc.&lt;/p&gt;

&lt;p&gt;So to me it makes perfect sense to change the transition&apos;s min/max from &apos;char&apos; to &apos;int&apos;, which is trivial and won&apos;t require me to rewrite all the primitive automata. Things like NFA-DFA conversion will be actually faster, never slower for some text.&lt;/p&gt;

&lt;p&gt;This gives us the opportunity to &apos;compile&apos; to UTF-8 or UTF-32 RunAutomata (although for the latter we cannot use the classmap trick since the alphabet will be large). This way, it can be used effectively at both a high and low level, and the code is easy to maintain.&lt;/p&gt;

&lt;p&gt;I can debug the code now with things like toString and toDot, I certainly cannot do this if the high-level code is changed to byte/UTF-8. It would be completely unmaintainable, and most likely slower overall due to doing quadratic things like determinism on exploded UTF-8 automata.&lt;/p&gt;</comment>
                    <comment id="12853354" author="rcmuir" created="Mon, 5 Apr 2010 13:07:14 +0100"  >&lt;p&gt;as i looked at this, i noticed some unused functionality (numeric fractions and the like).&lt;/p&gt;

&lt;p&gt;attached is a patch to remove it. I plan to commit soon.&lt;/p&gt;</comment>
                    <comment id="12853506" author="mikemccand" created="Mon, 5 Apr 2010 20:46:50 +0100"  >&lt;p&gt;Attached patch for first cut at APIs to convert a UTF32 automaton to UTF8.&lt;/p&gt;

&lt;p&gt;There&apos;s a test case that verifies the conversion is working correctly.  It seems to be working.&lt;/p&gt;

&lt;p&gt;This patch is just the low level API, ie, converting one edge containing a UTF32 range.  I still need to fix it to convert an entire UTF32 DFA... should be straightforward.&lt;/p&gt;

&lt;p&gt;Also, I need to merge with Robert&apos;s int (UTF32) cutover and a UTF8RunAutomaton.&lt;/p&gt;</comment>
                    <comment id="12853551" author="rcmuir" created="Mon, 5 Apr 2010 22:43:54 +0100"  >&lt;p&gt;attached is a totally scary patch to convert the entire automaton lib to utf-32...&lt;br/&gt;
(i didnt mess with any search code and obviously it wont even compile with this patch)&lt;/p&gt;</comment>
                    <comment id="12853555" author="mikemccand" created="Mon, 5 Apr 2010 22:57:54 +0100"  >&lt;p&gt;Patch w/ first cut at method to cutover whole UTF32 DFA -&amp;gt; UTF8 DFA (and... call determinize on it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                    <comment id="12853708" author="rcmuir" created="Tue, 6 Apr 2010 03:54:38 +0100"  >&lt;p&gt;this is mike&apos;s patch + my patch + quick hack attempt... most but not all tests are passing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12853737" author="rcmuir" created="Tue, 6 Apr 2010 05:31:05 +0100"  >&lt;p&gt;ok I think i made some serious progress here, but i did find a bug in the utf32 -&amp;gt; utf8 dfa convertor.&lt;br/&gt;
The problem is it does not handle at least the case where the initial state is an accept state.&lt;br/&gt;
I created a testcase for this (TestUTF32SpecialCase), and included the python code back, as i figure you will probably fix it there first.&lt;/p&gt;

&lt;p&gt;I deleted the surrogate-seeking tests, like other nuances, if we switch to byte[] these won&apos;t behave the same, as these regexps &lt;br/&gt;
are no longer defined.&lt;/p&gt;

&lt;p&gt;remaining is to switch the slow fuzzy to use codepoint calculations (to be consistent with the fast one).&lt;br/&gt;
by the way, its really silly we have to unicode-convert just to get length in chars for that score calculation... ugh!&lt;/p&gt;</comment>
                    <comment id="12853820" author="mikemccand" created="Tue, 6 Apr 2010 10:25:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;The problem is it does not handle at least the case where the initial state is an accept state.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK this is a simple fix in the UTF32ToUTF8.convert method &amp;#8211; I didn&apos;t set isAccept on the initial state &amp;#8211; new patch attached that fixes this.&lt;/p&gt;</comment>
                    <comment id="12860243" author="mikemccand" created="Fri, 23 Apr 2010 14:09:55 +0100"  >&lt;p&gt;Checkpointing progress from Robert &amp;amp; I on this issue...&lt;/p&gt;

&lt;p&gt;The conversion is now done in Java.&lt;/p&gt;</comment>
                    <comment id="12860281" author="mikemccand" created="Fri, 23 Apr 2010 16:35:18 +0100"  >&lt;p&gt;Last patch was a bit stale &amp;#8211; this one is current, and all tests pass.&lt;/p&gt;</comment>
                    <comment id="12860295" author="rcmuir" created="Fri, 23 Apr 2010 16:57:28 +0100"  >&lt;p&gt;So here are the advantages of the current patch:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;full unicode support (Regular Expression, Wildcard, Fuzzy). for example, wildcard ? means codepoint, not code unit.&lt;/li&gt;
	&lt;li&gt;support for matching all unicode forms easily (utf8, utf16, utf32).&lt;/li&gt;
	&lt;li&gt;easy to support both native utf8 terms sort order, but also utf8-in-utf16 like we have now. this is not feasible with the existing utf16 representation.&lt;/li&gt;
	&lt;li&gt;easy to safely do dfa operations on Automaton. this is because there are no surrogates anymore. for example we can safely reverse any automaton to take advantage of Solr&apos;s leading wildcard support (e.g. support &quot;leading&quot; regexps, too)&lt;/li&gt;
	&lt;li&gt;better compatibility with lucene, because automaton is in sync with the terms format (byte). This could lead to future optimizations like TermsEnum exposing the &apos;shared prefix&apos; of a term with the previous enumerated term.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Unfortunately, there are currently a few disadvantages with the patch, but I think we can resolve these:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The linear fuzzy terms enum, from the old code, needs to be fixed and consistent and use utf32 calculations, too.&lt;/li&gt;
	&lt;li&gt;for huge dfas (eg fuzzy) there is some cost to the conversion, around 5ms one-time cost on my machine for very long strings. perhaps we can optimize some code here, its not blowing up though.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So in my opinion, the first thing should be resolved before committing, and the second is nice-to-have and shouldn&apos;t block the improvement.&lt;/p&gt;</comment>
                    <comment id="12862880" author="mikemccand" created="Fri, 30 Apr 2010 22:32:27 +0100"  >&lt;p&gt;New patch (from Robert &amp;amp; I) &amp;#8211; I think this one is ready to commit!&lt;/p&gt;

&lt;p&gt;The rest of FuzzyQuery (eg LinearFuzzyTermsEnum) is now cutover to&lt;br/&gt;
code points (not UTF16 code units), and we&apos;ve optimized various&lt;br/&gt;
methods in the automaton package (especially det).  Performance of&lt;br/&gt;
automaton/fuzzy queries looks on par or a bit faster, compared to&lt;br/&gt;
trunk.&lt;/p&gt;</comment>
                    <comment id="12862881" author="mikemccand" created="Fri, 30 Apr 2010 22:34:24 +0100"  >&lt;p&gt;New patch (from Robert &amp;amp; I) &amp;#8211; I think this one is ready to commit!&lt;/p&gt;

&lt;p&gt;The rest of FuzzyQuery (eg LinearFuzzyTermsEnum) is now cutover to&lt;br/&gt;
code points (not UTF16 code units), and we&apos;ve optimized various&lt;br/&gt;
methods in the automaton package (especially det).  Performance of&lt;br/&gt;
automaton/fuzzy queries looks on par or a bit faster, compared to&lt;br/&gt;
trunk.&lt;/p&gt;</comment>
                    <comment id="12863134" author="mikemccand" created="Sun, 2 May 2010 14:38:15 +0100"  >&lt;p&gt;Latest patch (from Robert!) &amp;#8211; strengthens tests, fixes one but in how common suffix was created for AutomatonTermsEnum, cleanup.&lt;/p&gt;</comment>
                    <comment id="12863205" author="rcmuir" created="Sun, 2 May 2010 23:14:10 +0100"  >&lt;p&gt;I think we are good to go here... we should look at getting this in soon, as it will then allow us to cutover to UTF-8 sort order.&lt;/p&gt;</comment>
                    <comment id="12863695" author="thetaphi" created="Tue, 4 May 2010 07:41:26 +0100"  >&lt;p&gt;The Generics-Police and Java-5-Police fixed compilation errors/warnings in revision 940743.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                                <inwardlinks description="is depended upon by">
                            <issuelink>
            <issuekey id="12463515">LUCENE-2426</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12440744" name="LUCENE-2265_pare.patch" size="12245" author="rcmuir" created="Mon, 5 Apr 2010 13:07:14 +0100" />
                    <attachment id="12443407" name="LUCENE-2265.patch" size="209488" author="mikemccand" created="Sun, 2 May 2010 14:38:15 +0100" />
                    <attachment id="12443328" name="LUCENE-2265.patch" size="199123" author="mikemccand" created="Fri, 30 Apr 2010 22:34:24 +0100" />
                    <attachment id="12443327" name="LUCENE-2265.patch" size="199123" author="mikemccand" created="Fri, 30 Apr 2010 22:32:27 +0100" />
                    <attachment id="12442683" name="LUCENE-2265.patch" size="92616" author="mikemccand" created="Fri, 23 Apr 2010 16:35:18 +0100" />
                    <attachment id="12442673" name="LUCENE-2265.patch" size="92559" author="mikemccand" created="Fri, 23 Apr 2010 14:09:54 +0100" />
                    <attachment id="12440865" name="LUCENE-2265.patch" size="91274" author="mikemccand" created="Tue, 6 Apr 2010 10:25:11 +0100" />
                    <attachment id="12440835" name="LUCENE-2265.patch" size="91454" author="rcmuir" created="Tue, 6 Apr 2010 05:31:05 +0100" />
                    <attachment id="12440832" name="LUCENE-2265.patch" size="74306" author="rcmuir" created="Tue, 6 Apr 2010 03:54:35 +0100" />
                    <attachment id="12440798" name="LUCENE-2265.patch" size="28062" author="mikemccand" created="Mon, 5 Apr 2010 22:57:54 +0100" />
                    <attachment id="12440787" name="LUCENE-2265.patch" size="27012" author="mikemccand" created="Mon, 5 Apr 2010 20:46:50 +0100" />
                    <attachment id="12435822" name="LUCENE-2265.patch" size="5662" author="rcmuir" created="Sun, 14 Feb 2010 14:49:51 +0000" />
                    <attachment id="12440795" name="LUCENE-2265_utf32.patch" size="28046" author="rcmuir" created="Mon, 5 Apr 2010 22:43:54 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 2 Apr 2010 23:25:49 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11524</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25460</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>