<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:28:07 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1188/LUCENE-1188.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1188] equals and hashCode implementation in org.apache.lucene.search.* package</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1188</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I would like to talk about the implementation of equals and hashCode method  in org.apache.lucene.search.* package. &lt;/p&gt;

&lt;p&gt;Example One:&lt;/p&gt;

&lt;p&gt;org.apache.lucene.search.spans.SpanTermQuery (Super Class)&lt;br/&gt;
	&amp;lt;- org.apache.lucene.search.payloads.BoostingTermQuery (Sub Class)&lt;/p&gt;

&lt;p&gt;Observation:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;BoostingTermQuery defines equals but inherits hashCode from SpanTermQuery. Definition of equals is a code clone of SpanTermQuery with a change in class name.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Intention:&lt;/p&gt;

&lt;p&gt;I believe the intention of equals redefinition in BoostingTermQuery is not to make the objects of SpanTermQuery and BoostingTermQuery comparable. ie. spanTermQuery.equals(boostingTermQuery) == false &amp;amp;&amp;amp; boostingTermQuery.equals(spanTermQuery) == false.&lt;/p&gt;


&lt;p&gt;Problem:&lt;/p&gt;

&lt;p&gt;With current implementation, the intention might not be respected as a result of symmetric property violation of equals contract i.e.&lt;br/&gt;
spanTermQuery.equals(boostingTermQuery) == true (can be) &amp;amp;&amp;amp; boostingTermQuery.equals(spanTermQuery) == false. (always)&lt;br/&gt;
(Note: Provided their state variables are equal)&lt;/p&gt;

&lt;p&gt;Solution:&lt;/p&gt;

&lt;p&gt;Change implementation of equals in SpanTermQuery from:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;SpanTermQuery.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SpanTermQuery))
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    SpanTermQuery other = (SpanTermQuery)o;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getBoost() == other.getBoost())
      &amp;amp;&amp;amp; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.term.equals(other.term);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;SpanTermQuery.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
  	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(o == &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
  	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(o == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || o.getClass() != &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass()) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;code-comment&quot;&gt;//    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; SpanTermQuery))
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;/span&gt;    SpanTermQuery other = (SpanTermQuery)o;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getBoost() == other.getBoost())
      &amp;amp;&amp;amp; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.term.equals(other.term);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Advantage:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;BoostingTermQuery.equals and BoostingTermQuery.hashCode is not needed while still preserving the same intention as before.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Any further subclassing that does not add new state variables in the extended classes of SpanTermQuery, does not have to redefine equals and hashCode.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Even if a new state variable is added in a subclass, the symmetric property of equals contract will still be respected irrespective of implementation (i.e. instanceof / getClass) of equals and hashCode in the subclasses.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Example Two:&lt;/p&gt;


&lt;p&gt;org.apache.lucene.search.CachingWrapperFilter (Super Class)&lt;br/&gt;
	&amp;lt;- org.apache.lucene.search.CachingWrapperFilterHelper (Sub Class)&lt;/p&gt;

&lt;p&gt;Observation:&lt;br/&gt;
Same as Example One.&lt;/p&gt;

&lt;p&gt;Problem:&lt;br/&gt;
Same as Example one.&lt;/p&gt;

&lt;p&gt;Solution:&lt;br/&gt;
Change equals in CachingWrapperFilter from:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;CachingWrapperFilter.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; CachingWrapperFilter)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.filter.equals(((CachingWrapperFilter)o).filter);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;CachingWrapperFilter.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
&lt;span class=&quot;code-comment&quot;&gt;//    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; CachingWrapperFilter)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(o == &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(o == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || o.getClass() != &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass()) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.filter.equals(((CachingWrapperFilter)o).filter);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Advantage:&lt;br/&gt;
Same as Example One. Here, CachingWrapperFilterHelper.equals and CachingWrapperFilterHelper.hashCode is not needed.&lt;/p&gt;


&lt;p&gt;Example Three:&lt;/p&gt;

&lt;p&gt;org.apache.lucene.search.MultiTermQuery (Abstract Parent)&lt;br/&gt;
	&amp;lt;- org.apache.lucene.search.FuzzyQuery (Concrete Sub)&lt;br/&gt;
	&amp;lt;- org.apache.lucene.search.WildcardQuery (Concrete Sub)&lt;/p&gt;

&lt;p&gt;Observation (Not a problem):&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;WildcardQuery defines equals but inherits hashCode from MultiTermQuery.&lt;br/&gt;
Definition of equals contains just super.equals invocation. &lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;FuzzyQuery has few state variables added that are referenced in its equals and hashCode.&lt;br/&gt;
Intention:&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I believe the intention here is not to make objects of FuzzyQuery and WildcardQuery comparable. ie. fuzzyQuery.equals(wildCardQuery) == false &amp;amp;&amp;amp; wildCardQuery.equals(fuzzyQuery) == false.&lt;/p&gt;

&lt;p&gt;Proposed Implementation:&lt;br/&gt;
How about changing the implementation of equals in MultiTermQuery from:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;MultiTermQuery.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; MultiTermQuery)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MultiTermQuery multiTermQuery = (MultiTermQuery) o;

      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!term.equals(multiTermQuery.term)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getBoost() == multiTermQuery.getBoost();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;MultiTermQuery.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; == o) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!(o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; MultiTermQuery)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(o == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || o.getClass() != &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass()) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; MultiTermQuery multiTermQuery = (MultiTermQuery) o;

      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!term.equals(multiTermQuery.term)) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;

      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getBoost() == multiTermQuery.getBoost();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Advantage:&lt;/p&gt;

&lt;p&gt;Same as above. Here, WildcardQuery.equals is not needed as it does not define any new state. (FuzzyQuery.equals is still needed because FuzzyQuery defines new state.) &lt;/p&gt;</description>
                <environment>&lt;p&gt;All&lt;/p&gt;</environment>
            <key id="12389436">LUCENE-1188</key>
            <summary>equals and hashCode implementation in org.apache.lucene.search.* package</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="chandanrrk">Chandan Raj Rupakheti</reporter>
                        <labels>
                    </labels>
                <created>Sun, 24 Feb 2008 22:17:30 +0000</created>
                <updated>Fri, 10 May 2013 11:42:56 +0100</updated>
                    <resolved>Tue, 25 Jan 2011 16:31:41 +0000</resolved>
                            <version>2.2</version>
                <version>2.3</version>
                <version>2.3.1</version>
                                <fixVersion>2.9</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                          <timeoriginalestimate seconds="1800">0.5h</timeoriginalestimate>
                    <timeestimate seconds="1800">0.5h</timeestimate>
                                  <comments>
                    <comment id="12572091" author="chandanrrk" created="Mon, 25 Feb 2008 14:26:01 +0000"  >&lt;p&gt;Updated the advantage of the proposed solution to make it more clear.&lt;/p&gt;</comment>
                    <comment id="12986503" author="thetaphi" created="Tue, 25 Jan 2011 16:31:41 +0000"  >&lt;p&gt;The equals and hashCode implementations in Query subclasses were already fixed to use getClass() and not instanceof in 2.9 by various other issues. Also the boost comparison was mostly removed by calling super.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>0.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 25 Jan 2011 16:31:41 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12557</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26541</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>