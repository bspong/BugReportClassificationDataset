<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:36 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3726/LUCENE-3726.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3726] Default KuromojiAnalyzer to use search mode</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3726</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Kuromoji supports an option to segment text in a way more suitable for search,&lt;br/&gt;
by preventing long compound nouns as indexing terms.&lt;/p&gt;

&lt;p&gt;In general &apos;how you segment&apos; can be important depending on the application &lt;br/&gt;
(see &lt;a href=&quot;http://nlp.stanford.edu/pubs/acl-wmt08-cws.pdf&quot; class=&quot;external-link&quot;&gt;http://nlp.stanford.edu/pubs/acl-wmt08-cws.pdf&lt;/a&gt; for some studies on this in chinese)&lt;/p&gt;

&lt;p&gt;The current algorithm punishes the cost based on some parameters (SEARCH_MODE_PENALTY, SEARCH_MODE_LENGTH, etc)&lt;br/&gt;
for long runs of kanji.&lt;/p&gt;

&lt;p&gt;Some questions (these can be separate future issues if any useful ideas come out):&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;should these parameters continue to be static-final, or configurable?&lt;/li&gt;
	&lt;li&gt;should POS also play a role in the algorithm (can/should we refine exactly what we decompound)?&lt;/li&gt;
	&lt;li&gt;is the Tokenizer the best place to do this, or should we do it in a tokenfilter? or both?&lt;br/&gt;
  with a tokenfilter, one idea would be to also preserve the original indexing term, overlapping it: e.g. ABCD -&amp;gt; AB, CD, ABCD(posInc=0)&lt;br/&gt;
  from my understanding this tends to help with noun compounds in other languages, because IDF of the original term boosts &apos;exact&apos; compound matches.&lt;br/&gt;
  but does a tokenfilter provide the segmenter enough &apos;context&apos; to do this properly?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Either way, I think as a start we should turn on what we have by default: its likely a very easy win.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12539992">LUCENE-3726</key>
            <summary>Default KuromojiAnalyzer to use search mode</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 Jan 2012 03:47:31 +0000</created>
                <updated>Fri, 10 May 2013 11:44:34 +0100</updated>
                    <resolved>Sun, 5 Feb 2012 12:44:53 +0000</resolved>
                            <version>3.6</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>3.6</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="13194509" author="cm" created="Fri, 27 Jan 2012 06:11:40 +0000"  >&lt;p&gt;These are very interesting questions, Robert.  Please find my comments below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;should these parameters continue to be static-final, or configurable?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s perhaps possible to make these configurable, but I think we&apos;d be exposing configuration that is most likely to confuse most users rather than help them.&lt;/p&gt;

&lt;p&gt;The values currently uses have been found using some analysis and experimentation, and they can probably be improved both in terms of tuning and with added heuristics &amp;#8211; in particular for katakana compounds (more below).&lt;/p&gt;

&lt;p&gt;However, changing and improving this requires quite detailed analysis and testing, though.  I think the major case for exposing them is as a means for easily tuning them rather than these parameters being generally useful to users.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;should POS also play a role in the algorithm (can/should we refine exactly what we decompound)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Very good question and an interesting idea.&lt;/p&gt;

&lt;p&gt;In the case of long kanji words such as &#38306;&#35199;&#22269;&#38555;&#31354;&#28207; (Kansai International Airport), which is a known noun, we can possible use POS info as a hint for applying the Viterbi penalty.  In the case of unknown kanji, Kuromoji unigrams them.  (&#38306;&#35199;&#22269;&#38555;&#31354;&#28207; becomes &#38306;&#35199;  &#22269;&#38555;  &#31354;&#28207; (Kansai International Airport) using search mode.)&lt;/p&gt;

&lt;p&gt;Katakana compounds such as &#12471;&#12491;&#12450;&#12477;&#12501;&#12488;&#12454;&#12455;&#12450;&#12456;&#12531;&#12472;&#12491;&#12450; (senior software engineer) becomes one token without search mode, but when search mode is used, we get three tokens &#12471;&#12491;&#12450;  &#12477;&#12501;&#12488;&#12454;&#12455;&#12450;  &#12456;&#12531;&#12472;&#12491;&#12450; as you would expect.  It&apos;s also the case that &#12471;&#12491;&#12450;&#12477;&#12501;&#12488;&#12454;&#12455;&#12450;&#12456;&#12531;&#12472;&#12491;&#12450; is an unknown word, but its constituents become known and get the correct POS after search mode. &lt;/p&gt;

&lt;p&gt;In general, unknown words get a noun-POS (&#21517;&#35422;) so the idea of using POS here should be fine.&lt;/p&gt;

&lt;p&gt;There are some problems with the katakana decompounding in search mode.  For example, &#12467;&#12491;&#12459;&#12511;&#12494;&#12523;&#12479;&#12507;&#12540;&#12523;&#12487;&#12451;&#12531;&#12464;&#12473; (Konika Minolta Holdings) becomes &#12467;&#12491;&#12459;  &#12511;&#12494;&#12523;&#12479;  &#12507;&#12540;&#12523;  &#12487;&#12451;&#12531;&#12464;&#12473;  (Konika Minolta horu dings), where we get the additional token &#12507;&#12540;&#12523; (also means hall, in Japanese).&lt;/p&gt;

&lt;p&gt;To sum up, I think we can potentially use the noun-POS as a hint when doing the decompounding in search mode, but I&apos;m not sure how much we will benefit from it, but I like the idea.  I think we&apos;ll benefit most from an improved heuristic for non-kanji to improve katakana decompounding.&lt;/p&gt;

&lt;p&gt;Let me have a tinker and see how I can improve this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;is the Tokenizer the best place to do this, or should we do it in a tokenfilter? or both?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Interesting idea and good point regarding IDF.&lt;/p&gt;

&lt;p&gt;In order do the decompoundning, we&apos;ll need access to the lattice and add entries to it before we run the Viterbi.  If we do normal segmentation first then run a decompounding filter, I think we&apos;ll need to run the Viterbi twice in order to get the desired results.  (Optimizations are possible, though.)&lt;/p&gt;

&lt;p&gt;I&apos;m thinking a possibility could be to expose possible decompounds as part of Kuromoji&apos;s Token interface.  We can potentially have something like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;&quot;&gt;&lt;b&gt;Token.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

/**
 * Returns a list of possible decompounds &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; token found by a heuristic
 * 
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; a list of candidate decompounds or &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; of none is found
 */
List&amp;lt;Token&amp;gt; getDecompounds() {
  &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the case of &#12471;&#12491;&#12450;&#12477;&#12501;&#12488;&#12454;&#12455;&#12450;&#12456;&#12531;&#12472;&#12491;&#12450;, the current token would have surface form &#12471;&#12491;&#12450;&#12477;&#12501;&#12488;&#12454;&#12455;&#12450;&#12456;&#12531;&#12472;&#12491;&#12450;, but with tokens &#12471;&#12491;&#12450;, &#12477;&#12501;&#12488;&#12454;&#12455;&#12450; and &#12456;&#12531;&#12472;&#12491;&#12450; accessible using &lt;tt&gt;getDecompounds()&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;As a general notice, I should point our that how well the heuristics performs depends on the dictionary/statistical model used (i.e. IPADIC) and if we might want to make different heuristics for each of those we support as needed.&lt;/p&gt;</comment>
                    <comment id="13194623" author="rcmuir" created="Fri, 27 Jan 2012 12:21:49 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;m thinking a possibility could be to expose possible decompounds as part of Kuromoji&apos;s Token interface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this idea: I think it would give the most flexibility, we would populate some attribute from &lt;br/&gt;
Token just like we do today for other attributes, and then actual indexing of compounds can be &lt;br/&gt;
controlled with a configurable tokenfilter.&lt;/p&gt;

&lt;p&gt;Long term, this lets the tokenizer stay a tokenizer and prevents it from growing too complex.&lt;/p&gt;</comment>
                    <comment id="13194971" author="cm" created="Fri, 27 Jan 2012 18:17:08 +0000"  >&lt;p&gt;Thanks for the feedback.&lt;/p&gt;

&lt;p&gt;I&apos;m working on tuning the heuristics to improve accuracy of katakana segmentation in search mode.&lt;/p&gt;

&lt;p&gt;I&apos;ll keep you posted on results and a patch.  Unit tests will document the cases.&lt;/p&gt;</comment>
                    <comment id="13195932" author="cm" created="Mon, 30 Jan 2012 04:42:18 +0000"  >&lt;p&gt;I&apos;ve improved the heuristic and submitted a patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3730&quot; title=&quot;Improved Kuromoji search mode segmentation/decompounding&quot;&gt;&lt;del&gt;LUCENE-3730&lt;/del&gt;&lt;/a&gt;, which covers the issue.&lt;/p&gt;

&lt;p&gt;We can now deal with cases such as &#12467;&#12491;&#12459;&#12511;&#12494;&#12523;&#12479;&#12507;&#12540;&#12523;&#12487;&#12451;&#12531;&#12464;&#12473; and many others just fine.  The former becomes &#12467;&#12491;&#12459;  &#12511;&#12494;&#12523;&#12479;  &#12507;&#12540;&#12523;&#12487;&#12451;&#12531;&#12464;&#12473; as we&apos;d like.&lt;/p&gt;

&lt;p&gt;I think we should apply &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3730&quot; title=&quot;Improved Kuromoji search mode segmentation/decompounding&quot;&gt;&lt;del&gt;LUCENE-3730&lt;/del&gt;&lt;/a&gt; before changing any defaults &amp;#8211; and also independently of changing any defaults.  I think we should also make sure that the default we use for Lucene is consistent with the Solr&apos;s default in &lt;tt&gt;schema.xml&lt;/tt&gt; for &lt;tt&gt;text_ja&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;ll do additional tests on a Japanese corpus and provide feedback, and we can use this as a basis for how to follow up.  Hopefully, we&apos;ll have sufficient and good data to conclude on this.&lt;/p&gt;</comment>
                    <comment id="13197730" author="cm" created="Wed, 1 Feb 2012 10:08:15 +0000"  >&lt;p&gt;I&apos;ve segmented some Japanese Wikipedia text into sentences (using a naive sentence segmenter) and then segmented each sentence using both normal and search mode with the Kuromoji on Github that has &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3730&quot; title=&quot;Improved Kuromoji search mode segmentation/decompounding&quot;&gt;&lt;del&gt;LUCENE-3730&lt;/del&gt;&lt;/a&gt; applied.  Segmentation with Kuromoji in Lucene should be similar overall (modulo some differences in punctuation handling).&lt;/p&gt;

&lt;p&gt;Search mode and normal mode segmentation match completely in 90.7% of the sentences segmented and there&apos;s a 99.6% match at the token level (when counting normal mode tokens).&lt;/p&gt;

&lt;p&gt;Find attached some HTML files with a total of 10,000 sentences that demonstrates the differences in segmentation.&lt;/p&gt;

&lt;p&gt;Overall, I think search mode does a decent job.  I&apos;ve written someone else doing Japanese NLP to get their second opinion, in particular if the kanji splitting should be made somewhat less eager to split three letter words.&lt;/p&gt;</comment>
                    <comment id="13200654" author="cm" created="Sun, 5 Feb 2012 05:08:53 +0000"  >&lt;p&gt;The latest attached patch introduces a default mode in &lt;tt&gt;Segmenter&lt;/tt&gt;, which is now &lt;tt&gt;Mode.SEARCH&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;This mode is used by &lt;tt&gt;KuromojiAnalyzer&lt;/tt&gt; in Lucene without further code changes.  The Solr factory duplicated the default mode, but now retrieves it from &lt;tt&gt;Segmenter&lt;/tt&gt;.  This way, we set the default mode for both Solr and Lucene in a single place (in &lt;tt&gt;Segmenter&lt;/tt&gt;), which I find cleaner.&lt;/p&gt;

&lt;p&gt;I&apos;ve also moved some constructors around in &lt;tt&gt;Segmenter&lt;/tt&gt; and did some minor formatting/style changes.&lt;/p&gt;</comment>
                    <comment id="13200740" author="rcmuir" created="Sun, 5 Feb 2012 12:44:53 +0000"  >&lt;p&gt;Thanks Christian: I committed this.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12512738" name="kuromojieval.tar.gz" size="2103218" author="cm" created="Wed, 1 Feb 2012 09:33:35 +0000" />
                    <attachment id="12513280" name="LUCENE-3726.patch" size="3844" author="cm" created="Sun, 5 Feb 2012 05:03:25 +0000" />
                    <attachment id="12513279" name="LUCENE-3726.patch" size="3268" author="cm" created="Sun, 5 Feb 2012 04:22:40 +0000" />
                    <attachment id="12513278" name="LUCENE-3726.patch" size="2508" author="cm" created="Sun, 5 Feb 2012 04:02:51 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 27 Jan 2012 06:11:40 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>225496</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23972</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>