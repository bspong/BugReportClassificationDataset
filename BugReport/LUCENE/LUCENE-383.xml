<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:51 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-383/LUCENE-383.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-383] ConstantScoreRangeQuery - fixes &quot;too many clauses&quot; exception</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-383</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;ConstantScoreQuery wraps a filter (representing a set of documents) and returns&lt;br/&gt;
a constant score for each document in the set.&lt;/p&gt;

&lt;p&gt;ConstantScoreRangeQuery implements a RangeQuery that works for any number of&lt;br/&gt;
terms in the range.  It rewrites to a ConstantScoreQuery that wraps a RangeFilter.&lt;/p&gt;

&lt;p&gt;Still needed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unit tests (these classes have been tested and work fine in-house, but the&lt;br/&gt;
current tests rely on too much application specific code)&lt;/li&gt;
	&lt;li&gt;code review of Weight() implementation (I&apos;m unsure If I got all the score&lt;br/&gt;
normalization stuff right)&lt;/li&gt;
	&lt;li&gt;explain() implementation&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;NOTE: requires Java 1.4 for BitSet.nextSetBit()&lt;/p&gt;</description>
                <environment>&lt;p&gt;Operating System: other&lt;br/&gt;
Platform: Other&lt;/p&gt;</environment>
            <key id="12314533">LUCENE-383</key>
            <summary>ConstantScoreRangeQuery - fixes &quot;too many clauses&quot; exception</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Apr 2005 14:11:55 +0100</created>
                <updated>Sat, 27 May 2006 02:33:00 +0100</updated>
                    <resolved>Wed, 10 May 2006 03:17:03 +0100</resolved>
                            <version>1.4</version>
                                <fixVersion>1.9</fixVersion>
                <fixVersion>2.0.0</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>5</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12322351" author="yseeley@gmail.com" created="Fri, 29 Apr 2005 14:14:40 +0100"  >&lt;p&gt;Created an attachment (id=14877)&lt;br/&gt;
ConstantScoreQuery&lt;/p&gt;</comment>
                    <comment id="12322352" author="yseeley@gmail.com" created="Fri, 29 Apr 2005 14:15:04 +0100"  >&lt;p&gt;Created an attachment (id=14878)&lt;br/&gt;
ConstantScoreRangeQuery&lt;/p&gt;</comment>
                    <comment id="12322353" author="paul.elschot@xs4all.nl" created="Mon, 2 May 2005 04:48:33 +0100"  >&lt;p&gt;The ConstantScoreQuery requires java 1.4 for its skipTo() implementation, &lt;br/&gt;
so this will have to wait until java 1.4 is a minimum requirement for &lt;br/&gt;
Lucene. &lt;br/&gt;
Some time ago there was a bit of discussion on mixed boolean and &lt;br/&gt;
scored queries, and I think the ConstantScoreQuery is a wellcome &lt;br/&gt;
addition for such mixed queries. &lt;br/&gt;
One problem with the current score is that it is not really bound &lt;br/&gt;
to a maximum, so it is difficult to choose a good constant score &lt;br/&gt;
value in a mix. &lt;br/&gt;
Perhaps that aspect of scoring should be tackled in the future. &lt;/p&gt;

&lt;p&gt;Regards, &lt;br/&gt;
Paul Elschot &lt;/p&gt;
</comment>
                    <comment id="12329580" author="yseeley@gmail.com" created="Sat, 17 Sep 2005 07:11:01 +0100"  >&lt;p&gt;Refresh:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;implemented explain()&lt;/li&gt;
	&lt;li&gt;changed scoring so that score is simply the boost&lt;/li&gt;
	&lt;li&gt;fixed bug in scoring (weight normalization)&lt;/li&gt;
	&lt;li&gt;fixed bug where boost was not copied during rewrite&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12330537" author="yseeley@gmail.com" created="Tue, 27 Sep 2005 12:59:23 +0100"  >&lt;p&gt;&amp;gt; One problem with the current score is that it is not really bound&lt;br/&gt;
&amp;gt; to a maximum, so it is difficult to choose a good constant score&lt;br/&gt;
&amp;gt; value in a mix. &lt;/p&gt;

&lt;p&gt;tf() and lengthNorm() factors will vary by index, but I think idf() may be the most problematic since it can change over time as the index grows.&lt;/p&gt;

&lt;p&gt;Would it be better to add something like an idf(1,maxDocs()) factor?&lt;/p&gt;</comment>
                    <comment id="12330549" author="paul.elschot@xs4all.nl" created="Tue, 27 Sep 2005 17:18:29 +0100"  >&lt;p&gt;Since the constant score is taken from the query boost, idf issues&lt;br/&gt;
can be dealt with elsewhere. IOW I don&apos;t think there is a need to&lt;br/&gt;
deal with idf here.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12356014" author="cutting" created="Thu, 27 Oct 2005 07:23:21 +0100"  >&lt;p&gt;I like this patch.  It would be nice to have a unit test, and we need to agree that Lucene 1.9 will require java 1.4 (which seems reasonable to me) before we commit it.&lt;/p&gt;

&lt;p&gt;Once this is committed, should we consider changing the query parser to use ConstantScoreRangeQuery for range queries?  That alone would probably solve the majority of too-many-clauses problems.&lt;/p&gt;</comment>
                    <comment id="12356018" author="yseeley@gmail.com" created="Thu, 27 Oct 2005 07:49:32 +0100"  >&lt;p&gt;The functionality is definitely needed, I&apos;m just not sure of the API yet.&lt;br/&gt;
I also have a ConstantScorePrefixQuery/PrefixFilter that just needs to be cleaned up a bit before it can be contributed.&lt;/p&gt;

&lt;p&gt;Doug, you had brought up the possibility of having a flag on Query indicating if it was constant scoring or not... it would be simpler than reproducing Constant versions of all the query types.&lt;br/&gt;
The downside of that is the whole issue of query  immutability... if you set the constant-scoring flag on the root query, it really needs to set it on all of it&apos;s sub queries (and hence changes them).  You can easily get into trouble if a query is shared.&lt;/p&gt;

&lt;p&gt;To avoid changing queries, you would have to follow the same strategy as rewrite()... &lt;br/&gt;
You would need to clone the query object, then set constantScoring, then call rewrite (which may clone it again).  Not the best for performance...&lt;/p&gt;

&lt;p&gt;One solution is to communicate the fact that we want a constant scoring query in the rewrite method itself:  rewrite(Query query, int flags)&lt;/p&gt;
</comment>
                    <comment id="12356021" author="lucenebugs@danielnaber.de" created="Thu, 27 Oct 2005 08:27:15 +0100"  >&lt;p&gt;Doug: actually we agreed to require Java 1.4 some time ago already. You can find that dicussion somewhere in the mail archives.&lt;/p&gt;</comment>
                    <comment id="12356105" author="hossman" created="Fri, 28 Oct 2005 02:41:18 +0100"  >&lt;p&gt;I hadn&apos;t heard about Doug&apos;s plans that Yonik refered to (to revamp all Query classes to support a constant score option) so forgive me if this is way off the mark:&lt;/p&gt;

&lt;p&gt;If Doug&apos;s plan is fairly solid and just needs to be cranked out, then by all means it might make sense to go that route intstead of having seperate ConstantScoreRange and ConstantScorePrefix queries ... but if that plan is still very hypotheitcal, then perhaps the best course of action would be to commit Yonik&apos;s existing code into the contrib section.  &lt;/p&gt;

&lt;p&gt;Nothing here requires any changes to the core codebase, and as of 1.9 the contrib code will start being reved/released on teh same schedule as the core correct? ... so there&apos;s really no downside to putting it in contrib.  If the other idea falls through, then this code could be &quot;promoted&quot; from contrib to the core (and perhaps then QueryParser could be changed to use it by default).  If the other plan does get implimented, then these classes can be deprecated in favor of the new ones (and their new API)&lt;/p&gt;</comment>
                    <comment id="12356118" author="yseeley@gmail.com" created="Fri, 28 Oct 2005 04:05:27 +0100"  >&lt;p&gt;Doug&apos;s suggestion is here:&lt;br/&gt;
&lt;a href=&quot;http://www.mail-archive.com/java-dev@lucene.apache.org/msg00532.html&quot; class=&quot;external-link&quot;&gt;http://www.mail-archive.com/java-dev@lucene.apache.org/msg00532.html&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12356221" author="cutting" created="Sat, 29 Oct 2005 02:53:39 +0100"  >&lt;p&gt;Yonik: I&apos;d forgotten about that suggestion, thanks for remembering it!&lt;/p&gt;

&lt;p&gt;Hoss: I think there are some nasty details still to be worked out in that suggestion, like how to cache bitvectors.  Long-term, I think it would be a better approach, but Yonik&apos;s ConstantScoreQuery stuff works well today.&lt;/p&gt;

&lt;p&gt;I think fixing common use cases, like range queries, from exploding in people&apos;s faces is a high priority.  So I would argue for changing QueryParser sooner rather than later.  If we ever implement my proposal then we can deprecate these classes.  The majority of folks just use QueryParser, and they won&apos;t know the difference.&lt;/p&gt;</comment>
                    <comment id="12357469" author="hossman" created="Sat, 12 Nov 2005 11:27:11 +0000"  >&lt;p&gt;a Unit test for ConstantScoreRangeQuery ... that was easy to crank out based on the existing BaseTestRangeFilter.&lt;/p&gt;

&lt;p&gt;One catch is that the test currently fails: when i tried to prove that the scores were not only constant, but also equaled the boost I couldn&apos;t get it to work &amp;#8211; perhaps I have a missunderstanding of how HItCollector works, but I thought that was the safest way to get a &quot;raw&quot; score.&lt;/p&gt;</comment>
                    <comment id="12357473" author="yseeley@gmail.com" created="Sat, 12 Nov 2005 11:48:54 +0000"  >&lt;p&gt;Cool, thanks for the tests!&lt;/p&gt;

&lt;p&gt;You are getting the raw score from the HitCollector all right.  The internal score is equal to the boost, but there is also a query normalization factor that&apos;s applied...&lt;/p&gt;

&lt;p&gt;Query.weight() calls Weight.sumOfSquaredWeights() which returns boost*boost.&lt;br/&gt;
Then it calls Similarity.queryNorm(boost*boost) which returns 1/boost&lt;br/&gt;
Then it calls Weight.normalize(1/boost), and I multiply 1/boost by boost and get 1.0&lt;/p&gt;

</comment>
                    <comment id="12357666" author="yseeley@gmail.com" created="Tue, 15 Nov 2005 14:36:23 +0000"  >&lt;p&gt;I have committed these classes.&lt;br/&gt;
Unless I hear objections, I&apos;ll change the QueryParser to use ConstantScoreRangeQuery, &lt;br/&gt;
and allow the specification of open-ended ranges using &quot;*&quot;.&lt;/p&gt;</comment>
                    <comment id="12373843" author="nyh" created="Mon, 10 Apr 2006 20:49:49 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;It appears that ConstantScoreRangeQuery is already in the trunk.&lt;br/&gt;
However, QueryParser still uses RangeQuery, not ConstantScoreRangeQuery.&lt;/p&gt;

&lt;p&gt;Should this issue be closed? Or are you still intending to change QueryParser to use the new class?&lt;/p&gt;</comment>
                    <comment id="12374301" author="hossman" created="Thu, 13 Apr 2006 14:45:52 +0100"  >&lt;p&gt;I believe (but i&apos;m not certain) that i remember a discusion on java-dev a while back regarding this and that there was some concensus not to make the QueryParser change until 2.0 so as not to affect the scores of existing searches.&lt;/p&gt;

&lt;p&gt;i could be completely wrong&lt;/p&gt;</comment>
                    <comment id="12378699" author="cutting" created="Wed, 10 May 2006 03:17:03 +0100"  >&lt;p&gt;This has been fixed.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12312603" name="ASF.LICENSE.NOT.GRANTED--ConstantScoreQuery.java" size="4589" author="yseeley@gmail.com" created="Fri, 29 Apr 2005 14:14:40 +0100" />
                    <attachment id="12312604" name="ASF.LICENSE.NOT.GRANTED--ConstantScoreRangeQuery.java" size="6107" author="yseeley@gmail.com" created="Fri, 29 Apr 2005 14:15:04 +0100" />
                    <attachment id="12314414" name="ConstantScoreQuery.java" size="4735" author="yseeley@gmail.com" created="Sat, 17 Sep 2005 07:11:01 +0100" />
                    <attachment id="12314413" name="ConstantScoreRangeQuery.java" size="5607" author="yseeley@gmail.com" created="Sat, 17 Sep 2005 07:11:01 +0100" />
                    <attachment id="12320654" name="TestConstantScoreRangeQuery.java" size="10772" author="hossman" created="Sat, 12 Nov 2005 11:27:11 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_10010" key="com.atlassian.jira.plugin.system.customfieldtypes:importid">
                <customfieldname>Bugzilla Id</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>34673</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 2 May 2005 03:48:33 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13366</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27348</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>