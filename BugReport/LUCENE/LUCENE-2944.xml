<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:17 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2944/LUCENE-2944.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2944] BytesRef reuse bugs in QueryParser and analysis.jsp</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2944</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Some code uses BytesRef as if it were a &quot;String&quot;, in this case consumers of TermToBytesRefAttribute.&lt;br/&gt;
The thing is, while our general implementation works on char[] and then populates the consumers BytesRef,&lt;br/&gt;
not all TermToBytesRefAttribute implementations do this, specifically ICU collation, it reuses the bytes and simply sets the pointers:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  @Override
  public int toBytesRef(BytesRef target) {
    collator.getRawCollationKey(toString(), key);
    target.bytes = key.bytes;
    target.offset = 0;
    target.length = key.size;
    return target.hashCode();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Most of the blame falls on me as I added this to the queryparser in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2514&quot; title=&quot;Change Term to use bytes&quot;&gt;&lt;del&gt;LUCENE-2514&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Attached is a patch so that these consumers re-use a &apos;spare&apos; and copy the bytes when they are going to make a long lasting object such as a Term.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12500056">LUCENE-2944</key>
            <summary>BytesRef reuse bugs in QueryParser and analysis.jsp</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Mar 2011 14:51:49 +0000</created>
                <updated>Fri, 10 May 2013 11:43:09 +0100</updated>
                    <resolved>Mon, 21 Mar 2011 13:52:47 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13000903" author="rcmuir" created="Tue, 1 Mar 2011 15:07:09 +0000"  >&lt;p&gt;I reviewed all uses of this attribute, and fixed some more problems in contrib and solr.&lt;/p&gt;

&lt;p&gt;So in my opinion there are two options:&lt;br/&gt;
1. apply this patch and fix the javadoc for this expert attribute, which does say that it makes a copy of the bytes.&lt;br/&gt;
2. Don&apos;t apply this patch, but instead change Test2BTerms and ICUCollationAttribute to make (useless) copies of the bytes for each term.&lt;/p&gt;

&lt;p&gt;The indexer has no problems either way, the problem is only other consumers. I&apos;m just bringing up the second option because any performance improvement saved from not copying the bytes might be negligible, and clearly its easy to screw this up.&lt;/p&gt;</comment>
                    <comment id="13000913" author="simonw" created="Tue, 1 Mar 2011 15:19:12 +0000"  >&lt;p&gt;IMO this is ICUs problem here. This code should not give the key.bytes array to the outer world in this particular case unless its documented that you must not use / modify the BytesRef you pass to toBytesRef anywhere else.&lt;/p&gt;</comment>
                    <comment id="13000915" author="rcmuir" created="Tue, 1 Mar 2011 15:21:28 +0000"  >&lt;p&gt;Well its not just the ICU implementation... Test2BTerms does this too.&lt;/p&gt;

&lt;p&gt;In general the attributes are owned by the producer: for example the char[] in TermAttribute is owned by the analysis chain, if you want to do something with it, you should copy it.&lt;/p&gt;

&lt;p&gt;So it would be very strange from the analysis api to treat byte[] in the complete opposite fashion... but I&apos;m fine with making steps to prevent bugs.&lt;/p&gt;</comment>
                    <comment id="13000922" author="rcmuir" created="Tue, 1 Mar 2011 15:41:37 +0000"  >&lt;p&gt;here&apos;s the alternative patch, also adding documentation that you &lt;b&gt;must&lt;/b&gt; make a new copy of the byte[] for each term.&lt;/p&gt;</comment>
                    <comment id="13000930" author="mikemccand" created="Tue, 1 Mar 2011 16:05:38 +0000"  >&lt;p&gt;I think producer should own the BytesRef and if consumer wants to hang onto it, it should make a deep copy?  This is consistent w/ TermAttribute...&lt;/p&gt;</comment>
                    <comment id="13001272" author="rcmuir" created="Wed, 2 Mar 2011 04:24:10 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think producer should own the BytesRef and if consumer wants to hang onto it, it should make a deep copy? This is consistent w/ TermAttribute...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here&apos;s a new patch implementing it this way. I refactored TermToBytesRefAttribute into two methods, getBytesRef() and hash()... I find this less confusing, removes some wasted bytesrefs being needlessly created here and there (e.g. queryparser), and does things like allow an attribute to say, pre-size its reusable BytesRef to a huge size or other things custom attributes might want to do.  &lt;/p&gt;

&lt;p&gt;Here is the consumer code sample I added from the javadoc:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;/* 
 * Consumers of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; attribute call getBytesRef() up-front, and then
 * invoke hash() &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each term. Example:
 */
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; TermToBytesRefAttribute termAtt = tokenStream.getAttribute(TermToBytesRefAttribute.class);
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; BytesRef bytes = termAtt.getBytesRef();

&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (termAtt.incrementToken() {

  /* 
   * you must call termAtt.hash() even &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you don&apos;t need &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; hashCode.
   * &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; encodes the term value (internally it might be a &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;[], etc) into the bytes.
   */
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hashCode = termAtt.hash();

  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (isInteresting(bytes)) {
     
    /* 
     * because the bytes are reused by the attribute (like CharTermAttribute&apos;s &lt;span class=&quot;code-object&quot;&gt;char&lt;/span&gt;[] buffer),
     * you should make a copy &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you need persistent access to the bytes, otherwise they will
     * be rewritten across calls to incrementToken()
     */
    doSomethingWith(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BytesRef(bytes));
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13001273" author="rcmuir" created="Wed, 2 Mar 2011 04:26:22 +0000"  >&lt;p&gt;sorry, previous patch was missing the new javadoc i added to TermToBytesRefAttribute... here it is with the javadocs.&lt;/p&gt;</comment>
                    <comment id="13006188" author="rcmuir" created="Sun, 13 Mar 2011 12:52:32 +0000"  >&lt;p&gt;guys, any comments on the api?&lt;/p&gt;

&lt;p&gt;I am no good at naming, so...&lt;/p&gt;

&lt;p&gt;But this bug is blocking some of my stuff&lt;/p&gt;</comment>
                    <comment id="13006192" author="simonw" created="Sun, 13 Mar 2011 13:20:24 +0000"  >&lt;p&gt;I had a brief review - naming looks good from my side though...&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="13006548" author="mikemccand" created="Mon, 14 Mar 2011 18:19:59 +0000"  >&lt;p&gt;How about .fillBytesRef() (returns hash code) instead of .hash()?&lt;/p&gt;</comment>
                    <comment id="13006559" author="thetaphi" created="Mon, 14 Mar 2011 18:34:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;How about .fillBytesRef() (returns hash code) instead of .hash()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 I don&apos;t like solely hash().&lt;/p&gt;</comment>
                    <comment id="13006560" author="rcmuir" created="Mon, 14 Mar 2011 18:37:43 +0000"  >&lt;p&gt;i agree guys, here&apos;s the updated patch.&lt;/p&gt;</comment>
                    <comment id="13006650" author="mikemccand" created="Mon, 14 Mar 2011 21:39:42 +0000"  >&lt;p&gt;Patch looks good!&lt;/p&gt;</comment>
                    <comment id="13006673" author="thetaphi" created="Mon, 14 Mar 2011 22:21:46 +0000"  >&lt;p&gt;Looks fine, will do closer review tomorrow!&lt;/p&gt;</comment>
                    <comment id="13009126" author="rcmuir" created="Mon, 21 Mar 2011 13:52:47 +0000"  >&lt;p&gt;Committed revision 1083784.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12472318" name="LUCENE-2944_option2.patch" size="2191" author="rcmuir" created="Tue, 1 Mar 2011 15:41:37 +0000" />
                    <attachment id="12473598" name="LUCENE-2944.patch" size="29996" author="rcmuir" created="Mon, 14 Mar 2011 18:37:43 +0000" />
                    <attachment id="12472390" name="LUCENE-2944.patch" size="29748" author="rcmuir" created="Wed, 2 Mar 2011 04:26:22 +0000" />
                    <attachment id="12472389" name="LUCENE-2944.patch" size="28343" author="rcmuir" created="Wed, 2 Mar 2011 04:24:10 +0000" />
                    <attachment id="12472315" name="LUCENE-2944.patch" size="9259" author="rcmuir" created="Tue, 1 Mar 2011 15:07:08 +0000" />
                    <attachment id="12472314" name="LUCENE-2944.patch" size="4142" author="rcmuir" created="Tue, 1 Mar 2011 14:52:20 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 1 Mar 2011 15:19:12 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10929</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24748</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>