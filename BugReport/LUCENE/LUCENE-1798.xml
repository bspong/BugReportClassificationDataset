<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:27:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1798/LUCENE-1798.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1798] FieldCacheSanityChecker called directly by FieldCache.get*</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1798</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;As suggested by McCandless in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1749&quot; title=&quot;FieldCache introspection API&quot;&gt;&lt;del&gt;LUCENE-1749&lt;/del&gt;&lt;/a&gt;, we can make FieldCacheImpl a client of the FieldCacheSanityChecker and have it sanity check itself each time it creates a new cache entry, and log a warning if it thinks there is a problem.  (although we&apos;d probably only want to do this if the caller has set some sort of infoStream/warningStream type property on the FieldCache object.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12432713">LUCENE-1798</key>
            <summary>FieldCacheSanityChecker called directly by FieldCache.get*</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="hossman">Hoss Man</reporter>
                        <labels>
                    </labels>
                <created>Mon, 10 Aug 2009 19:37:09 +0100</created>
                <updated>Thu, 2 May 2013 03:29:21 +0100</updated>
                    <resolved>Tue, 25 Aug 2009 12:45:08 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12741480" author="hossman" created="Mon, 10 Aug 2009 19:39:43 +0100"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1749?focusedCommentId=12741479#action_12741479&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1749?focusedCommentId=12741479#action_12741479&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FieldCacheImpl.Cache.get could use the FieldCacheSanityChecker to inspect itself immediately after calling createValue, and could even test if any of the Insanity instances returned are related to the current call (by comparing the CacheEntry with the Entry it&apos;s using) ... it could even log a useful stack trace since the sanity check would be happening in the same call stack as at least one of the CacheEntries in the Insanity object.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                    <comment id="12746614" author="mikemccand" created="Sun, 23 Aug 2009 16:00:31 +0100"  >&lt;p&gt;Attached patch.  I added get/setInfoStream to FieldCache, then, in FieldCacheImpl.Cache.get, if we hit a cache miss and infoStream is enabled, I gather the Insanity[] before  the cache entry is added and after, then print out any change involving the entry just added.  It produces this output to the infoStream:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;    [junit] WARNING: new FieldCache insanity created
    [junit] Details: VALUEMISMATCH: Multiple distinct value objects for org.apache.lucene.index.DirectoryReader@da3a1e+theDouble
    [junit] 	&apos;org.apache.lucene.index.DirectoryReader@da3a1e&apos;=&amp;gt;&apos;theDouble&apos;,float,org.apache.lucene.search.FieldCache.DEFAULT_FLOAT_PARSER=&amp;gt;[F#7896426 (size =~ 3.9 KB)
    [junit] 	&apos;org.apache.lucene.index.DirectoryReader@da3a1e&apos;=&amp;gt;&apos;theDouble&apos;,double,org.apache.lucene.search.FieldCache.DEFAULT_DOUBLE_PARSER=&amp;gt;[D#5503831 (size =~ 7.8 KB)
    [junit] 	&apos;org.apache.lucene.index.DirectoryReader@da3a1e&apos;=&amp;gt;&apos;theDouble&apos;,double,null=&amp;gt;[D#5503831 (size =~ 7.8 KB)
    [junit] 
    [junit] 
    [junit] Stack:
    [junit] 
    [junit] java.lang.Throwable
    [junit] 	at org.apache.lucene.search.FieldCacheImpl$Cache.printNewInsanity(FieldCacheImpl.java:263)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl$Cache.get(FieldCacheImpl.java:228)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:494)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl$FloatCache.createValue(FieldCacheImpl.java:509)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl$Cache.get(FieldCacheImpl.java:223)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:494)
    [junit] 	at org.apache.lucene.search.FieldCacheImpl.getFloats(FieldCacheImpl.java:487)
    [junit] 	at org.apache.lucene.search.TestFieldCache.testInfoStream(TestFieldCache.java:70)
    [junit] 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    [junit] 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
    [junit] 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
    [junit] 	at java.lang.reflect.Method.invoke(Method.java:597)
    [junit] 	at junit.framework.TestCase.runTest(TestCase.java:164)
    [junit] 	at junit.framework.TestCase.runBare(TestCase.java:130)
    [junit] 	at org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:206)
    [junit] 	at junit.framework.TestResult$1.protect(TestResult.java:106)
    [junit] 	at junit.framework.TestResult.runProtected(TestResult.java:124)
    [junit] 	at junit.framework.TestResult.run(TestResult.java:109)
    [junit] 	at junit.framework.TestCase.run(TestCase.java:120)
    [junit] 	at junit.framework.TestSuite.runTest(TestSuite.java:230)
    [junit] 	at junit.framework.TestSuite.run(TestSuite.java:225)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:420)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:911)
    [junit] 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:768)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12746719" author="hossman" created="Mon, 24 Aug 2009 04:39:39 +0100"  >&lt;p&gt;i haven&apos;t looked at the patch, but i don&apos;t think you need two calls to the sanity checker. &lt;/p&gt;

&lt;p&gt;Why not just a single call after the val has been created and log if any of the Insanity  objects contain the new val?&lt;/p&gt;</comment>
                    <comment id="12746783" author="mikemccand" created="Mon, 24 Aug 2009 10:27:56 +0100"  >&lt;blockquote&gt;&lt;p&gt;Why not just a single call after the val has been created and log if any of the Insanity objects contain the new val?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was worried about over-printing of previously created insanities, but you&apos;re right: since the new entry was just created, there&apos;s no way any insanity involving this entry would have been printed before (duh!).  So I&apos;ll simplify it...&lt;/p&gt;</comment>
                    <comment id="12746799" author="mikemccand" created="Mon, 24 Aug 2009 11:11:59 +0100"  >&lt;p&gt;New patch attached.&lt;/p&gt;</comment>
                    <comment id="12747538" author="hossman" created="Tue, 25 Aug 2009 19:24:54 +0100"  >&lt;p&gt;Michael: reading the patch you commited, i only have two concerns...&lt;/p&gt;

&lt;p&gt;1) a PrintStream doesn&apos;t really seem like the ideal callback API for this situation ... with IndexWriter it makes some sense because we ant to be able to log all sorts of misc info that will be unstructured, but in the field cache checkign case we already have a fairly robust data structure (Insanity) that we can provide ... so instead of a setInfoStream(PritStream) method, why not have a callback interface that takes Insanity objects (and the Entry that triggered the problem)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /** 
   * If non-&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; monitor will be notify anytime an entry is created 
   * which are not sane according to {@link FieldCacheSanityChecker}.
   * @param monitor The Monitor to notify, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; a RuntimeException then the cache method will &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; a RuntimeException.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setInsanityMonitor(InsanityMonitor monitor)
  ...
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; InsanityMonitor {
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void notify(CacheEntry e, Instanty[] i);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) it seems like we should change LuceneTestCase to use this new hook instead of just calling the FieldCacheSanityChecker in tearDown() ... that way we can be sure we&apos;re checking all FieldCache usages (the current approach risks IndexReader weak refs getting gc&apos;ed after they go out of scope in the test and before the checker runs in tearDown)&lt;/p&gt;


&lt;p&gt;....thoughts?&lt;/p&gt;</comment>
                    <comment id="12747564" author="mikemccand" created="Tue, 25 Aug 2009 19:49:46 +0100"  >&lt;p&gt;I think that may be over-designing things...&lt;/p&gt;

&lt;p&gt;Ie, I&apos;m thinking by far the most common use here is a user who can&apos;t&lt;br/&gt;
understand why their FieldCache memory has increased so much, and,&lt;br/&gt;
they want a simple &amp;amp; fast way to debug it.&lt;/p&gt;

&lt;p&gt;If we switch to the InsanityMonitor API then they&apos;ll have to implement&lt;br/&gt;
a class w/ that interface and a chunk of code that does the for loop,&lt;br/&gt;
printing out details?&lt;/p&gt;

&lt;p&gt;Is there any other use case besides &quot;help me debug&quot; that would merit a&lt;br/&gt;
programmatic API?&lt;/p&gt;

&lt;p&gt;I suppose we could switch to InsanityMonitor but then provide a&lt;br/&gt;
PrintStreamInstanityMonitor impl... still seems kinda overkill though.&lt;/p&gt;

&lt;p&gt;But I don&apos;t feel strongly.  Do you want to take a crack at it?&lt;/p&gt;

&lt;p&gt;I think what&apos;s important here is there&apos;s a one-line means for a user&lt;br/&gt;
who&apos;s having problems to &quot;turn on FieldCache debugging&quot; and see&lt;br/&gt;
juicy details when insanity increases.&lt;/p&gt;

&lt;p&gt;I agree we could make LuceneTestCase.tearDown more robust if tap into&lt;br/&gt;
this, though the simple infoStream could also be used for that?&lt;/p&gt;</comment>
                    <comment id="12747570" author="hossman" created="Tue, 25 Aug 2009 19:56:58 +0100"  >&lt;blockquote&gt;&lt;p&gt;I suppose we could switch to InsanityMonitor but then provide a PrintStreamInstanityMonitor impl... still seems kinda overkill though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;...that was what i had in mind, but you&apos;re right &amp;#8211; it is overkill.  a PrintStream is a nice quick and easy way to get this info &amp;#8211; if they really want robust data structures they can use the sanity checker directly (possibly even from a mock PrintStream)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I agree we could make LuceneTestCase.tearDown more robust if tap into this, though the simple infoStream could also be used for that? ... sure, because if &lt;b&gt;anything&lt;/b&gt; gets written to that stream, it indicates a bug ... unless they expect it, in which case they can catch an exception an ignore it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;but the LuceneTestCase changes are less urgent ... i was mainly worried about making surewe were happy with the API.  You&apos;ve convinced me.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12430699">LUCENE-1749</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12417461" name="LUCENE-1798.patch" size="5490" author="mikemccand" created="Mon, 24 Aug 2009 11:11:59 +0100" />
                    <attachment id="12417401" name="LUCENE-1798.patch" size="7588" author="mikemccand" created="Sun, 23 Aug 2009 16:00:31 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 23 Aug 2009 15:00:31 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11964</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25928</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>