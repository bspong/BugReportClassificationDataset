<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:16:45 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3496/LUCENE-3496.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3496] Support grouping by IndexDocValues</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3496</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Although IDV is not yet finalized (More particular the SortedSource). I think we already can discuss / investigate implementing grouping by IDV.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12526193">LUCENE-3496</key>
            <summary>Support grouping by IndexDocValues</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="martijn.v.groningen">Martijn van Groningen</assignee>
                                <reporter username="martijn.v.groningen">Martijn van Groningen</reporter>
                        <labels>
                    </labels>
                <created>Fri, 7 Oct 2011 13:41:28 +0100</created>
                <updated>Fri, 10 May 2013 11:44:08 +0100</updated>
                    <resolved>Thu, 24 Nov 2011 19:08:24 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/grouping</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13122740" author="martijn.v.groningen" created="Fri, 7 Oct 2011 13:42:59 +0100"  >&lt;p&gt;Attached initial IDV AbstractAllGroupsCollector implementation.&lt;/p&gt;</comment>
                    <comment id="13122751" author="simonw" created="Fri, 7 Oct 2011 13:59:03 +0100"  >&lt;p&gt;hey martjin, do yo have some benchmark results for IDV showing the impact? I would guess that depending on the type ie. var vs. fixed size you could see some perf hits. We might need to round up the packedint sizes inside IDV for lookup perf and pay the prize for a slightly larger size on disk / memory.&lt;/p&gt;</comment>
                    <comment id="13122942" author="martijn.v.groningen" created="Fri, 7 Oct 2011 17:39:04 +0100"  >&lt;p&gt;Up until now I only checked the difference between BYTES_VAR_SORTED and BYTES_FIXED_SORTED. The search time and memory usage seem to be more or less the same. I executed all queries on 30M index and the performance with grouping by IDV is somewhere between 500 ms and 550 ms. The same test with grouping by indexed values have search times somewhere between 300 ms and 330 ms.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We might need to round up the packedint sizes inside IDV for lookup perf and pay the prize for a slightly larger size on disk / memory.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we need this. Just like we have with FC#getTermsIndex(). A boolean option that either uses PackedInt or DirectInt. I think the ~200 ms difference is b/c IDV is using PackedInt and FC uses DirectInt.&lt;/p&gt;</comment>
                    <comment id="13123042" author="simonw" created="Fri, 7 Oct 2011 19:29:25 +0100"  >&lt;p&gt;martjin, here is a patch that forces the sorted variants to use fixed size packed ints. can you check if the perf changes?&lt;/p&gt;</comment>
                    <comment id="13123082" author="martijn.v.groningen" created="Fri, 7 Oct 2011 20:08:53 +0100"  >&lt;p&gt;Simon, this looks great!&lt;br/&gt;
The performance is much better now. An average the search time for grouping by BYTES_VAR_SORTED is 329 ms and BYTES_FIXED_SORTED is 338 ms. The average search time for grouping by indexed values is 310 ms. So grouping by IDV is pretty close to grouping by indexed values!&lt;/p&gt;</comment>
                    <comment id="13123147" author="yseeley@gmail.com" created="Fri, 7 Oct 2011 21:23:56 +0100"  >&lt;p&gt;Wow, only a 9% performance penalty for not keeping the values in the JVM heap?  That&apos;s quite an achievement (and almost hard to believe, unless the base query were really expensive or something).  Nice job!&lt;/p&gt;</comment>
                    <comment id="13123201" author="simonw" created="Fri, 7 Oct 2011 22:06:10 +0100"  >&lt;blockquote&gt;&lt;p&gt;Wow, only a 9% performance penalty for not keeping the values in the JVM heap? That&apos;s quite an achievement (and almost hard to believe, unless the base query were really expensive or something). Nice job!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;wait! this is in memory - martjin can you test with getDirectSource() instead of getSource()?&lt;/p&gt;</comment>
                    <comment id="13123763" author="martijn.v.groningen" created="Sun, 9 Oct 2011 20:46:28 +0100"  >&lt;p&gt;getDirectSource() search times:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;BYTES_VAR_SORTED: 455 ms&lt;/li&gt;
	&lt;li&gt;BYTES_FIXED_SORTED: 713 ms&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I noticed that with BYTES_VAR_SORTED the memory usage varied a lot during the test execution from around 10MB to 320MB. The memory usage for BYTES_FIXED_SORTED is stable around 10MB. &lt;/p&gt;

&lt;p&gt;I&apos;ll try to use luceneutil and modify it to benchmark grouping by IDV, so others can run performance tests as well. &lt;/p&gt;</comment>
                    <comment id="13123764" author="martijn.v.groningen" created="Sun, 9 Oct 2011 20:56:02 +0100"  >&lt;p&gt;Minor update to IndexDocValuesAllGroupsCollector to use disk resident IDV.&lt;/p&gt;</comment>
                    <comment id="13124982" author="mikemccand" created="Tue, 11 Oct 2011 13:42:52 +0100"  >&lt;p&gt;It&apos;s great that rounding up to 8/16/32/64 bit width resolved the performance problem!&lt;/p&gt;

&lt;p&gt;I think we need to make this (RAM vs CPU tradeoff) settable by the app, at indexing time?&lt;/p&gt;</comment>
                    <comment id="13125211" author="simonw" created="Tue, 11 Oct 2011 18:33:30 +0100"  >&lt;blockquote&gt;&lt;p&gt;I think we need to make this (RAM vs CPU tradeoff) settable by the app, at indexing time?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should do that. Maybe via IWC?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I noticed that with BYTES_VAR_SORTED the memory usage varied a lot during the test execution from around 10MB to 320MB. The memory usage for BYTES_FIXED_SORTED is stable around 10MB.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah, the VAR_SORTED variant loads the ords in memory which is wrong though. However, &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3507&quot; title=&quot;Improve Memory Consumption for merging DocValues SortedBytes variants&quot;&gt;&lt;del&gt;LUCENE-3507&lt;/del&gt;&lt;/a&gt; is adressing this issue.&lt;/p&gt;

&lt;p&gt;one thing I noticed about the patch is that you consider 0 ords as null values which is not the case in IDV. All documents do have values, there is nothing like missing values. VAR_BYTES will return a 0-length byte and FIXED_BYTES will return a fixed-length 0-byte array. Numeric variants default to 0 and 0.0 receptively.&lt;/p&gt;</comment>
                    <comment id="13125244" author="mikemccand" created="Tue, 11 Oct 2011 19:20:32 +0100"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I think we need to make this (RAM vs CPU tradeoff) settable by the app, at indexing time?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we should do that. Maybe via IWC?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That seems good?  I think it should default to rounding up?  Apps that want to tune RAM usage down can then change the default.&lt;/p&gt;</comment>
                    <comment id="13125256" author="simonw" created="Tue, 11 Oct 2011 19:30:28 +0100"  >&lt;blockquote&gt;&lt;p&gt;That seems good? I think it should default to rounding up? Apps that want to tune RAM usage down can then change the default.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 I will create an issue&lt;/p&gt;</comment>
                    <comment id="13125269" author="simonw" created="Tue, 11 Oct 2011 19:37:45 +0100"  >&lt;blockquote&gt;&lt;p&gt;+1 I will create an issue&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;FYI - &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3509&quot; title=&quot;Add settings to IWC to optimize IDV indices for CPU or RAM respectivly&quot;&gt;&lt;del&gt;LUCENE-3509&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13125396" author="martijn.v.groningen" created="Tue, 11 Oct 2011 22:14:16 +0100"  >&lt;blockquote&gt;&lt;p&gt;one thing I noticed about the patch is that you consider 0 ords as null values which is not the case in IDV.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I changed that in the new patch.&lt;br/&gt;
I also included IDV implementation for AbstractFirstPassGroupingCollector.&lt;/p&gt;

&lt;p&gt;I think it is time to include these collectors into the already existing tests. Besides that we need IDV implementations for AbstractSecondPassGroupingCollector and AbstractAllGroupHeadsCollector.&lt;/p&gt;</comment>
                    <comment id="13126191" author="martijn.v.groningen" created="Wed, 12 Oct 2011 22:53:44 +0100"  >&lt;p&gt;After a svn update (that includes changes for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3507&quot; title=&quot;Improve Memory Consumption for merging DocValues SortedBytes variants&quot;&gt;&lt;del&gt;LUCENE-3507&lt;/del&gt;&lt;/a&gt;) the heap usage for grouping by BYTES_VAR_SORTED IDV and using disk resident values is much more stable! It stays between 5MB and 16MB and the average search time is around 580ms.&lt;/p&gt;</comment>
                    <comment id="13126193" author="martijn.v.groningen" created="Wed, 12 Oct 2011 22:55:54 +0100"  >&lt;p&gt;Updated patch to work with the trunk.&lt;/p&gt;</comment>
                    <comment id="13132701" author="martijn.v.groningen" created="Fri, 21 Oct 2011 15:24:53 +0100"  >&lt;p&gt;Updated patch. Added idv implementation for second pass grouping collector. Also the tests have been changed to randomly select an idv based implementation when possible (tests now choose randomly between term, idv and function based implementations).&lt;/p&gt;</comment>
                    <comment id="13133736" author="martijn.v.groningen" created="Sun, 23 Oct 2011 21:32:56 +0100"  >&lt;p&gt;Updated patch. Moved Simon&apos;s changes to force the use of the sorted variants to use fixed size packed ints to &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3509&quot; title=&quot;Add settings to IWC to optimize IDV indices for CPU or RAM respectivly&quot;&gt;&lt;del&gt;LUCENE-3509&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="13142486" author="martijn.v.groningen" created="Wed, 2 Nov 2011 20:27:06 +0000"  >&lt;p&gt;I think this can be committed soon. The fixed size packed ints options for DV will be further improved in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3509&quot; title=&quot;Add settings to IWC to optimize IDV indices for CPU or RAM respectivly&quot;&gt;&lt;del&gt;LUCENE-3509&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    <comment id="13149543" author="simonw" created="Mon, 14 Nov 2011 10:32:10 +0000"  >&lt;p&gt;Martjin, the last patch looks ok to me. you should go ahead and commit this...&lt;/p&gt;</comment>
                    <comment id="13149689" author="martijn.v.groningen" created="Mon, 14 Nov 2011 15:35:12 +0000"  >&lt;p&gt;I was planning on doing this. I&apos;m almost ready to commit it. I&apos;m only a bit stuck on documents that don&apos;t have a value for a group field.&lt;/p&gt;

&lt;p&gt;The random grouping tests also add documents with a null value for the group field and an empty string for the group field. This works fine with the term based implementations, but not the DV based implementations (random test fail). Should we not use null as group value if the dv based implementations are used during the test?&lt;/p&gt;</comment>
                    <comment id="13156378" author="martijn.v.groningen" created="Wed, 23 Nov 2011 23:07:54 +0000"  >&lt;p&gt;Updated patch.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;All tests pass now.&lt;/li&gt;
	&lt;li&gt;Added dv based impl for AllGroupHeadCollector.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will commit this soon.&lt;/p&gt;</comment>
                    <comment id="13156874" author="martijn.v.groningen" created="Thu, 24 Nov 2011 19:08:24 +0000"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12526713">LUCENE-3509</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12504945" name="LUCENE-3496.patch" size="94737" author="martijn.v.groningen" created="Wed, 23 Nov 2011 23:07:54 +0000" />
                    <attachment id="12500375" name="LUCENE-3496.patch" size="52630" author="martijn.v.groningen" created="Sun, 23 Oct 2011 21:32:56 +0100" />
                    <attachment id="12500181" name="LUCENE-3496.patch" size="57200" author="martijn.v.groningen" created="Fri, 21 Oct 2011 15:24:53 +0100" />
                    <attachment id="12498831" name="LUCENE-3496.patch" size="25055" author="martijn.v.groningen" created="Wed, 12 Oct 2011 22:55:54 +0100" />
                    <attachment id="12498670" name="LUCENE-3496.patch" size="18576" author="martijn.v.groningen" created="Tue, 11 Oct 2011 22:14:16 +0100" />
                    <attachment id="12498367" name="LUCENE-3496.patch" size="11954" author="martijn.v.groningen" created="Sun, 9 Oct 2011 20:56:02 +0100" />
                    <attachment id="12498214" name="LUCENE-3496.patch" size="10759" author="simonw" created="Fri, 7 Oct 2011 19:29:25 +0100" />
                    <attachment id="12498146" name="LUCENE-3496.patch" size="7052" author="martijn.v.groningen" created="Fri, 7 Oct 2011 13:42:59 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 7 Oct 2011 12:59:03 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>50028</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24201</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>