<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:11:14 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1709/LUCENE-1709.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1709] Parallelize Tests</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1709</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The Lucene tests can be parallelized to make for a faster testing system.  &lt;/p&gt;

&lt;p&gt;This task from ANT can be used: &lt;a href=&quot;http://ant.apache.org/manual/CoreTasks/parallel.html&quot; class=&quot;external-link&quot;&gt;http://ant.apache.org/manual/CoreTasks/parallel.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Previous discussion: &lt;a href=&quot;http://www.gossamer-threads.com/lists/lucene/java-dev/69669&quot; class=&quot;external-link&quot;&gt;http://www.gossamer-threads.com/lists/lucene/java-dev/69669&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notes from Mike M.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&apos;d love to see a clean solution here (the tests are embarrassingly&lt;br/&gt;
parallelizable, and we all have machines with good concurrency these&lt;br/&gt;
days)... I have a rather hacked up solution now, that uses&lt;br/&gt;
&quot;-Dtestpackage=XXX&quot; to split the tests up.&lt;/p&gt;

&lt;p&gt;Ideally I would be able to say &quot;use N threads&quot; and it&apos;d do the right&lt;br/&gt;
thing... like the -j flag to make.&lt;/p&gt;&lt;/blockquote&gt;</description>
                <environment></environment>
            <key id="12428520">LUCENE-1709</key>
            <summary>Parallelize Tests</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="rcmuir">Robert Muir</assignee>
                                <reporter username="jasonrutherglen">Jason Rutherglen</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Jun 2009 01:08:50 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:11 +0100</updated>
                    <resolved>Thu, 6 May 2010 12:20:59 +0100</resolved>
                            <version>2.4.1</version>
                                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                          <timeoriginalestimate seconds="172800">48h</timeoriginalestimate>
                    <timeestimate seconds="172800">48h</timeestimate>
                                  <comments>
                    <comment id="12723810" author="jasonrutherglen" created="Thu, 25 Jun 2009 00:55:27 +0100"  >&lt;p&gt;Given my limited understanding of ANT, it seems like it would be&lt;br/&gt;
ideal long term to be able to set a the numThreads on JUnitTask&lt;br/&gt;
which underneath executes the tests in BatchTest in parallel.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how to hack Parallel and JUnitTask together in the&lt;br/&gt;
ANT XML. &lt;/p&gt;

&lt;p&gt;If it&apos;s possible for JUnit to somehow return Tasks up the chain&lt;br/&gt;
to Parallel, that might work?&lt;/p&gt;</comment>
                    <comment id="12723815" author="jasonrutherglen" created="Thu, 25 Jun 2009 01:10:44 +0100"  >&lt;p&gt;So am thinking we&apos;d create a ParallelJUnitTask that extends JUnitTask and accepts a threadCount property.  We can reuse code from the threading code from Parallel.  &lt;/p&gt;</comment>
                    <comment id="12723850" author="hossman" created="Thu, 25 Jun 2009 02:24:13 +0100"  >&lt;p&gt;if you&apos;re looking to extend ant it might be better to tackle that on the dev@ant list ... there&apos;s only two or three ant hackers i can think of in the lucene community (and a lot in the ant community)&lt;/p&gt;

&lt;p&gt;I would also suggest becoming familiar with these two links...&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/1.7.1---Beta-Vote-to16148645.html#a15698118&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/1.7.1---Beta-Vote-to16148645.html#a15698118&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://parallel-junit.dev.java.net/&quot; class=&quot;external-link&quot;&gt;https://parallel-junit.dev.java.net/&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;As mentioned in the &quot;Previous discussion&quot; link: a simple way for lucene to get &lt;b&gt;some&lt;/b&gt; paralllelization using existing ant functionality would be to extend (or make a variant) of our contrib-crawl so it could run the contrib tests in parallel (contrib crawl can&apos;t be parallelized in the general case because some contribs have dependencies on other contribs and build them if they aren&apos;t already built)&lt;/p&gt;
</comment>
                    <comment id="12723867" author="jasonrutherglen" created="Thu, 25 Jun 2009 02:49:23 +0100"  >&lt;p&gt;Thanks for the links!&lt;/p&gt;</comment>
                    <comment id="12724277" author="jasonrutherglen" created="Thu, 25 Jun 2009 21:45:39 +0100"  >&lt;blockquote&gt;&lt;p&gt; As mentioned in the &quot;Previous discussion&quot; link: a simple&lt;br/&gt;
way for lucene to get some paralllelization using existing ant&lt;br/&gt;
functionality would be to extend (or make a variant) of our&lt;br/&gt;
contrib-crawl so it could run the contrib tests in parallel&lt;br/&gt;
(contrib crawl can&apos;t be parallelized in the general case because&lt;br/&gt;
some contribs have dependencies on other contribs and build them&lt;br/&gt;
if they aren&apos;t already built) &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d like to get test-core multithreaded. In looking at the&lt;br/&gt;
ant-junit code, it&apos;s unfortunately not easy (as noted in the&lt;br/&gt;
links) to execute the batchtest(s) in parallel. So agreed that&lt;br/&gt;
the most obvious solution belongs in the the ant world. However&lt;br/&gt;
I still hold out some hope for a custom interim solution.&lt;/p&gt;</comment>
                    <comment id="12724317" author="johkin" created="Thu, 25 Jun 2009 23:00:26 +0100"  >&lt;p&gt;Just a thought from an outsider...&lt;br/&gt;
Do you mean that you would implement your own task? In which module would you put this custom ant task? This would mean that you need a module in Lucene just to be able to build Lucene?&lt;/p&gt;

&lt;p&gt;Can&apos;t help keep on pointing to maven which has already solved this problem...&lt;br/&gt;
&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/testng.html&quot; class=&quot;external-link&quot;&gt;http://maven.apache.org/plugins/maven-surefire-plugin/examples/testng.html&lt;/a&gt;&lt;br/&gt;
Look at running tests in parallel.&lt;br/&gt;
I havent tried this yet, but why spend time reinventing the wheel?&lt;/p&gt;</comment>
                    <comment id="12724325" author="jasonrutherglen" created="Thu, 25 Jun 2009 23:30:19 +0100"  >&lt;blockquote&gt;&lt;p&gt; Do you mean that you would implement your own task? In&lt;br/&gt;
which module would you put this custom ant task? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, seems creating a custom task should work? In contrib/ant? &lt;/p&gt;

&lt;p&gt;Last time I tried to use Maven I couldn&apos;t get it to work (was&lt;br/&gt;
running into a bug) so my knowledge isn&apos;t very good. We&apos;re using&lt;br/&gt;
ant and ivy for our webapp dev. I don&apos;t know what Lucene&apos;s&lt;br/&gt;
position is on Maven, but am interested pursuing whatever makes&lt;br/&gt;
sense.&lt;/p&gt;</comment>
                    <comment id="12724720" author="johkin" created="Fri, 26 Jun 2009 22:21:41 +0100"  >&lt;p&gt;I did a quick maven setup just to see the effects of running tests in parallel, and the result was a bit surprising. When running in parallel, it took about 30-40 seconds less (~7.40minutes) than running in sequence (~8.10minutes).&lt;br/&gt;
Don&apos;t know if there would be a significant boost on a quad-core, my dual core had some idle time left when running with five threads.&lt;br/&gt;
Is it worth the development time and the complexity increase of the build?&lt;/p&gt;</comment>
                    <comment id="12724815" author="mikemccand" created="Sat, 27 Jun 2009 08:41:41 +0100"  >&lt;p&gt;Actually I see decent gains from concurrency: when I run tests with 6&lt;br/&gt;
threads my tests run a little over 3X faster (12:59 with 1 thread and&lt;br/&gt;
4:15 with 6 threads).&lt;/p&gt;

&lt;p&gt;I&apos;m using a Python script that launches the threads, each specifying&lt;br/&gt;
-Dtestpackage to run a certain subset of Lucene&apos;s tests.&lt;/p&gt;

&lt;p&gt;This is on an OpenSolaris (2009.06) machine, with a Core i7 920 CPU&lt;br/&gt;
(= 8 cores presented to the OS) and an Intel X25M SSD, 12 GB RAM.  The&lt;br/&gt;
hardware has quite a bit of concurrency.&lt;/p&gt;</comment>
                    <comment id="12836368" author="mikemccand" created="Sun, 21 Feb 2010 13:45:48 +0000"  >&lt;p&gt;I&apos;m attaching the scary python script that I use to use multiple&lt;br/&gt;
threads when running the tests.&lt;/p&gt;

&lt;p&gt;It&apos;s not really generic at all.  It&apos;s got hardwired paths to my home&lt;br/&gt;
dir, it symlinks build/test to /tmp (= tmpfs on my solaris box), it&lt;br/&gt;
applies a scary patch to the build xml files (and that patch is&lt;br/&gt;
depending on the branch &amp;#8211; only works on 2.9, 3.0, trunk, flex now).&lt;/p&gt;

&lt;p&gt;Often the patch fails to apply (as we change the build xml files) so I&lt;br/&gt;
have to go and redo them.&lt;/p&gt;

&lt;p&gt;Sometimes tests have false positive failure because they temporarily&lt;br/&gt;
fill up the tmpfs; if you ctrl+C the test it may leave turd processes&lt;br/&gt;
running; etc.&lt;/p&gt;

&lt;p&gt;So I wouldn&apos;t recommend using this as is.... but maybe someone who is&lt;br/&gt;
good-with-the-ant can take the general idea here and make it work more&lt;br/&gt;
generally with only ant.&lt;/p&gt;

&lt;p&gt;Roughly all that I do is have each thread run its own -Dtestpackage.&lt;br/&gt;
The existing search &amp;amp; index packages are too big, so I split them into&lt;br/&gt;
2.  I also roughly ordered the tests so that they are &quot;balanced&quot;, so&lt;br/&gt;
that as each thread pulls from the work queue, the &quot;roughly&quot; fininish&lt;br/&gt;
at the same time.  The test-contrib is run by a single thread.&lt;/p&gt;

&lt;p&gt;With all the speedups, this is what the output looks like:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[TRUNK]
0 [0:00:00.310867]: run &quot;ant compile-backwards compile-core compile-demo jar-core compile-test build-contrib&quot;...
0 [0:00:30.612062]: run &quot;ant test-contrib&quot;...
1 [0:00:30.617522]: run &quot;ant test-core -Dtestpackagea=index&quot;...
2 [0:00:30.623840]: run &quot;ant test-core -Dtestpackageb=index&quot;...
3 [0:00:30.630072]: run &quot;ant test-backwards -Dtestpackagea=index&quot;...
4 [0:00:30.637612]: run &quot;ant test-backwards -Dtestpackageb=index&quot;...
5 [0:00:30.645334]: run &quot;ant test-core -Dtestpackagea=search&quot;...
4 [0:00:58.937803]: run &quot;ant test-core -Dtestpackageb=search&quot;...
2 [0:00:59.052593]: run &quot;ant test-backwards -Dtestpackagea=search&quot;...
5 [0:01:31.313156]: run &quot;ant test-backwards -Dtestpackageb=search&quot;...
2 [0:01:52.617814]: run &quot;ant test-core -Dtestpackage=store&quot;...
4 [0:02:01.698477]: run &quot;ant test-backwards -Dtestpackage=store&quot;...
2 [0:02:10.818047]: run &quot;ant test-core -Dtestpackage=analysis&quot;...
3 [0:02:14.808217]: run &quot;ant test-backwards -Dtestpackage=analysis&quot;...
1 [0:02:15.786972]: run &quot;ant test-core -Dtestpackageroot=lucene&quot;...
4 [0:02:21.937936]: run &quot;ant test-backwards -Dtestpackageroot=lucene&quot;...
1 [0:02:25.898000]: run &quot;ant test-core -Dtestpackage=util&quot;...
2 [0:02:31.037923]: run &quot;ant test-backwards -Dtestpackage=util&quot;...
4 [0:02:31.038090]: run &quot;ant test-core -Dtestpackage=document&quot;...
3 [0:02:32.007975]: run &quot;ant test-backwards -Dtestpackage=document&quot;...
5 [0:02:38.017968]: run &quot;ant test-core -Dtestpackage=queryParser&quot;...
3 [0:02:40.097929]: run &quot;ant test-backwards -Dtestpackage=queryParser&quot;...
4 [0:02:40.151166]: DONE
0 [0:02:41.927786]: DONE
1 [0:02:43.077980]: DONE
2 [0:02:46.198287]: DONE
5 [0:02:49.168172]: DONE
3 [0:02:50.197936]: DONE

DONE: took 0:02:51.046643 [528 tests]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12842453" author="rcmuir" created="Sun, 7 Mar 2010 17:32:57 +0000"  >&lt;p&gt;Here is a in-progress patch to build.xml/common-build.xml&lt;br/&gt;
It runs tests in parallel (2 jvms per cpu)&lt;br/&gt;
On my computer, &apos;test-core&apos; is 1:02 and &apos;test&apos; is 3:29 with the patch.&lt;/p&gt;

&lt;p&gt;Not ready for committing yet, and needs some improvements and fixes.&lt;/p&gt;</comment>
                    <comment id="12843385" author="jasonrutherglen" created="Wed, 10 Mar 2010 00:49:52 +0000"  >&lt;p&gt;Robert, very nice!  &lt;/p&gt;</comment>
                    <comment id="12848707" author="rcmuir" created="Tue, 23 Mar 2010 13:45:50 +0000"  >&lt;p&gt;Thanks Jason.&lt;/p&gt;

&lt;p&gt;So for newtrunk I applied a similar patch to speed up Solr&apos;s tests.&lt;br/&gt;
You can see it here: &lt;a href=&quot;http://svn.apache.org/viewvc?rev=926470&amp;amp;view=rev&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewvc?rev=926470&amp;amp;view=rev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case the output is not interleaved because it uses a special formatter.&lt;br/&gt;
So it basically looks just like you are not using parallel at all.&lt;br/&gt;
Additionally -Dtestpackage, -Dtestpackageroot, -Dtestcase all work, the former two are also parallelized.&lt;/p&gt;

&lt;p&gt;So, I propose we do the same thing for Lucene tests.&lt;br/&gt;
Solr was simple because it does not have these junit failed flag files.&lt;br/&gt;
I propose we just remove these, like how Solr does contrib.&lt;br/&gt;
Hudson hasn&apos;t failed in over a month by the way.&lt;/p&gt;</comment>
                    <comment id="12848712" author="markrmiller@gmail.com" created="Tue, 23 Mar 2010 13:58:41 +0000"  >&lt;p&gt;+1 on removing those flags - personally I find them unnecessary - and they complicate the build.&lt;/p&gt;

&lt;p&gt;And I would love to Lucene parallel like Solr now.&lt;/p&gt;</comment>
                    <comment id="12848718" author="mikemccand" created="Tue, 23 Mar 2010 14:05:22 +0000"  >&lt;p&gt;+1 for removing the flags and committing parallel tests for Lucene too.&lt;/p&gt;</comment>
                    <comment id="12850145" author="rcmuir" created="Fri, 26 Mar 2010 14:12:27 +0000"  >&lt;p&gt;attached is a patch, before applying it you must do this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The formatter itself is really broken, the sync only makes the output work within a single TestSuite.&lt;br/&gt;
We need some file-locking or similar to ensure it is really correct.&lt;/p&gt;

&lt;p&gt;The patch does not do backwards in parallel (only core/contrib)&lt;br/&gt;
Also, there is the TEMP_DIR problem i mentioned, which i haven&apos;t addressed here.&lt;/p&gt;</comment>
                    <comment id="12850216" author="rcmuir" created="Fri, 26 Mar 2010 17:06:49 +0000"  >&lt;p&gt;attached is an updated patch, addressing some of the problems of the previous one:&lt;/p&gt;

&lt;p&gt;Remaining &quot;bugs&quot;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Solr&apos;s build.xml still doesnt yet detect that lucene&apos;s tests have changed,&lt;br/&gt;
so you need to do &apos;ant clean&apos; after this patch, so it will pick up the fact that &lt;br/&gt;
the formatter was moved to Lucene&apos;s tests. This is a more general problem&lt;br/&gt;
we need to fix, so that updates to Lucene&apos;s test code reflect in Solr without cleaning.&lt;/li&gt;
	&lt;li&gt;The output is still interleaved at times, we need the file locking to fix this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;before applying the patch, do this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
svn copy lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is because the backwards tests need the formatter too, as they are now also run in parallel.&lt;/p&gt;</comment>
                    <comment id="12850250" author="rcmuir" created="Fri, 26 Mar 2010 17:49:13 +0000"  >&lt;p&gt;attached is an updated patch, run the same commands before applying the patch:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;svn move solr/src/test/org/apache/solr/SolrJUnitResultFormatter.java lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
svn copy lucene/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java lucene/backwards/src/test/org/apache/lucene/util/LuceneJUnitResultFormatter.java
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mark fixed the interleaved output here, so this is good.&lt;br/&gt;
But, there is a problem in that we change java.io.tmpdir in tests, so we cannot use it&lt;br/&gt;
for the lock file. So if we fix tests to only use &quot;tempDir&quot;, then we are ok with the formatter,&lt;br/&gt;
as it can just use java.io.tmpdir for its lock file.&lt;/p&gt;

</comment>
                    <comment id="12850287" author="rcmuir" created="Fri, 26 Mar 2010 18:32:59 +0000"  >&lt;p&gt;attached is an updated patch, as Uwe has fixed the previous tempDir issue in the backwards tests.&lt;/p&gt;

&lt;p&gt;I think we are close, there are only two issues I want to address first:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Solr tests should do some uptodate check on lucene&apos;s test code&lt;/li&gt;
	&lt;li&gt;Benchmark&apos;s work directory for tests should be under tempDir&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12850315" author="rcmuir" created="Fri, 26 Mar 2010 19:25:17 +0000"  >&lt;p&gt;attached is a patch that sets the benchmark.work.dir for benchmark &lt;b&gt;tests&lt;/b&gt; to tempDir.&lt;br/&gt;
This way these tests do not step on each other.&lt;br/&gt;
Additionally some minor cleanup in the quality test was needed (e.g. use getClass().getResourceAsStream for input files)&lt;/p&gt;

&lt;p&gt;The only thing left now, is to make sure that solr tests detect when lucene core test code is out of date,&lt;br/&gt;
as solr tests use this code... really outside the scope of this issue, but it will cause confusion if&lt;br/&gt;
people have to &apos;ant clean&apos; after the commit.&lt;/p&gt;</comment>
                    <comment id="12850351" author="thetaphi" created="Fri, 26 Mar 2010 21:12:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;The only thing left now, is to make sure that solr tests detect when lucene core test code is out of date, as solr tests use this code... really outside the scope of this issue, but it will cause confusion if people have to &apos;ant clean&apos; after the commit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The ANT &amp;lt;uptodate/&amp;gt; specialist will look into this!&lt;/p&gt;</comment>
                    <comment id="12850363" author="rcmuir" created="Fri, 26 Mar 2010 21:32:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;The ANT &amp;lt;uptodate/&amp;gt; specialist will look into this!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, thanks uwe.&lt;/p&gt;

&lt;p&gt;I will commit this shortly, and send a note to both dev lists mentioning to run ant clean for the time being for any old checkouts.&lt;/p&gt;

&lt;p&gt;I think most people will prefer shaving minutes off their test time for a one time-clean... unless anyone objects!&lt;/p&gt;</comment>
                    <comment id="12850370" author="rcmuir" created="Fri, 26 Mar 2010 21:59:32 +0000"  >&lt;p&gt;Committed revision 928069.&lt;/p&gt;</comment>
                    <comment id="12852106" author="rcmuir" created="Wed, 31 Mar 2010 22:11:16 +0100"  >&lt;p&gt;I would like to reopen this issue to address some minor things.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;junit should not create temp files in the src directory, like junitvmwatcher* etc.&lt;/li&gt;
	&lt;li&gt;we should somehow include ant.jar and ant-junit.jar in such a way its easy for&lt;br/&gt;
IDE&apos;s to be configured, yet at the same time, ant doesn&apos;t give a warning. This&lt;br/&gt;
was already a pre-existing condition for contrib/ant!&lt;/li&gt;
	&lt;li&gt;we should tone down the default threads-per-cpu to 1 by default, and allow&lt;br/&gt;
it to be configurable via sysprop.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;i think these apply to solr too, so i&apos;m proposing fixing both the build.xml&apos;s&lt;/p&gt;</comment>
                    <comment id="12854348" author="shaie" created="Wed, 7 Apr 2010 06:08:15 +0100"  >&lt;p&gt;One more thing - change benchmark tests to run sequentially (by adding the property).&lt;br/&gt;
Robert, are you going to tackle that soon?&lt;/p&gt;</comment>
                    <comment id="12854376" author="shaie" created="Wed, 7 Apr 2010 09:25:16 +0100"  >&lt;p&gt;Since I had the changes on my local env. I thought it&apos;s best to generate a patch out of them, so they don&apos;t get lost. The patch doesn&apos;t cover the ant .jars, only the changes to common-build.xml as well as benchmark/build.xml&lt;/p&gt;</comment>
                    <comment id="12854957" author="tburtonwest" created="Thu, 8 Apr 2010 16:42:25 +0100"  >&lt;p&gt;I am having the same issue Shai reported in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2353&quot; title=&quot;Config incorrectly handles Windows absolute pathnames&quot;&gt;&lt;del&gt;LUCENE-2353&lt;/del&gt;&lt;/a&gt; with the parallel tests apparently causing the tests to hang on my Windows box with both Revision 931573 and Revision   931304 when running the tests from root.&lt;/p&gt;

&lt;p&gt;Tests  hang in WriteLineDocTaskTest, on this line:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; ------------&amp;gt; config properties:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; directory = RAMDirectory&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; doc.maker = org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest$JustDateDocMaker&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; line.file.out = D:\dev\lucene\lucene-trunk\build\contrib\benchmark\test\W\one-line&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; ------------------------------- &lt;/p&gt;


&lt;p&gt;I just ran the test last night with Revision  931708 and had no problem.   Ran it again this morning and got the hanging behavior.  The difference is that last night the only thing running on my computer besides a couple of ssh terminal windows was the  tests.  Today when I ran the tests and got the hanging behavior, I have firefox, outlook, exceed, wordpad open.  The tests are taking 98-99.9% of my cpu while hanging.  I suspect there is some kind of resource issue when running the tests in parallel.&lt;/p&gt;

&lt;p&gt;Tom Burton-West&lt;/p&gt;</comment>
                    <comment id="12854959" author="rcmuir" created="Thu, 8 Apr 2010 16:45:30 +0100"  >&lt;p&gt;Thanks Tom and Shai... sorry I haven&apos;t gotten to fix this yet.&lt;/p&gt;

&lt;p&gt;Shai, would you mind committing your patch? we can keep the issue open to add the sysprop and fix the ant jar thing, and apply the same fixes to Solr&apos;s build.xml&lt;/p&gt;</comment>
                    <comment id="12854960" author="tburtonwest" created="Thu, 8 Apr 2010 16:48:02 +0100"  >&lt;p&gt;This may or may not be a clue to the problem in benchmark.  When I control-C&apos;d the hung test, I got the error reported below.&lt;br/&gt;
Tom.&lt;/p&gt;


&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; directory = RAMDirectory&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; doc.maker = org.apache.lucene.benchmark.byTask.tasks.WriteLineDocTaskTest$JustDateDocMaker&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; line.file.out = C:\cygwin\home\tburtonw\lucene\april07_good\build\contrib\benchmark\test\W\one-line&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; -------------------------------&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; ------------- ---------------- ---------------&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; java.io.FileNotFoundException: C:\cygwin\home\tburtonw\lucene\april07_good\contrib\benchmark\junitvmwatcher203463231158436475.properties (The process cannot access the file because it is being used by another process)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.io.FileInputStream.open(Native Method)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.io.FileInputStream.&amp;lt;init&amp;gt;(FileInputStream.java:106)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.io.FileReader.&amp;lt;init&amp;gt;(FileReader.java:55)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeAsForked(JUnitTask.java:1025)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:876)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:803)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:62)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:394)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.GeneratedMethodAccessor8.invoke(Unknown Source)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.Task.perform(Task.java:348)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at org.apache.tools.ant.taskdefs.Parallel$TaskRunnable.run(Parallel.java:428)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; 	at java.lang.Thread.run(Thread.java:619)&lt;/p&gt;</comment>
                    <comment id="12854967" author="rcmuir" created="Thu, 8 Apr 2010 17:02:04 +0100"  >&lt;p&gt;Thanks Tom, this is exactly what happened to Shai.&lt;/p&gt;

&lt;p&gt;Can you try his patch and see if it fixed the problem for you?&lt;/p&gt;</comment>
                    <comment id="12855020" author="shaie" created="Thu, 8 Apr 2010 18:16:37 +0100"  >&lt;p&gt;Robert, I will commit the patch, seems good to do anyway. We can handle the ant jars separately later.&lt;/p&gt;

&lt;p&gt;And ths hang behavior is exactly what I experience, including the FileInputStream thing. Only on my machine, when I took a thread dump, it showed that Ant waits on FIS.read() ...&lt;/p&gt;

&lt;p&gt;Robert - to remind you that even with the patch which forces junit to use a separate temp folder per thread, it still hung ... &lt;/p&gt;</comment>
                    <comment id="12855022" author="tburtonwest" created="Thu, 8 Apr 2010 18:17:59 +0100"  >&lt;p&gt;Hi Robert,&lt;/p&gt;

&lt;p&gt;I patched Revision 931708 and ran &quot;ant clean test-contribute&quot; and the tests ran just fine.  The patch seems to have solved the problem.&lt;/p&gt;

&lt;p&gt;Tom&lt;/p&gt;</comment>
                    <comment id="12855700" author="rcmuir" created="Sun, 11 Apr 2010 11:24:09 +0100"  >&lt;p&gt;I committed the junit tempdir fix in revision 932857... will handle these one at a time.&lt;/p&gt;</comment>
                    <comment id="12855713" author="shaie" created="Sun, 11 Apr 2010 13:13:35 +0100"  >&lt;p&gt;Committed revision 932878 with the following:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;benchmark tests force sequential run&lt;/li&gt;
	&lt;li&gt;threadsPerProcessor defaults to 1 and can be overridden by -DthreadsPerProcessor=&amp;lt;value&amp;gt;&lt;/li&gt;
	&lt;li&gt;A CHANGES entry&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12856400" author="rcmuir" created="Tue, 13 Apr 2010 13:14:18 +0100"  >&lt;p&gt;I&apos;ve propagated Shai&apos;s improvements to Solr.&lt;br/&gt;
Additionally, I added the ant lib as a convenience for IDE users (revision 933575.)&lt;br/&gt;
It doesn&apos;t cause ant classpath warnings when running from the commandline. if you experience this, please let me know!&lt;br/&gt;
It only means its easier for IDE users to work on lucene/solr and not see compile errors from contrib/ant and src/test.&lt;/p&gt;</comment>
                    <comment id="12864731" author="rcmuir" created="Thu, 6 May 2010 12:20:59 +0100"  >&lt;p&gt;backported to 3.x, rev 941663&lt;/p&gt;</comment>
                    <comment id="13013394" author="gsingers" created="Wed, 30 Mar 2011 16:50:11 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12460319">LUCENE-2349</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12441002" name="LUCENE-1709-2.patch" size="1524" author="shaie" created="Wed, 7 Apr 2010 09:25:16 +0100" />
                    <attachment id="12439902" name="LUCENE-1709.patch" size="23424" author="rcmuir" created="Fri, 26 Mar 2010 19:25:17 +0000" />
                    <attachment id="12439898" name="LUCENE-1709.patch" size="19501" author="rcmuir" created="Fri, 26 Mar 2010 18:32:59 +0000" />
                    <attachment id="12439894" name="LUCENE-1709.patch" size="19596" author="rcmuir" created="Fri, 26 Mar 2010 17:49:13 +0000" />
                    <attachment id="12439891" name="LUCENE-1709.patch" size="15794" author="rcmuir" created="Fri, 26 Mar 2010 17:06:49 +0000" />
                    <attachment id="12439881" name="LUCENE-1709.patch" size="10345" author="rcmuir" created="Fri, 26 Mar 2010 14:12:27 +0000" />
                    <attachment id="12438144" name="LUCENE-1709.patch" size="10190" author="rcmuir" created="Sun, 7 Mar 2010 17:32:57 +0000" />
                    <attachment id="12436491" name="runLuceneTests.py" size="41891" author="mikemccand" created="Sun, 21 Feb 2010 13:45:48 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>8.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 25 Jun 2009 01:24:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12049</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26017</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>