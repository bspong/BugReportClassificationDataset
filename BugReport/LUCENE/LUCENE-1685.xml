<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:20:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1685/LUCENE-1685.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1685] Make the Highlighter use SpanScorer by default</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1685</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I&apos;ve always thought this made sense, but frankly, it took me a year to get the SpanScorer included with Lucene at all, so I was pretty much ready to move on after I it got in, rather than push for it as a default.&lt;/p&gt;

&lt;p&gt;I think it makes sense as the default in Solr as well, and I mentioned that back when it was put in, but alas, its an option there as well.&lt;/p&gt;

&lt;p&gt;The Highlighter package has no back compat req, but custom has been conservative - one reason I havn&apos;t pushed for this change before. Might be best to actually make the switch in 3? I could go either way - as is, I know a bunch of people use it, but I&apos;m betting its the large minority. It has never been listed in a changes entry and its not in LIA 1, so you pretty much have to stumble upon it, and figure out what its for.&lt;/p&gt;

&lt;p&gt;I&apos;ll point out again that its just as fast as the standard scorer for any clause of a query that is not position sensitive. Position sensitive query clauses will obviously be somewhat slower to highlight, but that is because they will be highlighted correctly rather than ignoring position.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12427679">LUCENE-1685</key>
            <summary>Make the Highlighter use SpanScorer by default</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="markrmiller@gmail.com">Mark Miller</assignee>
                                <reporter username="markrmiller@gmail.com">Mark Miller</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Jun 2009 20:48:58 +0100</created>
                <updated>Wed, 28 Oct 2009 21:19:44 +0000</updated>
                    <resolved>Wed, 5 Aug 2009 14:34:46 +0100</resolved>
                                            <fixVersion>2.9</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12718629" author="mikemccand" created="Thu, 11 Jun 2009 21:30:53 +0100"  >&lt;blockquote&gt;&lt;p&gt;Make the Highlighter use SpanScorer by default&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think it makes sense as the default in Solr as well, and I mentioned that back when it was put in, but alas, its an option there as well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It has never been listed in a changes entry and its not in LIA 1, so you pretty much have to stumble upon it, and figure out what its for.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And... in working on LIA2, I had to ask for help on how to use it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Consumability is important.&lt;/p&gt;

&lt;p&gt;Can we do this for 2.9?&lt;/p&gt;

&lt;p&gt;I think not being buggy by default (w/ PhraseQuery, eg) is far more important that a small loss in performance.  Performance is secondary to correctness.&lt;/p&gt;</comment>
                    <comment id="12718658" author="markrmiller@gmail.com" created="Thu, 11 Jun 2009 23:36:20 +0100"  >&lt;p&gt;Didn&apos;t even have the actual highlighter code in my mind - you have to pass the Scorer to construct one anyway, so no back compat issue to speak of in any case.&lt;/p&gt;

&lt;p&gt;The real change will be in the documentation, and I suppose adding something to changes mentioning that you should probably switch? Can&apos;t bring myself to say that we should deprecate the QueryScorer - why not have both - but it would be nice to point out that the SpanScorer is the new &quot;default&quot; Scorer for correct highlighting.&lt;/p&gt;

&lt;p&gt;I&apos;ll work on a patch for the documentation and a changes entry suggestion. I&apos;m not sure there is anything stronger we can do here.&lt;/p&gt;</comment>
                    <comment id="12718660" author="markrmiller@gmail.com" created="Thu, 11 Jun 2009 23:38:38 +0100"  >&lt;p&gt;which reminds me, highlighter has no changes file. I&apos;ll make one as well.&lt;/p&gt;</comment>
                    <comment id="12718773" author="mikemccand" created="Fri, 12 Jun 2009 11:01:07 +0100"  >&lt;p&gt;Why not deprecate QueryScorer?  It&apos;s buggy, and leaving it in there, with such a juicy name, looking like the right choice, just makes Lucene&apos;s (highlighter&apos;s) quality look bad.  Correctness trumps performance.&lt;/p&gt;

&lt;p&gt;And then the javadocs should clearly favor SpanScorer... and I would include a clear code fragment showing how to use it all, in context.  EG this is what LIA2 currently has, which is fine to copy/modify/etc. to get into the javadocs:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testHits() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    IndexSearcher searcher = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexSearcher(TestUtil.getBookIndexDirectory());
    TermQuery query = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TermQuery(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Term(&lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;action&quot;&lt;/span&gt;));
    TopDocs hits = searcher.search(query, 10);

    Highlighter highlighter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Highlighter(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
    Analyzer analyzer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SimpleAnalyzer();
    
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; hits.scoreDocs.length; i++) {
      Document doc = searcher.doc(hits.scoreDocs[i].doc);
      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; title = doc.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;);

      TokenStream stream = TokenSources.getAnyTokenStream(searcher.getIndexReader(),
                                                          hits.scoreDocs[i].doc,
                                                          &lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;,
                                                          doc,
                                                          analyzer);
      SpanScorer scorer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SpanScorer(query, &lt;span class=&quot;code-quote&quot;&gt;&quot;title&quot;&lt;/span&gt;,
                                         &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CachingTokenFilter(stream));
      Fragmenter fragmenter = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SimpleSpanFragmenter(scorer);
      highlighter.setFragmentScorer(scorer);
      highlighter.setTextFragmenter(fragmenter);

      &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; fragment =
          highlighter.getBestFragment(stream, title);

      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(fragment);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would also be nice to simplify that usage, eg, is there some way to not have to make a SpanScorer (and, by extension, fragmenter) per query, but instead make it up-front and add a setter for the new TokenStream for each doc?  (Having to create Highlighter(null) is awkward).  Or I suppose we could simply make a new Highlighter, SpanScorer, SimpleSpanFragmenter per-hit, but that seems wasteful.&lt;/p&gt;</comment>
                    <comment id="12718827" author="yseeley@gmail.com" created="Fri, 12 Jun 2009 14:07:06 +0100"  >&lt;p&gt;I&apos;ve never gone deep into the highlighters, but I don&apos;t think we should deprecate QueryScorer unless SpanScorer is a true superset (i.e. you can get SpanScorer to act like QueryScorer if you want... minus any real bugs).  Highlighting is not an exact science.  Given a query of &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;span class=&quot;code-quote&quot;&gt;&quot;foo bar&quot;&lt;/span&gt; -baz&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Not everyone will agree (and it will be application specific) exactly what instances of foo, bar, and baz should be highlighted in the document.  But I agree that by default, we should try to only highlight what matches the query.&lt;/p&gt;</comment>
                    <comment id="12718838" author="markrmiller@gmail.com" created="Fri, 12 Jun 2009 14:54:01 +0100"  >&lt;p&gt;Agreed on all that Mike, I&apos;ll try to do that for 2.9.&lt;/p&gt;

&lt;p&gt;I also wanted to deprecate QueryScorer for a while, but I agree with Yonik that its kind of a feature, and we shouldn&apos;t toss it. You have a great point that keeping it around keeps things&lt;br/&gt;
confusing though. I can probably make the SpanScorer easily flip between both modes, defaulting to position sensitive.&lt;/p&gt;

&lt;p&gt;Actually, perhaps we deprecate SpanScorer and add the functionality to QueryScorer with the switch, default to position sensitive.&lt;/p&gt;</comment>
                    <comment id="12718855" author="mikemccand" created="Fri, 12 Jun 2009 15:42:40 +0100"  >&lt;p&gt;I consider it a bug that QueryScorer will separately highlight &quot;foo&quot; and &quot;bar&quot; when the PhraseQuery &quot;foo bar&quot; was searched on.&lt;/p&gt;

&lt;p&gt;Are there actually compelling things that QueryScorer does over SpanScorer?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Actually, perhaps we deprecate SpanScorer and add the functionality to QueryScorer with the switch, default to position sensitive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;And that way we keep the more consumable name (QueryScorer).&lt;/p&gt;</comment>
                    <comment id="12718858" author="yseeley@gmail.com" created="Fri, 12 Jun 2009 15:48:17 +0100"  >&lt;blockquote&gt;&lt;p&gt;I consider it a bug that QueryScorer will separately highlight &quot;foo&quot; and &quot;bar&quot; when the PhraseQuery &quot;foo bar&quot; was searched on. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right... but not everyone will agree.&lt;br/&gt;
We shouldn&apos;t deprecate functionality that we don&apos;t have a replacement for yet (esp since we&apos;ll be quickly removing deprecated stuff in 3.0).&lt;/p&gt;</comment>
                    <comment id="12718861" author="mikemccand" created="Fri, 12 Jun 2009 15:52:10 +0100"  >&lt;p&gt;OK.&lt;/p&gt;

&lt;p&gt;I think Mark&apos;s idea is great: absorb both into QueryScorer, making &quot;position aware&quot; the default.  Then if people somehow want the buggy PhraseQuery highlighting, they can switch it back.&lt;/p&gt;</comment>
                    <comment id="12737909" author="markrmiller@gmail.com" created="Sat, 1 Aug 2009 17:27:00 +0100"  >&lt;p&gt;Has the broad stokes - SpanScorer becomes QueryScorer, QueryScorer becomes QueryTermScorer, and QueryScorer gets a setTokenStream rather than passing it in the constructor.&lt;/p&gt;

&lt;p&gt;Not sure how to best preserve any history here since SpanScorer is moving to QueryScorer.&lt;/p&gt;</comment>
                    <comment id="12738143" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 00:16:34 +0100"  >&lt;p&gt;Another rev making things a little easier.&lt;/p&gt;

&lt;p&gt;QueryScorer now takes a TokenStream rather than a CachingTokenFilter - if there are any position sensitive clauses, the TokenStream will be wrapped in a CachingTokenFilter if it is not already a CachingTokenFilter.&lt;/p&gt;

&lt;p&gt;This also removes having to call setTokenStream after constructing a QueryScorer and between calls to getBestFragment - instead, the new init(TokenStream) that the Highlighter already calls is used. This frees the user from having to make that call.&lt;/p&gt;

&lt;p&gt;init(TokenStream) now can return a new TokenStream for the Highlighter to continue using (ie the QueryScorer may return a CachingTokenFilter if their is a position sensitive clause in the query) or null to keep using the same TokenStream.&lt;/p&gt;

&lt;p&gt;Now you can use the SpanScorer (as QueryScorer now) the same way you could use the old QueryScorer impl:&lt;/p&gt;

&lt;p&gt;    QueryScorer scorer =  new QueryScorer(query, FIELD_NAME);&lt;br/&gt;
    Highlighter highlighter = new Highlighter(this,scorer);&lt;br/&gt;
    highlighter.setTextFragmenter(new SimpleFragmenter(40));&lt;/p&gt;

&lt;p&gt;    for (int i = 0; i &amp;lt; hits.length(); i++) &lt;/p&gt;
{
      String text = hits.doc(i).get(FIELD_NAME);
      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));

      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,
          &quot;...&quot;);
      System.out.println(&quot;\t&quot; + result);
    }</comment>
                    <comment id="12738180" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 04:29:56 +0100"  >&lt;p&gt;Changed the constructors for QueryScorer to more closely match what was available before. Also, expandMultiTerm now defaults to true, and instead of being a constructor option, can be disabled with a method.&lt;/p&gt;

&lt;p&gt;Also cleaned up a bit more of the test class and added a Changes entry.&lt;/p&gt;</comment>
                    <comment id="12738560" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 21:26:58 +0100"  >&lt;p&gt;I&apos;ll commit this within a few days&lt;/p&gt;</comment>
                    <comment id="12739319" author="markrmiller@gmail.com" created="Wed, 5 Aug 2009 03:46:02 +0100"  >&lt;p&gt;I reopened this because I saw that changing benchmark to use QueryScorer rather than QueryTermScorer was failing, and at first it looked like it wasn&apos;t producing Highlights - I think the issue is with the Benchmark code (it just wans&apos;t counting the highlights), but I have reopened this just in case. When I can test and know for sure, I&apos;ll resolve this again.&lt;/p&gt;</comment>
                    <comment id="12739833" author="mikemccand" created="Thu, 6 Aug 2009 01:18:00 +0100"  >&lt;p&gt;Should we also default the fragmenter to SimpleSpanFragmenter?&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12431902">SOLR-1319</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12439333">LUCENE-2013</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12415305" name="LUCENE-1685.patch" size="58128" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 04:29:56 +0100" />
                    <attachment id="12415301" name="LUCENE-1685.patch" size="59570" author="markrmiller@gmail.com" created="Mon, 3 Aug 2009 00:16:33 +0100" />
                    <attachment id="12415241" name="LUCENE-1685.patch" size="55624" author="markrmiller@gmail.com" created="Sat, 1 Aug 2009 17:27:00 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 11 Jun 2009 20:30:53 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12073</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26042</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>