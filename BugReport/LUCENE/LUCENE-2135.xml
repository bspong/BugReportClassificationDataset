<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2135/LUCENE-2135.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2135] IndexReader.close should forcefully evict entries from FieldCache</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2135</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Spinoff of java-user thread &quot;heap memory issues when sorting by a string field&quot;.&lt;/p&gt;

&lt;p&gt;We rely on WeakHashMap to hold our FieldCache, keyed by reader.  But this lacks immediacy on releasing the reference, after a reader is closed.&lt;/p&gt;

&lt;p&gt;WeakHashMap can&apos;t free the key until the reader is no longer referenced by the app. And, apparently, WeakHashMap has a further impl detail that requires invoking one of its methods for it to notice that a key has just become only weakly reachable.&lt;/p&gt;

&lt;p&gt;To fix this, I think on IR.close we should evict entries from the FieldCache, as long as the sub-readers are truly closed (refCount dropped to 0).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12442712">LUCENE-2135</key>
            <summary>IndexReader.close should forcefully evict entries from FieldCache</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 Dec 2009 10:43:05 +0000</created>
                <updated>Fri, 18 Jun 2010 09:03:52 +0100</updated>
                    <resolved>Wed, 2 Jun 2010 10:37:01 +0100</resolved>
                                            <fixVersion>2.9.3</fixVersion>
                <fixVersion>3.0.2</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12787406" author="mikemccand" created="Tue, 8 Dec 2009 10:54:38 +0000"  >&lt;p&gt;This is not unlike what we had to do in creating CloseableThreadLocal... that was another case where  the underlying impl failed to free things as immediately as we&apos;d like.&lt;/p&gt;</comment>
                    <comment id="12787505" author="earwin" created="Tue, 8 Dec 2009 15:40:06 +0000"  >&lt;p&gt;A better approach is to don IR-keyed weakHashMaps completely and bind everything you need onto IR itself. That&apos;s how I do it and it works like a charm.&lt;/p&gt;</comment>
                    <comment id="12787509" author="thetaphi" created="Tue, 8 Dec 2009 15:43:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-831&quot; title=&quot;Complete overhaul of FieldCache API/Implementation&quot;&gt;LUCENE-831&lt;/a&gt;...&lt;/p&gt;</comment>
                    <comment id="12787514" author="yseeley@gmail.com" created="Tue, 8 Dec 2009 15:48:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;A better approach is to don IR-keyed weakHashMaps completely and bind everything you need onto IR itself. That&apos;s how I do it and it works like a charm.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be nice...  I&apos;d love to see a&lt;br/&gt;
Map&amp;lt;Object,Object&amp;gt; IndexReader.getInfo()&lt;br/&gt;
That was usable by anyone (not just the field cache) to associate stuff with a reader.&lt;/p&gt;</comment>
                    <comment id="12787552" author="earwin" created="Tue, 8 Dec 2009 16:02:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d love to see a Map&amp;lt;Object,Object&amp;gt; IndexReader.getInfo()&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m currently using - &amp;lt;T&amp;gt; T IndexReader.component(Class&amp;lt;T&amp;gt; key)&lt;br/&gt;
Plus a bundle of factories passed to IR on construction. Factories are called after IR is initialized, and also for child IRs and reopens. In case of reopens, besides new IR they are handed the component they produced for the current one (probably better just to pass old IR).&lt;/p&gt;

&lt;p&gt;I can try to conjure a patch this weekend.&lt;/p&gt;</comment>
                    <comment id="12787555" author="thetaphi" created="Tue, 8 Dec 2009 16:09:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m currently using - &amp;lt;T&amp;gt; T IndexReader.component(Class&amp;lt;T&amp;gt; key)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats much better than untyped. Same like AttributeSource.&lt;/p&gt;

&lt;p&gt;+1 for a patch.&lt;/p&gt;</comment>
                    <comment id="12787561" author="ck@newsclub.de" created="Tue, 8 Dec 2009 16:25:56 +0000"  >&lt;p&gt;Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt; for a refactoring of FieldCache, which also addresses these problems.&lt;/p&gt;</comment>
                    <comment id="12787585" author="earwin" created="Tue, 8 Dec 2009 17:14:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt; for a refactoring of FieldCache, which also addresses these problems. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It doesn&apos;t address a problem of adding custom components to IR. It also does complicate IR beyond that unholy mess it already is.&lt;/p&gt;

&lt;p&gt;I think it&apos;s better to have an ability to add &apos;any&apos; kind of component to IR, and then implement whateverCaches over it.&lt;/p&gt;</comment>
                    <comment id="12787599" author="ck@newsclub.de" created="Tue, 8 Dec 2009 17:57:09 +0000"  >&lt;p&gt;I haven&apos;t followed the aforementioned discussion on the mailing list, but I think this issue covers a few things that are not mentioned explicitly here. Maybe it is a good idea to summarize the actual problems/challenges/benefits in a few sentences?&lt;/p&gt;

&lt;p&gt;What I understand is that you plan to add arbitrary (cacheable) attributes to IndexReader. I suggest to move these features to the IndexCache proposed in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt;. Especially when using decorating IndexReaders (things like &quot;ReadOnlyIndexReader&quot;) you would not want to store attributes separately from the decorated IndexReader. The same probably applies to SegmentReader with all its clones.&lt;/p&gt;

&lt;p&gt;IndexCache would provide a common base for the extensions you mentioned. (i.e. you are welcome to apply your patches on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt;).&lt;/p&gt;</comment>
                    <comment id="12787603" author="mikemccand" created="Tue, 8 Dec 2009 18:03:26 +0000"  >&lt;p&gt;I would love to see a bigger solution here, but in the interim, I&lt;br/&gt;
think we should fix the current FieldCache (patch attached).&lt;/p&gt;

&lt;p&gt;The patch adds FieldCache.purge to the interface.  This is technically&lt;br/&gt;
a break in back-compat, to any external impls of FieldCache, but&lt;br/&gt;
that&apos;s such an insanely expert &amp;amp; difficult thing that I think it&apos;s&lt;br/&gt;
fine to make an exception.&lt;/p&gt;

&lt;p&gt;A few tests (incl back-compat) needed fixing, because they were&lt;br/&gt;
closing the reader in-between to calls to getInts and then incorrectly&lt;br/&gt;
asserting the int[]&apos;s were the same.&lt;/p&gt;</comment>
                    <comment id="12787610" author="thetaphi" created="Tue, 8 Dec 2009 18:08:04 +0000"  >&lt;p&gt;In 2.9. we wrote in the BW section, that FieldCache interface is no BW problem as nobody ever can implement it (because the FileCacheImpl singleton is the only used one). Ok, you can implement it without any use. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12787613" author="thetaphi" created="Tue, 8 Dec 2009 18:10:23 +0000"  >&lt;p&gt;In my opinion, all IndexReaders should call purge, mabe put it on toplevel IR.close default impl? Because if you request FieldCache from Top-level (which you should not do, but you can), it should also be purged.&lt;/p&gt;</comment>
                    <comment id="12787624" author="mikemccand" created="Tue, 8 Dec 2009 18:23:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;all IndexReaders should call purge, mabe put it on toplevel IR.close default impl? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm... this actually gets tricky to get right, because of the FieldCacheKey.&lt;/p&gt;

&lt;p&gt;EG on closing a SegmentReader that&apos;s a clone of another, you don&apos;t want to evict it from the FieldCache.&lt;/p&gt;

&lt;p&gt;I guess I could fix each of the IndexReader subclasses to evict themselves from the cache.  Let me look into that...&lt;/p&gt;</comment>
                    <comment id="12787626" author="yseeley@gmail.com" created="Tue, 8 Dec 2009 18:29:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmm... this actually gets tricky to get right, because of the FieldCacheKey.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s almost like we want two caches... one with entries that are independent of any changes in deleted docs (like the current FieldCache), and one that isn&apos;t.&lt;/p&gt;</comment>
                    <comment id="12787633" author="mikemccand" created="Tue, 8 Dec 2009 18:37:50 +0000"  >&lt;p&gt;New patch, also evicts the other subclasses of IR from FieldCache.&lt;/p&gt;</comment>
                    <comment id="12787644" author="thetaphi" created="Tue, 8 Dec 2009 18:45:13 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I just noticed, it is even possible to retrieve a field cache from the FilterIndexReader and that would be a duplicate of the dlegate&apos;s cache. Very ugly.&lt;/p&gt;</comment>
                    <comment id="12787650" author="mikemccand" created="Tue, 8 Dec 2009 18:51:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;it is even possible to retrieve a field cache from the FilterIndexReader and that would be a duplicate of the dlegate&apos;s cache. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, not good.  Should we default getFieldCacheKey to delegate?  A subclass of FIR would presumably need to then override if their filtering altered what&apos;s in the field cache.&lt;/p&gt;</comment>
                    <comment id="12787652" author="thetaphi" created="Tue, 8 Dec 2009 18:56:26 +0000"  >&lt;p&gt;+1 Good idea, just add a note to the method javadocs, that you have to override this, if you change the contents by the filter.&lt;/p&gt;</comment>
                    <comment id="12787659" author="ck@newsclub.de" created="Tue, 8 Dec 2009 19:00:47 +0000"  >&lt;p&gt;Honestly, please have a look at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt;, I really think it is a good starting point to solve all these problems. Could we perhaps merge the two issues (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2135&quot; title=&quot;IndexReader.close should forcefully evict entries from FieldCache&quot;&gt;&lt;del&gt;LUCENE-2135&lt;/del&gt;&lt;/a&gt;)?&lt;/p&gt;

&lt;p&gt;A quick summary of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;The patch allows one or more IndexReaders to share common cache information (whatever this is), stored in the same &quot;IndexCache&quot; instance. The IndexCache is designed to contain &lt;b&gt;any&lt;/b&gt; cacheable/volatile information that can be regenerated from the IndexReader.&lt;/p&gt;

&lt;p&gt;For example: all clones of SegmentReader share the same SegmentReaderIndexCache with the original instance, containing the ThreadLocals of the &quot;core reader&quot;.&lt;br/&gt;
By default (for all IndexReader classes) the IndexCache provides access to the &quot;IndexFieldCache&quot; (a non-static reimplementation of FieldCache).&lt;/p&gt;


&lt;p&gt;To provide arbitrary cacheable objects we could now extend IndexCache by a simple HashMap (it does not need to be a WeakHashMap, since the IndexCache is closed and purged as soon as the original IndexReader is closed).&lt;/p&gt;

&lt;p&gt;If you wish so, with the help of IndexCache we might even easily implement two different field caches for the same IndexCache instance, one that changes with deleted docs and another one that does not. Basically we may add any other kind of cache at a later point &lt;b&gt;without&lt;/b&gt; touching IndexReader again. To re-use Earwin Burrfoot statement from above, that would then &lt;b&gt;not&lt;/b&gt; &quot;complicate IndexReader beyond that unholy mess it already is.&quot; &lt;/p&gt;</comment>
                    <comment id="12787689" author="mikemccand" created="Tue, 8 Dec 2009 19:37:24 +0000"  >&lt;p&gt;I definitely plan to have a look at &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt;, but that&apos;s a rather large (and, good, on first read!) change to Lucene.  I just don&apos;t think it should hold this small change up.&lt;/p&gt;</comment>
                    <comment id="12787693" author="mikemccand" created="Tue, 8 Dec 2009 19:37:58 +0000"  >&lt;p&gt;New patch, adds override to FIR.getFieldCacheKey&lt;/p&gt;</comment>
                    <comment id="12787696" author="earwin" created="Tue, 8 Dec 2009 19:39:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;To provide arbitrary cacheable objects we could now extend IndexCache by a simple HashMap (it does not need to be a WeakHashMap, since the IndexCache is closed and purged as soon as the original IndexReader is closed).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If I&apos;m reading your patch right, to add something as a user to DirectoryReader+SegmentReader, I have to extend SegmentReaderIndexCache, IndexCache, then extend SegmentReader and DirectoryReader, and override all methods in DirectoryReader that create SegmentReader.&lt;/p&gt;

&lt;p&gt;My aim is to be able to bind stuff to readers without overriding them, delegating, or touching in any manner except providing certain factories on creation.&lt;/p&gt;</comment>
                    <comment id="12787710" author="ck@newsclub.de" created="Tue, 8 Dec 2009 20:04:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;If I&apos;m reading your patch right, to add something as a user to DirectoryReader+SegmentReader, I have to extend SegmentReaderIndexCache, IndexCache, then extend SegmentReader and DirectoryReader, and override all methods in DirectoryReader that create SegmentReader.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, the functionality you intend to have is just not there at the moment. But it could be added directly to IndexCache (and thus, to all subclasses of IndexCache automatically).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My aim is to be able to bind stuff to readers without overriding them, delegating, or touching in any manner except providing certain factories on creation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could add getProperty/setProperty methods to IndexCache. You could then bind/get arbitrary objects as follows:&lt;/p&gt;

&lt;p&gt;IndexReader ir = // somehow create your new reader&lt;br/&gt;
IndexCache cache = ir.getIndexCache();&lt;br/&gt;
Object someObject = cache.getProperty(someKey);&lt;br/&gt;
cache.setProperty(&quot;org.example.someCoolProperty&quot;, anotherObject);&lt;/p&gt;

&lt;p&gt;(Personally, I prefer standardized string keys to avoid collisions, just like in the Servlet API, for example)&lt;/p&gt;

&lt;p&gt;Again, this is not yet implemented, but could be done easily, without affecting any existing IndexReader or the other changes on FieldCache etc.&lt;/p&gt;</comment>
                    <comment id="12788959" author="ck@newsclub.de" created="Thu, 10 Dec 2009 22:00:34 +0000"  >&lt;p&gt;There is some discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2133&quot; title=&quot;[PATCH] IndexCache: Refactoring of FieldCache, FieldComparator, SortField&quot;&gt;LUCENE-2133&lt;/a&gt; where we need a decision that also affects this issue. Could you please check and comment?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;br/&gt;
Christian&lt;/p&gt;</comment>
                    <comment id="12873419" author="mikemccand" created="Sun, 30 May 2010 13:34:13 +0100"  >&lt;p&gt;backport&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12442706">LUCENE-2133</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12427375" name="LUCENE-2135.patch" size="11577" author="mikemccand" created="Tue, 8 Dec 2009 19:37:58 +0000" />
                    <attachment id="12427359" name="LUCENE-2135.patch" size="11200" author="mikemccand" created="Tue, 8 Dec 2009 18:37:50 +0000" />
                    <attachment id="12427357" name="LUCENE-2135.patch" size="5973" author="mikemccand" created="Tue, 8 Dec 2009 18:03:26 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Dec 2009 15:40:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11646</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25590</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>