<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:27:56 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1282/LUCENE-1282.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1282] Sun hotspot compiler bug in 1.6.0_04/05 affects Lucene</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1282</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is not a Lucene bug.  It&apos;s an as-yet not fully characterized Sun&lt;br/&gt;
JRE bug, as best I can tell.  I&apos;m opening this to gather all things we&lt;br/&gt;
know, and to work around it in Lucene if possible, and maybe open an&lt;br/&gt;
issue with Sun if we can reduce it to a compact test case.&lt;/p&gt;

&lt;p&gt;It&apos;s hit at least 3 users:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200803.mbox/%3c8c4e68610803180438x39737565q9f97b4802ed774a5@mail.gmail.com%3e&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200803.mbox/%3c8c4e68610803180438x39737565q9f97b4802ed774a5@mail.gmail.com%3e&lt;/a&gt;&lt;br/&gt;
  &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-solr-user/200804.mbox/%3c4807654E.7050900@virginia.edu%3e&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-solr-user/200804.mbox/%3c4807654E.7050900@virginia.edu%3e&lt;/a&gt;&lt;br/&gt;
  &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200805.mbox/%3c733777220805060156t7fdb8fectf0bc984fbfe48a22@mail.gmail.com%3e&quot; class=&quot;external-link&quot;&gt;http://mail-archives.apache.org/mod_mbox/lucene-java-user/200805.mbox/%3c733777220805060156t7fdb8fectf0bc984fbfe48a22@mail.gmail.com%3e&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&apos;s specific to at least JRE 1.6.0_04 and 1.6.0_05, that affects&lt;br/&gt;
Lucene.  Whereas 1.6.0_03 works OK and it&apos;s unknown whether 1.6.0_06&lt;br/&gt;
shows it.&lt;/p&gt;

&lt;p&gt;The bug affects bulk merging of stored fields.  When it strikes, the&lt;br/&gt;
segment produced by a merge is corrupt because its fdx file (stored&lt;br/&gt;
fields index file) is missing one document.  After iterating many&lt;br/&gt;
times with the first user that hit this, adding diagnostics &amp;amp;&lt;br/&gt;
assertions, its seems that a call to fieldsWriter.addDocument some&lt;br/&gt;
either fails to run entirely, or, fails to invoke its call to&lt;br/&gt;
indexStream.writeLong.  It&apos;s as if when hotspot compiles a method,&lt;br/&gt;
there&apos;s some sort of race condition in cutting over to the compiled&lt;br/&gt;
code whereby a single method call fails to be invoked (speculation).&lt;/p&gt;

&lt;p&gt;Unfortunately, this corruption is silent when it occurs and only later&lt;br/&gt;
detected when a merge tries to merge the bad segment, or an&lt;br/&gt;
IndexReader tries to open it.  Here&apos;s a typical merge exception:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-10&quot;&lt;/span&gt; 
org.apache.lucene.index.MergePolicy$MergeException: 
org.apache.lucene.index.CorruptIndexException:
    doc counts differ &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; segment _3gh: fieldsReader shows 15999 but segmentInfo shows 16000
        at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:271)
Caused by: org.apache.lucene.index.CorruptIndexException: doc counts differ &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; segment _3gh: fieldsReader shows 15999 but segmentInfo shows 16000
        at org.apache.lucene.index.SegmentReader.initialize(SegmentReader.java:313)
        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:262)
        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:221)
        at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3099)
        at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:2834)
        at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:240)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and here&apos;s a typical exception hit when opening a searcher:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.lucene.index.CorruptIndexException: doc counts differ &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; segment _kk: fieldsReader shows 72670 but segmentInfo shows 72671
        at org.apache.lucene.index.SegmentReader.initialize(SegmentReader.java:313)
        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:262)
        at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:230)
        at org.apache.lucene.index.DirectoryIndexReader$1.doBody(DirectoryIndexReader.java:73)
        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:636)
        at org.apache.lucene.index.DirectoryIndexReader.open(DirectoryIndexReader.java:63)
        at org.apache.lucene.index.IndexReader.open(IndexReader.java:209)
        at org.apache.lucene.index.IndexReader.open(IndexReader.java:173)
        at org.apache.lucene.search.IndexSearcher.&amp;lt;init&amp;gt;(IndexSearcher.java:48)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sometimes, adding -Xbatch (forces up front compilation) or -Xint&lt;br/&gt;
(disables compilation) to the java command line works around the&lt;br/&gt;
issue.&lt;/p&gt;

&lt;p&gt;Here are some of the OS&apos;s we&apos;ve seen the failure on:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;SuSE 10.0
Linux phoebe 2.6.13-15-smp #1 SMP Tue Sep 13 14:56:15 UTC 2005 x86_64 
x86_64 x86_64 GNU/Linux 

SuSE 8.2
Linux phobos 2.4.20-64GB-SMP #1 SMP Mon Mar 17 17:56:03 UTC 2003 i686 
unknown unknown GNU/Linux 

Red Hat Enterprise Linux Server release 5.1 (Tikanga)
Linux lab8.betech.virginia.edu 2.6.18-53.1.14.el5 #1 SMP Tue Feb 19 
07:18:21 EST 2008 i686 i686 i386 GNU/Linux
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ve already added assertions to Lucene to detect when this bug&lt;br/&gt;
strikes, but since assertions are not usually enabled, I plan to add a&lt;br/&gt;
real check to catch when this bug strikes &lt;b&gt;before&lt;/b&gt; we commit the merge&lt;br/&gt;
to the index.  This way we can detect &amp;amp; quarantine the failure and&lt;br/&gt;
prevent corruption from entering the index.&lt;/p&gt;
</description>
                <environment></environment>
            <key id="12395764">LUCENE-1282</key>
            <summary>Sun hotspot compiler bug in 1.6.0_04/05 affects Lucene</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sat, 10 May 2008 09:29:03 +0100</created>
                <updated>Sat, 11 Oct 2008 13:49:37 +0100</updated>
                    <resolved>Wed, 30 Jul 2008 18:56:24 +0100</resolved>
                            <version>2.3</version>
                <version>2.3.1</version>
                                <fixVersion>2.4</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>5</votes>
                        <watches>8</watches>
                                                    <comments>
                    <comment id="12595946" author="psmith@apache.org" created="Sun, 11 May 2008 23:40:32 +0100"  >&lt;p&gt;Another workaround might be to use &apos;-client&apos; instead of the default &apos;-server&apos; (for server class machines).  This affects a few things, not least this switch:&lt;/p&gt;

&lt;p&gt;-XX:CompileThreshold=10000 	Number of method invocations/branches before compiling &lt;span class=&quot;error&quot;&gt;&amp;#91;-client: 1,500&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;-server implies a 10000 value.  I have personally observed similar behaviour like problems like the above with -server, and usually -client ends up &apos;solving&apos; them.&lt;/p&gt;

&lt;p&gt;I&apos;m sure there was also a way to mark a method to not jit compile too (rather than resort to -Xint which disables i for everything), but now I cant&apos; find what that syntax is at all.&lt;/p&gt;</comment>
                    <comment id="12595957" author="bruce@jivesoftware.com" created="Mon, 12 May 2008 01:34:05 +0100"  >&lt;p&gt;From Mark Miller on the developer&apos;s mailing list:&lt;/p&gt;

&lt;p&gt;Here&apos;s a couple examples of that exclude method syntax (had to use it recently with eclipse):&lt;/p&gt;

&lt;p&gt;-XX:CompileCommand=exclude,org/apache/lucene/index/IndexReader\$1,doBody&lt;br/&gt;
-XX:CompileCommand=exclude,org/eclipse/core/internal/dtree/DataTreeNode,forwardDeltaWith&lt;/p&gt;
</comment>
                    <comment id="12596605" author="stuhood" created="Wed, 14 May 2008 02:49:21 +0100"  >&lt;p&gt;I&apos;ve also been struck by this bug, with Lucene 2.3.2. I&apos;d been running for a while with JRE 1.6.0_05 when I noticed it, so I downgraded to JRE 1.6.0_02 to try and work around it, but no luck.&lt;/p&gt;

&lt;p&gt;Could a bugged index created with JRE 1.6.0_05 be causing addIndexesNoOptimize to trigger this bug, even with JRE 1.6.0_02?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                    <comment id="12596661" author="mikemccand" created="Wed, 14 May 2008 08:44:35 +0100"  >&lt;blockquote&gt;&lt;p&gt;Could a bugged index created with JRE 1.6.0_05 be causing addIndexesNoOptimize to trigger this bug, even with JRE 1.6.0_02&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, yes.  Once the corruption enters the index, then no matter which JRE you are using, you will hit that exception.&lt;/p&gt;

&lt;p&gt;In your case, I can see that indeed segment _2y9, which is pre-existing when you call addIndexesNoOptimize, is the corrupt segment.&lt;/p&gt;

&lt;p&gt;In general, you can use CheckIndex to see if you have any latent corruption.&lt;/p&gt;

&lt;p&gt;I&apos;m afraid you either have to run CheckIndex -fix to remove that segment (and possibly others that are also corrupt) from your index, or, create a new index.&lt;/p&gt;

&lt;p&gt;This bug is very frustrating!&lt;/p&gt;

&lt;p&gt;Can you describe how you built up this index?  EG was this bulk created (open a single writer, add all the docs, close it), or, created with many separate instances of IndexWriter over time?  Were documents added via add/updateDocument or via addIndexes*?  Do you run the JRE with any &quot;interesting&quot; command-line options?  I&apos;d really like to narrow down the &quot;typical&quot; cases when this bug strikes if we can...&lt;/p&gt;</comment>
                    <comment id="12596673" author="nick.menere" created="Wed, 14 May 2008 09:42:56 +0100"  >&lt;p&gt;We had a lot of customers &lt;a href=&quot;http://jira.atlassian.com/browse/JRA-9198&quot; class=&quot;external-link&quot;&gt;report this bug&lt;/a&gt;, though it was about 2 years ago that sun fixed this so we only see it in very rare cases now, and even then our fix is... &quot;Please upgrade you JVM&quot;.&lt;/p&gt;

&lt;p&gt;I am flat out at the moment, but if you need, I will try and get some more info on this if you want.&lt;/p&gt;</comment>
                    <comment id="12596674" author="nick.menere" created="Wed, 14 May 2008 09:47:35 +0100"  >&lt;p&gt;Actually, not convinced it is the same bug.. We kept getting complete JVM crashes...  I just assumed it was (I wouldn&apos;t be surprised if it was related though).&lt;/p&gt;</comment>
                    <comment id="12596764" author="mikemccand" created="Wed, 14 May 2008 14:59:15 +0100"  >&lt;p&gt;Another datapoint from Ian Lea:&lt;/p&gt;

&lt;p&gt;My job (&lt;a href=&quot;http://lucene.markmail.org/message/awkkunr7j24nh4qj&quot; class=&quot;external-link&quot;&gt;http://lucene.markmail.org/message/awkkunr7j24nh4qj&lt;/a&gt;) still&lt;br/&gt;
fails with java version 1.6.0_06 (build 1.6.0_06-b02), downloaded&lt;br/&gt;
today, with both lucene 2.3.1 and 2.3.2.&lt;/p&gt;

&lt;p&gt;For me, downgrading to 1.6.0_03-b05 fixed things.&lt;/p&gt;</comment>
                    <comment id="12596949" author="mikemccand" created="Wed, 14 May 2008 22:40:04 +0100"  >
&lt;p&gt;I finally managed to reproduce this JVM bug, except, my case happens&lt;br/&gt;
while merging term vectors (mergeVectors) not stored fields as all&lt;br/&gt;
other cases seem to be.&lt;/p&gt;

&lt;p&gt;I&apos;m running JRE 1.6.0_05 on a Debian Linux box.&lt;/p&gt;

&lt;p&gt;In my case, which just uses a modified contrib/benchmark to add 2000&lt;br/&gt;
wikipedia docs to a large index, I got to the point (when index was 19&lt;br/&gt;
GB) where every single time I run the benchmark alg, it hits an&lt;br/&gt;
exception.  Often the exception looks like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;Lucene Merge &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt; #0&quot;&lt;/span&gt; org.apache.lucene.index.MergePolicy$MergeException: java.io.IOException: read past EOF
	at org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:323)
	at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:300)
Caused by: java.io.IOException: read past EOF
	at org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:146)
	at org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:38)
	at org.apache.lucene.store.IndexInput.readInt(IndexInput.java:68)
	at org.apache.lucene.store.IndexInput.readLong(IndexInput.java:91)
	at org.apache.lucene.index.TermVectorsReader.get(TermVectorsReader.java:345)
	at org.apache.lucene.index.SegmentReader.getTermFreqVectors(SegmentReader.java:992)
	at org.apache.lucene.index.SegmentMerger.mergeVectors(SegmentMerger.java:441)
	at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:138)
	at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3998)
	at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3650)
	at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:214)
	at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:269)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then added the same check that we now have for mergeFields, ie, to&lt;br/&gt;
verify the size of index file (_X.tvx) matches the number of&lt;br/&gt;
documents merged.  Sometimes, however, I see this different exception:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Exception in thread &lt;span class=&quot;code-quote&quot;&gt;&quot;Lucene Merge &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt; #0&quot;&lt;/span&gt; org.apache.lucene.index.MergePolicy$MergeException: java.lang.ArrayIndexOutOfBoundsException: 9375
	at org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:323)
	at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:300)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 9375
	at org.apache.lucene.store.BufferedIndexOutput.writeByte(BufferedIndexOutput.java:36)
	at org.apache.lucene.store.IndexOutput.writeVInt(IndexOutput.java:71)
	at org.apache.lucene.index.TermVectorsWriter.addAllDocVectors(TermVectorsWriter.java:76)
	at org.apache.lucene.index.SegmentMerger.mergeVectors(SegmentMerger.java:443)
	at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:138)
	at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3998)
	at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3650)
	at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:214)
	at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:269)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where the particular array index would vary all over the place.  This&lt;br/&gt;
is VERY odd because that array is the buffer in BufferedIndexOutput&lt;br/&gt;
and is always allocated to 16384 bytes so 9375 (and all others I saw)&lt;br/&gt;
is &lt;b&gt;not&lt;/b&gt; out of bounds.&lt;/p&gt;

&lt;p&gt;JRE 1.5.0_08 always runs fine.  Likewise running JRE 1.6.0_05 with&lt;br/&gt;
-Xint also runs fine.  However, JRE 1.6.0_05 with -Xbatch still hits&lt;br/&gt;
exceptions.&lt;/p&gt;

&lt;p&gt;So then I started testing &quot;trivial&quot; modifications to the Java source&lt;br/&gt;
code in the mergeVectors, and found, insanely, that this simple diff&lt;br/&gt;
completely stopped the exceptions:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;             } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
-              termVectorsWriter.addAllDocVectors(reader.getTermFreqVectors(docNum));
+              &lt;span class=&quot;code-comment&quot;&gt;// NOTE: it&apos;s very important to first assign
&lt;/span&gt;+              &lt;span class=&quot;code-comment&quot;&gt;// to vectors then pass it to
&lt;/span&gt;+              &lt;span class=&quot;code-comment&quot;&gt;// termVectorsWriter.addAllDocVectors; see
&lt;/span&gt;+              &lt;span class=&quot;code-comment&quot;&gt;// LUCENE-1282
&lt;/span&gt;+              TermFreqVector[] vectors = reader.getTermFreqVectors(docNum);
+              termVectorsWriter.addAllDocVectors(vectors);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(Ie, just forcing an assignment to a local variable).&lt;/p&gt;

&lt;p&gt;It&apos;s crazy that such a trivial mod actually makes a difference in this&lt;br/&gt;
JRE bug (I would have expected it to be optimized away fairly early on&lt;br/&gt;
in compilation), but, I&apos;m quite sure that diff resolves at least the&lt;br/&gt;
exceptions I&apos;ve been seeing.  So I plan to commit this JRE bug&lt;br/&gt;
workaround to 2.4 &amp;amp; 2.3 branch.&lt;/p&gt;

&lt;p&gt;I still haven&apos;t been able to hit the JRE bug when merging stored&lt;br/&gt;
fields, but, I&apos;m still making that same corresponding mod to&lt;br/&gt;
mergeFields.&lt;/p&gt;</comment>
                    <comment id="12596956" author="yseeley@gmail.com" created="Wed, 14 May 2008 22:51:51 +0100"  >&lt;p&gt;See, that complex code even confuses the JVM &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Awesome job coming up with this workaround! (crosses fingers for stored fields)&lt;/p&gt;</comment>
                    <comment id="12596962" author="ijuma" created="Wed, 14 May 2008 23:14:00 +0100"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Great work on tracking this down, it looks like a very nasty bug. Has it been reported to Sun yet? It seems like the kind of bug that could manifest itself in other places too, so important to get a real fix.&lt;/p&gt;</comment>
                    <comment id="12596964" author="psmith@apache.org" created="Wed, 14 May 2008 23:17:35 +0100"  >&lt;p&gt;Throwing up an idea here for consideration.  I&apos;m sure it could be shot down, but I thought I&apos;d raise it just in case it hasn&apos;t already been considered and discarded.. &lt;/p&gt;

&lt;p&gt;One of the &lt;em&gt;classic&lt;/em&gt; problems between -client and -server mode is the way the CPU registers are used.  Is it possible that some of the fields are suffering from concurrency issues?  I was wondering if, say, BufferedInfexOutput.buffer* may need to be marked volatile ?&lt;/p&gt;

&lt;p&gt;One easy way to test if this makes a difference is to just try switching between explicit use of &apos;-client&apos; and &apos;-server&apos;.  Most newer machines (even desktops &amp;amp; laptops) appear to qualify for Sun&apos;s &apos;am I a server-class machine&apos; check.  By switching to -client, if these problems disappear, this to me would smell more and more like a &apos;volatile&apos; like behaviour, because AIUI, -server will be more aggressive with some of it&apos;s register optimizations and I&apos;ve seen behaviour just like this where variables that have clearly been written, the changes are not &apos;appearing&apos; on the other side.  Even the same thread marking the change can be switched across to a different CPU right in the middle, and could see different results.&lt;/p&gt;

&lt;p&gt;Of course those people with lots of concurrency experience can probably dismiss this theory in a second, but that&apos;s fine.  &lt;/p&gt;</comment>
                    <comment id="12597042" author="mikemccand" created="Thu, 15 May 2008 08:57:11 +0100"  >&lt;blockquote&gt;&lt;p&gt;Has it been reported to Sun yet? It seems like the kind of bug that could manifest itself in other places too, so important to get a real fix.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not yet, but I intend to.  I&apos;m trying to whittle it down.  I agree the bug is nasty and could strike again at any time.  The AIOOB exceptions I was hitting were truly bizarre.&lt;/p&gt;</comment>
                    <comment id="12597048" author="mikemccand" created="Thu, 15 May 2008 09:04:47 +0100"  >&lt;blockquote&gt;
&lt;p&gt;One of the classic problems between -client and -server mode is the way the CPU registers are used. Is it possible that some of the fields are suffering from concurrency issues? I was wondering if, say, BufferedInfexOutput.buffer* may need to be marked volatile ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In my 100% reproducible case of this JRE bug, I&apos;m using only 1 thread, so I don&apos;t think a volatile should be necessary here.&lt;/p&gt;

&lt;p&gt;But I like your idea to try -client vs -server &amp;#8211; I will test that &amp;amp; post back.  The more data we can gather the better... I did find it interesting that -Xbatch did NOT resolve it, but has for at least one of the above users.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering if it has something to do with writing to large (&amp;gt; 32 bit) files.  In my test case, the index keeps kicking off a large merge (produces 2.7 GB segment) and it&apos;s that merge that trips the bug.&lt;/p&gt;</comment>
                    <comment id="12597052" author="mikemccand" created="Thu, 15 May 2008 09:13:26 +0100"  >&lt;blockquote&gt;&lt;p&gt;In my 100% reproducible case of this JRE bug, I&apos;m using only 1 thread, so I don&apos;t think a volatile should be necessary here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Woops: I am, however, using the default ConcurrentMergeScheduler, so this very-large merge runs in its own thread.  Still, it&apos;s only that one thread that&apos;s accessing this code/state, so by the spec volatile should not be necessary.&lt;/p&gt;</comment>
                    <comment id="12597078" author="mikemccand" created="Thu, 15 May 2008 11:22:24 +0100"  >&lt;p&gt;OK: running with -client prevents the bug.&lt;/p&gt;

&lt;p&gt;Running with SerialMergeScheduler still shows the bug.&lt;/p&gt;

&lt;p&gt;I&apos;m going to try to make a standalone test that just runs this one merge....&lt;/p&gt;</comment>
                    <comment id="12597919" author="mikemccand" created="Mon, 19 May 2008 12:06:08 +0100"  >&lt;p&gt;Using the 19 GB index I have that consistently reproduces this hotspot bug, I boiled the bug down to a very small testcase that no longer involves Lucene.&lt;/p&gt;

&lt;p&gt;However, this occurence of the bug is slightly different: for me, by specifying -Xbatch to java command line, the bug consistently happens.  It only rarely happens without -Xbatch.  Nonetheless, I&apos;m hopeful that if Sun fixes this one test case properly, it will fix all the odd exceptions we&apos;ve been seeing from this code.&lt;/p&gt;

&lt;p&gt;I opened the bug 4 days ago (5/15) with &lt;a href=&quot;http://bugs.sun.com&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com&lt;/a&gt;, but have yet to hear if it&apos;s been accepted as a real bug.&lt;/p&gt;

&lt;p&gt;if others could try out the code below on their Linux boxes, using 1.6.0_04/05 of Sun&apos;s java, specifying -Xbatch, to see if the bug can be reproduced, that&apos;d be great.&lt;/p&gt;

&lt;p&gt;Here&apos;s the bug I opened:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Date Created: Thu May 15 11:53:15 MDT 2008
Type:        bug
Customer Name:   Michael McCandless
Customer Email:  mail@mikemccandless.com
SDN ID:       mail@mikemccandless.com
status:      Waiting
Category:    hotspot
Subcategory: runtime_system
Company:     IBM
release:     6
hardware:    x86
OSversion:   linux
priority:    4
Synopsis:    Simple code runs incorrectly with -Xbatch
Description:
 FULL PRODUCT VERSION :
java version &lt;span class=&quot;code-quote&quot;&gt;&quot;1.6.0_06&quot;&lt;/span&gt;
Java(TM) SE &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt; Environment (build 1.6.0_06-b02)
Java HotSpot(TM) Server VM (build 10.0-b22, mixed mode)



FULL OS VERSION :
Linux 2.6.22.1 #7 SMP PREEMPT Tue Mar 18 18:22:09 EDT 2008 i686 GNU/Linux

A DESCRIPTION OF THE PROBLEM :
On the Apache Lucene project, we&apos;ve now had 4 users hit by an apparent
JRE bug.  When &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; bug strikes, it silently corrupts the search
index, which is very costly to the user (makes the index unusable).
Details are here:

  https:&lt;span class=&quot;code-comment&quot;&gt;//issues.apache.org/jira/browse/LUCENE-1282
&lt;/span&gt;
I can reliably reproduce the bug, but only on a very large (19 GB)
search index.  But I narrowed down one variant of the bug to attached
test &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;.



THE PROBLEM WAS REPRODUCIBLE WITH -Xint FLAG: No

THE PROBLEM WAS REPRODUCIBLE WITH -server FLAG: Yes

STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Compile and run the attached code (Crash.java), with -Xbatch and it should fail (ie, &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; the
RuntimeException, incorrectly).  It should pass without -Xbatch.





EXPECTED VERSUS ACTUAL BEHAVIOR :
Expected is no RuntimeException should be thrown.  Actual is it is thrown.
REPRODUCIBILITY :
This bug can be reproduced always.

---------- BEGIN SOURCE ----------
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class Crash {

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) {
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Crash().crash();
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; alwaysNull;

  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void crash() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Throwable {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; r = 0; r &amp;lt; 3; r++) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; docNum = 0; docNum &amp;lt; 10000;) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (r &amp;lt; 2) {
          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j=0;j&amp;lt;3000;j++)
            docNum++;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
          docNum++;
          doNothing(getNothing());
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (alwaysNull != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
            &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;BUG: checkAbort is always &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;: r=&quot;&lt;/span&gt; + r + &lt;span class=&quot;code-quote&quot;&gt;&quot; of 3; docNum=&quot;&lt;/span&gt; + docNum);
          }
        }
      }
    }
  }

  &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; getNothing() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;;
  }

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x;
  void doNothing(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
    x++;
  }
}


---------- END SOURCE ----------

CUSTOMER SUBMITTED WORKAROUND :
Don&apos;t specify -Xbatch.  You can also tweak the code to have it pass the test.  Reducing the 10000
or 3000 low enough makes it pass.  Changing the doNothing(...)  line
to assign the result of getNothing() to an intermediate variable
first, also passes (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is the approach we plan to use &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; Lucene). Removing the x++ also passes.
workaround:  
comments:    (company - IBM , email - mail@mikemccandless.com)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12597926" author="ijuma" created="Mon, 19 May 2008 12:36:33 +0100"  >&lt;p&gt;Great work finding a reduced test-case. I tried the sample application with JDK6u4 32-bit and I can add the following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;It always happens with -Xbatch -server when the code is compiled with javac.&lt;/li&gt;
	&lt;li&gt;It happens sometimes (sometimes after 3 attempts, sometimes after 10, etc.) with -server when the code is compiled with javac.&lt;/li&gt;
	&lt;li&gt;I am unable to reproduce it when compiling with the eclipse compiler (running from the command-line to avoid any other differences)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12597931" author="ijuma" created="Mon, 19 May 2008 13:02:51 +0100"  >&lt;p&gt;Btw, if I increase the number of iterations to 1000000 for docNum and 300000 for j I can reproduce it every time without -Xbatch.&lt;/p&gt;</comment>
                    <comment id="12598457" author="ijuma" created="Tue, 20 May 2008 21:43:48 +0100"  >&lt;p&gt;It&apos;s worth noting that jdk 6u10 beta b24 (released today) and openjdk6 in Fedora 9 are also affected by the problem shown in the test-case.&lt;/p&gt;</comment>
                    <comment id="12598807" author="mikemccand" created="Wed, 21 May 2008 22:55:48 +0100"  >&lt;p&gt;This bug is spooky.  I tried another workaround, which is to just increment an unused variable, instead of the above diff but at the same spot.  That then causes the JRE to reliably crash (SEGV).  I&apos;m attaching the hs_err log.&lt;/p&gt;

&lt;p&gt;Sun has not yet &quot;accepted&quot; my bug.  If/when they do, I&apos;ll attach this error log to it.&lt;/p&gt;</comment>
                    <comment id="12598954" author="mikemccand" created="Thu, 22 May 2008 10:26:55 +0100"  >&lt;p&gt;OK I&apos;ve committed the workaround &amp;amp; bug detection to trunk (2.4) and 2.3 branch.&lt;/p&gt;

&lt;p&gt;At this point I think that&apos;s all we can do here; we are now waiting on Sun to fix the JRE bug.&lt;/p&gt;</comment>
                    <comment id="12599405" author="andreaskohn" created="Fri, 23 May 2008 16:44:37 +0100"  >&lt;p&gt;We&apos;ve seen this bug (rarely) when indexing quite huge amounts of data.&lt;/p&gt;

&lt;p&gt;Just to add some datapoints, attached is &lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12382671/12382671_crashtest&quot; title=&quot;crashtest attached to LUCENE-1282&quot;&gt;crashtest&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt;, using the above Crash.java to test all java VMs I have currently available.&lt;br/&gt;
&lt;span class=&quot;nobr&quot;&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12382672/12382672_crashtest.log&quot; title=&quot;crashtest.log attached to LUCENE-1282&quot;&gt;crashtest.log&lt;sup&gt;&lt;img class=&quot;rendericon&quot; src=&quot;https://issues.apache.org/jira/images/icons/link_attachment_7.gif&quot; height=&quot;7&quot; width=&quot;7&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/sup&gt;&lt;/a&gt;&lt;/span&gt; contains the output. &lt;/p&gt;

&lt;p&gt;Tests were run on a loaded EM64T dual core machine with fedora 9/x86_64, all VMs are 64bit. The openjdk is a build from yesterdays public repository contents, build using gcc 4.3 (trivial patches to make it build were added).&lt;/p&gt;

&lt;p&gt;Some scary solaris (SunOS 5.10 Generic_120011-14 sun4u sparc SUNW,UltraAX-i2) results as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/usr/jdk/jdk1.6.0_04 (java full version &quot;1.6.0_04-b12&quot;):&lt;br/&gt;
   : 0/200 failed: PASS&lt;br/&gt;
   -server: 0/200 failed: PASS&lt;br/&gt;
   -client: 0/200 failed: PASS&lt;br/&gt;
   -Xbatch: 0/200 failed: PASS&lt;br/&gt;
   -Xint: 0/200 failed: PASS&lt;/p&gt;

&lt;p&gt;/usr/jdk/jdk1.6.0_04 (java full version &quot;1.6.0_04-b12&quot;):&lt;br/&gt;
    -d64: 0/200 failed: PASS&lt;br/&gt;
   -server -d64: 0/200 failed: PASS&lt;br/&gt;
   -client -d64: 0/200 failed: PASS&lt;br/&gt;
   -Xbatch -d64: 0/200 failed: PASS&lt;br/&gt;
   -Xint -d64: 0/200 failed: PASS&lt;/p&gt;&lt;/blockquote&gt;</comment>
                    <comment id="12600165" author="mikemccand" created="Tue, 27 May 2008 16:57:33 +0100"  >&lt;p&gt;Here is the bug at Sun: &lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6707044&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6707044&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12613018" author="jedws" created="Sat, 12 Jul 2008 00:46:14 +0100"  >&lt;p&gt;Sun has posted their evaluation on the bug above and accepted it as High priority.&lt;/p&gt;</comment>
                    <comment id="12613208" author="psmith@apache.org" created="Sun, 13 Jul 2008 23:15:35 +0100"  >&lt;p&gt;&#160;Can anyone comment as to whether the JRE 1.6.04+ bug affects any &lt;em&gt;earlier&lt;/em&gt; versions of Lucene? (say, 2.0.. which we&apos;re still using) .&lt;/p&gt;

&lt;p&gt;I was just reviewing this issue and noticed Michael mentioned this behaviour shows in both the ConcurrentMergeScheduler and the SerialMergeScheduler.  AIUI,. the SerialMergeScheduler is effectively the &apos;old&apos; way of previous versions of Lucene, so I&apos;m just starting to think about what affect 1.6.04 might have on earlier versions? (this bug is only marked as affecting 2.3+).&lt;/p&gt;

&lt;p&gt;The reason I ask is that we&apos;re just about to upgrade to 1.6.04 -server in some of our production machines.. (reason why not going to 1.6.06 is we only started our development test cycle months ago and stuck with .04 until next cycle).&lt;/p&gt;</comment>
                    <comment id="12613282" author="mikemccand" created="Mon, 14 Jul 2008 11:06:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;Can anyone comment as to whether the JRE 1.6.04+ bug affects any earlier versions of Lucene? (say, 2.0.. which we&apos;re still using).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As far as I know, this corruption only happens on Lucene 2.3+.  The changes to Lucene that tickled this JRE bug were bulk-merging of stored fields:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1043&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1043&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;which landed in 2.3, and also bulk-merging of term vectors:&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1120&quot; class=&quot;external-link&quot;&gt;https://issues.apache.org/jira/browse/LUCENE-1120&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12614161" author="ijuma" created="Thu, 17 Jul 2008 00:56:21 +0100"  >&lt;p&gt;As can be seen in the Sun database a fix for this has been committed to OpenJDK and they&apos;re looking into backporting it into Java 6 Update 10.&lt;/p&gt;</comment>
                    <comment id="12616735" author="ijuma" created="Fri, 25 Jul 2008 02:53:53 +0100"  >&lt;p&gt;The latest build of JDK 6 Update 10 (b28) includes the fix for this. It can be downloaded from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://download.java.net/jdk6/binaries/&quot; class=&quot;external-link&quot;&gt;http://download.java.net/jdk6/binaries/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the summary of changes, you can see that it refers to a bug that requests the integration of a new HotSpot build that includes the fix for this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6727119&quot; class=&quot;external-link&quot;&gt;http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6727119&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have also verified that the test-case now passes on my machine.&lt;/p&gt;
</comment>
                    <comment id="12618446" author="mikemccand" created="Wed, 30 Jul 2008 18:56:01 +0100"  >&lt;p&gt;Indeed, I can confirm that JDK 6 Update 10 (b28) fixes my 19 GB test case that reliably crashes with earlier JDK 6 versions.&lt;/p&gt;

&lt;p&gt;I&apos;ll resolve this as fixed, and send an email to users.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12382006" name="corrupt_merge_out15.txt" size="50110" author="stuhood" created="Wed, 14 May 2008 02:49:21 +0100" />
                    <attachment id="12382671" name="crashtest" size="1426" author="andreaskohn" created="Fri, 23 May 2008 16:46:07 +0100" />
                    <attachment id="12382672" name="crashtest.log" size="2396" author="andreaskohn" created="Fri, 23 May 2008 16:46:07 +0100" />
                    <attachment id="12382519" name="hs_err_pid27359.log" size="12865" author="mikemccand" created="Wed, 21 May 2008 22:55:48 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 11 May 2008 22:40:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12466</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26446</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>