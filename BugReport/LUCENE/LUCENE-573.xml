<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-573/LUCENE-573.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-573] Escaped quotes inside a phrase cause a ParseException</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-573</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;QueryParser cannot handle escaped quotes when inside a phrase. Escaped quotes not in a phrase are not a problem. This can be added to TestQueryParser.testEscaped() to demonstrate the issue - the second assert throws an exception:&lt;/p&gt;

&lt;p&gt;assertQueryEquals(&quot;a \\\&quot;b c\\\&quot; d&quot;, a, &quot;a \&quot;b c\&quot; d&quot;);&lt;br/&gt;
assertQueryEquals(&quot;\&quot;a \\\&quot;b c\\\&quot; d\&quot;&quot;, a, &quot;\&quot;a \&quot;b c\&quot; d\&quot;&quot;);&lt;/p&gt;

&lt;p&gt;See also this thread:&lt;br/&gt;
&lt;a href=&quot;http://www.nabble.com/ParseException-with-escaped-quotes-in-a-phrase-t1647115.html&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/ParseException-with-escaped-quotes-in-a-phrase-t1647115.html&lt;/a&gt;&lt;/p&gt;</description>
                <environment>&lt;p&gt;Debian Sarge, Sun JDK 1.4.2&lt;/p&gt;</environment>
            <key id="12343250">LUCENE-573</key>
            <summary>Escaped quotes inside a phrase cause a ParseException</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="tomi">Tomislav Gountchev</reporter>
                        <labels>
                    </labels>
                <created>Fri, 19 May 2006 11:40:37 +0100</created>
                <updated>Sat, 18 Nov 2006 19:34:54 +0000</updated>
                    <resolved>Sat, 18 Nov 2006 19:34:54 +0000</resolved>
                            <version>1.9</version>
                                                <component>core/queryparser</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12426346" author="buschmic" created="Mon, 7 Aug 2006 23:21:32 +0100"  >&lt;p&gt;Tomislav,&lt;/p&gt;

&lt;p&gt;thanks for finding this problem in the queryparser. I attach a patch file that fixes this bug. Now the queryparser does not recognize an escaped quote inside a phrase as the phrase terminator anymore. &lt;/p&gt;

&lt;p&gt;I also updated the testcase org.apache.lucene.queryParser.TestQueryParser to test escaped quotes within phrases. This testcase fails with the old version of the queryparser and runs successful with the patched version. I added the following three tests to the testEscaped() method:&lt;/p&gt;

&lt;p&gt;(1)    assertQueryEquals(&quot;a \\\&quot;b c\\\&quot; d&quot;, a, &quot;a \&quot;b c\&quot; d&quot;);&lt;br/&gt;
(2)    assertQueryEquals(&quot;\&quot;a &lt;br class=&quot;atl-forced-newline&quot; /&gt;+b c d\&quot;&quot;, a, &quot;\&quot;a &lt;br class=&quot;atl-forced-newline&quot; /&gt;+b c d\&quot;&quot;);&lt;br/&gt;
(3)    assertQueryEquals(&quot;\&quot;a \\\&quot;b c\\\&quot; d\&quot;&quot;, a, &quot;\&quot;a \\\&quot;b c\\\&quot; d\&quot;&quot;); &lt;/p&gt;

&lt;p&gt;Please notice that (3) is different from your second suggested assert. You assume that the queryparser unescapes the quotes inside the phrase, but the queryparser does not unescape &lt;b&gt;any&lt;/b&gt; escaped characters inside a phrase. You can see that in (2), where the escaped + (plus) character does not become unescaped.&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;</comment>
                    <comment id="12429287" author="hossman" created="Sun, 20 Aug 2006 20:03:27 +0100"  >&lt;p&gt;&amp;gt; You assume that the queryparser unescapes the quotes inside &lt;br/&gt;
&amp;gt; the phrase, but the queryparser does not unescape &lt;b&gt;any&lt;/b&gt;&lt;br/&gt;
&amp;gt; escaped characters inside a phrase. You can see that in (2),&lt;br/&gt;
&amp;gt; where the escaped + (plus) character does not become &lt;br/&gt;
&amp;gt; unescaped.&lt;/p&gt;

&lt;p&gt;...I&apos;m not sure if this is a fair comaprison.  Query parser may not unescape things like the &amp;#43; in this example....&lt;br/&gt;
     foo &quot;bar &amp;#43;baz&quot;&lt;br/&gt;
...but i believe that is because there is no reason for it to do so, if what you intended was to match on the + character without a preceding s\ you could have just written...&lt;br/&gt;
     foo &quot;bar +baz&quot;&lt;br/&gt;
...ie: the plus is already escaped by the nature of being inside the  phrase bounding quotes&lt;/p&gt;

&lt;p&gt;this same justification does not hold for the double-quote character however ... there is no way to inlcude a &quot; character inside of a phrase without escaping, so it seems like query parser should be unescaping it automatically for you.&lt;/p&gt;

&lt;p&gt;correct?&lt;/p&gt;</comment>
                    <comment id="12429297" author="yseeley@gmail.com" created="Sun, 20 Aug 2006 22:02:37 +0100"  >&lt;p&gt;&amp;gt; it seems like query parser should be unescaping it automatically for you&lt;/p&gt;

&lt;p&gt;That&apos;s my take.  \&quot; should return the user &quot;&lt;br/&gt;
To enable representation of a real backslash followed by a quote, or a backslash at the end of a line, backslashes also need escaping (with another backslash... same as C, Java, etc).&lt;/p&gt;

&lt;p&gt;Now the question is if &amp;#43; should be returned as + or &amp;#43;&lt;br/&gt;
If we were starting from scratch, I&apos;d say remove the backslash (return +) since that&apos;s most consistent with escaping mechanisms in other languages, and it does the right thing if a user escapes something they don&apos;t need to.  So does anyone currently search for backslash in a phrase query???&lt;/p&gt;</comment>
                    <comment id="12443214" author="michaelkrkoska" created="Wed, 18 Oct 2006 10:47:12 +0100"  >&lt;p&gt;I just experienced this bug in my search. The patch works for me, though I found it rather cumbersome to build lucene including javacc. &lt;/p&gt;

&lt;p&gt;Why is the priority of this bug low? What do we have to do to include tha patch in the release?&lt;/p&gt;</comment>
                    <comment id="12443287" author="yseeley@gmail.com" created="Wed, 18 Oct 2006 16:17:02 +0100"  >&lt;p&gt;&amp;gt; What do we have to do to include tha patch in the release?&lt;/p&gt;

&lt;p&gt;IMO, the minimal amount that needs to be done is &lt;br/&gt;
 1) map \&quot; to &quot;&lt;br/&gt;
 2) map &lt;br class=&quot;atl-forced-newline&quot; /&gt; to \&lt;/p&gt;</comment>
                    <comment id="12447990" author="michaelbusch" created="Wed, 8 Nov 2006 00:40:32 +0000"  >&lt;p&gt;Sorry, it took me a while to take care of this patch.&lt;/p&gt;

&lt;p&gt;You are right, my patch only prevents the ParseException to be thrown. However, it is still not possible to search for a phrase query that contains quotes.&lt;/p&gt;

&lt;p&gt;I think the simple solution is to call discardEscapeChar(String) for the phrase string. Then &lt;b&gt;all&lt;/b&gt; escaped characters within a phrase become unescaped.&lt;/p&gt;

&lt;p&gt;Now the question is again (Yonik raised it already): Do we want this behavior or do we rather want to maintain backward compatibility for already existing phrase queries that include a backslash? If we prefer compatibility over consistency then one solution would be to add a new method discardEscapeChar(String, char[]) that only unescapes certain characters, in this case &quot; and \.&lt;/p&gt;

&lt;p&gt;If we can make a decision here I&apos;m happy to provide a new patch.&lt;/p&gt;</comment>
                    <comment id="12448007" author="yseeley@gmail.com" created="Wed, 8 Nov 2006 01:56:47 +0000"  >&lt;p&gt;The number of people searching for &apos;\&apos; must be minuscule (to non-existent), so I&apos;m personally OK with doing what makes the most sense.&lt;/p&gt;

&lt;p&gt;In general, I think it&apos;s more user friendly and less surprising to allow a backslash escape of something that doesn&apos;t need it (while removing the backslash).&lt;/p&gt;

&lt;p&gt;So 
&lt;br class=&quot;atl-forced-newline&quot; /&gt; =&amp;gt; \&lt;br/&gt;
\&quot; =&amp;gt; &quot;&lt;br/&gt;
&amp;#43; =&amp;gt; +      // not a necessary escape if in a quoted string, but consistent&lt;/p&gt;

&lt;p&gt;Then there are the &quot;control&quot; chars, \r\n\t, etc.&lt;/p&gt;

&lt;p&gt;At some point we might want to allow unicode escapes, and keeping backslash as a general escape char will facilitate this.&lt;/p&gt;</comment>
                    <comment id="12450869" author="michaelbusch" created="Fri, 17 Nov 2006 19:39:16 +0000"  >&lt;p&gt;I actually found another problem in the current unescaping code:&lt;br/&gt;
junit.framework.AssertionFailedError: Query /a\\\+b/ yielded /a&lt;br class=&quot;atl-forced-newline&quot; /&gt;+b/, expecting /a&amp;#43;b/&lt;/p&gt;

&lt;p&gt;The reason is that the method discardEscapeChar() cannot handle an escaped backslash followed by another escaped character.&lt;/p&gt;

&lt;p&gt;I attach a new patch that includes the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the QueryParser unescapes any escaped characters inside a phrase and can handle escaped quotes inside phrases&lt;/li&gt;
	&lt;li&gt;for consistency reasons unescaping now is also being done in quoted range queries&lt;/li&gt;
	&lt;li&gt;new implementation of discardEscapeChar() that solves the above mentioned problem (escaped backslash followed by another escaped character)&lt;/li&gt;
	&lt;li&gt;new tests for TestQueryParser that tests the changes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All unit tests pass.&lt;/p&gt;</comment>
                    <comment id="12450886" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 21:09:02 +0000"  >&lt;p&gt;Thanks Michael, I haven&apos;t had a chance to look at the code yet, but I agree with your description of all the changes.  So unless concerns arise, I&apos;ll commit this after review.&lt;/p&gt;</comment>
                    <comment id="12451057" author="yseeley@gmail.com" created="Sat, 18 Nov 2006 19:34:54 +0000"  >&lt;p&gt;Looks good, and I just committed this.  Thanks Michael!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12345250" name="LUCENE-573_new.patch" size="31558" author="michaelbusch" created="Fri, 17 Nov 2006 19:39:16 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 7 Aug 2006 22:21:32 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13177</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27154</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>