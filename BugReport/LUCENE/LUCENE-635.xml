<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:12:08 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-635/LUCENE-635.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-635] [PATCH] Decouple locking implementation from Directory implementation</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-635</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;This is a spinoff of &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-305&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-305&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;ve opened this new issue to capture that it&apos;s wider scope than&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-305&quot; title=&quot;[PATCH] Lock Framework - allows custom lock mechanism&quot;&gt;&lt;del&gt;LUCENE-305&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a patch originally created by Jeff Patterson (see above link)&lt;br/&gt;
and then modified as described here:&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-305#action_12418493&quot; class=&quot;external-link&quot;&gt;http://issues.apache.org/jira/browse/LUCENE-305#action_12418493&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with some small additional changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;For each FSDirectory.getDirectory(), I made a corresponding&lt;br/&gt;
    version that also accepts a LockFactory instance.  So, you can&lt;br/&gt;
    construct an FSDirectory with your own LockFactory.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Cascaded defaulting for FSDirectory&apos;s LockFactory implementation:&lt;br/&gt;
    if you pass in a LockFactory instance, it&apos;s used; else if&lt;br/&gt;
    setDisableLocks was called, we use NoLockFactory; else, if the&lt;br/&gt;
    system property &quot;org.apache.lucene.store.FSDirectoryLockFactoryClass&quot;&lt;br/&gt;
    is defined, we use that; finally, we&apos;ll use the original locking&lt;br/&gt;
    implementation (SimpleFSLockFactory).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The gist is that all locking code has been moved out of *Directory and&lt;br/&gt;
into subclasses of a new abstract LockFactory class.  You can now set&lt;br/&gt;
the LockFactory of a Directory to change how it does locking.  For&lt;br/&gt;
example, you can create an FSDirectory but set its locking to&lt;br/&gt;
SingleInstanceLockFactory (if you know all writing/reading will take&lt;br/&gt;
place a single JVM).&lt;/p&gt;

&lt;p&gt;The changes pass all unit tests (on Ubuntu Linux Sun Java 1.5 and&lt;br/&gt;
Windows XP Sun Java 1.4), and I added another TestCase to test the&lt;br/&gt;
LockFactory code.&lt;/p&gt;

&lt;p&gt;Note that LockFactory defaults are not changed: FSDirectory defaults&lt;br/&gt;
to SimpleFSLockFactory and RAMDirectory defaults to&lt;br/&gt;
SingleInstanceLockFactory.&lt;/p&gt;

&lt;p&gt;Next step (separate issue) is to create a LockFactory that uses the OS&lt;br/&gt;
native locks (through java.nio).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12346746">LUCENE-635</key>
            <summary>[PATCH] Decouple locking implementation from Directory implementation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Thu, 27 Jul 2006 01:31:08 +0100</created>
                <updated>Fri, 10 May 2013 11:44:11 +0100</updated>
                    <resolved>Tue, 29 Aug 2006 02:12:29 +0100</resolved>
                            <version>2.0.0</version>
                                <fixVersion>2.1</fixVersion>
                                <component>core/index</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12423748" author="mikemccand" created="Thu, 27 Jul 2006 01:34:24 +0100"  >&lt;p&gt;TAR file containing sources as first cut at implementation.  I&apos;ve also included patch files off revision 425918.&lt;/p&gt;</comment>
                    <comment id="12425495" author="mikemccand" created="Thu, 3 Aug 2006 12:09:08 +0100"  >&lt;p&gt;This patch contains the same source changes as my July 26 patch, but this one is done &quot;correctly&quot; as the output of a single top-level &quot;svn diff&quot; command (ie, I ran &quot;svn add ...&quot; locall for the new files).  I also added an entry to CHANGES.txt, and corrected newlines on one of the sources.&lt;/p&gt;</comment>
                    <comment id="12427857" author="mikemccand" created="Mon, 14 Aug 2006 11:53:24 +0100"  >
&lt;p&gt;Has anyone had a chance to look at this patch?&lt;/p&gt;

&lt;p&gt;This should be fully backwards compatible: old APIs have not changed.&lt;br/&gt;
I&apos;ve just added new ones that allow you to set the locking&lt;br/&gt;
implementation per Directory.  The default Locking implementation also&lt;br/&gt;
has not changed; it&apos;s just been refactored out of the *Directory.java&lt;br/&gt;
sources.  So this should be a drop-in change to existing users of&lt;br/&gt;
Lucene.&lt;/p&gt;

&lt;p&gt;This change passes all unit tests, and I added a new test (with 9 test&lt;br/&gt;
cases) for LockFactory.&lt;/p&gt;

&lt;p&gt;The above &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-635&quot; title=&quot;[PATCH] Decouple locking implementation from Directory implementation&quot;&gt;&lt;del&gt;LUCENE-635&lt;/del&gt;&lt;/a&gt;-Aug3.patch still applies cleanly to the&lt;br/&gt;
current svn HEAD (431322).&lt;/p&gt;</comment>
                    <comment id="12427906" author="otis" created="Mon, 14 Aug 2006 15:43:11 +0100"  >&lt;p&gt;I took a look at it a few weeks back.  If nobody takes care of it, I&apos;ll look at it again and hopefully commit it after I return from vacation in September.&lt;/p&gt;</comment>
                    <comment id="12427913" author="mikemccand" created="Mon, 14 Aug 2006 16:08:01 +0100"  >&lt;p&gt;Awesome, thanks Otis!  Have a great vacation!&lt;/p&gt;</comment>
                    <comment id="12428798" author="yseeley@gmail.com" created="Thu, 17 Aug 2006 22:16:58 +0100"  >&lt;p&gt;Very nice job Michael... very thorough.&lt;br/&gt;
In general, locking &amp;amp; synchronization is something that requires hard review since it&apos;s hard to test for correctness, but the thouroughness of your tests increases my confidence.&lt;/p&gt;

&lt;p&gt;Super-minor improvement while I&apos;m looking at it: could the following&lt;br/&gt;
method body be replaced with &quot;synchronized(locks) &lt;/p&gt;
{return locks.add(lockName);}
&lt;p&gt;&quot; ?&lt;/p&gt;

&lt;p&gt;+  public boolean obtain() throws IOException {&lt;br/&gt;
+    synchronized(locks) {&lt;br/&gt;
+      if (!locks.contains(lockName)) &lt;/p&gt;
{
+        locks.add(lockName);
+        return true;
+      }
&lt;p&gt; else &lt;/p&gt;
{
+        return false;
+      }
&lt;p&gt;+    }&lt;br/&gt;
+  }&lt;/p&gt;

&lt;p&gt;As far as backward compatibility, could you speak to&lt;br/&gt;
  1) FSDirectory.disableLocks&lt;br/&gt;
  2) Slight changes in how FSLock.obtain works (the old one recreated the lock dir each time)&lt;/p&gt;</comment>
                    <comment id="12428821" author="mikemccand" created="Thu, 17 Aug 2006 23:55:26 +0100"  >&lt;p&gt;Thank you!  I agree, locking is sneaky and requires very thorough&lt;br/&gt;
review &amp;amp; testing.&lt;/p&gt;

&lt;p&gt;Nice, I definitely like that more compact version of&lt;br/&gt;
SingleInstanceLockFactory.obtain &amp;#8211; I&apos;ll fold that in.&lt;/p&gt;

&lt;p&gt;On FSDirectory.disableLocks, which is a private static boolean set by&lt;br/&gt;
&quot;setDisabledLocks&quot;, if this is &quot;true&quot; when the FSDirectory is created&lt;br/&gt;
then FSDirectory uses the NoLockFactory for its locking; else it uses&lt;br/&gt;
the default SimpleFSLockFactory.  (This is only when the caller did&lt;br/&gt;
not provide a LockFactory instance).&lt;/p&gt;

&lt;p&gt;OOH I do see one difference: in the current code, if you call&lt;br/&gt;
setDisableLocks then this affects even a previously created&lt;br/&gt;
FSDirectory, with the current code.  But with my changes, only newly&lt;br/&gt;
created FSDirectory instances will have locking disabled.  Ie, it&apos;s no&lt;br/&gt;
longer &quot;retroactive&quot; to all previously created FSDirectory instances,&lt;br/&gt;
with my change.  Hmm.  OK I will fix this case.&lt;/p&gt;

&lt;p&gt;On SimpleFSLock.obtain, you are correct: I lost the creation of the&lt;br/&gt;
lock dir (if it doesn&apos;t exist) with each obtain.  Good catch!  I&lt;br/&gt;
didn&apos;t mean to lose it.  I will put it back in, and move it out of the&lt;br/&gt;
init() method in SimpleFSLockFactory.&lt;/p&gt;

&lt;p&gt;Thanks for reviewing this!&lt;/p&gt;</comment>
                    <comment id="12428828" author="yseeley@gmail.com" created="Fri, 18 Aug 2006 00:23:05 +0100"  >&lt;p&gt;Yeah... those were the slight differences in external behavior I saw.&lt;br/&gt;
That doesn&apos;t mean it&apos;s wrong, but it does mean we should examine if it&apos;s OK to change it (or just defer the changes to a later patch...).&lt;/p&gt;</comment>
                    <comment id="12429135" author="mikemccand" created="Fri, 18 Aug 2006 22:47:18 +0100"  >
&lt;p&gt;OK, does anyone have a strong opinion one way or another on these&lt;br/&gt;
small changes?&lt;/p&gt;

&lt;p&gt;I would lean towards keeping the small change to &quot;setDisabledLocks()&quot;.&lt;br/&gt;
Meaning, it&apos;s only when you create a FSDirectory that the static&lt;br/&gt;
&quot;disableLocks&quot; value is checked.  So, changing disabledLocks would no&lt;br/&gt;
longer retroactively affect all previously created FSDirectories,&lt;br/&gt;
which seems too &quot;powerful&quot; &amp;#8211; what if I wanted some to be disabled and&lt;br/&gt;
others not?  Was it intentional that it was this powerful?  If we do&lt;br/&gt;
this we could document it in CHANGES.txt as a small difference.  Or,&lt;br/&gt;
again, I can put back the old behaviour if people think that&apos;s best.&lt;/p&gt;

&lt;p&gt;On the second one, I agree we should keep the current behaviour of&lt;br/&gt;
checking existence of &amp;amp; creating the LOCK DIR with each obtain.  There&lt;br/&gt;
would be some performance benefit to only doing it on creating the&lt;br/&gt;
lock factory, but, I don&apos;t think that&apos;s worth the risk of the change.&lt;br/&gt;
So I&apos;ll go ahead &amp;amp; fix that one.&lt;/p&gt;</comment>
                    <comment id="12430748" author="yseeley@gmail.com" created="Sat, 26 Aug 2006 15:51:40 +0100"  >&lt;p&gt;&amp;gt; I would lean towards keeping the small change to &quot;setDisabledLocks()&quot;.&lt;br/&gt;
&amp;gt; Meaning, it&apos;s only when you create a FSDirectory that the static&lt;br/&gt;
&amp;gt; &quot;disableLocks&quot; value is checked.&lt;/p&gt;

&lt;p&gt;I think this is probably OK.  In addition to being a little-used method, If one truely wanted locking disabled (for read-only media for example) they would be calling setDisableLocks() before opening an IndexReader anyway.&lt;/p&gt;</comment>
                    <comment id="12430842" author="mikemccand" created="Sun, 27 Aug 2006 12:45:51 +0100"  >&lt;p&gt;OK, I agree.  I&apos;ve updated the CHANGES.txt to state this small change.&lt;/p&gt;

&lt;p&gt;And I&apos;ve fixed SimpleFSLockFactory to move directory existence checking &amp;amp; creation back into the obtain() method.&lt;/p&gt;

&lt;p&gt;New patch attached!&lt;/p&gt;</comment>
                    <comment id="12431111" author="yseeley@gmail.com" created="Tue, 29 Aug 2006 02:12:29 +0100"  >&lt;p&gt;Committed.  Thanks Michael!&lt;/p&gt;</comment>
                    <comment id="12431341" author="doronc" created="Tue, 29 Aug 2006 20:54:13 +0100"  >&lt;p&gt;While updating my patch for 665 according the changes here, I noticed something - I may be wrong here - but it seems to me that until this change, all the actual FS access operations where performed by FSDirectory, using the Directory API. &lt;/p&gt;

&lt;p&gt;The new SimpleFSLock and SimpleFSLockFactory also access the FS directly, not through FSDirectory API.&lt;/p&gt;

&lt;p&gt;That Directory abstraction in Lucene allows to develop Lucene-in-RAM, Lucene-in-DB, etc. It is a nice feature. &lt;/p&gt;

&lt;p&gt;Guess we can say: &quot;well, now the abstraction is made of two interfaces - Lock and Directory, just make sure you use &apos;matching&apos; implementations of them.&quot; This seems weaker than before.&lt;/p&gt;

&lt;p&gt;Or, can limit all file access to go through FSDirectory - &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;one possibility is to add to LockFactory a Directory object (as a class member); SimpleFSLockFactory can require thas Directory object to be FSDirectory (cast, and fail otherwise); also, FSDirectory should be extened with createSingleFile(), mkdirs() and isDirectory().&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12431540" author="mikemccand" created="Wed, 30 Aug 2006 12:19:08 +0100"  >&lt;p&gt;With this change, &quot;Directory on DB&quot;, &quot;Directory on RAM&quot;, etc., still&lt;br/&gt;
work correctly.  In fact you can completely override the LockFactory&lt;br/&gt;
behavior by implementing your own &quot;makeLock&quot; in a subclass of&lt;br/&gt;
Directory if you want to.&lt;/p&gt;

&lt;p&gt;This change just opens up the freedom to allow you to separately&lt;br/&gt;
choose how your locking is done.  I think this is important because&lt;br/&gt;
many applications have different locking requirements.  Perhaps you&lt;br/&gt;
require no locking at all (NoLockFactory or legacy&lt;br/&gt;
FSDirectory.setDisabledLocks), or everything happens in one JVM&lt;br/&gt;
(SingleInstanceLockFactory), etc.&lt;/p&gt;

&lt;p&gt;This also opens up the chance for people to work around locking issues&lt;br/&gt;
eg over NFS until we can get lock-less commits finished.&lt;/p&gt;

&lt;p&gt;I&apos;m working on a LockFactory implementation that uses native OS locks&lt;br/&gt;
(java.nio.*) and this will be another place that accesses the file&lt;br/&gt;
system.  The java.io.File.createNewFile (used by the&lt;br/&gt;
SimpleFSLockFactory) has a very spooky warning about not using it for&lt;br/&gt;
locking.&lt;/p&gt;

&lt;p&gt;We could (as you&apos;re suggesting) indeed extend FSDirectory so that it&lt;br/&gt;
provided the low level methods required by a locking implementation,&lt;br/&gt;
and then alter SimpleFSLockFactory/NativeFSLockFactory (or make a new&lt;br/&gt;
LockFactory) so that all underlying IO is through the FSDirectory&lt;br/&gt;
instead.&lt;/p&gt;</comment>
                    <comment id="12431666" author="doronc" created="Wed, 30 Aug 2006 20:34:48 +0100"  >&lt;p&gt;&amp;gt; We could (as you&apos;re suggesting) indeed extend FSDirectory so that it &lt;br/&gt;
&amp;gt; provided the low level methods required by a locking implementation, &lt;br/&gt;
&amp;gt; and then alter SimpleFSLockFactory/NativeFSLockFactory (or make a new &lt;br/&gt;
&amp;gt; LockFactory) so that all underlying IO is through the FSDirectory instead.&lt;/p&gt;

&lt;p&gt;Yes, this is exactly (and only) what I am suggesting to consider - to include a Directory member within the LockFactory so that it is clear that any LockFactory implementation operates in the realm of a directory (implementation) and is using it for any actual store accesses.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12314455">LUCENE-305</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12339653" name="LUCENE-635-Aug27.patch" size="44454" author="mikemccand" created="Sun, 27 Aug 2006 12:45:51 +0100" />
                    <attachment id="12338055" name="LUCENE-635-Aug3.patch" size="44319" author="mikemccand" created="Thu, 3 Aug 2006 12:09:08 +0100" />
                    <attachment id="12337606" name="patch-Jul26.tar" size="92160" author="mikemccand" created="Thu, 27 Jul 2006 01:34:24 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 14 Aug 2006 14:43:11 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13118</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27095</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>