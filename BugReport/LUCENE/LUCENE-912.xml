<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:57:29 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-912/LUCENE-912.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-912] DisjunctionMaxScorer.skipTo has bug that keeps it from skipping</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-912</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;as reported on the mailing list, DisjunctionMaxScorer.skipTo is broken if called before next in some situations...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.nabble.com/Potential-issue-with-DisjunctionMaxScorer-tf3846366.html#a10894987&quot; class=&quot;external-link&quot;&gt;http://www.nabble.com/Potential-issue-with-DisjunctionMaxScorer-tf3846366.html#a10894987&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12370994">LUCENE-912</key>
            <summary>DisjunctionMaxScorer.skipTo has bug that keeps it from skipping</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="doronc">Doron Cohen</assignee>
                                <reporter username="hossman">Hoss Man</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jun 2007 07:42:03 +0100</created>
                <updated>Tue, 19 Jun 2007 09:14:58 +0100</updated>
                    <resolved>Thu, 7 Jun 2007 03:21:01 +0100</resolved>
                            <version>2.0.0</version>
                <version>2.1</version>
                                <fixVersion>2.2</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12501821" author="hossman" created="Wed, 6 Jun 2007 07:44:12 +0100"  >&lt;p&gt;patch with test and fix ... it would be helpful if someone who understands scorers better then i do could take a look at this and make sure there isn&apos;t some obvious cases that aren&apos;t accounted for in the (existing or new) tests that are still obviously broken&lt;/p&gt;</comment>
                    <comment id="12501827" author="paul.elschot@xs4all.nl" created="Wed, 6 Jun 2007 08:29:17 +0100"  >&lt;p&gt;I&apos;m not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc.&lt;/p&gt;

&lt;p&gt;It might be worthwhile to make DisjunctionMaxScorer use the same specialized queue/heap as DisjunctionSumScorer.&lt;br/&gt;
Factoring this out could lead to a common superclass that provides e.g. an array of Scorers that match the disjunction.&lt;br/&gt;
At the same time the score computations of the subscorers could be delayed until an actual score value is needed.&lt;br/&gt;
That is a rather drastic approach, but the specialized queue/heap of DisjunctionSumScorer might also help performance of DisjunctionMaxScorer&lt;/p&gt;</comment>
                    <comment id="12502011" author="yseeley@gmail.com" created="Wed, 6 Jun 2007 19:08:56 +0100"  >&lt;p&gt;&amp;gt; I&apos;m not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc. &lt;/p&gt;

&lt;p&gt;If all the sub-scorers are on the correct document after skipTo is called (which looks to be the case), then everything should be OK when DisjunctionMaxScorer.score() is called after that (dismax score calculation isn&apos;t incremental... it&apos;s all done during the call to score()).  Is there an issue I&apos;m not thinking of?&lt;/p&gt;
</comment>
                    <comment id="12502048" author="doronc" created="Wed, 6 Jun 2007 20:09:15 +0100"  >&lt;p&gt;&amp;gt; dismax score calculation isn&apos;t incremental... it&apos;s all done during the call to score()). &lt;br/&gt;
&amp;gt; Is there an issue I&apos;m not thinking of? &lt;/p&gt;

&lt;p&gt;I was wondering why QueryUtils.checkSkipTo() did not expose that. But this is because that check skips doc by doc, always to docs found by the tested query. &lt;/p&gt;

&lt;p&gt;Enhancing that test reveals that for some scorers, two consecutive calls to score() return different scores (no next() or skipTo() calls in between).&lt;br/&gt;
This seems like a bug.&lt;/p&gt;</comment>
                    <comment id="12502054" author="yseeley@gmail.com" created="Wed, 6 Jun 2007 20:18:58 +0100"  >&lt;p&gt;Yes, two calls to score() should yield the same score.&lt;br/&gt;
What scorer was broken?&lt;/p&gt;</comment>
                    <comment id="12502067" author="doronc" created="Wed, 6 Jun 2007 21:00:34 +0100"  >&lt;p&gt;Attached adds to QueryUtils.check(Query q1, Searcher s):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;score() stability test (two calls to score() should return same score)&lt;/li&gt;
	&lt;li&gt;first skipTo tests&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The score() stability tests has failures for BooleanQueries and for DisjunctionMaxQuery.&lt;/p&gt;

&lt;p&gt;I didn&apos;t look into the failures cause yet.&lt;/p&gt;</comment>
                    <comment id="12502078" author="doronc" created="Wed, 6 Jun 2007 21:18:57 +0100"  >&lt;p&gt;Updating  checkTwoCallsToScore.patch  (unintended comment out in previous file).&lt;/p&gt;</comment>
                    <comment id="12502090" author="michaelbusch" created="Wed, 6 Jun 2007 21:48:13 +0100"  >&lt;p&gt;In BooleanScorer2.score() the coordinator is initialized: coordinator.initDoc();&lt;br/&gt;
This results in Coordinator.nrMatchers = 0. &lt;/p&gt;

&lt;p&gt;Now look at the statements that change the value of nrMatchers in BooleanScorer.&lt;br/&gt;
There are three of those. E. g. in countingDisjunctionSumScorer:&lt;br/&gt;
        if (this.doc() &amp;gt; lastScoredDoc) &lt;/p&gt;
{
          lastScoredDoc = this.doc();
          coordinator.nrMatchers += super.nrMatchers;
        }

&lt;p&gt;nrMatchers is only increased in case this.doc() is greater than lastScoredDoc.&lt;br/&gt;
But if score() is called twice, than those values are equal. So we have to&lt;br/&gt;
fix the if statement to &lt;br/&gt;
        if (this.doc() &amp;gt;= lastScoredDoc) {&lt;/p&gt;

&lt;p&gt;With this patch and dismax_skipto.patch now all tests pass (including your&lt;br/&gt;
new ones, Doron).&lt;/p&gt;</comment>
                    <comment id="12502111" author="doronc" created="Wed, 6 Jun 2007 22:19:28 +0100"  >&lt;p&gt;This would recompute, but correctly. &lt;br/&gt;
If this fix is just for sanity, ie main search methods really call score() just once, then I guess this is good enough.&lt;br/&gt;
I was thinking more on not recomputing score if it was already computed (for current doc).&lt;br/&gt;
(That would require to also maintain the last score returned.)&lt;/p&gt;</comment>
                    <comment id="12502120" author="michaelbusch" created="Wed, 6 Jun 2007 22:31:54 +0100"  >&lt;p&gt;Yes I agree. Keeping the score in BooleanScorer until next() or skipTo() is &lt;br/&gt;
called is a good optimization to avoid recomputation. I guess I was just &lt;br/&gt;
curios about the reasons why the tests failed. &lt;/p&gt;</comment>
                    <comment id="12502121" author="doronc" created="Wed, 6 Jun 2007 22:38:27 +0100"  >&lt;p&gt;Actually I changed my mind....  (and saw your reply just before clicking &quot;Add&quot; on this comment): &lt;br/&gt;
  Taking back my last comment - with Michael&apos;s fix there are no extra cycles in the expected use of score().&lt;br/&gt;
  If we try to avoid re-computation in case score() is called twice for same doc, there would be an additional if() for every call to score().&lt;/p&gt;

&lt;p&gt;I think I will take it from here to a new issue and handle these two separately.&lt;/p&gt;</comment>
                    <comment id="12502170" author="doronc" created="Thu, 7 Jun 2007 03:21:01 +0100"  >&lt;p&gt;Committed the original lucene-912.patch by Hoss. &lt;br/&gt;
Thanks Hoss and Sudaakeran B. !&lt;/p&gt;</comment>
                    <comment id="12502704" author="paul.elschot@xs4all.nl" created="Fri, 8 Jun 2007 08:10:21 +0100"  >&lt;p&gt;&amp;gt; &amp;gt; I&apos;m not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc.&lt;/p&gt;

&lt;p&gt;This is from code inspection only, I have no test cases showing wrong behaviour:&lt;br/&gt;
What I meant is that during DisjunctionMaxScorer.next() initially the subscorers have next() called on them, so they are at their first docs, and then during next() (with the return statement deleted) the &quot;generators are incremented again&quot; even when at firstTime. That means that the score() might be computed on the wrong subscorer docs after the first call to next().&lt;/p&gt;

&lt;p&gt;But this issue is about DisjunctionMaxScorer.skipTo(), and removing the firstTime return statement there is correct I think.&lt;/p&gt;
</comment>
                    <comment id="12502854" author="doronc" created="Fri, 8 Jun 2007 17:02:49 +0100"  >&lt;p&gt;I think you&apos;re right, and actually wondered about the same thing while verifying that fix: &quot;why return in next() but not in skipTo()?&quot; - I believe this is the right thing to do because at the initialization (ie in add(Scorer)) each added sub-scorer is advanced to its first match. So the first time that next() is called, sub-scorers are already &quot;on the right spot&quot;, and not so for the first time skipTo() is called, because skipTo does not necessarily goes to the first match.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12371086">LUCENE-913</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12359110" name="checkTwoCallsToScore.patch" size="4543" author="doronc" created="Wed, 6 Jun 2007 21:18:57 +0100" />
                    <attachment id="12359107" name="checkTwoCallsToScore.patch" size="4550" author="doronc" created="Wed, 6 Jun 2007 21:00:30 +0100" />
                    <attachment id="12359040" name="dismax_skipto.patch" size="2202" author="hossman" created="Wed, 6 Jun 2007 07:44:06 +0100" />
                    <attachment id="12359115" name="lucene-912.patch" size="1222" author="michaelbusch" created="Wed, 6 Jun 2007 21:48:13 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>4.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 6 Jun 2007 07:29:17 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>12830</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26817</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>