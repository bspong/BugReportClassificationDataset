<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:23:25 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2410/LUCENE-2410.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2410] Optimize PhraseQuery</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2410</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Looking the scorers for PhraseQuery, I think there are some speedups&lt;br/&gt;
we could do:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The AND part of the scorer (which advances to the next doc that&lt;br/&gt;
    has all the terms), in PhraseScorer.doNext, should do the same&lt;br/&gt;
    optimizing as BooleanQuery&apos;s ConjunctionScorer, ie sort terms from&lt;br/&gt;
    rarest to most frequent.  I don&apos;t think it should use a linked&lt;br/&gt;
    list/firstToLast() that it does today.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;We do way too much work now when .score() is not called, because&lt;br/&gt;
    we go and find all occurrences of the phrase in the doc, whereas&lt;br/&gt;
    we should stop only after finding the first and then go and count&lt;br/&gt;
    the rest if .score() is called.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;For the exact case, I think we can use two int arrays to find the&lt;br/&gt;
    matches.  The first array holds the count of how many times a term&lt;br/&gt;
    in the phrase &quot;matched&quot; a phrase starting at that position.  When&lt;br/&gt;
    that count == the number of terms in the phrase, it&apos;s a match.&lt;br/&gt;
    The 2nd is a &quot;gen&quot; array (holds docID when that count was last&lt;br/&gt;
    touched), to avoid clearing.  Ie when incrementing the count, if&lt;br/&gt;
    the docID != gen, we reset count to 0.  I think this&apos;d be faster&lt;br/&gt;
    than the PQ we now use.  Downside of this is if you have immense&lt;br/&gt;
    docs (position gets very large) we&apos;d need 2 immense arrays.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It&apos;d be great to do &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1252&quot; title=&quot;Avoid using positions when not all required terms are present&quot;&gt;LUCENE-1252&lt;/a&gt; along with this, ie factor&lt;br/&gt;
PhraseScorer into two AND&apos;d sub-scorers (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1252&quot; title=&quot;Avoid using positions when not all required terms are present&quot;&gt;LUCENE-1252&lt;/a&gt; is open for&lt;br/&gt;
this).  The first one should be ConjunctionScorer, and the 2nd one&lt;br/&gt;
checks the positions (ie, either the exact or sloppy scorers).  This&lt;br/&gt;
would mean if the PhraseQuery is AND&apos;d w/ other clauses (or, a filter&lt;br/&gt;
is applied) we would save CPU by not checking the positions for a doc&lt;br/&gt;
unless all other AND&apos;d clauses accepted the doc.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12462785">LUCENE-2410</key>
            <summary>Optimize PhraseQuery</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Thu, 22 Apr 2010 17:44:08 +0100</created>
                <updated>Wed, 30 Mar 2011 16:50:08 +0100</updated>
                    <resolved>Thu, 24 Jun 2010 11:39:56 +0100</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12866305" author="mikemccand" created="Tue, 11 May 2010 21:11:33 +0100"  >&lt;p&gt;Another thing we should fix &amp;#8211; PhraseQuery of a single term should rewrite to TermQuery.&lt;/p&gt;</comment>
                    <comment id="12866437" author="rcmuir" created="Wed, 12 May 2010 04:13:00 +0100"  >&lt;p&gt;just doing the easy part here, here&apos;s the rewrite patch.&lt;br/&gt;
I checked, MultiPhraseQuery already has it.&lt;/p&gt;</comment>
                    <comment id="12866526" author="mikemccand" created="Wed, 12 May 2010 10:37:04 +0100"  >&lt;p&gt;Looks great Robert &amp;#8211; I think you should go ahead &amp;amp; commit that and we&apos;ll work on the rest of these optos later.&lt;/p&gt;</comment>
                    <comment id="12866572" author="rcmuir" created="Wed, 12 May 2010 14:59:15 +0100"  >&lt;p&gt;Committed revisions 943493 (trunk), 943499 (3x)&lt;/p&gt;</comment>
                    <comment id="12879443" author="mikemccand" created="Wed, 16 Jun 2010 19:38:37 +0100"  >&lt;p&gt;Attached initial rough patch, doing the 1st and 3rd bullets above.&lt;br/&gt;
Still many nocommits, but all tests pass.&lt;/p&gt;

&lt;p&gt;I only did this for the exact case (I don&apos;t understand the sloppy&lt;br/&gt;
case!), so I modified ExactPhraseScorer to no longer subclass&lt;br/&gt;
PhraseScorer and instead do everything on its own.&lt;/p&gt;

&lt;p&gt;I tested on a 20M doc Wikipedia index, best of 10 runs:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;No. hits&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Trunk QPS&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Patch QPS&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Speedup&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;United States&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;314K&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.29&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.6X faster&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;United Kingdom Parliament&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7K&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20.33&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;58.57&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.9X faster&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;The speedup is great &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;However, there&apos;s one problem w/ the patch that I must fix (and will&lt;br/&gt;
bring these gains down), which is it requires 2 int arrays sized to&lt;br/&gt;
the max position encountered during the search (which for a large doc&lt;br/&gt;
could be very large).  I think to make this committable I&apos;d have to&lt;br/&gt;
switch to processing the positions in chunks (like BooleanScorer).&lt;/p&gt;</comment>
                    <comment id="12879725" author="mikemccand" created="Thu, 17 Jun 2010 10:48:47 +0100"  >&lt;p&gt;New patch attached, switches over to chunking (processing the positions 4096 at once).&lt;/p&gt;

&lt;p&gt;United States is now 10.66 QPS (2.5X speedup) and United Kingdom Parliament is now 54.93 QPS (2.7X speedup).&lt;/p&gt;

&lt;p&gt;I think it&apos;s ready to commit... I&apos;ll wait a few days.&lt;/p&gt;</comment>
                    <comment id="12879741" author="mikemccand" created="Thu, 17 Jun 2010 11:38:44 +0100"  >&lt;p&gt;Attached patch w/ another optimization: if the freq of the 2 rarest terms in the phrase are &quot;closish&quot;, then just use .nextDoc() instead of .advance() when ANDing.  This buys another 15% speedup (12.30 QPS, net 2.9X faster than trunk) on United States phrase query.&lt;/p&gt;

&lt;p&gt;Also, I fixed MultiPhraseQuery to sort its clauses by approx docFreq; the optimization is approx in this case because we can&apos;t efficiently compute the docFreq of a position that&apos;s unioning &amp;gt; 1 term.&lt;/p&gt;</comment>
                    <comment id="12879828" author="mikemccand" created="Thu, 17 Jun 2010 17:17:37 +0100"  >&lt;p&gt;New patch &amp;#8211; makes the &quot;useAdvance&quot; per-Term, and, adds a safety fallback to .advance if too many .nextDocs are used.&lt;/p&gt;</comment>
                    <comment id="12879838" author="yseeley@gmail.com" created="Thu, 17 Jun 2010 17:46:32 +0100"  >&lt;p&gt;Fantastic!  Phrase queries have often been a bottleneck.&lt;/p&gt;</comment>
                    <comment id="12879870" author="michaelbusch" created="Thu, 17 Jun 2010 18:55:33 +0100"  >&lt;p&gt;Very nice, Mike!&lt;/p&gt;

&lt;p&gt;Another improvement we could make for positional queries (phrases, span queries) would be skip lists on the positions, maybe in a different codec?  This would probably be a nice speedup for large docs.&lt;/p&gt;</comment>
                    <comment id="12885359" author="mikemccand" created="Mon, 5 Jul 2010 23:35:57 +0100"  >&lt;p&gt;Alas.... I think I somehow screwed up my performance tests above.&lt;/p&gt;

&lt;p&gt;I&apos;m testing search perf (working on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2504&quot; title=&quot;sorting performance regression&quot;&gt;&lt;del&gt;LUCENE-2504&lt;/del&gt;&lt;/a&gt;), and in comparing search perf from 2.9.x -&amp;gt; 3.x, I only saw a ~20% speedup on the phrase query &quot;united states&quot;, for a 5M doc Wikipedia index.  And, re-running the test on trunk pre and post this commit, I still see only ~20% gain.... still not sure what I did wrong.&lt;/p&gt;

&lt;p&gt;I&apos;ll update CHANGES.  Two steps forward, one step back... sigh.&lt;/p&gt;</comment>
                    <comment id="13013376" author="gsingers" created="Wed, 30 Mar 2011 16:50:08 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12447357" name="LUCENE-2410.patch" size="29562" author="mikemccand" created="Thu, 17 Jun 2010 17:17:37 +0100" />
                    <attachment id="12447334" name="LUCENE-2410.patch" size="26922" author="mikemccand" created="Thu, 17 Jun 2010 11:38:44 +0100" />
                    <attachment id="12447328" name="LUCENE-2410.patch" size="24525" author="mikemccand" created="Thu, 17 Jun 2010 10:48:47 +0100" />
                    <attachment id="12447251" name="LUCENE-2410.patch" size="16838" author="mikemccand" created="Wed, 16 Jun 2010 19:38:37 +0100" />
                    <attachment id="12444271" name="LUCENE-2410_rewrite.patch" size="1392" author="rcmuir" created="Wed, 12 May 2010 04:13:00 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 12 May 2010 03:13:00 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11392</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25281</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>