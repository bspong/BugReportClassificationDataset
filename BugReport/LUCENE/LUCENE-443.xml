<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:58:21 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-443/LUCENE-443.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-443] ConjunctionScorer tune-up</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-443</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I just recently ran a load test on the latest code from lucene , which is using a new BooleanScore and noticed the ConjunctionScorer was crunching through objects , especially while sorting as part of the skipTo call. It turns a linked list into an array, sorts the array, then converts the array back to a linked list for further processing by the scoring engines below.&lt;/p&gt;

&lt;p&gt;&apos;m not sure if anyone else is experiencing this as I have a very large index (&amp;gt; 4 million items) and I am issuing some heavily nested queries&lt;/p&gt;

&lt;p&gt;Anyway, I decide to change the link list into an array and use a first and last marker to &quot;simulate&quot; a linked list.&lt;/p&gt;

&lt;p&gt;This scaled much better during my load test as the java gargbage collector was less - umm - virulent &lt;/p&gt;</description>
                <environment>&lt;p&gt;Linux, Java 1.5, Large Index with 4 million items and some heavily nested boolean queries&lt;/p&gt;</environment>
            <key id="12317502">LUCENE-443</key>
            <summary>ConjunctionScorer tune-up</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="yseeley@gmail.com">Yonik Seeley</assignee>
                                <reporter username="abdollar">Abdul Chaudhry</reporter>
                        <labels>
                    </labels>
                <created>Sun, 2 Oct 2005 15:24:56 +0100</created>
                <updated>Tue, 27 Feb 2007 18:10:32 +0000</updated>
                    <resolved>Tue, 17 Oct 2006 21:51:03 +0100</resolved>
                            <version>1.9</version>
                                <fixVersion>2.1</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>7</votes>
                        <watches>1</watches>
                                                    <comments>
                    <comment id="12331065" author="abdollar" created="Sun, 2 Oct 2005 15:32:05 +0100"  >&lt;p&gt;Updated a version of the ConjunctionScorer which uses an array rather than a linked list.&lt;br/&gt;
The first(), last()  and doc() method calls should probably be in-lined - maybe.&lt;/p&gt;</comment>
                    <comment id="12331081" author="paul.elschot@xs4all.nl" created="Mon, 3 Oct 2005 01:08:08 +0100"  >&lt;p&gt;I like performance, so I&apos;m all for this.&lt;br/&gt;
One thing about the code: it has a few probably&lt;br/&gt;
superfluous casts to (Scorer) from Scorer array elements.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12331098" author="paul.elschot@xs4all.nl" created="Mon, 3 Oct 2005 05:22:07 +0100"  >&lt;p&gt;Simplified version, removed most casts, inlined first() and last().&lt;br/&gt;
Passes all tests here.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12331227" author="abdollar" created="Tue, 4 Oct 2005 08:40:45 +0100"  >&lt;p&gt;Thanks Paul,  re-ran load tests here, everything looks good and it looks easier to read as well.&lt;br/&gt;
I also checked Arrays.sort, it&apos;s a merge sort - guaranteed nlogn.&lt;br/&gt;
This all looks squeaky clean.&lt;br/&gt;
Cheers,&lt;br/&gt;
&amp;#8211; Abdul&lt;/p&gt;</comment>
                    <comment id="12331735" author="paul.elschot@xs4all.nl" created="Tue, 11 Oct 2005 04:15:31 +0100"  >&lt;p&gt;The score() method can be simplified to use only the &apos;i&apos; index. There is no need&lt;br/&gt;
to offset the index into the scorers with the &apos;pos&apos; variable, because all scorers match.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12331775" author="abdollar" created="Tue, 11 Oct 2005 16:36:07 +0100"  >&lt;p&gt;ok, this makes sense as the scoring engine runs something like this&lt;/p&gt;

&lt;p&gt;while (scorer.next()) {&lt;br/&gt;
  int doc = scorer.doc();&lt;br/&gt;
  float scorer = scorer.score();&lt;br/&gt;
  collector.collect(doc, score);&lt;br/&gt;
}&lt;/p&gt;

&lt;p&gt;That is, next() will have ordered everything, so that by the time we call the scorer.score() method , everything should be in-order.&lt;/p&gt;

&lt;p&gt;Thanks, ill give that a go.&lt;/p&gt;

&lt;p&gt;The impression I have with lucene, and correct me if Im wrong, is that complex queries with many terms and clauses have their bottleneck in terms of performance in the ordering phase, that is scorer.next() requires everything to be in-document order and all the scorer sub-engines must comply. Collection is a moot point as you probably have small numbers of hits. However, on the other end of the scale, for queries with one or two terms that have a very high frequency the bottleneck is really in collection, that is the priority queue in collector.collect(),&lt;br/&gt;
Essentially this is a sorting issue, somewhat masked and manipulated at various stages.&lt;br/&gt;
This looks to me like lucene needs a &quot;Query Plan&quot;. &lt;/p&gt;</comment>
                    <comment id="12331778" author="paul.elschot@xs4all.nl" created="Tue, 11 Oct 2005 17:44:08 +0100"  >&lt;p&gt;Once the ConjunctionScorer matches the order of the subqueries/subscorers does not matter&lt;br/&gt;
because they all match and a sum score needs to be formed.&lt;/p&gt;

&lt;p&gt;Scorer.next() can only tolerate documents not to be in order at top level, where hit collection is done.&lt;br/&gt;
At lower levels in nested scorers, Lucene works a document at a time, and there Scorer.skipTo(docNr)&lt;br/&gt;
requires that all document numbers are in order. Such skipping is needed for conjunctions.&lt;br/&gt;
Since the score value of a document for a query depends on the score value of the subqueries,&lt;br/&gt;
at some point the association on a single document must be done.&lt;br/&gt;
For conjunctions, skipTo() is used, but for disjunctions this association is done by&lt;br/&gt;
a priority queue in the trunk, and a distribution like method in 1.4.3. This distribution method works&lt;br/&gt;
somewhat loosely on document order, and is therefore incompatible with skipping.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Paul Elschot&lt;/p&gt;</comment>
                    <comment id="12361284" author="yseeley@gmail.com" created="Wed, 28 Dec 2005 04:48:25 +0000"  >&lt;p&gt;It seems like more cruft could be removed if support for incremental adding of subscorers was removed.&lt;br/&gt;
Is there a reason we can&apos;t simplify things and just pass Collection&amp;lt;Scorer&amp;gt; in the constructor?&lt;/p&gt;
</comment>
                    <comment id="12436414" author="gsingers" created="Thu, 21 Sep 2006 02:09:48 +0100"  >&lt;p&gt;Yonik, Paul, do either of you know the status on this one?  From the looks of it, it hasn&apos;t been implemented.  It also has the highest number of votes in JIRA, so I thought I would take a look at it.  One downside is it is not in patch form, but it also doesn&apos;t look to hard to extract the changes, either.&lt;/p&gt;

&lt;p&gt;One issue I have with these performance issues is that we don&apos;t have a reliable benchmarking suite.  I am not a lawyer, but might we be able to use something like &lt;a href=&quot;http://trec.nist.gov/data/reuters/reuters.html&quot; class=&quot;external-link&quot;&gt;http://trec.nist.gov/data/reuters/reuters.html&lt;/a&gt; to build a sample benchmark suite?  This corpus, plus 100 or so queries could work nicely.  Of course, we would have to figure out some way for those interested to get their hands on the data.  What do others do for benchmarking?&lt;/p&gt;</comment>
                    <comment id="12436452" author="paul.elschot@xs4all.nl" created="Thu, 21 Sep 2006 08:17:07 +0100"  >&lt;p&gt;Iirc the orginal performance problem was caused by creation of objects in the tight loop&lt;br/&gt;
doing skipTo() on al  the scorers.&lt;/p&gt;

&lt;p&gt;This patch is against current trunk and based on the earlier posted versions of ConjunctionScorer.&lt;br/&gt;
which was based (by the first poster) on an existing ConjunctionScorer with an ASL notice,&lt;br/&gt;
which is why I could grant the licence to ASF.&lt;/p&gt;</comment>
                    <comment id="12436453" author="paul.elschot@xs4all.nl" created="Thu, 21 Sep 2006 08:20:21 +0100"  >&lt;p&gt;I just overlooked the grant by Abdul to the ASF.&lt;/p&gt;</comment>
                    <comment id="12443064" author="yseeley@gmail.com" created="Tue, 17 Oct 2006 21:51:03 +0100"  >&lt;p&gt;Thanks!  I just committed this.&lt;/p&gt;</comment>
                    <comment id="12476256" author="mikemccand" created="Tue, 27 Feb 2007 18:10:32 +0000"  >&lt;p&gt;Closing all issues that were resolved for 2.1.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12341256" name="Conjunction20060921.patch" size="5272" author="paul.elschot@xs4all.nl" created="Thu, 21 Sep 2006 08:17:07 +0100" />
                    <attachment id="12314681" name="ConjunctionScorer.java" size="3973" author="paul.elschot@xs4all.nl" created="Mon, 3 Oct 2005 05:22:07 +0100" />
                    <attachment id="12314671" name="ConjunctionScorer.java" size="4084" author="abdollar" created="Sun, 2 Oct 2005 15:32:05 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 3 Oct 2005 00:08:08 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13306</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27288</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>