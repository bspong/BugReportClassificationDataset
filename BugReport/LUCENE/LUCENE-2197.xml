<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:54 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2197/LUCENE-2197.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2197] StopFilter should not create a new CharArraySet if the given set is already an instance of CharArraySet</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2197</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;With &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2094&quot; title=&quot;Prepare CharArraySet for Unicode 4.0&quot;&gt;&lt;del&gt;LUCENE-2094&lt;/del&gt;&lt;/a&gt; a new CharArraySet is created no matter what type of set is passed to StopFilter. This does not behave as  documented and could introduce serious performance problems. Yet, according to the javadoc, the instance of CharArraySet should be passed to CharArraySet.copy (which is very fast for CharArraySet instances) instead of &quot;copied&quot; via &quot;new CharArraySet()&quot;&lt;/p&gt;</description>
                <environment></environment>
            <key id="12444957">LUCENE-2197</key>
            <summary>StopFilter should not create a new CharArraySet if the given set is already an instance of CharArraySet</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Thu, 7 Jan 2010 20:11:57 +0000</created>
                <updated>Fri, 10 May 2013 11:43:33 +0100</updated>
                    <resolved>Wed, 13 Jan 2010 18:08:21 +0000</resolved>
                            <version>3.1</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12797779" author="yseeley@gmail.com" created="Thu, 7 Jan 2010 20:19:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yet, according to the javadoc, the instance of CharArraySet should be passed to CharArraySet.copy (which is very fast for CharArraySet instances) instead of &quot;copied&quot; via &quot;new CharArraySet()&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We shouldn&apos;t copy it at all.&lt;/p&gt;</comment>
                    <comment id="12797784" author="yseeley@gmail.com" created="Thu, 7 Jan 2010 20:47:13 +0000"  >&lt;p&gt;Comment from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2094&quot; title=&quot;Prepare CharArraySet for Unicode 4.0&quot;&gt;&lt;del&gt;LUCENE-2094&lt;/del&gt;&lt;/a&gt; the other issue:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To prevent provided set from being modified while they are in use in a filter the given set is copied and wrapped in an immutable instance of chararrayset.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We should really avoid this type of nannyism in Lucene.&lt;/p&gt;</comment>
                    <comment id="12797787" author="yseeley@gmail.com" created="Thu, 7 Jan 2010 20:54:07 +0000"  >&lt;p&gt;Here&apos;s a patch that reverts to the previous behavior of using the set provided.&lt;/p&gt;</comment>
                    <comment id="12797952" author="simonw" created="Fri, 8 Jan 2010 09:11:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Here&apos;s a patch that reverts to the previous behavior of using the set provided. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Doesn&apos;t seem to lead anywhere to discuss with the performance police when I look at the average size of your comments. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
This was actually meant to be a &quot;pattern&quot; for analyzer subclasses so I won&apos;t be the &quot;immutability&quot; police here. Yonik, will you take this issue and commit?!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We should really avoid this type of nannyism in Lucene.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;oh well this seems to me like a  void * is / isn&apos;t evil discussion - nevermind.&lt;/p&gt;</comment>
                    <comment id="12798040" author="yseeley@gmail.com" created="Fri, 8 Jan 2010 15:10:51 +0000"  >&lt;p&gt;Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years (that forces people to write their own implementations for best performance), and you happened to be the closest person at the time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Related: I&apos;m the one who added this to BooleanQuery some time ago:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /** Returns the list of clauses in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; query. */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; List&amp;lt;BooleanClause&amp;gt; clauses() { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; clauses; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes, it probably should also say something like &quot;Don&apos;t modify - it may change the query&quot; to the comments.&lt;br/&gt;
To the software pedant, that&apos;s not safe and would probably be called bad design - but I strongly believe that our API should be for adults, and one should be able to introspect objects like Queries w/o suffering object allocations.  We should also continue to develop Lucene for &lt;b&gt;ourselves&lt;/b&gt;, not for some mythic stupid user... I&apos;ve seen too many bad design decisions based on &quot;this will confuse users&quot; arguments rather than &quot;this is confusing&quot;.&lt;/p&gt;

&lt;p&gt;Sometimes it comes down to people trying to solve a class of problems that others aren&apos;t even having issues with - I don&apos;t ever recall someone accidentally modifying the set after they passed it to the StopFilter, or someone accidentally modifying clauses() from BooleanQuery.&lt;/p&gt;

&lt;p&gt;I also disagree with checking all input parameters in many cases (things that could possibly be in someones inner loop and will throw an exception anyway).&lt;/p&gt;

&lt;p&gt;Say we have this piece of code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkLength(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; str.length() &amp;lt; MY_MAX_LENGTH;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think it&apos;s silly to add an explicit null check like so (but you see plenty of code like that):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkLength(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; str) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (str == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
     &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Can&apos;t pass checkLength a &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; string&quot;&lt;/span&gt;);
  }
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; str.length() &amp;lt; MY_MAX_LENGTH;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;There.  Is that reply long enough for you &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12798189" author="simonw" created="Fri, 8 Jan 2010 21:37:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sorry Simon... I think I just got fed up with stuff like this in the JDK over the years (that forces people to write their own implementations for best performance), and you happened to be the closest person at the time &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; no worries, thanks for the reply!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To the software pedant, that&apos;s not safe and would probably be called bad design - ...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I understand and I can totally see your point. I was kind of separated due to the kind of short &quot;rants&quot; (don&apos;t get me wrong). I agree with you that we should not do that in a filter as this constructor could be called very very frequently especially if an analyzer does not implement reusableTokenStream. I would still argue that for an analyzer this is a different story and I would want to keep the code in analyzers copying the set. Classes, instantiated so frequently as filters should not introduce possible bottlenecks while analyzers are usually shared that won&apos;t be much of a hassle - any performance police issues with this? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12798517" author="simonw" created="Sun, 10 Jan 2010 17:49:55 +0000"  >&lt;p&gt;Yonik, would you commit this issue please. I think we agreed on your solution.&lt;br/&gt;
simon&lt;/p&gt;</comment>
                    <comment id="12799853" author="yseeley@gmail.com" created="Wed, 13 Jan 2010 18:08:21 +0000"  >&lt;p&gt;committed.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12441571">LUCENE-2094</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12429673" name="LUCENE-2197.patch" size="881" author="yseeley@gmail.com" created="Thu, 7 Jan 2010 20:54:07 +0000" />
                    <attachment id="12429669" name="LUCENE-2197.patch" size="1040" author="simonw" created="Thu, 7 Jan 2010 20:16:59 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 7 Jan 2010 20:19:11 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11589</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25528</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>