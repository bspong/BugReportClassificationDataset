<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:27:58 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3638/LUCENE-3638.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3638] IndexReader.document always return a doc with all the stored fields loaded. And this can be slow for the indexed document contain huge fields</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3638</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;when generating digest for some documents with huge fields, it should be unnecessary to load the field but just interesting part of the field with the offset information. but indexreader always return the whole field content. afterward, the customized storedfieldsreader will got a repeated loading&lt;/p&gt;</description>
                <environment>&lt;p&gt;64bit linux java 1.6&lt;/p&gt;</environment>
            <key id="12534663">LUCENE-3638</key>
            <summary>IndexReader.document always return a doc with all the stored fields loaded. And this can be slow for the indexed document contain huge fields</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="peterchang">peter chang</reporter>
                        <labels>
                        <label>patch</label>
                    </labels>
                <created>Sun, 11 Dec 2011 15:23:31 +0000</created>
                <updated>Fri, 10 May 2013 11:42:45 +0100</updated>
                    <resolved>Wed, 14 Dec 2011 20:28:29 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13167117" author="shaie" created="Sun, 11 Dec 2011 15:40:39 +0000"  >&lt;p&gt;IndexReader and IndexSearcher already offer a doc/document method which takes StoredFieldVisitor, so why adding another version to them?&lt;/p&gt;

&lt;p&gt;Also, I don&apos;t think that DocumentStoredFieldVisitor should change. I find it very intuitive that I need to specify that fields that I want to load, rather than the fields that I don&apos;t want to. I.e., in my apps, there are many fields that are stored, but not loaded for results display.&lt;/p&gt;

&lt;p&gt;However, I do see the convenience of specifying just 1-2 fields that you don&apos;t want to load, rather than 20 that you do. So how about you create a new StoredFieldVisitor, which takes the list of fields &apos;not to load&apos;? It can extend DocumentStoredFieldVisitor by overriding needsField?&lt;/p&gt;</comment>
                    <comment id="13167120" author="rcmuir" created="Sun, 11 Dec 2011 15:47:24 +0000"  >&lt;blockquote&gt;
&lt;p&gt;However, I do see the convenience of specifying just 1-2 fields that you don&apos;t want to load, rather than 20 that you do. So how about you create a new StoredFieldVisitor, which takes the list of fields &apos;not to load&apos;? It can extend DocumentStoredFieldVisitor by overriding needsField?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;DocumentStoredFieldsVisitor already supports this in its ctors.&lt;/p&gt;

&lt;p&gt;So i would recommend we consider adding some sugar to indexreader:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;public final Document document(int docID, Set&amp;lt;String&amp;gt; fields) {
  return document(docid, new DocumentStoredFieldsVisitor(fields));
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sure there are cases where you want more complicated logic like to return STOP after certain fields, for that write your own logic.&lt;br/&gt;
But this is probably pretty common.&lt;/p&gt;</comment>
                    <comment id="13167121" author="thetaphi" created="Sun, 11 Dec 2011 15:48:46 +0000"  >&lt;p&gt;I think the issue is more about something else:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;when generating digest for some documents with huge fields, it should be unnecessary to load the field but just interesting part of the field with the offset information. but indexreader always return the whole field content. afterward, the customized storedfieldsreader will got a repeated loading&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;He wants to specify an offset/length into a very large field and only retrieve the subslice.&lt;/p&gt;</comment>
                    <comment id="13167122" author="thetaphi" created="Sun, 11 Dec 2011 15:50:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;So i would recommend we consider adding some sugar to indexreader:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats unrelated, BUT: yes please! And you already noted in the signature, one is very important: This method must be FINAL in IR!&lt;/p&gt;</comment>
                    <comment id="13167123" author="rcmuir" created="Sun, 11 Dec 2011 15:53:21 +0000"  >&lt;blockquote&gt;
&lt;p&gt;He wants to specify an offset/length into a very large field and only retrieve the subslice.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I really think the solution here is just to put the interesting part in its own field...&lt;/p&gt;

&lt;p&gt;Otherwise we have to add lots of complexity to the codec apis to support this (for instance what are the offsets/lengths? bytes? utf-16?)&lt;/p&gt;</comment>
                    <comment id="13167125" author="shaie" created="Sun, 11 Dec 2011 16:05:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;He wants to specify an offset/length into a very large field and only retrieve the subslice.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s indeed what the issue&apos;s description says, but there&apos;s no evidence to it in the patch. And I agree with Robert that in that case, one should store the interesting part in a special field.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DocumentStoredFieldsVisitor already supports this in its ctors.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Where? What am I missing? DSFV only takes a list of fieldsToAdd, not fieldsToFilter. If you have 20 fields in your index, and you want to load all but 2 fields, it may be more convenient to specify these two, and I proposed that it can be done in a DSFV extension.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So i would recommend we consider adding some sugar to indexreader:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this method is redundant, because one can easily call new DSFV(fields) and use the SFV document version. And why do we favor Set&amp;lt;String&amp;gt; over String...? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13167126" author="peterchang" created="Sun, 11 Dec 2011 16:08:54 +0000"  >&lt;p&gt;1. i agree with robert, fieldsToAdd, fieldsToFilter something like this can be added for IR and IS.doc&lt;br/&gt;
2. yes, the offset info is specified topic related. it can be process in app level when process multi-bytes encoded languages such as Zh_CN. in this situation, the offset is just an estimation. &lt;/p&gt;</comment>
                    <comment id="13167129" author="peterchang" created="Sun, 11 Dec 2011 16:23:57 +0000"  >&lt;p&gt;3. i do not think i can store only the interesting part because i do not know which is interesting part at index time. For example, the digest part of the search results is generated according to the query of somebody&apos;s.&lt;/p&gt;</comment>
                    <comment id="13167130" author="thetaphi" created="Sun, 11 Dec 2011 16:25:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think this method is redundant, because one can easily call new DSFV(fields) and use the SFV document version. And why do we favor Set&amp;lt;String&amp;gt; over String...? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ahm this would favour veeeery slow code. We would need to create a Set&amp;lt;String&amp;gt; on every call &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;But I agree here with Robert we should add the sugar method (final please and without maxDoc checks, that&apos;s up to the abstract impl) for easier use.&lt;/p&gt;</comment>
                    <comment id="13167131" author="thetaphi" created="Sun, 11 Dec 2011 16:27:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;3. i do not think i can store only the interesting part because i do not know which is interesting part at index time. For example, the digest part of the search results is generated according to the query of somebody&apos;s.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Digest is the wrong word, this confused here lots of people. The use case you talk about is &quot;highlighting&quot;. I agree for very large fields this is expensive.&lt;/p&gt;

&lt;p&gt;In fact your patch does not handle this case and I agree with the others as it&apos;s to heavy to implement and adds back the crazy complexity we had with lazy fields &amp;amp; co.&lt;/p&gt;</comment>
                    <comment id="13167132" author="peterchang" created="Sun, 11 Dec 2011 16:36:45 +0000"  >&lt;p&gt;yes, i mean hightlighting or sth. else dynamic generated at search time. Thnaks for Uwe&apos;s reminding.&lt;/p&gt;</comment>
                    <comment id="13167137" author="rcmuir" created="Sun, 11 Dec 2011 16:54:19 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Where? What am I missing? DSFV only takes a list of fieldsToAdd, not fieldsToFilter. If you have 20 fields in your index, and you want to load all but 2 fields, it may be more convenient to specify these two, and I proposed that it can be done in a DSFV extension.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, you certainly &lt;b&gt;can&lt;/b&gt; do this in a DSFV extension. The only question is do we need to provide one that does this? I think in general&lt;br/&gt;
each app will be different and having this visitor interface is &quot;enough&quot; rather than us supplying tons of concrete implementations for various&lt;br/&gt;
use cases.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think this method is redundant, because one can easily call new DSFV(fields) and use the SFV document version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes its definitely redundant. But I think this is probably very common? Doesn&apos;t matter to me either way though.&lt;/p&gt;

</comment>
                    <comment id="13167147" author="shaie" created="Sun, 11 Dec 2011 17:51:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;The only question is do we need to provide one that does this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, I did not propose that we do it in Lucene, but rather that Peter do it himself (I wrote &quot;how about &lt;b&gt;you&lt;/b&gt; ...&quot;). I agree we should not cater for all use cases out there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yes its definitely redundant. But I think this is probably very common? Doesn&apos;t matter to me either way though.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t mind much either. It&apos;s just that this sugar method suggests that you have to create a Set&amp;lt;String&amp;gt; on every call, while if we point people to DSFV, people will fins that they can pass String... too.&lt;/p&gt;

&lt;p&gt;I anyway think that for most apps, this object is probably constructed just once, because usually the list of fields does not change between queries, or at least you will have a handful of those, one per query type. Perhaps if we omit the sugar method, people will think that way, and indeed create the object just once. Dunno, it&apos;s your call.&lt;/p&gt;

&lt;p&gt;If someone ends up committing that method in the context of this issue, I suggest that its subject is renamed accordingly. Otherwise, just close it.&lt;/p&gt;</comment>
                    <comment id="13167149" author="rcmuir" created="Sun, 11 Dec 2011 18:01:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I don&apos;t mind much either. It&apos;s just that this sugar method suggests that you have to create a Set&amp;lt;String&amp;gt; on every call, while if we point people to DSFV, people will fins that they can pass String... too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but thats just because DSFV creates the hashset on the fly &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Perhaps if we omit the sugar method, people will think that way, and indeed create the object just once. Dunno, it&apos;s your call.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats true too, because if you reuse the DSFV then the String... method is not harmful since you are only doing it once.&lt;br/&gt;
So I think the String... method is ok on DSFV for this reason.&lt;/p&gt;

&lt;p&gt;However on indexreader, i think its also ok to have a sugar method with Set, because it just creates a DSFV around that hashset,&lt;br/&gt;
so its hardly wasteful. &lt;/p&gt;

&lt;p&gt;In other words: Create a Set&amp;lt;String&amp;gt; and reuse your own Set via the proposed sugar method, and I think its fine, &lt;br/&gt;
and a lot friendlier. Its not hashing anything. Sure its creating a DSFV each time, but like using a DSFV in any way, &lt;br/&gt;
its also creating a Document object each time. If you are really worried about this stuff, implement your own visitor &lt;br/&gt;
and don&apos;t use Document at all &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Don&apos;t forget we are talking about stored fields too!&lt;/p&gt;

&lt;p&gt;And I say keep the String... on DSFV only, but don&apos;t add to IR, so we don&apos;t encourage lots of wasteful rehashing.&lt;/p&gt;</comment>
                    <comment id="13167157" author="shaie" created="Sun, 11 Dec 2011 18:12:59 +0000"  >&lt;p&gt;Ok. One last comment (b/c I really don&apos;t mind if it&apos;s added or not) &amp;#8211; I meant that if we&apos;ll put a Set method on IR, users might falsely create a Set on every document() call, b/c it&apos;s there and it&apos;s convenient. Maybe javadocs can warn people against doing this ...&lt;/p&gt;</comment>
                    <comment id="13167211" author="mikemccand" created="Sun, 11 Dec 2011 21:22:54 +0000"  >&lt;p&gt;+1 to adding simple sugar method to IR to only load the specified fields (Set&amp;lt;String&amp;gt;) of the document.&lt;/p&gt;

&lt;p&gt;It&apos;s just sugar to forward to DSFV.&lt;/p&gt;</comment>
                    <comment id="13167334" author="peterchang" created="Mon, 12 Dec 2011 03:36:34 +0000"  >&lt;p&gt;i upload this patch just for convenience&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;IndexSearcher.java&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /* Sugar &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &amp;lt;code&amp;gt;.getIndexReader().document(docID)&amp;lt;/code&amp;gt; */
  /** see {@link IndexReader#document(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, Set, Set)} &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; detail*/
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Document doc(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; docID, Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; fieldsToAdd, Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; fieldsToFilter) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; CorruptIndexException, IOException {
	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; reader.document(docID, fieldsToAdd, fieldsToFilter);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here, you see the IS also has the access to document fetch. so in this case, IS will look like powerless if IR can not supply such method or interface to the external.&lt;/p&gt;</comment>
                    <comment id="13167729" author="mikemccand" created="Mon, 12 Dec 2011 19:55:39 +0000"  >&lt;p&gt;I was thinking just simple sugar, like the attached patch...&lt;/p&gt;</comment>
                    <comment id="13169665" author="mikemccand" created="Wed, 14 Dec 2011 20:28:29 +0000"  >&lt;p&gt;Thanks Peter!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12506901" name="doc.fields.patch" size="4822" author="peterchang" created="Sun, 11 Dec 2011 15:26:01 +0000" />
                    <attachment id="12507045" name="LUCENE-3638.patch" size="5958" author="mikemccand" created="Mon, 12 Dec 2011 19:55:39 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 11 Dec 2011 15:40:39 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>220385</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24060</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>