<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:52 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2100/LUCENE-2100.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2100] Make contrib analyzers final</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2100</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The analyzers in contrib/analyzers should all be marked final. None of the Analyzers should ever be subclassed - users should build their own analyzers if a different combination of filters and Tokenizers is desired.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12442093">LUCENE-2100</key>
            <summary>Make contrib analyzers final</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Dec 2009 13:41:53 +0000</created>
                <updated>Fri, 10 May 2013 11:44:00 +0100</updated>
                    <resolved>Wed, 9 Dec 2009 13:32:55 +0000</resolved>
                            <version>1.9</version>
                <version>2.0.0</version>
                <version>2.1</version>
                <version>2.2</version>
                <version>2.3</version>
                <version>2.3.1</version>
                <version>2.3.2</version>
                <version>2.4</version>
                <version>2.4.1</version>
                <version>2.9</version>
                <version>2.9.1</version>
                <version>3.0</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                    <comments>
                    <comment id="12786120" author="rcmuir" created="Fri, 4 Dec 2009 20:03:43 +0000"  >&lt;p&gt;In my opinion this applies to StandardAnalyzer also (or other non-final analyzers in core)&lt;br/&gt;
Otherwise we can never remove the deprecated setOverridesTokenStreamMethod method.&lt;/p&gt;</comment>
                    <comment id="12786123" author="simonw" created="Fri, 4 Dec 2009 20:06:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;In my opinion this applies to StandardAnalyzer also (or other non-final analyzers in core)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would +1 this! Yet is is still a BW-Compat break and I doubt that we can do this in 3.1.&lt;/p&gt;</comment>
                    <comment id="12786125" author="rcmuir" created="Fri, 4 Dec 2009 20:09:05 +0000"  >&lt;p&gt;Simon what do you suggest? Instead of breaking in 3.1, should we add a warning &apos;this will become final in X.Y, please do not subclass it, because it is not a good idea&apos; ???&lt;/p&gt;

&lt;p&gt;Uwe did some similar thing with making all the TokenStreams final before but I don&apos;t remember what the approach was (maybe just a break)&lt;/p&gt;</comment>
                    <comment id="12786499" author="simonw" created="Sat, 5 Dec 2009 20:55:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Simon what do you suggest? Instead of breaking in 3.1&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I suggest to move the core analyzer into a separate issue and link those. That way we can make progress here as the bw policy is not that strict or people do not care that much than they do for core analyzers. I doubt that many people have subclassed StandardAnalyzer and if they do they might do something wrong though. Lets have two issues so we can drive the discussion independently from contrib.&lt;br/&gt;
My personal feeling is that we should break it in 3.1 lets see what the other devs object.&lt;/p&gt;</comment>
                    <comment id="12786507" author="simonw" created="Sat, 5 Dec 2009 21:20:18 +0000"  >&lt;p&gt;This patch marks all analyzers in contrib as final and removes the backwards compat tests checking if subclasses implement reusableTokenStream.&lt;/p&gt;</comment>
                    <comment id="12786512" author="rcmuir" created="Sat, 5 Dec 2009 21:40:47 +0000"  >&lt;p&gt;Hi Simon, this sounds good to me if we clean up contrib first. There are not many analyzers in core anyway (is it just StandardAnalyzer that is not final?)&lt;/p&gt;

&lt;p&gt;My motivation for those was so we could get rid of the deprecated setOverridesTokenStreamMethod method.&lt;/p&gt;</comment>
                    <comment id="12786514" author="simonw" created="Sat, 5 Dec 2009 21:45:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;There are not many analyzers in core anyway (is it just StandardAnalyzer that is not final?) &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Three of them:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;StandardAnalyzer&lt;/li&gt;
	&lt;li&gt;KeywordAnalyzer&lt;/li&gt;
	&lt;li&gt;PerFieldAnalyzerWrapper&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;My motivation for those was so we could get rid of the deprecated setOverridesTokenStreamMethod method.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 this make me mad each time I look at those analyzers&lt;/p&gt;</comment>
                    <comment id="12786838" author="simonw" created="Mon, 7 Dec 2009 09:40:39 +0000"  >&lt;p&gt;I plan to commit this until 12/09/09 if nobody objects&lt;/p&gt;</comment>
                    <comment id="12787636" author="simonw" created="Tue, 8 Dec 2009 18:39:52 +0000"  >&lt;p&gt;will commit this tomorrow if nobody objects&lt;/p&gt;</comment>
                    <comment id="12787648" author="rcmuir" created="Tue, 8 Dec 2009 18:51:02 +0000"  >&lt;p&gt;+1 &lt;/p&gt;

&lt;p&gt;(just my nitpick of s/TokenStreamsm/TokenStreams/ typo in CHANGES...)&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="12787675" author="rcmuir" created="Tue, 8 Dec 2009 19:17:24 +0000"  >&lt;p&gt;Simon, if you want I will take care of contrib/collation tomorrow. This might make things simpler because  I plan on moving it around if no one objects to the patch: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2124&quot; title=&quot;move JDK collation to core, ICU collation to ICU contrib&quot;&gt;&lt;del&gt;LUCENE-2124&lt;/del&gt;&lt;/a&gt; has details.&lt;/p&gt;</comment>
                    <comment id="12788083" author="simonw" created="Wed, 9 Dec 2009 13:26:12 +0000"  >&lt;p&gt;Updated to latest trunk&lt;/p&gt;</comment>
                    <comment id="12788084" author="rcmuir" created="Wed, 9 Dec 2009 13:31:29 +0000"  >&lt;p&gt;patch looks good to me!&lt;/p&gt;</comment>
                    <comment id="12788085" author="simonw" created="Wed, 9 Dec 2009 13:32:55 +0000"  >&lt;p&gt;committed in revision 888799&lt;/p&gt;

&lt;p&gt;thanks robert for review&lt;/p&gt;</comment>
                    <comment id="13034530" author="esmond.pitt@bigpond.com" created="Tue, 17 May 2011 04:44:55 +0100"  >&lt;p&gt;Did somebody implement this for 3.1.0? StandardAnalyzer became final between 3.0.3 and 3.1.0. This is &lt;b&gt;not acceptable.&lt;/b&gt; Binary compatibility must be preserved and to be frank I do not give a good goddam how ugly the code inside looks compared to this requirement.&lt;/p&gt;</comment>
                    <comment id="13034540" author="steve_rowe" created="Tue, 17 May 2011 05:13:45 +0100"  >&lt;p&gt;Hi Esmond,&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href=&quot;http://svn.apache.org/viewvc/lucene/dev/tags/lucene_solr_3_1/lucene/src/java/org/apache/lucene/analysis/standard/StandardAnalyzer.java?view=markup&quot; class=&quot;external-link&quot;&gt;the source code for StandardAnalyzer&lt;/a&gt;.  Fewer than 50 lines of code there, if you take out the comments.  Copy/paste suddenly seems doable.  Lucene&apos;s Analyzers are best thought of as examples.&lt;/p&gt;

&lt;p&gt;Steve&lt;/p&gt;</comment>
                    <comment id="13034544" author="esmond.pitt@bigpond.com" created="Tue, 17 May 2011 05:27:47 +0100"  >&lt;p&gt;Steve&lt;/p&gt;

&lt;p&gt;Thanks. Maybe you could have a look at this. How do you suggest I recode it?&lt;br/&gt;
I wrote this 7 years ago and cannot now remember anything about it. Quite&lt;br/&gt;
possibly the entire thing is now obsolete, but I&apos;ve been carting it around&lt;br/&gt;
since before Lucene was even at Apache. All I&apos;ve ever done is adjust the&lt;br/&gt;
version number.&lt;/p&gt;

&lt;p&gt;==========================================================&lt;br/&gt;
public class PorterStemAnalyzer extends StandardAnalyzer&lt;br/&gt;
{&lt;br/&gt;
	/**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Construct a new instance of PorterStemAnalyzer.&lt;br/&gt;
	 */&lt;br/&gt;
	public PorterStemAnalyzer()
	{
		super(Version.LUCENE_30);
	}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;	@Override&lt;br/&gt;
	public final TokenStream tokenStream(String fieldName, Reader&lt;br/&gt;
reader)&lt;/p&gt;
	{
		return new PorterStemFilter(super.tokenStream(fieldName,
reader));
	}
&lt;p&gt;}&lt;br/&gt;
============================================================&lt;/p&gt;

&lt;p&gt;EJP&lt;/p&gt;
</comment>
                    <comment id="13034549" author="rcmuir" created="Tue, 17 May 2011 05:37:25 +0100"  >&lt;p&gt;Esmond: hi, what you are doing here is exactly the reason why we made it final.&lt;/p&gt;

&lt;p&gt;By subclassing StandardAnalyzer in this way, the indexer is no longer able to reuse tokenstreams, making analysis very slow and inefficient.&lt;/p&gt;

&lt;p&gt;The easiest way to get your PorterStemAnalyzer is to just use EnglishAnalyzer, which does just this.&lt;/p&gt;

&lt;p&gt;Otherwise if you really want to do it yourself, do it like this:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Analyzer analyzer = new ReusableAnalyzerBase() {
  protected TokenStreamComponents createComponents(String fieldName, Reader reader) {
    Tokenizer tokenizer = new StandardTokenizer(...);
    TokenStream filteredStream = new StandardFilter(tokenizer, ...);
    filteredStream = new LowerCaseFilterFilter(filteredStream, ...);
    filteredStream = new StopFilterFilter(filteredStream, ...);
    filteredStream = new PorterStemFilter(filteredStream, ...);
    return new TokenStreamComponents(tokenizer, filteredStream);
  }
};
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Please see &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3055&quot; title=&quot;LUCENE-2372, LUCENE-2389 made it impossible to subclass core analyzers&quot;&gt;LUCENE-3055&lt;/a&gt; for more examples and a more thorough explanation.&lt;/p&gt;

&lt;p&gt;The good news is if you implement your analyzer like this, you will see performance improvements!&lt;/p&gt;</comment>
                    <comment id="13034555" author="esmond.pitt@bigpond.com" created="Tue, 17 May 2011 05:47:47 +0100"  >&lt;p&gt;Many thanks. &lt;/p&gt;
</comment>
                    <comment id="13589556" author="l0co" created="Thu, 28 Feb 2013 14:23:57 +0000"  >&lt;p&gt;A little comment from me, because I just need to use this.&lt;/p&gt;

&lt;p&gt;I&apos;m wondering why people in opensource projects so much like to complicate simple things and like to break the rules of OOP, making a lot obstacles for users, like package visibility, almost everything private, and making final classes or methods. This just prevents to quick use the existing code, override class and make anything you want with this the existing code.&lt;/p&gt;

&lt;p&gt;It looks that this is because we should only use existing code, but not to change it any way, right?&lt;/p&gt;

&lt;p&gt;I want to use PolishAnalyzer, which is already implemented, and add a simple improvement to this class, but I cannot do it now. I need to copy all existing class to my package and write there the extension.&lt;/p&gt;

&lt;p&gt;Great &quot;improvement&quot; for me in this ticket.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12439901">LUCENE-2034</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12427475" name="LUCENE-2100.patch" size="23385" author="simonw" created="Wed, 9 Dec 2009 13:26:12 +0000" />
                    <attachment id="12427069" name="LUCENE-2100.patch" size="23500" author="simonw" created="Sat, 5 Dec 2009 21:20:18 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 4 Dec 2009 20:03:43 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11679</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25625</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>