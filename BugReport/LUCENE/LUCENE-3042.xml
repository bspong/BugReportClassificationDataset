<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:32:25 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3042/LUCENE-3042.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3042] AttributeSource can have an invalid computed state</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3042</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;If you work a tokenstream, consume it, then reuse it and add an attribute to it, the computed state is wrong.&lt;br/&gt;
thus for example, clearAttributes() will not actually clear the attribute added.&lt;/p&gt;

&lt;p&gt;So in some situations, addAttribute is not actually clearing the computed state when it should.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12505006">LUCENE-3042</key>
            <summary>AttributeSource can have an invalid computed state</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Apr 2011 20:29:53 +0100</created>
                <updated>Fri, 3 Jun 2011 17:37:15 +0100</updated>
                    <resolved>Sat, 23 Apr 2011 00:08:10 +0100</resolved>
                            <version>2.9.4</version>
                <version>3.0.3</version>
                <version>3.1</version>
                <version>3.2</version>
                <version>4.0-ALPHA</version>
                                <fixVersion>2.9.5</fixVersion>
                <fixVersion>3.0.4</fixVersion>
                <fixVersion>3.1</fixVersion>
                <fixVersion>3.2</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13023348" author="rcmuir" created="Fri, 22 Apr 2011 20:31:09 +0100"  >&lt;p&gt;Trivial test: if you add computeCurrentState() unconditionally as the first line of AttributeSource.clearAttributes, the test will pass.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;public class SimpleTest extends BaseTokenStreamTestCase {
  public void testSimple() throws IOException {
    String testString = &quot;t&quot;;
    
    Analyzer analyzer = new MockAnalyzer(random);
    TokenStream stream = analyzer.reusableTokenStream(&quot;dummy&quot;, new StringReader(testString));
    stream.reset();
    while (stream.incrementToken()) {
      // consume
    }
    
    assertAnalyzesToReuse(analyzer, testString, new String[] { &quot;t&quot; });
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13023350" author="thetaphi" created="Fri, 22 Apr 2011 20:35:01 +0100"  >&lt;p&gt;Now I am totally confused, this is impossible to my knowledge. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I will look into it.&lt;/p&gt;</comment>
                    <comment id="13023384" author="thetaphi" created="Fri, 22 Apr 2011 21:37:14 +0100"  >&lt;p&gt;I found the bug, its totally confusing but is a design error in the state caching originated by Michael Busch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Tokenizer and all Filters share the same Map instances for the attributes&lt;/li&gt;
	&lt;li&gt;BUT: Tokenizer and every filter have its own cached state&lt;/li&gt;
	&lt;li&gt;if you call clearAttributes on the filter, it clears its own state, but not the one of its parent tokenizer&lt;/li&gt;
	&lt;li&gt;if tokenizer calls clearAttributes, nothing is done&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fix is to make the AttributeSourcesnot only share the maps, but also the state&lt;/p&gt;</comment>
                    <comment id="13023398" author="thetaphi" created="Fri, 22 Apr 2011 21:50:46 +0100"  >&lt;p&gt;Here a quick patch using a reference (1-ele array)  to the state that is shared between all AttributeSources&lt;/p&gt;</comment>
                    <comment id="13023411" author="thetaphi" created="Fri, 22 Apr 2011 22:13:20 +0100"  >&lt;p&gt;New patch, that makes the code simplier to read:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I replaced the computeCurrentState by a  getter method that does the check and returns the state.&lt;/li&gt;
	&lt;li&gt;This makes it easier to use and removes lots of checks even for hasAttributes()&lt;/li&gt;
	&lt;li&gt;Now, most methods using State now only consist of the for Loop.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13023416" author="thetaphi" created="Fri, 22 Apr 2011 22:20:26 +0100"  >&lt;p&gt;Repost patch, first had logic error.&lt;/p&gt;</comment>
                    <comment id="13023421" author="thetaphi" created="Fri, 22 Apr 2011 22:44:36 +0100"  >&lt;p&gt;Just to conclude:&lt;br/&gt;
This bug is not so serious as it appears (else someone would have noticed before), as it would never happen on 0-8-15 TokenStreams, when used like IndexWriter does.&lt;br/&gt;
This bug only appears if you have TokenFilters and you add Attributes on the top level Filter later (after using the TokenStream for first time). Using the TokenStream means that you calculate the states and so every Filter/Tokenizer got his own cached state. Adding them a new Attribute on the last filter will never invalidate the cache of the Tokenizer.&lt;/p&gt;

&lt;p&gt;This bug could affect:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Analyzers that reuse TokenStreams partly and plug filters on top in the reuseableTokenStream() method, reusing the partially cached tokenstream. Like those, that always add a non-cacheable TokenFilter on top of a base TS.&lt;/li&gt;
	&lt;li&gt;TokenStreams that add attributes on the-fly in one of their filters.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We should backport this patch to 3.x, 3.1.1 and maybe even 2.9.x and 3.0.x branches (if somebody wants to patch 3.0). In general this is a serious issue of the new TokenStream API since 2.9.&lt;/p&gt;</comment>
                    <comment id="13023452" author="thetaphi" created="Sat, 23 Apr 2011 00:08:10 +0100"  >&lt;p&gt;Committed trunk revision: 1096073, 1096077&lt;br/&gt;
Committed 3.x revision: 1096078&lt;/p&gt;

&lt;p&gt;Please reopen when 3.1.1 or 2.9.5 should be released.&lt;/p&gt;</comment>
                    <comment id="13023542" author="thetaphi" created="Sat, 23 Apr 2011 11:05:32 +0100"  >&lt;p&gt;I thought about it:&lt;br/&gt;
This bug is so serious it should be fixed in all branches, too (even if never released anymore). This is important for e.g. 2.9 users whcih are stuck with that version.&lt;/p&gt;

&lt;p&gt;Committed 3.1 branch revision: 1096127&lt;br/&gt;
Committed 3.0 branch revision: 1096128&lt;br/&gt;
Committed 2.9 branch revision: 1096129&lt;/p&gt;</comment>
                    <comment id="13043491" author="rcmuir" created="Fri, 3 Jun 2011 17:37:15 +0100"  >&lt;p&gt;Bulk closing for 3.2&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12477168" name="LUCENE-3042.patch" size="9084" author="thetaphi" created="Fri, 22 Apr 2011 22:20:26 +0100" />
                    <attachment id="12477162" name="LUCENE-3042.patch" size="7974" author="thetaphi" created="Fri, 22 Apr 2011 21:50:46 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 22 Apr 2011 19:35:01 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2160</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24651</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>