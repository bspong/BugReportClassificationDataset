<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 12:57:32 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-1826/LUCENE-1826.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-1826] All Tokenizer implementations should have constructors that take AttributeSource and AttributeFactory</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-1826</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;I have a TokenStream implementation that joins together multiple sub TokenStreams (i then do additional filtering on top of this, so i can&apos;t just have the indexer do the merging)&lt;/p&gt;

&lt;p&gt;in 2.4, this worked fine.&lt;br/&gt;
once one sub stream was exhausted, i just started using the next stream &lt;/p&gt;

&lt;p&gt;however, in 2.9, this is very difficult, and requires copying Term buffers for every token being aggregated&lt;/p&gt;

&lt;p&gt;however, if all the sub TokenStreams share the same AttributeSource, and my &quot;concat&quot; TokenStream shares the same AttributeSource, this goes back to being very simple (and very efficient)&lt;/p&gt;


&lt;p&gt;So for example, i would like to see the following constructor added to StandardTokenizer:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; StandardTokenizer(AttributeSource source, Reader input, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; replaceInvalidAcronym) {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(source);
    ...
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;would likewise want similar constructors added to all Tokenizer sub classes provided by lucene&lt;/p&gt;</description>
                <environment></environment>
            <key id="12433589">LUCENE-1826</key>
            <summary>All Tokenizer implementations should have constructors that take AttributeSource and AttributeFactory</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="tsmith">Tim Smith</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Aug 2009 18:38:00 +0100</created>
                <updated>Fri, 25 Sep 2009 17:23:35 +0100</updated>
                    <resolved>Sun, 23 Aug 2009 09:34:43 +0100</resolved>
                            <version>2.9</version>
                                <fixVersion>2.9</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12745522" author="markrmiller@gmail.com" created="Thu, 20 Aug 2009 18:41:02 +0100"  >&lt;p&gt;To make sure these issues are considered for 2.9 (and there is not much time for this - but we will certainly take advantage of your experiences upgrading here), you want to set the fix to 2.9 rather than the affects.&lt;/p&gt;</comment>
                    <comment id="12745523" author="tsmith" created="Thu, 20 Aug 2009 18:43:46 +0100"  >&lt;p&gt;i&apos;ll do that from now on (feel free to boot them if you feel necessary (didn&apos;t want to overstep my bounds suggesting fix in 2.9))&lt;/p&gt;</comment>
                    <comment id="12745530" author="tsmith" created="Thu, 20 Aug 2009 18:51:16 +0100"  >&lt;p&gt;NOTE: for me, this is just a &quot;nice to have&quot;&lt;/p&gt;

&lt;p&gt;I currently only use my &quot;concat&quot; TokenStream on my own TokenStream implementations right now (so i can do this manually on my own TokenStream Impls)&lt;/p&gt;

&lt;p&gt;however i would like to be able to directly use lucene &quot;Tokenizers&quot; under my &quot;concat&quot; TokenStream under some situations in the future&lt;/p&gt;</comment>
                    <comment id="12745531" author="markrmiller@gmail.com" created="Thu, 20 Aug 2009 18:54:25 +0100"  >&lt;blockquote&gt;&lt;p&gt;didn&apos;t want to overstep my bounds suggesting fix in 2.9&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No worries - I think its good because it will force us to consider them before deciding to do something or move them out.&lt;/p&gt;</comment>
                    <comment id="12745667" author="tsmith" created="Thu, 20 Aug 2009 22:26:58 +0100"  >&lt;p&gt;This is further complicated by the fact that Tokenizers are often &quot;held onto&quot; in a thread local&lt;/p&gt;

&lt;p&gt;so, Tokenizer.reset(Reader) should also take an AttributeSource in order to really reset things properly&lt;/p&gt;

&lt;p&gt;also, then all TokenFilters/TokenStreams would be required to reinit their held onto &quot;attributes&quot; at reset() time, not at constructor time otherwise they could be holding onto stale attributes&lt;/p&gt;</comment>
                    <comment id="12745713" author="thetaphi" created="Fri, 21 Aug 2009 00:02:38 +0100"  >&lt;p&gt;I was thinking about that, too. But it was too much work in my opinion &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &amp;#8211; But for the same reason like &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1804&quot; title=&quot;Can&amp;#39;t specify AttributeSource for Tokenizer&quot;&gt;&lt;del&gt;LUCENE-1804&lt;/del&gt;&lt;/a&gt;, they should have this ctor (and the AttributeFactory one!).&lt;/p&gt;</comment>
                    <comment id="12745724" author="tsmith" created="Fri, 21 Aug 2009 00:27:52 +0100"  >&lt;p&gt;without the Tokenizer.reset(Reader, AttributeSource), i won&apos;t be able to reuse Tokenizer instances (will have to create a fresh one each time)&lt;br/&gt;
this can get costly if each Tokenizer is layered with a bunch of TokenFilters&lt;br/&gt;
obviously, adding this method would be nasty (and impose additional requirements on TokenFilters/Streams) but it would allow reusing the token streams to the utmost&lt;/p&gt;

&lt;p&gt;Question:&lt;br/&gt;
Is the reflection penalty on the new TokenStream stuff incurred per root AttributeSource?, or per TokenFilter/TokenStream?&lt;br/&gt;
that is, if i pass the same AttributeSource to 10 TokenStreams, is the reflection cost the same as if i passed it to just one?&lt;/p&gt;</comment>
                    <comment id="12745803" author="thetaphi" created="Fri, 21 Aug 2009 06:33:39 +0100"  >&lt;blockquote&gt;&lt;p&gt;without the Tokenizer.reset(Reader, AttributeSource), i won&apos;t be able to reuse Tokenizer instances (will have to create a fresh one each time)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is not possible per design. The AttributeSource cannot be changed. It is created during creation of the classes (this is why it is in the ctor and nowhere else). For filters, the attributes come from the input token stream.&lt;/p&gt;

&lt;p&gt;EDIT: The TokenStream itsself is the AttributeSource, the ctor parameter AttributeSource only tells the ctor not to create new Attribute instances and reuse the maps from the given source. But Each TokenStream/Filter is always an AttributeSource itsself.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the reflection penalty on the new TokenStream stuff incurred per root AttributeSource?, or per TokenFilter/TokenStream?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The reflection penalty is one-time per class (because of static cache of &quot;known&quot; classes), so all attributeimpl are inspected one time when a new AttributeSouce like TokenStream is created. There is an additional reflection cost, when new attributes are added, but also one time per AttributeImpl class.&lt;br/&gt;
Since the last changes in TokenStream the reflection is therefore no longer a penalty. The only problem is more work to construct an TokenStream (filling the LinkedHashMaps), because of that you should reuse TokenStream-chains.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;that is, if i pass the same AttributeSource to 10 TokenStreams, is the reflection cost the same as if i passed it to just one?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No change!&lt;/p&gt;</comment>
                    <comment id="12745969" author="tsmith" created="Fri, 21 Aug 2009 14:35:43 +0100"  >&lt;blockquote&gt;&lt;p&gt;This is not possible per design. The AttributeSource cannot be changed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I fully understand why&lt;/p&gt;

&lt;p&gt;but...&lt;br/&gt;
it should be rather easy to add a reset(AttributeSource input) to AttributeSource&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void reset(AttributeSource input) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (input == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;input AttributeSource must not be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.attributes = input.attributes;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.attributeImpls = input.attributeImpls;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.factory = input.factory;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would require making attributes and attributeImpls non-final (potentially reducing some jvm caching capabilities)&lt;/p&gt;

&lt;p&gt;However, this then provides the ability to do even more Attribute reuse&lt;br/&gt;
For example, if this method existed, the Indexer could use a ThreadLocal of raw AttributeSources (one AttributeSource per thread)&lt;br/&gt;
then, prior to calling TokenStream.reset(), it could call TokenStream.reset(ThreadLocal AttributeSource)&lt;/p&gt;

&lt;p&gt;This would result in all token streams for the same document using the same AttributeSource (reusing TermAttribute, etc)&lt;/p&gt;

&lt;p&gt;This would require that the no TokenStreams/Filters/Tokenizers call addAttribute() in the constructor (they would have to do this in reset())&lt;/p&gt;

&lt;p&gt;I totally get that this is a tall order&lt;br/&gt;
If you want i can open a separate ticket for this (AttributeSource.reset(AttributeSource)) for further consideration&lt;/p&gt;
</comment>
                    <comment id="12746348" author="michaelbusch" created="Sat, 22 Aug 2009 00:09:31 +0100"  >&lt;p&gt;Patch adds additional constructors that take AttributeSource or AttributeFactory to all tokenizers (core + contrib).&lt;/p&gt;

&lt;p&gt;It doesn&apos;t add additional reset() methods. We have to discuss that more and I think it&apos;s too late for 2.9.&lt;/p&gt;

&lt;p&gt;I&apos;ll commit this tomorrow if nobody objects.&lt;/p&gt;</comment>
                    <comment id="12746356" author="tsmith" created="Sat, 22 Aug 2009 00:19:36 +0100"  >&lt;p&gt;i&apos;ll fork off another ticket for the reset(AttributeSource) method&lt;/p&gt;</comment>
                    <comment id="12746360" author="tsmith" created="Sat, 22 Aug 2009 00:25:34 +0100"  >&lt;p&gt;forked off the reset(AttributeSource) to  	 &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1842&quot; title=&quot;Add reset(AttributeSource) method to AttributeSource&quot;&gt;&lt;del&gt;LUCENE-1842&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12746576" author="michaelbusch" created="Sun, 23 Aug 2009 09:34:43 +0100"  >&lt;p&gt;Committed revision 806942.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12417343" name="lucene-1826.patch" size="26200" author="michaelbusch" created="Sat, 22 Aug 2009 00:09:31 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>1.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 20 Aug 2009 17:41:02 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11937</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25901</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>