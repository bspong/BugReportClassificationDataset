<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:26:15 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3582/LUCENE-3582.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3582] NumericUtils.floatToSortableInt/doubleToSortableLong does not sort certain NaN ranges correctly and NumericRangeQuery produces wrong results for NaNs with half-open ranges</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3582</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The current implementation of floatToSortableInt does not account for different NaN ranges which may result in NaNs sorted before -Infinity and after +Infinity. The default Java ordering is: all NaNs after Infinity.&lt;/p&gt;

&lt;p&gt;A possible fix is to make all NaNs canonic &quot;quiet NaN&quot; as in:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// Canonicalize NaN ranges. I assume &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; check will be faster here than 
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// (v == v) == &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; on the FPU? We don&apos;t distinguish between different
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// flavors of NaNs here (see http://en.wikipedia.org/wiki/NaN). I guess
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// in Java &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; doesn&apos;t matter much anyway.
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((v &amp;amp; 0x7fffffff) &amp;gt; 0x7f800000) {
  &lt;span class=&quot;code-comment&quot;&gt;// Apply the logic below to a canonical &lt;span class=&quot;code-quote&quot;&gt;&quot;quiet NaN&quot;&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0x7fc00000 ^ 0x80000000;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t commit because I don&apos;t know how much of the existing stuff relies on this (nobody should be keeping different NaNs  in their indexes, but who knows...).&lt;/p&gt;</description>
                <environment></environment>
            <key id="12531994">LUCENE-3582</key>
            <summary>NumericUtils.floatToSortableInt/doubleToSortableLong does not sort certain NaN ranges correctly and NumericRangeQuery produces wrong results for NaNs with half-open ranges</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="5" iconUrl="https://issues.apache.org/jira/images/icons/priorities/trivial.png">Trivial</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="dweiss">Dawid Weiss</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Nov 2011 20:49:51 +0000</created>
                <updated>Sun, 27 Nov 2011 12:29:32 +0000</updated>
                    <resolved>Sat, 19 Nov 2011 12:08:32 +0000</resolved>
                                            <fixVersion>3.5</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13153142" author="thetaphi" created="Fri, 18 Nov 2011 21:25:06 +0000"  >&lt;p&gt;Why not simply use floatToIntBits without the raw? This one normalized NaN.&lt;br/&gt;
We used the raw methods for speed reasons as we assumed that NaN sorting makes no sense and NumericRangeQuery cannot usefully select those values. E.g. half open ranges will select NaN values incorrectly, so an index containing NaN values is not useable with NRQ where the upper bound is null.&lt;/p&gt;

&lt;p&gt;The same applies to Doubles, you patch is missing them.&lt;/p&gt;</comment>
                    <comment id="13153155" author="dweiss" created="Fri, 18 Nov 2011 21:52:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why not simply use floatToIntBits without the raw?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is no specific reason &amp;#8211; I wrote a similar routine using floatToIntBits, actually, but Robert pointed out that using raw bits may be faster and that NumericUtils already has a method for doing float sorting using fixed precision arithmetic. I checked the source (it&apos;s not suitable for my needs because I need unsigned order) but noticed the code is incorrect. That&apos;s pretty much it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I admit I thought floatToIntBits normalizes the representation (mantissa) but it doesn&apos;t &amp;#8211; in fact, the implementation in OpenJDK is indeed identical to what I suggested.&lt;/p&gt;

&lt;p&gt;Feel free to commit and correct for doubles.&lt;/p&gt;</comment>
                    <comment id="13153171" author="thetaphi" created="Fri, 18 Nov 2011 22:10:41 +0000"  >&lt;p&gt;So you agree if we exchange with flotToIntBits the bug is fixed. I would prefer to use the native JDK implementation, maybe it will get replaced by an intrisic &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;For NumericRangeQuery any change in this method has no real effect, as its broken/not working for NaN at all. To fix this, NumericRangeQurey.newFloatRange(.., f, null,...) should be explicitely use Float.POSITIVE_INFINITY instead of null, otherwise some NaNs could be selected, too (with your normalization all NaNs would be inside that range).&lt;/p&gt;

&lt;p&gt;What should we do here?&lt;/p&gt;</comment>
                    <comment id="13153189" author="dweiss" created="Fri, 18 Nov 2011 22:31:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;So you agree if we exchange with flotToIntBits the bug is fixed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, as far as I can see the implementation of floatToIntBits is exactly floatToRawIntBits + normalization of NaN. I doubt there&apos;ll be intrinsics for that &amp;#8211; the code is short and simple enough that it will probably inline and jit into a few assembly instructions anyway.&lt;/p&gt;

&lt;p&gt;I don&apos;t quite understand the other part of your question... the code in my patch is virtually the same as floatToIntBits:&lt;/p&gt;


&lt;p&gt;        int result = floatToRawIntBits(value);&lt;br/&gt;
        // Check for NaN based on values of bit fields, maximum&lt;br/&gt;
        // exponent and nonzero significand.&lt;br/&gt;
        if ( ((result &amp;amp; FloatConsts.EXP_BIT_MASK) ==&lt;br/&gt;
              FloatConsts.EXP_BIT_MASK) &amp;amp;&amp;amp;&lt;br/&gt;
             (result &amp;amp; FloatConsts.SIGNIF_BIT_MASK) != 0)&lt;br/&gt;
            result = 0x7fc00000;&lt;br/&gt;
        return result;&lt;/p&gt;

&lt;p&gt;The only difference is that this doesn&apos;t normalize &quot;significant&quot; NaNs (failing), but I don&apos;t know if they&apos;re even used in jvm code anywhere.&lt;/p&gt;</comment>
                    <comment id="13153197" author="yseeley@gmail.com" created="Fri, 18 Nov 2011 22:43:43 +0000"  >&lt;p&gt;We don&apos;t really support NaN as a value in Lucene in general I think.  I know that our sorting (priority queue) methods don&apos;t support NaN, and this is why FunctionQuery has the following code:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-comment&quot;&gt;// Current Lucene priority queues can&apos;t handle NaN and -Infinity, so
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// map to -&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt;.MAX_VALUE. This conditional handles both -infinity
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// and NaN since comparisons with NaN are always &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;.
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; score&amp;gt;&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt;.NEGATIVE_INFINITY ? score : -&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt;.MAX_VALUE;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13153199" author="thetaphi" created="Fri, 18 Nov 2011 22:47:18 +0000"  >&lt;p&gt;I have no preference to floatToIntBits or floatToRawIntBits. I just copied the code from Yoniks method from Solr, my original NumericRangeQuery code donation back in the past used floatToIntBits. I just said, the behaviour of NaN in NumericRangeQuery is undefined so there was no reason to support NaN with NRQ at all. So I dont care. It does affect NRQ, but to fix NRQ correctly, half open ranges must be modified to end at Positive_infnity, but then NRQ can never match NaN.&lt;/p&gt;

&lt;p&gt;In my opinion, NumericUtils is made for NumericRangeQuery and the raw method is an intrinsic, we should use it. I would simply not like to fix this.&lt;/p&gt;

&lt;p&gt;If we fix it, i have to add some checks in NRQ&apos;s ctor, too. So it supports NaN.&lt;/p&gt;</comment>
                    <comment id="13153200" author="dweiss" created="Fri, 18 Nov 2011 22:49:44 +0000"  >&lt;p&gt;Ok, don&apos;t fix it then, no problem from me &amp;#8211; like I said, I only found out because I looked inside. It&apos;s not a bug, it&apos;s a feature &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I personally think utility methods should work correctly for all kinds of input &amp;#8211; that utility method in NumericUtils should at least say it doesn&apos;t support NaN (or better: assert so).&lt;/p&gt;</comment>
                    <comment id="13153210" author="thetaphi" created="Fri, 18 Nov 2011 23:00:06 +0000"  >&lt;p&gt;I agree that normalizing Nan would be goof for NRQ, because this way you can search for NaN using:&lt;br/&gt;
NumericRangeQuery.newFloatRange(...., Float.NaN, Float.NaN, true, true);&lt;/p&gt;

&lt;p&gt;Otherwise the bits produced for the bounds may not be the same bits like indexed and thats the main problem. This  would fix this issue. Another thing to maybe fix would be the half-open ranges to correctly handle infinity. In that case a NRQ would never hit NaN (even when half open) but with the above query you could still search for NaN (as a &quot;point value&quot;). &lt;/p&gt;</comment>
                    <comment id="13153272" author="thetaphi" created="Sat, 19 Nov 2011 00:39:09 +0000"  >&lt;p&gt;Here a patch that fixes NumericRangeQuery to correctly handle NaN. If the upper/lower bounds == null, it will replace that by infinity and will never match NaN (this was a bug before). If you want to hit NaN with NRQ, you can do that only by directly hitting it using NumericRangeQuery.newFloatRange(&quot;float&quot;, Float.NaN, Float.NaN, true, true)&lt;/p&gt;

&lt;p&gt;This patch also handles doubles in addition to floats and uses the native Java method without raw. Tests were modified to check for NaN, too.&lt;/p&gt;

&lt;p&gt;The use of floatToIntBits instead of floatToRawIntBits has no real performance impact, as this method is only used during indexing. Population of FieldCache is unaffected. It just ensures that indexes are built with normalized NaN values, so NRQ can work correctly.&lt;/p&gt;

&lt;p&gt;Stored fields were already stored using the non-raw method, so this is now consistent.&lt;/p&gt;</comment>
                    <comment id="13153426" author="dweiss" created="Sat, 19 Nov 2011 08:17:04 +0000"  >&lt;p&gt;Looks good to me. Thanks Uwe.&lt;/p&gt;</comment>
                    <comment id="13153452" author="thetaphi" created="Sat, 19 Nov 2011 10:54:49 +0000"  >&lt;p&gt;Improved tests for NRQ. Ready to commit.&lt;/p&gt;</comment>
                    <comment id="13153456" author="thetaphi" created="Sat, 19 Nov 2011 11:20:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;I assume this check will be faster here than (v != v)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is the in my opinion the funniest thing you can show your students about floats. Everybody will tell you this can never be true &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Indeed OpenJDKs isNaN() is implemented exactly like that, it returns (v != v).&lt;/p&gt;</comment>
                    <comment id="13153465" author="dweiss" created="Sat, 19 Nov 2011 12:05:13 +0000"  >&lt;p&gt;Isn&apos;t that a shocking experience? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="13153466" author="thetaphi" created="Sat, 19 Nov 2011 12:08:32 +0000"  >&lt;p&gt;Committed trunk revision: 1203966&lt;br/&gt;
Committed 3.x revision: 1203967&lt;/p&gt;</comment>
                    <comment id="13157789" author="thetaphi" created="Sun, 27 Nov 2011 12:29:32 +0000"  >&lt;p&gt;Bulk close after release of 3.5&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12504353" name="LUCENE-3582.patch" size="21005" author="thetaphi" created="Sat, 19 Nov 2011 11:14:42 +0000" />
                    <attachment id="12504308" name="LUCENE-3582.patch" size="16519" author="thetaphi" created="Sat, 19 Nov 2011 00:39:09 +0000" />
                    <attachment id="12504266" name="LUCENE-3582.patch" size="1905" author="dweiss" created="Fri, 18 Nov 2011 20:58:15 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 18 Nov 2011 21:25:06 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>217731</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24115</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>