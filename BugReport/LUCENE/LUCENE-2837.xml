<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:20:32 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2837/LUCENE-2837.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2837] Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2837</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;We&apos;ve discussed cleaning up our *Searcher stack for some time... I&lt;br/&gt;
think we should try to do this before releasing 4.0.&lt;/p&gt;

&lt;p&gt;So I&apos;m attaching an initial patch which:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Removes Searcher, Searchable, absorbing all their methods into IndexSearcher&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removes contrib/remote&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Removes MultiSearcher&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Absorbs ParallelMultiSearcher into IndexSearcher (ie you can now&lt;br/&gt;
    pass useThreads=true, or a custom ES to the ctor)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The patch is rough &amp;#8211; I just ripped stuff out, did search/replace to&lt;br/&gt;
IndexSearcher, etc.  EG nothing is directly testing using threads with&lt;br/&gt;
IndexSearcher, but before committing I think we should add a&lt;br/&gt;
newSearcher to LuceneTestCase, which randomly chooses whether the&lt;br/&gt;
searcher uses threads, and cutover tests to use this instead of making&lt;br/&gt;
their own IndexSearcher.&lt;/p&gt;

&lt;p&gt;I think MultiSearcher has a useful purpose, but as it is today it&apos;s&lt;br/&gt;
too low-level, eg it shouldn&apos;t be involved in rewriting queries: the&lt;br/&gt;
Query.combine method is scary.  Maybe in its place we make a higher&lt;br/&gt;
level class, with limited API, that&apos;s able to federate search across&lt;br/&gt;
multiple IndexSearchers?  It&apos;d also be able to optionally use thread&lt;br/&gt;
per IndexSearcher.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12494204">LUCENE-2837</key>
            <summary>Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Tue, 28 Dec 2010 21:44:23 +0000</created>
                <updated>Wed, 30 Mar 2011 16:50:13 +0100</updated>
                    <resolved>Mon, 10 Jan 2011 23:16:59 +0000</resolved>
                                            <fixVersion>3.1</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>2</watches>
                                                                                  <comments>
                    <comment id="12975649" author="rcmuir" created="Tue, 28 Dec 2010 21:57:30 +0000"  >&lt;blockquote&gt;
&lt;p&gt;but before committing I think we should add a&lt;br/&gt;
newSearcher to LuceneTestCase, which randomly chooses whether the&lt;br/&gt;
searcher uses threads, and cutover tests to use this instead of making&lt;br/&gt;
their own IndexSearcher.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did this on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;, but the tests won&apos;t all pass until we fix the FieldCache autodetect &lt;br/&gt;
synchronization bug (the Numerics tests will fail with multiple threads)...&lt;/p&gt;</comment>
                    <comment id="12975668" author="thetaphi" created="Tue, 28 Dec 2010 22:52:53 +0000"  >&lt;p&gt;I like that! +1&lt;/p&gt;

&lt;p&gt;We should discuss about how many threads should be spawned. If you have an index with many segments, even small ones, I think only the larger segments should be separate threads, all others should be handled sequentially. So maybe add a maxThreads cound, then sort the IndexReaders by maxDoc and then only spawn maxThreads-1 threads for the bigger readers and then one additional thread for the rest?&lt;/p&gt;</comment>
                    <comment id="12975670" author="thetaphi" created="Tue, 28 Dec 2010 23:01:14 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think MultiSearcher has a useful purpose, but as it is today it&apos;s&lt;br/&gt;
too low-level, eg it shouldn&apos;t be involved in rewriting queries: the&lt;br/&gt;
Query.combine method is scary. Maybe in its place we make a higher&lt;br/&gt;
level class, with limited API, that&apos;s able to federate search across&lt;br/&gt;
multiple IndexSearchers? It&apos;d also be able to optionally use thread&lt;br/&gt;
per IndexSearcher.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Query.combine is simply broken, this is another issue. It violates DeMorgans law...: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2756&quot; title=&quot;MultiSearcher.rewrite() incorrectly rewrites queries&quot;&gt;&lt;del&gt;LUCENE-2756&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12975676" author="rcmuir" created="Tue, 28 Dec 2010 23:15:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Query.combine is simply broken, this is another issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, but with this issue we don&apos;t need Query.combine anymore, so its then fixed.&lt;br/&gt;
This method only exists for MultiSearcher (and there is some other dead code in &lt;br/&gt;
Query.java related to it, that we could even delete now, totally unused today!)&lt;/p&gt;</comment>
                    <comment id="12975742" author="simonw" created="Wed, 29 Dec 2010 08:49:50 +0000"  >&lt;p&gt;Mike, I like it! This issue together with &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2831&quot; title=&quot;Revise Weight#scorer &amp;amp; Filter#getDocIdSet API to pass Readers context&quot;&gt;&lt;del&gt;LUCENE-2831&lt;/del&gt;&lt;/a&gt; will make the API so much better and powerful IMO. IndexSearcher is the right class to be passed to Query#weight / Query#createWeight and Weight ctors should take it too. That would make all the instanceof checkes unnecessary and would always have access to the ReaderContext, yet I think we should like those issues as related though. &lt;/p&gt;</comment>
                    <comment id="12976011" author="mikemccand" created="Thu, 30 Dec 2010 11:11:29 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;but before committing I think we should add a newSearcher to LuceneTestCase, which randomly chooses whether the searcher uses threads, and cutover tests to use this instead of making their own IndexSearcher.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did this on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;, but the tests won&apos;t all pass until we fix the FieldCache autodetect&lt;br/&gt;
synchronization bug (the Numerics tests will fail with multiple threads)...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Duh, I knew newSearcher() sounded familiar &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  OK so we have to fix the multi-threaded bug in FC first and then I think commit the newSearcher cutover from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;, then commit this issue.&lt;/p&gt;

&lt;p&gt;Then, I think, separately create a new &quot;higher level&quot; MultiSearcher w/ a limited search API.  I&apos;ll open a new issue for that.&lt;/p&gt;</comment>
                    <comment id="12976012" author="mikemccand" created="Thu, 30 Dec 2010 11:12:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;We should discuss about how many threads should be spawned. If you have an index with many segments, even small ones, I think only the larger segments should be separate threads, all others should be handled sequentially. So maybe add a maxThreads cound, then sort the IndexReaders by maxDoc and then only spawn maxThreads-1 threads for the bigger readers and then one additional thread for the rest?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds like a great improvement &amp;#8211; Uwe can you open a new issue for that?  Let&apos;s try to leave this issue as a rote refactoring...&lt;/p&gt;</comment>
                    <comment id="12976020" author="thetaphi" created="Thu, 30 Dec 2010 11:59:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;That sounds like a great improvement - Uwe can you open a new issue for that? Let&apos;s try to leave this issue as a rote refactoring...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done: &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2840&quot; title=&quot;Multi-Threading in IndexSearcher (after removal of MultiSearcher and ParallelMultiSearcher)&quot;&gt;LUCENE-2840&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="12976031" author="rcmuir" created="Thu, 30 Dec 2010 12:52:55 +0000"  >&lt;p&gt;i noticed the comment about the shutting down of executorservice... can we just make the executorservice arg mandatory for parallel?&lt;/p&gt;

&lt;p&gt;in my opinion, whoever creates it should be responsible for shutting it down, no one else. &lt;/p&gt;

&lt;p&gt;so i don&apos;t like the dual mode where we sometimes make our own but you can set a different one.&lt;br/&gt;
we don&apos;t clean up correctly at all wrt this in ParallelMultiShredder today in my opinion.&lt;/p&gt;</comment>
                    <comment id="12976032" author="rcmuir" created="Thu, 30 Dec 2010 12:57:42 +0000"  >&lt;blockquote&gt;
&lt;p&gt;OK so we have to fix the multi-threaded bug in FC first and then I think commit the newSearcher cutover from &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;, then commit this issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, you don&apos;t have to do all of that (you could commit this one, then chase down all the bugs). I was just warning you&lt;br/&gt;
so you don&apos;t get surprised.&lt;/p&gt;</comment>
                    <comment id="12976035" author="rcmuir" created="Thu, 30 Dec 2010 13:19:03 +0000"  >&lt;p&gt;Mike, also if you apply &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2751&quot; title=&quot;add LuceneTestCase.newSearcher()&quot;&gt;&lt;del&gt;LUCENE-2751&lt;/del&gt;&lt;/a&gt;, tests randomly fails because of the &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2756&quot; title=&quot;MultiSearcher.rewrite() incorrectly rewrites queries&quot;&gt;&lt;del&gt;LUCENE-2756&lt;/del&gt;&lt;/a&gt; bug.&lt;/p&gt;

&lt;p&gt;For example TestBoolean2.testRandomQueries will fail because sometimes it uses a wildcard query,&lt;br/&gt;
and if it then incorporates MUST_NOT, this will fail against the multisearcher/parallelmultisearcher &lt;br/&gt;
because the combine() is wrong.&lt;/p&gt;

&lt;p&gt;So I&apos;m thinking we should add the newSearcher tests after you committed this one &lt;br/&gt;
(as long as this one has some reasonable standalone tests to show it works)&lt;/p&gt;</comment>
                    <comment id="12977375" author="mikemccand" created="Tue, 4 Jan 2011 17:55:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;can we just make the executorservice arg mandatory for parallel?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The thing is, I&apos;d like for &quot;use threads&quot; to be easy for the app/user.&lt;/p&gt;

&lt;p&gt;But: we aren&apos;t near a good solution here (the threads are tied to segments, which I don&apos;t like).&lt;/p&gt;

&lt;p&gt;So I agree, for now, how about I remove the IS ctor that takes boolean useThreads, leaving only the one that takes an ES?  And in the jdoc I can say &quot;for example here&apos;s how to get an ES, but, be sure you properly shut it down when done, and then close the IS/IR&quot;?&lt;/p&gt;

&lt;p&gt;Ideally, in the future, we make it very easy to use concurrency within a single search...&lt;/p&gt;</comment>
                    <comment id="12977420" author="mikemccand" created="Tue, 4 Jan 2011 19:17:00 +0000"  >&lt;p&gt;Another iteration.  I think it&apos;s ready to commit!&lt;/p&gt;

&lt;p&gt;I removed the IS ctors that took boolean useThreads &amp;#8211; you must make your own ES instead.&lt;/p&gt;

&lt;p&gt;I fixed TestNRTThreads to pass an ES (and at least TestSort does as well), so we have some minimal testing until we commit newSearcher.&lt;/p&gt;</comment>
                    <comment id="12977677" author="simonw" created="Wed, 5 Jan 2011 08:21:29 +0000"  >&lt;p&gt;Mike that patch looks good to me. I just have one small comment about the executor service. You stated that the user has to shutdown the service upon IS#close(). This is absolutely the recommended way but I see a little risk for people calling ExecutorService#shutdownNow()  which interrupts the executing threads and can cause a AlreadyClosedException down in one of our NIO Directories if there are still searches going on etc. I don&apos;t think this is super important but I would point it out in the JDoc to give folks a heads-up. Thoughts?&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12977717" author="mikemccand" created="Wed, 5 Jan 2011 10:35:53 +0000"  >&lt;p&gt;Good point Simon &amp;#8211; I&apos;ll add that warning to the jdoc.&lt;/p&gt;</comment>
                    <comment id="12977753" author="doronc" created="Wed, 5 Jan 2011 12:16:50 +0000"  >&lt;p&gt;This broke ant target &apos;eclipse&apos; - just fixed it (remove the &apos;remote&apos; dir).&lt;br/&gt;
Probably the same is needed also for &quot;Idea&quot; but I&apos;m not sure how to do this.&lt;/p&gt;</comment>
                    <comment id="12977764" author="rcmuir" created="Wed, 5 Jan 2011 13:15:45 +0000"  >&lt;p&gt;Hello, I think we should revisit branch_3x here. I&apos;m not asking for a backport but i think we should do some targeted javadoc+deprecations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I think we should deprecate Searcher, suggesting to use IndexSearcher instead. Searcher-&amp;gt;IndexSearcher is probably the only way&lt;br/&gt;
this change will affect 99% of users and so this fixes that case, as most users make a simple change to their code.&lt;/li&gt;
	&lt;li&gt;We could add some wordage to MultiSearcher, such as &apos;if you are making a MS of IS you might want to consider MR instead&apos;. This would&lt;br/&gt;
be nice since we are still going to have the lurking combine() bug, at least people then know that MR is recommended.&lt;/li&gt;
	&lt;li&gt;i think it would be nice to add something to contrib/remote so users expect to change their code? Personally I think we should deprecate.&lt;br/&gt;
Deprecate doesn&apos;t mean there has to be a 1-1 replacement... sometimes we re-think and it wasnt the best idea all along. But deprecation&lt;br/&gt;
helps alert anyone using it so they wont be surprised with 4.0&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12977784" author="steve_rowe" created="Wed, 5 Jan 2011 14:51:35 +0000"  >&lt;blockquote&gt;
&lt;p&gt;This broke ant target &apos;eclipse&apos; - just fixed it (remove the &apos;remote&apos; dir).&lt;br/&gt;
Probably the same is needed also for &quot;Idea&quot; but I&apos;m not sure how to do this. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Done:  r1055474&lt;/p&gt;</comment>
                    <comment id="12977882" author="mikemccand" created="Wed, 5 Jan 2011 17:57:09 +0000"  >&lt;p&gt;I agree we should fix 3.x, too.&lt;/p&gt;

&lt;p&gt;Also I didn&apos;t fix all the jdocs that reference Searcher/Searchable!&lt;/p&gt;

&lt;p&gt;I&apos;ll reopen...&lt;/p&gt;</comment>
                    <comment id="12977919" author="mikemccand" created="Wed, 5 Jan 2011 19:27:59 +0000"  >&lt;p&gt;Reopen to also backport merging of PMS into IS in 3.x.&lt;/p&gt;</comment>
                    <comment id="12977923" author="yseeley@gmail.com" created="Wed, 5 Jan 2011 19:31:21 +0000"  >&lt;p&gt;The multithreaded stuff feels like it should be in a subclass of IndexSearcher.&lt;br/&gt;
But barring that, perhaps make it so that the subSearcher array is only populated if there is an executor passed in (to try and keep IndexSearcher as light weight as possible)?&lt;/p&gt;</comment>
                    <comment id="12977973" author="yseeley@gmail.com" created="Wed, 5 Jan 2011 21:21:05 +0000"  >&lt;p&gt;How about this little patch to avoid creation of IndexSearcher per-segment if not needed?&lt;/p&gt;</comment>
                    <comment id="12978021" author="mikemccand" created="Wed, 5 Jan 2011 22:58:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;How about this little patch to avoid creation of IndexSearcher per-segment if not needed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looks great!&lt;/p&gt;</comment>
                    <comment id="12979842" author="mikemccand" created="Mon, 10 Jan 2011 23:16:59 +0000"  >&lt;p&gt;3rd time&apos;s a charm?&lt;/p&gt;</comment>
                    <comment id="13013404" author="gsingers" created="Wed, 30 Mar 2011 16:50:13 +0100"  >&lt;p&gt;Bulk close for 3.1&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310051">
                <name>Supercedes</name>
                                <outwardlinks description="supercedes">
                            <issuelink>
            <issuekey id="12479795">LUCENE-2756</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12467587" name="LUCENE-2837.patch" size="1855" author="yseeley@gmail.com" created="Wed, 5 Jan 2011 21:21:05 +0000" />
                    <attachment id="12467453" name="LUCENE-2837.patch" size="270412" author="mikemccand" created="Tue, 4 Jan 2011 19:17:00 +0000" />
                    <attachment id="12467069" name="LUCENE-2837.patch" size="261886" author="mikemccand" created="Tue, 28 Dec 2010 21:47:04 +0000" />
                </attachments>
            <subtasks>
            <subtask id="12494299">LUCENE-2840</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 28 Dec 2010 21:57:30 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11024</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24855</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>