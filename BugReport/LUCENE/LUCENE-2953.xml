<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:19:38 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2953/LUCENE-2953.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2953] PriorityQueue is inheriently broken if subclass attempts to use &quot;heap&quot; w/generic T bound to anything other then &quot;Object&quot;</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2953</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;as discovered in &lt;a href=&quot;https://issues.apache.org/jira/browse/SOLR-2410&quot; title=&quot;ConcurrentLRUCache can throw class cast exception&quot;&gt;&lt;del&gt;SOLR-2410&lt;/del&gt;&lt;/a&gt; the fact that the protected &quot;heap&quot; variable in PriorityQueue is initialized using an Object[] makes it impossible for subclasses of PriorityQueue to exist and access the &quot;heap&quot; array unless they bind the generic to Object.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12500713">LUCENE-2953</key>
            <summary>PriorityQueue is inheriently broken if subclass attempts to use &quot;heap&quot; w/generic T bound to anything other then &quot;Object&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="hossman">Hoss Man</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 Mar 2011 01:33:43 +0000</created>
                <updated>Fri, 3 Jun 2011 17:37:21 +0100</updated>
                    <resolved>Wed, 9 Mar 2011 09:36:31 +0000</resolved>
                                            <fixVersion>3.2</fixVersion>
                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13003758" author="hossman" created="Tue, 8 Mar 2011 01:34:25 +0000"  >&lt;p&gt;patch to TestPriorityQueue demonstrating bug&lt;/p&gt;</comment>
                    <comment id="13003852" author="dweiss" created="Tue, 8 Mar 2011 08:20:29 +0000"  >&lt;p&gt;There seems to be no consensus on how to deal with generic arrays. Even the JDK has two different implementations &amp;#8211; one in ArrayDeque (uses T[]), the other in ArrayList (uses Object[]). Creating an array of a given component type is (can be?) more costly than keeping an array Object[] because it needs to be done via call to Array.newArray (haven&apos;t checked though). Theoretically having a concrete-type array should speed up iterators (because no additional casts are needed), but I don&apos;t think this is the case. &lt;/p&gt;

&lt;p&gt;In fact, I just wrote a simple Caliper benchmark that compares these (attached), my results show the runtime times is nearly identical (probably within stddev).:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 0% Scenario{vm=java, trial=0, benchmark=Generic, size=1000000} 8985430.93 ns; &#963;=257329.28 ns @ 10 trials
33% Scenario{vm=java, trial=0, benchmark=GenericSubclass, size=1000000} 8989486.27 ns; &#963;=207151.20 ns @ 10 trials
67% Scenario{vm=java, trial=0, benchmark=Object, size=1000000} 8767324.34 ns; &#963;=218235.97 ns @ 10 trials

      benchmark   ms linear runtime
        Generic 8.99 =============================
GenericSubclass 8.99 ==============================
         Object 8.77 =============================

vm: java
trial: 0
size: 1000000
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13003854" author="dweiss" created="Tue, 8 Mar 2011 08:22:37 +0000"  >&lt;p&gt;A Google Caliper benchmark comparing iteration over a class with a generic T[] (real T[] type), its concrete-type subclass and a class using Object[] and (T) casts for accessing array elements.&lt;/p&gt;</comment>
                    <comment id="13003868" author="thetaphi" created="Tue, 8 Mar 2011 09:04:01 +0000"  >&lt;p&gt;The easy and most simply way to handle this is osing Object[] like in ArrayList.&lt;/p&gt;

&lt;p&gt;The problem with then always casting from Object to T is thousands of unchecked warnings in PriorityQueue. I would propose the following:&lt;br/&gt;
In general the final T[] heap variable should be private to the PQ and used only there. For performance yonik wanted the heap[] protected and that caused the issue. As long as the heap[] array is private it can never be accessed incorrectly.&lt;/p&gt;

&lt;p&gt;So my proposal is to internally use the T[] as a private field and simply use another Object[] thats protected (pointing to the same array). This would fix the problem. The most correct idea would be to add a setHeapSlot(int, T o) and T getHeapSlot(int) method and hiding the T[] heap completely, but I know, Yonik will disagree &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There is some other problem: the heap array should be final, but it cannot, because of the stupid initialize() method. I would like to remove this method and simply move the code to PQ&apos;s ctor. I don&apos;t understand why the initialize() method is there, which is a problem: Every guide on Java programming tells you to never call protected overrideable methods from ctors, as this can break easily. If the heap[] is final, the problem of having two references to the same object is not a problem anymore.&lt;/p&gt;</comment>
                    <comment id="13003873" author="dweiss" created="Tue, 8 Mar 2011 09:17:07 +0000"  >&lt;p&gt;&amp;gt; The problem with then always casting from Object to T is thousands of unchecked warnings in PriorityQueue.&lt;/p&gt;

&lt;p&gt;You could erase the type in internal methods of PriorityQueue and use Object instead of T then.&lt;/p&gt;

&lt;p&gt;&amp;gt; So my proposal is to internally use the T[] as a private field and simply use another Object[] thats protected (pointing to the same array).&lt;/p&gt;

&lt;p&gt;Or a protected getter method that would do the cast (why bother with having two fields):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;protected Object[] getStorageArray() { return (Object[]) heap; }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If Yonik wants access to that array I&apos;m sure he copies it to a local var. prior to doing any intensive loops...&lt;/p&gt;</comment>
                    <comment id="13003876" author="thetaphi" created="Tue, 8 Mar 2011 09:30:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or a protected getter method that would do the cast (why bother with having two fields)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea, I am currently fixing the whole stuff (I was the one who added the generics in Lucene 3.0). But I am now also removing initialize(int), this construct is very broken. In trunk we can break backwards for this.&lt;/p&gt;</comment>
                    <comment id="13003878" author="dweiss" created="Tue, 8 Mar 2011 09:36:30 +0000"  >&lt;p&gt;I remember using pq at some point for other things and hating that initialize method, so I&apos;m all for it.&lt;/p&gt;</comment>
                    <comment id="13003881" author="thetaphi" created="Tue, 8 Mar 2011 09:53:14 +0000"  >&lt;p&gt;Here my patch, that also removes initialize(int), which is bad design.&lt;/p&gt;

&lt;p&gt;For 3.x we can simply leave out this change and only make the heap variable private and expose as Object[] using a getter method.&lt;/p&gt;</comment>
                    <comment id="13003882" author="thetaphi" created="Tue, 8 Mar 2011 09:56:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;I remember using pq at some point for other things and hating that initialize method, so I&apos;m all for it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The inititalize method was only there for one single reason in Lucene (a hack): The getSentinelObject() method was used in HitQueue like that: it should return null for some special corner case. To enable this special case, a boolean field was used. But the ctor had to populate that field before the prepoulating in super() was done, and thats impossible. I changed that by adding a boolean ctor to the PQ base class to enable/disable pre-populating like HitQueue did before.&lt;/p&gt;</comment>
                    <comment id="13004431" author="thetaphi" created="Wed, 9 Mar 2011 09:19:59 +0000"  >&lt;p&gt;Committed trunk revision: 1079707&lt;/p&gt;

&lt;p&gt;I will backport the getHeapArray() method to 3.2, but for now this is not a problem, as Solr&apos;s class is not yet generified in 3.x.&lt;/p&gt;</comment>
                    <comment id="13004438" author="thetaphi" created="Wed, 9 Mar 2011 09:36:31 +0000"  >&lt;p&gt;Committed 3.x revision: 1079711 (only private heap and getter, initialize unchanged for backwards compatibility).&lt;/p&gt;

&lt;p&gt;If we want to backport also the initialize() changes to 3.x (as PQ is a @lucene.internal class), we should reopen this issue.&lt;/p&gt;</comment>
                    <comment id="13043533" author="rcmuir" created="Fri, 3 Jun 2011 17:37:21 +0100"  >&lt;p&gt;Bulk closing for 3.2&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310050">
                <name>Regression</name>
                                <outwardlinks description="breaks">
                            <issuelink>
            <issuekey id="12500699">SOLR-2410</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12472925" name="BenchmarkArrayAccess.java" size="2603" author="dweiss" created="Tue, 8 Mar 2011 08:22:37 +0000" />
                    <attachment id="12472927" name="LUCENE-2953.patch" size="18097" author="thetaphi" created="Tue, 8 Mar 2011 09:53:14 +0000" />
                    <attachment id="12472894" name="LUCENE-2953.patch" size="1119" author="hossman" created="Tue, 8 Mar 2011 01:34:25 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>3.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 8 Mar 2011 08:20:29 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>10923</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24739</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>