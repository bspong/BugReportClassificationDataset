<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:22:00 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2694/LUCENE-2694.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2694] MTQ rewrite + weight/scorer init should be single pass</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2694</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Spinoff of &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2690&quot; title=&quot;Do MultiTermQuery boolean rewrites per segment&quot;&gt;&lt;del&gt;LUCENE-2690&lt;/del&gt;&lt;/a&gt; (see the hacked patch on that issue)...&lt;/p&gt;

&lt;p&gt;Once we fix MTQ rewrite to be per-segment, we should take it further and make weight/scorer init also run in the same single pass as rewrite.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12476949">LUCENE-2694</key>
            <summary>MTQ rewrite + weight/scorer init should be single pass</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                    </labels>
                <created>Sun, 10 Oct 2010 12:23:24 +0100</created>
                <updated>Fri, 10 May 2013 11:42:54 +0100</updated>
                    <resolved>Wed, 12 Jan 2011 21:40:50 +0000</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12933499" author="simonw" created="Thu, 18 Nov 2010 17:46:53 +0000"  >&lt;p&gt;I started on this issue with a rough idea and wanna upload it to get some initial feedback. The idea is to provide access to TermState via the TermsEnum Attribute API to eventually use the TermState inside of TermQuery to prevent a second lookup as well as term cache. Its very rough and I tried to go the least intrusive way as possible so the implementation is mainly to show the main principles.&lt;/p&gt;

&lt;p&gt;feedback welcome.&lt;/p&gt;</comment>
                    <comment id="12933505" author="thetaphi" created="Thu, 18 Nov 2010 18:06:55 +0000"  >&lt;p&gt;Havent looked closely into the patch (still need to understand the whole thing), just some comments from attribute policeman in general:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The TermStateAttributeImpl.copyTo should throw ClassCastEx if attributes are not conform (compare other impls), so the if statement should not be there. AttributeSource takes care of copying. This is not used, but for completeness.&lt;/li&gt;
	&lt;li&gt;the convenience addClause() method in abstract base class should be final! Else you could incorrectly override the wrong one. We already have code duplication in your patch because of this. When you make it final you will see!&lt;/li&gt;
	&lt;li&gt;why is the attribute using a SetOnce? Attributes generally should be modifiable multiple times. Now you have to call clear() first. This may change in future when we have set-once attributes, but for now that violates the contract &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;Is the docFreq no already part of the state so TermCollectingRewrite does not need to expose it separately?&lt;/li&gt;
	&lt;li&gt;What happens in the term collectors when the same term with different states are merged in the PQ/TermsHash/...?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12933517" author="mikemccand" created="Thu, 18 Nov 2010 18:45:03 +0000"  >&lt;p&gt;I would rather not use an attribute here &amp;#8211; this is a very core thing so I think we should extend TermsEnum API.&lt;/p&gt;

&lt;p&gt;We can just add a getTermState and a seek(TermState) to terms enum (and, actually, remove cacheTermState)?&lt;/p&gt;

&lt;p&gt;Also, then we wouldn&apos;t need to add the get docs/positions enum methods to TermState.&lt;/p&gt;</comment>
                    <comment id="12933522" author="simonw" created="Thu, 18 Nov 2010 18:49:32 +0000"  >&lt;p&gt;Uwe I agree with your comments - I just didn&apos;t pay lots of attention to it since I was rather interested in feedback for the idea....&lt;/p&gt;

&lt;p&gt;I actually think that we should move the getTermState into the termsEnum though rather than using an attribute but for now that was easier to implement though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What happens in the term collectors when the same term with different states are merged in the PQ/TermsHash/...?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That one should work since I map the TermState per reader in a PerReaderTermState though.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12933541" author="simonw" created="Thu, 18 Nov 2010 19:43:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can just add a getTermState and a seek(TermState) to terms enum (and, actually, remove cacheTermState)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes! please! - i used the attribute to move faster here since it didn&apos;t require to change the API really.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, then we wouldn&apos;t need to add the get docs/positions enum methods to TermState.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah see above....&lt;/p&gt;

&lt;p&gt;i will workout a cleaner patch&lt;/p&gt;</comment>
                    <comment id="12933862" author="simonw" created="Fri, 19 Nov 2010 16:54:08 +0000"  >&lt;p&gt;next iteration. This patch removes the term cache completely and exposes getTermState via TermsEnum. Terms, TermsEnum and IndexReader can now obtain a DocEnum directly by passing in a TermState.&lt;/p&gt;

&lt;p&gt;I need to run some benchmarks on an index with several segments on a index with two segments its just slightly faster...&lt;br/&gt;
mike do you have one ready?&lt;/p&gt;</comment>
                    <comment id="12933888" author="mikemccand" created="Fri, 19 Nov 2010 17:57:09 +0000"  >&lt;p&gt;Phew that was fast!&lt;/p&gt;

&lt;p&gt;Wow, you nuked the terms dict cache &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Nice!&lt;/p&gt;

&lt;p&gt;Though it makes me a bit nervous... like there&apos;ll always be a risk&lt;br/&gt;
we&apos;ve missed some path through Lucene that does two lookups...  And,&lt;br/&gt;
even for external reasons (eg same query arrives to Lucene, looking&lt;br/&gt;
for next page or something), the cache is useful.&lt;/p&gt;

&lt;p&gt;EG, a straight TermQuery (not spawned by MTQ) is now hitting the terms&lt;br/&gt;
dict twice.  Once inside Sim.idfExplain, where it calls&lt;br/&gt;
searcher.docFreq(term), and then again to pull the scorers per sub&lt;br/&gt;
reader.  Probably, TermQuery should pull the PerReaderTermState, up&lt;br/&gt;
front, if it wasn&apos;t already handed it?  And then pass the docFreq to&lt;br/&gt;
Sim.idfExplain.&lt;/p&gt;

&lt;p&gt;Should we add a PerReaderTermState.docFreq(), which just sums up&lt;br/&gt;
across all subs?&lt;/p&gt;

&lt;p&gt;Does TermState really need field()?  Seems wasteful to have to store&lt;br/&gt;
that... eg an MTQ will store many TermStates against the same field.&lt;br/&gt;
I think we should keep TermState lean.&lt;/p&gt;

&lt;p&gt;Also, I think it shouldn&apos;t need that clone method?&lt;/p&gt;

&lt;p&gt;I think instead of duplicating docs/docsAndPositions (and soon&lt;br/&gt;
bulkPostings) on TermsEnum, once for TermState and once without, we&lt;br/&gt;
should just add a seek(TermState)?  And then the single&lt;br/&gt;
docs/docsAndPositions/etc. method can be used to get the enum for that&lt;br/&gt;
term.  (Likewise for Terms) Also, we should remove docFreq and ord&lt;br/&gt;
from TermsEnum since you should get it from TermState?&lt;/p&gt;

&lt;p&gt;I think IndexReader can offer the sugar methods (that take either&lt;br/&gt;
BytesRef term or String field + TermState state).&lt;/p&gt;

&lt;p&gt;Also: I tried to run the benchmark on beast but unfortunately there&apos;s&lt;br/&gt;
a bug somewhere (even though Lucene core tests pass) &amp;#8211; I see&lt;br/&gt;
different results for some fuzzy queries.&lt;/p&gt;

&lt;p&gt;Nice work!!  Getting to single term lookup for all queries will be awesome!&lt;/p&gt;</comment>
                    <comment id="12934260" author="mikemccand" created="Sun, 21 Nov 2010 12:04:05 +0000"  >&lt;p&gt;BTW, one use case where this patch should show a sizable performance gain is a &quot;primary key lookup&quot; against a multi-segment index.&lt;/p&gt;

&lt;p&gt;So this&apos;d be a TermQuery against eg an &quot;id&quot; field, where the app knows at most one doc contains the requested value.&lt;/p&gt;

&lt;p&gt;Today, we pay a high price for the 2nd pass, because we do not cache a miss against a segment.  So on the first pass (computing IDF) we know which segment has a match and which segments do not, but then on the 2nd pass we re-pay the lookup cost against all the misses (the single segment w/ the hit will be cached).&lt;/p&gt;

&lt;p&gt;So this ought to be a big win... especially once we combine this w/ the speedups from pulsing codec (we still need to cutover to this as a default) then primary key lookups in a Lucene index will be much faster...&lt;/p&gt;</comment>
                    <comment id="12972125" author="simonw" created="Thu, 16 Dec 2010 15:57:52 +0000"  >&lt;p&gt;Attaching current state - all test pass for me and luceneutils brings consistent results with trunk.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

               Query   QPS trunkQPS termstate  Pct diff
            unit~2.0       14.70       14.39     -2.1%
          united~2.0        6.91        6.83     -1.1%
          united~1.0        7.42        7.38     -0.6%
        &lt;span class=&quot;code-quote&quot;&gt;&quot;unit state&quot;&lt;/span&gt;       12.31       12.37      0.5%
            unit~1.0       15.41       15.49      0.5%
                uni*        7.18        7.22      0.6%
                un*d        7.97        8.04      0.9%
               unit*       12.89       13.09      1.6%
        +unit +state       28.16       28.64      1.7%
    +nebraska +state       81.26       82.67      1.7%
spanNear([unit, state], 10, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;)       11.60       11.83      2.0%
               state       40.50       41.47      2.4%
  spanFirst(unit, 5)       47.65       48.84      2.5%
          unit state       17.72       18.19      2.7%
                 u*d        4.27        4.48      5.0%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;those are the results I have for now.... Fuzzy only expands to 50 terms so that might no be very meaningful. I re-added the TermCache for this patch though... &lt;br/&gt;
Will attach more info tomorrow.&lt;/p&gt;</comment>
                    <comment id="12972127" author="rcmuir" created="Thu, 16 Dec 2010 16:06:15 +0000"  >&lt;p&gt;We shouldn&apos;t lose the clone() optimization in StandardPostingsReader... &lt;br/&gt;
the class is final so it should use &apos;copy&apos; instead of calling super.clone()&lt;br/&gt;
This is important for -client.&lt;/p&gt;</comment>
                    <comment id="12972586" author="simonw" created="Fri, 17 Dec 2010 18:40:41 +0000"  >&lt;p&gt;FYI - there is a coding error in the latest patch that causes the TermState to be ignored - TermWeight uses the wrong reference to the PerReaderTermState. I will upload a new patch later this weekend&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12972607" author="simonw" created="Fri, 17 Dec 2010 19:24:41 +0000"  >&lt;p&gt;here is a new patch. I removed the hacky TermWeight part to make only MTQ single pass for now. Other TermQueries will hit the TermCache for now.  No nocommit left. Currently there is some duplication / unncessary classes in the TermState hierarchy - that needs cleanup. &lt;/p&gt;

&lt;p&gt;BTW. I see some highlighter test failing - will look into this later...&lt;br/&gt;
simon&lt;/p&gt;</comment>
                    <comment id="12972758" author="mikemccand" created="Sat, 18 Dec 2010 09:35:21 +0000"  >&lt;p&gt;If I force scoring BQ rewrite for wildcard &amp;amp; prefix queries (ie set that rewrite mode and then relax BQ max clause count) I see healthy speedups (~23-27%) for these queries!  Great &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;While this doesn&apos;t happen w/ our default settings (ie these queries quickly cutover to constant filter rewrite), apps that change these defaults will see a gain, plus, the term cache (which today &quot;protects&quot; you) is terribly fragile since apps w/ many MTQ queries in flight can thrash that cache thus killing performance.  This patch prevents that entirely since MTQs do their own caching of the TermStates they need: awesome.&lt;/p&gt;</comment>
                    <comment id="12972759" author="mikemccand" created="Sat, 18 Dec 2010 09:35:43 +0000"  >&lt;p&gt;I love seeing cacheCurrentTerm removed!!&lt;/p&gt;

&lt;p&gt;OK I think we are close!  A bunch of smallish things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I think we should remove TermsEnum.docFreq and .ord?  Ie replace&lt;br/&gt;
    with .termState().docFreq() and .ord()?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;At first I was thinking we should merge up TermStateBase into&lt;br/&gt;
    TermState but actually there are cases (eg PulsingCodec, which )&lt;br/&gt;
    where you want the separation.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe rename TermStateBase -&amp;gt; PrefixCodedTermState?  Ie this is&lt;br/&gt;
    really the TermState impl used by any codec using&lt;br/&gt;
    PrefixCodedTerms?  EG the fact that it stores the filePointer into&lt;br/&gt;
    a _X.tis file is particular to it...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe rename MockTermState -&amp;gt; BasicTermState?  At first I was&lt;br/&gt;
    thinking the codec should return null if it cannot seek by&lt;br/&gt;
    TermState... (I generally don&apos;t like mock returns that hide/lose&lt;br/&gt;
    information...) but then it&apos;s convenient to always have something&lt;br/&gt;
    to hold the docFreq for the term to avoid lots of special cased&lt;br/&gt;
    code... so I think it&apos;s OK?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;We lost the &quot;clone using new&quot; in StandardTermState...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Maybe revert changes to AppendingCodec?  (Ie let it pass its terms&lt;br/&gt;
    dict cache size again)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I wonder if we can somehow make PerReaderTermState use an array&lt;br/&gt;
    (keyed by sub reader index) instead... seems like a new HashMap&lt;br/&gt;
    per Term in an MTQ could be heavy.  It&apos;s tricky because we don&apos;t&lt;br/&gt;
    store enough information (ie to quickly map parent reader + sub&lt;br/&gt;
    reader -&amp;gt; sub index). But I don&apos;t think this should hold up&lt;br/&gt;
    committing... since our defaults don&apos;t typically allow for &lt;b&gt;that&lt;/b&gt;&lt;br/&gt;
    many terms in-flight it should be fine...&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;It&apos;s a little spooky the TermQuery.scorer calls .take()&lt;br/&gt;
    (destructive), eg it means if you ask for scorer again on same&lt;br/&gt;
    reader you get diff&apos;t behavior?  Can we make that a .get() instead&lt;br/&gt;
    of .take()?  (This may also bite us if we use diff&apos;t threads to&lt;br/&gt;
    score each segment, ie suddenly this .take() must be thread safe).&lt;br/&gt;
    In fact, same deal w/ nulling out the TQ.perReaderTermState?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;The comment on top of TermStateByteStart looks wrong?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Small whitespace issue &amp;#8211; missing space on &quot;if(&quot;.  Also, our&lt;br/&gt;
    generics are not supposed to have whitespace inside, eg we&lt;br/&gt;
    shouldn&apos;t have the space in &quot;new DoubleBarrelLRUCache&amp;lt;FieldAndTerm, TermStateBase&amp;gt;(termsCacheSize);&quot;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I think the TQ ctor that takes both docFreq and states can drop&lt;br/&gt;
    the docFreq?  Ie it can ask the states for it?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12972769" author="thetaphi" created="Sat, 18 Dec 2010 10:34:57 +0000"  >&lt;p&gt;I have also some things:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We currently don&apos;t support seeking a FilteredTermsEnum, this is disallowed by UnsupportedOperationException (we may change this, but its complicated, Robert and me are thinking about it, but for now its disallowed, as it would break the enum logic). So the TermState seek method in FilteredTermsEnum should also throw UOE:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/** This &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; does not support seeking!
 * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; UnsupportedOperationException
 */
@Override
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; SeekStatus seek(BytesRef term, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; useCache) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; UnsupportedOperationException(getClass().getName()+&lt;span class=&quot;code-quote&quot;&gt;&quot; does not support seeking&quot;&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Additionally, can the next() implementation in FilteredTermsEnum use TermState? It does lots of seeking on the underlying (filtered) TermsEnum. This is the reason why sekking on the FilteredTermsEnum is not allowed. Filtering is done here on the accept() methods.&lt;/li&gt;
	&lt;li&gt;For what is setNextReader in TermCollector? I don&apos;t like that, but you seems to need it for the PerReaderTermState. The collector should really only work on the enum not on any reader. At least the&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thats what I have seen on first patch review, will now apply patch and look closer into it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; But the first point is important, FilteredTermsEnum currently should not support seeking.&lt;/p&gt;</comment>
                    <comment id="12972777" author="thetaphi" created="Sat, 18 Dec 2010 11:36:11 +0000"  >&lt;p&gt;Here just the patch for a correct behaving FilteredTermsEnum (according to docs, that it does currently not support seeking). The assert is also not needed, as tenum is guranteed to be not null (its final and ctor already asserts this) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12973003" author="simonw" created="Sun, 19 Dec 2010 15:46:54 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think we should remove TermsEnum.docFreq and .ord? Ie replace&lt;br/&gt;
with .termState().docFreq() and .ord()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I disagree on that - at least docFreq() is an essential part of the API and we should not force TermState creation just to get the df. Yet, TermState is an expert API you should not need to pull an expert API to get something essential like df.&lt;br/&gt;
I would leave those as they are or only pull ord into TermState.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe rename TermStateBase -&amp;gt; PrefixCodedTermState? Ie this is&lt;br/&gt;
really the TermState impl used by any codec using&lt;br/&gt;
PrefixCodedTerms? EG the fact that it stores the filePointer into&lt;br/&gt;
a _X.tis file is particular to it..&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah that sounds reasonable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe rename MockTermState -&amp;gt; BasicTermState? At first I was&lt;br/&gt;
thinking the codec should return null if it cannot seek by&lt;br/&gt;
TermState... (I generally don&apos;t like mock returns that hide/lose&lt;br/&gt;
information...) but then it&apos;s convenient to always have something&lt;br/&gt;
to hold the docFreq for the term to avoid lots of special cased&lt;br/&gt;
code... so I think it&apos;s OK?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we can get rid of it entirely. We can use TermStateBase for it and let PrefixCodedTermState just add the pointer though. That way we get rid of it nicely. I would like to keep that api as it is since it makes the usage easier especially in the rewrite methods..&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We lost the &quot;clone using new&quot; in StandardTermState...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t get that really - IMO this is quite minor but I will look into it again... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe revert changes to AppendingCodec? (Ie let it pass its terms&lt;br/&gt;
dict cache size again)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;unintentional - will fix &lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt; wonder if we can somehow make PerReaderTermState use an array&lt;br/&gt;
(keyed by sub reader index) instead... seems like a new HashMap&lt;br/&gt;
per Term in an MTQ could be heavy. It&apos;s tricky because we don&apos;t&lt;br/&gt;
store enough information (ie to quickly map parent reader + sub&lt;br/&gt;
reader -&amp;gt; sub index). But I don&apos;t think this should hold up&lt;br/&gt;
committing... since our defaults don&apos;t typically allow for that&lt;br/&gt;
many terms in-flight it should be fine...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I actually had this in a very similar way. I used a custom linked list and relied on the fact that the incoming reader are applied in the same order and skipped until the next reader with that term appeared. I changed that back to Map impl to make it simpler since I didn&apos;t see speedups - well this was caused by a very nifty coding error &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;i think I have that patch around somewhere is the history... lets see..&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think the TQ ctor that takes both docFreq and states can drop the docFreq? Ie it can ask the states for it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah sure - well the patch is my current state since I had to drop everything and leave on friday... I clean up an upload a new patch early this week&lt;/p&gt;

&lt;p&gt;@Uwe: I will incorporate your fix - thanks&lt;/p&gt;

</comment>
                    <comment id="12973018" author="rcmuir" created="Sun, 19 Dec 2010 16:57:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;I would leave those as they are or only pull ord into TermState.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree about docfreq, but ord should go. Ord should be in e.g. StandardTermState, but not in TermState nor TermsEnum.&lt;/p&gt;

&lt;p&gt;This is an implementation detail for our current terms dictionary, and its silly how we just throw UOE for other codecs:&lt;br/&gt;
Its codec-specific. Other terms implementations might have &quot;something like an ord&quot; but it definitely might not even be a long!&lt;/p&gt;

&lt;p&gt;Within StandardCodec etc this creates no problem as it still has access to it. If we find ourselves wanting/needing to use ord&lt;br/&gt;
outside of Standard we should ask ourselves why this is and instead fix the APIs to not depend on some codec-specific long value.&lt;/p&gt;</comment>
                    <comment id="12973031" author="simonw" created="Sun, 19 Dec 2010 18:38:56 +0000"  >&lt;p&gt;Here are some numbers for the latest patch with 10M wiki index (commitpoint: delmulti) and all MTQ rewriting to ScoreBoolean:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
               Query    QPS base    QPS spec  Pct diff
    +nebraska +state       42.96       42.17     -1.8%
          unit state        3.63        3.61     -0.4%
        &lt;span class=&quot;code-quote&quot;&gt;&quot;unit state&quot;&lt;/span&gt;        1.72        1.71     -0.3%
               state       10.55       10.54     -0.1%
spanNear([unit, state], 10, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;)        0.96        0.96      0.1%
        +unit +state        4.03        4.04      0.2%
  spanFirst(unit, 5)        4.83        4.86      0.7%
          united~1.0        4.76        4.86      2.1%
            unit~1.0        2.62        2.69      2.7%
          united~2.0        0.82        0.84      2.8%
            unit~2.0        0.34        0.37      8.2%
                un*d        3.55        4.14     16.6%
                uni*        0.52        0.61     18.1%
                 u*d        0.47        0.57     19.9%
               unit*        2.04        2.52     23.8%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="12973046" author="mikemccand" created="Sun, 19 Dec 2010 22:19:41 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I disagree on that - at least docFreq() is an essential part of the API and we should not force TermState creation just to get the df. Yet, TermState is an expert API you should not need to pull an expert API to get something essential like df.&lt;br/&gt;
I would leave those as they are or only pull ord into TermState.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK I agree, let&apos;s leave at least dF directly in TermsEnum.&lt;/p&gt;

&lt;p&gt;Calling .termState presumably entails a clone right?  Ie the returned object is guaranteed private?  So that&apos;s a good reason not to require it...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I actually had this in a very similar way. I used a custom linked list and relied on the fact that the incoming reader are applied in the same order and skipped until the next reader with that term appeared. I changed that back to Map impl to make it simpler since I didn&apos;t see speedups - well this was caused by a very nifty coding error &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let&apos;s just stick w/ map for now I think?  Progress not perfection!&lt;/p&gt;</comment>
                    <comment id="12973226" author="simonw" created="Mon, 20 Dec 2010 15:25:59 +0000"  >&lt;p&gt;here is a new patch with a slightly different implementation of PerReaderTermState. I build a view from the subreader used to build the MTQ which is shared across all PerReaderTermState instance for the query. The PrTS then uses only the ordinal from the ReaderView to reference a TermState which prevents us from creating Map instances for each term. In turn this also made it possible to fall back to re-seeking the TermDict if the reader is not in the view. &lt;/p&gt;

&lt;p&gt;I fixed all other issues and all tests including the highlighter pass now.&lt;/p&gt;
</comment>
                    <comment id="12973295" author="simonw" created="Mon, 20 Dec 2010 18:46:03 +0000"  >&lt;p&gt;mike - do you mind if I take this?&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12973589" author="mikemccand" created="Tue, 21 Dec 2010 11:43:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;mike - do you mind if I take this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course not!  Please take it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12973591" author="mikemccand" created="Tue, 21 Dec 2010 11:44:04 +0000"  >&lt;p&gt;Patch looks awesome!&lt;/p&gt;

&lt;p&gt;Really, ord() support is a function of the terms dict impl, not the&lt;br/&gt;
codec (well, indirectly codec has ord() support if its terms dict impl&lt;br/&gt;
does).  PrefixCodedTermsDict, in turn, supports ord() only if its&lt;br/&gt;
terms index does.&lt;/p&gt;

&lt;p&gt;Can we move TermStateBase (now under codecs.standard) up into codecs&lt;br/&gt;
and rename it to PrefixCodedTermState?  Ie, it&apos;s awkward that&lt;br/&gt;
PrefixCodedTermsReader (a terms dict impl shared across many codecs)&lt;br/&gt;
is reaching into standard codec to get its TermState impl.  Then, the&lt;br/&gt;
private static class in StandardPostingsReader can be renamed to&lt;br/&gt;
StandardTermState?&lt;/p&gt;

&lt;p&gt;I like this new ReaderView!  I think it can be more generally useful&lt;br/&gt;
outside of PerReaderTermState, eg Filter/Collector could receive this&lt;br/&gt;
so that they can map sub reader to context in parent.  But let&apos;s leave&lt;br/&gt;
that for another day.&lt;/p&gt;

&lt;p&gt;Still some small whitespace issues, eg if(&lt;/p&gt;</comment>
                    <comment id="12973592" author="mikemccand" created="Tue, 21 Dec 2010 11:46:43 +0000"  >&lt;p&gt;OK I tested perf on 10 M wiki index, multi-segment no deletes.  For the test I &lt;span class=&quot;error&quot;&gt;&amp;#91;unnaturally&amp;#93;&lt;/span&gt; forced Prefix &amp;amp; Wildcard queries to always use scoring BQ rewrite (and upped the BQ max clause count way high) to force testing of TermState.&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mmap&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS mmap&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;~3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.29&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.96&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-6.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.70&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.21&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-4.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.80&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.71&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-1.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;unit, state&amp;#93;&lt;/span&gt;, 10, true)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.58&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.53&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-1.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;29.42&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;29.39&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.90&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.91&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctimesecnum:&lt;span class=&quot;error&quot;&gt;&amp;#91;10000 TO 60000&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.52&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.55&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+unit +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.19&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.34&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.36&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanFirst(unit, 5)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.71&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.93&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+nebraska +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;195.03&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;198.25&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15.78&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.1%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12.59&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;29.45&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;133.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.87&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.54&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;140.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.39&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.66&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;178.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.82&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.29&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;190.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Awesome speedups!&lt;/p&gt;</comment>
                    <comment id="12973703" author="simonw" created="Tue, 21 Dec 2010 15:33:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Can we move TermStateBase (now under codecs.standard) up into codecs&lt;br/&gt;
and rename it to PrefixCodedTermState? Ie, it&apos;s awkward that&lt;br/&gt;
PrefixCodedTermsReader (a terms dict impl shared across many codecs)&lt;br/&gt;
is reaching into standard codec to get its TermState impl. Then, the&lt;br/&gt;
private static class in StandardPostingsReader can be renamed to&lt;br/&gt;
StandardTermState?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;done - that makes sense &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Still some small whitespace issues, eg if(&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;done&lt;/p&gt;

&lt;p&gt;I think we are close &lt;/p&gt;</comment>
                    <comment id="12973895" author="mikemccand" created="Tue, 21 Dec 2010 21:25:31 +0000"  >&lt;p&gt;I think instead of ReaderView we could change Weight.scorer API so that instead of receiving IndexReader reader, it receives a struct that has parent reader, sub reader, ord of that sub?&lt;/p&gt;

&lt;p&gt;It&apos;s easy to be back compat because we could just forward to prior scorer method with only the sub?&lt;/p&gt;</comment>
                    <comment id="12974121" author="simonw" created="Wed, 22 Dec 2010 09:28:34 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think instead of ReaderView we could change Weight.scorer API so that instead of receiving IndexReader reader, it receives a struct that has parent reader, sub reader, ord of that sub?&lt;br/&gt;
It&apos;s easy to be back compat because we could just forward to prior scorer method with only the sub?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Mike I am not sure if that helps us here. If you use this method you can not disambiguate between the set of readers that where used to create the PerReaderTermState and the once that have a certain ord assigned to it. Disambiguation would be more difficult if we do that. IMO sharing a ReaderView seems to be the best solution so far. I don&apos;t think we should bind it to an IR directly since users can easily build a ReaderView from a Composite Reader. Yet, for searching it would be nice to have a ReaderView on Seacher / IndexSearcher which can be triggered upon weight creation.&lt;br/&gt;
That way we can also disambiguate between PerReaderTermState given to the TermQuery ctor when we create the weight so that if the view doesn&apos; t match we either create a new PerReaderTermState or just don&apos;t use it for this weight.&lt;/p&gt;

&lt;p&gt;I thought about TermsEnum#ord() again. I don&apos; t think we should really add it back though. Its really an implementation detail and folks that wanna use it should be aware of that and cast correctly. On the other hand I don&apos;t like to have the seek(ord) in TermsEnum either if we remove #ord(). I think we should remove it from the interface entirely though.&lt;/p&gt;

&lt;p&gt;simon&lt;/p&gt;</comment>
                    <comment id="12974251" author="simonw" created="Wed, 22 Dec 2010 15:53:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think instead of ReaderView we could change Weight.scorer API so that instead of receiving IndexReader reader, it receives a struct that has parent reader, sub reader, ord of that sub?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;so I changed the Weight#scorer API to use a class called ScoreContext that holds the parent reader, the current sub and the subs ord. That change is absolutely massive! I don&apos;t upload that change since I think if we do that we need to do it in a different issue anyway. I ran into a couple of problems:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;if we pass in such a context we also need to change the explain interface since its calling Weight#scorer here and there&lt;/li&gt;
	&lt;li&gt;Once we pass in the Context stuff like QueryWrapperFilter doesn&apos;t work anymore since it doesn&apos;t know which ord the incoming reader has. So Filters would need a context too. I don&apos;t like that!&lt;/li&gt;
	&lt;li&gt;Stuff like scoreDocsInOrder are hard to put into such a context since almost all scorers internally are called with scoreDocsInOrder=true with a contant. meaning that nobody really respects the incoming value for subscorers though. but if i just forward the context the member needs to be set to true or the context needs to be cloned for subs - see BooleanQuery for instance.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;such a context would somehow enforce that MTQ are only executed against the Reader they where rewritten against. Which is how it should be IMO but we are also depending on that everybody who uses a MTQ knows exactly how the query was rewritten which is kind of not obvious. I think we need a better way to enforce stuff like that.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;after all I think this must be done in a different issue though. This issue was meant to make MTQ single pass so lets do that first.... progress over perfection ey mike &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. &lt;br/&gt;
Nonetheless, it seems like that we need to rethink the Weight API entirely I also don&apos;t like that Weight operates on Searcher instead of IndexSearcher though.&lt;/p&gt;</comment>
                    <comment id="12974265" author="mikemccand" created="Wed, 22 Dec 2010 16:32:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;after all I think this must be done in a different issue though&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;If, when we now pass a naked IndexReader (eg to Weight.scorer, Weight.explain, Filter.getDocIdSet) we replace that with a ReaderContext which has reader, its parent, and its ord, then this precursor makes both TermState (this issue) and the awesome PK speedup (&lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2829&quot; title=&quot;improve termquery &amp;quot;pk lookup&amp;quot; performance&quot;&gt;&lt;del&gt;LUCENE-2829&lt;/del&gt;&lt;/a&gt;) much simpler.  And I agree we should break it out as its own issue.  It&apos;s good to do that as its own issue since that&apos;s a rote API cutover &amp;#8211; we are passing a struct instead of a naked reader, but otherwise no change.&lt;/p&gt;

&lt;p&gt;This also lets us solve cases where the Filter needs the full context, eg &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2348&quot; title=&quot;DuplicateFilter incorrectly handles multiple calls to getDocIdSet for segment readers&quot;&gt;LUCENE-2348&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, with this I think we should sharpen in the jdocs that when you call Query.rewrite the returned query must be searched only against he same reader you rewrote against.  Similarly when you create a Weight, it should only be used against the same Searcher used to create it from a Query.&lt;/p&gt;</comment>
                    <comment id="12979544" author="simonw" created="Mon, 10 Jan 2011 11:27:15 +0000"  >&lt;p&gt;Another iteration on this after &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2831&quot; title=&quot;Revise Weight#scorer &amp;amp; Filter#getDocIdSet API to pass Readers context&quot;&gt;&lt;del&gt;LUCENE-2831&lt;/del&gt;&lt;/a&gt; was committed last week. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;updated to trunk &amp;amp; all test pass&lt;/li&gt;
	&lt;li&gt;re-added all ord() related stuff back to TermsEnum since I think we should decouple this and solve it in a different issue. There is already enough changes in here and discussions should be focused on making MTQ single pass.&lt;/li&gt;
	&lt;li&gt;Changed IndexSearcher to run concurrent searches on a &quot;leaf slice&quot; rather than on a leaf converted to a Top-Level Context. That made the callables a bit simpler and is more consistent since the hierarchy is preserved.&lt;/li&gt;
	&lt;li&gt;TermState is now referenced by leaf ordinal and asserted using the leaf&apos;s top-level ctx.&lt;/li&gt;
	&lt;li&gt;TermQuery is not single pass for all queries while state is only hold in Weight unless PerReaderTermState as not set. But even then the top-level ctx must be identical to the given IS&apos;s top-level ctx otherwise the give PerReaderTermState is not used.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;this one seems pretty close &lt;/p&gt;</comment>
                    <comment id="12979562" author="rcmuir" created="Mon, 10 Jan 2011 12:21:58 +0000"  >&lt;p&gt;One question, I&apos;m look at the definition of TermState:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Holds all state required for {@link TermsEnum} to produce a {@link DocsEnum} without re-seeking the terms dict.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So why do we have seek(BytesRef, TermState)&lt;br/&gt;
shouldnt it just be seek(Termstate) ?&lt;br/&gt;
I think its confusing it takes an unnecessary bytes parameter.&lt;/p&gt;</comment>
                    <comment id="12979576" author="rcmuir" created="Mon, 10 Jan 2011 13:35:07 +0000"  >&lt;p&gt;here&apos;s a hack patch (dont think it actually works) just showing what i mean.&lt;/p&gt;

&lt;p&gt;I think termsenum should only have seek(TermState).&lt;br/&gt;
in the hack-patch, i made the termState() and seekTermState() non-abstract:&lt;br/&gt;
the default impl returns a &apos;SimpleTermState&apos; containing the term bytes and saved docFreq and implements seek(TermState) with those bytes.&lt;/p&gt;

&lt;p&gt;This is basically what the patch had everywhere anyway as an implementation (for many of these, we should use more efficient impls, i fixed this for MemoryIndex as an example, but MultiTermsEnum comes to mind).&lt;/p&gt;

&lt;p&gt;Also, i don&apos;t understand what was going on with setting bytes on the DeltaBytesReader with your seek(BytesRef, TermState) before.&lt;/p&gt;

&lt;p&gt;If StandardCodec needs to know the shared byte[] prefix or something like that to reposition the enum, then it&lt;br/&gt;
should put this in its termstate.&lt;/p&gt;

</comment>
                    <comment id="12980065" author="simonw" created="Tue, 11 Jan 2011 11:44:41 +0000"  >&lt;p&gt;Next iteration.  I took roberts patch and cleaned up a few things and added a new OrdTermState that can be used for instanceof testing and thoughout all TermsEnum that use ord primarily. I also removed the docFreq() getter from TermState since its really an impl. detail. The downside of this patch is that PrefixCodedTermState is kind of heavyweight now since it carries the BytesRef to re-init the DeltaBytesReader but I didn&apos;t see another way to fix this right now.&lt;/p&gt;
</comment>
                    <comment id="12980081" author="mikemccand" created="Tue, 11 Jan 2011 12:18:39 +0000"  >&lt;p&gt;The failure in TestFSTs is because PrefixCodedTermsReader is somehow returning an OrdTermState when its terms index (var gap) does not support ord.&lt;/p&gt;

&lt;p&gt;The ord member of PrefixCodedTermState is undefined when the terms dict doesn&apos;t support ord (ie when ord() throws UOE).&lt;/p&gt;

&lt;p&gt;So to fix this we should fix TestFSTs to go back to calling .ord() and catching the UOE, maybe?  Separately, make sure you don&apos;t overwrite storeOrds in that test.  Ie the test randomly sets it to true or false (so that we test both cases); only if the terms index cannot suppord ord should we wire it to false.  If it can support ord then we should leave it as the random value...&lt;/p&gt;</comment>
                    <comment id="12980144" author="simonw" created="Tue, 11 Jan 2011 15:26:20 +0000"  >&lt;p&gt;fixed the TestFST - thanks mike for looking into that and updated to trunk&lt;/p&gt;</comment>
                    <comment id="12980722" author="simonw" created="Wed, 12 Jan 2011 14:07:38 +0000"  >&lt;p&gt;This patch changes TermsEnum#seek(TermState) back to TermsEnum#seek(BytesRef, TermState). Yet, TermState is opaque now and TermsEnum has a default impl for TermsEnum#seek(BytesRef, TermState). Holding the BytesRef in TermState for our PrefixCoded* based codecs seems way too costly though. seems like this time perf rules out purity in the interface.&lt;/p&gt;</comment>
                    <comment id="12980748" author="rcmuir" created="Wed, 12 Jan 2011 15:22:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;seems like this time perf rules out purity in the interface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I know i didn&apos;t like this aspect of the patch, but I am ok with it for now as long as we keep things experimental and try to keep an eye on improving the &apos;purity&apos; of TermsEnum a bit.&lt;br/&gt;
we are making a lot of progress on the terms handling with flexible indexing and i could easily see more interesting implementations being available other than just PrefixCoded...&lt;br/&gt;
In some ideal world I guess i&apos;d prefer if TermsEnum was an attributesource with seek() and next(), FilteredTermsEnum was like tokenFilter, and TermState was just captureState/restoreState...&lt;br/&gt;
but I agree we should just lean towards whatever works for now.&lt;/p&gt;

&lt;p&gt;definitely like it better now that things such as docFreq() are pulled out of termstate and its completely opaque, i think this is the right way to go.&lt;/p&gt;</comment>
                    <comment id="12980778" author="simonw" created="Wed, 12 Jan 2011 16:23:35 +0000"  >&lt;p&gt;Added Changes.txt entry and fixed the remaining JavaDoc on TermState. &lt;/p&gt;

&lt;p&gt;My latest benchmark results with that patch are here:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

          unit state        3.81        3.70     -2.9%
    +nebraska +state       41.26       40.61     -1.6%
        +unit +state        3.95        3.90     -1.1%
  spanFirst(unit, 5)        4.55        4.51     -0.9%
               state       10.11       10.07     -0.3%
      &lt;span class=&quot;code-quote&quot;&gt;&quot;unit state&quot;&lt;/span&gt;~3        0.98        0.98     -0.2%
        &lt;span class=&quot;code-quote&quot;&gt;&quot;unit state&quot;&lt;/span&gt;        1.49        1.49     -0.0%
          united~1.0        3.66        3.72      1.5%
            unit~1.0        2.33        2.37      1.6%
          united~2.0        0.81        0.83      2.7%
            unit~2.0        0.35        0.38     10.1%
                 u*d        0.52        0.67     29.5%
doctitle:.*[Uu]nited.*        0.19        0.25     31.6%
                un*d        3.59        4.77     33.0%
                uni*        0.56        0.75     34.9%
               unit*        2.20        3.15     43.3%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think we are ready to go - I will commit later today if nobody objects&lt;/p&gt;</comment>
                    <comment id="12980805" author="simonw" created="Wed, 12 Jan 2011 16:55:45 +0000"  >&lt;p&gt;I just figured that PKLookups are actually slower with this patch 164 msec for 1000 lookups (164 us per lookup) vs 144 msec for 1000 lookups (144 us per lookup) on trunk. I will dig!&lt;/p&gt;</comment>
                    <comment id="12980921" author="mikemccand" created="Wed, 12 Jan 2011 20:53:39 +0000"  >&lt;p&gt;Actually I see PK lookups faster &amp;#8211; 23 usec w/ patch vs 33 usec w/ trunk (per lookup) for 20K lookups.&lt;/p&gt;

&lt;p&gt;And good speedups on many-term MTQs when I force BQ rewrite:&lt;/p&gt;


&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Query&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS base&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;QPS termstate&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Pct diff&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+nebraska +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;169.75&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;154.64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-8.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctitle:.&lt;b&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Uu&amp;#93;&lt;/span&gt;nited.&lt;/b&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.26&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.11&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-3.5%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;+unit +state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.40&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-2.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanFirst(unit, 5)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17.38&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.93&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-2.6%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;spanNear(&lt;span class=&quot;error&quot;&gt;&amp;#91;unit, state&amp;#93;&lt;/span&gt;, 10, true)&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.37&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.32&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-1.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;~3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.94&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.89&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-1.0%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&quot;unit state&quot;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.05&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.03&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;red&quot;&gt;-0.2%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;26.58&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;26.76&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;0.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit state&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.24&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.46&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;1.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.87&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.98&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;2.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;doctimesecnum:&lt;span class=&quot;error&quot;&gt;&amp;#91;10000 TO 60000&amp;#93;&lt;/span&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.26&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8.70&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;5.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~2.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.04&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.59&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;5.4%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;united~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16.84&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18.13&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;7.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit~1.0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.09&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.99&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;8.9%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;un*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.96&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21.63&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;80.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;unit*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.60&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;14.23&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;87.3%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;u*d&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.22&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.17&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;87.8%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;uni*&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.83&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.53&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;font color=&quot;green&quot;&gt;93.7%&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;+1 to commit!&lt;/p&gt;</comment>
                    <comment id="12980938" author="simonw" created="Wed, 12 Jan 2011 21:32:31 +0000"  >&lt;p&gt;Here is a final patch, I opened up Terms#getThreadTermsEnum() to reuse TermsEnum in PRTE#build().&lt;br/&gt;
PRTE#build() now also accepts a boolean if the termlookup should be cached or not which makes sense for common TermQuery.&lt;/p&gt;

&lt;p&gt;I will commit that shortly - yay!&lt;/p&gt;</comment>
                    <comment id="12980941" author="simonw" created="Wed, 12 Jan 2011 21:34:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;Actually I see PK lookups faster - 23 usec w/ patch vs 33 usec w/ trunk (per lookup) for 20K lookups.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;so I run that on a 32bit machine which is quite slow in general though. I will further investigate that on 32bit platform vs. 64 bit. Yet, I only used 1k lookups though.&lt;/p&gt;</comment>
                    <comment id="12980947" author="simonw" created="Wed, 12 Jan 2011 21:40:50 +0000"  >&lt;p&gt;Committed revision 1058328.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10032">
                <name>Blocker</name>
                                <outwardlinks description="blocks">
                            <issuelink>
            <issuekey id="12478260">LUCENE-2723</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is blocked by">
                            <issuelink>
            <issuekey id="12493981">LUCENE-2831</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12476825">LUCENE-2690</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12466529" name="LUCENE-2694-FTE.patch" size="1503" author="thetaphi" created="Sat, 18 Dec 2010 11:36:11 +0000" />
                    <attachment id="12467887" name="LUCENE-2694_hack.patch" size="94639" author="rcmuir" created="Mon, 10 Jan 2011 13:35:07 +0000" />
                    <attachment id="12468165" name="LUCENE-2694.patch" size="86645" author="simonw" created="Wed, 12 Jan 2011 21:32:31 +0000" />
                    <attachment id="12468135" name="LUCENE-2694.patch" size="86146" author="simonw" created="Wed, 12 Jan 2011 16:23:35 +0000" />
                    <attachment id="12468131" name="LUCENE-2694.patch" size="85399" author="simonw" created="Wed, 12 Jan 2011 14:07:38 +0000" />
                    <attachment id="12468015" name="LUCENE-2694.patch" size="85731" author="simonw" created="Tue, 11 Jan 2011 15:26:20 +0000" />
                    <attachment id="12467998" name="LUCENE-2694.patch" size="96158" author="simonw" created="Tue, 11 Jan 2011 11:44:41 +0000" />
                    <attachment id="12467881" name="LUCENE-2694.patch" size="97094" author="simonw" created="Mon, 10 Jan 2011 11:27:15 +0000" />
                    <attachment id="12466724" name="LUCENE-2694.patch" size="94158" author="simonw" created="Tue, 21 Dec 2010 15:33:13 +0000" />
                    <attachment id="12466638" name="LUCENE-2694.patch" size="94278" author="simonw" created="Mon, 20 Dec 2010 15:25:59 +0000" />
                    <attachment id="12466487" name="LUCENE-2694.patch" size="83500" author="simonw" created="Fri, 17 Dec 2010 19:24:41 +0000" />
                    <attachment id="12466390" name="LUCENE-2694.patch" size="80028" author="simonw" created="Thu, 16 Dec 2010 15:57:52 +0000" />
                    <attachment id="12460020" name="LUCENE-2694.patch" size="75246" author="simonw" created="Fri, 19 Nov 2010 16:54:08 +0000" />
                    <attachment id="12459929" name="LUCENE-2694.patch" size="39828" author="simonw" created="Thu, 18 Nov 2010 17:46:53 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>14.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 18 Nov 2010 17:46:53 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11150</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24998</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>