<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:17:26 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2341/LUCENE-2341.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2341] explore morfologik integration</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2341</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;Dawid Weiss mentioned on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2298&quot; title=&quot;Polish Analyzer&quot;&gt;&lt;del&gt;LUCENE-2298&lt;/del&gt;&lt;/a&gt; that there is another Polish stemmer available:&lt;br/&gt;
&lt;a href=&quot;http://sourceforge.net/projects/morfologik/&quot; class=&quot;external-link&quot;&gt;http://sourceforge.net/projects/morfologik/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This works differently than &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2298&quot; title=&quot;Polish Analyzer&quot;&gt;&lt;del&gt;LUCENE-2298&lt;/del&gt;&lt;/a&gt;, and ideally would be another option for users.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12459896">LUCENE-2341</key>
            <summary>explore morfologik integration</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="dweiss">Dawid Weiss</assignee>
                                <reporter username="rcmuir">Robert Muir</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Mar 2010 18:32:54 +0000</created>
                <updated>Fri, 10 May 2013 11:44:18 +0100</updated>
                    <resolved>Thu, 30 Jun 2011 20:16:46 +0100</resolved>
                                            <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>3</votes>
                        <watches>3</watches>
                                                    <comments>
                    <comment id="12848649" author="dweiss" created="Tue, 23 Mar 2010 10:44:50 +0000"  >&lt;p&gt;Robert, should I wait for Stempel patch first and then model this one after you? I&apos;m thinking we can reuse most of the code; these stemmers have nearly identical APIs anyway.&lt;/p&gt;</comment>
                    <comment id="12848672" author="rcmuir" created="Tue, 23 Mar 2010 12:26:22 +0000"  >&lt;p&gt;Dawid, sounds good. I had a few questions, admittedly not having time to look at the code much:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Does it support generation as well?&lt;/li&gt;
	&lt;li&gt;Does it expose any morph attributes (e.g. POS) ?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12848674" author="rcmuir" created="Tue, 23 Mar 2010 12:29:37 +0000"  >&lt;p&gt;oh yeah, and also, what about cases with multiple solutions? does it emit multiple stems?&lt;/p&gt;</comment>
                    <comment id="12849114" author="dweiss" created="Wed, 24 Mar 2010 09:15:46 +0000"  >&lt;p&gt;Oh, I forgot about this &amp;#8211; yes, you&apos;re right, it can emit multiple lemmas (including their morphology). An example from the test case:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;		final IStemmer s = new PolishStemmer();

		final String word = &quot;liga&quot;;
		final List&amp;lt;WordData&amp;gt; response = s.lookup(word);

		final HashSet&amp;lt;String&amp;gt; stems = new HashSet&amp;lt;String&amp;gt;();
		final HashSet&amp;lt;String&amp;gt; tags = new HashSet&amp;lt;String&amp;gt;();

		for (WordData wd : response) {
			stems.add(wd.getStem().toString());
			tags.add(wd.getTag().toString());
			assertSame(word, wd.getWord());
		}

		assertTrue(stems.contains(&quot;liga&#263;&quot;));
		assertTrue(stems.contains(&quot;liga&quot;));
		assertTrue(tags.contains(&quot;subst:sg:nom:f&quot;));
		assertTrue(tags.contains(&quot;verb:fin:sg:ter:imperf&quot;));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This raises the question how we want to handle multiple stems... should they be indexed on overlapping positions?&lt;/p&gt;</comment>
                    <comment id="12849198" author="rcmuir" created="Wed, 24 Mar 2010 14:23:11 +0000"  >&lt;p&gt;I think overlapping positions makes sense. &lt;br/&gt;
But this can cause funky scoring for homographs,&lt;br/&gt;
Even if the analysis is legitimately different, tf is wrong.&lt;/p&gt;

&lt;p&gt;Maybe solr&apos;s removeduplicatesfilter should be recommended&lt;br/&gt;
down the chain...&lt;/p&gt;</comment>
                    <comment id="12849203" author="ab" created="Wed, 24 Mar 2010 14:33:32 +0000"  >&lt;p&gt;When indexing multiple stems/lemmas (or synonyms in general) at the same positions, in most cases users should also set the Similarity.discoutOverlaps to avoid skewing the lengthNorm-s. I think that it should be mentioned somewhere in the javadocs.&lt;/p&gt;</comment>
                    <comment id="12849208" author="rcmuir" created="Wed, 24 Mar 2010 14:47:26 +0000"  >&lt;p&gt;Andrzej,&lt;br/&gt;
By the way, this is now on by default on trunk.&lt;/p&gt;</comment>
                    <comment id="13052239" author="michcio" created="Mon, 20 Jun 2011 22:48:38 +0100"  >&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;This patch introduces stemming filter and analyzer, that use &lt;a href=&quot;http://morfologik.blogspot.com&quot; class=&quot;external-link&quot;&gt;Morfologik library&lt;/a&gt;, developed by Dawid Weiss and Marcin Mi&#322;kowski.&lt;br/&gt;
Tokens are stemmed by Morfologik with a dictionary, and current distribution provides a dictionary for polish language.&lt;/p&gt;

&lt;p&gt;The MorfologikFilter yields one or more terms for each token. Each of those terms is given the same position in the index.&lt;/p&gt;

&lt;p&gt;I&apos;m attaching a binary distribution of the library (morfologik-stemming-1.5.0.jar), that needs to be placed in modules/analysis/morfologik/lib/ subdirectory.&lt;br/&gt;
It is also available as a &lt;a href=&quot;http://mvnrepository.com/artifact/org.carrot2/morfologik-stemming/1.5.0&quot; class=&quot;external-link&quot;&gt;Maven artifact&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The library is BSD-licensed and a dictionary uses data from &lt;a href=&quot;http://www.sjp.pl/slownik/en/&quot; class=&quot;external-link&quot;&gt;Polish dictionary for aspell/ispell/myspell (SJP.PL)&lt;/a&gt;, which is licensed under GPL, LGPL, MPL and CC SA licenses.&lt;/p&gt;

&lt;p&gt;This is my first contribution to the Lucene project, so please be forgiving &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Thanks to Dawid for help.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
  Micha&#322;&lt;/p&gt;</comment>
                    <comment id="13052246" author="rcmuir" created="Mon, 20 Jun 2011 23:15:11 +0100"  >&lt;p&gt;Hi Micha&#322;,&lt;/p&gt;

&lt;p&gt;This patch looks great!&lt;/p&gt;

&lt;p&gt;I took a quick glance, here are a couple suggestions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;In the MorfologikFilter, I think we should implement reset(), first calling the superclass reset(), then clearing the stemsAcc list. This ensures that all of the filter&apos;s state is cleared before it is reused. Under normal operations, this should not be necessary, but some consumers in Lucene (e.g. LimitTokenCountFilter, and some similar code in the Highlighter), will only partially consume up to some point, then suddenly stop. By clearing this list in reset() we ensure that there is no chance any leftover stems will appear in the next stream.&lt;/li&gt;
	&lt;li&gt;because the data is licensed under MPL, I think we should explicitly list a hyperlink if possible to the source code used in the NOTICE.txt. I saw you included some wordage in LICENSE.txt but I think this should only say &apos;XYZ data is under this license, with the actual MPL license text. In the NOTICE.txt we should link to the source code I think... there is some more information on this under the section Category B: Reciprocal Licenses at &lt;a href=&quot;http://www.apache.org/legal/3party.html&quot; class=&quot;external-link&quot;&gt;http://www.apache.org/legal/3party.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13052251" author="rcmuir" created="Mon, 20 Jun 2011 23:31:07 +0100"  >&lt;p&gt;Sorry, about my second comment i was confusing this with the stuff you have for the morfologik jar itself, which is correct &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;What i should have said was, I think we should include this information in the top-level modules/analysis/LICENSE.txt and modules/analysis/NOTICE.txt&lt;/p&gt;


</comment>
                    <comment id="13052376" author="dweiss" created="Tue, 21 Jun 2011 07:49:38 +0100"  >&lt;p&gt;Thanks for the contribution, Micha&#322;. &lt;/p&gt;

&lt;p&gt;Robert: the dictionary is licensed under MPL or CC-SA (to be selected by the user depending on one&apos;s needs). Do you know which one is preferable over another?&lt;/p&gt;

&lt;p&gt;Micha&#322;: there is also another (much larger) dictionary that has been released recently and comes from the Morfeusz project. &lt;a href=&quot;http://sgjp.pl/morfeusz/dopobrania.html&quot; class=&quot;external-link&quot;&gt;http://sgjp.pl/morfeusz/dopobrania.html&lt;/a&gt; This dictionary is actually licensed under BSD license, so no legal worries at all. Both dictionaries are nearly identical (they differ slightly in their convention of morphosyntactic annotations) and Morfeusz&apos;s dictionary could be compiled into an automaton for use with Morfologik.&lt;/p&gt;

&lt;p&gt;Which way should we go? What do you think?&lt;/p&gt;</comment>
                    <comment id="13052380" author="dweiss" created="Tue, 21 Jun 2011 07:55:21 +0100"  >&lt;p&gt;I&apos;ll take a look at the differences between Morfologik and Morfeusz right now, actually. I&apos;ll post the results once I have something.&lt;/p&gt;</comment>
                    <comment id="13052421" author="dweiss" created="Tue, 21 Jun 2011 09:21:12 +0100"  >&lt;p&gt;I did some analyses on both dictionaries.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Number of lines (distict surface forms):

  3.662.366 morfologik.utf8
  5.086.141 sgjp.utf8

Distinct words (not in both):

  2.729.334 unique.utf8

  - upper/lower case (morfologik has upper case forms, morfeusz only lower case surface forms)
    
    acerze
    Acerze

  - very rare or jargon;

    abszminka
    abszytowa&#322;em
    acetobakteria
    acetarsolowi
    niebombiasto
    hakatystce
    hakatystyczno&#347;ciach
    warz&#380;e

  - differences in spelling;

    abelard
    ab&#233;lard

  - acronyms and super-short stuff

    aap
    aar

Dictinct normalized (lowercase):

  2.564.366 lowered.utf8

  Most of these are very infrequent words or inflection forms. There are minor differences or
  missing surface forms in both dictionaries, as in here (mz - morfeusz, mk - morfologik):

mz&amp;gt; hakersko
mz&amp;gt; hakersko&#347;&#263;
mz&amp;gt; hakersko&#347;ci
mz&amp;gt; hakersko&#347;ci&#261;
mz&amp;gt; hakersko&#347;ciach
mz&amp;gt; hakersko&#347;ciami
mz&amp;gt; hakersko&#347;ciom
mk&amp;gt; hakerstw
mk&amp;gt; hakerstwa
...
mk&amp;gt; hakowa&#322;y&#347;my
mk&amp;gt; hakowa&#324;
mk&amp;gt; hakowaniach
mk&amp;gt; hakowaniami
mk&amp;gt; hakowaniom
mz&amp;gt; hakowato&#347;&#263;
mz&amp;gt; hakowato&#347;ci
mz&amp;gt; hakowato&#347;ci&#261;
mz&amp;gt; hakowato&#347;ciach
mz&amp;gt; hakowato&#347;ciami
mz&amp;gt; hakowato&#347;ciom
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So... the conclusion is pretty consistent with Zipf&apos;s law: both dictionaries have a fairly different coverage, even if they&apos;re quite large. We don&apos;t have a frequency dictionary for Polish, but I assume most of these surface forms are purely theoretical and occur super-rarely in practice. This said, I think we should use BOTH dictionaries &amp;#8211; after all there&apos;s no harm done if we overdo the lemmatization process a little bit, is there?&lt;/p&gt;

&lt;p&gt;So... my proposal would be this: I&apos;ll integrate Morfeusz&apos;s dictionary in Morfologik (as an alternative dictionary one can load and use). &lt;/p&gt;

&lt;p&gt;Eventually it would be probably sensible to limit the automaton for use in Lucene to store surface forms and lemmas only (no POS tags) and merge both dictionaries into a single automaton... but this can  be a future improvement.&lt;/p&gt;
</comment>
                    <comment id="13052423" author="dweiss" created="Tue, 21 Jun 2011 09:30:26 +0100"  >&lt;p&gt;One note wrt patch: I would use an explicit pointer over a list of returned WordData entries instead of adding them to a local list:&lt;/p&gt;

&lt;p&gt;private List&amp;lt;WordData&amp;gt; stemsAcc = new ArrayList&amp;lt;WordData&amp;gt;();&lt;/p&gt;

&lt;p&gt;Right now you&apos;re shifting the internal array on each call unnecessarily (just increase an int ptr instead):&lt;/p&gt;

&lt;p&gt;+      termAtt.setEmpty().append(stemsAcc.remove(0).getStem().toString());&lt;/p&gt;

&lt;p&gt;getStem() should also be enough since it&apos;s a CharSequence, right? No need for an intermediate String.&lt;/p&gt;</comment>
                    <comment id="13052451" author="rcmuir" created="Tue, 21 Jun 2011 11:00:09 +0100"  >&lt;blockquote&gt;
&lt;p&gt;Eventually it would be probably sensible to limit the automaton for use in Lucene to store surface forms and lemmas only (no POS tags) and merge both dictionaries into a single automaton... but this can be a future improvement.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;or alternatively, you can expose the POS tags for each stem to lucene right, easiest way would be to put it into TypeAttribute (a string), but you could make your own strongly-typed one if thats a better fit.&lt;/p&gt;

&lt;p&gt;this could be useful for downstream processing.&lt;/p&gt;</comment>
                    <comment id="13052483" author="dweiss" created="Tue, 21 Jun 2011 12:16:43 +0100"  >&lt;p&gt;I&apos;ve just published morfologik 1.5.2, Micha&#322;. This comes with two dictionaries (morfologik and morfeusz) that can be used as one (fallback for missing words) or separately, but I would stick to using morfologik as the default dictionary (possibly with an option of using morfeusz?). POS tags have a different notation in these two resources, so mixing both is probably not a good idea.&lt;/p&gt;

&lt;p&gt;Will you update the patch? Thanks.&lt;/p&gt;</comment>
                    <comment id="13052841" author="michcio" created="Tue, 21 Jun 2011 22:16:09 +0100"  >&lt;p&gt;Thank you guys for suggestions &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve changed the diff to include them:&lt;/p&gt;

&lt;p&gt;1. Implemented MorfologikFilter.reset that resets the stemsAcc, and added a test case that would fail in the absence of that implementation, which exhibits the behaviour mentioned by Robert.&lt;/p&gt;

&lt;p&gt;2. Updated modules/analysis/NOTICE.txt and modules/analysis/LICENSE.txt - Robert, is that what you meant, or do they need to include more information ?&lt;/p&gt;

&lt;p&gt;3. MorfologikFilter now uses an explicit pointer to not modify the stemsAcc on each pass - Dawid, do you think it&apos;s reasonable to optimize further and use directly a list returned by IStemmer.lookup (instead of copying with addAll) ? My concern is that (at least in current DictionaryLookup implementation) that list seems to be shared by distinct invocations of the lookup method, which would make the use of a specific IStemmer not applicable in thread-safe code.&lt;/p&gt;

&lt;p&gt;4. Removed explicit call to getStem().toString().&lt;/p&gt;


&lt;p&gt;As for the new Morfologik version, I&apos;ve been thinking it would be better to alter the constructors of MorfologikAnalyzer and MorfologikFilter to accept concrete IStemmer implementations, instead of a languageCode String as they do now. This way, org.apache.lucene.analysis.morfologik package wouldn&apos;t depend on current implementations of IStemmer (only on the interface), and also allowed future ones to be used without changing the package. What do you think ?&lt;/p&gt;

&lt;p&gt;That could also solve the case of a custom attribute for POS tags (MorfologikPOSAttribute ?) : since a client would instantiate their IStemmer explicitly, they would know the meaning of the attribute&apos;s value. That doesn&apos;t take into account the DICTIONARY.COMBINED stemmer, but the same seems to apply to the Morfologik library itself (I mean, for a specific WordData from IStemmer.lookup there is no information on which of the internal concrete DictionaryLookup it comes from). Dawid - what do you think of that issue ?&lt;/p&gt;</comment>
                    <comment id="13053079" author="dweiss" created="Wed, 22 Jun 2011 07:56:38 +0100"  >&lt;blockquote&gt;&lt;p&gt;Dawid, do you think it&apos;s reasonable to optimize further and use directly a list returned by IStemmer.lookup (instead of copying with addAll) ? My concern is that (at least in current DictionaryLookup implementation) that list seems to be shared by distinct invocations of the lookup method, which would make the use of a specific IStemmer not applicable in thread-safe code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IStemmer implementations are not thread safe anyway, so there is no problem in reusing that list. In fact, the returned WordData objects are reused internally as well, so you can&apos;t store them either (this is done to avoid GC overhead). &lt;/p&gt;

&lt;p&gt;So yes: I missed that, but you&apos;ll need to ensure IStemmer instances are not shared. This can be done in various ways (thread local, etc), but I think the simplest way to do it would be to instantiate PolishStemmer at the MorfologikFilter level. This is cheap (the dictionary is loaded once anyway). &lt;/p&gt;

&lt;p&gt;You can then create two constructors in the analyzer &amp;#8211; one with PolishStemmer.DICTIONARY and one with the default (I&apos;d suggest MORFOLOGIK). Exposing IStemmer constructor will do more harm than good &amp;#8211; thinking ahead is good, but in this case I don&apos;t think there&apos;ll be this many people interested in subclassing IStemmer (if anything, they&apos;ll plug into Lucene&apos;s infrastructure directly).&lt;/p&gt;

&lt;p&gt;A simple test case spawning 5 or 10 threads in a parallel executor and crunching stems on the same analyzer would also be nice to ensure we have everything correct wrt multithreading, but it&apos;s not that crucial if you don&apos;t have the time to write it.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                    <comment id="13055729" author="michcio" created="Mon, 27 Jun 2011 21:18:51 +0100"  >&lt;p&gt;Dawid, as you suggested, I&apos;ve changed the interface to MorfologikAnalyzer and MorfologikFilter to account for the changes in Morfologik 1.5.2, namely the multiple dictionaries.&lt;br/&gt;
Both those classes&apos; constructors now accept a PolishStemmer.DICTIONARY (instead of languageCode String as in previous patch). A PolishStemmer object is instantiated by MorfologikFilter, so each invocation of MorfologikAnalyzer.createComponents (which instantiates MorfologikFilter) is coupled with an individual instance of PolishStemmer.&lt;br/&gt;
This way, sharing a MorfologikAnalyzer by separate threads is safe (even though MorfologikFilter itself isn&apos;t thread-safe) provided each thread obtains its own TokenStreamComponents through ReusableAnalyzerBase.createComponents (is this always the case ? looking at other filters, thay don&apos;t look thread-safe neither ..)&lt;/p&gt;</comment>
                    <comment id="13056261" author="rcmuir" created="Tue, 28 Jun 2011 03:49:37 +0100"  >&lt;blockquote&gt;
&lt;p&gt;provided each thread obtains its own TokenStreamComponents through ReusableAnalyzerBase.createComponents (is this always the case ? looking at other filters, thay don&apos;t look thread-safe neither ..)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, its the case that Analyzer/ReusableAnalyzerBase take care of this with a threadlocal, as long as each thread only needs to use one tokenstream at a time (which is true for all lucene consumers), see:&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/analysis/Analyzer.java&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/analysis/Analyzer.java&lt;/a&gt;&lt;/p&gt;</comment>
                    <comment id="13056430" author="dweiss" created="Tue, 28 Jun 2011 11:16:05 +0100"  >&lt;p&gt;Working on the integration, will provide a final patch before committing. Thanks Micha&#322;.&lt;/p&gt;</comment>
                    <comment id="13056441" author="dweiss" created="Tue, 28 Jun 2011 11:45:23 +0100"  >&lt;p&gt;Updated patch. A few minor corrections and performance considerations (no intermediate strings). Updated eclipse classpath template.&lt;/p&gt;</comment>
                    <comment id="13056442" author="dweiss" created="Tue, 28 Jun 2011 11:50:09 +0100"  >&lt;p&gt;I&apos;ve cleaned up the patch, but I&apos;d still address the two TODOs that I left in the code:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;lowercasing should be done not at the external filter level, but inside the filter as a fallback IF AND ONLY IF the original sequence is not found in the dictionary. Morfeusz and Morfologik do have uppercase surface forms and do treat them differently (returning uppercase lemmas, for example). A test for this would be nice as well. An example of an uppercase/mixed surface form: AGD, Aaron, Poznania.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I&apos;d expose another attribute with morphosyntactic annotations &amp;#8211; this is something that is there anyway, so why not expose it.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I attached a git diff, but it should apply with patch -p1 &amp;lt; ... too. Micha&#322;, will you have the time to polish this off?&lt;/p&gt;</comment>
                    <comment id="13056801" author="michcio" created="Tue, 28 Jun 2011 22:30:29 +0100"  >&lt;p&gt;Dawid, I&apos;m attaching a patch with the suggested changes:&lt;/p&gt;

&lt;p&gt;1. MorfologikAnalyzer now doesn&apos;t use a LowerCaseFilter. When IStemmer.lookup returns an empty list for an originally cased token, another lookup is made for lowercased one. I hope the test case reflects your intentions.&lt;/p&gt;

&lt;p&gt;2. I&apos;ve added MorfologikPOSAttributeImpl class that provides information about morphosyntactic annotations for each lemma, obtained with WordData.getTag(). A test provides a short insight for potential users. Two notes here:&lt;br/&gt;
  a) Since MorfologikPOSAttribute might be unused, I&apos;ve implemented it in terms of CharSequence (and not String), to not convert prematurely each POS tag to String.&lt;br/&gt;
  b) Currently a default POS (for a nonlemmatized token) is an empty String, however null value might be more distinctive if empty POS tags for lemma were allowed.&lt;/p&gt;

&lt;p&gt;BTW, the patch deletes one line from dev-tools/eclipse/dot.classpath (&amp;lt;classpathentry kind=&quot;src&quot; path=&quot;modules/queries/src/test&quot;/&amp;gt;) - was that intentional ?&lt;/p&gt;</comment>
                    <comment id="13057034" author="dweiss" created="Wed, 29 Jun 2011 07:47:04 +0100"  >&lt;p&gt;Thanks Micha&#322;. I&apos;ll review it later today and commit in if there are no objections. As for the deleted line &amp;#8211; yes, it was intentional; we&apos;ll piggyback in this patch unless somebody fixes it earlier, no problem.&lt;/p&gt;

&lt;p&gt;Dawid&lt;/p&gt;</comment>
                    <comment id="13057119" author="dweiss" created="Wed, 29 Jun 2011 10:25:13 +0100"  >&lt;p&gt;You do like those pesky .toString() calls, don&apos;t you? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I replaced the code slightly to keep char. sequences only; no need to create new objects. I also changed the impl. a bit to go from the start of the returned list -&amp;gt; theoretically, lemmas should be ordered by probability (in practice it&apos;s not the case, but may be in the future).&lt;/p&gt;

&lt;p&gt;All looks good, committed in. Thanks!&lt;/p&gt;</comment>
                    <comment id="13057132" author="dweiss" created="Wed, 29 Jun 2011 10:58:58 +0100"  >&lt;p&gt;Needs to wait for official support for 1.6 on the trunk.&lt;/p&gt;</comment>
                    <comment id="13057134" author="dweiss" created="Wed, 29 Jun 2011 11:02:44 +0100"  >&lt;p&gt;Final patch for this issue. Needs to wait for 1.6 support.&lt;/p&gt;</comment>
                    <comment id="13058007" author="dweiss" created="Thu, 30 Jun 2011 20:16:46 +0100"  >&lt;p&gt;In trunk. Long live 1.6 support.&lt;/p&gt;</comment>
                    <comment id="13059139" author="michcio" created="Sat, 2 Jul 2011 23:37:16 +0100"  >&lt;p&gt;Thanks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12458327">LUCENE-2298</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12484564" name="LUCENE-2341.diff" size="43153" author="michcio" created="Tue, 28 Jun 2011 22:30:29 +0100" />
                    <attachment id="12484000" name="LUCENE-2341.diff" size="35599" author="michcio" created="Mon, 27 Jun 2011 21:18:51 +0100" />
                    <attachment id="12483348" name="LUCENE-2341.diff" size="27715" author="michcio" created="Tue, 21 Jun 2011 22:16:09 +0100" />
                    <attachment id="12483213" name="LUCENE-2341.diff" size="23027" author="michcio" created="Mon, 20 Jun 2011 22:48:38 +0100" />
                    <attachment id="12484617" name="LUCENE-2341.patch" size="44568" author="dweiss" created="Wed, 29 Jun 2011 11:02:44 +0100" />
                    <attachment id="12484418" name="LUCENE-2341.patch" size="36226" author="dweiss" created="Tue, 28 Jun 2011 11:45:23 +0100" />
                    <attachment id="12484001" name="morfologik-fsa-1.5.2.jar" size="54058" author="michcio" created="Mon, 27 Jun 2011 21:18:51 +0100" />
                    <attachment id="12484003" name="morfologik-polish-1.5.2.jar" size="3583303" author="michcio" created="Mon, 27 Jun 2011 21:18:51 +0100" />
                    <attachment id="12484002" name="morfologik-stemming-1.5.2.jar" size="17044" author="michcio" created="Mon, 27 Jun 2011 21:18:51 +0100" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>9.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Tue, 23 Mar 2010 10:44:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11455</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25349</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>