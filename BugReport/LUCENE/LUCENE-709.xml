<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:07:11 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-709/LUCENE-709.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-709] [PATCH] Enable application-level management of IndexWriter.ramDirectory size</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-709</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;IndexWriter currently only supports bounding of in the in-memory index cache using maxBufferedDocs, which limits it to a fixed number of documents.  When document sizes vary substantially, especially when documents cannot be truncated, this leads either to inefficiencies from a too-small value or OutOfMemoryErrors from a too large value.&lt;/p&gt;

&lt;p&gt;This simple patch exposes IndexWriter.flushRamSegments(), and provides access to size information about IndexWriter.ramDirectory so that an application can manage this based on total number of bytes consumed by the in-memory cache, thereby allow a larger number of smaller documents or a smaller number of larger documents.  This can lead to much better performance while elimianting the possibility of OutOfMemoryErrors.&lt;/p&gt;

&lt;p&gt;The actual job of managing to a size constraint, or any other constraint, is left up the applicatation.&lt;/p&gt;

&lt;p&gt;The addition of synchronized to flushRamSegments() is only for safety of an external call.  It has no significant effect on internal calls since they all come from a sychronized caller.&lt;/p&gt;</description>
                <environment>&lt;p&gt;All&lt;/p&gt;</environment>
            <key id="12355231">LUCENE-709</key>
            <summary>[PATCH] Enable application-level management of IndexWriter.ramDirectory size</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="manawiz">Chuck Williams</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Nov 2006 05:54:17 +0000</created>
                <updated>Wed, 22 Nov 2006 02:50:50 +0000</updated>
                    <resolved>Wed, 22 Nov 2006 02:50:50 +0000</resolved>
                            <version>2.1</version>
                                                <component>core/index</component>
                        <due></due>
                    <votes>1</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12448725" author="yseeley@gmail.com" created="Fri, 10 Nov 2006 13:05:13 +0000"  >&lt;p&gt;Thanks Chuck, I think I like this additional view/control into IndexWriter, and I don&apos;t think opening this up more further constrains future implementation.  I&apos;ll wait a few days to see if others have comments though.&lt;/p&gt;

&lt;p&gt;I think there might be a thread safety issue with your patch: you use an unsynchronized fail-fast iterator in RAMDirectory.sizeInBytes().   I think using an Enumerator here should work, right?&lt;/p&gt;

&lt;p&gt;Too bad there doesn&apos;t seem to be an easy way to incrementally maintain sizeInBytes... waking over the whole Hashtable for each document addition isn&apos;t pretty for large maxBufferedDocs, esp if the number of indexed fields is large.  At least this only affects people using this functionallity though.&lt;/p&gt;</comment>
                    <comment id="12448736" author="markh" created="Fri, 10 Nov 2006 13:51:14 +0000"  >&lt;p&gt;This is a really nice addition to have which takes some of the guess-work out of buffer sizing based on numbers of docs.&lt;/p&gt;

&lt;p&gt;I implemented something similar before now and found that although it looks ugly, the performance cost of calculating RAMDirectory.sizeInBytes in this way for each doc addition was negligible. That code too was without the thread-safety measure Yonik suggests so I don&apos;t know what overhead that will add.&lt;/p&gt;
</comment>
                    <comment id="12448758" author="yseeley@gmail.com" created="Fri, 10 Nov 2006 14:48:12 +0000"  >&lt;p&gt;&amp;gt; That code too was without the thread-safety measure Yonik suggests so I don&apos;t know what overhead that will add.&lt;/p&gt;

&lt;p&gt;switching to an enumerator should be negligibly faster since Hashtable&apos;s iterator is implemented as it&apos;s enumerator plus  extra concurrent modification checks.  That might not be sufficient for total thread safety though.&lt;/p&gt;

&lt;p&gt;enumerating through the Hashtable while not synchronized means you can encounter an object that was just added by another thread.  The other thread synchronized while adding the new object, but the thread enumerating didn&apos;t execute a read barrier.  The new memory model provides &quot;out-of-thin-air safety&quot; and &quot;initialization safety&quot; guarantees.  Thus, we are guaranteed to see a complete instance of RAMFile (just not necessarily current).  In this specific usecase, I think it boils down to if updating the long length is atomic, which we can&apos;t guarantee for all platforms.  Your count could be off by 4GB if you &quot;see&quot; the bottom 32 bits before the top.&lt;/p&gt;

&lt;p&gt;In this IndexWriter usecase, we should never see a long length that uses both 32 bit words, because we are talking about single segments though.&lt;/p&gt;

&lt;p&gt;Bottom line (I think):  If you want getSizeBytes to work correctly 100% of the time in &lt;b&gt;all&lt;/b&gt; instances and platforms, you need to synchronize it (and hence block any gets/puts during that time.... blech)&lt;/p&gt;
</comment>
                    <comment id="12448923" author="manawiz" created="Sat, 11 Nov 2006 01:56:21 +0000"  >&lt;p&gt;Mea Culpa!  Bad bug on my part.  Thanks for spotting it!&lt;/p&gt;

&lt;p&gt;I believe the solution is simple.  RAMDirectory.files is a Hashtable, i.e. it is synchronized.  Hashtable.values() tracks all changes to the ram directory as they occur.  The fail-fast iterator does not accept concurrent modificaitons.  So, the answer is to stop concurrent modifications during sizeInBytes().  This is accomplised by synchronizing on the same objects as the modificaitons already use, i.e. files.  I&apos;m attaching a new version of the the patch that I believe is correct.&lt;/p&gt;

&lt;p&gt;Please emabarass me again if there is another mistake!&lt;/p&gt;</comment>
                    <comment id="12450079" author="yseeley@gmail.com" created="Wed, 15 Nov 2006 15:58:00 +0000"  >&lt;p&gt;Thinking a little further on this:&lt;br/&gt;
Synchronizing on the Hashtable here does not solve the whole problem, it only slows things down.  The problem isn&apos;t the Hashtable (using an Enumerator rather than an Iterator would solve the fail-fast concurrent modification thing).&lt;/p&gt;

&lt;p&gt;The problem is unsynchronized access to RAMFile.length&lt;br/&gt;
RAMFile and IndexInput/IndexOutput aren&apos;t meant to be MT-safe.&lt;br/&gt;
The correct solution would be to synchronize that (have a RAMFile.getLength(), and a RAMFile.setLength())&lt;/p&gt;

&lt;p&gt;The question is... is it worth it?  Probably...&lt;br/&gt;
I don&apos;t think the cost should be too bad since RAMInputStream makes a local copy of the length, and RAMOutputStream inherits from BufferedOutputStream and only updates the length every buffer flush.&lt;/p&gt;</comment>
                    <comment id="12450260" author="manawiz" created="Thu, 16 Nov 2006 02:16:44 +0000"  >&lt;p&gt;Not synchronizing on the Hashtable, even if using an Enumerator, creates problems as the contents of the hash table may change during the sizeInBytes() iteration.  Files might be deleted and/or added to the directory concurrently, causing the size to be computed from an invalid intermediate state.  Using an Enumerator would cause the invalid value to be returned without an exception, while using an Iterator instead generates a ConcurrentModificationException.  Synchronizing on files avoids the problem altogether without much cost as the loop is fast.&lt;/p&gt;

&lt;p&gt;Hashtable uses a single class, Hashtable.Enumerator, for both its iterator and its enumerator.  There are a couple minor differences in the respective methods, such as the above, but not much.&lt;/p&gt;

&lt;p&gt;The issue with RAMFile.length being a long is an issue, but, this bug already exists in Lucene without sizeInBytes().  See RAMDirectory.fileLength(), which has the same problem now.&lt;/p&gt;

&lt;p&gt;I&apos;ll submit another verison of the patch that encapsulates RAMFile.length into a sychronized getter and setter.  It&apos;s only used in a few places (RAMDIrectory, RAMInputStream and RAMOutputStream).&lt;/p&gt;</comment>
                    <comment id="12450269" author="yseeley@gmail.com" created="Thu, 16 Nov 2006 04:59:33 +0000"  >&lt;p&gt;&amp;gt;  the contents of the hash table may change during the sizeInBytes() iteration.&lt;/p&gt;

&lt;p&gt;Yes, but that&apos;s OK.&lt;/p&gt;

&lt;p&gt;&amp;gt; Files might be deleted and/or added to the directory concurrently, causing the size to be computed from an invalid intermediate state&lt;/p&gt;

&lt;p&gt;Synchronizing at that low level doesn&apos;t make the computed size more valid though... you need synchronization at a higher level if you want to say more about what the size you are computing represents.&lt;/p&gt;

&lt;p&gt;Consider the case of two different uncoordinated threads... one adding a new file to the RAMDirectory, and the other calculating the size of the directory().  In the unsynchronized case, you don&apos;t know if the size will include the new file or not.   If sizeInBytes() is synchronized, you still don&apos;t know which thread will acquire the lock first, so you still don&apos;t know if the size will include the new file.  Synchronizing sizeInBytes() does nothing but add a bottleneck.&lt;/p&gt;

&lt;p&gt;&amp;gt; Synchronizing on files avoids the problem altogether without much cost as the loop is fast. &lt;/p&gt;

&lt;p&gt;I disagree that the loop will be fast... simpler loops have proven to take some time:&lt;br/&gt;
  &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-388&quot; title=&quot;[PATCH] IndexWriter.maybeMergeSegments() takes lots of CPU resources&quot;&gt;&lt;del&gt;LUCENE-388&lt;/del&gt;&lt;/a&gt;: Improve indexing performance when maxBufferedDocs is&lt;br/&gt;
  large by keeping a count of buffered documents rather than&lt;br/&gt;
  counting after each document addition.&lt;br/&gt;
That was just counting the documents, not the number of files in each segment (which will be larger).&lt;br/&gt;
Consider maxBufferedDocs of 1000 to 10000 with 10 or 20 indexed fields, and you end up with 17000 to 270000 files to calculate the size over.&lt;/p&gt;</comment>
                    <comment id="12450271" author="yseeley@gmail.com" created="Thu, 16 Nov 2006 05:13:52 +0000"  >&lt;p&gt;&amp;gt; The issue with RAMFile.length being a long is an issue, but, this bug already exists in Lucene without sizeInBytes(). See RAMDirectory.fileLength(),&lt;/p&gt;

&lt;p&gt;Yes, fileLength() isn&apos;t mt-safe, but then again, it didn&apos;t need to be as it&apos;s never used in an unsafe manner in Lucene.&lt;br/&gt;
sizeInBytes() introduces a new use of RAMFile.length that makes things unsafe, unless one specifies that it&apos;s illegal to call IndexWriter.ramSizeInBytes() concurrently with addDocument() .&lt;/p&gt;</comment>
                    <comment id="12450301" author="manawiz" created="Thu, 16 Nov 2006 07:30:01 +0000"  >&lt;p&gt;I hadn&apos; t considered the case of such large values for maxBufferedDocs, and agree that the loop execution time is non-trivial in such cases.  Incremental management of the size seems most important, especially considering that this will also eliminate the cost of the synchronization.&lt;/p&gt;

&lt;p&gt;I still think the syncrhonization adds safety since it guarantees that the loop sees a state of the directory that did exist at some time.  At that time, the directory did have the reported size.  Without the synchronization the loop may compute a size for a set of files that never comprised the contents of the directory at any instant.  Consider this case:&lt;/p&gt;

&lt;p&gt;  1.  Thread 1 adds a new document, creating a new segment with new index files, leading to segment merging, that creates new larger segment index files, and then deletes all replaced segment index files.  Thread 1 then adds a second document, creating new segment index files.&lt;br/&gt;
  2.  Thread 2 is computing sizeInBytes and happens to see a state where all the new files from both the first and second documents are added, but the deletions are not seen.  This could happen if the deleted files happen to be earlier in the hash array than the added files for either document.&lt;/p&gt;

&lt;p&gt;In this case sizeInBytes() without the synchronization computes a larger size for the directory than ever actually existed.&lt;/p&gt;

&lt;p&gt;Re. RAMDIrectory.fileLength(), it is not used within Lucene at all, but it is public, and the restriction that is not valid when index operations are happening concurrently is not specified.  I think that is a bug.&lt;/p&gt;

&lt;p&gt;I&apos;ll rethink the patch based on your observations, Yonik, and resubmit.  Thanks.&lt;/p&gt;</comment>
                    <comment id="12450791" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 17:01:26 +0000"  >&lt;p&gt;A couple of points:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;synchronizing the hashTable doesn&apos;t help solve the outlined scenario above since the logic that first adds merged segments and removes old segments doesn&apos;t synchronize on the hashTable.  This is another case that requires synchronization at a higher level.&lt;/li&gt;
	&lt;li&gt;for the specific case of the buffered docs in the IndexWriter, they are not merged to the same RAMDirectory anyway.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12450795" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 17:14:11 +0000"  >&lt;p&gt;What do people think of this patch to RAMDirectory that keeps track of the size of closed files with a minimum of overhead, in addition to fixing the non-atomic rename (as well as it&apos;s javadoc)&lt;/p&gt;</comment>
                    <comment id="12450800" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 17:17:03 +0000"  >&lt;p&gt;I&apos;m referring to ramdir.patch that I just attached (It would be nice if JIRA would show a link in the comments to what was just attached...)&lt;/p&gt;</comment>
                    <comment id="12450819" author="cutting" created="Fri, 17 Nov 2006 17:41:45 +0000"  >&lt;p&gt;This looks workable to me.  Alternately, we could add a bufferAdded(int size) method to RAMOutputStream, and increment the directory size whenever this is called.&lt;/p&gt;

&lt;p&gt;Also, should renameFile throw an exception if the source doesn&apos;t exist?&lt;/p&gt;</comment>
                    <comment id="12450833" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 18:08:16 +0000"  >&lt;p&gt;&amp;gt; we could add a bufferAdded(int size) method to RAMOutputStream, and increment the directory size whenever this is called.&lt;/p&gt;

&lt;p&gt;Hmmm, that does reflect the heap usage better than summing the length of the files.  For this specific usage, I think that is more what we want.&lt;/p&gt;

&lt;p&gt;&amp;gt; should renameFile throw an exception if the source doesn&apos;t exist?&lt;br/&gt;
Definitely, I&apos;ll add that while I&apos;m at it.&lt;/p&gt;</comment>
                    <comment id="12450838" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 18:25:07 +0000"  >&lt;p&gt;Keeping track of buffers does complicate figuring how much to subtract on a delete.&lt;br/&gt;
 We could:&lt;br/&gt;
 1) iterate over RAMFile.buffers(), subtracting the size of each (1024 byte buffers means many iterations for a big file though)&lt;br/&gt;
 2) calculate the total buffer size assuming that all bufferes are of size 1024 (fragile assumption?)&lt;br/&gt;
 3) store the cumulative buffer sizes in the RAMFile? (extra space... 8 bytes per RAMFile)&lt;/p&gt;
</comment>
                    <comment id="12450880" author="cutting" created="Fri, 17 Nov 2006 20:35:30 +0000"  >&lt;p&gt;If we add a RAMFile.totalBufferSize() method then we can easily change the implementation later.   For now, I&apos;d choose to multiply the number of the buffers times the size of each buffer, since the size of the buffers is currently a constant.  If we ever make this non-constant, then we might have to change this (and a lot of other things).&lt;/p&gt;</comment>
                    <comment id="12450882" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 20:58:11 +0000"  >&lt;p&gt;Attaching new un-tested ramdir.patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;keeps track of buffers added instead of file length.&lt;/li&gt;
	&lt;li&gt;handles overwrites&lt;/li&gt;
	&lt;li&gt;adds IOExceptions, mirroring FSDirectory when files don&apos;t exist.&lt;br/&gt;
   Note that this adds IOException to the method signatures, just like it&apos;s base class and FSDirectory.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12450888" author="manawiz" created="Fri, 17 Nov 2006 21:10:55 +0000"  >&lt;p&gt;I&apos;ve just attached my version of this patch.  It includes a multi-threaded test case.  I believe it is sound.&lt;/p&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;p&gt;  1.  Re. Yonik&apos;s comment about my synchronization scenario.  Synhronizing as described does resolve the issue.  No higher level synchronization is requried.  It doesn&apos;t matter how concurent operations on the directory are ordered or intereleaved, so long as any computation that does a loop sees some instance of the directory that corresponds to its actual content at any polnt in time.  The result of the loop will then be accurate for that instant.&lt;/p&gt;

&lt;p&gt;2.  Lucene has this same syncrhonization bug today in RAMDIrectory.list().  It can return a list of files that never comprised the contents of the directory.  This is fixed in the attached.&lt;/p&gt;

&lt;p&gt;3.  Also, the long synchronization bug exists in RAMDirectory.fileModified() as well as RAMDIrectory.fileLength() since both are public.  These are fixed in the attached.&lt;/p&gt;

&lt;p&gt;4.  I moved the synchronization off of the Hashtable (replacing it with a HashMap) up to the RAMDirectory as there are some operations that require synchronization at the directory level.  Using just one lock seems better.  As all Hashtable operations were already synchonized, I don&apos;t believe any material additional synchronization is added.&lt;/p&gt;

&lt;p&gt;5.  Lucene currently make the assumption that if a file is being written by a stream then no other streams are simultaneously reading or writing it.  I&apos;ve maintained this assumption as an optimization, allowing the streams to access fields directly without syncrhonization.  This is documented in the comments, as is the locking order.&lt;/p&gt;

&lt;p&gt;5.  sizeInBytes is now maintained incrementally, efficiently.&lt;/p&gt;

&lt;p&gt;6.  Yonik, your version (which I just now saw) has a bug in RAMDIrectory.renameFile().  The to file may already exist, in which case it is overwritten and it&apos;s size must be subtracted.  I actually hit this in my test case for my implementation and fixed it (since Lucene renames a new version of the segments file).&lt;/p&gt;

&lt;p&gt;All Lucene tests, including the new test, pass.  Some contrib tests fail, I believe none of these failures are in any way related to this patch.&lt;/p&gt;

</comment>
                    <comment id="12450894" author="manawiz" created="Fri, 17 Nov 2006 21:19:45 +0000"  >&lt;p&gt;I didn&apos;t see Yonik&apos;s new version or comments until after my attach.&lt;/p&gt;

&lt;p&gt;Throwing IOExceptions when files that should exist don&apos;t  is clearly a good thing.  I&apos;ll add that to mine if you guys decide it is the one you would like to use.&lt;/p&gt;

&lt;p&gt;Counting buffer sizes rather than file length may be slightly more accurate, but at least for me it is not material.  There are other inaccuracies as well (non-file-storage space in the RAMFiles and RAMDIrectory).&lt;/p&gt;

&lt;p&gt;If you guys decide to go with Yonik&apos;s version, I think my test case should still be used, and that the other synchronization errors I&apos;ve fixed should be fixed (e.g., RAMDIrectory.list()).&lt;/p&gt;</comment>
                    <comment id="12451433" author="yseeley@gmail.com" created="Mon, 20 Nov 2006 21:37:05 +0000"  >&lt;p&gt;&amp;gt; 1. Re. Yonik&apos;s comment about my synchronization scenario. Synhronizing as described does resolve the issue. &lt;/p&gt;

&lt;p&gt;In your merging documents scenario, you state &quot;Thread 1 adds a new document, creating a new segment with new index files, leading to segment merging, that creates new larger segment index files, and then deletes all replaced segment index files.&quot;&lt;/p&gt;

&lt;p&gt;If a different thread calls getSizeInBytes() after the merge but before the deletes, you will see both the old segments and new segments created by the merge and will be double counting.  Synchronizing the directory-level getSizeInBytes() will not solve that... it requires higher level synchronization.&lt;/p&gt;

&lt;p&gt;Anyway, I think the point is moot as I think we should handle the size incrementally.&lt;/p&gt;

&lt;p&gt;&amp;gt;Counting buffer sizes rather than file length may be slightly more accurate, but at least for me it is not material. &lt;/p&gt;

&lt;p&gt;It could be &lt;b&gt;much&lt;/b&gt; more accurate though.  All buffering of documents in IndexWriter is done with single doc segments.  That 1 byte norm file takes up 1024 bytes of buffer space!&lt;/p&gt;

&lt;p&gt;&amp;gt; I think my test case should still be used&lt;/p&gt;

&lt;p&gt;+1, I didn&apos;t do any testing &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;BTW, some of the synchronization bugs were fixed in the recent lockless patch.&lt;/p&gt;</comment>
                    <comment id="12451462" author="manawiz" created="Mon, 20 Nov 2006 22:42:05 +0000"  >&lt;p&gt;&amp;gt; In your merging documents scenario, you state &quot;Thread 1 adds a new document, creating a new segment with new index files, leading to segment merging, that creates new larger segment index files, and then deletes all replaced segment index files.&quot;&lt;/p&gt;

&lt;p&gt;&amp;gt; If a different thread calls getSizeInBytes() after the merge but before the deletes, you will see both the old segments and new segments created by the merge and will be double counting. Synchronizing the directory-level getSizeInBytes() will not solve that... it requires higher level synchronization.&lt;/p&gt;

&lt;p&gt;Except there is no double counting there.  The size after the merge before the deletes really is that big!  This is what I mean by any computation involving a loop is accurate at that instant.  Without the synchronization, you can get a result that was &lt;b&gt;never&lt;/b&gt; accurate, i.e. represents a file set that never existed.  For a size computation, that result could be larger or smaller than any actual size the directory ever attained.  That is the point of my example.  For a list() computaiton with an unprotected loop (as in lucene now) you can set a set of files that were never the contents of the directory at any instant.&lt;/p&gt;

&lt;p&gt;No higher level synchronization is required to achieve the semantics that a looping computaiton is accurate at the instant it is performed.  Without directory (or files Hashtable) syncrhonization protecting the whole loop, the result can be random, having no correlation to any actual state the directory ever attained.&lt;/p&gt;

&lt;p&gt;&amp;gt; Anyway, I think the point is moot as I think we should handle the size incrementally. &lt;/p&gt;

&lt;p&gt;Not quite, because the bug already exists in lucene in RAMDirectory.list().  My version of the patch fixes this.  It should be fixed.&lt;/p&gt;

&lt;p&gt;&amp;gt;&amp;gt;Counting buffer sizes rather than file length may be slightly more accurate, but at least for me it is not material.&lt;/p&gt;

&lt;p&gt;&amp;gt; It could be &lt;b&gt;much&lt;/b&gt; more accurate though. All buffering of documents in IndexWriter is done with single doc segments. That 1 byte norm file takes up 1024 bytes of buffer space! &lt;/p&gt;

&lt;p&gt;Point taken that this is important in general.  (These numbers are still small in my app because maxBufferedDocs is not large and i have some very large documents that cannot be truncated.)&lt;/p&gt;

&lt;p&gt;I can update my version of the patch with this improvement if that would be helpful.  Or if you are going to merge my test case into your version of the patch (and I hope fix the remaining synchronization issues in RAMDIrectory.list() and the long synchronization issues in fileLength() and fileModified(), and the rename bug which will need to be fixed for test case to succeed), then I&apos;ll just hold off.&lt;/p&gt;

&lt;p&gt;Yonik, thanks for your interested and effort in this issue!&lt;/p&gt;</comment>
                    <comment id="12451481" author="yseeley@gmail.com" created="Mon, 20 Nov 2006 23:34:59 +0000"  >&lt;p&gt;Sorry for not being clearer before Chuck, I actually did understand your point-in-time points.&lt;br/&gt;
I was just trying to point out that for the usecases I had in mind, the extra sync didn&apos;t buy one much.  Perhaps you have different usecases in mind where you can take action based on the size of a RAMDirectory without regard to what other modifiers are doing.&lt;/p&gt;

&lt;p&gt;&amp;gt; Not quite, because the bug already exists in lucene in RAMDirectory.list().&lt;/p&gt;

&lt;p&gt;I agree.  On the first quick pass I only commented on it&apos;s non thread-safe behavior because I thought it was just a debugging method... looking at it again, I see it should be fixed.  IIRC, I think Michael may have already fixed it in his lockless patch.&lt;/p&gt;

&lt;p&gt;I&apos;m +1 on your other changes such as converting to a HashMap (too bad we can&apos;t use ConcurrentHashMap yet).&lt;br/&gt;
I&apos;d also be OK with changing the buffers Vector to an ArrayList while our eyes are on this part of the code.  That might be more cosmetic than anything else though.&lt;/p&gt;

&lt;p&gt;Please continue with your patch if you would like.&lt;/p&gt;</comment>
                    <comment id="12451831" author="manawiz" created="Wed, 22 Nov 2006 00:50:24 +0000"  >&lt;p&gt;This one should be golden as it addresses all the issues that have been raised and I believe the syncrhonization is fairly well optimized.&lt;/p&gt;

&lt;p&gt;Size is now computed based on buffer size, and so is a more accurate accounting of actual memory usage.&lt;/p&gt;

&lt;p&gt;I&apos;ve added all the various checking and FileNotFoundExceptions that Doug suggested.&lt;/p&gt;

&lt;p&gt;I&apos;ve also changed RamFile.buffers to an ArrayList per Yonik&apos;s last suggestion.  This is probably better than cosmetic since it does allow some unnecessary syncrhonization to be eliminated.&lt;/p&gt;

&lt;p&gt;Unfortunately, my local Lucene differs now fairly substantially from the head &amp;#8211; wish you guys would commit more of my patches so merging wasn&apos;t so difficult &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &amp;#8211; so I&apos;m not using the version submitted here, but I did merge it into the head carefully and all tests pass, including the new RAMDIrectory tests specifically for the functionality this patch provides.&lt;/p&gt;</comment>
                    <comment id="12451852" author="yseeley@gmail.com" created="Wed, 22 Nov 2006 02:50:50 +0000"  >&lt;p&gt;Committed.  Thanks for bearing with me though this Chuck!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12345253" name="ramdir.patch" size="4931" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 20:58:11 +0000" />
                    <attachment id="12345240" name="ramdir.patch" size="2489" author="yseeley@gmail.com" created="Fri, 17 Nov 2006 17:14:11 +0000" />
                    <attachment id="12345451" name="ramDirSizeManagement.patch" size="17374" author="manawiz" created="Wed, 22 Nov 2006 00:50:24 +0000" />
                    <attachment id="12345254" name="ramDirSizeManagement.patch" size="13738" author="manawiz" created="Fri, 17 Nov 2006 21:10:55 +0000" />
                    <attachment id="12344786" name="ramDirSizeManagement.patch" size="3008" author="manawiz" created="Sat, 11 Nov 2006 01:57:03 +0000" />
                    <attachment id="12344733" name="ramDirSizeManagement.patch" size="2722" author="manawiz" created="Fri, 10 Nov 2006 05:55:11 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Fri, 10 Nov 2006 13:05:13 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13043</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27021</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>