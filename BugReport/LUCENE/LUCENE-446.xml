<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:34:05 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-446/LUCENE-446.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-446] search.function - (1) score based on field value, (2) simple score customizability</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-446</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;FunctionQuery can return a score based on a field&apos;s value or on it&apos;s ordinal value.&lt;/p&gt;

&lt;p&gt;FunctionFactory subclasses define the details of the function.  There is currently a LinearFloatFunction (a line specified by slope and intercept).&lt;/p&gt;

&lt;p&gt;Field values are typically obtained from FieldValueSourceFactory.  Implementations include FloatFieldSource, IntFieldSource, and OrdFieldSource.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12317608">LUCENE-446</key>
            <summary>search.function - (1) score based on field value, (2) simple score customizability</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="doronc">Doron Cohen</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Oct 2005 06:23:31 +0100</created>
                <updated>Tue, 19 Jun 2007 09:14:49 +0100</updated>
                    <resolved>Tue, 5 Jun 2007 17:39:49 +0100</resolved>
                                            <fixVersion>2.2</fixVersion>
                                <component>core/search</component>
                        <due></due>
                    <votes>9</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="12331348" author="hossman" created="Wed, 5 Oct 2005 14:27:16 +0100"  >&lt;p&gt;Just a thought, but in the same spirit as SpanQuery, these classes may make sense in their own sub package ... ie: org.apache.lucene.search.fq&lt;/p&gt;</comment>
                    <comment id="12331446" author="yseeley@gmail.com" created="Thu, 6 Oct 2005 09:49:08 +0100"  >&lt;p&gt;Perhaps not  a bad idea considering that the number of classes may top 12 after adding a few more function types.&lt;/p&gt;

&lt;p&gt;Anyone else have package name suggestions/preferences?&lt;/p&gt;

&lt;p&gt;search.fq?&lt;br/&gt;
search.func?&lt;br/&gt;
search.function?&lt;/p&gt;</comment>
                    <comment id="12331589" author="yseeley@gmail.com" created="Fri, 7 Oct 2005 23:29:54 +0100"  >&lt;p&gt;Added ReciprocalFloatFunction, a/(mx+b), a natural choice for date boosting,&lt;br/&gt;
and ReverseOrdFieldSource, which numbers terms in reverse order as OrdFieldSource&lt;/p&gt;</comment>
                    <comment id="12358933" author="yseeley@gmail.com" created="Thu, 1 Dec 2005 02:56:44 +0000"  >&lt;p&gt;attaching newest version&lt;/p&gt;</comment>
                    <comment id="12358936" author="yseeley@gmail.com" created="Thu, 1 Dec 2005 03:14:33 +0000"  >&lt;p&gt;This newest version simplifies a lot of cruft from the previous version.&lt;/p&gt;

&lt;p&gt;A FunctionQuery takes a ValueSource.&lt;br/&gt;
The ValueSource produces a DocValues object for a specific IndexReader (It&apos;s like a lucene scorer).&lt;br/&gt;
The ValueSource is also used as input to functions, which are ValueSources themselves.&lt;/p&gt;

&lt;p&gt;So, you can do things (symbolically), like&lt;/p&gt;

&lt;p&gt;int(fieldx)&lt;br/&gt;
float(fieldx)&lt;br/&gt;
ord(fieldx)&lt;br/&gt;
rord(fieldx)&lt;br/&gt;
linear(fieldx,1,2)&lt;br/&gt;
linear(rord(fieldx),1,2,3)&lt;br/&gt;
reciprocal(linear(fieldx,1,2),3,4,5)&lt;/p&gt;

&lt;p&gt;A useful one for boosting more recent dates might be:&lt;br/&gt;
reciprocal(rord(mydatefield),1,1000,1000)&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if this is the final form yet... perhaps the division between ValueSource and Query  could be erased such that every value source is a query already (so that you don&apos;t need to pass it to a FunctionQuery).&lt;/p&gt;

&lt;p&gt;It would also be nice to freely mix a lucene Query and a ValueSource so that you could do something like:&lt;br/&gt;
product(luceneQuery, val(fieldx))&lt;br/&gt;
  or even&lt;br/&gt;
product(luceneQuery1, luceneQuery2)&lt;/p&gt;

&lt;p&gt;Of course, I haven&apos;t done the &quot;product&quot; function yet... right now, the normal way tocombine with other queries to influence the score is to put it in a boolean query:&lt;br/&gt;
+other_lucene_query_clauses +function_query^.1&lt;br/&gt;
the score from the function query is added to the other query.&lt;/p&gt;</comment>
                    <comment id="12358950" author="yseeley@gmail.com" created="Thu, 1 Dec 2005 04:56:39 +0000"  >&lt;p&gt;changed getSimpleName() to getName() to preserve Java1.4 compatability.&lt;/p&gt;</comment>
                    <comment id="12366302" author="kelvint" created="Tue, 14 Feb 2006 14:48:09 +0000"  >&lt;p&gt;Yes, I&apos;ve independently come up with something similar. What&apos;s interesting is that you can also perform filtering (like date filtering) by simply returning negative Float.MAX_VALUE. This pretty much guarantees that the document&apos;s final score is &amp;lt; 0.&lt;/p&gt;

&lt;p&gt;I&apos;ve also come across the need to be able to modify the final score of a document, and have done this via a score-modifying query wrapper which delegates the scoring to the functionquery it wraps, then applying an additional function to it. Is that similar to the product function you mention?&lt;/p&gt;</comment>
                    <comment id="12368570" author="yseeley@gmail.com" created="Fri, 3 Mar 2006 03:54:54 +0000"  >&lt;p&gt;This version is now slightly out of date.&lt;br/&gt;
For now, consider the definitive version to be in Solr:&lt;br/&gt;
&lt;a href=&quot;http://incubator.apache.org/solr&quot; class=&quot;external-link&quot;&gt;http://incubator.apache.org/solr&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://svn.apache.org/viewcvs.cgi/incubator/solr/trunk/src/java/org/apache/solr/search/function/&quot; class=&quot;external-link&quot;&gt;http://svn.apache.org/viewcvs.cgi/incubator/solr/trunk/src/java/org/apache/solr/search/function/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Solr currently has a QueryParser hack to parse a FunctionQuery...  you use &lt;em&gt;val&lt;/em&gt; as the fieldName to create a FunctionQuery&lt;br/&gt;
Examples:&lt;br/&gt;
  &lt;em&gt;val&lt;/em&gt;:myfield&lt;br/&gt;
 &lt;em&gt;val&lt;/em&gt;:&quot;max(myfield,2.0)&quot;&lt;br/&gt;
 &lt;em&gt;val&lt;/em&gt;:&quot;max(linear(myfield,1.0,.1), 5.0)&quot;&lt;/p&gt;</comment>
                    <comment id="12481936" author="gsingers" created="Sun, 18 Mar 2007 13:39:01 +0000"  >&lt;p&gt;Is there any motivation out there to push this down from Solr to Lucene?  I see from time to time on java-user that it comes in handy for people using Lucene.  What do the Solr people think about moving it into Lucene core?&lt;/p&gt;</comment>
                    <comment id="12481944" author="ehatcher" created="Sun, 18 Mar 2007 14:38:34 +0000"  >&lt;p&gt;+1 to FunctionQuery being brought into Lucene proper.&lt;/p&gt;</comment>
                    <comment id="12482005" author="otis" created="Mon, 19 Mar 2007 01:42:51 +0000"  >&lt;p&gt;Grant: Yeah, I think so.  7 votes and 5 watchers so far tells me people want this in Lucene.&lt;/p&gt;</comment>
                    <comment id="12482281" author="hossman" created="Tue, 20 Mar 2007 00:23:28 +0000"  >&lt;p&gt;I&apos;m in favor ... i think once upon a time Yonik held off because he wasn&apos;t sure if he liked the API, but since it&apos;s been in Apache Solr for over a year now, i think it&apos;s safe.&lt;/p&gt;

&lt;p&gt;I don&apos;t suppose you&apos;d be interested in opening a sister Solr issue and submitting a patch to deprecate those instances and make them subclass the ones you&apos;ll be migrating to Lucene would you? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    <comment id="12482292" author="hossman" created="Tue, 20 Mar 2007 02:19:13 +0000"  >&lt;p&gt;I just remembered one of the reasons why i didn&apos;t do this the last time i looked at it: i don&apos;t think FunctionQuery has any good unit tests in the Solr code base &amp;#8211; there might be some tests that use the SOlrTestHarness to trigger function queries, but they aren&apos;t really portable.&lt;/p&gt;</comment>
                    <comment id="12483878" author="yseeley@gmail.com" created="Sat, 24 Mar 2007 20:38:10 +0000"  >&lt;p&gt;&amp;gt; i think once upon a time Yonik held off because he wasn&apos;t sure if he liked the API&lt;/p&gt;

&lt;p&gt;Right... it&apos;s just never been at the top of my list to revisit.&lt;/p&gt;

&lt;p&gt;The main thing I was wondering is if I should have a whole ValueSource thing... perhaps FunctionQuery should be able to use other Queries directly.  For example, one could have&lt;br/&gt;
MultiplyFunctionQuery(MyNormalQuery, MyFieldFunctionQuery) to boost a query by another query (in this case a function query).&lt;/p&gt;

&lt;p&gt;Right now, increasing the score of a document based on a field value is done in an additive way by adding a FunctionQuery clause to a BooleanQuery.  One could create a ValueSource that wraps another query to get a multiplicative effect, but is that the simplest approach?&lt;/p&gt;</comment>
                    <comment id="12484195" author="klaasm" created="Mon, 26 Mar 2007 20:13:47 +0100"  >&lt;p&gt;I&apos;ve often wanted to multiply the scores of two queries.  I looked at FunctionQuery but didn&apos;t really see an easy way of getting around the ValueSource thing.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-850&quot; title=&quot;Easily create queries that transform subquery scores arbitrarily&quot;&gt;&lt;del&gt;LUCENE-850&lt;/del&gt;&lt;/a&gt; for my eventual solution&lt;/p&gt;</comment>
                    <comment id="12492378" author="doronc" created="Fri, 27 Apr 2007 20:32:15 +0100"  >&lt;p&gt;I intend to take a shot at this, with the approach of two parts/steps -&lt;br/&gt;
  1)  simple scoring based on values of stored field.&lt;br/&gt;
  2)  composing a document score as (some / math / extensible)  function of one or more scores of sub queries.&lt;/p&gt;

&lt;p&gt;Thinking of a new package:    o.a.l.search.function.&lt;/p&gt;

&lt;p&gt;This would seem to bring together &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-446&quot; title=&quot;search.function - (1) score based on field value, (2) simple score customizability&quot;&gt;&lt;del&gt;LUCENE-446&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-850&quot; title=&quot;Easily create queries that transform subquery scores arbitrarily&quot;&gt;&lt;del&gt;LUCENE-850&lt;/del&gt;&lt;/a&gt; and I think would be handy for trying various scoring techniques.&lt;/p&gt;

&lt;p&gt;(Background/motivation:  I was considering using payloads for trying some static scoring alternatives (e.g. link info based), but I realized that function queries are much more suitable for this, and would be a handy addition to Lucene core.)&lt;/p&gt;</comment>
                    <comment id="12493265" author="doronc" created="Thu, 3 May 2007 04:09:20 +0100"  >&lt;p&gt;Attached function.patch.txt adds three new queries:&lt;/p&gt;

&lt;p&gt;1. ValueSourceQuery -  an Expert type of query, more or less same as &lt;br/&gt;
    in original patch. It is very flexible - takes a ValueSource as input - so it&lt;br/&gt;
    could be extended to do additional things (ie not only indexed fields).&lt;/p&gt;

&lt;p&gt;2. FieldScoreQuery - subclass of ValueSourceQuery. It is easier&lt;br/&gt;
    to use, and operates on cached indexed field. A doc score is set &lt;br/&gt;
    by the value of that field. There are 4 field parser types for this: float, int,&lt;br/&gt;
    short, and byte. They require different size in RAM when cached: 8, 4, 2, &lt;br/&gt;
    and 1 bytes respectively per document. The cache was modified to &lt;br/&gt;
    accommodate this. (Seems worth to save RAM where possible.)&lt;/p&gt;

&lt;p&gt;3. CustomScoreQuery - this query allows to custom the score of its contained &lt;br/&gt;
    sub-query by implementing a customScore() function. Any computation is &lt;br/&gt;
    possible, as long as it is based on the original score of the sub-query, &lt;br/&gt;
    the (optional) score of an (optional) sub-valueSourceQuery, and the docid.&lt;br/&gt;
    This query also covers (somewhat differently) &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-850&quot; title=&quot;Easily create queries that transform subquery scores arbitrarily&quot;&gt;&lt;del&gt;LUCENE-850&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The patch Included tests and javadocs. &lt;br/&gt;
All tests pass.&lt;/p&gt;

&lt;p&gt;I will later put the javadocs somewhere, to allow commenting on the API without &lt;br/&gt;
applying the patch.&lt;/p&gt;

&lt;p&gt;The tests found quite a few bugs for me, and I hope I got the scorers and weight &lt;br/&gt;
correct now - I would very much appreciate review comments on these delicate&lt;br/&gt;
parts.,,&lt;/p&gt;</comment>
                    <comment id="12493267" author="doronc" created="Thu, 3 May 2007 04:19:03 +0100"  >&lt;p&gt;Modifying the issue name to reflect its current content. &lt;/p&gt;</comment>
                    <comment id="12493297" author="doronc" created="Thu, 3 May 2007 07:59:31 +0100"  >&lt;p&gt;javadocs for the new org.apache.lucene.search.function package &lt;br/&gt;
can now be reviewed at &lt;a href=&quot;http://people.apache.org/~doronc/api&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/api&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12493863" author="doronc" created="Sat, 5 May 2007 08:04:04 +0100"  >&lt;p&gt;Updated patch to current trunk. &lt;/p&gt;

&lt;p&gt;Also:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;moved TYPE consts in FieldScoreQuery to FieldScoreQuery.Type (e.g. FieldScoreQuery.Type.BYTE).&lt;/li&gt;
	&lt;li&gt;some documentation fixes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Updated patch javadocs in  &lt;a href=&quot;http://people.apache.org/~doronc/api/&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/api/&lt;/a&gt; &lt;/p&gt;</comment>
                    <comment id="12493865" author="doronc" created="Sat, 5 May 2007 08:20:29 +0100"  >&lt;p&gt;Yonik (and other Solr&apos;s search.function people), &lt;/p&gt;

&lt;p&gt;I omitted some of the original functions/sources that were in your code: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;LinearFloatFunction,   MaxFloatFunction,   ReciprocalFloatFunction,&lt;/li&gt;
	&lt;li&gt;OrdFieldSource,   ReverseOrdFieldSource&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The first 3 should be straightforward to implemented by extending CustomScoreQuery, like the code samples show. Do you think such implementations should be included, ready to use?&lt;/p&gt;

&lt;p&gt;The last 2 Ord ones can be implemented as before, i.e. with the &quot;expert&quot; class ValueSource that was kept. But they seemed spooky to me, with that comment regarding multi-searchers. Are these just examples, or are they really useful? Do you think they should be included?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Doron&lt;/p&gt;</comment>
                    <comment id="12501082" author="hossman" created="Mon, 4 Jun 2007 03:36:49 +0100"  >&lt;p&gt;Doron: I haven&apos;t really been able to keep up with the way this issue has evolved, or dig into your new patches, but to answer your question about the Ord functions: yes they are very useful, and it active use in Solr.  I believe the warning about MultiSearcher mainly has to do with the fact that the MultiSearcher/FieldCache APIs give us know way to know the &quot;lowest&quot; of &quot;highest&quot; value in a field cache across an entire logical index, so the Ord functions can&apos;t really be queried against a MultiSearcher.&lt;/p&gt;</comment>
                    <comment id="12501396" author="doronc" created="Mon, 4 Jun 2007 23:24:00 +0100"  >&lt;p&gt;ok, so I will add in the two ord classes in, so that Solr can move to use this package.&lt;/p&gt;</comment>
                    <comment id="12501433" author="doronc" created="Tue, 5 Jun 2007 03:33:04 +0100"  >&lt;p&gt;Updated patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;fixes explanation and toString() issues.&lt;/li&gt;
	&lt;li&gt;adds the Ord and ReverseOrd valueSource classes that are in use in Solr&lt;/li&gt;
	&lt;li&gt;warn in the javadocs from the experimental state of this package&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Javadocs were updated at &lt;a href=&quot;http://people.apache.org/~doronc/api&quot; class=&quot;external-link&quot;&gt;http://people.apache.org/~doronc/api&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I will commit this later today of there are no objections.&lt;/p&gt;
</comment>
                    <comment id="12501608" author="doronc" created="Tue, 5 Jun 2007 17:39:49 +0100"  >&lt;p&gt;committed (experimental mode).&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12365317">SOLR-192</issuekey>
        </issuelink>
                    </outwardlinks>
                                                <inwardlinks description="is related to">
                            <issuelink>
            <issuekey id="12365831">LUCENE-850</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12358918" name="function.patch.txt" size="119515" author="doronc" created="Tue, 5 Jun 2007 03:33:04 +0100" />
                    <attachment id="12356817" name="function.patch.txt" size="95406" author="doronc" created="Sat, 5 May 2007 08:04:04 +0100" />
                    <attachment id="12356682" name="function.patch.txt" size="95003" author="doronc" created="Thu, 3 May 2007 04:09:20 +0100" />
                    <attachment id="12321057" name="function.zip" size="9260" author="yseeley@gmail.com" created="Thu, 1 Dec 2005 04:56:39 +0000" />
                    <attachment id="12321052" name="function.zip" size="9262" author="yseeley@gmail.com" created="Thu, 1 Dec 2005 02:56:44 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 5 Oct 2005 13:27:16 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13303</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>27285</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>