<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:04:28 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2815/LUCENE-2815.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2815] MultiFields not thread safe</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2815</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;MultiFields looks like it has thread safety issues&lt;/p&gt;</description>
                <environment></environment>
            <key id="12493380">LUCENE-2815</key>
            <summary>MultiFields not thread safe</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="-1">Unassigned</assignee>
                                <reporter username="yseeley@gmail.com">Yonik Seeley</reporter>
                        <labels>
                    </labels>
                <created>Thu, 16 Dec 2010 00:45:28 +0000</created>
                <updated>Fri, 10 May 2013 11:44:11 +0100</updated>
                    <resolved>Fri, 17 Dec 2010 15:26:36 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12971909" author="yseeley@gmail.com" created="Thu, 16 Dec 2010 00:49:35 +0000"  >&lt;p&gt;So I started looking into MultiFields more closely, just from a performance perspective, and noticed a couple of thread safety issues:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;MultiFields is reused (a good thing), but isn&apos;t safely published to other threads.&lt;/li&gt;
	&lt;li&gt;MultiFields has a HashMap that is used and modified unsynchronized to cache MultiTerms instances&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12971930" author="yseeley@gmail.com" created="Thu, 16 Dec 2010 01:40:16 +0000"  >&lt;p&gt;It looks like MultiReaderBits also has issues with safe object publication.&lt;/p&gt;</comment>
                    <comment id="12972057" author="mikemccand" created="Thu, 16 Dec 2010 12:10:50 +0000"  >&lt;p&gt;Ugh, nice finds Yonik!  We should fix these.&lt;/p&gt;

&lt;p&gt;Maybe MultiFields should just pre-build its Map&amp;lt;String,Term&amp;gt; on init?&lt;/p&gt;

&lt;p&gt;You&apos;re right, we do reuse MultiFields today (we stuff the instance of MultiFields onto the IndexReader with IndexReader.store/retrieveFields), but I wonder whether we really should?  (In fact I thought at one point we decided to stop doing that... yet, we still are... can&apos;t remember the details; maybe perf hit was too high eg for MTQs/Solr facets/etc.).&lt;/p&gt;

&lt;p&gt;What do we need to do to make the publication safe?  Is making IR.store/retrieveFields sync&apos;d sufficient?&lt;/p&gt;

&lt;p&gt;Aside: Java concurrency is a &lt;b&gt;mess&lt;/b&gt;.  I understand why JMM is needed, to get good perf on modern CPUs, but allowing the low level CPU cache coherency requirements to bubble all the way up to complex requirements in the language itself, is a disaster.&lt;/p&gt;</comment>
                    <comment id="12972096" author="yseeley@gmail.com" created="Thu, 16 Dec 2010 15:06:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;but I wonder whether we really should? (In fact I thought at one point we decided to stop doing that... yet, we still are... can&apos;t remember the details; maybe perf hit was too high eg for MTQs/Solr facets/etc.).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It wouldn&apos;t be solr facets... that code asks for fields() once up front (per facet request) and the rest of the work will dwarf that.&lt;br/&gt;
I think there probably are a lot of random places that use it where the overhead could be significant.  For example IndexReader.deleteDocuments(), ParallelReader, FuzzyLikeThisQuery, and anyone else that uses any of the static methods on Field on a non-segment reader.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What do we need to do to make the publication safe? Is making IR.store/retrieveFields sync&apos;d sufficient?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;More than sufficient.  A volatile would also work fine provided that a race shouldn&apos;t matter (i.e. more than one MultiFields object could be constructed).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe MultiFields should just pre-build its Map&amp;lt;String,Term&amp;gt; on init?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ouch... those folks with 1000s of fields wouldn&apos;t be happy about that.&lt;/p&gt;</comment>
                    <comment id="12972258" author="yseeley@gmail.com" created="Thu, 16 Dec 2010 22:37:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;It looks like MultiReaderBits also has issues with safe object publication. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Actually, it looks like this one is OK with most of our current code.&lt;br/&gt;
SegmentReader.getDeletedDocs() returns an object stored in a volatile, so that counts as a safe publish.  Other implementations seem to either throw an exception or directly call a segment reader.  One exception is instantiated index (I think).&lt;/p&gt;

&lt;p&gt;We can&apos;t call getDeletedDocs() just once up-front, because an IndexReader may still be used to delete documents.&lt;/p&gt;</comment>
                    <comment id="12972281" author="yseeley@gmail.com" created="Thu, 16 Dec 2010 23:17:37 +0000"  >&lt;p&gt;I was going to fix InstantiatedIndex, but while I was in there, I saw a lot of non-threadsafe code.  I think that really deserves it&apos;s own issue.&lt;br/&gt;
What range of docs is InstantiatedIndex faster for, and is it something we want to continue to maintain?&lt;/p&gt;</comment>
                    <comment id="12972337" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 02:14:12 +0000"  >&lt;p&gt;Here&apos;s a patch that uses a ConcurrentHashMap for the Terms cache, and makes IndexReader.fields volatile.&lt;/p&gt;

&lt;p&gt;That IndexReader.fields variable is just the type of stuff that could just be stored in a generic cache on the IndexReader, if/when we get something like that.&lt;/p&gt;</comment>
                    <comment id="12972505" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 14:55:34 +0000"  >&lt;p&gt;Hmmm, this patch causes test failures because ConcurrentHashMap doesn&apos;t handle null values.&lt;/p&gt;</comment>
                    <comment id="12972509" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 15:03:46 +0000"  >&lt;p&gt;Here&apos;s an updated patch that avoids containsKey() followed by get() (just an optimization)&lt;br/&gt;
and avoids caching null Terms instances.  This is the right thing to do anyway, since one could easily blow up the cache with fields that don&apos;t exist.&lt;/p&gt;</comment>
                    <comment id="12972518" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 15:26:36 +0000"  >&lt;p&gt;committed.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12466464" name="LUCENE-2815.patch" size="3358" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 15:03:46 +0000" />
                    <attachment id="12466437" name="LUCENE-2815.patch" size="1501" author="yseeley@gmail.com" created="Fri, 17 Dec 2010 02:14:12 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Thu, 16 Dec 2010 12:10:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11044</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24877</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>