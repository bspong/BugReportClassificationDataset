<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:21:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-732/LUCENE-732.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-732] Support DateTools in QueryParser</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-732</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;The QueryParser currently uses the deprecated class DateField to create RangeQueries with date values. However, most users probably use DateTools to store date values in their indexes, because this is the recommended way since DateField has been deprecated. In that case RangeQueries with date values produced by the QueryParser won&apos;t work with those indexes.&lt;/p&gt;

&lt;p&gt;This patch replaces the use of DateField in QueryParser by DateTools. Because DateTools can produce date values with different resolutions, this patch adds the following methods to QueryParser:&lt;/p&gt;

&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sets the default date resolution used by RangeQueries for fields for which no&lt;/li&gt;
	&lt;li&gt;specific date resolutions has been set. Field specific resolutions can be set&lt;/li&gt;
	&lt;li&gt;with 
{@link #setDateResolution(String, DateTools.Resolution)}
&lt;p&gt;.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param dateResolution the default date resolution to set&lt;br/&gt;
   */&lt;br/&gt;
  public void setDateResolution(DateTools.Resolution dateResolution);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Sets the date resolution used by RangeQueries for a specific field.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param field field for which the date resolution is to be set&lt;/li&gt;
	&lt;li&gt;@param dateResolution date resolution to set&lt;br/&gt;
   */&lt;br/&gt;
  public void setDateResolution(String fieldName, DateTools.Resolution dateResolution);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(I also added the corresponding getter methods).&lt;/p&gt;

&lt;p&gt;Now the user can set a default date resolution used for all fields or, with the second method, field specific date resolutions.&lt;br/&gt;
The initial default resolution, which is used if the user does not set a different resolution, is DateTools.Resolution.DAY. &lt;/p&gt;

&lt;p&gt;Please let me know if you think we should use a different resolution as default.&lt;/p&gt;

&lt;p&gt;I extended TestQueryParser to test this new feature.&lt;/p&gt;

&lt;p&gt;All unit tests pass.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12357284">LUCENE-732</key>
            <summary>Support DateTools in QueryParser</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                    <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png">Resolved</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="michaelbusch">Michael Busch</assignee>
                                <reporter username="michaelbusch">Michael Busch</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Nov 2006 20:05:13 +0000</created>
                <updated>Mon, 8 Jan 2007 20:05:42 +0000</updated>
                    <resolved>Mon, 8 Jan 2007 20:05:42 +0000</resolved>
                                                            <component>core/queryparser</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="12454449" author="lucenebugs@danielnaber.de" created="Wed, 29 Nov 2006 21:32:49 +0000"  >&lt;p&gt;I&apos;m not sure if most people use DateTools already, as it has just been added in Lucene 1.9. Maybe you could consider an option (yes, yet another option isn&apos;t nice, I know)? Otherwise we need to properly document how to continue using DateField, i.e. by extending QueryParser and overwriting this method I guess.&lt;/p&gt;</comment>
                    <comment id="12454457" author="hossman" created="Wed, 29 Nov 2006 21:51:08 +0000"  >&lt;p&gt;cleanest way to be backwards compatible would be to not have an initial default Resolution, and use DateField if no Resolution can be found for the field specified.  Existing clients would still get DateField for all dates, clients that add a call to setDateResolution(&quot;foo&quot;, BAR); would get a DateTools formated query with resolution BAR for field foo, but other pre-existing fields would still use DateField, and clients that call setDateResolution(BAR); would allways get a DateTools formatted query, either at resolution BAR or at some other resolution if they also use the two arg setDateResolution&lt;/p&gt;</comment>
                    <comment id="12454469" author="michaelbusch" created="Wed, 29 Nov 2006 22:25:06 +0000"  >&lt;p&gt;Actually it is documented in the QueryParser how to use a different format for dates:&lt;/p&gt;

&lt;p&gt;   ...&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;feature also assumes that your index uses the 
{@link DateTools}
&lt;p&gt; class to store dates.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;If you use a different format and you still want QueryParser&lt;/li&gt;
	&lt;li&gt;to turn local dates in range queries into valid queries you need to create your own&lt;/li&gt;
	&lt;li&gt;query parser that inherits QueryParser and overwrites&lt;/li&gt;
	&lt;li&gt;{@link #getRangeQuery(String, String, String, boolean)}
&lt;p&gt;.&lt;br/&gt;
   ...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And the javadoc of DateField says:&lt;/p&gt;

&lt;p&gt;   Deprecated. If you build a new index, use DateTools instead. This class is included for use with existing indices and will be removed in a future release.&lt;/p&gt;

&lt;p&gt;So the question is in how many future releases we want to support DateField. If we still want to support it in 2.1 I agree to Hoss that his suggestion would be a nice and clean way to do that and I can easily change the patch accordingly. It avoids having another option in QueryParser.&lt;/p&gt;</comment>
                    <comment id="12455464" author="michaelbusch" created="Tue, 5 Dec 2006 00:00:02 +0000"  >&lt;p&gt;This new patch contains the changes suggested by Hoss:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;by default the QueryParser uses DateField to format dates for all fields&lt;/li&gt;
	&lt;li&gt;if a date resolution has been set using void setDateResolution(DateTools.Resolution) then DateTools is used for all fields with the given resolution&lt;/li&gt;
	&lt;li&gt;if a field specific date resolution has been set using setDateResolution(String, DateTools.Resolution) then DateTools is used for the given field with the given date resolution; other fields are not affected&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So with this patch the behaviour of QueryParser does not change unless either setDateResolution(DateTools.Resolution) or setDateResolution(String, DateTools.Resolution) have been called.&lt;/p&gt;</comment>
                    <comment id="12455465" author="michaelbusch" created="Tue, 5 Dec 2006 00:01:37 +0000"  >&lt;p&gt;Changed the summary to better reflect the second version of the patch.&lt;/p&gt;</comment>
                    <comment id="12456242" author="hossman" created="Wed, 6 Dec 2006 22:38:56 +0000"  >&lt;p&gt;+1 for queryparser_datetools2.patch&lt;/p&gt;

&lt;p&gt;the only nitpick i have is with the class level javadocs...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;In 
{@link RangeQuery}
&lt;p&gt;s, QueryParser tries to detect date values, e.g. &amp;lt;tt&amp;gt;date:&lt;span class=&quot;error&quot;&gt;&amp;#91;6/1/2005 TO 6/4/2005&amp;#93;&lt;/span&gt;&amp;lt;/tt&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;produces a range query that searches for &quot;date&quot; fields between 2005-06-01 and 2005-06-04. Note&lt;/li&gt;
	&lt;li&gt;that the format of the accepted input depends on 
{@link #setLocale(Locale) the locale}
&lt;p&gt;.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;By default a date is formatted using the deprecated 
{@link DateField}
&lt;p&gt; for compatibility reasons.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;To use the new 
{@link DateTools}
&lt;p&gt; to format dates, a &lt;/p&gt;
{@link DateTools.Resolution}
&lt;p&gt; has to be set.&amp;lt;/p&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;The date resolution that shall be used for RangeQueries can be set using {@link #setDateResolution(DateTools.Resolution)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;...the word &quot;format&quot; is used to mean two very differnet things in this paragraph, we should clean that up so it&apos;s clera that Locale determines the DateFormat QP uses when trying to parse input  in &lt;span class=&quot;error&quot;&gt;&amp;#91;a TO b&amp;#93;&lt;/span&gt; syntax, while either DateField or DateTools are used to create the &quot;indexed&quot; value queried against.&lt;/p&gt;</comment>
                    <comment id="12456662" author="michaelbusch" created="Fri, 8 Dec 2006 01:48:13 +0000"  >&lt;p&gt;You&apos;re right Hoss, the word &quot;format&quot; is used ambiguously in the javadoc. We could change it to&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;In 
{@link RangeQuery}
&lt;p&gt;s, QueryParser tries to detect date values, e.g. &amp;lt;tt&amp;gt;date:&lt;span class=&quot;error&quot;&gt;&amp;#91;6/1/2005 TO 6/4/2005&amp;#93;&lt;/span&gt;&amp;lt;/tt&amp;gt;&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;produces a range query that searches for &quot;date&quot; fields between 2005-06-01 and 2005-06-04. Note&lt;/li&gt;
	&lt;li&gt;that the format of the accepted input depends on 
{@link #setLocale(Locale) the locale}
&lt;p&gt;.&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;By default a date is converted into a search term using the deprecated 
{@link DateField} for compatibility reasons.&lt;br/&gt;
 * To use the new {@link DateTools} to convert dates, a {@link DateTools.Resolution} has to be set.&amp;lt;/p&amp;gt; &lt;br/&gt;
 * &amp;lt;p&amp;gt;The date resolution that shall be used for RangeQueries can be set using {@link #setDateResolution(DateTools.Resolution)}&lt;br/&gt;
 * or {@link #setDateResolution(String, DateTools.Resolution)}. The former sets the default date resolution for all fields, whereas the latter can&lt;br/&gt;
 * be used to set field specific date resolutions. Field specific date resolutions take, if set, precedence over the default date resolution.&lt;br/&gt;
 * &amp;lt;/p&amp;gt;&lt;br/&gt;
 * &amp;lt;p&amp;gt;If you use neither {@link DateField}
&lt;p&gt; nor &lt;/p&gt;
{@link DateTools}
&lt;p&gt; in your index, you can create your own&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;query parser that inherits QueryParser and overwrites 
{@link #getRangeQuery(String, String, String, boolean)}
&lt;p&gt; to&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;use a different method for date conversion.&lt;/li&gt;
	&lt;li&gt;&amp;lt;/p&amp;gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Sounds better? Do you want me to create another patch that includes this javadoc?&lt;/p&gt;</comment>
                    <comment id="12463117" author="hossman" created="Mon, 8 Jan 2007 20:05:42 +0000"  >&lt;p&gt;I&apos;ve commited queryparser_datetools2.patch with two changes...&lt;/p&gt;

&lt;p&gt;1) revised the class level javadocs based on Michael&apos;s last comment.&lt;br/&gt;
2) reinstated the old TestQueryParser.testDateRange() as testLegacyDateRange() to attempt to future proof against breaking backwards compatibility.&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12346384" name="queryparser_datetools2.patch" size="17481" author="michaelbusch" created="Tue, 5 Dec 2006 00:00:02 +0000" />
                    <attachment id="12346054" name="queryparser_datetools.patch" size="16697" author="michaelbusch" created="Wed, 29 Nov 2006 20:05:39 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>2.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 29 Nov 2006 21:32:49 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>13020</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>26998</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>