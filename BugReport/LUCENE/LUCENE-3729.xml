<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:31:59 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3729/LUCENE-3729.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3729] Allow using FST to hold terms data in DocValues.BYTES_*_SORTED</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3729</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description></description>
                <environment></environment>
            <key id="12540301">LUCENE-3729</key>
            <summary>Allow using FST to hold terms data in DocValues.BYTES_*_SORTED</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="mikemccand">Michael McCandless</assignee>
                                <reporter username="mikemccand">Michael McCandless</reporter>
                        <labels>
                        <label>gsoc2012</label>
                        <label>lucene-gsoc-11</label>
                    </labels>
                <created>Sun, 29 Jan 2012 17:56:59 +0000</created>
                <updated>Fri, 10 May 2013 11:33:37 +0100</updated>
                    <resolved>Fri, 8 Feb 2013 03:30:02 +0000</resolved>
                                            <fixVersion>4.2</fixVersion>
                <fixVersion>5.0</fixVersion>
                                        <due></due>
                    <votes>2</votes>
                        <watches>4</watches>
                                                    <comments>
                    <comment id="13195809" author="mikemccand" created="Sun, 29 Jan 2012 18:02:21 +0000"  >&lt;p&gt;Prototype patch just for testing...&lt;/p&gt;

&lt;p&gt;As a quick test for viability here... I hacked&lt;br/&gt;
FieldCacheImpl.DocTermsIndexImpl, to build an FST to map term &amp;lt;-&amp;gt; ord,&lt;br/&gt;
and changed the lookup method to use the new Util.getByOutput method.&lt;/p&gt;

&lt;p&gt;Then I tested perf on 10M docs from Wikipedia:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                Task    QPS base StdDev base   QPS fstfcStdDev fstfc      Pct diff
         TermGroup1M       47.75        1.59       25.75        0.36  -48% -  -43%
        TermBGroup1M       17.10        0.58       14.20        0.37  -21% -  -11%
            PKLookup      158.73        6.07      155.84        3.00   -7% -    4%
       TermTitleSort       43.49        2.54       42.73        1.84  -11% -    8%
             Respell       81.13        3.24       80.67        3.83   -8% -    8%
                Term      106.13        3.59      106.03        1.28   -4% -    4%
      TermBGroup1M1P       25.31        0.44       25.37        0.54   -3% -    4%
              Fuzzy2       55.32        1.21       55.76        2.55   -5% -    7%
              Fuzzy1       74.06        1.21       74.88        2.80   -4% -    6%
        SloppyPhrase        9.82        0.61        9.95        0.42   -8% -   12%
            SpanNear        3.39        0.16        3.47        0.15   -6% -   12%
              Phrase        9.29        0.69        9.66        0.69  -10% -   20%
            Wildcard       20.15        0.66       21.23        0.46    0% -   11%
         AndHighHigh       13.43        0.55       14.24        0.70   -3% -   15%
             Prefix3       10.05        0.53       10.70        0.19    0% -   14%
          AndHighMed       56.62        3.36       60.54        4.28   -6% -   21%
           OrHighMed       25.78        0.98       27.75        1.51   -1% -   17%
          OrHighHigh       10.97        0.41       11.82        0.63   -1% -   17%
              IntNRQ        9.74        0.81       10.83        0.26    0% -   24%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Two-pass grouping took a big hit... and single-pass grouping a moderate&lt;br/&gt;
hit... but TermTitleSort was a minor slowdown, which is good news.&lt;/p&gt;

&lt;p&gt;The net RAM required across all segs for the title field FST was 30.2&lt;br/&gt;
MB, vs 46.5 MB for the current FieldCache terms storage (PagedBytes +&lt;br/&gt;
PackedInts), which is ~35% less.&lt;/p&gt;

&lt;p&gt;The FST for the group-by fields was quite a bit larger (~60%) RAM&lt;br/&gt;
usage than PagedBytes + PackedInts, because these fields are actually&lt;br/&gt;
randomly generated unicode strings...&lt;/p&gt;

&lt;p&gt;I didn&apos;t make the change to use the FST for term -&amp;gt; ord lookup (have&lt;br/&gt;
to fix the binarySearchLookup method), but we really should do this&lt;br/&gt;
&quot;for real&quot; because it&apos;s doing an unnecessary binary search (repeated&lt;br/&gt;
ord -&amp;gt; term lookup) now.  Ie, perf should be better than&lt;br/&gt;
above... grouping is a heavier user of binarySearchLookup than sorting&lt;br/&gt;
so it should help recover some of that slowdown.&lt;/p&gt;

&lt;p&gt;Also, Util.getByOutput currently doesn&apos;t optimize for array&apos;d&lt;br/&gt;
arcs... so if we fix that we should get some small perf gain.&lt;/p&gt;

&lt;p&gt;To do this &quot;for real&quot; I think we should do it only with DocValues,&lt;br/&gt;
because the FST build time is relatively costly.&lt;/p&gt;</comment>
                    <comment id="13195815" author="mikemccand" created="Sun, 29 Jan 2012 18:27:49 +0000"  >&lt;p&gt;Updated patch to use FST for term -&amp;gt; ord lookup during 2 pass grouping... much better results:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                Task    QPS base StdDev base   QPS fstfcStdDev fstfc      Pct diff
         TermGroup1M       45.69        1.25       43.43        0.90   -9% -    0%
            PKLookup      164.02        9.00      157.12        6.23  -12% -    5%
             Respell       64.28        2.75       61.96        2.48  -11% -    4%
        SloppyPhrase        5.99        0.26        5.79        0.35  -13% -    7%
              Fuzzy2       54.07        2.47       52.56        1.83  -10% -    5%
              Phrase       14.97        0.16       14.61        0.44   -6% -    1%
       TermTitleSort       39.53        0.56       38.71        1.93   -8% -    4%
           OrHighMed       32.91        1.33       32.27        1.48  -10% -    6%
          OrHighHigh       15.10        0.62       14.83        0.68   -9% -    7%
          AndHighMed       53.49        0.56       52.53        2.02   -6% -    3%
            SpanNear       14.28        0.21       14.04        0.28   -5% -    1%
              Fuzzy1       60.37        1.25       59.39        1.65   -6% -    3%
         AndHighHigh        9.15        0.12        9.01        0.25   -5% -    2%
        TermBGroup1M       33.53        0.61       33.07        0.77   -5% -    2%
              IntNRQ       10.16        0.47       10.04        0.90  -14% -   12%
             Prefix3       40.44        0.59       40.44        1.99   -6% -    6%
            Wildcard       35.38        0.63       35.55        1.49   -5% -    6%
      TermBGroup1M1P       16.54        0.34       16.78        0.54   -3% -    6%
                Term      100.39        2.64      103.13        3.69   -3% -    9%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13196328" author="rcmuir" created="Mon, 30 Jan 2012 19:09:24 +0000"  >&lt;p&gt;Interesting that it hurts sort and grouping so little... some questions:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;don&apos;t you think this should be 4.0&apos;s default sorted bytes implementation?&lt;/li&gt;
	&lt;li&gt;alternatively, since this test hurts sort so little, maybe we could try&lt;br/&gt;
  every n&apos;th (e.g. 128) term going into the FST? So this would just be a&lt;br/&gt;
  &apos;sort index&apos; like the terms index, augmenting the existing sorted bytes &lt;br/&gt;
  (you could still load em all up in ram for other purposes, like merging). &lt;br/&gt;
  But we could avoid this (mostly) for sort and hopefully resolve most&lt;br/&gt;
  comparisons with the fst &quot;index&quot;, maybe only rarely going to the DirectSource...&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="13197975" author="mikemccand" created="Wed, 1 Feb 2012 17:28:22 +0000"  >&lt;p&gt;New patch, still just prototyping on FC, but now all tests pass.&lt;/p&gt;

&lt;p&gt;I enabled packing and the wikipedia title data is now ~43.8% smaller than what FC does today (PagedBytes + PackedInts).&lt;/p&gt;

&lt;p&gt;Results are about the same as before:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;            PKLookup      127.87        2.68      115.22        5.37  -15% -   -3%
       TermTitleSort       69.77        4.32       64.91        2.62  -15% -    3%
        TermBGroup1M       35.85        1.03       34.49        0.92   -8% -    1%
         TermGroup1M       26.58        0.72       26.13        0.38   -5% -    2%
             Respell       75.04        2.63       74.28        1.33   -6% -    4%
              Fuzzy1       86.35        1.93       86.27        1.34   -3% -    3%
              Phrase       18.92        0.57       18.94        0.57   -5% -    6%
            SpanNear        1.46        0.02        1.46        0.05   -4% -    5%
        SloppyPhrase       15.85        0.69       15.93        0.69   -7% -    9%
              Fuzzy2       31.37        0.61       31.65        0.53   -2% -    4%
      TermBGroup1M1P       44.99        1.32       45.47        0.74   -3% -    5%
          AndHighMed       40.22        1.00       41.43        0.32    0% -    6%
            Wildcard       26.11        1.15       27.15        0.21   -1% -    9%
          OrHighHigh        6.14        0.42        6.40        0.34   -7% -   17%
           OrHighMed       10.65        0.72       11.10        0.60   -7% -   17%
         AndHighHigh        9.16        0.33        9.56        0.04    0% -    8%
             Prefix3       43.07        2.32       45.34        0.55   -1% -   12%
                Term       34.11        1.60       36.09        1.19   -2% -   14%
              IntNRQ        7.66        0.64        8.22        0.57   -7% -   25%
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13295277" author="simonw" created="Thu, 14 Jun 2012 21:08:21 +0100"  >&lt;p&gt;here is a first cut at using FST to hold terms in sorted DocValues. This patch holds all data in an FST and currently doesn&apos;t support a direct source ie all FSTs are loaded into memory even during merging. All test (except BWcompat &amp;#8211; wich is good!) pass. I think we can have this as a first step but not being the default? &lt;/p&gt;</comment>
                    <comment id="13295966" author="simonw" created="Fri, 15 Jun 2012 23:29:42 +0100"  >&lt;p&gt;next iteration...&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;using FSTEnum to do getOrdByValue&lt;/li&gt;
	&lt;li&gt;opened up FSTEnum to subclass in different package&lt;/li&gt;
	&lt;li&gt;FSTEnum#seekCeil/Floor now returns a SeekStatus to prevent comparisons&lt;/li&gt;
	&lt;li&gt;fixed some tests to not rely on a &quot;default&quot; values that is a general test problem in docvalues not related to this issue&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I still have some nocommits in there. The current impl of getOrdByValue creates a new FSTEnum for each lookup which is costly we should be able to share it somehow but I really don&apos;t like using a ThreadLocal maybe we need a Lookup object or something like that but I am not sure yet.&lt;/p&gt;</comment>
                    <comment id="13396032" author="mikemccand" created="Mon, 18 Jun 2012 18:03:46 +0100"  >&lt;p&gt;Very cool!&lt;/p&gt;

&lt;p&gt;Why did you need a custom subclass of FSTEnum (instead of&lt;br/&gt;
BytesRefFSTEnum)?  Is it for getOutput?  Couldn&apos;t you&lt;br/&gt;
getCurrent().output instead?&lt;/p&gt;

&lt;p&gt;We could probably make a static Util.getCeil (like Util.get, but&lt;br/&gt;
finds ceiling term if there is no exact match) ... would likely be&lt;br/&gt;
faster than re-using an FSTEnum ... but sorta hairy to write.&lt;/p&gt;

&lt;p&gt;I&apos;m curious how DV sort perf compares ... hopefully it&apos;s little loss&lt;br/&gt;
(going on my previous tests here...).&lt;/p&gt;

&lt;p&gt;Awesome to fix seekCeil to return enum result ... maybe factor out the&lt;br/&gt;
same enum from TermsEnum so we can share it?  And you can remove the&lt;br/&gt;
two TODOs from FSTEnum.java...&lt;/p&gt;

&lt;p&gt;Can ToFSTBytesRefConsumer be moved to FSTSortedBytesImpl.java?&lt;/p&gt;</comment>
                    <comment id="13499887" author="dsmiley" created="Sun, 18 Nov 2012 20:17:05 +0000"  >&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-4562&quot; title=&quot;Pair-wise FST key comparator by ords&quot;&gt;LUCENE-4562&lt;/a&gt; which should improve sorting performance across segments.&lt;/p&gt;

&lt;p&gt;I also wonder if the ord&apos;s might be accessible to the higher level APIs so that those APIs could work off of ord&apos;s (int) instead of terms (byteref).  Maybe this is too radical, or I&apos;m out of my league on understanding this stuff and I&apos;m making no sense.&lt;/p&gt;</comment>
                    <comment id="13499965" author="mikemccand" created="Mon, 19 Nov 2012 00:25:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;I also wonder if the ord&apos;s might be accessible to the higher level APIs so that those APIs could work off of ord&apos;s (int) instead of terms (byteref).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The challenge is the ords are not &quot;global&quot; (ie not a total order): they are only ordered for the terms within one segment, unless your index is single segment, or you&apos;re working with a top-level reader.&lt;/p&gt;</comment>
                    <comment id="13653980" author="thetaphi" created="Fri, 10 May 2013 11:33:37 +0100"  >&lt;p&gt;Closed after release.&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="12310010">
                <name>Incorporates</name>
                                                <inwardlinks description="is part of">
                            <issuelink>
            <issuekey id="12615162">LUCENE-4547</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                        <issuelinktype id="10001">
                <name>dependent</name>
                                <outwardlinks description="depends upon">
                            <issuelink>
            <issuekey id="12616650">LUCENE-4562</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12507737">LUCENE-3121</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12532250" name="LUCENE-3729.patch" size="27986" author="simonw" created="Fri, 15 Jun 2012 23:29:42 +0100" />
                    <attachment id="12532131" name="LUCENE-3729.patch" size="14832" author="simonw" created="Thu, 14 Jun 2012 21:08:21 +0100" />
                    <attachment id="12512771" name="LUCENE-3729.patch" size="6876" author="mikemccand" created="Wed, 1 Feb 2012 17:28:22 +0000" />
                    <attachment id="12512366" name="LUCENE-3729.patch" size="5761" author="mikemccand" created="Sun, 29 Jan 2012 18:27:49 +0000" />
                    <attachment id="12512365" name="LUCENE-3729.patch" size="3599" author="mikemccand" created="Sun, 29 Jan 2012 18:02:21 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>5.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Mon, 30 Jan 2012 19:09:24 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>225715</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>23969</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>