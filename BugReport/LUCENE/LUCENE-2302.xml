<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:09:01 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-2302/LUCENE-2302.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-2302] Replacement for TermAttribute+Impl with extended capabilities (byte[] support, CharSequence, Appendable)</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-2302</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;For flexible indexing terms can be simple byte[] arrays, while the current TermAttribute only supports char[]. This is fine for plain text, but e.g NumericTokenStream should directly work on the byte[] array.&lt;br/&gt;
Also TermAttribute lacks of some interfaces that would make it simplier for users to work with them: Appendable and CharSequence&lt;/p&gt;

&lt;p&gt;I propose to create a new interface &quot;CharTermAttribute&quot; with a clean new API that concentrates on CharSequence and Appendable.&lt;br/&gt;
The implementation class will simply support the old and new interface working on the same term buffer. DEFAULT_ATTRIBUTE_FACTORY will take care of this. So if somebody adds a TermAttribute, he will get an implementation class that can be also used as CharTermAttribute. As both attributes create the same impl instance both calls to addAttribute are equal. So a TokenFilter that adds CharTermAttribute to the source will work with the same instance as the Tokenizer that requested the (deprecated) TermAttribute.&lt;/p&gt;

&lt;p&gt;To also support byte[] only terms like Collation or NumericField needs, a separate getter-only interface will be added, that returns a reusable BytesRef, e.g. BytesRefGetterAttribute. The default implementation class will also support this interface. For backwards compatibility with old self-made-TermAttribute implementations, the indexer will check with hasAttribute(), if the BytesRef getter interface is there and if not will wrap a old-style TermAttribute (a deprecated wrapper class will be provided): new BytesRefGetterAttributeWrapper(TermAttribute), that is used by the indexer then.&lt;/p&gt;</description>
                <environment></environment>
            <key id="12458401">LUCENE-2302</key>
            <summary>Replacement for TermAttribute+Impl with extended capabilities (byte[] support, CharSequence, Appendable)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="thetaphi">Uwe Schindler</assignee>
                                <reporter username="thetaphi">Uwe Schindler</reporter>
                        <labels>
                    </labels>
                <created>Sun, 7 Mar 2010 20:39:42 +0000</created>
                <updated>Fri, 10 May 2013 11:44:03 +0100</updated>
                    <resolved>Fri, 9 Apr 2010 12:50:39 +0100</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>modules/analysis</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                                                  <comments>
                    <comment id="12842499" author="thetaphi" created="Sun, 7 Mar 2010 23:01:46 +0000"  >&lt;p&gt;A CollationFilter will not be needed anymore after that change, as any Tokenizer-Chain that wants to use collation can simply supply a special AttributeFactory to the ctor, that creates a special TermAttributeImpl class with modified getBytesRef().&lt;/p&gt;</comment>
                    <comment id="12842502" author="michaelbusch" created="Sun, 7 Mar 2010 23:13:50 +0000"  >&lt;p&gt;Hmm maybe this is too much magic? Wouldn&apos;t it be simpler to have two completely separate attributes? E.g. CharTermAttribute and ByteTermAttribute. Plus an API in the indexer that specifies which one to use? &lt;/p&gt;</comment>
                    <comment id="12842505" author="steve_rowe" created="Sun, 7 Mar 2010 23:31:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;A CollationFilter will not be needed anymore after that change, as any Tokenizer-Chain that wants to use collation can simply supply a special AttributeFactory to the ctor, that creates a special TermAttributeImpl class with modified getBytesRef(). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Mike M. noted on &lt;a href=&quot;http://issues.apache.org/jira/browse/LUCENE-1435?focusedCommentId=12646667&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12646667&quot; class=&quot;external-link&quot;&gt;LUCENE-1435&lt;/a&gt; that the way to do &quot;internal-to-indexing&quot; collation is to store the original string in the term dictionary, sorted via user-specifiable collation.&lt;/p&gt;</comment>
                    <comment id="12842509" author="mikemccand" created="Mon, 8 Mar 2010 00:10:48 +0000"  >&lt;p&gt;I like that this change would mean indexer has a single getBytes interface for getting the terms data.&lt;/p&gt;

&lt;p&gt;It&apos;d mean the UTF16-&amp;gt;UTF8 encoding it now does would move into CharTermAttr, hidden to the indexer.&lt;/p&gt;

&lt;p&gt;So the indexer only ever works with opaque byte[] data for terms.&lt;/p&gt;

&lt;p&gt;And it&apos;d mean others can make their own term attrs &amp;#8211; maybe my terms are shorts and I send 2 bytes to indexer per term.&lt;/p&gt;</comment>
                    <comment id="12842516" author="mikemccand" created="Mon, 8 Mar 2010 01:36:56 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;A CollationFilter will not be needed anymore after that change, as any Tokenizer-Chain that wants to use collation can simply supply a special AttributeFactory to the ctor, that creates a special TermAttributeImpl class with modified getBytesRef().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Mike M. noted on &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-1435&quot; title=&quot;CollationKeyFilter: convert tokens into CollationKeys encoded using IndexableBinaryStringTools&quot;&gt;&lt;del&gt;LUCENE-1435&lt;/del&gt;&lt;/a&gt; that the way to do &quot;internal-to-indexing&quot; collation is to store the original string in the term dictionary, sorted via user-specifiable collation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This works in flex now &amp;#8211; every field can specify its own Comparator (via the Codec).&lt;/p&gt;

&lt;p&gt;But collation during indexing also works... but&apos;d work better w/ these changes (not have to use indexable binary strings).&lt;/p&gt;</comment>
                    <comment id="12842687" author="thetaphi" created="Mon, 8 Mar 2010 15:08:00 +0000"  >&lt;p&gt;Here a first patch.&lt;/p&gt;

&lt;p&gt;To discuss:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Names of classes/interfaces&lt;/li&gt;
	&lt;li&gt;API finalization&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The following applies to the patch:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;All tests pass&lt;/li&gt;
	&lt;li&gt;You can use old and new TermAttribute in the same TokenStream!&lt;/li&gt;
	&lt;li&gt;If somebody implemented an own TermAttributeImpl (old style), the TermsHashPerField wraps the old attribute using a helper class (per thread). &amp;#8211; Test still missing, but worked by commenting out some code that used the new api.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Currently backwards tests fail because of some checks that are not valid anymore (toString() output of TermAttribute and TestAttributeSource instanceof checks).&lt;/p&gt;</comment>
                    <comment id="12842725" author="thetaphi" created="Mon, 8 Mar 2010 16:35:20 +0000"  >&lt;p&gt;New patch, updated for trunk:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CharTermAttributeImpl.subSequence uses now new String, instead CharBuffer.wrap, as it must be a  &quot;new sequence&quot;, no wrapped&lt;/li&gt;
	&lt;li&gt;Optimized append() to use CharBuffer&apos;s array, else just iterates over sequence.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12842730" author="thetaphi" created="Mon, 8 Mar 2010 16:49:47 +0000"  >&lt;p&gt;Again an update, removed the whole lazy init stuff; so initTermBuffer() and additonal checks removed.&lt;/p&gt;</comment>
                    <comment id="12842740" author="thetaphi" created="Mon, 8 Mar 2010 17:20:16 +0000"  >&lt;p&gt;Removed usage of deprecated API in Token, also javadocs updated.&lt;/p&gt;</comment>
                    <comment id="12842753" author="mikemccand" created="Mon, 8 Mar 2010 17:50:33 +0000"  >&lt;p&gt;Patch looks great Uwe!  Great simplification that indexer only deals&lt;br/&gt;
in byte[] now for a term.  It&apos;s agnostic as to whether those bytes are&lt;br/&gt;
utf8 or something else.  And it means analyzer chains can now do&lt;br/&gt;
direct binary terms (eg NumericTokenStream).&lt;/p&gt;

&lt;p&gt;Some day... we should also try to have indexer not be responsible for&lt;br/&gt;
creating the TokenStream.  Ie it should simply receive, always, an&lt;br/&gt;
AttrSource for a field that needs to be indexed.  This puts nice&lt;br/&gt;
distance b/w indexer core and analysis &amp;#8211; indexer is then fully&lt;br/&gt;
agnostic to how that AttrSource came to be.&lt;/p&gt;

&lt;p&gt;I see &quot;noncommit&quot; &amp;#8211; can you rename to &quot;nocommit&quot; &amp;#8211; let&apos;s try to be&lt;br/&gt;
consistent &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Maybe rewword &quot;The given AttributeSource has no term attribute&quot; --&amp;gt;&lt;br/&gt;
&quot;Could not find a term attribute (that implements&lt;br/&gt;
TermToBytesAttribute) in the AttributeSource&quot;?&lt;/p&gt;

&lt;p&gt;I think we should rename TermsHashPerField&apos;s utf8 var (and in the per&lt;br/&gt;
thread) &amp;#8211; it&apos;s now just bytes, not necessarily utf8.  Maybe termBytes?&lt;/p&gt;

&lt;p&gt;When you temporarily override the length of a too-long term, maybe&lt;br/&gt;
restore it in a try/finally?&lt;/p&gt;</comment>
                    <comment id="12846850" author="thetaphi" created="Thu, 18 Mar 2010 11:20:22 +0000"  >&lt;p&gt;Updated patch for current flex HEAD. Still backwards needs to be fixed.&lt;/p&gt;

&lt;p&gt;How do we want to preceed?:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Name of new Attrubute?&lt;/li&gt;
	&lt;li&gt;Is new CharSeq/Appendable API fine&lt;/li&gt;
	&lt;li&gt;setEmpty()?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks for reviewing!&lt;/p&gt;</comment>
                    <comment id="12846877" author="mikemccand" created="Thu, 18 Mar 2010 12:34:44 +0000"  >&lt;p&gt;I like the name CharTermAttribute.&lt;/p&gt;

&lt;p&gt;How about instead of TermToBytesRefAttribute we name it TermBytesAttribute?  (Ie, drop the &quot;To&quot; and &quot;Ref&quot;).&lt;/p&gt;</comment>
                    <comment id="12846933" author="thetaphi" created="Thu, 18 Mar 2010 14:35:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;How about instead of TermToBytesRefAttribute we name it TermBytesAttribute? (Ie, drop the &quot;To&quot; and &quot;Ref&quot;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This attribute is special, it only has this getter for the bytesref.&lt;/p&gt;

&lt;p&gt;If we need a real &quot;BytesTermAttribute&quot; it should be explicitely defined. Now open is NumericTokenStream and so on&lt;/p&gt;</comment>
                    <comment id="12846934" author="thetaphi" created="Thu, 18 Mar 2010 14:36:16 +0000"  >&lt;p&gt;Was accidently committed with merge. Sorry.&lt;/p&gt;

&lt;p&gt;Revision: 924791&lt;/p&gt;</comment>
                    <comment id="12846952" author="thetaphi" created="Thu, 18 Mar 2010 15:15:09 +0000"  >&lt;p&gt;Add note to backwards compatibility section:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;TermAttribute now changed toString() behaviour&lt;/li&gt;
	&lt;li&gt;Token now implemnts CharSequence but violates its contract&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    <comment id="12851346" author="mikemccand" created="Tue, 30 Mar 2010 11:51:16 +0100"  >&lt;p&gt;Uwe is this issue done?&lt;/p&gt;</comment>
                    <comment id="12851596" author="thetaphi" created="Tue, 30 Mar 2010 22:14:31 +0100"  >&lt;p&gt;Will add the javadocs and think about the CharSequence problems again. It&apos;s tricky &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;20&quot; width=&quot;20&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have less time at the moment, will do hopefully until the weekend. The same for &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2354&quot; title=&quot;Convert NumericUtils and NumericTokenStream to use BytesRef instead of Strings/char[]&quot;&gt;&lt;del&gt;LUCENE-2354&lt;/del&gt;&lt;/a&gt;, which needs some test rewriting.&lt;/p&gt;</comment>
                    <comment id="12853905" author="rcmuir" created="Tue, 6 Apr 2010 13:28:22 +0100"  >&lt;blockquote&gt;&lt;p&gt;Token now implemnts CharSequence but violates its contract&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think this is correct. I don&apos;t care at all about Token&apos;s .toString method, but i care that the analysis api isn&apos;t broken.&lt;br/&gt;
if we do this, then the analysis API is completely wrong when using a Token Attribute Factory.&lt;br/&gt;
In my opinion we should do one of the following two things in the backwards compatibility section, but not break the analysis API:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Token and TokenAttributeFactory was completely removed due to its backwards compatibility problems.&lt;/li&gt;
	&lt;li&gt;Token&apos;s toString method was changed to match the CharSequence interface.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                    <comment id="12854199" author="thetaphi" created="Tue, 6 Apr 2010 22:42:11 +0100"  >&lt;p&gt;I will create a patch with option #2 and lots of documentation and changed backwards tests.&lt;/p&gt;</comment>
                    <comment id="12854209" author="rcmuir" created="Tue, 6 Apr 2010 22:48:03 +0100"  >&lt;blockquote&gt;&lt;p&gt;I will create a patch with option #2 and lots of documentation and changed backwards tests.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1. what do we think of deprecating it too? &lt;/p&gt;

&lt;p&gt;I complained about supporting an old &quot;token-like&quot; api easily a while ago, but you added AttributeSource.copyTo,&lt;br/&gt;
which works well (see Solr SynonymsFilter) and does not have Token&apos;s limitations.&lt;/p&gt;</comment>
                    <comment id="12855355" author="thetaphi" created="Fri, 9 Apr 2010 12:39:06 +0100"  >&lt;p&gt;Patch that fixes the toString() problems in Token and adds missing CHANGES.txt, fixes backwards tests and updates javadocs to document the &quot;backwards&quot; break.&lt;/p&gt;

&lt;p&gt;Deprecating Token should be done in another issue.&lt;/p&gt;

&lt;p&gt;I will commit this soon, to be able to go forward with tokenstream conversion!&lt;/p&gt;</comment>
                    <comment id="12855357" author="thetaphi" created="Fri, 9 Apr 2010 12:50:39 +0100"  >&lt;p&gt;Committed revision: 932369&lt;/p&gt;</comment>
                </comments>
                <issuelinks>
                        <issuelinktype id="10030">
                <name>Reference</name>
                                <outwardlinks description="relates to">
                            <issuelink>
            <issuekey id="12461318">LUCENE-2374</issuekey>
        </issuelink>
                    </outwardlinks>
                                            </issuelinktype>
                        <issuelinktype id="12310040">
                <name>Required</name>
                                                <inwardlinks description="is required by">
                            <issuelink>
            <issuekey id="12460456">LUCENE-2354</issuekey>
        </issuelink>
                    </inwardlinks>
                            </issuelinktype>
                    </issuelinks>
                <attachments>
                    <attachment id="12439146" name="LUCENE-2302.patch" size="54689" author="thetaphi" created="Thu, 18 Mar 2010 11:20:22 +0000" />
                    <attachment id="12438208" name="LUCENE-2302.patch" size="53474" author="thetaphi" created="Mon, 8 Mar 2010 17:20:16 +0000" />
                    <attachment id="12438205" name="LUCENE-2302.patch" size="44607" author="thetaphi" created="Mon, 8 Mar 2010 16:49:47 +0000" />
                    <attachment id="12438203" name="LUCENE-2302.patch" size="45000" author="thetaphi" created="Mon, 8 Mar 2010 16:35:20 +0000" />
                    <attachment id="12438192" name="LUCENE-2302.patch" size="44683" author="thetaphi" created="Mon, 8 Mar 2010 15:07:59 +0000" />
                    <attachment id="12441289" name="LUCENE-2302-toString.patch" size="7702" author="thetaphi" created="Fri, 9 Apr 2010 12:39:06 +0100" />
                </attachments>
            <subtasks>
            <subtask id="12458406">LUCENE-2303</subtask>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>6.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Sun, 7 Mar 2010 23:13:50 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>11488</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>25423</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>