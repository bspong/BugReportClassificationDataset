<!-- 
RSS generated by JIRA (5.2.8#851-sha1:3262fdc28b4bc8b23784e13eadc26a22399f5d88) at Tue Jul 16 13:25:12 UTC 2013

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/LUCENE-3628/LUCENE-3628.xml?field=key&field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>5.2.8</version>
        <build-number>851</build-number>
        <build-date>26-02-2013</build-date>
    </build-info>

<item>
            <title>[LUCENE-3628] Cut Norms over to DocValues</title>
                <link>https://issues.apache.org/jira/browse/LUCENE-3628</link>
                <project id="12310110" key="LUCENE">Lucene - Core</project>
                        <description>&lt;p&gt;since IR is now fully R/O and norms are inside codecs we can cut over to use a IDV impl for writing norms. &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3606&quot; title=&quot;Make IndexReader really read-only in Lucene 4.0&quot;&gt;&lt;del&gt;LUCENE-3606&lt;/del&gt;&lt;/a&gt; has some &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-3606?focusedCommentId=13160559&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13160559&quot; class=&quot;external-link&quot;&gt;ideas&lt;/a&gt; about how this could be implemented&lt;/p&gt;</description>
                <environment></environment>
            <key id="12534446">LUCENE-3628</key>
            <summary>Cut Norms over to DocValues</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                    <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png">Closed</status>
                    <resolution id="1">Fixed</resolution>
                                <assignee username="simonw">Simon Willnauer</assignee>
                                <reporter username="simonw">Simon Willnauer</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Dec 2011 09:51:17 +0000</created>
                <updated>Fri, 10 May 2013 11:45:04 +0100</updated>
                    <resolved>Thu, 5 Jan 2012 16:22:55 +0000</resolved>
                            <version>4.0-ALPHA</version>
                                <fixVersion>4.0-ALPHA</fixVersion>
                                <component>core/index</component>
                <component>core/search</component>
                        <due></due>
                    <votes>0</votes>
                        <watches>0</watches>
                                                    <comments>
                    <comment id="13179502" author="simonw" created="Wed, 4 Jan 2012 14:14:59 +0000"  >&lt;p&gt;Here is a first patch to cut over norms to DocValues. IndexReader now exposes a DocValues normValues(String) method in addition to the still present byte[] norms(String) method. On the codec level I moved all norm value buffering into the codec and remove the NormsWriter/Reader interface entirely in favor of PerDocProducer/Consumer. &lt;/p&gt;

&lt;p&gt;Lucene3x codec has now a private norms impl that reads and writes the old format exposed as DocValues. It basically works as it used to work except of the buffering which is now codec private.&lt;/p&gt;

&lt;p&gt;Lucene4 &amp;amp; Sep codec now uses DocValues directly currently still bound to a single byte norm value. I didn&apos;t want to include changes to the similarity since they are kind of orthogonal to this issue and the patch is big enough already. &lt;/p&gt;

&lt;p&gt;SimpleText has its own simple norms impl also exposed via the DocValues API. To make this entire thing simpler I moved around some code in the values package to make merging work out of the box without writing any merge code if you don&apos;t want to do bulk copies etc. &lt;/p&gt;

&lt;p&gt;this is quite a big change... review welcome!&lt;/p&gt;</comment>
                    <comment id="13179533" author="rcmuir" created="Wed, 4 Jan 2012 15:03:36 +0000"  >&lt;p&gt;thanks for working on this!&lt;/p&gt;

&lt;p&gt;at a glance I really like it. I totally agree that the sim changes should be deferred to a separate issue: in that issue I think we should also nuke the byte[] norms(String) method so we only have the dv api (maybe we even do that first on the followup issue, before the more interesting changes).&lt;/p&gt;

&lt;p&gt;I didnt look too much at the codec api or the default merging or whatever, but we really need this. If simpletext in this patch can have a norms-only DV api and merge it etc, then it must not be too far away from having a full DV impl.&lt;/p&gt;
</comment>
                    <comment id="13179541" author="thetaphi" created="Wed, 4 Jan 2012 15:16:40 +0000"  >&lt;p&gt;Hi I did not yet understand the patch completely, only two things recognized without close review:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Lucene40Codec now imports 3x NormsFormat but it should not use it, I think thats obsolete but maybe there is some backwards compatibility invisible to me&lt;/li&gt;
	&lt;li&gt;byte[] SegmentReader.norms() has less null checks than the new DocValues normsValues() method. Maybe the &quot;old&quot; norms() using byte should simply delegate to the new method, and return the inner byte[]:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] norms(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; field) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  &lt;span class=&quot;code-comment&quot;&gt;// ensureOpen() is called by normValues():
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; DocValues docValues = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.normValues(field);
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (docValues != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
    Source source = docValues.getSource();
    &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; source.hasArray(); &lt;span class=&quot;code-comment&quot;&gt;// TODO cut over to source
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[])source.getArray();  
  }
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maybe this method impl should be in the top-level IndexReader class as final method that delegates to the abstract normValues?&lt;/p&gt;

&lt;p&gt;Otherwise initial patch looks fine!&lt;/p&gt;</comment>
                    <comment id="13179543" author="thetaphi" created="Wed, 4 Jan 2012 15:19:10 +0000"  >&lt;p&gt;BTW: I like IOUtils.deleteFiles &lt;b&gt;g&lt;/b&gt;, should maybe renamed IOUtils.deleteFilesIgnoringExceptions()&lt;/p&gt;</comment>
                    <comment id="13179554" author="mikemccand" created="Wed, 4 Jan 2012 15:29:42 +0000"  >&lt;p&gt;Simon are you using svn 1.7...?  If so, can you regen the patch with &quot;svn diff --show-copies-as-adds&quot;?  Thanks!&lt;/p&gt;</comment>
                    <comment id="13179556" author="simonw" created="Wed, 4 Jan 2012 15:31:06 +0000"  >&lt;p&gt;here is another patch removing unused imports of Lucene3x codecs internal in Lucene4Codec &amp;amp; renamed IOUtils#deleteFiles into deleteFilesIgnoringExceptions(...)&lt;/p&gt;</comment>
                    <comment id="13179574" author="simonw" created="Wed, 4 Jan 2012 15:46:22 +0000"  >&lt;p&gt;new patch with &quot;svn diff --show-copies-as-adds&quot;&lt;/p&gt;</comment>
                    <comment id="13179593" author="thetaphi" created="Wed, 4 Jan 2012 16:11:40 +0000"  >&lt;p&gt;Hi,&lt;br/&gt;
much more readable, thanks!&lt;/p&gt;

&lt;p&gt;Just one question: The Lucene3xNormsConsumer could be theoretically moved to the PreflexRWCodec in test-framework, or am I missing something?&lt;/p&gt;

&lt;p&gt;Means, its impl in Lucene3xNormsFormat should look like this from Lucene3xPostingsFormat:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Override
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; FieldsConsumer fieldsConsumer(SegmentWriteState state) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; codec can only be used &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; reading&quot;&lt;/span&gt;);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                    <comment id="13179637" author="simonw" created="Wed, 4 Jan 2012 17:01:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;Just one question: The Lucene3xNormsConsumer could be theoretically moved to the PreflexRWCodec in test-framework, or am I missing something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yeah good call... I will move this impl to preflex and throw an exception in the 3x impl.&lt;/p&gt;</comment>
                    <comment id="13180245" author="simonw" created="Thu, 5 Jan 2012 08:31:43 +0000"  >&lt;p&gt;next iteration moving the Lucene3xNormsConsumer into Preflex and throwing IAE if Lucene3x codec is used for writing. I also added some more javadoc comments and a missing licence header.&lt;/p&gt;</comment>
                    <comment id="13180248" author="simonw" created="Thu, 5 Jan 2012 08:55:30 +0000"  >&lt;p&gt;another patch delegating to normValues in IR#norms(field) as uwe suggested.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe this method impl should be in the top-level IndexReader class as final method that delegates to the abstract normValues?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I looked into this but subclasses override this and to tricky things like ParallelReader uses MultiNorms internally etc. I think since this method will go away anyway and consumers should call normValues(field) instead and then decide how they use it instead of forcing an array we should just leave this as it is for now. I can certainly move it up to IR but making it final is going to be tricky and likely not worth the trouble.&lt;/p&gt;</comment>
                    <comment id="13180253" author="thetaphi" created="Thu, 5 Jan 2012 09:04:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;I looked into this but subclasses override this and to tricky things like ParallelReader uses MultiNorms internally etc&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This method could theoretically go (and must as final in IR). ParallelReader and SlowMultiReader will also delegate to normValues(), which internally uses MultiDocValues. This should behave identical and MultiNorms would be useless at all and could be deleted (that was the idea). &lt;b&gt;BUT:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I think the problem is that MultiDocValues no longer has an array, so hasArray() returns false? If that&apos;s the case, I agree that we should leave it as it is for now and simply wait until norms() gets obsolete in a later issue.&lt;/p&gt;

&lt;p&gt;Patch looks good!&lt;/p&gt;</comment>
                    <comment id="13180285" author="simonw" created="Thu, 5 Jan 2012 11:17:50 +0000"  >&lt;blockquote&gt;&lt;p&gt; I think the problem is that MultiDocValues no longer has an array, so hasArray() returns false? If that&apos;s the case, I agree that we should leave it as it is for now and simply wait until norms() gets obsolete in a later issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this is the case! Yet, this patch implements getArray / hasArray in MultiDocValues which allow to move the norms(String) method up to IR (its final now). I moved MultiNorms to the test-framework since some tests still need that. We can remove it once norms() is gone. I also added tests for get/hasArray in TestDocValuesIndexing. All test pass, I think this is ready; I will add a changes entry.&lt;/p&gt;</comment>
                    <comment id="13180294" author="thetaphi" created="Thu, 5 Jan 2012 11:35:51 +0000"  >&lt;p&gt;I like the new code in MultiDocValues. The use of reflect.Array and getComponentType/newInstance is fine here, as its only executed when you actually request the merged array, which is expensive by default. If you access DocValues through the standard API, not direct via array, all is as usual. Merging the arrays is slow by default - so who cares? (&amp;lt;- this note is for &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rcmuir&quot; class=&quot;user-hover&quot; rel=&quot;rcmuir&quot;&gt;Robert Muir&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I think we should fix the DirectoryReader test to not use MultiNorms, maybe its a specific test only for MultiNorms, so obsolete? I will look into it!&lt;/p&gt;

&lt;p&gt;Additional note from discussion with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=simonw&quot; class=&quot;user-hover&quot; rel=&quot;simonw&quot;&gt;Simon Willnauer&lt;/a&gt; on IRC: Maybe we should have the same DV cache in SlowMultiReaderWrapper for non-norm DocValues, too.&lt;/p&gt;</comment>
                    <comment id="13180301" author="thetaphi" created="Thu, 5 Jan 2012 11:51:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should fix the DirectoryReader test to not use MultiNorms, maybe its a specific test only for MultiNorms, so obsolete? I will look into it!&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There are more tests, but this can be easily fixed later and MultiNorms nuked (extract from TestDuellingCodecs):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] leftNorms = MultiNorms.norms(leftReader, field);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;replace by:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] leftNorms = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SlowMultiReaderWrapper(leftReader).norms(field);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;The current patch is in my opinion fine to commit, +1. Nice improvement!&lt;/b&gt;&lt;/p&gt;</comment>
                    <comment id="13180435" author="mikemccand" created="Thu, 5 Jan 2012 14:47:13 +0000"  >&lt;p&gt;Patch looks great!  What an awesome step forward... once we later fix&lt;br/&gt;
sim to be able to do whatever it wants at indexing time (eg, use a&lt;br/&gt;
4-byte float), then apps are free to create arbitrary &quot;norms&quot; per doc!&lt;br/&gt;
Wonderful...&lt;/p&gt;

&lt;p&gt;It&apos;s nice we now have a default merge base impl for DocValues, which&lt;br/&gt;
the 4.0 codec then overrides with it&apos;s low-RAM impls.  Though, why do&lt;br/&gt;
we need to add the 3 per-type add methods...?  Can we somehow use the&lt;br/&gt;
existing add that takes a DocValue...?  (We can also fix this up&lt;br/&gt;
separately after committing...).&lt;/p&gt;

&lt;p&gt;The PerDocConsumer.pull seems a bit odd... we need this just because&lt;br/&gt;
we don&apos;t know if we are merging .normValues vs .docValues right?&lt;br/&gt;
Maybe rename pull to getDocValuesToMerge?&lt;/p&gt;

&lt;p&gt;This change is curious:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+            try {
             assert dir.fileExists(IndexFileNames.segmentFileName(filename, &quot;&quot;,
                 Writer.INDEX_EXTENSION));
+            } catch (IOException e) {
+            }
+            break;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... what motivated that?  Does MDW sometimes throw errant exceptions&lt;br/&gt;
in fileExists...?  Or some test was failing...?&lt;/p&gt;

&lt;p&gt;Hmm I hit an exc in TestSearcherManager, but it doesn&apos;t always&lt;br/&gt;
reproduce:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;NOTE: reproduce with: ant test -Dtestcase=TestSearcherManager -Dtestmethod=testSearcherManager -Dtests.seed=9ddad32eae88e7f:4561a85cf046520e:1f76c8c586f3eb2d -Dargs=&quot;-Dfile.encoding=UTF-8&quot;
ENOTE: test params are: codec=Lucene40: {extra29=PostingsFormat(name=MockSep), extra28=PostingsFormat(name=Lucene40WithOrds), body=MockVariableIntBlock(baseBlockSize=43), extra27=PostingsFormat(name=NestedPulsing), extra26=MockVariableIntBlock(baseBlockSize=43), extra25=MockFixedIntBlock(blockSize=1841), extra24=Lucene40(minBlockSize=42 maxBlockSize=86), extra23=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra22=PostingsFormat(name=MockRandom), packID=MockVariableIntBlock(baseBlockSize=43), date=PostingsFormat(name=MockRandom), docid=PostingsFormat(name=MockSep), title=PostingsFormat(name=Lucene40WithOrds), extra20=PostingsFormat(name=Lucene40WithOrds), extra21=PostingsFormat(name=MockSep), extra38=PostingsFormat(name=NestedPulsing), extra8=PostingsFormat(name=MockRandom), extra12=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra37=MockVariableIntBlock(baseBlockSize=43), extra11=PostingsFormat(name=MockRandom), extra9=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra14=MockFixedIntBlock(blockSize=1841), extra13=Lucene40(minBlockSize=42 maxBlockSize=86), extra39=PostingsFormat(name=Lucene40WithOrds), extra34=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra16=PostingsFormat(name=NestedPulsing), extra15=MockVariableIntBlock(baseBlockSize=43), extra33=PostingsFormat(name=MockRandom), extra36=MockFixedIntBlock(blockSize=1841), extra18=PostingsFormat(name=MockSep), extra35=Lucene40(minBlockSize=42 maxBlockSize=86), extra17=PostingsFormat(name=Lucene40WithOrds), extra0=PostingsFormat(name=MockRandom), thisCodeMakesAbsolutelyNoSenseCanWeDeleteIt=PostingsFormat(name=NestedPulsing), extra1=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra2=Lucene40(minBlockSize=42 maxBlockSize=86), extra3=MockFixedIntBlock(blockSize=1841), extra5=PostingsFormat(name=NestedPulsing), extra6=PostingsFormat(name=Lucene40WithOrds), extra7=PostingsFormat(name=MockSep), titleTokenized=Pulsing40(freqCutoff=13 minBlockSize=3 maxBlockSize=44), extra30=PostingsFormat(name=NestedPulsing), extra31=PostingsFormat(name=Lucene40WithOrds), extra32=PostingsFormat(name=MockSep), extra10=PostingsFormat(name=MockSep)}, sim=RandomSimilarityProvider(queryNorm=true,coord=true): {extra29=BM25(k1=1.2,b=0.75), extra28=DFR I(ne)L2, body=DFR I(F)2, extra27=DFR I(F)B3(800.0), extra26=DFR I(n)LZ(0.3), extra25=DFR I(n)3(800.0), extra24=DFR GB2, extra23=DFR I(n)Z(0.3), extra22=DFR I(F)L2, packID=IB SPL-D2, date=DFR I(F)1, docid=DFR GL2, title=DFR I(n)2, extra20=DFR GLZ(0.3), extra21=IB SPL-L2, extra38=DefaultSimilarity, extra8=DFR I(ne)2, extra12=DefaultSimilarity, extra11=IB SPL-D2, extra37=IB SPL-D2, extra9=IB LL-L2, extra14=IB SPL-D1, extra13=DFR I(ne)B3(800.0), extra39=DFR I(ne)B3(800.0), extra16=IB SPL-LZ(0.3), extra34=IB SPL-L1, extra15=DFR I(n)L2, extra33=IB LL-L1, extra18=DFR I(ne)B2, extra36=DFR I(ne)L1, extra35=DFR I(ne)1, extra17=DFR I(n)L3(800.0), extra0=IB SPL-D2, extra1=DefaultSimilarity, extra2=DFR I(ne)B3(800.0), extra3=IB SPL-D1, extra5=IB SPL-LZ(0.3), extra6=DFR I(n)L3(800.0), extra7=DFR I(ne)B2, titleTokenized=DFR I(ne)B1, extra30=DFR I(ne)Z(0.3), extra31=DFR I(n)1, extra32=IB LL-D2, extra10=DFR GB3(800.0)}, locale=pt, timezone=VST
NOTE: all tests run in this JVM:
[TestShardSearching, TestComplexExplanations, TestTieredMergePolicy, TestLongPostings, TestFieldCacheRewriteMethod, TestSlowCollationMethods, TestDocsAndPositions, TestSearcherManager]

java.lang.RuntimeException: MockDirectoryWrapper: cannot close: there are still open files: {_6_nrm.cfs=1}
	at org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:545)
	at org.apache.lucene.index.ThreadedIndexingAndSearchingTestCase.runTest(ThreadedIndexingAndSearchingTestCase.java:629)
	at org.apache.lucene.search.TestSearcherManager.testSearcherManager(TestSearcherManager.java:52)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.apache.lucene.util.LuceneTestCase$3$1.evaluate(LuceneTestCase.java:528)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:165)
	at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runners.Suite.runChild(Suite.java:128)
	at org.junit.runners.Suite.runChild(Suite.java:24)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:136)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:117)
	at org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)
	at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)
	at org.junit.runner.JUnitCore.main(JUnitCore.java:45)
Caused by: java.lang.RuntimeException: unclosed IndexOutput: _6_nrm.cfs
	at org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(MockDirectoryWrapper.java:469)
	at org.apache.lucene.store.MockDirectoryWrapper.createOutput(MockDirectoryWrapper.java:441)
	at org.apache.lucene.store.CompoundFileWriter.getOutput(CompoundFileWriter.java:124)
	at org.apache.lucene.store.CompoundFileWriter.createOutput(CompoundFileWriter.java:260)
	at org.apache.lucene.store.CompoundFileDirectory.createOutput(CompoundFileDirectory.java:290)
	at org.apache.lucene.codecs.lucene40.values.Bytes$BytesWriterBase.getOrCreateDataOut(Bytes.java:257)
	at org.apache.lucene.codecs.lucene40.values.FixedStraightBytesImpl$Writer.merge(FixedStraightBytesImpl.java:138)
	at org.apache.lucene.codecs.DocValuesConsumer.merge(DocValuesConsumer.java:90)
	at org.apache.lucene.codecs.PerDocConsumer.merge(PerDocConsumer.java:57)
	at org.apache.lucene.index.SegmentMerger.mergeNorms(SegmentMerger.java:391)
	at org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:127)
	at org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3630)
	at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3258)
	at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:382)
	at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:451)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                    <comment id="13180470" author="simonw" created="Thu, 5 Jan 2012 15:36:35 +0000"  >&lt;p&gt;next iteration...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Though, why do&lt;br/&gt;
we need to add the 3 per-type add methods...? Can we somehow use the&lt;br/&gt;
existing add that takes a DocValue...? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;those were pulled up during refactoring. I added them to enable the default merging. This patch marks them as protected so they are really an impl detail and not a public API part.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The PerDocConsumer.pull seems a bit odd... &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;renamed to getDocValuesToMerge&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This change is curious:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I catch the exception there since its only the assert that triggers this so it should not be part of the method signature. I wrapped it in a RuntimeEx in this patch.&lt;/p&gt;

&lt;p&gt;This patch also reduces the DocValue.java interface to gettters. the setters are really part of the DocValuesField and are not needed inside the implementation. Nobody should modify a DocValue instance. I also added a fix for the exception mike reported. I can&apos;t reproduce it locally anymore.&lt;/p&gt;</comment>
                    <comment id="13180479" author="mikemccand" created="Thu, 5 Jan 2012 15:48:18 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Though, why do we need to add the 3 per-type add methods...? Can we somehow use the existing add that takes a DocValue...?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;those were pulled up during refactoring. I added them to enable the default merging. This patch marks them as protected so they are really an impl detail and not a public API part.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK... really, ideally (I think?) the base &quot;merge&quot; method should only&lt;br/&gt;
use the public API (ie the very same API indexing/flushing uses when&lt;br/&gt;
writing a new segment).  This is how our other base merge impls&lt;br/&gt;
(stored fields, term vectors, postings) work.  But let&apos;s open a&lt;br/&gt;
separate issue for this...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I also added a fix for the exception mike reported. I can&apos;t reproduce it locally anymore.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looks fixed &amp;#8211; I ran for 135 iterations and no fail (previously it&lt;br/&gt;
failed in first 10 or so...).&lt;/p&gt;
</comment>
                    <comment id="13180482" author="simonw" created="Thu, 5 Jan 2012 15:51:32 +0000"  >&lt;p&gt;I am going to commit this soonish if nobody objects&lt;/p&gt;</comment>
                    <comment id="13180499" author="rcmuir" created="Thu, 5 Jan 2012 16:18:21 +0000"  >&lt;p&gt;I basically agree with Mike&apos;s comments, but we can do this on a followup issue. I think its nice as a step for now that you dont &lt;br/&gt;
have to write merge() to make a DV impl.&lt;/p&gt;

&lt;p&gt;In my opinion the default merge() impl should just form a MultiDocValues of subs and call add() just as flush would, and not &lt;br/&gt;
have &quot;hooks&quot; for subclasses to do bulk merging.&lt;br/&gt;
Subclasses just override the entire merge() to do bulk-merging (or maybe other codec-specific optimizations they have)&lt;/p&gt;</comment>
                    <comment id="13180504" author="simonw" created="Thu, 5 Jan 2012 16:22:55 +0000"  >&lt;p&gt;Committed in revision 1227676&lt;/p&gt;

&lt;p&gt;thanks guys&lt;/p&gt;</comment>
                    <comment id="13182705" author="karl.wettin" created="Mon, 9 Jan 2012 18:56:54 +0000"  >&lt;p&gt;huzzah!&lt;/p&gt;</comment>
                </comments>
                    <attachments>
                    <attachment id="12509559" name="LUCENE-3628.patch" size="180251" author="simonw" created="Thu, 5 Jan 2012 15:36:35 +0000" />
                    <attachment id="12509523" name="LUCENE-3628.patch" size="170244" author="simonw" created="Thu, 5 Jan 2012 11:17:50 +0000" />
                    <attachment id="12509519" name="LUCENE-3628.patch" size="145570" author="simonw" created="Thu, 5 Jan 2012 08:55:30 +0000" />
                    <attachment id="12509514" name="LUCENE-3628.patch" size="145542" author="simonw" created="Thu, 5 Jan 2012 08:31:43 +0000" />
                    <attachment id="12509418" name="LUCENE-3628.patch" size="142712" author="simonw" created="Wed, 4 Jan 2012 15:46:21 +0000" />
                    <attachment id="12509412" name="LUCENE-3628.patch" size="143995" author="simonw" created="Wed, 4 Jan 2012 15:31:06 +0000" />
                    <attachment id="12509403" name="LUCENE-3628.patch" size="142449" author="simonw" created="Wed, 4 Jan 2012 14:14:59 +0000" />
                </attachments>
            <subtasks>
        </subtasks>
                <customfields>
                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                <customfieldname>Attachment count</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>7.0</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                <customfieldname>Date of First Response</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>Wed, 4 Jan 2012 15:03:36 +0000</customfieldvalue>

                </customfieldvalues>
            </customfield>
                                                                                                        <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Global Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>220169</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310120" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                <customfieldname>Lucene Fields</customfieldname>
                <customfieldvalues>
                        <customfieldvalue key="10121"><![CDATA[New]]></customfieldvalue>
    <customfieldvalue key="10120"><![CDATA[Patch Available]]></customfieldvalue>
    
                </customfieldvalues>
            </customfield>
                                            <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                <customfieldname>Rank</customfieldname>
                <customfieldvalues>
                    <customfieldvalue>24070</customfieldvalue>
                </customfieldvalues>
            </customfield>
                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                <customfieldname>Time in Status</customfieldname>
                <customfieldvalues>
                    
                </customfieldvalues>
            </customfield>
                            </customfields>
    </item>
</channel>
</rss>